{
  "$schema": "https://schemastore.azurewebsites.net/schemas/json/sarif-2.1.0-rtm.6.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "oss-detect-backdoor",
          "organization": "Microsoft Corporation",
          "product": "OSSGadget (https://github.com/Microsoft/OSSGadget)",
          "version": "0.0.0+ed0e2cfe6a"
        }
      },
      "results": [
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/encdev"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 34,
                  "endLine": 43,
                  "endColumn": 40,
                  "snippet": {
                    "text": "\t\tfi\n\t\t;;\n\tslot)\n\t\tif echo \"$VDEV_ENC_SYSFS_PATH\" | grep -q '/sys/bus/pci/slots' ; then\n\t\t\tval=\"$(basename \"\"\"$VDEV_ENC_SYSFS_PATH\"\"\")\"\n\t\telse\n\t\t\tval=\"$(cat \"\"\"$VDEV_ENC_SYSFS_PATH/slot\"\"\" 2>/dev/null)\"\n",
                    "rendered": {
                      "text": "\t\tfi\n\t\t;;\n\tslot)\n\t\tif echo \"$VDEV_ENC_SYSFS_PATH\" | grep -q '/sys/bus/pci/slots' ; then\n\t\t\tval=\"$(basename \"\"\"$VDEV_ENC_SYSFS_PATH\"\"\")\"\n\t\telse\n\t\t\tval=\"$(cat \"\"\"$VDEV_ENC_SYSFS_PATH/slot\"\"\" 2>/dev/null)\"\n",
                      "markdown": "`\t\tfi\n\t\t;;\n\tslot)\n\t\tif echo \"$VDEV_ENC_SYSFS_PATH\" | grep -q '/sys/bus/pci/slots' ; then\n\t\t\tval=\"$(basename \"\"\"$VDEV_ENC_SYSFS_PATH\"\"\")\"\n\t\telse\n\t\t\tval=\"$(cat \"\"\"$VDEV_ENC_SYSFS_PATH/slot\"\"\" 2>/dev/null)\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/encdev"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 34,
                  "endLine": 36,
                  "endColumn": 40,
                  "snippet": {
                    "text": "\tval=\"\"\n\tcase $i in\n\tenc)\n\t\tif echo \"$VDEV_ENC_SYSFS_PATH\" | grep -q '/sys/bus/pci/slots' ; then\n\t\t\tval=\"$VDEV_ENC_SYSFS_PATH\"\n\t\telse\n\t\t\tval=\"$(ls \"\"\"$VDEV_ENC_SYSFS_PATH/../../\"\"\" 2>/dev/null)\"\n",
                    "rendered": {
                      "text": "\tval=\"\"\n\tcase $i in\n\tenc)\n\t\tif echo \"$VDEV_ENC_SYSFS_PATH\" | grep -q '/sys/bus/pci/slots' ; then\n\t\t\tval=\"$VDEV_ENC_SYSFS_PATH\"\n\t\telse\n\t\t\tval=\"$(ls \"\"\"$VDEV_ENC_SYSFS_PATH/../../\"\"\" 2>/dev/null)\"\n",
                      "markdown": "`\tval=\"\"\n\tcase $i in\n\tenc)\n\t\tif echo \"$VDEV_ENC_SYSFS_PATH\" | grep -q '/sys/bus/pci/slots' ; then\n\t\t\tval=\"$VDEV_ENC_SYSFS_PATH\"\n\t\telse\n\t\t\tval=\"$(ls \"\"\"$VDEV_ENC_SYSFS_PATH/../../\"\"\" 2>/dev/null)\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/encdev"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 49,
                  "endLine": 16,
                  "endColumn": 54,
                  "snippet": {
                    "text": "\nscript=\"${0##*/}\"\nif [ \"$1\" = \"-h\" ] ; then\n\techo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n\texit\nfi\n\n",
                    "rendered": {
                      "text": "\nscript=\"${0##*/}\"\nif [ \"$1\" = \"-h\" ] ; then\n\techo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n\texit\nfi\n\n",
                      "markdown": "`\nscript=\"${0##*/}\"\nif [ \"$1\" = \"-h\" ] ; then\n\techo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n\texit\nfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/encdev"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 18,
                  "endLine": 16,
                  "endColumn": 24,
                  "snippet": {
                    "text": "\nscript=\"${0##*/}\"\nif [ \"$1\" = \"-h\" ] ; then\n\techo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n\texit\nfi\n\n",
                    "rendered": {
                      "text": "\nscript=\"${0##*/}\"\nif [ \"$1\" = \"-h\" ] ; then\n\techo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n\texit\nfi\n\n",
                      "markdown": "`\nscript=\"${0##*/}\"\nif [ \"$1\" = \"-h\" ] ; then\n\techo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n\texit\nfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/enc"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 34,
                  "endLine": 43,
                  "endColumn": 40,
                  "snippet": {
                    "text": "\t\tfi\n\t\t;;\n\tslot)\n\t\tif echo \"$VDEV_ENC_SYSFS_PATH\" | grep -q '/sys/bus/pci/slots' ; then\n\t\t\tval=\"$(basename \"\"\"$VDEV_ENC_SYSFS_PATH\"\"\")\"\n\t\telse\n\t\t\tval=\"$(cat \"\"\"$VDEV_ENC_SYSFS_PATH/slot\"\"\" 2>/dev/null)\"\n",
                    "rendered": {
                      "text": "\t\tfi\n\t\t;;\n\tslot)\n\t\tif echo \"$VDEV_ENC_SYSFS_PATH\" | grep -q '/sys/bus/pci/slots' ; then\n\t\t\tval=\"$(basename \"\"\"$VDEV_ENC_SYSFS_PATH\"\"\")\"\n\t\telse\n\t\t\tval=\"$(cat \"\"\"$VDEV_ENC_SYSFS_PATH/slot\"\"\" 2>/dev/null)\"\n",
                      "markdown": "`\t\tfi\n\t\t;;\n\tslot)\n\t\tif echo \"$VDEV_ENC_SYSFS_PATH\" | grep -q '/sys/bus/pci/slots' ; then\n\t\t\tval=\"$(basename \"\"\"$VDEV_ENC_SYSFS_PATH\"\"\")\"\n\t\telse\n\t\t\tval=\"$(cat \"\"\"$VDEV_ENC_SYSFS_PATH/slot\"\"\" 2>/dev/null)\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/enc"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 34,
                  "endLine": 36,
                  "endColumn": 40,
                  "snippet": {
                    "text": "\tval=\"\"\n\tcase $i in\n\tenc)\n\t\tif echo \"$VDEV_ENC_SYSFS_PATH\" | grep -q '/sys/bus/pci/slots' ; then\n\t\t\tval=\"$VDEV_ENC_SYSFS_PATH\"\n\t\telse\n\t\t\tval=\"$(ls \"\"\"$VDEV_ENC_SYSFS_PATH/../../\"\"\" 2>/dev/null)\"\n",
                    "rendered": {
                      "text": "\tval=\"\"\n\tcase $i in\n\tenc)\n\t\tif echo \"$VDEV_ENC_SYSFS_PATH\" | grep -q '/sys/bus/pci/slots' ; then\n\t\t\tval=\"$VDEV_ENC_SYSFS_PATH\"\n\t\telse\n\t\t\tval=\"$(ls \"\"\"$VDEV_ENC_SYSFS_PATH/../../\"\"\" 2>/dev/null)\"\n",
                      "markdown": "`\tval=\"\"\n\tcase $i in\n\tenc)\n\t\tif echo \"$VDEV_ENC_SYSFS_PATH\" | grep -q '/sys/bus/pci/slots' ; then\n\t\t\tval=\"$VDEV_ENC_SYSFS_PATH\"\n\t\telse\n\t\t\tval=\"$(ls \"\"\"$VDEV_ENC_SYSFS_PATH/../../\"\"\" 2>/dev/null)\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/enc"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 49,
                  "endLine": 16,
                  "endColumn": 54,
                  "snippet": {
                    "text": "\nscript=\"${0##*/}\"\nif [ \"$1\" = \"-h\" ] ; then\n\techo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n\texit\nfi\n\n",
                    "rendered": {
                      "text": "\nscript=\"${0##*/}\"\nif [ \"$1\" = \"-h\" ] ; then\n\techo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n\texit\nfi\n\n",
                      "markdown": "`\nscript=\"${0##*/}\"\nif [ \"$1\" = \"-h\" ] ; then\n\techo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n\texit\nfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/enc"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 18,
                  "endLine": 16,
                  "endColumn": 24,
                  "snippet": {
                    "text": "\nscript=\"${0##*/}\"\nif [ \"$1\" = \"-h\" ] ; then\n\techo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n\texit\nfi\n\n",
                    "rendered": {
                      "text": "\nscript=\"${0##*/}\"\nif [ \"$1\" = \"-h\" ] ; then\n\techo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n\texit\nfi\n\n",
                      "markdown": "`\nscript=\"${0##*/}\"\nif [ \"$1\" = \"-h\" ] ; then\n\techo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n\texit\nfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/vendor"
                },
                "region": {
                  "startLine": 88,
                  "startColumn": 21,
                  "endLine": 88,
                  "endColumn": 26,
                  "snippet": {
                    "text": "\tval=\"\"\n\tif val=$(eval \"lsblk -dl -n -o $i $somepath 2>/dev/null\") ; then\n\t\t# Remove leading/trailing whitespace from value\n\t\tval=$(echo \"$val\" | sed -e 's/^[[:space:]]*//' \\\n\t\t     -e 's/[[:space:]]*$//')\n\tfi\n\techo \"$i=$val\"\n",
                    "rendered": {
                      "text": "\tval=\"\"\n\tif val=$(eval \"lsblk -dl -n -o $i $somepath 2>/dev/null\") ; then\n\t\t# Remove leading/trailing whitespace from value\n\t\tval=$(echo \"$val\" | sed -e 's/^[[:space:]]*//' \\\n\t\t     -e 's/[[:space:]]*$//')\n\tfi\n\techo \"$i=$val\"\n",
                      "markdown": "`\tval=\"\"\n\tif val=$(eval \"lsblk -dl -n -o $i $somepath 2>/dev/null\") ; then\n\t\t# Remove leading/trailing whitespace from value\n\t\tval=$(echo \"$val\" | sed -e 's/^[[:space:]]*//' \\\n\t\t     -e 's/[[:space:]]*$//')\n\tfi\n\techo \"$i=$val\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/vendor"
                },
                "region": {
                  "startLine": 79,
                  "startColumn": 44,
                  "endLine": 79,
                  "endColumn": 49,
                  "snippet": {
                    "text": "\t# Special case: Looking up the size of a file-based vdev can't\n\t# be done with lsblk.\n\tif [ \"$i\" = \"size\" ] && [ -f \"$somepath\" ] ; then\n\t\tsize=$(du -h --apparent-size \"$somepath\" | cut -f 1)\n\t\techo \"size=$size\"\n\t\tcontinue\n\tfi\n",
                    "rendered": {
                      "text": "\t# Special case: Looking up the size of a file-based vdev can't\n\t# be done with lsblk.\n\tif [ \"$i\" = \"size\" ] && [ -f \"$somepath\" ] ; then\n\t\tsize=$(du -h --apparent-size \"$somepath\" | cut -f 1)\n\t\techo \"size=$size\"\n\t\tcontinue\n\tfi\n",
                      "markdown": "`\t# Special case: Looking up the size of a file-based vdev can't\n\t# be done with lsblk.\n\tif [ \"$i\" = \"size\" ] && [ -f \"$somepath\" ] ; then\n\t\tsize=$(du -h --apparent-size \"$somepath\" | cut -f 1)\n\t\techo \"size=$size\"\n\t\tcontinue\n\tfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/vendor"
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 56,
                  "endLine": 54,
                  "endColumn": 61,
                  "snippet": {
                    "text": "script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n",
                    "rendered": {
                      "text": "script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n",
                      "markdown": "`script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/vendor"
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 25,
                  "endLine": 54,
                  "endColumn": 31,
                  "snippet": {
                    "text": "script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n",
                    "rendered": {
                      "text": "script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n",
                      "markdown": "`script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/vendor"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 8,
                  "endLine": 40,
                  "endColumn": 16,
                  "snippet": {
                    "text": "#    DISC-MAX  discard max bytes\n#   DISC-ZERO  discard zeroes data\n#\n# If the script is run as just 'lsblk' then print out disk size, vendor,\n# and model number.\n\n\n",
                    "rendered": {
                      "text": "#    DISC-MAX  discard max bytes\n#   DISC-ZERO  discard zeroes data\n#\n# If the script is run as just 'lsblk' then print out disk size, vendor,\n# and model number.\n\n\n",
                      "markdown": "`#    DISC-MAX  discard max bytes\n#   DISC-ZERO  discard zeroes data\n#\n# If the script is run as just 'lsblk' then print out disk size, vendor,\n# and model number.\n\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/vendor"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 21,
                  "endLine": 25,
                  "endColumn": 27,
                  "snippet": {
                    "text": "#       STATE  state of the device\n#       OWNER  user name\n#       GROUP  group name\n#        MODE  device node permissions\n#   ALIGNMENT  alignment offset\n#      MIN-IO  minimum I/O size\n#      OPT-IO  optimal I/O size\n",
                    "rendered": {
                      "text": "#       STATE  state of the device\n#       OWNER  user name\n#       GROUP  group name\n#        MODE  device node permissions\n#   ALIGNMENT  alignment offset\n#      MIN-IO  minimum I/O size\n#      OPT-IO  optimal I/O size\n",
                      "markdown": "`#       STATE  state of the device\n#       OWNER  user name\n#       GROUP  group name\n#        MODE  device node permissions\n#   ALIGNMENT  alignment offset\n#      MIN-IO  minimum I/O size\n#      OPT-IO  optimal I/O size\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/vendor"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 46,
                  "endLine": 5,
                  "endColumn": 54,
                  "snippet": {
                    "text": "#\n# Print some common lsblk values\n#\n# Any (lowercased) name symlinked to the lsblk script will be passed to lsblk\n# as one of its --output names.  Here's a partial list of --output names\n# from the lsblk binary:\n#\n",
                    "rendered": {
                      "text": "#\n# Print some common lsblk values\n#\n# Any (lowercased) name symlinked to the lsblk script will be passed to lsblk\n# as one of its --output names.  Here's a partial list of --output names\n# from the lsblk binary:\n#\n",
                      "markdown": "`#\n# Print some common lsblk values\n#\n# Any (lowercased) name symlinked to the lsblk script will be passed to lsblk\n# as one of its --output names.  Here's a partial list of --output names\n# from the lsblk binary:\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/nvme_err"
                },
                "region": {
                  "startLine": 244,
                  "startColumn": 47,
                  "endLine": 244,
                  "endColumn": 52,
                  "snippet": {
                    "text": "\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n\nif [ -n \"$without_vals\" ]; then\n",
                    "rendered": {
                      "text": "\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n\nif [ -n \"$without_vals\" ]; then\n",
                      "markdown": "`\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n\nif [ -n \"$without_vals\" ]; then\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/nvme_err"
                },
                "region": {
                  "startLine": 242,
                  "startColumn": 29,
                  "endLine": 242,
                  "endColumn": 34,
                  "snippet": {
                    "text": "\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n",
                    "rendered": {
                      "text": "\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n",
                      "markdown": "`\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/nvme_err"
                },
                "region": {
                  "startLine": 242,
                  "startColumn": 1,
                  "endLine": 242,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n",
                    "rendered": {
                      "text": "\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n",
                      "markdown": "`\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/nvme_err"
                },
                "region": {
                  "startLine": 241,
                  "startColumn": 1,
                  "endLine": 241,
                  "endColumn": 7,
                  "snippet": {
                    "text": "if [ -n \"$with_vals\" ]; then\n\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\n",
                    "rendered": {
                      "text": "if [ -n \"$with_vals\" ]; then\n\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\n",
                      "markdown": "`if [ -n \"$with_vals\" ]; then\n\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/nvme_err"
                },
                "region": {
                  "startLine": 237,
                  "startColumn": 25,
                  "endLine": 237,
                  "endColumn": 31,
                  "snippet": {
                    "text": "\tscripts=\"$script\"\nesac\n\nwith_vals=$(echo \"$out\" | grep -E \"$scripts\")\nif [ -n \"$with_vals\" ]; then\n\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n",
                    "rendered": {
                      "text": "\tscripts=\"$script\"\nesac\n\nwith_vals=$(echo \"$out\" | grep -E \"$scripts\")\nif [ -n \"$with_vals\" ]; then\n\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n",
                      "markdown": "`\tscripts=\"$script\"\nesac\n\nwith_vals=$(echo \"$out\" | grep -E \"$scripts\")\nif [ -n \"$with_vals\" ]; then\n\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/nvme_err"
                },
                "region": {
                  "startLine": 199,
                  "startColumn": 36,
                  "endLine": 199,
                  "endColumn": 41,
                  "snippet": {
                    "text": "END {print \"type=\"type; ORS=\"\\n\"; print \"\"}\n');\nfi\ntype=$(echo \"$out\" | grep '^type=' | cut -d '=' -f 2)\n\n# If type is not set by now, either we don't have a block device\n# or smartctl failed. Either way, default to ATA and set $out to\n",
                    "rendered": {
                      "text": "END {print \"type=\"type; ORS=\"\\n\"; print \"\"}\n');\nfi\ntype=$(echo \"$out\" | grep '^type=' | cut -d '=' -f 2)\n\n# If type is not set by now, either we don't have a block device\n# or smartctl failed. Either way, default to ATA and set $out to\n",
                      "markdown": "`END {print \"type=\"type; ORS=\"\\n\"; print \"\"}\n');\nfi\ntype=$(echo \"$out\" | grep '^type=' | cut -d '=' -f 2)\n\n# If type is not set by now, either we don't have a block device\n# or smartctl failed. Either way, default to ATA and set $out to\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/nvme_err"
                },
                "region": {
                  "startLine": 199,
                  "startColumn": 20,
                  "endLine": 199,
                  "endColumn": 26,
                  "snippet": {
                    "text": "END {print \"type=\"type; ORS=\"\\n\"; print \"\"}\n');\nfi\ntype=$(echo \"$out\" | grep '^type=' | cut -d '=' -f 2)\n\n# If type is not set by now, either we don't have a block device\n# or smartctl failed. Either way, default to ATA and set $out to\n",
                    "rendered": {
                      "text": "END {print \"type=\"type; ORS=\"\\n\"; print \"\"}\n');\nfi\ntype=$(echo \"$out\" | grep '^type=' | cut -d '=' -f 2)\n\n# If type is not set by now, either we don't have a block device\n# or smartctl failed. Either way, default to ATA and set $out to\n",
                      "markdown": "`END {print \"type=\"type; ORS=\"\\n\"; print \"\"}\n');\nfi\ntype=$(echo \"$out\" | grep '^type=' | cut -d '=' -f 2)\n\n# If type is not set by now, either we don't have a block device\n# or smartctl failed. Either way, default to ATA and set $out to\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/nvme_err"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 24,
                  "endLine": 103,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\t# NVMe:\n\t#       SMART/Health Information (NVMe Log 0xnn, NSID 0xnn)\n\t#\n\tout=$(echo \"$raw_out\" | awk '\n# SAS specific\n/read:/{print \"rrd=\"$4\"\\nr_cor=\"$5\"\\nr_proc=\"$7\"\\nr_ucor=\"$8}\n/write:/{print \"rwr=\"$4\"\\nw_cor=\"$5\"\\nw_proc=\"$7\"\\nw_ucor=\"$8}\n",
                    "rendered": {
                      "text": "\t# NVMe:\n\t#       SMART/Health Information (NVMe Log 0xnn, NSID 0xnn)\n\t#\n\tout=$(echo \"$raw_out\" | awk '\n# SAS specific\n/read:/{print \"rrd=\"$4\"\\nr_cor=\"$5\"\\nr_proc=\"$7\"\\nr_ucor=\"$8}\n/write:/{print \"rwr=\"$4\"\\nw_cor=\"$5\"\\nw_proc=\"$7\"\\nw_ucor=\"$8}\n",
                      "markdown": "`\t# NVMe:\n\t#       SMART/Health Information (NVMe Log 0xnn, NSID 0xnn)\n\t#\n\tout=$(echo \"$raw_out\" | awk '\n# SAS specific\n/read:/{print \"rrd=\"$4\"\\nr_cor=\"$5\"\\nr_proc=\"$7\"\\nr_ucor=\"$8}\n/write:/{print \"rwr=\"$4\"\\nw_cor=\"$5\"\\nw_proc=\"$7\"\\nw_ucor=\"$8}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/nvme_err"
                },
                "region": {
                  "startLine": 83,
                  "startColumn": 3,
                  "endLine": 83,
                  "endColumn": 8,
                  "snippet": {
                    "text": "\nif [ -b \"$somepath\" ] && PATH=\"/usr/sbin:$PATH\" command -v smartctl > /dev/null || [ -n \"$samples\" ] ; then\n\tif [ -n \"$samples\" ] ; then\n\t\t# cat a smartctl output text file instead of running smartctl\n\t\t# on a vdev (only used for developer testing).\n\t\tfile=$(get_filename_from_dir \"$samples\")\n\t\techo \"file=$file\"\n",
                    "rendered": {
                      "text": "\nif [ -b \"$somepath\" ] && PATH=\"/usr/sbin:$PATH\" command -v smartctl > /dev/null || [ -n \"$samples\" ] ; then\n\tif [ -n \"$samples\" ] ; then\n\t\t# cat a smartctl output text file instead of running smartctl\n\t\t# on a vdev (only used for developer testing).\n\t\tfile=$(get_filename_from_dir \"$samples\")\n\t\techo \"file=$file\"\n",
                      "markdown": "`\nif [ -b \"$somepath\" ] && PATH=\"/usr/sbin:$PATH\" command -v smartctl > /dev/null || [ -n \"$samples\" ] ; then\n\tif [ -n \"$samples\" ] ; then\n\t\t# cat a smartctl output text file instead of running smartctl\n\t\t# on a vdev (only used for developer testing).\n\t\tfile=$(get_filename_from_dir \"$samples\")\n\t\techo \"file=$file\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/nvme_err"
                },
                "region": {
                  "startLine": 68,
                  "startColumn": 56,
                  "endLine": 68,
                  "endColumn": 61,
                  "snippet": {
                    "text": "script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n",
                    "rendered": {
                      "text": "script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n",
                      "markdown": "`script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/nvme_err"
                },
                "region": {
                  "startLine": 68,
                  "startColumn": 25,
                  "endLine": 68,
                  "endColumn": 31,
                  "snippet": {
                    "text": "script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n",
                    "rendered": {
                      "text": "script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n",
                      "markdown": "`script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/nvme_err"
                },
                "region": {
                  "startLine": 56,
                  "endLine": 56,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\tnum_files=$(find \"$dir\" -maxdepth 1 -type f | wc -l)\n\tmod=$((pid % num_files))\n\ti=0\n\tfind \"$dir\" -type f -printf '%f\\n' | while read -r file ; do\n\t\tif [ \"$mod\" = \"$i\" ] ; then\n\t\t\techo \"$file\"\n\t\t\tbreak\n",
                    "rendered": {
                      "text": "\tnum_files=$(find \"$dir\" -maxdepth 1 -type f | wc -l)\n\tmod=$((pid % num_files))\n\ti=0\n\tfind \"$dir\" -type f -printf '%f\\n' | while read -r file ; do\n\t\tif [ \"$mod\" = \"$i\" ] ; then\n\t\t\techo \"$file\"\n\t\t\tbreak\n",
                      "markdown": "`\tnum_files=$(find \"$dir\" -maxdepth 1 -type f | wc -l)\n\tmod=$((pid % num_files))\n\ti=0\n\tfind \"$dir\" -type f -printf '%f\\n' | while read -r file ; do\n\t\tif [ \"$mod\" = \"$i\" ] ; then\n\t\t\techo \"$file\"\n\t\t\tbreak\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/nvme_err"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 38,
                  "endLine": 47,
                  "endColumn": 46,
                  "snippet": {
                    "text": "#\n# Look in directory DIR and return a filename from it.  The filename returned\n# is chosen quasi-sequentially (based off our PID).  This allows us to return\n# a different filename every time this script is invoked (which we do for each\n# vdev), without having to maintain state.\nget_filename_from_dir()\n{\n",
                    "rendered": {
                      "text": "#\n# Look in directory DIR and return a filename from it.  The filename returned\n# is chosen quasi-sequentially (based off our PID).  This allows us to return\n# a different filename every time this script is invoked (which we do for each\n# vdev), without having to maintain state.\nget_filename_from_dir()\n{\n",
                      "markdown": "`#\n# Look in directory DIR and return a filename from it.  The filename returned\n# is chosen quasi-sequentially (based off our PID).  This allows us to return\n# a different filename every time this script is invoked (which we do for each\n# vdev), without having to maintain state.\nget_filename_from_dir()\n{\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/nvme_err"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 28,
                  "endLine": 47,
                  "endColumn": 34,
                  "snippet": {
                    "text": "#\n# Look in directory DIR and return a filename from it.  The filename returned\n# is chosen quasi-sequentially (based off our PID).  This allows us to return\n# a different filename every time this script is invoked (which we do for each\n# vdev), without having to maintain state.\nget_filename_from_dir()\n{\n",
                    "rendered": {
                      "text": "#\n# Look in directory DIR and return a filename from it.  The filename returned\n# is chosen quasi-sequentially (based off our PID).  This allows us to return\n# a different filename every time this script is invoked (which we do for each\n# vdev), without having to maintain state.\nget_filename_from_dir()\n{\n",
                      "markdown": "`#\n# Look in directory DIR and return a filename from it.  The filename returned\n# is chosen quasi-sequentially (based off our PID).  This allows us to return\n# a different filename every time this script is invoked (which we do for each\n# vdev), without having to maintain state.\nget_filename_from_dir()\n{\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/nvme_err"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 27,
                  "endLine": 20,
                  "endColumn": 36,
                  "snippet": {
                    "text": "hours_on:\tShow number of hours drive powered on (all drives).\nrealloc:\tShow SMART reallocated sectors count (ATA).\nrep_ucor:\tShow SMART reported uncorrectable count (ATA).\ncmd_to:\t\tShow SMART command timeout count (ATA).\npend_sec:\tShow SMART current pending sector count (ATA).\noff_ucor:\tShow SMART offline uncorrectable errors (ATA).\nata_err:\tShow SMART ATA errors (ATA).\n",
                    "rendered": {
                      "text": "hours_on:\tShow number of hours drive powered on (all drives).\nrealloc:\tShow SMART reallocated sectors count (ATA).\nrep_ucor:\tShow SMART reported uncorrectable count (ATA).\ncmd_to:\t\tShow SMART command timeout count (ATA).\npend_sec:\tShow SMART current pending sector count (ATA).\noff_ucor:\tShow SMART offline uncorrectable errors (ATA).\nata_err:\tShow SMART ATA errors (ATA).\n",
                      "markdown": "`hours_on:\tShow number of hours drive powered on (all drives).\nrealloc:\tShow SMART reallocated sectors count (ATA).\nrep_ucor:\tShow SMART reported uncorrectable count (ATA).\ncmd_to:\t\tShow SMART command timeout count (ATA).\npend_sec:\tShow SMART current pending sector count (ATA).\noff_ucor:\tShow SMART offline uncorrectable errors (ATA).\nata_err:\tShow SMART ATA errors (ATA).\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zfs_prepare_disk"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 26,
                  "endLine": 7,
                  "endColumn": 34,
                  "snippet": {
                    "text": "# before a disk is about to be added into the pool.  It can be modified by\n# the user to run whatever commands are necessary to prepare a disk for\n# inclusion into the pool.  For example, users can add lines to this\n# script to do things like update the drive's firmware or check the drive's\n# health.  The script is optional and can be removed if it is not needed.\n#\n# See the zfs_prepare_disk(8) man page for details.\n",
                    "rendered": {
                      "text": "# before a disk is about to be added into the pool.  It can be modified by\n# the user to run whatever commands are necessary to prepare a disk for\n# inclusion into the pool.  For example, users can add lines to this\n# script to do things like update the drive's firmware or check the drive's\n# health.  The script is optional and can be removed if it is not needed.\n#\n# See the zfs_prepare_disk(8) man page for details.\n",
                      "markdown": "`# before a disk is about to be added into the pool.  It can be modified by\n# the user to run whatever commands are necessary to prepare a disk for\n# inclusion into the pool.  For example, users can add lines to this\n# script to do things like update the drive's firmware or check the drive's\n# health.  The script is optional and can be removed if it is not needed.\n#\n# See the zfs_prepare_disk(8) man page for details.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zfs_prepare_disk"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 14,
                  "endLine": 8,
                  "endColumn": 22,
                  "snippet": {
                    "text": "# the user to run whatever commands are necessary to prepare a disk for\n# inclusion into the pool.  For example, users can add lines to this\n# script to do things like update the drive's firmware or check the drive's\n# health.  The script is optional and can be removed if it is not needed.\n#\n# See the zfs_prepare_disk(8) man page for details.\n#\n",
                    "rendered": {
                      "text": "# the user to run whatever commands are necessary to prepare a disk for\n# inclusion into the pool.  For example, users can add lines to this\n# script to do things like update the drive's firmware or check the drive's\n# health.  The script is optional and can be removed if it is not needed.\n#\n# See the zfs_prepare_disk(8) man page for details.\n#\n",
                      "markdown": "`# the user to run whatever commands are necessary to prepare a disk for\n# inclusion into the pool.  For example, users can add lines to this\n# script to do things like update the drive's firmware or check the drive's\n# health.  The script is optional and can be removed if it is not needed.\n#\n# See the zfs_prepare_disk(8) man page for details.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zfs_prepare_disk"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 1,
                  "endLine": 7,
                  "endColumn": 9,
                  "snippet": {
                    "text": "# before a disk is about to be added into the pool.  It can be modified by\n# the user to run whatever commands are necessary to prepare a disk for\n# inclusion into the pool.  For example, users can add lines to this\n# script to do things like update the drive's firmware or check the drive's\n# health.  The script is optional and can be removed if it is not needed.\n#\n# See the zfs_prepare_disk(8) man page for details.\n",
                    "rendered": {
                      "text": "# before a disk is about to be added into the pool.  It can be modified by\n# the user to run whatever commands are necessary to prepare a disk for\n# inclusion into the pool.  For example, users can add lines to this\n# script to do things like update the drive's firmware or check the drive's\n# health.  The script is optional and can be removed if it is not needed.\n#\n# See the zfs_prepare_disk(8) man page for details.\n",
                      "markdown": "`# before a disk is about to be added into the pool.  It can be modified by\n# the user to run whatever commands are necessary to prepare a disk for\n# inclusion into the pool.  For example, users can add lines to this\n# script to do things like update the drive's firmware or check the drive's\n# health.  The script is optional and can be removed if it is not needed.\n#\n# See the zfs_prepare_disk(8) man page for details.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zfs_prepare_disk"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 28,
                  "endLine": 3,
                  "endColumn": 36,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# This is an optional helper script that is automatically called by libzfs\n# before a disk is about to be added into the pool.  It can be modified by\n# the user to run whatever commands are necessary to prepare a disk for\n# inclusion into the pool.  For example, users can add lines to this\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# This is an optional helper script that is automatically called by libzfs\n# before a disk is about to be added into the pool.  It can be modified by\n# the user to run whatever commands are necessary to prepare a disk for\n# inclusion into the pool.  For example, users can add lines to this\n",
                      "markdown": "`#!/bin/sh\n#\n# This is an optional helper script that is automatically called by libzfs\n# before a disk is about to be added into the pool.  It can be modified by\n# the user to run whatever commands are necessary to prepare a disk for\n# inclusion into the pool.  For example, users can add lines to this\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/lib/dracut/modules.d/90zfs/zfs-nonroot-necessities.service"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 7,
                  "endLine": 15,
                  "endColumn": 14,
                  "snippet": {
                    "text": "    _zfs_nonroot_necessities_cb() {                                   \\\n        /usr/sbin/zfs mount | grep -m1 -q \"^$1 \" && return 0;         \\\n        echo \"Mounting $1 on /sysroot$2\";                             \\\n        mount -o zfsutil -t zfs \"$1\" \"/sysroot$2\";                    \\\n    };                                                                \\\n    for_relevant_root_children \"${BOOTFS}\" _zfs_nonroot_necessities_cb'\n\n",
                    "rendered": {
                      "text": "    _zfs_nonroot_necessities_cb() {                                   \\\n        /usr/sbin/zfs mount | grep -m1 -q \"^$1 \" && return 0;         \\\n        echo \"Mounting $1 on /sysroot$2\";                             \\\n        mount -o zfsutil -t zfs \"$1\" \"/sysroot$2\";                    \\\n    };                                                                \\\n    for_relevant_root_children \"${BOOTFS}\" _zfs_nonroot_necessities_cb'\n\n",
                      "markdown": "`    _zfs_nonroot_necessities_cb() {                                   \\\n        /usr/sbin/zfs mount | grep -m1 -q \"^$1 \" && return 0;         \\\n        echo \"Mounting $1 on /sysroot$2\";                             \\\n        mount -o zfsutil -t zfs \"$1\" \"/sysroot$2\";                    \\\n    };                                                                \\\n    for_relevant_root_children \"${BOOTFS}\" _zfs_nonroot_necessities_cb'\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/lib/dracut/modules.d/90zfs/zfs-nonroot-necessities.service"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 29,
                  "endLine": 13,
                  "endColumn": 35,
                  "snippet": {
                    "text": "ExecStart=/bin/sh -c '                                                \\\n    . /lib/dracut-zfs-lib.sh;                                         \\\n    _zfs_nonroot_necessities_cb() {                                   \\\n        /usr/sbin/zfs mount | grep -m1 -q \"^$1 \" && return 0;         \\\n        echo \"Mounting $1 on /sysroot$2\";                             \\\n        mount -o zfsutil -t zfs \"$1\" \"/sysroot$2\";                    \\\n    };                                                                \\\n",
                    "rendered": {
                      "text": "ExecStart=/bin/sh -c '                                                \\\n    . /lib/dracut-zfs-lib.sh;                                         \\\n    _zfs_nonroot_necessities_cb() {                                   \\\n        /usr/sbin/zfs mount | grep -m1 -q \"^$1 \" && return 0;         \\\n        echo \"Mounting $1 on /sysroot$2\";                             \\\n        mount -o zfsutil -t zfs \"$1\" \"/sysroot$2\";                    \\\n    };                                                                \\\n",
                      "markdown": "`ExecStart=/bin/sh -c '                                                \\\n    . /lib/dracut-zfs-lib.sh;                                         \\\n    _zfs_nonroot_necessities_cb() {                                   \\\n        /usr/sbin/zfs mount | grep -m1 -q \"^$1 \" && return 0;         \\\n        echo \"Mounting $1 on /sysroot$2\";                             \\\n        mount -o zfsutil -t zfs \"$1\" \"/sysroot$2\";                    \\\n    };                                                                \\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/lib/dracut/modules.d/90zfs/zfs-nonroot-necessities.service"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 21,
                  "endLine": 13,
                  "endColumn": 28,
                  "snippet": {
                    "text": "ExecStart=/bin/sh -c '                                                \\\n    . /lib/dracut-zfs-lib.sh;                                         \\\n    _zfs_nonroot_necessities_cb() {                                   \\\n        /usr/sbin/zfs mount | grep -m1 -q \"^$1 \" && return 0;         \\\n        echo \"Mounting $1 on /sysroot$2\";                             \\\n        mount -o zfsutil -t zfs \"$1\" \"/sysroot$2\";                    \\\n    };                                                                \\\n",
                    "rendered": {
                      "text": "ExecStart=/bin/sh -c '                                                \\\n    . /lib/dracut-zfs-lib.sh;                                         \\\n    _zfs_nonroot_necessities_cb() {                                   \\\n        /usr/sbin/zfs mount | grep -m1 -q \"^$1 \" && return 0;         \\\n        echo \"Mounting $1 on /sysroot$2\";                             \\\n        mount -o zfsutil -t zfs \"$1\" \"/sysroot$2\";                    \\\n    };                                                                \\\n",
                      "markdown": "`ExecStart=/bin/sh -c '                                                \\\n    . /lib/dracut-zfs-lib.sh;                                         \\\n    _zfs_nonroot_necessities_cb() {                                   \\\n        /usr/sbin/zfs mount | grep -m1 -q \"^$1 \" && return 0;         \\\n        echo \"Mounting $1 on /sysroot$2\";                             \\\n        mount -o zfsutil -t zfs \"$1\" \"/sysroot$2\";                    \\\n    };                                                                \\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/etc/init.d/zfs-load-key"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 48,
                  "endLine": 71,
                  "endColumn": 53,
                  "snippet": {
                    "text": "{\n\tzfs_log_begin_msg \"Unload ZFS filesystem(s) key\"\n\n\t\"$ZFS\" list -Ho name,encryptionroot,keystatus | sed '1!G;h;$!d' |\n\t    while IFS=\"\t\" read -r name encryptionroot keystatus; do\n\t\tif [ \"$encryptionroot\" != \"-\" ] &&\n\t\t\t[ \"$name\" = \"$encryptionroot\" ] &&\n",
                    "rendered": {
                      "text": "{\n\tzfs_log_begin_msg \"Unload ZFS filesystem(s) key\"\n\n\t\"$ZFS\" list -Ho name,encryptionroot,keystatus | sed '1!G;h;$!d' |\n\t    while IFS=\"\t\" read -r name encryptionroot keystatus; do\n\t\tif [ \"$encryptionroot\" != \"-\" ] &&\n\t\t\t[ \"$name\" = \"$encryptionroot\" ] &&\n",
                      "markdown": "`{\n\tzfs_log_begin_msg \"Unload ZFS filesystem(s) key\"\n\n\t\"$ZFS\" list -Ho name,encryptionroot,keystatus | sed '1!G;h;$!d' |\n\t    while IFS=\"\t\" read -r name encryptionroot keystatus; do\n\t\tif [ \"$encryptionroot\" != \"-\" ] &&\n\t\t\t[ \"$name\" = \"$encryptionroot\" ] &&\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/etc/init.d/zfs-load-key"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 24,
                  "endLine": 30,
                  "snippet": {
                    "text": "# This script is based on debian/zfsutils.zfs.init from the\n# Debian GNU/kFreeBSD zfsutils 8.1-3 package, written by Aurelien Jarno.\n\n# Source the common init script\n. /etc/zfs/zfs-functions\n\n# ----------------------------------------------------\n\n",
                    "rendered": {
                      "text": "# This script is based on debian/zfsutils.zfs.init from the\n# Debian GNU/kFreeBSD zfsutils 8.1-3 package, written by Aurelien Jarno.\n\n# Source the common init script\n. /etc/zfs/zfs-functions\n\n# ----------------------------------------------------\n\n",
                      "markdown": "`# This script is based on debian/zfsutils.zfs.init from the\n# Debian GNU/kFreeBSD zfsutils 8.1-3 package, written by Aurelien Jarno.\n\n# Source the common init script\n. /etc/zfs/zfs-functions\n\n# ----------------------------------------------------\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/etc/init.d/zfs-load-key"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 6,
                  "endLine": 26,
                  "endColumn": 14,
                  "snippet": {
                    "text": "#\n# Released under the 2-clause BSD license.\n#\n# This script is based on debian/zfsutils.zfs.init from the\n# Debian GNU/kFreeBSD zfsutils 8.1-3 package, written by Aurelien Jarno.\n\n# Source the common init script\n",
                    "rendered": {
                      "text": "#\n# Released under the 2-clause BSD license.\n#\n# This script is based on debian/zfsutils.zfs.init from the\n# Debian GNU/kFreeBSD zfsutils 8.1-3 package, written by Aurelien Jarno.\n\n# Source the common init script\n",
                      "markdown": "`#\n# Released under the 2-clause BSD license.\n#\n# This script is based on debian/zfsutils.zfs.init from the\n# Debian GNU/kFreeBSD zfsutils 8.1-3 package, written by Aurelien Jarno.\n\n# Source the common init script\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/etc/init.d/zfs-load-key"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 20,
                  "endLine": 7,
                  "endColumn": 28,
                  "snippet": {
                    "text": "# zfs-load-key  This script will load/unload the zfs filesystems keys.\n#\n# chkconfig:    2345 06 99\n# description:  This script will load or unload the zfs filesystems keys during\n#               system boot/shutdown. Only filesystems with key path set\n#               in keylocation property. See the zfs(8) man page for details.\n# probe: true\n",
                    "rendered": {
                      "text": "# zfs-load-key  This script will load/unload the zfs filesystems keys.\n#\n# chkconfig:    2345 06 99\n# description:  This script will load or unload the zfs filesystems keys during\n#               system boot/shutdown. Only filesystems with key path set\n#               in keylocation property. See the zfs(8) man page for details.\n# probe: true\n",
                      "markdown": "`# zfs-load-key  This script will load/unload the zfs filesystems keys.\n#\n# chkconfig:    2345 06 99\n# description:  This script will load or unload the zfs filesystems keys during\n#               system boot/shutdown. Only filesystems with key path set\n#               in keylocation property. See the zfs(8) man page for details.\n# probe: true\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/etc/init.d/zfs-load-key"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 20,
                  "endLine": 4,
                  "endColumn": 28,
                  "snippet": {
                    "text": "#!/bin/sh\n# shellcheck disable=SC2154\n#\n# zfs-load-key  This script will load/unload the zfs filesystems keys.\n#\n# chkconfig:    2345 06 99\n# description:  This script will load or unload the zfs filesystems keys during\n",
                    "rendered": {
                      "text": "#!/bin/sh\n# shellcheck disable=SC2154\n#\n# zfs-load-key  This script will load/unload the zfs filesystems keys.\n#\n# chkconfig:    2345 06 99\n# description:  This script will load or unload the zfs filesystems keys during\n",
                      "markdown": "`#!/bin/sh\n# shellcheck disable=SC2154\n#\n# zfs-load-key  This script will load/unload the zfs filesystems keys.\n#\n# chkconfig:    2345 06 99\n# description:  This script will load or unload the zfs filesystems keys during\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/r_proc"
                },
                "region": {
                  "startLine": 244,
                  "startColumn": 47,
                  "endLine": 244,
                  "endColumn": 52,
                  "snippet": {
                    "text": "\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n\nif [ -n \"$without_vals\" ]; then\n",
                    "rendered": {
                      "text": "\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n\nif [ -n \"$without_vals\" ]; then\n",
                      "markdown": "`\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n\nif [ -n \"$without_vals\" ]; then\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/r_proc"
                },
                "region": {
                  "startLine": 242,
                  "startColumn": 29,
                  "endLine": 242,
                  "endColumn": 34,
                  "snippet": {
                    "text": "\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n",
                    "rendered": {
                      "text": "\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n",
                      "markdown": "`\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/r_proc"
                },
                "region": {
                  "startLine": 242,
                  "startColumn": 1,
                  "endLine": 242,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n",
                    "rendered": {
                      "text": "\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n",
                      "markdown": "`\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/r_proc"
                },
                "region": {
                  "startLine": 241,
                  "startColumn": 1,
                  "endLine": 241,
                  "endColumn": 7,
                  "snippet": {
                    "text": "if [ -n \"$with_vals\" ]; then\n\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\n",
                    "rendered": {
                      "text": "if [ -n \"$with_vals\" ]; then\n\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\n",
                      "markdown": "`if [ -n \"$with_vals\" ]; then\n\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/r_proc"
                },
                "region": {
                  "startLine": 237,
                  "startColumn": 25,
                  "endLine": 237,
                  "endColumn": 31,
                  "snippet": {
                    "text": "\tscripts=\"$script\"\nesac\n\nwith_vals=$(echo \"$out\" | grep -E \"$scripts\")\nif [ -n \"$with_vals\" ]; then\n\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n",
                    "rendered": {
                      "text": "\tscripts=\"$script\"\nesac\n\nwith_vals=$(echo \"$out\" | grep -E \"$scripts\")\nif [ -n \"$with_vals\" ]; then\n\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n",
                      "markdown": "`\tscripts=\"$script\"\nesac\n\nwith_vals=$(echo \"$out\" | grep -E \"$scripts\")\nif [ -n \"$with_vals\" ]; then\n\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/r_proc"
                },
                "region": {
                  "startLine": 199,
                  "startColumn": 36,
                  "endLine": 199,
                  "endColumn": 41,
                  "snippet": {
                    "text": "END {print \"type=\"type; ORS=\"\\n\"; print \"\"}\n');\nfi\ntype=$(echo \"$out\" | grep '^type=' | cut -d '=' -f 2)\n\n# If type is not set by now, either we don't have a block device\n# or smartctl failed. Either way, default to ATA and set $out to\n",
                    "rendered": {
                      "text": "END {print \"type=\"type; ORS=\"\\n\"; print \"\"}\n');\nfi\ntype=$(echo \"$out\" | grep '^type=' | cut -d '=' -f 2)\n\n# If type is not set by now, either we don't have a block device\n# or smartctl failed. Either way, default to ATA and set $out to\n",
                      "markdown": "`END {print \"type=\"type; ORS=\"\\n\"; print \"\"}\n');\nfi\ntype=$(echo \"$out\" | grep '^type=' | cut -d '=' -f 2)\n\n# If type is not set by now, either we don't have a block device\n# or smartctl failed. Either way, default to ATA and set $out to\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/r_proc"
                },
                "region": {
                  "startLine": 199,
                  "startColumn": 20,
                  "endLine": 199,
                  "endColumn": 26,
                  "snippet": {
                    "text": "END {print \"type=\"type; ORS=\"\\n\"; print \"\"}\n');\nfi\ntype=$(echo \"$out\" | grep '^type=' | cut -d '=' -f 2)\n\n# If type is not set by now, either we don't have a block device\n# or smartctl failed. Either way, default to ATA and set $out to\n",
                    "rendered": {
                      "text": "END {print \"type=\"type; ORS=\"\\n\"; print \"\"}\n');\nfi\ntype=$(echo \"$out\" | grep '^type=' | cut -d '=' -f 2)\n\n# If type is not set by now, either we don't have a block device\n# or smartctl failed. Either way, default to ATA and set $out to\n",
                      "markdown": "`END {print \"type=\"type; ORS=\"\\n\"; print \"\"}\n');\nfi\ntype=$(echo \"$out\" | grep '^type=' | cut -d '=' -f 2)\n\n# If type is not set by now, either we don't have a block device\n# or smartctl failed. Either way, default to ATA and set $out to\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/r_proc"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 24,
                  "endLine": 103,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\t# NVMe:\n\t#       SMART/Health Information (NVMe Log 0xnn, NSID 0xnn)\n\t#\n\tout=$(echo \"$raw_out\" | awk '\n# SAS specific\n/read:/{print \"rrd=\"$4\"\\nr_cor=\"$5\"\\nr_proc=\"$7\"\\nr_ucor=\"$8}\n/write:/{print \"rwr=\"$4\"\\nw_cor=\"$5\"\\nw_proc=\"$7\"\\nw_ucor=\"$8}\n",
                    "rendered": {
                      "text": "\t# NVMe:\n\t#       SMART/Health Information (NVMe Log 0xnn, NSID 0xnn)\n\t#\n\tout=$(echo \"$raw_out\" | awk '\n# SAS specific\n/read:/{print \"rrd=\"$4\"\\nr_cor=\"$5\"\\nr_proc=\"$7\"\\nr_ucor=\"$8}\n/write:/{print \"rwr=\"$4\"\\nw_cor=\"$5\"\\nw_proc=\"$7\"\\nw_ucor=\"$8}\n",
                      "markdown": "`\t# NVMe:\n\t#       SMART/Health Information (NVMe Log 0xnn, NSID 0xnn)\n\t#\n\tout=$(echo \"$raw_out\" | awk '\n# SAS specific\n/read:/{print \"rrd=\"$4\"\\nr_cor=\"$5\"\\nr_proc=\"$7\"\\nr_ucor=\"$8}\n/write:/{print \"rwr=\"$4\"\\nw_cor=\"$5\"\\nw_proc=\"$7\"\\nw_ucor=\"$8}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/r_proc"
                },
                "region": {
                  "startLine": 83,
                  "startColumn": 3,
                  "endLine": 83,
                  "endColumn": 8,
                  "snippet": {
                    "text": "\nif [ -b \"$somepath\" ] && PATH=\"/usr/sbin:$PATH\" command -v smartctl > /dev/null || [ -n \"$samples\" ] ; then\n\tif [ -n \"$samples\" ] ; then\n\t\t# cat a smartctl output text file instead of running smartctl\n\t\t# on a vdev (only used for developer testing).\n\t\tfile=$(get_filename_from_dir \"$samples\")\n\t\techo \"file=$file\"\n",
                    "rendered": {
                      "text": "\nif [ -b \"$somepath\" ] && PATH=\"/usr/sbin:$PATH\" command -v smartctl > /dev/null || [ -n \"$samples\" ] ; then\n\tif [ -n \"$samples\" ] ; then\n\t\t# cat a smartctl output text file instead of running smartctl\n\t\t# on a vdev (only used for developer testing).\n\t\tfile=$(get_filename_from_dir \"$samples\")\n\t\techo \"file=$file\"\n",
                      "markdown": "`\nif [ -b \"$somepath\" ] && PATH=\"/usr/sbin:$PATH\" command -v smartctl > /dev/null || [ -n \"$samples\" ] ; then\n\tif [ -n \"$samples\" ] ; then\n\t\t# cat a smartctl output text file instead of running smartctl\n\t\t# on a vdev (only used for developer testing).\n\t\tfile=$(get_filename_from_dir \"$samples\")\n\t\techo \"file=$file\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/r_proc"
                },
                "region": {
                  "startLine": 68,
                  "startColumn": 56,
                  "endLine": 68,
                  "endColumn": 61,
                  "snippet": {
                    "text": "script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n",
                    "rendered": {
                      "text": "script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n",
                      "markdown": "`script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/r_proc"
                },
                "region": {
                  "startLine": 68,
                  "startColumn": 25,
                  "endLine": 68,
                  "endColumn": 31,
                  "snippet": {
                    "text": "script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n",
                    "rendered": {
                      "text": "script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n",
                      "markdown": "`script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/r_proc"
                },
                "region": {
                  "startLine": 56,
                  "endLine": 56,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\tnum_files=$(find \"$dir\" -maxdepth 1 -type f | wc -l)\n\tmod=$((pid % num_files))\n\ti=0\n\tfind \"$dir\" -type f -printf '%f\\n' | while read -r file ; do\n\t\tif [ \"$mod\" = \"$i\" ] ; then\n\t\t\techo \"$file\"\n\t\t\tbreak\n",
                    "rendered": {
                      "text": "\tnum_files=$(find \"$dir\" -maxdepth 1 -type f | wc -l)\n\tmod=$((pid % num_files))\n\ti=0\n\tfind \"$dir\" -type f -printf '%f\\n' | while read -r file ; do\n\t\tif [ \"$mod\" = \"$i\" ] ; then\n\t\t\techo \"$file\"\n\t\t\tbreak\n",
                      "markdown": "`\tnum_files=$(find \"$dir\" -maxdepth 1 -type f | wc -l)\n\tmod=$((pid % num_files))\n\ti=0\n\tfind \"$dir\" -type f -printf '%f\\n' | while read -r file ; do\n\t\tif [ \"$mod\" = \"$i\" ] ; then\n\t\t\techo \"$file\"\n\t\t\tbreak\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/r_proc"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 38,
                  "endLine": 47,
                  "endColumn": 46,
                  "snippet": {
                    "text": "#\n# Look in directory DIR and return a filename from it.  The filename returned\n# is chosen quasi-sequentially (based off our PID).  This allows us to return\n# a different filename every time this script is invoked (which we do for each\n# vdev), without having to maintain state.\nget_filename_from_dir()\n{\n",
                    "rendered": {
                      "text": "#\n# Look in directory DIR and return a filename from it.  The filename returned\n# is chosen quasi-sequentially (based off our PID).  This allows us to return\n# a different filename every time this script is invoked (which we do for each\n# vdev), without having to maintain state.\nget_filename_from_dir()\n{\n",
                      "markdown": "`#\n# Look in directory DIR and return a filename from it.  The filename returned\n# is chosen quasi-sequentially (based off our PID).  This allows us to return\n# a different filename every time this script is invoked (which we do for each\n# vdev), without having to maintain state.\nget_filename_from_dir()\n{\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/r_proc"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 28,
                  "endLine": 47,
                  "endColumn": 34,
                  "snippet": {
                    "text": "#\n# Look in directory DIR and return a filename from it.  The filename returned\n# is chosen quasi-sequentially (based off our PID).  This allows us to return\n# a different filename every time this script is invoked (which we do for each\n# vdev), without having to maintain state.\nget_filename_from_dir()\n{\n",
                    "rendered": {
                      "text": "#\n# Look in directory DIR and return a filename from it.  The filename returned\n# is chosen quasi-sequentially (based off our PID).  This allows us to return\n# a different filename every time this script is invoked (which we do for each\n# vdev), without having to maintain state.\nget_filename_from_dir()\n{\n",
                      "markdown": "`#\n# Look in directory DIR and return a filename from it.  The filename returned\n# is chosen quasi-sequentially (based off our PID).  This allows us to return\n# a different filename every time this script is invoked (which we do for each\n# vdev), without having to maintain state.\nget_filename_from_dir()\n{\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/r_proc"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 27,
                  "endLine": 20,
                  "endColumn": 36,
                  "snippet": {
                    "text": "hours_on:\tShow number of hours drive powered on (all drives).\nrealloc:\tShow SMART reallocated sectors count (ATA).\nrep_ucor:\tShow SMART reported uncorrectable count (ATA).\ncmd_to:\t\tShow SMART command timeout count (ATA).\npend_sec:\tShow SMART current pending sector count (ATA).\noff_ucor:\tShow SMART offline uncorrectable errors (ATA).\nata_err:\tShow SMART ATA errors (ATA).\n",
                    "rendered": {
                      "text": "hours_on:\tShow number of hours drive powered on (all drives).\nrealloc:\tShow SMART reallocated sectors count (ATA).\nrep_ucor:\tShow SMART reported uncorrectable count (ATA).\ncmd_to:\t\tShow SMART command timeout count (ATA).\npend_sec:\tShow SMART current pending sector count (ATA).\noff_ucor:\tShow SMART offline uncorrectable errors (ATA).\nata_err:\tShow SMART ATA errors (ATA).\n",
                      "markdown": "`hours_on:\tShow number of hours drive powered on (all drives).\nrealloc:\tShow SMART reallocated sectors count (ATA).\nrep_ucor:\tShow SMART reported uncorrectable count (ATA).\ncmd_to:\t\tShow SMART command timeout count (ATA).\npend_sec:\tShow SMART current pending sector count (ATA).\noff_ucor:\tShow SMART offline uncorrectable errors (ATA).\nata_err:\tShow SMART ATA errors (ATA).\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/pwr_cyc"
                },
                "region": {
                  "startLine": 244,
                  "startColumn": 47,
                  "endLine": 244,
                  "endColumn": 52,
                  "snippet": {
                    "text": "\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n\nif [ -n \"$without_vals\" ]; then\n",
                    "rendered": {
                      "text": "\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n\nif [ -n \"$without_vals\" ]; then\n",
                      "markdown": "`\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n\nif [ -n \"$without_vals\" ]; then\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/pwr_cyc"
                },
                "region": {
                  "startLine": 242,
                  "startColumn": 29,
                  "endLine": 242,
                  "endColumn": 34,
                  "snippet": {
                    "text": "\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n",
                    "rendered": {
                      "text": "\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n",
                      "markdown": "`\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/pwr_cyc"
                },
                "region": {
                  "startLine": 242,
                  "startColumn": 1,
                  "endLine": 242,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n",
                    "rendered": {
                      "text": "\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n",
                      "markdown": "`\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/pwr_cyc"
                },
                "region": {
                  "startLine": 241,
                  "startColumn": 1,
                  "endLine": 241,
                  "endColumn": 7,
                  "snippet": {
                    "text": "if [ -n \"$with_vals\" ]; then\n\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\n",
                    "rendered": {
                      "text": "if [ -n \"$with_vals\" ]; then\n\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\n",
                      "markdown": "`if [ -n \"$with_vals\" ]; then\n\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/pwr_cyc"
                },
                "region": {
                  "startLine": 237,
                  "startColumn": 25,
                  "endLine": 237,
                  "endColumn": 31,
                  "snippet": {
                    "text": "\tscripts=\"$script\"\nesac\n\nwith_vals=$(echo \"$out\" | grep -E \"$scripts\")\nif [ -n \"$with_vals\" ]; then\n\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n",
                    "rendered": {
                      "text": "\tscripts=\"$script\"\nesac\n\nwith_vals=$(echo \"$out\" | grep -E \"$scripts\")\nif [ -n \"$with_vals\" ]; then\n\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n",
                      "markdown": "`\tscripts=\"$script\"\nesac\n\nwith_vals=$(echo \"$out\" | grep -E \"$scripts\")\nif [ -n \"$with_vals\" ]; then\n\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/pwr_cyc"
                },
                "region": {
                  "startLine": 199,
                  "startColumn": 36,
                  "endLine": 199,
                  "endColumn": 41,
                  "snippet": {
                    "text": "END {print \"type=\"type; ORS=\"\\n\"; print \"\"}\n');\nfi\ntype=$(echo \"$out\" | grep '^type=' | cut -d '=' -f 2)\n\n# If type is not set by now, either we don't have a block device\n# or smartctl failed. Either way, default to ATA and set $out to\n",
                    "rendered": {
                      "text": "END {print \"type=\"type; ORS=\"\\n\"; print \"\"}\n');\nfi\ntype=$(echo \"$out\" | grep '^type=' | cut -d '=' -f 2)\n\n# If type is not set by now, either we don't have a block device\n# or smartctl failed. Either way, default to ATA and set $out to\n",
                      "markdown": "`END {print \"type=\"type; ORS=\"\\n\"; print \"\"}\n');\nfi\ntype=$(echo \"$out\" | grep '^type=' | cut -d '=' -f 2)\n\n# If type is not set by now, either we don't have a block device\n# or smartctl failed. Either way, default to ATA and set $out to\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/pwr_cyc"
                },
                "region": {
                  "startLine": 199,
                  "startColumn": 20,
                  "endLine": 199,
                  "endColumn": 26,
                  "snippet": {
                    "text": "END {print \"type=\"type; ORS=\"\\n\"; print \"\"}\n');\nfi\ntype=$(echo \"$out\" | grep '^type=' | cut -d '=' -f 2)\n\n# If type is not set by now, either we don't have a block device\n# or smartctl failed. Either way, default to ATA and set $out to\n",
                    "rendered": {
                      "text": "END {print \"type=\"type; ORS=\"\\n\"; print \"\"}\n');\nfi\ntype=$(echo \"$out\" | grep '^type=' | cut -d '=' -f 2)\n\n# If type is not set by now, either we don't have a block device\n# or smartctl failed. Either way, default to ATA and set $out to\n",
                      "markdown": "`END {print \"type=\"type; ORS=\"\\n\"; print \"\"}\n');\nfi\ntype=$(echo \"$out\" | grep '^type=' | cut -d '=' -f 2)\n\n# If type is not set by now, either we don't have a block device\n# or smartctl failed. Either way, default to ATA and set $out to\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/pwr_cyc"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 24,
                  "endLine": 103,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\t# NVMe:\n\t#       SMART/Health Information (NVMe Log 0xnn, NSID 0xnn)\n\t#\n\tout=$(echo \"$raw_out\" | awk '\n# SAS specific\n/read:/{print \"rrd=\"$4\"\\nr_cor=\"$5\"\\nr_proc=\"$7\"\\nr_ucor=\"$8}\n/write:/{print \"rwr=\"$4\"\\nw_cor=\"$5\"\\nw_proc=\"$7\"\\nw_ucor=\"$8}\n",
                    "rendered": {
                      "text": "\t# NVMe:\n\t#       SMART/Health Information (NVMe Log 0xnn, NSID 0xnn)\n\t#\n\tout=$(echo \"$raw_out\" | awk '\n# SAS specific\n/read:/{print \"rrd=\"$4\"\\nr_cor=\"$5\"\\nr_proc=\"$7\"\\nr_ucor=\"$8}\n/write:/{print \"rwr=\"$4\"\\nw_cor=\"$5\"\\nw_proc=\"$7\"\\nw_ucor=\"$8}\n",
                      "markdown": "`\t# NVMe:\n\t#       SMART/Health Information (NVMe Log 0xnn, NSID 0xnn)\n\t#\n\tout=$(echo \"$raw_out\" | awk '\n# SAS specific\n/read:/{print \"rrd=\"$4\"\\nr_cor=\"$5\"\\nr_proc=\"$7\"\\nr_ucor=\"$8}\n/write:/{print \"rwr=\"$4\"\\nw_cor=\"$5\"\\nw_proc=\"$7\"\\nw_ucor=\"$8}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/pwr_cyc"
                },
                "region": {
                  "startLine": 83,
                  "startColumn": 3,
                  "endLine": 83,
                  "endColumn": 8,
                  "snippet": {
                    "text": "\nif [ -b \"$somepath\" ] && PATH=\"/usr/sbin:$PATH\" command -v smartctl > /dev/null || [ -n \"$samples\" ] ; then\n\tif [ -n \"$samples\" ] ; then\n\t\t# cat a smartctl output text file instead of running smartctl\n\t\t# on a vdev (only used for developer testing).\n\t\tfile=$(get_filename_from_dir \"$samples\")\n\t\techo \"file=$file\"\n",
                    "rendered": {
                      "text": "\nif [ -b \"$somepath\" ] && PATH=\"/usr/sbin:$PATH\" command -v smartctl > /dev/null || [ -n \"$samples\" ] ; then\n\tif [ -n \"$samples\" ] ; then\n\t\t# cat a smartctl output text file instead of running smartctl\n\t\t# on a vdev (only used for developer testing).\n\t\tfile=$(get_filename_from_dir \"$samples\")\n\t\techo \"file=$file\"\n",
                      "markdown": "`\nif [ -b \"$somepath\" ] && PATH=\"/usr/sbin:$PATH\" command -v smartctl > /dev/null || [ -n \"$samples\" ] ; then\n\tif [ -n \"$samples\" ] ; then\n\t\t# cat a smartctl output text file instead of running smartctl\n\t\t# on a vdev (only used for developer testing).\n\t\tfile=$(get_filename_from_dir \"$samples\")\n\t\techo \"file=$file\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/pwr_cyc"
                },
                "region": {
                  "startLine": 68,
                  "startColumn": 56,
                  "endLine": 68,
                  "endColumn": 61,
                  "snippet": {
                    "text": "script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n",
                    "rendered": {
                      "text": "script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n",
                      "markdown": "`script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/pwr_cyc"
                },
                "region": {
                  "startLine": 68,
                  "startColumn": 25,
                  "endLine": 68,
                  "endColumn": 31,
                  "snippet": {
                    "text": "script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n",
                    "rendered": {
                      "text": "script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n",
                      "markdown": "`script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/pwr_cyc"
                },
                "region": {
                  "startLine": 56,
                  "endLine": 56,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\tnum_files=$(find \"$dir\" -maxdepth 1 -type f | wc -l)\n\tmod=$((pid % num_files))\n\ti=0\n\tfind \"$dir\" -type f -printf '%f\\n' | while read -r file ; do\n\t\tif [ \"$mod\" = \"$i\" ] ; then\n\t\t\techo \"$file\"\n\t\t\tbreak\n",
                    "rendered": {
                      "text": "\tnum_files=$(find \"$dir\" -maxdepth 1 -type f | wc -l)\n\tmod=$((pid % num_files))\n\ti=0\n\tfind \"$dir\" -type f -printf '%f\\n' | while read -r file ; do\n\t\tif [ \"$mod\" = \"$i\" ] ; then\n\t\t\techo \"$file\"\n\t\t\tbreak\n",
                      "markdown": "`\tnum_files=$(find \"$dir\" -maxdepth 1 -type f | wc -l)\n\tmod=$((pid % num_files))\n\ti=0\n\tfind \"$dir\" -type f -printf '%f\\n' | while read -r file ; do\n\t\tif [ \"$mod\" = \"$i\" ] ; then\n\t\t\techo \"$file\"\n\t\t\tbreak\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/pwr_cyc"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 38,
                  "endLine": 47,
                  "endColumn": 46,
                  "snippet": {
                    "text": "#\n# Look in directory DIR and return a filename from it.  The filename returned\n# is chosen quasi-sequentially (based off our PID).  This allows us to return\n# a different filename every time this script is invoked (which we do for each\n# vdev), without having to maintain state.\nget_filename_from_dir()\n{\n",
                    "rendered": {
                      "text": "#\n# Look in directory DIR and return a filename from it.  The filename returned\n# is chosen quasi-sequentially (based off our PID).  This allows us to return\n# a different filename every time this script is invoked (which we do for each\n# vdev), without having to maintain state.\nget_filename_from_dir()\n{\n",
                      "markdown": "`#\n# Look in directory DIR and return a filename from it.  The filename returned\n# is chosen quasi-sequentially (based off our PID).  This allows us to return\n# a different filename every time this script is invoked (which we do for each\n# vdev), without having to maintain state.\nget_filename_from_dir()\n{\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/pwr_cyc"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 28,
                  "endLine": 47,
                  "endColumn": 34,
                  "snippet": {
                    "text": "#\n# Look in directory DIR and return a filename from it.  The filename returned\n# is chosen quasi-sequentially (based off our PID).  This allows us to return\n# a different filename every time this script is invoked (which we do for each\n# vdev), without having to maintain state.\nget_filename_from_dir()\n{\n",
                    "rendered": {
                      "text": "#\n# Look in directory DIR and return a filename from it.  The filename returned\n# is chosen quasi-sequentially (based off our PID).  This allows us to return\n# a different filename every time this script is invoked (which we do for each\n# vdev), without having to maintain state.\nget_filename_from_dir()\n{\n",
                      "markdown": "`#\n# Look in directory DIR and return a filename from it.  The filename returned\n# is chosen quasi-sequentially (based off our PID).  This allows us to return\n# a different filename every time this script is invoked (which we do for each\n# vdev), without having to maintain state.\nget_filename_from_dir()\n{\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/pwr_cyc"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 27,
                  "endLine": 20,
                  "endColumn": 36,
                  "snippet": {
                    "text": "hours_on:\tShow number of hours drive powered on (all drives).\nrealloc:\tShow SMART reallocated sectors count (ATA).\nrep_ucor:\tShow SMART reported uncorrectable count (ATA).\ncmd_to:\t\tShow SMART command timeout count (ATA).\npend_sec:\tShow SMART current pending sector count (ATA).\noff_ucor:\tShow SMART offline uncorrectable errors (ATA).\nata_err:\tShow SMART ATA errors (ATA).\n",
                    "rendered": {
                      "text": "hours_on:\tShow number of hours drive powered on (all drives).\nrealloc:\tShow SMART reallocated sectors count (ATA).\nrep_ucor:\tShow SMART reported uncorrectable count (ATA).\ncmd_to:\t\tShow SMART command timeout count (ATA).\npend_sec:\tShow SMART current pending sector count (ATA).\noff_ucor:\tShow SMART offline uncorrectable errors (ATA).\nata_err:\tShow SMART ATA errors (ATA).\n",
                      "markdown": "`hours_on:\tShow number of hours drive powered on (all drives).\nrealloc:\tShow SMART reallocated sectors count (ATA).\nrep_ucor:\tShow SMART reported uncorrectable count (ATA).\ncmd_to:\t\tShow SMART command timeout count (ATA).\npend_sec:\tShow SMART current pending sector count (ATA).\noff_ucor:\tShow SMART offline uncorrectable errors (ATA).\nata_err:\tShow SMART ATA errors (ATA).\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/pend_sec"
                },
                "region": {
                  "startLine": 244,
                  "startColumn": 47,
                  "endLine": 244,
                  "endColumn": 52,
                  "snippet": {
                    "text": "\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n\nif [ -n \"$without_vals\" ]; then\n",
                    "rendered": {
                      "text": "\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n\nif [ -n \"$without_vals\" ]; then\n",
                      "markdown": "`\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n\nif [ -n \"$without_vals\" ]; then\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/pend_sec"
                },
                "region": {
                  "startLine": 242,
                  "startColumn": 29,
                  "endLine": 242,
                  "endColumn": 34,
                  "snippet": {
                    "text": "\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n",
                    "rendered": {
                      "text": "\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n",
                      "markdown": "`\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/pend_sec"
                },
                "region": {
                  "startLine": 242,
                  "startColumn": 1,
                  "endLine": 242,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n",
                    "rendered": {
                      "text": "\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n",
                      "markdown": "`\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/pend_sec"
                },
                "region": {
                  "startLine": 241,
                  "startColumn": 1,
                  "endLine": 241,
                  "endColumn": 7,
                  "snippet": {
                    "text": "if [ -n \"$with_vals\" ]; then\n\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\n",
                    "rendered": {
                      "text": "if [ -n \"$with_vals\" ]; then\n\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\n",
                      "markdown": "`if [ -n \"$with_vals\" ]; then\n\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/pend_sec"
                },
                "region": {
                  "startLine": 237,
                  "startColumn": 25,
                  "endLine": 237,
                  "endColumn": 31,
                  "snippet": {
                    "text": "\tscripts=\"$script\"\nesac\n\nwith_vals=$(echo \"$out\" | grep -E \"$scripts\")\nif [ -n \"$with_vals\" ]; then\n\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n",
                    "rendered": {
                      "text": "\tscripts=\"$script\"\nesac\n\nwith_vals=$(echo \"$out\" | grep -E \"$scripts\")\nif [ -n \"$with_vals\" ]; then\n\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n",
                      "markdown": "`\tscripts=\"$script\"\nesac\n\nwith_vals=$(echo \"$out\" | grep -E \"$scripts\")\nif [ -n \"$with_vals\" ]; then\n\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/pend_sec"
                },
                "region": {
                  "startLine": 199,
                  "startColumn": 36,
                  "endLine": 199,
                  "endColumn": 41,
                  "snippet": {
                    "text": "END {print \"type=\"type; ORS=\"\\n\"; print \"\"}\n');\nfi\ntype=$(echo \"$out\" | grep '^type=' | cut -d '=' -f 2)\n\n# If type is not set by now, either we don't have a block device\n# or smartctl failed. Either way, default to ATA and set $out to\n",
                    "rendered": {
                      "text": "END {print \"type=\"type; ORS=\"\\n\"; print \"\"}\n');\nfi\ntype=$(echo \"$out\" | grep '^type=' | cut -d '=' -f 2)\n\n# If type is not set by now, either we don't have a block device\n# or smartctl failed. Either way, default to ATA and set $out to\n",
                      "markdown": "`END {print \"type=\"type; ORS=\"\\n\"; print \"\"}\n');\nfi\ntype=$(echo \"$out\" | grep '^type=' | cut -d '=' -f 2)\n\n# If type is not set by now, either we don't have a block device\n# or smartctl failed. Either way, default to ATA and set $out to\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/pend_sec"
                },
                "region": {
                  "startLine": 199,
                  "startColumn": 20,
                  "endLine": 199,
                  "endColumn": 26,
                  "snippet": {
                    "text": "END {print \"type=\"type; ORS=\"\\n\"; print \"\"}\n');\nfi\ntype=$(echo \"$out\" | grep '^type=' | cut -d '=' -f 2)\n\n# If type is not set by now, either we don't have a block device\n# or smartctl failed. Either way, default to ATA and set $out to\n",
                    "rendered": {
                      "text": "END {print \"type=\"type; ORS=\"\\n\"; print \"\"}\n');\nfi\ntype=$(echo \"$out\" | grep '^type=' | cut -d '=' -f 2)\n\n# If type is not set by now, either we don't have a block device\n# or smartctl failed. Either way, default to ATA and set $out to\n",
                      "markdown": "`END {print \"type=\"type; ORS=\"\\n\"; print \"\"}\n');\nfi\ntype=$(echo \"$out\" | grep '^type=' | cut -d '=' -f 2)\n\n# If type is not set by now, either we don't have a block device\n# or smartctl failed. Either way, default to ATA and set $out to\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/pend_sec"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 24,
                  "endLine": 103,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\t# NVMe:\n\t#       SMART/Health Information (NVMe Log 0xnn, NSID 0xnn)\n\t#\n\tout=$(echo \"$raw_out\" | awk '\n# SAS specific\n/read:/{print \"rrd=\"$4\"\\nr_cor=\"$5\"\\nr_proc=\"$7\"\\nr_ucor=\"$8}\n/write:/{print \"rwr=\"$4\"\\nw_cor=\"$5\"\\nw_proc=\"$7\"\\nw_ucor=\"$8}\n",
                    "rendered": {
                      "text": "\t# NVMe:\n\t#       SMART/Health Information (NVMe Log 0xnn, NSID 0xnn)\n\t#\n\tout=$(echo \"$raw_out\" | awk '\n# SAS specific\n/read:/{print \"rrd=\"$4\"\\nr_cor=\"$5\"\\nr_proc=\"$7\"\\nr_ucor=\"$8}\n/write:/{print \"rwr=\"$4\"\\nw_cor=\"$5\"\\nw_proc=\"$7\"\\nw_ucor=\"$8}\n",
                      "markdown": "`\t# NVMe:\n\t#       SMART/Health Information (NVMe Log 0xnn, NSID 0xnn)\n\t#\n\tout=$(echo \"$raw_out\" | awk '\n# SAS specific\n/read:/{print \"rrd=\"$4\"\\nr_cor=\"$5\"\\nr_proc=\"$7\"\\nr_ucor=\"$8}\n/write:/{print \"rwr=\"$4\"\\nw_cor=\"$5\"\\nw_proc=\"$7\"\\nw_ucor=\"$8}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/pend_sec"
                },
                "region": {
                  "startLine": 83,
                  "startColumn": 3,
                  "endLine": 83,
                  "endColumn": 8,
                  "snippet": {
                    "text": "\nif [ -b \"$somepath\" ] && PATH=\"/usr/sbin:$PATH\" command -v smartctl > /dev/null || [ -n \"$samples\" ] ; then\n\tif [ -n \"$samples\" ] ; then\n\t\t# cat a smartctl output text file instead of running smartctl\n\t\t# on a vdev (only used for developer testing).\n\t\tfile=$(get_filename_from_dir \"$samples\")\n\t\techo \"file=$file\"\n",
                    "rendered": {
                      "text": "\nif [ -b \"$somepath\" ] && PATH=\"/usr/sbin:$PATH\" command -v smartctl > /dev/null || [ -n \"$samples\" ] ; then\n\tif [ -n \"$samples\" ] ; then\n\t\t# cat a smartctl output text file instead of running smartctl\n\t\t# on a vdev (only used for developer testing).\n\t\tfile=$(get_filename_from_dir \"$samples\")\n\t\techo \"file=$file\"\n",
                      "markdown": "`\nif [ -b \"$somepath\" ] && PATH=\"/usr/sbin:$PATH\" command -v smartctl > /dev/null || [ -n \"$samples\" ] ; then\n\tif [ -n \"$samples\" ] ; then\n\t\t# cat a smartctl output text file instead of running smartctl\n\t\t# on a vdev (only used for developer testing).\n\t\tfile=$(get_filename_from_dir \"$samples\")\n\t\techo \"file=$file\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/pend_sec"
                },
                "region": {
                  "startLine": 68,
                  "startColumn": 56,
                  "endLine": 68,
                  "endColumn": 61,
                  "snippet": {
                    "text": "script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n",
                    "rendered": {
                      "text": "script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n",
                      "markdown": "`script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/pend_sec"
                },
                "region": {
                  "startLine": 68,
                  "startColumn": 25,
                  "endLine": 68,
                  "endColumn": 31,
                  "snippet": {
                    "text": "script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n",
                    "rendered": {
                      "text": "script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n",
                      "markdown": "`script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/pend_sec"
                },
                "region": {
                  "startLine": 56,
                  "endLine": 56,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\tnum_files=$(find \"$dir\" -maxdepth 1 -type f | wc -l)\n\tmod=$((pid % num_files))\n\ti=0\n\tfind \"$dir\" -type f -printf '%f\\n' | while read -r file ; do\n\t\tif [ \"$mod\" = \"$i\" ] ; then\n\t\t\techo \"$file\"\n\t\t\tbreak\n",
                    "rendered": {
                      "text": "\tnum_files=$(find \"$dir\" -maxdepth 1 -type f | wc -l)\n\tmod=$((pid % num_files))\n\ti=0\n\tfind \"$dir\" -type f -printf '%f\\n' | while read -r file ; do\n\t\tif [ \"$mod\" = \"$i\" ] ; then\n\t\t\techo \"$file\"\n\t\t\tbreak\n",
                      "markdown": "`\tnum_files=$(find \"$dir\" -maxdepth 1 -type f | wc -l)\n\tmod=$((pid % num_files))\n\ti=0\n\tfind \"$dir\" -type f -printf '%f\\n' | while read -r file ; do\n\t\tif [ \"$mod\" = \"$i\" ] ; then\n\t\t\techo \"$file\"\n\t\t\tbreak\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/pend_sec"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 38,
                  "endLine": 47,
                  "endColumn": 46,
                  "snippet": {
                    "text": "#\n# Look in directory DIR and return a filename from it.  The filename returned\n# is chosen quasi-sequentially (based off our PID).  This allows us to return\n# a different filename every time this script is invoked (which we do for each\n# vdev), without having to maintain state.\nget_filename_from_dir()\n{\n",
                    "rendered": {
                      "text": "#\n# Look in directory DIR and return a filename from it.  The filename returned\n# is chosen quasi-sequentially (based off our PID).  This allows us to return\n# a different filename every time this script is invoked (which we do for each\n# vdev), without having to maintain state.\nget_filename_from_dir()\n{\n",
                      "markdown": "`#\n# Look in directory DIR and return a filename from it.  The filename returned\n# is chosen quasi-sequentially (based off our PID).  This allows us to return\n# a different filename every time this script is invoked (which we do for each\n# vdev), without having to maintain state.\nget_filename_from_dir()\n{\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/pend_sec"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 28,
                  "endLine": 47,
                  "endColumn": 34,
                  "snippet": {
                    "text": "#\n# Look in directory DIR and return a filename from it.  The filename returned\n# is chosen quasi-sequentially (based off our PID).  This allows us to return\n# a different filename every time this script is invoked (which we do for each\n# vdev), without having to maintain state.\nget_filename_from_dir()\n{\n",
                    "rendered": {
                      "text": "#\n# Look in directory DIR and return a filename from it.  The filename returned\n# is chosen quasi-sequentially (based off our PID).  This allows us to return\n# a different filename every time this script is invoked (which we do for each\n# vdev), without having to maintain state.\nget_filename_from_dir()\n{\n",
                      "markdown": "`#\n# Look in directory DIR and return a filename from it.  The filename returned\n# is chosen quasi-sequentially (based off our PID).  This allows us to return\n# a different filename every time this script is invoked (which we do for each\n# vdev), without having to maintain state.\nget_filename_from_dir()\n{\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/pend_sec"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 27,
                  "endLine": 20,
                  "endColumn": 36,
                  "snippet": {
                    "text": "hours_on:\tShow number of hours drive powered on (all drives).\nrealloc:\tShow SMART reallocated sectors count (ATA).\nrep_ucor:\tShow SMART reported uncorrectable count (ATA).\ncmd_to:\t\tShow SMART command timeout count (ATA).\npend_sec:\tShow SMART current pending sector count (ATA).\noff_ucor:\tShow SMART offline uncorrectable errors (ATA).\nata_err:\tShow SMART ATA errors (ATA).\n",
                    "rendered": {
                      "text": "hours_on:\tShow number of hours drive powered on (all drives).\nrealloc:\tShow SMART reallocated sectors count (ATA).\nrep_ucor:\tShow SMART reported uncorrectable count (ATA).\ncmd_to:\t\tShow SMART command timeout count (ATA).\npend_sec:\tShow SMART current pending sector count (ATA).\noff_ucor:\tShow SMART offline uncorrectable errors (ATA).\nata_err:\tShow SMART ATA errors (ATA).\n",
                      "markdown": "`hours_on:\tShow number of hours drive powered on (all drives).\nrealloc:\tShow SMART reallocated sectors count (ATA).\nrep_ucor:\tShow SMART reported uncorrectable count (ATA).\ncmd_to:\t\tShow SMART command timeout count (ATA).\npend_sec:\tShow SMART current pending sector count (ATA).\noff_ucor:\tShow SMART offline uncorrectable errors (ATA).\nata_err:\tShow SMART ATA errors (ATA).\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/off_ucor"
                },
                "region": {
                  "startLine": 244,
                  "startColumn": 47,
                  "endLine": 244,
                  "endColumn": 52,
                  "snippet": {
                    "text": "\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n\nif [ -n \"$without_vals\" ]; then\n",
                    "rendered": {
                      "text": "\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n\nif [ -n \"$without_vals\" ]; then\n",
                      "markdown": "`\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n\nif [ -n \"$without_vals\" ]; then\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/off_ucor"
                },
                "region": {
                  "startLine": 242,
                  "startColumn": 29,
                  "endLine": 242,
                  "endColumn": 34,
                  "snippet": {
                    "text": "\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n",
                    "rendered": {
                      "text": "\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n",
                      "markdown": "`\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/off_ucor"
                },
                "region": {
                  "startLine": 242,
                  "startColumn": 1,
                  "endLine": 242,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n",
                    "rendered": {
                      "text": "\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n",
                      "markdown": "`\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/off_ucor"
                },
                "region": {
                  "startLine": 241,
                  "startColumn": 1,
                  "endLine": 241,
                  "endColumn": 7,
                  "snippet": {
                    "text": "if [ -n \"$with_vals\" ]; then\n\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\n",
                    "rendered": {
                      "text": "if [ -n \"$with_vals\" ]; then\n\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\n",
                      "markdown": "`if [ -n \"$with_vals\" ]; then\n\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/off_ucor"
                },
                "region": {
                  "startLine": 237,
                  "startColumn": 25,
                  "endLine": 237,
                  "endColumn": 31,
                  "snippet": {
                    "text": "\tscripts=\"$script\"\nesac\n\nwith_vals=$(echo \"$out\" | grep -E \"$scripts\")\nif [ -n \"$with_vals\" ]; then\n\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n",
                    "rendered": {
                      "text": "\tscripts=\"$script\"\nesac\n\nwith_vals=$(echo \"$out\" | grep -E \"$scripts\")\nif [ -n \"$with_vals\" ]; then\n\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n",
                      "markdown": "`\tscripts=\"$script\"\nesac\n\nwith_vals=$(echo \"$out\" | grep -E \"$scripts\")\nif [ -n \"$with_vals\" ]; then\n\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/off_ucor"
                },
                "region": {
                  "startLine": 199,
                  "startColumn": 36,
                  "endLine": 199,
                  "endColumn": 41,
                  "snippet": {
                    "text": "END {print \"type=\"type; ORS=\"\\n\"; print \"\"}\n');\nfi\ntype=$(echo \"$out\" | grep '^type=' | cut -d '=' -f 2)\n\n# If type is not set by now, either we don't have a block device\n# or smartctl failed. Either way, default to ATA and set $out to\n",
                    "rendered": {
                      "text": "END {print \"type=\"type; ORS=\"\\n\"; print \"\"}\n');\nfi\ntype=$(echo \"$out\" | grep '^type=' | cut -d '=' -f 2)\n\n# If type is not set by now, either we don't have a block device\n# or smartctl failed. Either way, default to ATA and set $out to\n",
                      "markdown": "`END {print \"type=\"type; ORS=\"\\n\"; print \"\"}\n');\nfi\ntype=$(echo \"$out\" | grep '^type=' | cut -d '=' -f 2)\n\n# If type is not set by now, either we don't have a block device\n# or smartctl failed. Either way, default to ATA and set $out to\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/off_ucor"
                },
                "region": {
                  "startLine": 199,
                  "startColumn": 20,
                  "endLine": 199,
                  "endColumn": 26,
                  "snippet": {
                    "text": "END {print \"type=\"type; ORS=\"\\n\"; print \"\"}\n');\nfi\ntype=$(echo \"$out\" | grep '^type=' | cut -d '=' -f 2)\n\n# If type is not set by now, either we don't have a block device\n# or smartctl failed. Either way, default to ATA and set $out to\n",
                    "rendered": {
                      "text": "END {print \"type=\"type; ORS=\"\\n\"; print \"\"}\n');\nfi\ntype=$(echo \"$out\" | grep '^type=' | cut -d '=' -f 2)\n\n# If type is not set by now, either we don't have a block device\n# or smartctl failed. Either way, default to ATA and set $out to\n",
                      "markdown": "`END {print \"type=\"type; ORS=\"\\n\"; print \"\"}\n');\nfi\ntype=$(echo \"$out\" | grep '^type=' | cut -d '=' -f 2)\n\n# If type is not set by now, either we don't have a block device\n# or smartctl failed. Either way, default to ATA and set $out to\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/off_ucor"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 24,
                  "endLine": 103,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\t# NVMe:\n\t#       SMART/Health Information (NVMe Log 0xnn, NSID 0xnn)\n\t#\n\tout=$(echo \"$raw_out\" | awk '\n# SAS specific\n/read:/{print \"rrd=\"$4\"\\nr_cor=\"$5\"\\nr_proc=\"$7\"\\nr_ucor=\"$8}\n/write:/{print \"rwr=\"$4\"\\nw_cor=\"$5\"\\nw_proc=\"$7\"\\nw_ucor=\"$8}\n",
                    "rendered": {
                      "text": "\t# NVMe:\n\t#       SMART/Health Information (NVMe Log 0xnn, NSID 0xnn)\n\t#\n\tout=$(echo \"$raw_out\" | awk '\n# SAS specific\n/read:/{print \"rrd=\"$4\"\\nr_cor=\"$5\"\\nr_proc=\"$7\"\\nr_ucor=\"$8}\n/write:/{print \"rwr=\"$4\"\\nw_cor=\"$5\"\\nw_proc=\"$7\"\\nw_ucor=\"$8}\n",
                      "markdown": "`\t# NVMe:\n\t#       SMART/Health Information (NVMe Log 0xnn, NSID 0xnn)\n\t#\n\tout=$(echo \"$raw_out\" | awk '\n# SAS specific\n/read:/{print \"rrd=\"$4\"\\nr_cor=\"$5\"\\nr_proc=\"$7\"\\nr_ucor=\"$8}\n/write:/{print \"rwr=\"$4\"\\nw_cor=\"$5\"\\nw_proc=\"$7\"\\nw_ucor=\"$8}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/off_ucor"
                },
                "region": {
                  "startLine": 83,
                  "startColumn": 3,
                  "endLine": 83,
                  "endColumn": 8,
                  "snippet": {
                    "text": "\nif [ -b \"$somepath\" ] && PATH=\"/usr/sbin:$PATH\" command -v smartctl > /dev/null || [ -n \"$samples\" ] ; then\n\tif [ -n \"$samples\" ] ; then\n\t\t# cat a smartctl output text file instead of running smartctl\n\t\t# on a vdev (only used for developer testing).\n\t\tfile=$(get_filename_from_dir \"$samples\")\n\t\techo \"file=$file\"\n",
                    "rendered": {
                      "text": "\nif [ -b \"$somepath\" ] && PATH=\"/usr/sbin:$PATH\" command -v smartctl > /dev/null || [ -n \"$samples\" ] ; then\n\tif [ -n \"$samples\" ] ; then\n\t\t# cat a smartctl output text file instead of running smartctl\n\t\t# on a vdev (only used for developer testing).\n\t\tfile=$(get_filename_from_dir \"$samples\")\n\t\techo \"file=$file\"\n",
                      "markdown": "`\nif [ -b \"$somepath\" ] && PATH=\"/usr/sbin:$PATH\" command -v smartctl > /dev/null || [ -n \"$samples\" ] ; then\n\tif [ -n \"$samples\" ] ; then\n\t\t# cat a smartctl output text file instead of running smartctl\n\t\t# on a vdev (only used for developer testing).\n\t\tfile=$(get_filename_from_dir \"$samples\")\n\t\techo \"file=$file\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/off_ucor"
                },
                "region": {
                  "startLine": 68,
                  "startColumn": 56,
                  "endLine": 68,
                  "endColumn": 61,
                  "snippet": {
                    "text": "script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n",
                    "rendered": {
                      "text": "script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n",
                      "markdown": "`script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/off_ucor"
                },
                "region": {
                  "startLine": 68,
                  "startColumn": 25,
                  "endLine": 68,
                  "endColumn": 31,
                  "snippet": {
                    "text": "script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n",
                    "rendered": {
                      "text": "script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n",
                      "markdown": "`script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/off_ucor"
                },
                "region": {
                  "startLine": 56,
                  "endLine": 56,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\tnum_files=$(find \"$dir\" -maxdepth 1 -type f | wc -l)\n\tmod=$((pid % num_files))\n\ti=0\n\tfind \"$dir\" -type f -printf '%f\\n' | while read -r file ; do\n\t\tif [ \"$mod\" = \"$i\" ] ; then\n\t\t\techo \"$file\"\n\t\t\tbreak\n",
                    "rendered": {
                      "text": "\tnum_files=$(find \"$dir\" -maxdepth 1 -type f | wc -l)\n\tmod=$((pid % num_files))\n\ti=0\n\tfind \"$dir\" -type f -printf '%f\\n' | while read -r file ; do\n\t\tif [ \"$mod\" = \"$i\" ] ; then\n\t\t\techo \"$file\"\n\t\t\tbreak\n",
                      "markdown": "`\tnum_files=$(find \"$dir\" -maxdepth 1 -type f | wc -l)\n\tmod=$((pid % num_files))\n\ti=0\n\tfind \"$dir\" -type f -printf '%f\\n' | while read -r file ; do\n\t\tif [ \"$mod\" = \"$i\" ] ; then\n\t\t\techo \"$file\"\n\t\t\tbreak\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/off_ucor"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 38,
                  "endLine": 47,
                  "endColumn": 46,
                  "snippet": {
                    "text": "#\n# Look in directory DIR and return a filename from it.  The filename returned\n# is chosen quasi-sequentially (based off our PID).  This allows us to return\n# a different filename every time this script is invoked (which we do for each\n# vdev), without having to maintain state.\nget_filename_from_dir()\n{\n",
                    "rendered": {
                      "text": "#\n# Look in directory DIR and return a filename from it.  The filename returned\n# is chosen quasi-sequentially (based off our PID).  This allows us to return\n# a different filename every time this script is invoked (which we do for each\n# vdev), without having to maintain state.\nget_filename_from_dir()\n{\n",
                      "markdown": "`#\n# Look in directory DIR and return a filename from it.  The filename returned\n# is chosen quasi-sequentially (based off our PID).  This allows us to return\n# a different filename every time this script is invoked (which we do for each\n# vdev), without having to maintain state.\nget_filename_from_dir()\n{\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/off_ucor"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 28,
                  "endLine": 47,
                  "endColumn": 34,
                  "snippet": {
                    "text": "#\n# Look in directory DIR and return a filename from it.  The filename returned\n# is chosen quasi-sequentially (based off our PID).  This allows us to return\n# a different filename every time this script is invoked (which we do for each\n# vdev), without having to maintain state.\nget_filename_from_dir()\n{\n",
                    "rendered": {
                      "text": "#\n# Look in directory DIR and return a filename from it.  The filename returned\n# is chosen quasi-sequentially (based off our PID).  This allows us to return\n# a different filename every time this script is invoked (which we do for each\n# vdev), without having to maintain state.\nget_filename_from_dir()\n{\n",
                      "markdown": "`#\n# Look in directory DIR and return a filename from it.  The filename returned\n# is chosen quasi-sequentially (based off our PID).  This allows us to return\n# a different filename every time this script is invoked (which we do for each\n# vdev), without having to maintain state.\nget_filename_from_dir()\n{\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/off_ucor"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 27,
                  "endLine": 20,
                  "endColumn": 36,
                  "snippet": {
                    "text": "hours_on:\tShow number of hours drive powered on (all drives).\nrealloc:\tShow SMART reallocated sectors count (ATA).\nrep_ucor:\tShow SMART reported uncorrectable count (ATA).\ncmd_to:\t\tShow SMART command timeout count (ATA).\npend_sec:\tShow SMART current pending sector count (ATA).\noff_ucor:\tShow SMART offline uncorrectable errors (ATA).\nata_err:\tShow SMART ATA errors (ATA).\n",
                    "rendered": {
                      "text": "hours_on:\tShow number of hours drive powered on (all drives).\nrealloc:\tShow SMART reallocated sectors count (ATA).\nrep_ucor:\tShow SMART reported uncorrectable count (ATA).\ncmd_to:\t\tShow SMART command timeout count (ATA).\npend_sec:\tShow SMART current pending sector count (ATA).\noff_ucor:\tShow SMART offline uncorrectable errors (ATA).\nata_err:\tShow SMART ATA errors (ATA).\n",
                      "markdown": "`hours_on:\tShow number of hours drive powered on (all drives).\nrealloc:\tShow SMART reallocated sectors count (ATA).\nrep_ucor:\tShow SMART reported uncorrectable count (ATA).\ncmd_to:\t\tShow SMART command timeout count (ATA).\npend_sec:\tShow SMART current pending sector count (ATA).\noff_ucor:\tShow SMART offline uncorrectable errors (ATA).\nata_err:\tShow SMART ATA errors (ATA).\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zed.d/resilver_finish-notify.sh"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 20,
                  "endLine": 51,
                  "endColumn": 28,
                  "snippet": {
                    "text": "    echo\n    echo \"   eid: ${ZEVENT_EID}\"\n    echo \" class: ${ZEVENT_SUBCLASS}\"\n    echo \"  host: $(hostname)\"\n    echo \"  time: ${ZEVENT_TIME_STRING}\"\n\n    \"${ZPOOL}\" status \"${ZEVENT_POOL}\"\n",
                    "rendered": {
                      "text": "    echo\n    echo \"   eid: ${ZEVENT_EID}\"\n    echo \" class: ${ZEVENT_SUBCLASS}\"\n    echo \"  host: $(hostname)\"\n    echo \"  time: ${ZEVENT_TIME_STRING}\"\n\n    \"${ZPOOL}\" status \"${ZEVENT_POOL}\"\n",
                      "markdown": "`    echo\n    echo \"   eid: ${ZEVENT_EID}\"\n    echo \" class: ${ZEVENT_SUBCLASS}\"\n    echo \"  host: $(hostname)\"\n    echo \"  time: ${ZEVENT_TIME_STRING}\"\n\n    \"${ZPOOL}\" status \"${ZEVENT_POOL}\"\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zed.d/resilver_finish-notify.sh"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 67,
                  "endLine": 44,
                  "endColumn": 75,
                  "snippet": {
                    "text": "fi\n\numask 077\nnote_subject=\"ZFS ${ZEVENT_SUBCLASS} event for ${ZEVENT_POOL} on $(hostname)\"\nnote_pathname=\"$(mktemp)\"\n{\n    echo \"ZFS has finished a ${action}:\"\n",
                    "rendered": {
                      "text": "fi\n\numask 077\nnote_subject=\"ZFS ${ZEVENT_SUBCLASS} event for ${ZEVENT_POOL} on $(hostname)\"\nnote_pathname=\"$(mktemp)\"\n{\n    echo \"ZFS has finished a ${action}:\"\n",
                      "markdown": "`fi\n\numask 077\nnote_subject=\"ZFS ${ZEVENT_SUBCLASS} event for ${ZEVENT_POOL} on $(hostname)\"\nnote_pathname=\"$(mktemp)\"\n{\n    echo \"ZFS has finished a ${action}:\"\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zed.d/resilver_finish-notify.sh"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 9,
                  "endLine": 39,
                  "endColumn": 15,
                  "snippet": {
                    "text": "#\nif [ \"${ZEVENT_SUBCLASS}\" = \"scrub_finish\" ]; then\n    healthy=\"$(\"${ZPOOL}\" status -x \"${ZEVENT_POOL}\" \\\n        | grep \"'${ZEVENT_POOL}' is healthy\")\"\n    [ -n \"${healthy}\" ] && [ \"${ZED_NOTIFY_VERBOSE}\" -eq 0 ] && exit 3\nfi\n\n",
                    "rendered": {
                      "text": "#\nif [ \"${ZEVENT_SUBCLASS}\" = \"scrub_finish\" ]; then\n    healthy=\"$(\"${ZPOOL}\" status -x \"${ZEVENT_POOL}\" \\\n        | grep \"'${ZEVENT_POOL}' is healthy\")\"\n    [ -n \"${healthy}\" ] && [ \"${ZED_NOTIFY_VERBOSE}\" -eq 0 ] && exit 3\nfi\n\n",
                      "markdown": "`#\nif [ \"${ZEVENT_SUBCLASS}\" = \"scrub_finish\" ]; then\n    healthy=\"$(\"${ZPOOL}\" status -x \"${ZEVENT_POOL}\" \\\n        | grep \"'${ZEVENT_POOL}' is healthy\")\"\n    [ -n \"${healthy}\" ] && [ \"${ZED_NOTIFY_VERBOSE}\" -eq 0 ] && exit 3\nfi\n\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zed.d/pool_import-led.sh"
                },
                "region": {
                  "startLine": 73,
                  "startColumn": 6,
                  "endLine": 73,
                  "endColumn": 14,
                  "snippet": {
                    "text": "\tfi\n\n\t# If another process is accessing the LED when we attempt to update it,\n\t# the update will be lost so retry until the LED actually changes or we\n\t# timeout.\n\tfor _ in 1 2 3 4 5; do\n\t\t# We want to check the current state first, since writing to the\n",
                    "rendered": {
                      "text": "\tfi\n\n\t# If another process is accessing the LED when we attempt to update it,\n\t# the update will be lost so retry until the LED actually changes or we\n\t# timeout.\n\tfor _ in 1 2 3 4 5; do\n\t\t# We want to check the current state first, since writing to the\n",
                      "markdown": "`\tfi\n\n\t# If another process is accessing the LED when we attempt to update it,\n\t# the update will be lost so retry until the LED actually changes or we\n\t# timeout.\n\tfor _ in 1 2 3 4 5; do\n\t\t# We want to check the current state first, since writing to the\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zed.d/pool_import-led.sh"
                },
                "region": {
                  "startLine": 72,
                  "startColumn": 61,
                  "endLine": 72,
                  "endColumn": 69,
                  "snippet": {
                    "text": "\t\treturn 3\n\tfi\n\n\t# If another process is accessing the LED when we attempt to update it,\n\t# the update will be lost so retry until the LED actually changes or we\n\t# timeout.\n\tfor _ in 1 2 3 4 5; do\n",
                    "rendered": {
                      "text": "\t\treturn 3\n\tfi\n\n\t# If another process is accessing the LED when we attempt to update it,\n\t# the update will be lost so retry until the LED actually changes or we\n\t# timeout.\n\tfor _ in 1 2 3 4 5; do\n",
                      "markdown": "`\t\treturn 3\n\tfi\n\n\t# If another process is accessing the LED when we attempt to update it,\n\t# the update will be lost so retry until the LED actually changes or we\n\t# timeout.\n\tfor _ in 1 2 3 4 5; do\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zed.d/pool_import-led.sh"
                },
                "region": {
                  "startLine": 200,
                  "startColumn": 33,
                  "endLine": 200,
                  "endColumn": 38,
                  "snippet": {
                    "text": "\t\t\tvdev_enc_sysfs_path=$(nvme_dev_to_slot \"$dev\")\n\t\tfi\n\n\t\tcurrent_val=$(echo \"$therest\" | awk '{print $NF}')\n\n\t\tif [ \"$current_val\" != \"0\" ] ; then\n\t\t\tcurrent_val=1\n",
                    "rendered": {
                      "text": "\t\t\tvdev_enc_sysfs_path=$(nvme_dev_to_slot \"$dev\")\n\t\tfi\n\n\t\tcurrent_val=$(echo \"$therest\" | awk '{print $NF}')\n\n\t\tif [ \"$current_val\" != \"0\" ] ; then\n\t\t\tcurrent_val=1\n",
                      "markdown": "`\t\t\tvdev_enc_sysfs_path=$(nvme_dev_to_slot \"$dev\")\n\t\tfi\n\n\t\tcurrent_val=$(echo \"$therest\" | awk '{print $NF}')\n\n\t\tif [ \"$current_val\" != \"0\" ] ; then\n\t\t\tcurrent_val=1\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zed.d/pool_import-led.sh"
                },
                "region": {
                  "startLine": 193,
                  "startColumn": 37,
                  "endLine": 193,
                  "endColumn": 42,
                  "snippet": {
                    "text": "\twhile read -r vdev state _ _ _ therest; do\n\t\t# Read out current LED value and path\n\t\t# Get dev name (like 'sda')\n\t\tdev=$(basename \"$(echo \"$therest\" | awk '{print $(NF-1)}')\")\n\t\tvdev_enc_sysfs_path=$(realpath \"/sys/class/block/$dev/device/enclosure_device\"*)\n\t\tif [ ! -d \"$vdev_enc_sysfs_path\" ] ; then\n\t\t\t# This is not a JBOD disk, but it could be a PCI NVMe drive\n",
                    "rendered": {
                      "text": "\twhile read -r vdev state _ _ _ therest; do\n\t\t# Read out current LED value and path\n\t\t# Get dev name (like 'sda')\n\t\tdev=$(basename \"$(echo \"$therest\" | awk '{print $(NF-1)}')\")\n\t\tvdev_enc_sysfs_path=$(realpath \"/sys/class/block/$dev/device/enclosure_device\"*)\n\t\tif [ ! -d \"$vdev_enc_sysfs_path\" ] ; then\n\t\t\t# This is not a JBOD disk, but it could be a PCI NVMe drive\n",
                      "markdown": "`\twhile read -r vdev state _ _ _ therest; do\n\t\t# Read out current LED value and path\n\t\t# Get dev name (like 'sda')\n\t\tdev=$(basename \"$(echo \"$therest\" | awk '{print $(NF-1)}')\")\n\t\tvdev_enc_sysfs_path=$(realpath \"/sys/class/block/$dev/device/enclosure_device\"*)\n\t\tif [ ! -d \"$vdev_enc_sysfs_path\" ] ; then\n\t\t\t# This is not a JBOD disk, but it could be a PCI NVMe drive\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zed.d/pool_import-led.sh"
                },
                "region": {
                  "startLine": 188,
                  "startColumn": 67,
                  "endLine": 188,
                  "endColumn": 73,
                  "snippet": {
                    "text": "\t#    U47     ONLINE       0     0     0   /dev/sdn          0\n\t#    U50     ONLINE       0     0     0  /dev/sdbn          0\n\t#\n\tZPOOL_SCRIPTS_AS_ROOT=1 $ZPOOL status -c upath,fault_led \"$pool\" | grep '/dev/' | (\n\trc=0\n\twhile read -r vdev state _ _ _ therest; do\n\t\t# Read out current LED value and path\n",
                    "rendered": {
                      "text": "\t#    U47     ONLINE       0     0     0   /dev/sdn          0\n\t#    U50     ONLINE       0     0     0  /dev/sdbn          0\n\t#\n\tZPOOL_SCRIPTS_AS_ROOT=1 $ZPOOL status -c upath,fault_led \"$pool\" | grep '/dev/' | (\n\trc=0\n\twhile read -r vdev state _ _ _ therest; do\n\t\t# Read out current LED value and path\n",
                      "markdown": "`\t#    U47     ONLINE       0     0     0   /dev/sdn          0\n\t#    U50     ONLINE       0     0     0  /dev/sdbn          0\n\t#\n\tZPOOL_SCRIPTS_AS_ROOT=1 $ZPOOL status -c upath,fault_led \"$pool\" | grep '/dev/' | (\n\trc=0\n\twhile read -r vdev state _ _ _ therest; do\n\t\t# Read out current LED value and path\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zed.d/pool_import-led.sh"
                },
                "region": {
                  "startLine": 158,
                  "startColumn": 23,
                  "endLine": 158,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\t\t\t# address=           \"0000:01:00.0\"\n\t\t\t# this_address =     \"0000:01:00\"\n\t\t\t#\n\t\t\tif echo \"$address\" | grep -Eq ^\"$this_address\" ; then\n\t\t\t\techo \"${sys_addr%/*}\"\n\t\t\t\tbreak\n\t\t\tfi\n",
                    "rendered": {
                      "text": "\t\t\t# address=           \"0000:01:00.0\"\n\t\t\t# this_address =     \"0000:01:00\"\n\t\t\t#\n\t\t\tif echo \"$address\" | grep -Eq ^\"$this_address\" ; then\n\t\t\t\techo \"${sys_addr%/*}\"\n\t\t\t\tbreak\n\t\t\tfi\n",
                      "markdown": "`\t\t\t# address=           \"0000:01:00.0\"\n\t\t\t# this_address =     \"0000:01:00\"\n\t\t\t#\n\t\t\tif echo \"$address\" | grep -Eq ^\"$this_address\" ; then\n\t\t\t\techo \"${sys_addr%/*}\"\n\t\t\t\tbreak\n\t\t\tfi\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zed.d/pool_import-led.sh"
                },
                "region": {
                  "startLine": 147,
                  "endLine": 147,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\t# Get the address \"0000:01:00.0\"\n\tread -r address < \"/sys/class/block/$dev/device/address\"\n\n\tfind /sys/bus/pci/slots -regex '.*/[0-9]+/address$' | \\\n\t\twhile read -r sys_addr; do\n\t\t\tread -r this_address < \"$sys_addr\"\n\n",
                    "rendered": {
                      "text": "\t# Get the address \"0000:01:00.0\"\n\tread -r address < \"/sys/class/block/$dev/device/address\"\n\n\tfind /sys/bus/pci/slots -regex '.*/[0-9]+/address$' | \\\n\t\twhile read -r sys_addr; do\n\t\t\tread -r this_address < \"$sys_addr\"\n\n",
                      "markdown": "`\t# Get the address \"0000:01:00.0\"\n\tread -r address < \"/sys/class/block/$dev/device/address\"\n\n\tfind /sys/bus/pci/slots -regex '.*/[0-9]+/address$' | \\\n\t\twhile read -r sys_addr; do\n\t\t\tread -r this_address < \"$sys_addr\"\n\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zed.d/pool_import-led.sh"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 13,
                  "endLine": 43,
                  "endColumn": 18,
                  "snippet": {
                    "text": "fi\n\nzed_check_cmd \"$ZPOOL\" || exit 4\nzed_check_cmd awk || exit 5\n\n# Global used in set_led debug print\nvdev=\"\"\n",
                    "rendered": {
                      "text": "fi\n\nzed_check_cmd \"$ZPOOL\" || exit 4\nzed_check_cmd awk || exit 5\n\n# Global used in set_led debug print\nvdev=\"\"\n",
                      "markdown": "`fi\n\nzed_check_cmd \"$ZPOOL\" || exit 4\nzed_check_cmd awk || exit 5\n\n# Global used in set_led debug print\nvdev=\"\"\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zed.d/pool_import-led.sh"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 6,
                  "endLine": 28,
                  "endColumn": 11,
                  "snippet": {
                    "text": "#   2: enclosure leds administratively disabled\n#   3: The led sysfs path passed from ZFS does not exist\n#   4: $ZPOOL not set\n#   5: awk is not installed\n\n[ -f \"${ZED_ZEDLET_DIR}/zed.rc\" ] && . \"${ZED_ZEDLET_DIR}/zed.rc\"\n. \"${ZED_ZEDLET_DIR}/zed-functions.sh\"\n",
                    "rendered": {
                      "text": "#   2: enclosure leds administratively disabled\n#   3: The led sysfs path passed from ZFS does not exist\n#   4: $ZPOOL not set\n#   5: awk is not installed\n\n[ -f \"${ZED_ZEDLET_DIR}/zed.rc\" ] && . \"${ZED_ZEDLET_DIR}/zed.rc\"\n. \"${ZED_ZEDLET_DIR}/zed-functions.sh\"\n",
                      "markdown": "`#   2: enclosure leds administratively disabled\n#   3: The led sysfs path passed from ZFS does not exist\n#   4: $ZPOOL not set\n#   5: awk is not installed\n\n[ -f \"${ZED_ZEDLET_DIR}/zed.rc\" ] && . \"${ZED_ZEDLET_DIR}/zed.rc\"\n. \"${ZED_ZEDLET_DIR}/zed-functions.sh\"\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zed.d/pool_import-led.sh"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 50,
                  "endLine": 19,
                  "endColumn": 58,
                  "snippet": {
                    "text": "# and set the LEDs accordingly.  This is the case for pool_import events.\n#\n# Note that this script requires that your enclosure be supported by the\n# Linux SCSI Enclosure services (SES) driver.  The script will do nothing\n# if you have no enclosure, or if your enclosure isn't supported.\n#\n# Exit codes:\n",
                    "rendered": {
                      "text": "# and set the LEDs accordingly.  This is the case for pool_import events.\n#\n# Note that this script requires that your enclosure be supported by the\n# Linux SCSI Enclosure services (SES) driver.  The script will do nothing\n# if you have no enclosure, or if your enclosure isn't supported.\n#\n# Exit codes:\n",
                      "markdown": "`# and set the LEDs accordingly.  This is the case for pool_import events.\n#\n# Note that this script requires that your enclosure be supported by the\n# Linux SCSI Enclosure services (SES) driver.  The script will do nothing\n# if you have no enclosure, or if your enclosure isn't supported.\n#\n# Exit codes:\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zed.d/pool_import-led.sh"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 16,
                  "endLine": 18,
                  "endColumn": 24,
                  "snippet": {
                    "text": "# 2. If those vars are not set, then check the state of all vdevs in the pool\n# and set the LEDs accordingly.  This is the case for pool_import events.\n#\n# Note that this script requires that your enclosure be supported by the\n# Linux SCSI Enclosure services (SES) driver.  The script will do nothing\n# if you have no enclosure, or if your enclosure isn't supported.\n#\n",
                    "rendered": {
                      "text": "# 2. If those vars are not set, then check the state of all vdevs in the pool\n# and set the LEDs accordingly.  This is the case for pool_import events.\n#\n# Note that this script requires that your enclosure be supported by the\n# Linux SCSI Enclosure services (SES) driver.  The script will do nothing\n# if you have no enclosure, or if your enclosure isn't supported.\n#\n",
                      "markdown": "`# 2. If those vars are not set, then check the state of all vdevs in the pool\n# and set the LEDs accordingly.  This is the case for pool_import events.\n#\n# Note that this script requires that your enclosure be supported by the\n# Linux SCSI Enclosure services (SES) driver.  The script will do nothing\n# if you have no enclosure, or if your enclosure isn't supported.\n#\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zed.d/pool_import-led.sh"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 6,
                  "endLine": 9,
                  "endColumn": 14,
                  "snippet": {
                    "text": "# Turn a vdev's fault LED on if it becomes FAULTED, DEGRADED or UNAVAIL.\n# Turn its LED off when it's back ONLINE again.\n#\n# This script run in two basic modes:\n#\n# 1. If $ZEVENT_VDEV_ENC_SYSFS_PATH and $ZEVENT_VDEV_STATE_STR are set, then\n# only set the LED for that particular vdev. This is the case for statechange\n",
                    "rendered": {
                      "text": "# Turn a vdev's fault LED on if it becomes FAULTED, DEGRADED or UNAVAIL.\n# Turn its LED off when it's back ONLINE again.\n#\n# This script run in two basic modes:\n#\n# 1. If $ZEVENT_VDEV_ENC_SYSFS_PATH and $ZEVENT_VDEV_STATE_STR are set, then\n# only set the LED for that particular vdev. This is the case for statechange\n",
                      "markdown": "`# Turn a vdev's fault LED on if it becomes FAULTED, DEGRADED or UNAVAIL.\n# Turn its LED off when it's back ONLINE again.\n#\n# This script run in two basic modes:\n#\n# 1. If $ZEVENT_VDEV_ENC_SYSFS_PATH and $ZEVENT_VDEV_STATE_STR are set, then\n# only set the LED for that particular vdev. This is the case for statechange\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/etc/zfs/zed.d/zed-functions.sh"
                },
                "region": {
                  "startLine": 181,
                  "startColumn": 33,
                  "endLine": 181,
                  "endColumn": 37,
                  "snippet": {
                    "text": "#   pathname: pathname containing the notification message (OPTIONAL)\n#\n# Return\n#   0: notification succeeded via at least one method\n#   1: notification failed\n#   2: no notification methods configured\n#\n",
                    "rendered": {
                      "text": "#   pathname: pathname containing the notification message (OPTIONAL)\n#\n# Return\n#   0: notification succeeded via at least one method\n#   1: notification failed\n#   2: no notification methods configured\n#\n",
                      "markdown": "`#   pathname: pathname containing the notification message (OPTIONAL)\n#\n# Return\n#   0: notification succeeded via at least one method\n#   1: notification failed\n#   2: no notification methods configured\n#\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/etc/zfs/zed.d/zed-functions.sh"
                },
                "region": {
                  "startLine": 91,
                  "startColumn": 5,
                  "endLine": 91,
                  "endColumn": 11,
                  "snippet": {
                    "text": "# Every zed_lock() must be paired with a corresponding zed_unlock().\n#\n# By default, flock-style locks associate the lockfile with file descriptor 8.\n# The bash manpage warns that file descriptors >9 should be used with care as\n# they may conflict with file descriptors used internally by the shell.  File\n# descriptor 9 is reserved for zed_rate_limit().  If concurrent locks are held\n# within the same process, they must use different file descriptors (preferably\n",
                    "rendered": {
                      "text": "# Every zed_lock() must be paired with a corresponding zed_unlock().\n#\n# By default, flock-style locks associate the lockfile with file descriptor 8.\n# The bash manpage warns that file descriptors >9 should be used with care as\n# they may conflict with file descriptors used internally by the shell.  File\n# descriptor 9 is reserved for zed_rate_limit().  If concurrent locks are held\n# within the same process, they must use different file descriptors (preferably\n",
                      "markdown": "`# Every zed_lock() must be paired with a corresponding zed_unlock().\n#\n# By default, flock-style locks associate the lockfile with file descriptor 8.\n# The bash manpage warns that file descriptors >9 should be used with care as\n# they may conflict with file descriptors used internally by the shell.  File\n# descriptor 9 is reserved for zed_rate_limit().  If concurrent locks are held\n# within the same process, they must use different file descriptors (preferably\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/etc/zfs/zed.d/zed-functions.sh"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 9,
                  "endLine": 35,
                  "snippet": {
                    "text": "#\nzed_check_cmd()\n{\n    local cmd\n    local rv=0\n\n    for cmd; do\n        if ! command -v \"${cmd}\" >/dev/null 2>&1; then\n",
                    "rendered": {
                      "text": "#\nzed_check_cmd()\n{\n    local cmd\n    local rv=0\n\n    for cmd; do\n        if ! command -v \"${cmd}\" >/dev/null 2>&1; then\n",
                      "markdown": "`#\nzed_check_cmd()\n{\n    local cmd\n    local rv=0\n\n    for cmd; do\n        if ! command -v \"${cmd}\" >/dev/null 2>&1; then\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/etc/zfs/zed.d/zed-functions.sh"
                },
                "region": {
                  "startLine": 708,
                  "startColumn": 10,
                  "endLine": 708,
                  "endColumn": 18,
                  "snippet": {
                    "text": "\n# zed_exit_if_ignoring_this_event\n#\n# Exit the script if we should ignore this event, as determined by\n# $ZED_SYSLOG_SUBCLASS_INCLUDE and $ZED_SYSLOG_SUBCLASS_EXCLUDE in zed.rc.\n# This function assumes you've imported the normal zed variables.\nzed_exit_if_ignoring_this_event()\n",
                    "rendered": {
                      "text": "\n# zed_exit_if_ignoring_this_event\n#\n# Exit the script if we should ignore this event, as determined by\n# $ZED_SYSLOG_SUBCLASS_INCLUDE and $ZED_SYSLOG_SUBCLASS_EXCLUDE in zed.rc.\n# This function assumes you've imported the normal zed variables.\nzed_exit_if_ignoring_this_event()\n",
                      "markdown": "`\n# zed_exit_if_ignoring_this_event\n#\n# Exit the script if we should ignore this event, as determined by\n# $ZED_SYSLOG_SUBCLASS_INCLUDE and $ZED_SYSLOG_SUBCLASS_EXCLUDE in zed.rc.\n# This function assumes you've imported the normal zed variables.\nzed_exit_if_ignoring_this_event()\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/etc/zfs/zed.d/zed-functions.sh"
                },
                "region": {
                  "startLine": 703,
                  "startColumn": 34,
                  "endLine": 703,
                  "endColumn": 39,
                  "snippet": {
                    "text": "\tfi\n\n\tguid=\"$(printf \"%u\" \"$1\")\"\n\t$ZPOOL get -H -ovalue,name guid | awk '$1 == '\"$guid\"' {print $2; exit}'\n}\n\n# zed_exit_if_ignoring_this_event\n",
                    "rendered": {
                      "text": "\tfi\n\n\tguid=\"$(printf \"%u\" \"$1\")\"\n\t$ZPOOL get -H -ovalue,name guid | awk '$1 == '\"$guid\"' {print $2; exit}'\n}\n\n# zed_exit_if_ignoring_this_event\n",
                      "markdown": "`\tfi\n\n\tguid=\"$(printf \"%u\" \"$1\")\"\n\t$ZPOOL get -H -ovalue,name guid | awk '$1 == '\"$guid\"' {print $2; exit}'\n}\n\n# zed_exit_if_ignoring_this_event\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/etc/zfs/zed.d/zed-functions.sh"
                },
                "region": {
                  "startLine": 678,
                  "startColumn": 7,
                  "endLine": 678,
                  "endColumn": 11,
                  "snippet": {
                    "text": "        grep -E -v \"^[0-9]+;${tag}\\$\" \"${statefile}\" 2>/dev/null \\\n            > \"${statefile}.$$\"\n        echo \"${time_now};${tag}\" >> \"${statefile}.$$\"\n        mv -f \"${statefile}.$$\" \"${statefile}\"\n        umask \"${umask_bak}\"\n    fi\n\n",
                    "rendered": {
                      "text": "        grep -E -v \"^[0-9]+;${tag}\\$\" \"${statefile}\" 2>/dev/null \\\n            > \"${statefile}.$$\"\n        echo \"${time_now};${tag}\" >> \"${statefile}.$$\"\n        mv -f \"${statefile}.$$\" \"${statefile}\"\n        umask \"${umask_bak}\"\n    fi\n\n",
                      "markdown": "`        grep -E -v \"^[0-9]+;${tag}\\$\" \"${statefile}\" 2>/dev/null \\\n            > \"${statefile}.$$\"\n        echo \"${time_now};${tag}\" >> \"${statefile}.$$\"\n        mv -f \"${statefile}.$$\" \"${statefile}\"\n        umask \"${umask_bak}\"\n    fi\n\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/etc/zfs/zed.d/zed-functions.sh"
                },
                "region": {
                  "startLine": 675,
                  "startColumn": 7,
                  "endLine": 675,
                  "endColumn": 13,
                  "snippet": {
                    "text": "    else\n        umask_bak=\"$(umask)\"\n        umask 077\n        grep -E -v \"^[0-9]+;${tag}\\$\" \"${statefile}\" 2>/dev/null \\\n            > \"${statefile}.$$\"\n        echo \"${time_now};${tag}\" >> \"${statefile}.$$\"\n        mv -f \"${statefile}.$$\" \"${statefile}\"\n",
                    "rendered": {
                      "text": "    else\n        umask_bak=\"$(umask)\"\n        umask 077\n        grep -E -v \"^[0-9]+;${tag}\\$\" \"${statefile}\" 2>/dev/null \\\n            > \"${statefile}.$$\"\n        echo \"${time_now};${tag}\" >> \"${statefile}.$$\"\n        mv -f \"${statefile}.$$\" \"${statefile}\"\n",
                      "markdown": "`    else\n        umask_bak=\"$(umask)\"\n        umask 077\n        grep -E -v \"^[0-9]+;${tag}\\$\" \"${statefile}\" 2>/dev/null \\\n            > \"${statefile}.$$\"\n        echo \"${time_now};${tag}\" >> \"${statefile}.$$\"\n        mv -f \"${statefile}.$$\" \"${statefile}\"\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/etc/zfs/zed.d/zed-functions.sh"
                },
                "region": {
                  "startLine": 667,
                  "startColumn": 19,
                  "endLine": 667,
                  "endColumn": 24,
                  "snippet": {
                    "text": "    zed_lock \"${lockfile}\" \"${lockfile_fd}\"\n    time_now=\"$(date +%s)\"\n    time_prev=\"$(grep -E \"^[0-9]+;${tag}\\$\" \"${statefile}\" 2>/dev/null \\\n        | tail -1 | cut -d\\; -f1)\"\n\n    if [ -n \"${time_prev}\" ] \\\n            && [ \"$((time_now - time_prev))\" -lt \"${interval}\" ]; then\n",
                    "rendered": {
                      "text": "    zed_lock \"${lockfile}\" \"${lockfile_fd}\"\n    time_now=\"$(date +%s)\"\n    time_prev=\"$(grep -E \"^[0-9]+;${tag}\\$\" \"${statefile}\" 2>/dev/null \\\n        | tail -1 | cut -d\\; -f1)\"\n\n    if [ -n \"${time_prev}\" ] \\\n            && [ \"$((time_now - time_prev))\" -lt \"${interval}\" ]; then\n",
                      "markdown": "`    zed_lock \"${lockfile}\" \"${lockfile_fd}\"\n    time_now=\"$(date +%s)\"\n    time_prev=\"$(grep -E \"^[0-9]+;${tag}\\$\" \"${statefile}\" 2>/dev/null \\\n        | tail -1 | cut -d\\; -f1)\"\n\n    if [ -n \"${time_prev}\" ] \\\n            && [ \"$((time_now - time_prev))\" -lt \"${interval}\" ]; then\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/etc/zfs/zed.d/zed-functions.sh"
                },
                "region": {
                  "startLine": 667,
                  "startColumn": 9,
                  "endLine": 667,
                  "endColumn": 15,
                  "snippet": {
                    "text": "    zed_lock \"${lockfile}\" \"${lockfile_fd}\"\n    time_now=\"$(date +%s)\"\n    time_prev=\"$(grep -E \"^[0-9]+;${tag}\\$\" \"${statefile}\" 2>/dev/null \\\n        | tail -1 | cut -d\\; -f1)\"\n\n    if [ -n \"${time_prev}\" ] \\\n            && [ \"$((time_now - time_prev))\" -lt \"${interval}\" ]; then\n",
                    "rendered": {
                      "text": "    zed_lock \"${lockfile}\" \"${lockfile_fd}\"\n    time_now=\"$(date +%s)\"\n    time_prev=\"$(grep -E \"^[0-9]+;${tag}\\$\" \"${statefile}\" 2>/dev/null \\\n        | tail -1 | cut -d\\; -f1)\"\n\n    if [ -n \"${time_prev}\" ] \\\n            && [ \"$((time_now - time_prev))\" -lt \"${interval}\" ]; then\n",
                      "markdown": "`    zed_lock \"${lockfile}\" \"${lockfile_fd}\"\n    time_now=\"$(date +%s)\"\n    time_prev=\"$(grep -E \"^[0-9]+;${tag}\\$\" \"${statefile}\" 2>/dev/null \\\n        | tail -1 | cut -d\\; -f1)\"\n\n    if [ -n \"${time_prev}\" ] \\\n            && [ \"$((time_now - time_prev))\" -lt \"${interval}\" ]; then\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/etc/zfs/zed.d/zed-functions.sh"
                },
                "region": {
                  "startLine": 637,
                  "startColumn": 13,
                  "endLine": 637,
                  "endColumn": 19,
                  "snippet": {
                    "text": "#\n# Arguments\n#   tag: arbitrary string for grouping related events to rate-limit\n#   interval: time interval in seconds (OPTIONAL)\n#\n# Globals\n#   ZED_NOTIFY_INTERVAL_SECS\n",
                    "rendered": {
                      "text": "#\n# Arguments\n#   tag: arbitrary string for grouping related events to rate-limit\n#   interval: time interval in seconds (OPTIONAL)\n#\n# Globals\n#   ZED_NOTIFY_INTERVAL_SECS\n",
                      "markdown": "`#\n# Arguments\n#   tag: arbitrary string for grouping related events to rate-limit\n#   interval: time interval in seconds (OPTIONAL)\n#\n# Globals\n#   ZED_NOTIFY_INTERVAL_SECS\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/etc/zfs/zed.d/zed-functions.sh"
                },
                "region": {
                  "startLine": 618,
                  "startColumn": 9,
                  "endLine": 618,
                  "endColumn": 14,
                  "snippet": {
                    "text": "        return 1\n    fi\n    msg_err=\"$(echo \"${msg_out}\" \\\n        | sed -n -e 's/.*\"errors\" *:.*\\[\\(.*\\)\\].*/\\1/p')\"\n    if [ -n \"${msg_err}\" ]; then\n        zed_log_err \"ntfy \\\"${msg_err}\"\\\"\n        return 1\n",
                    "rendered": {
                      "text": "        return 1\n    fi\n    msg_err=\"$(echo \"${msg_out}\" \\\n        | sed -n -e 's/.*\"errors\" *:.*\\[\\(.*\\)\\].*/\\1/p')\"\n    if [ -n \"${msg_err}\" ]; then\n        zed_log_err \"ntfy \\\"${msg_err}\"\\\"\n        return 1\n",
                      "markdown": "`        return 1\n    fi\n    msg_err=\"$(echo \"${msg_out}\" \\\n        | sed -n -e 's/.*\"errors\" *:.*\\[\\(.*\\)\\].*/\\1/p')\"\n    if [ -n \"${msg_err}\" ]; then\n        zed_log_err \"ntfy \\\"${msg_err}\"\\\"\n        return 1\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/etc/zfs/zed.d/zed-functions.sh"
                },
                "region": {
                  "startLine": 605,
                  "startColumn": 7,
                  "endLine": 605,
                  "endColumn": 13,
                  "snippet": {
                    "text": "        )\"; rv=$?\n    else\n        msg_out=\"$( \\\n        curl \\\n        -H \"Title: ${subject}\" \\\n        -d \"${msg_body}\" \\\n        -H \"Priority: high\" \\\n",
                    "rendered": {
                      "text": "        )\"; rv=$?\n    else\n        msg_out=\"$( \\\n        curl \\\n        -H \"Title: ${subject}\" \\\n        -d \"${msg_body}\" \\\n        -H \"Priority: high\" \\\n",
                      "markdown": "`        )\"; rv=$?\n    else\n        msg_out=\"$( \\\n        curl \\\n        -H \"Title: ${subject}\" \\\n        -d \"${msg_body}\" \\\n        -H \"Priority: high\" \\\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/etc/zfs/zed.d/zed-functions.sh"
                },
                "region": {
                  "startLine": 595,
                  "startColumn": 7,
                  "endLine": 595,
                  "endColumn": 13,
                  "snippet": {
                    "text": "    #\n    if [ -n \"${ZED_NTFY_ACCESS_TOKEN}\" ]; then\n        msg_out=\"$( \\\n        curl \\\n        -u \":${ZED_NTFY_ACCESS_TOKEN}\" \\\n        -H \"Title: ${subject}\" \\\n        -d \"${msg_body}\" \\\n",
                    "rendered": {
                      "text": "    #\n    if [ -n \"${ZED_NTFY_ACCESS_TOKEN}\" ]; then\n        msg_out=\"$( \\\n        curl \\\n        -u \":${ZED_NTFY_ACCESS_TOKEN}\" \\\n        -H \"Title: ${subject}\" \\\n        -d \"${msg_body}\" \\\n",
                      "markdown": "`    #\n    if [ -n \"${ZED_NTFY_ACCESS_TOKEN}\" ]; then\n        msg_out=\"$( \\\n        curl \\\n        -u \":${ZED_NTFY_ACCESS_TOKEN}\" \\\n        -H \"Title: ${subject}\" \\\n        -d \"${msg_body}\" \\\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/etc/zfs/zed.d/zed-functions.sh"
                },
                "region": {
                  "startLine": 544,
                  "startColumn": 19,
                  "endLine": 544,
                  "endColumn": 24,
                  "snippet": {
                    "text": "# access token that could be used if a topic is read/write protected. If a\n# topic can be written to publicaly, a ZED_NTFY_ACCESS_TOKEN is not required.\n#\n# Requires curl and sed executables to be installed in the standard PATH.\n#\n# References\n#   https://docs.ntfy.sh\n",
                    "rendered": {
                      "text": "# access token that could be used if a topic is read/write protected. If a\n# topic can be written to publicaly, a ZED_NTFY_ACCESS_TOKEN is not required.\n#\n# Requires curl and sed executables to be installed in the standard PATH.\n#\n# References\n#   https://docs.ntfy.sh\n",
                      "markdown": "`# access token that could be used if a topic is read/write protected. If a\n# topic can be written to publicaly, a ZED_NTFY_ACCESS_TOKEN is not required.\n#\n# Requires curl and sed executables to be installed in the standard PATH.\n#\n# References\n#   https://docs.ntfy.sh\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/etc/zfs/zed.d/zed-functions.sh"
                },
                "region": {
                  "startLine": 544,
                  "startColumn": 10,
                  "endLine": 544,
                  "endColumn": 16,
                  "snippet": {
                    "text": "# access token that could be used if a topic is read/write protected. If a\n# topic can be written to publicaly, a ZED_NTFY_ACCESS_TOKEN is not required.\n#\n# Requires curl and sed executables to be installed in the standard PATH.\n#\n# References\n#   https://docs.ntfy.sh\n",
                    "rendered": {
                      "text": "# access token that could be used if a topic is read/write protected. If a\n# topic can be written to publicaly, a ZED_NTFY_ACCESS_TOKEN is not required.\n#\n# Requires curl and sed executables to be installed in the standard PATH.\n#\n# References\n#   https://docs.ntfy.sh\n",
                      "markdown": "`# access token that could be used if a topic is read/write protected. If a\n# topic can be written to publicaly, a ZED_NTFY_ACCESS_TOKEN is not required.\n#\n# Requires curl and sed executables to be installed in the standard PATH.\n#\n# References\n#   https://docs.ntfy.sh\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/etc/zfs/zed.d/zed-functions.sh"
                },
                "region": {
                  "startLine": 539,
                  "startColumn": 37,
                  "endLine": 539,
                  "endColumn": 46,
                  "snippet": {
                    "text": "# Send a notification via Ntfy.sh <https://ntfy.sh/>.\n# The ntfy topic (ZED_NTFY_TOPIC) identifies the topic that the notification\n# will be sent to Ntfy.sh server. The ntfy url (ZED_NTFY_URL) defines the\n# self-hosted or provided hosted ntfy service location. The ntfy access token\n# <https://docs.ntfy.sh/publish/#access-tokens> (ZED_NTFY_ACCESS_TOKEN) reprsents an\n# access token that could be used if a topic is read/write protected. If a\n# topic can be written to publicaly, a ZED_NTFY_ACCESS_TOKEN is not required.\n",
                    "rendered": {
                      "text": "# Send a notification via Ntfy.sh <https://ntfy.sh/>.\n# The ntfy topic (ZED_NTFY_TOPIC) identifies the topic that the notification\n# will be sent to Ntfy.sh server. The ntfy url (ZED_NTFY_URL) defines the\n# self-hosted or provided hosted ntfy service location. The ntfy access token\n# <https://docs.ntfy.sh/publish/#access-tokens> (ZED_NTFY_ACCESS_TOKEN) reprsents an\n# access token that could be used if a topic is read/write protected. If a\n# topic can be written to publicaly, a ZED_NTFY_ACCESS_TOKEN is not required.\n",
                      "markdown": "`# Send a notification via Ntfy.sh <https://ntfy.sh/>.\n# The ntfy topic (ZED_NTFY_TOPIC) identifies the topic that the notification\n# will be sent to Ntfy.sh server. The ntfy url (ZED_NTFY_URL) defines the\n# self-hosted or provided hosted ntfy service location. The ntfy access token\n# <https://docs.ntfy.sh/publish/#access-tokens> (ZED_NTFY_ACCESS_TOKEN) reprsents an\n# access token that could be used if a topic is read/write protected. If a\n# topic can be written to publicaly, a ZED_NTFY_ACCESS_TOKEN is not required.\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/etc/zfs/zed.d/zed-functions.sh"
                },
                "region": {
                  "startLine": 525,
                  "startColumn": 9,
                  "endLine": 525,
                  "endColumn": 14,
                  "snippet": {
                    "text": "        return 1\n    fi\n    msg_err=\"$(echo \"${msg_out}\" \\\n        | sed -n -e 's/.*\"errors\" *:.*\\[\\(.*\\)\\].*/\\1/p')\"\n    if [ -n \"${msg_err}\" ]; then\n        zed_log_err \"pushover \\\"${msg_err}\"\\\"\n        return 1\n",
                    "rendered": {
                      "text": "        return 1\n    fi\n    msg_err=\"$(echo \"${msg_out}\" \\\n        | sed -n -e 's/.*\"errors\" *:.*\\[\\(.*\\)\\].*/\\1/p')\"\n    if [ -n \"${msg_err}\" ]; then\n        zed_log_err \"pushover \\\"${msg_err}\"\\\"\n        return 1\n",
                      "markdown": "`        return 1\n    fi\n    msg_err=\"$(echo \"${msg_out}\" \\\n        | sed -n -e 's/.*\"errors\" *:.*\\[\\(.*\\)\\].*/\\1/p')\"\n    if [ -n \"${msg_err}\" ]; then\n        zed_log_err \"pushover \\\"${msg_err}\"\\\"\n        return 1\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/etc/zfs/zed.d/zed-functions.sh"
                },
                "region": {
                  "startLine": 512,
                  "startColumn": 7,
                  "endLine": 512,
                  "endColumn": 13,
                  "snippet": {
                    "text": "    # Send the POST request and check for errors.\n    #\n    msg_out=\"$( \\\n        curl \\\n        --form-string \"token=${ZED_PUSHOVER_TOKEN}\" \\\n        --form-string \"user=${ZED_PUSHOVER_USER}\" \\\n        --form-string \"message=${msg_body}\" \\\n",
                    "rendered": {
                      "text": "    # Send the POST request and check for errors.\n    #\n    msg_out=\"$( \\\n        curl \\\n        --form-string \"token=${ZED_PUSHOVER_TOKEN}\" \\\n        --form-string \"user=${ZED_PUSHOVER_USER}\" \\\n        --form-string \"message=${msg_body}\" \\\n",
                      "markdown": "`    # Send the POST request and check for errors.\n    #\n    msg_out=\"$( \\\n        curl \\\n        --form-string \"token=${ZED_PUSHOVER_TOKEN}\" \\\n        --form-string \"user=${ZED_PUSHOVER_USER}\" \\\n        --form-string \"message=${msg_body}\" \\\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/etc/zfs/zed.d/zed-functions.sh"
                },
                "region": {
                  "startLine": 463,
                  "startColumn": 19,
                  "endLine": 463,
                  "endColumn": 24,
                  "snippet": {
                    "text": "# Pushover server. The user token (ZED_PUSHOVER_USER) defines the user or\n# group to which the notification will be sent.\n#\n# Requires curl and sed executables to be installed in the standard PATH.\n#\n# References\n#   https://pushover.net/api\n",
                    "rendered": {
                      "text": "# Pushover server. The user token (ZED_PUSHOVER_USER) defines the user or\n# group to which the notification will be sent.\n#\n# Requires curl and sed executables to be installed in the standard PATH.\n#\n# References\n#   https://pushover.net/api\n",
                      "markdown": "`# Pushover server. The user token (ZED_PUSHOVER_USER) defines the user or\n# group to which the notification will be sent.\n#\n# Requires curl and sed executables to be installed in the standard PATH.\n#\n# References\n#   https://pushover.net/api\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/etc/zfs/zed.d/zed-functions.sh"
                },
                "region": {
                  "startLine": 463,
                  "startColumn": 10,
                  "endLine": 463,
                  "endColumn": 16,
                  "snippet": {
                    "text": "# Pushover server. The user token (ZED_PUSHOVER_USER) defines the user or\n# group to which the notification will be sent.\n#\n# Requires curl and sed executables to be installed in the standard PATH.\n#\n# References\n#   https://pushover.net/api\n",
                    "rendered": {
                      "text": "# Pushover server. The user token (ZED_PUSHOVER_USER) defines the user or\n# group to which the notification will be sent.\n#\n# Requires curl and sed executables to be installed in the standard PATH.\n#\n# References\n#   https://pushover.net/api\n",
                      "markdown": "`# Pushover server. The user token (ZED_PUSHOVER_USER) defines the user or\n# group to which the notification will be sent.\n#\n# Requires curl and sed executables to be installed in the standard PATH.\n#\n# References\n#   https://pushover.net/api\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/etc/zfs/zed.d/zed-functions.sh"
                },
                "region": {
                  "startLine": 448,
                  "startColumn": 9,
                  "endLine": 448,
                  "endColumn": 14,
                  "snippet": {
                    "text": "        return 1\n    fi\n    msg_err=\"$(echo \"${msg_out}\" \\\n        | sed -n -e 's/.*\"error\" *:.*\"message\" *: *\"\\([^\"]*\\)\".*/\\1/p')\"\n    if [ -n \"${msg_err}\" ]; then\n        zed_log_err \"slack webhook \\\"${msg_err}\"\\\"\n        return 1\n",
                    "rendered": {
                      "text": "        return 1\n    fi\n    msg_err=\"$(echo \"${msg_out}\" \\\n        | sed -n -e 's/.*\"error\" *:.*\"message\" *: *\"\\([^\"]*\\)\".*/\\1/p')\"\n    if [ -n \"${msg_err}\" ]; then\n        zed_log_err \"slack webhook \\\"${msg_err}\"\\\"\n        return 1\n",
                      "markdown": "`        return 1\n    fi\n    msg_err=\"$(echo \"${msg_out}\" \\\n        | sed -n -e 's/.*\"error\" *:.*\"message\" *: *\"\\([^\"]*\\)\".*/\\1/p')\"\n    if [ -n \"${msg_err}\" ]; then\n        zed_log_err \"slack webhook \\\"${msg_err}\"\\\"\n        return 1\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/etc/zfs/zed.d/zed-functions.sh"
                },
                "region": {
                  "startLine": 388,
                  "startColumn": 25,
                  "endLine": 388,
                  "endColumn": 30,
                  "snippet": {
                    "text": "# The Webhook URL (ZED_SLACK_WEBHOOK_URL) identifies this client to the\n# Slack channel.\n#\n# Requires awk, curl, and sed executables to be installed in the standard PATH.\n#\n# References\n#   https://api.slack.com/incoming-webhooks\n",
                    "rendered": {
                      "text": "# The Webhook URL (ZED_SLACK_WEBHOOK_URL) identifies this client to the\n# Slack channel.\n#\n# Requires awk, curl, and sed executables to be installed in the standard PATH.\n#\n# References\n#   https://api.slack.com/incoming-webhooks\n",
                      "markdown": "`# The Webhook URL (ZED_SLACK_WEBHOOK_URL) identifies this client to the\n# Slack channel.\n#\n# Requires awk, curl, and sed executables to be installed in the standard PATH.\n#\n# References\n#   https://api.slack.com/incoming-webhooks\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/etc/zfs/zed.d/zed-functions.sh"
                },
                "region": {
                  "startLine": 373,
                  "startColumn": 9,
                  "endLine": 373,
                  "endColumn": 14,
                  "snippet": {
                    "text": "        return 1\n    fi\n    msg_err=\"$(echo \"${msg_out}\" \\\n        | sed -n -e 's/.*\"error\" *:.*\"message\" *: *\"\\([^\"]*\\)\".*/\\1/p')\"\n    if [ -n \"${msg_err}\" ]; then\n        zed_log_err \"pushbullet \\\"${msg_err}\"\\\"\n        return 1\n",
                    "rendered": {
                      "text": "        return 1\n    fi\n    msg_err=\"$(echo \"${msg_out}\" \\\n        | sed -n -e 's/.*\"error\" *:.*\"message\" *: *\"\\([^\"]*\\)\".*/\\1/p')\"\n    if [ -n \"${msg_err}\" ]; then\n        zed_log_err \"pushbullet \\\"${msg_err}\"\\\"\n        return 1\n",
                      "markdown": "`        return 1\n    fi\n    msg_err=\"$(echo \"${msg_out}\" \\\n        | sed -n -e 's/.*\"error\" *:.*\"message\" *: *\"\\([^\"]*\\)\".*/\\1/p')\"\n    if [ -n \"${msg_err}\" ]; then\n        zed_log_err \"pushbullet \\\"${msg_err}\"\\\"\n        return 1\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/etc/zfs/zed.d/zed-functions.sh"
                },
                "region": {
                  "startLine": 305,
                  "startColumn": 25,
                  "endLine": 305,
                  "endColumn": 30,
                  "snippet": {
                    "text": "# not defined, push notifications will instead be sent to all devices\n# associated with the account specified by the access token.\n#\n# Requires awk, curl, and sed executables to be installed in the standard PATH.\n#\n# References\n#   https://docs.pushbullet.com/\n",
                    "rendered": {
                      "text": "# not defined, push notifications will instead be sent to all devices\n# associated with the account specified by the access token.\n#\n# Requires awk, curl, and sed executables to be installed in the standard PATH.\n#\n# References\n#   https://docs.pushbullet.com/\n",
                      "markdown": "`# not defined, push notifications will instead be sent to all devices\n# associated with the account specified by the access token.\n#\n# Requires awk, curl, and sed executables to be installed in the standard PATH.\n#\n# References\n#   https://docs.pushbullet.com/\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/etc/zfs/zed.d/zed-functions.sh"
                },
                "region": {
                  "startLine": 284,
                  "startColumn": 7,
                  "endLine": 284,
                  "endColumn": 12,
                  "snippet": {
                    "text": "            printf \"Subject: %s\\n\" \"${subject}\"\n        fi\n        # output message\n        cat \"${pathname}\"\n    } |\n    eval ${ZED_EMAIL_PROG} ${ZED_EMAIL_OPTS_PARSED} >/dev/null 2>&1\n    rv=$?\n",
                    "rendered": {
                      "text": "            printf \"Subject: %s\\n\" \"${subject}\"\n        fi\n        # output message\n        cat \"${pathname}\"\n    } |\n    eval ${ZED_EMAIL_PROG} ${ZED_EMAIL_OPTS_PARSED} >/dev/null 2>&1\n    rv=$?\n",
                      "markdown": "`            printf \"Subject: %s\\n\" \"${subject}\"\n        fi\n        # output message\n        cat \"${pathname}\"\n    } |\n    eval ${ZED_EMAIL_PROG} ${ZED_EMAIL_OPTS_PARSED} >/dev/null 2>&1\n    rv=$?\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/etc/zfs/zed.d/zed-functions.sh"
                },
                "region": {
                  "startLine": 272,
                  "startColumn": 9,
                  "endLine": 272,
                  "endColumn": 14,
                  "snippet": {
                    "text": "\n    # construct cmdline options\n    ZED_EMAIL_OPTS_PARSED=\"$(echo \"${ZED_EMAIL_OPTS}\" \\\n        | sed   -e \"s/@ADDRESS@/${ZED_EMAIL_ADDR}/g\" \\\n                -e \"s/@SUBJECT@/${subject}/g\")\"\n\n    # pipe message to email prog\n",
                    "rendered": {
                      "text": "\n    # construct cmdline options\n    ZED_EMAIL_OPTS_PARSED=\"$(echo \"${ZED_EMAIL_OPTS}\" \\\n        | sed   -e \"s/@ADDRESS@/${ZED_EMAIL_ADDR}/g\" \\\n                -e \"s/@SUBJECT@/${subject}/g\")\"\n\n    # pipe message to email prog\n",
                      "markdown": "`\n    # construct cmdline options\n    ZED_EMAIL_OPTS_PARSED=\"$(echo \"${ZED_EMAIL_OPTS}\" \\\n        | sed   -e \"s/@ADDRESS@/${ZED_EMAIL_ADDR}/g\" \\\n                -e \"s/@SUBJECT@/${subject}/g\")\"\n\n    # pipe message to email prog\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/etc/zfs/zed.d/zed-functions.sh"
                },
                "region": {
                  "startLine": 226,
                  "startColumn": 29,
                  "endLine": 226,
                  "endColumn": 35,
                  "snippet": {
                    "text": "# ZED_EMAIL_PROG to be defined with the pathname of an executable capable of\n# reading a message body from stdin.\n#\n# Command-line options to the mail executable can be specified in\n# ZED_EMAIL_OPTS.  This undergoes the following keyword substitutions:\n# - @ADDRESS@ is replaced with the space-delimited recipient email address(es)\n# - @SUBJECT@ is replaced with the notification subject\n",
                    "rendered": {
                      "text": "# ZED_EMAIL_PROG to be defined with the pathname of an executable capable of\n# reading a message body from stdin.\n#\n# Command-line options to the mail executable can be specified in\n# ZED_EMAIL_OPTS.  This undergoes the following keyword substitutions:\n# - @ADDRESS@ is replaced with the space-delimited recipient email address(es)\n# - @SUBJECT@ is replaced with the notification subject\n",
                      "markdown": "`# ZED_EMAIL_PROG to be defined with the pathname of an executable capable of\n# reading a message body from stdin.\n#\n# Command-line options to the mail executable can be specified in\n# ZED_EMAIL_OPTS.  This undergoes the following keyword substitutions:\n# - @ADDRESS@ is replaced with the space-delimited recipient email address(es)\n# - @SUBJECT@ is replaced with the notification subject\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/etc/zfs/zed.d/zed-functions.sh"
                },
                "region": {
                  "startLine": 222,
                  "startColumn": 14,
                  "endLine": 222,
                  "endColumn": 20,
                  "snippet": {
                    "text": "#\n# Send a notification via email to the address specified by ZED_EMAIL_ADDR.\n#\n# Requires the mail executable to be installed in the standard PATH, or\n# ZED_EMAIL_PROG to be defined with the pathname of an executable capable of\n# reading a message body from stdin.\n#\n",
                    "rendered": {
                      "text": "#\n# Send a notification via email to the address specified by ZED_EMAIL_ADDR.\n#\n# Requires the mail executable to be installed in the standard PATH, or\n# ZED_EMAIL_PROG to be defined with the pathname of an executable capable of\n# reading a message body from stdin.\n#\n",
                      "markdown": "`#\n# Send a notification via email to the address specified by ZED_EMAIL_ADDR.\n#\n# Requires the mail executable to be installed in the standard PATH, or\n# ZED_EMAIL_PROG to be defined with the pathname of an executable capable of\n# reading a message body from stdin.\n#\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/etc/zfs/zed.d/zed-functions.sh"
                },
                "region": {
                  "startLine": 143,
                  "startColumn": 47,
                  "endLine": 143,
                  "endColumn": 54,
                  "snippet": {
                    "text": "#\n# Arguments\n#   lockfile: pathname of the lock file\n#   fd: integer for the file descriptor used by flock (must match the file\n#     descriptor passed to the zed_lock function call)\n#\n# Globals\n",
                    "rendered": {
                      "text": "#\n# Arguments\n#   lockfile: pathname of the lock file\n#   fd: integer for the file descriptor used by flock (must match the file\n#     descriptor passed to the zed_lock function call)\n#\n# Globals\n",
                      "markdown": "`#\n# Arguments\n#   lockfile: pathname of the lock file\n#   fd: integer for the file descriptor used by flock (must match the file\n#     descriptor passed to the zed_lock function call)\n#\n# Globals\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/etc/zfs/zed.d/zed-functions.sh"
                },
                "region": {
                  "startLine": 101,
                  "startColumn": 47,
                  "endLine": 101,
                  "endColumn": 54,
                  "snippet": {
                    "text": "# Arguments\n#   lockfile: pathname of the lock file; the lock will be stored in\n#     ZED_LOCKDIR unless the pathname contains a \"/\".\n#   fd: integer for the file descriptor used by flock (OPTIONAL unless holding\n#     concurrent locks)\n#\n# Globals\n",
                    "rendered": {
                      "text": "# Arguments\n#   lockfile: pathname of the lock file; the lock will be stored in\n#     ZED_LOCKDIR unless the pathname contains a \"/\".\n#   fd: integer for the file descriptor used by flock (OPTIONAL unless holding\n#     concurrent locks)\n#\n# Globals\n",
                      "markdown": "`# Arguments\n#   lockfile: pathname of the lock file; the lock will be stored in\n#     ZED_LOCKDIR unless the pathname contains a \"/\".\n#   fd: integer for the file descriptor used by flock (OPTIONAL unless holding\n#     concurrent locks)\n#\n# Globals\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/etc/zfs/zed.d/zed-functions.sh"
                },
                "region": {
                  "startLine": 91,
                  "startColumn": 5,
                  "endLine": 91,
                  "endColumn": 11,
                  "snippet": {
                    "text": "# Every zed_lock() must be paired with a corresponding zed_unlock().\n#\n# By default, flock-style locks associate the lockfile with file descriptor 8.\n# The bash manpage warns that file descriptors >9 should be used with care as\n# they may conflict with file descriptors used internally by the shell.  File\n# descriptor 9 is reserved for zed_rate_limit().  If concurrent locks are held\n# within the same process, they must use different file descriptors (preferably\n",
                    "rendered": {
                      "text": "# Every zed_lock() must be paired with a corresponding zed_unlock().\n#\n# By default, flock-style locks associate the lockfile with file descriptor 8.\n# The bash manpage warns that file descriptors >9 should be used with care as\n# they may conflict with file descriptors used internally by the shell.  File\n# descriptor 9 is reserved for zed_rate_limit().  If concurrent locks are held\n# within the same process, they must use different file descriptors (preferably\n",
                      "markdown": "`# Every zed_lock() must be paired with a corresponding zed_unlock().\n#\n# By default, flock-style locks associate the lockfile with file descriptor 8.\n# The bash manpage warns that file descriptors >9 should be used with care as\n# they may conflict with file descriptors used internally by the shell.  File\n# descriptor 9 is reserved for zed_rate_limit().  If concurrent locks are held\n# within the same process, they must use different file descriptors (preferably\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/etc/zfs/zed.d/zed-functions.sh"
                },
                "region": {
                  "startLine": 67,
                  "startColumn": 1,
                  "endLine": 67,
                  "endColumn": 9,
                  "snippet": {
                    "text": "# zed_log_err (msg, ...)\n#\n# Write an error message to the system log.  This message will contain the\n# script name, EID, and all argument strings.\n#\n# Globals\n#   ZED_SYSLOG_PRIORITY\n",
                    "rendered": {
                      "text": "# zed_log_err (msg, ...)\n#\n# Write an error message to the system log.  This message will contain the\n# script name, EID, and all argument strings.\n#\n# Globals\n#   ZED_SYSLOG_PRIORITY\n",
                      "markdown": "`# zed_log_err (msg, ...)\n#\n# Write an error message to the system log.  This message will contain the\n# script name, EID, and all argument strings.\n#\n# Globals\n#   ZED_SYSLOG_PRIORITY\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/iostat"
                },
                "region": {
                  "startLine": 84,
                  "startColumn": 21,
                  "endLine": 84,
                  "endColumn": 26,
                  "snippet": {
                    "text": "\tfi\n\n\t# Get i'th value\n\tval=$(echo \"$vals\" | cut -f \"$i\")\n\techo \"$col=$val\"\ndone\n",
                    "rendered": {
                      "text": "\tfi\n\n\t# Get i'th value\n\tval=$(echo \"$vals\" | cut -f \"$i\")\n\techo \"$col=$val\"\ndone\n",
                      "markdown": "`\tfi\n\n\t# Get i'th value\n\tval=$(echo \"$vals\" | cut -f \"$i\")\n\techo \"$col=$val\"\ndone\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/iostat"
                },
                "region": {
                  "startLine": 73,
                  "startColumn": 20,
                  "endLine": 73,
                  "endColumn": 26,
                  "snippet": {
                    "text": "cols=$(echo \"$out\" | head -n 1)\n\n# Get the values and tab separate them to make them cut-able.\nvals=$(echo \"$out\" | tail -n 1 | tr -s '[:space:]' '\\t')\n\ni=0\nfor col in $cols ; do\n",
                    "rendered": {
                      "text": "cols=$(echo \"$out\" | head -n 1)\n\n# Get the values and tab separate them to make them cut-able.\nvals=$(echo \"$out\" | tail -n 1 | tr -s '[:space:]' '\\t')\n\ni=0\nfor col in $cols ; do\n",
                      "markdown": "`cols=$(echo \"$out\" | head -n 1)\n\n# Get the values and tab separate them to make them cut-able.\nvals=$(echo \"$out\" | tail -n 1 | tr -s '[:space:]' '\\t')\n\ni=0\nfor col in $cols ; do\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/iostat"
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 20,
                  "endLine": 70,
                  "endColumn": 26,
                  "snippet": {
                    "text": "#\n\n# Get the column names\ncols=$(echo \"$out\" | head -n 1)\n\n# Get the values and tab separate them to make them cut-able.\nvals=$(echo \"$out\" | tail -n 1 | tr -s '[:space:]' '\\t')\n",
                    "rendered": {
                      "text": "#\n\n# Get the column names\ncols=$(echo \"$out\" | head -n 1)\n\n# Get the values and tab separate them to make them cut-able.\nvals=$(echo \"$out\" | tail -n 1 | tr -s '[:space:]' '\\t')\n",
                      "markdown": "`#\n\n# Get the column names\ncols=$(echo \"$out\" | head -n 1)\n\n# Get the values and tab separate them to make them cut-able.\nvals=$(echo \"$out\" | tail -n 1 | tr -s '[:space:]' '\\t')\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/iostat"
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 30,
                  "endLine": 54,
                  "endColumn": 36,
                  "snippet": {
                    "text": "\t\t${brief:+\"-y\"} \\\n\t\t${interval:+\"$interval\"} \\\n\t\t${interval:+\"1\"} \\\n\t\t\"$somepath\" | grep -v '^$' | tail -n 2)\nfi\n\n\n",
                    "rendered": {
                      "text": "\t\t${brief:+\"-y\"} \\\n\t\t${interval:+\"$interval\"} \\\n\t\t${interval:+\"1\"} \\\n\t\t\"$somepath\" | grep -v '^$' | tail -n 2)\nfi\n\n\n",
                      "markdown": "`\t\t${brief:+\"-y\"} \\\n\t\t${interval:+\"$interval\"} \\\n\t\t${interval:+\"1\"} \\\n\t\t\"$somepath\" | grep -v '^$' | tail -n 2)\nfi\n\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/iostat"
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 15,
                  "endLine": 54,
                  "endColumn": 21,
                  "snippet": {
                    "text": "\t\t${brief:+\"-y\"} \\\n\t\t${interval:+\"$interval\"} \\\n\t\t${interval:+\"1\"} \\\n\t\t\"$somepath\" | grep -v '^$' | tail -n 2)\nfi\n\n\n",
                    "rendered": {
                      "text": "\t\t${brief:+\"-y\"} \\\n\t\t${interval:+\"$interval\"} \\\n\t\t${interval:+\"1\"} \\\n\t\t\"$somepath\" | grep -v '^$' | tail -n 2)\nfi\n\n\n",
                      "markdown": "`\t\t${brief:+\"-y\"} \\\n\t\t${interval:+\"$interval\"} \\\n\t\t${interval:+\"1\"} \\\n\t\t\"$somepath\" | grep -v '^$' | tail -n 2)\nfi\n\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/iostat"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 15,
                  "endLine": 48,
                  "endColumn": 21,
                  "snippet": {
                    "text": "\tout=$(iostat -dKx \\\n\t\t${interval:+\"-w $interval\"} \\\n\t\t${interval:+\"-c 1\"} \\\n\t\t\"$somepath\" | tail -n 2)\nelse\n\tout=$(iostat -kx \\\n\t\t${brief:+\"-y\"} \\\n",
                    "rendered": {
                      "text": "\tout=$(iostat -dKx \\\n\t\t${interval:+\"-w $interval\"} \\\n\t\t${interval:+\"-c 1\"} \\\n\t\t\"$somepath\" | tail -n 2)\nelse\n\tout=$(iostat -kx \\\n\t\t${brief:+\"-y\"} \\\n",
                      "markdown": "`\tout=$(iostat -dKx \\\n\t\t${interval:+\"-w $interval\"} \\\n\t\t${interval:+\"-c 1\"} \\\n\t\t\"$somepath\" | tail -n 2)\nelse\n\tout=$(iostat -kx \\\n\t\t${brief:+\"-y\"} \\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/iostat"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 49,
                  "endLine": 14,
                  "endColumn": 54,
                  "snippet": {
                    "text": "\nscript=\"${0##*/}\"\nif [ \"$1\" = \"-h\" ] ; then\n\techo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n\texit\nfi\n\n",
                    "rendered": {
                      "text": "\nscript=\"${0##*/}\"\nif [ \"$1\" = \"-h\" ] ; then\n\techo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n\texit\nfi\n\n",
                      "markdown": "`\nscript=\"${0##*/}\"\nif [ \"$1\" = \"-h\" ] ; then\n\techo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n\texit\nfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/iostat"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 18,
                  "endLine": 14,
                  "endColumn": 24,
                  "snippet": {
                    "text": "\nscript=\"${0##*/}\"\nif [ \"$1\" = \"-h\" ] ; then\n\techo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n\texit\nfi\n\n",
                    "rendered": {
                      "text": "\nscript=\"${0##*/}\"\nif [ \"$1\" = \"-h\" ] ; then\n\techo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n\texit\nfi\n\n",
                      "markdown": "`\nscript=\"${0##*/}\"\nif [ \"$1\" = \"-h\" ] ; then\n\techo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n\texit\nfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/hours_on"
                },
                "region": {
                  "startLine": 244,
                  "startColumn": 47,
                  "endLine": 244,
                  "endColumn": 52,
                  "snippet": {
                    "text": "\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n\nif [ -n \"$without_vals\" ]; then\n",
                    "rendered": {
                      "text": "\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n\nif [ -n \"$without_vals\" ]; then\n",
                      "markdown": "`\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n\nif [ -n \"$without_vals\" ]; then\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/hours_on"
                },
                "region": {
                  "startLine": 242,
                  "startColumn": 29,
                  "endLine": 242,
                  "endColumn": 34,
                  "snippet": {
                    "text": "\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n",
                    "rendered": {
                      "text": "\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n",
                      "markdown": "`\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/hours_on"
                },
                "region": {
                  "startLine": 242,
                  "startColumn": 1,
                  "endLine": 242,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n",
                    "rendered": {
                      "text": "\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n",
                      "markdown": "`\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/hours_on"
                },
                "region": {
                  "startLine": 241,
                  "startColumn": 1,
                  "endLine": 241,
                  "endColumn": 7,
                  "snippet": {
                    "text": "if [ -n \"$with_vals\" ]; then\n\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\n",
                    "rendered": {
                      "text": "if [ -n \"$with_vals\" ]; then\n\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\n",
                      "markdown": "`if [ -n \"$with_vals\" ]; then\n\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/hours_on"
                },
                "region": {
                  "startLine": 237,
                  "startColumn": 25,
                  "endLine": 237,
                  "endColumn": 31,
                  "snippet": {
                    "text": "\tscripts=\"$script\"\nesac\n\nwith_vals=$(echo \"$out\" | grep -E \"$scripts\")\nif [ -n \"$with_vals\" ]; then\n\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n",
                    "rendered": {
                      "text": "\tscripts=\"$script\"\nesac\n\nwith_vals=$(echo \"$out\" | grep -E \"$scripts\")\nif [ -n \"$with_vals\" ]; then\n\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n",
                      "markdown": "`\tscripts=\"$script\"\nesac\n\nwith_vals=$(echo \"$out\" | grep -E \"$scripts\")\nif [ -n \"$with_vals\" ]; then\n\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/hours_on"
                },
                "region": {
                  "startLine": 199,
                  "startColumn": 36,
                  "endLine": 199,
                  "endColumn": 41,
                  "snippet": {
                    "text": "END {print \"type=\"type; ORS=\"\\n\"; print \"\"}\n');\nfi\ntype=$(echo \"$out\" | grep '^type=' | cut -d '=' -f 2)\n\n# If type is not set by now, either we don't have a block device\n# or smartctl failed. Either way, default to ATA and set $out to\n",
                    "rendered": {
                      "text": "END {print \"type=\"type; ORS=\"\\n\"; print \"\"}\n');\nfi\ntype=$(echo \"$out\" | grep '^type=' | cut -d '=' -f 2)\n\n# If type is not set by now, either we don't have a block device\n# or smartctl failed. Either way, default to ATA and set $out to\n",
                      "markdown": "`END {print \"type=\"type; ORS=\"\\n\"; print \"\"}\n');\nfi\ntype=$(echo \"$out\" | grep '^type=' | cut -d '=' -f 2)\n\n# If type is not set by now, either we don't have a block device\n# or smartctl failed. Either way, default to ATA and set $out to\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/hours_on"
                },
                "region": {
                  "startLine": 199,
                  "startColumn": 20,
                  "endLine": 199,
                  "endColumn": 26,
                  "snippet": {
                    "text": "END {print \"type=\"type; ORS=\"\\n\"; print \"\"}\n');\nfi\ntype=$(echo \"$out\" | grep '^type=' | cut -d '=' -f 2)\n\n# If type is not set by now, either we don't have a block device\n# or smartctl failed. Either way, default to ATA and set $out to\n",
                    "rendered": {
                      "text": "END {print \"type=\"type; ORS=\"\\n\"; print \"\"}\n');\nfi\ntype=$(echo \"$out\" | grep '^type=' | cut -d '=' -f 2)\n\n# If type is not set by now, either we don't have a block device\n# or smartctl failed. Either way, default to ATA and set $out to\n",
                      "markdown": "`END {print \"type=\"type; ORS=\"\\n\"; print \"\"}\n');\nfi\ntype=$(echo \"$out\" | grep '^type=' | cut -d '=' -f 2)\n\n# If type is not set by now, either we don't have a block device\n# or smartctl failed. Either way, default to ATA and set $out to\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/hours_on"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 24,
                  "endLine": 103,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\t# NVMe:\n\t#       SMART/Health Information (NVMe Log 0xnn, NSID 0xnn)\n\t#\n\tout=$(echo \"$raw_out\" | awk '\n# SAS specific\n/read:/{print \"rrd=\"$4\"\\nr_cor=\"$5\"\\nr_proc=\"$7\"\\nr_ucor=\"$8}\n/write:/{print \"rwr=\"$4\"\\nw_cor=\"$5\"\\nw_proc=\"$7\"\\nw_ucor=\"$8}\n",
                    "rendered": {
                      "text": "\t# NVMe:\n\t#       SMART/Health Information (NVMe Log 0xnn, NSID 0xnn)\n\t#\n\tout=$(echo \"$raw_out\" | awk '\n# SAS specific\n/read:/{print \"rrd=\"$4\"\\nr_cor=\"$5\"\\nr_proc=\"$7\"\\nr_ucor=\"$8}\n/write:/{print \"rwr=\"$4\"\\nw_cor=\"$5\"\\nw_proc=\"$7\"\\nw_ucor=\"$8}\n",
                      "markdown": "`\t# NVMe:\n\t#       SMART/Health Information (NVMe Log 0xnn, NSID 0xnn)\n\t#\n\tout=$(echo \"$raw_out\" | awk '\n# SAS specific\n/read:/{print \"rrd=\"$4\"\\nr_cor=\"$5\"\\nr_proc=\"$7\"\\nr_ucor=\"$8}\n/write:/{print \"rwr=\"$4\"\\nw_cor=\"$5\"\\nw_proc=\"$7\"\\nw_ucor=\"$8}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/hours_on"
                },
                "region": {
                  "startLine": 83,
                  "startColumn": 3,
                  "endLine": 83,
                  "endColumn": 8,
                  "snippet": {
                    "text": "\nif [ -b \"$somepath\" ] && PATH=\"/usr/sbin:$PATH\" command -v smartctl > /dev/null || [ -n \"$samples\" ] ; then\n\tif [ -n \"$samples\" ] ; then\n\t\t# cat a smartctl output text file instead of running smartctl\n\t\t# on a vdev (only used for developer testing).\n\t\tfile=$(get_filename_from_dir \"$samples\")\n\t\techo \"file=$file\"\n",
                    "rendered": {
                      "text": "\nif [ -b \"$somepath\" ] && PATH=\"/usr/sbin:$PATH\" command -v smartctl > /dev/null || [ -n \"$samples\" ] ; then\n\tif [ -n \"$samples\" ] ; then\n\t\t# cat a smartctl output text file instead of running smartctl\n\t\t# on a vdev (only used for developer testing).\n\t\tfile=$(get_filename_from_dir \"$samples\")\n\t\techo \"file=$file\"\n",
                      "markdown": "`\nif [ -b \"$somepath\" ] && PATH=\"/usr/sbin:$PATH\" command -v smartctl > /dev/null || [ -n \"$samples\" ] ; then\n\tif [ -n \"$samples\" ] ; then\n\t\t# cat a smartctl output text file instead of running smartctl\n\t\t# on a vdev (only used for developer testing).\n\t\tfile=$(get_filename_from_dir \"$samples\")\n\t\techo \"file=$file\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/hours_on"
                },
                "region": {
                  "startLine": 68,
                  "startColumn": 56,
                  "endLine": 68,
                  "endColumn": 61,
                  "snippet": {
                    "text": "script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n",
                    "rendered": {
                      "text": "script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n",
                      "markdown": "`script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/hours_on"
                },
                "region": {
                  "startLine": 68,
                  "startColumn": 25,
                  "endLine": 68,
                  "endColumn": 31,
                  "snippet": {
                    "text": "script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n",
                    "rendered": {
                      "text": "script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n",
                      "markdown": "`script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/hours_on"
                },
                "region": {
                  "startLine": 56,
                  "endLine": 56,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\tnum_files=$(find \"$dir\" -maxdepth 1 -type f | wc -l)\n\tmod=$((pid % num_files))\n\ti=0\n\tfind \"$dir\" -type f -printf '%f\\n' | while read -r file ; do\n\t\tif [ \"$mod\" = \"$i\" ] ; then\n\t\t\techo \"$file\"\n\t\t\tbreak\n",
                    "rendered": {
                      "text": "\tnum_files=$(find \"$dir\" -maxdepth 1 -type f | wc -l)\n\tmod=$((pid % num_files))\n\ti=0\n\tfind \"$dir\" -type f -printf '%f\\n' | while read -r file ; do\n\t\tif [ \"$mod\" = \"$i\" ] ; then\n\t\t\techo \"$file\"\n\t\t\tbreak\n",
                      "markdown": "`\tnum_files=$(find \"$dir\" -maxdepth 1 -type f | wc -l)\n\tmod=$((pid % num_files))\n\ti=0\n\tfind \"$dir\" -type f -printf '%f\\n' | while read -r file ; do\n\t\tif [ \"$mod\" = \"$i\" ] ; then\n\t\t\techo \"$file\"\n\t\t\tbreak\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/hours_on"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 38,
                  "endLine": 47,
                  "endColumn": 46,
                  "snippet": {
                    "text": "#\n# Look in directory DIR and return a filename from it.  The filename returned\n# is chosen quasi-sequentially (based off our PID).  This allows us to return\n# a different filename every time this script is invoked (which we do for each\n# vdev), without having to maintain state.\nget_filename_from_dir()\n{\n",
                    "rendered": {
                      "text": "#\n# Look in directory DIR and return a filename from it.  The filename returned\n# is chosen quasi-sequentially (based off our PID).  This allows us to return\n# a different filename every time this script is invoked (which we do for each\n# vdev), without having to maintain state.\nget_filename_from_dir()\n{\n",
                      "markdown": "`#\n# Look in directory DIR and return a filename from it.  The filename returned\n# is chosen quasi-sequentially (based off our PID).  This allows us to return\n# a different filename every time this script is invoked (which we do for each\n# vdev), without having to maintain state.\nget_filename_from_dir()\n{\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/hours_on"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 28,
                  "endLine": 47,
                  "endColumn": 34,
                  "snippet": {
                    "text": "#\n# Look in directory DIR and return a filename from it.  The filename returned\n# is chosen quasi-sequentially (based off our PID).  This allows us to return\n# a different filename every time this script is invoked (which we do for each\n# vdev), without having to maintain state.\nget_filename_from_dir()\n{\n",
                    "rendered": {
                      "text": "#\n# Look in directory DIR and return a filename from it.  The filename returned\n# is chosen quasi-sequentially (based off our PID).  This allows us to return\n# a different filename every time this script is invoked (which we do for each\n# vdev), without having to maintain state.\nget_filename_from_dir()\n{\n",
                      "markdown": "`#\n# Look in directory DIR and return a filename from it.  The filename returned\n# is chosen quasi-sequentially (based off our PID).  This allows us to return\n# a different filename every time this script is invoked (which we do for each\n# vdev), without having to maintain state.\nget_filename_from_dir()\n{\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/hours_on"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 27,
                  "endLine": 20,
                  "endColumn": 36,
                  "snippet": {
                    "text": "hours_on:\tShow number of hours drive powered on (all drives).\nrealloc:\tShow SMART reallocated sectors count (ATA).\nrep_ucor:\tShow SMART reported uncorrectable count (ATA).\ncmd_to:\t\tShow SMART command timeout count (ATA).\npend_sec:\tShow SMART current pending sector count (ATA).\noff_ucor:\tShow SMART offline uncorrectable errors (ATA).\nata_err:\tShow SMART ATA errors (ATA).\n",
                    "rendered": {
                      "text": "hours_on:\tShow number of hours drive powered on (all drives).\nrealloc:\tShow SMART reallocated sectors count (ATA).\nrep_ucor:\tShow SMART reported uncorrectable count (ATA).\ncmd_to:\t\tShow SMART command timeout count (ATA).\npend_sec:\tShow SMART current pending sector count (ATA).\noff_ucor:\tShow SMART offline uncorrectable errors (ATA).\nata_err:\tShow SMART ATA errors (ATA).\n",
                      "markdown": "`hours_on:\tShow number of hours drive powered on (all drives).\nrealloc:\tShow SMART reallocated sectors count (ATA).\nrep_ucor:\tShow SMART reported uncorrectable count (ATA).\ncmd_to:\t\tShow SMART command timeout count (ATA).\npend_sec:\tShow SMART current pending sector count (ATA).\noff_ucor:\tShow SMART offline uncorrectable errors (ATA).\nata_err:\tShow SMART ATA errors (ATA).\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/health"
                },
                "region": {
                  "startLine": 244,
                  "startColumn": 47,
                  "endLine": 244,
                  "endColumn": 52,
                  "snippet": {
                    "text": "\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n\nif [ -n \"$without_vals\" ]; then\n",
                    "rendered": {
                      "text": "\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n\nif [ -n \"$without_vals\" ]; then\n",
                      "markdown": "`\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n\nif [ -n \"$without_vals\" ]; then\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/health"
                },
                "region": {
                  "startLine": 242,
                  "startColumn": 29,
                  "endLine": 242,
                  "endColumn": 34,
                  "snippet": {
                    "text": "\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n",
                    "rendered": {
                      "text": "\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n",
                      "markdown": "`\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/health"
                },
                "region": {
                  "startLine": 242,
                  "startColumn": 1,
                  "endLine": 242,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n",
                    "rendered": {
                      "text": "\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n",
                      "markdown": "`\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/health"
                },
                "region": {
                  "startLine": 241,
                  "startColumn": 1,
                  "endLine": 241,
                  "endColumn": 7,
                  "snippet": {
                    "text": "if [ -n \"$with_vals\" ]; then\n\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\n",
                    "rendered": {
                      "text": "if [ -n \"$with_vals\" ]; then\n\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\n",
                      "markdown": "`if [ -n \"$with_vals\" ]; then\n\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/health"
                },
                "region": {
                  "startLine": 237,
                  "startColumn": 25,
                  "endLine": 237,
                  "endColumn": 31,
                  "snippet": {
                    "text": "\tscripts=\"$script\"\nesac\n\nwith_vals=$(echo \"$out\" | grep -E \"$scripts\")\nif [ -n \"$with_vals\" ]; then\n\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n",
                    "rendered": {
                      "text": "\tscripts=\"$script\"\nesac\n\nwith_vals=$(echo \"$out\" | grep -E \"$scripts\")\nif [ -n \"$with_vals\" ]; then\n\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n",
                      "markdown": "`\tscripts=\"$script\"\nesac\n\nwith_vals=$(echo \"$out\" | grep -E \"$scripts\")\nif [ -n \"$with_vals\" ]; then\n\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/health"
                },
                "region": {
                  "startLine": 199,
                  "startColumn": 36,
                  "endLine": 199,
                  "endColumn": 41,
                  "snippet": {
                    "text": "END {print \"type=\"type; ORS=\"\\n\"; print \"\"}\n');\nfi\ntype=$(echo \"$out\" | grep '^type=' | cut -d '=' -f 2)\n\n# If type is not set by now, either we don't have a block device\n# or smartctl failed. Either way, default to ATA and set $out to\n",
                    "rendered": {
                      "text": "END {print \"type=\"type; ORS=\"\\n\"; print \"\"}\n');\nfi\ntype=$(echo \"$out\" | grep '^type=' | cut -d '=' -f 2)\n\n# If type is not set by now, either we don't have a block device\n# or smartctl failed. Either way, default to ATA and set $out to\n",
                      "markdown": "`END {print \"type=\"type; ORS=\"\\n\"; print \"\"}\n');\nfi\ntype=$(echo \"$out\" | grep '^type=' | cut -d '=' -f 2)\n\n# If type is not set by now, either we don't have a block device\n# or smartctl failed. Either way, default to ATA and set $out to\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/health"
                },
                "region": {
                  "startLine": 199,
                  "startColumn": 20,
                  "endLine": 199,
                  "endColumn": 26,
                  "snippet": {
                    "text": "END {print \"type=\"type; ORS=\"\\n\"; print \"\"}\n');\nfi\ntype=$(echo \"$out\" | grep '^type=' | cut -d '=' -f 2)\n\n# If type is not set by now, either we don't have a block device\n# or smartctl failed. Either way, default to ATA and set $out to\n",
                    "rendered": {
                      "text": "END {print \"type=\"type; ORS=\"\\n\"; print \"\"}\n');\nfi\ntype=$(echo \"$out\" | grep '^type=' | cut -d '=' -f 2)\n\n# If type is not set by now, either we don't have a block device\n# or smartctl failed. Either way, default to ATA and set $out to\n",
                      "markdown": "`END {print \"type=\"type; ORS=\"\\n\"; print \"\"}\n');\nfi\ntype=$(echo \"$out\" | grep '^type=' | cut -d '=' -f 2)\n\n# If type is not set by now, either we don't have a block device\n# or smartctl failed. Either way, default to ATA and set $out to\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/health"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 24,
                  "endLine": 103,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\t# NVMe:\n\t#       SMART/Health Information (NVMe Log 0xnn, NSID 0xnn)\n\t#\n\tout=$(echo \"$raw_out\" | awk '\n# SAS specific\n/read:/{print \"rrd=\"$4\"\\nr_cor=\"$5\"\\nr_proc=\"$7\"\\nr_ucor=\"$8}\n/write:/{print \"rwr=\"$4\"\\nw_cor=\"$5\"\\nw_proc=\"$7\"\\nw_ucor=\"$8}\n",
                    "rendered": {
                      "text": "\t# NVMe:\n\t#       SMART/Health Information (NVMe Log 0xnn, NSID 0xnn)\n\t#\n\tout=$(echo \"$raw_out\" | awk '\n# SAS specific\n/read:/{print \"rrd=\"$4\"\\nr_cor=\"$5\"\\nr_proc=\"$7\"\\nr_ucor=\"$8}\n/write:/{print \"rwr=\"$4\"\\nw_cor=\"$5\"\\nw_proc=\"$7\"\\nw_ucor=\"$8}\n",
                      "markdown": "`\t# NVMe:\n\t#       SMART/Health Information (NVMe Log 0xnn, NSID 0xnn)\n\t#\n\tout=$(echo \"$raw_out\" | awk '\n# SAS specific\n/read:/{print \"rrd=\"$4\"\\nr_cor=\"$5\"\\nr_proc=\"$7\"\\nr_ucor=\"$8}\n/write:/{print \"rwr=\"$4\"\\nw_cor=\"$5\"\\nw_proc=\"$7\"\\nw_ucor=\"$8}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/health"
                },
                "region": {
                  "startLine": 83,
                  "startColumn": 3,
                  "endLine": 83,
                  "endColumn": 8,
                  "snippet": {
                    "text": "\nif [ -b \"$somepath\" ] && PATH=\"/usr/sbin:$PATH\" command -v smartctl > /dev/null || [ -n \"$samples\" ] ; then\n\tif [ -n \"$samples\" ] ; then\n\t\t# cat a smartctl output text file instead of running smartctl\n\t\t# on a vdev (only used for developer testing).\n\t\tfile=$(get_filename_from_dir \"$samples\")\n\t\techo \"file=$file\"\n",
                    "rendered": {
                      "text": "\nif [ -b \"$somepath\" ] && PATH=\"/usr/sbin:$PATH\" command -v smartctl > /dev/null || [ -n \"$samples\" ] ; then\n\tif [ -n \"$samples\" ] ; then\n\t\t# cat a smartctl output text file instead of running smartctl\n\t\t# on a vdev (only used for developer testing).\n\t\tfile=$(get_filename_from_dir \"$samples\")\n\t\techo \"file=$file\"\n",
                      "markdown": "`\nif [ -b \"$somepath\" ] && PATH=\"/usr/sbin:$PATH\" command -v smartctl > /dev/null || [ -n \"$samples\" ] ; then\n\tif [ -n \"$samples\" ] ; then\n\t\t# cat a smartctl output text file instead of running smartctl\n\t\t# on a vdev (only used for developer testing).\n\t\tfile=$(get_filename_from_dir \"$samples\")\n\t\techo \"file=$file\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/health"
                },
                "region": {
                  "startLine": 68,
                  "startColumn": 56,
                  "endLine": 68,
                  "endColumn": 61,
                  "snippet": {
                    "text": "script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n",
                    "rendered": {
                      "text": "script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n",
                      "markdown": "`script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/health"
                },
                "region": {
                  "startLine": 68,
                  "startColumn": 25,
                  "endLine": 68,
                  "endColumn": 31,
                  "snippet": {
                    "text": "script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n",
                    "rendered": {
                      "text": "script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n",
                      "markdown": "`script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/health"
                },
                "region": {
                  "startLine": 56,
                  "endLine": 56,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\tnum_files=$(find \"$dir\" -maxdepth 1 -type f | wc -l)\n\tmod=$((pid % num_files))\n\ti=0\n\tfind \"$dir\" -type f -printf '%f\\n' | while read -r file ; do\n\t\tif [ \"$mod\" = \"$i\" ] ; then\n\t\t\techo \"$file\"\n\t\t\tbreak\n",
                    "rendered": {
                      "text": "\tnum_files=$(find \"$dir\" -maxdepth 1 -type f | wc -l)\n\tmod=$((pid % num_files))\n\ti=0\n\tfind \"$dir\" -type f -printf '%f\\n' | while read -r file ; do\n\t\tif [ \"$mod\" = \"$i\" ] ; then\n\t\t\techo \"$file\"\n\t\t\tbreak\n",
                      "markdown": "`\tnum_files=$(find \"$dir\" -maxdepth 1 -type f | wc -l)\n\tmod=$((pid % num_files))\n\ti=0\n\tfind \"$dir\" -type f -printf '%f\\n' | while read -r file ; do\n\t\tif [ \"$mod\" = \"$i\" ] ; then\n\t\t\techo \"$file\"\n\t\t\tbreak\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/health"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 38,
                  "endLine": 47,
                  "endColumn": 46,
                  "snippet": {
                    "text": "#\n# Look in directory DIR and return a filename from it.  The filename returned\n# is chosen quasi-sequentially (based off our PID).  This allows us to return\n# a different filename every time this script is invoked (which we do for each\n# vdev), without having to maintain state.\nget_filename_from_dir()\n{\n",
                    "rendered": {
                      "text": "#\n# Look in directory DIR and return a filename from it.  The filename returned\n# is chosen quasi-sequentially (based off our PID).  This allows us to return\n# a different filename every time this script is invoked (which we do for each\n# vdev), without having to maintain state.\nget_filename_from_dir()\n{\n",
                      "markdown": "`#\n# Look in directory DIR and return a filename from it.  The filename returned\n# is chosen quasi-sequentially (based off our PID).  This allows us to return\n# a different filename every time this script is invoked (which we do for each\n# vdev), without having to maintain state.\nget_filename_from_dir()\n{\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/health"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 28,
                  "endLine": 47,
                  "endColumn": 34,
                  "snippet": {
                    "text": "#\n# Look in directory DIR and return a filename from it.  The filename returned\n# is chosen quasi-sequentially (based off our PID).  This allows us to return\n# a different filename every time this script is invoked (which we do for each\n# vdev), without having to maintain state.\nget_filename_from_dir()\n{\n",
                    "rendered": {
                      "text": "#\n# Look in directory DIR and return a filename from it.  The filename returned\n# is chosen quasi-sequentially (based off our PID).  This allows us to return\n# a different filename every time this script is invoked (which we do for each\n# vdev), without having to maintain state.\nget_filename_from_dir()\n{\n",
                      "markdown": "`#\n# Look in directory DIR and return a filename from it.  The filename returned\n# is chosen quasi-sequentially (based off our PID).  This allows us to return\n# a different filename every time this script is invoked (which we do for each\n# vdev), without having to maintain state.\nget_filename_from_dir()\n{\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/health"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 27,
                  "endLine": 20,
                  "endColumn": 36,
                  "snippet": {
                    "text": "hours_on:\tShow number of hours drive powered on (all drives).\nrealloc:\tShow SMART reallocated sectors count (ATA).\nrep_ucor:\tShow SMART reported uncorrectable count (ATA).\ncmd_to:\t\tShow SMART command timeout count (ATA).\npend_sec:\tShow SMART current pending sector count (ATA).\noff_ucor:\tShow SMART offline uncorrectable errors (ATA).\nata_err:\tShow SMART ATA errors (ATA).\n",
                    "rendered": {
                      "text": "hours_on:\tShow number of hours drive powered on (all drives).\nrealloc:\tShow SMART reallocated sectors count (ATA).\nrep_ucor:\tShow SMART reported uncorrectable count (ATA).\ncmd_to:\t\tShow SMART command timeout count (ATA).\npend_sec:\tShow SMART current pending sector count (ATA).\noff_ucor:\tShow SMART offline uncorrectable errors (ATA).\nata_err:\tShow SMART ATA errors (ATA).\n",
                      "markdown": "`hours_on:\tShow number of hours drive powered on (all drives).\nrealloc:\tShow SMART reallocated sectors count (ATA).\nrep_ucor:\tShow SMART reported uncorrectable count (ATA).\ncmd_to:\t\tShow SMART command timeout count (ATA).\npend_sec:\tShow SMART current pending sector count (ATA).\noff_ucor:\tShow SMART offline uncorrectable errors (ATA).\nata_err:\tShow SMART ATA errors (ATA).\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/fault_led"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 34,
                  "endLine": 43,
                  "endColumn": 40,
                  "snippet": {
                    "text": "\t\tfi\n\t\t;;\n\tslot)\n\t\tif echo \"$VDEV_ENC_SYSFS_PATH\" | grep -q '/sys/bus/pci/slots' ; then\n\t\t\tval=\"$(basename \"\"\"$VDEV_ENC_SYSFS_PATH\"\"\")\"\n\t\telse\n\t\t\tval=\"$(cat \"\"\"$VDEV_ENC_SYSFS_PATH/slot\"\"\" 2>/dev/null)\"\n",
                    "rendered": {
                      "text": "\t\tfi\n\t\t;;\n\tslot)\n\t\tif echo \"$VDEV_ENC_SYSFS_PATH\" | grep -q '/sys/bus/pci/slots' ; then\n\t\t\tval=\"$(basename \"\"\"$VDEV_ENC_SYSFS_PATH\"\"\")\"\n\t\telse\n\t\t\tval=\"$(cat \"\"\"$VDEV_ENC_SYSFS_PATH/slot\"\"\" 2>/dev/null)\"\n",
                      "markdown": "`\t\tfi\n\t\t;;\n\tslot)\n\t\tif echo \"$VDEV_ENC_SYSFS_PATH\" | grep -q '/sys/bus/pci/slots' ; then\n\t\t\tval=\"$(basename \"\"\"$VDEV_ENC_SYSFS_PATH\"\"\")\"\n\t\telse\n\t\t\tval=\"$(cat \"\"\"$VDEV_ENC_SYSFS_PATH/slot\"\"\" 2>/dev/null)\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/fault_led"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 34,
                  "endLine": 36,
                  "endColumn": 40,
                  "snippet": {
                    "text": "\tval=\"\"\n\tcase $i in\n\tenc)\n\t\tif echo \"$VDEV_ENC_SYSFS_PATH\" | grep -q '/sys/bus/pci/slots' ; then\n\t\t\tval=\"$VDEV_ENC_SYSFS_PATH\"\n\t\telse\n\t\t\tval=\"$(ls \"\"\"$VDEV_ENC_SYSFS_PATH/../../\"\"\" 2>/dev/null)\"\n",
                    "rendered": {
                      "text": "\tval=\"\"\n\tcase $i in\n\tenc)\n\t\tif echo \"$VDEV_ENC_SYSFS_PATH\" | grep -q '/sys/bus/pci/slots' ; then\n\t\t\tval=\"$VDEV_ENC_SYSFS_PATH\"\n\t\telse\n\t\t\tval=\"$(ls \"\"\"$VDEV_ENC_SYSFS_PATH/../../\"\"\" 2>/dev/null)\"\n",
                      "markdown": "`\tval=\"\"\n\tcase $i in\n\tenc)\n\t\tif echo \"$VDEV_ENC_SYSFS_PATH\" | grep -q '/sys/bus/pci/slots' ; then\n\t\t\tval=\"$VDEV_ENC_SYSFS_PATH\"\n\t\telse\n\t\t\tval=\"$(ls \"\"\"$VDEV_ENC_SYSFS_PATH/../../\"\"\" 2>/dev/null)\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/fault_led"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 49,
                  "endLine": 16,
                  "endColumn": 54,
                  "snippet": {
                    "text": "\nscript=\"${0##*/}\"\nif [ \"$1\" = \"-h\" ] ; then\n\techo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n\texit\nfi\n\n",
                    "rendered": {
                      "text": "\nscript=\"${0##*/}\"\nif [ \"$1\" = \"-h\" ] ; then\n\techo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n\texit\nfi\n\n",
                      "markdown": "`\nscript=\"${0##*/}\"\nif [ \"$1\" = \"-h\" ] ; then\n\techo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n\texit\nfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/fault_led"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 18,
                  "endLine": 16,
                  "endColumn": 24,
                  "snippet": {
                    "text": "\nscript=\"${0##*/}\"\nif [ \"$1\" = \"-h\" ] ; then\n\techo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n\texit\nfi\n\n",
                    "rendered": {
                      "text": "\nscript=\"${0##*/}\"\nif [ \"$1\" = \"-h\" ] ; then\n\techo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n\texit\nfi\n\n",
                      "markdown": "`\nscript=\"${0##*/}\"\nif [ \"$1\" = \"-h\" ] ; then\n\techo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n\texit\nfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/etc/zfs/zed.d/zed.rc"
                },
                "region": {
                  "startLine": 148,
                  "startColumn": 21,
                  "endLine": 148,
                  "endColumn": 30,
                  "snippet": {
                    "text": "##\n# Power off the drive's slot in the enclosure if it becomes FAULTED.  This can\n# help silence misbehaving drives.  This assumes your drive enclosure fully\n# supports slot power control via sysfs.\n#ZED_POWER_OFF_ENCLOSURE_SLOT_ON_FAULT=1\n\n##\n",
                    "rendered": {
                      "text": "##\n# Power off the drive's slot in the enclosure if it becomes FAULTED.  This can\n# help silence misbehaving drives.  This assumes your drive enclosure fully\n# supports slot power control via sysfs.\n#ZED_POWER_OFF_ENCLOSURE_SLOT_ON_FAULT=1\n\n##\n",
                      "markdown": "`##\n# Power off the drive's slot in the enclosure if it becomes FAULTED.  This can\n# help silence misbehaving drives.  This assumes your drive enclosure fully\n# supports slot power control via sysfs.\n#ZED_POWER_OFF_ENCLOSURE_SLOT_ON_FAULT=1\n\n##\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/etc/zfs/zed.d/zed.rc"
                },
                "region": {
                  "startLine": 170,
                  "startColumn": 64,
                  "endLine": 170,
                  "endColumn": 73,
                  "snippet": {
                    "text": "# Ntfy Service URL\n# This defines which service the ntfy call will be directed toward\n#  <https://docs.ntfy.sh/install/>\n# https://ntfy.sh by default; uncomment to enable an alternative service url.\n#ZED_NTFY_URL=\"https://ntfy.sh\"\n",
                    "rendered": {
                      "text": "# Ntfy Service URL\n# This defines which service the ntfy call will be directed toward\n#  <https://docs.ntfy.sh/install/>\n# https://ntfy.sh by default; uncomment to enable an alternative service url.\n#ZED_NTFY_URL=\"https://ntfy.sh\"\n",
                      "markdown": "`# Ntfy Service URL\n# This defines which service the ntfy call will be directed toward\n#  <https://docs.ntfy.sh/install/>\n# https://ntfy.sh by default; uncomment to enable an alternative service url.\n#ZED_NTFY_URL=\"https://ntfy.sh\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/etc/zfs/zed.d/zed.rc"
                },
                "region": {
                  "startLine": 168,
                  "startColumn": 20,
                  "endLine": 168,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\n##\n# Ntfy Service URL\n# This defines which service the ntfy call will be directed toward\n#  <https://docs.ntfy.sh/install/>\n# https://ntfy.sh by default; uncomment to enable an alternative service url.\n#ZED_NTFY_URL=\"https://ntfy.sh\"\n",
                    "rendered": {
                      "text": "\n##\n# Ntfy Service URL\n# This defines which service the ntfy call will be directed toward\n#  <https://docs.ntfy.sh/install/>\n# https://ntfy.sh by default; uncomment to enable an alternative service url.\n#ZED_NTFY_URL=\"https://ntfy.sh\"\n",
                      "markdown": "`\n##\n# Ntfy Service URL\n# This defines which service the ntfy call will be directed toward\n#  <https://docs.ntfy.sh/install/>\n# https://ntfy.sh by default; uncomment to enable an alternative service url.\n#ZED_NTFY_URL=\"https://ntfy.sh\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/etc/zfs/zed.d/zed.rc"
                },
                "region": {
                  "startLine": 167,
                  "startColumn": 6,
                  "endLine": 167,
                  "endColumn": 15,
                  "snippet": {
                    "text": "#ZED_NTFY_ACCESS_TOKEN=\"\"\n\n##\n# Ntfy Service URL\n# This defines which service the ntfy call will be directed toward\n#  <https://docs.ntfy.sh/install/>\n# https://ntfy.sh by default; uncomment to enable an alternative service url.\n",
                    "rendered": {
                      "text": "#ZED_NTFY_ACCESS_TOKEN=\"\"\n\n##\n# Ntfy Service URL\n# This defines which service the ntfy call will be directed toward\n#  <https://docs.ntfy.sh/install/>\n# https://ntfy.sh by default; uncomment to enable an alternative service url.\n",
                      "markdown": "`#ZED_NTFY_ACCESS_TOKEN=\"\"\n\n##\n# Ntfy Service URL\n# This defines which service the ntfy call will be directed toward\n#  <https://docs.ntfy.sh/install/>\n# https://ntfy.sh by default; uncomment to enable an alternative service url.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/etc/zfs/zed.d/zed.rc"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 7,
                  "endLine": 21,
                  "endColumn": 13,
                  "snippet": {
                    "text": "\n##\n# Name or path of executable responsible for sending notifications via email;\n#   the mail program must be capable of reading a message body from stdin.\n# Email will only be sent if ZED_EMAIL_ADDR is defined.\n#\n#ZED_EMAIL_PROG=\"mail\"\n",
                    "rendered": {
                      "text": "\n##\n# Name or path of executable responsible for sending notifications via email;\n#   the mail program must be capable of reading a message body from stdin.\n# Email will only be sent if ZED_EMAIL_ADDR is defined.\n#\n#ZED_EMAIL_PROG=\"mail\"\n",
                      "markdown": "`\n##\n# Name or path of executable responsible for sending notifications via email;\n#   the mail program must be capable of reading a message body from stdin.\n# Email will only be sent if ZED_EMAIL_ADDR is defined.\n#\n#ZED_EMAIL_PROG=\"mail\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/sbin/fsck.zfs"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 2,
                  "endLine": 32,
                  "endColumn": 7,
                  "snippet": {
                    "text": "\t\t\tret=$(( ret | 4 ))\n\t\t\t;;\n\t\tFAULTED)\n\t\t\tawk '!/^([[:space:]]*#.*)?$/ && $1 == \"'\"$dataset\"'\" && $3 == \"zfs\" {exit 1}' /etc/fstab || \\\n\t\t\t\tret=$(( ret | 8 ))\n\t\t\t;;\n\t\t\"\")\n",
                    "rendered": {
                      "text": "\t\t\tret=$(( ret | 4 ))\n\t\t\t;;\n\t\tFAULTED)\n\t\t\tawk '!/^([[:space:]]*#.*)?$/ && $1 == \"'\"$dataset\"'\" && $3 == \"zfs\" {exit 1}' /etc/fstab || \\\n\t\t\t\tret=$(( ret | 8 ))\n\t\t\t;;\n\t\t\"\")\n",
                      "markdown": "`\t\t\tret=$(( ret | 4 ))\n\t\t\t;;\n\t\tFAULTED)\n\t\t\tawk '!/^([[:space:]]*#.*)?$/ && $1 == \"'\"$dataset\"'\" && $3 == \"zfs\" {exit 1}' /etc/fstab || \\\n\t\t\t\tret=$(( ret | 8 ))\n\t\t\t;;\n\t\t\"\")\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/sbin/fsck.zfs"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 6,
                  "endLine": 6,
                  "endColumn": 14,
                  "snippet": {
                    "text": "# fsck.zfs: A fsck helper to accommodate distributions that expect\n# to be able to execute a fsck on all filesystem types.\n#\n# This script simply bubbles up some already-known-about errors,\n# see fsck.zfs(8)\n#\n\n",
                    "rendered": {
                      "text": "# fsck.zfs: A fsck helper to accommodate distributions that expect\n# to be able to execute a fsck on all filesystem types.\n#\n# This script simply bubbles up some already-known-about errors,\n# see fsck.zfs(8)\n#\n\n",
                      "markdown": "`# fsck.zfs: A fsck helper to accommodate distributions that expect\n# to be able to execute a fsck on all filesystem types.\n#\n# This script simply bubbles up some already-known-about errors,\n# see fsck.zfs(8)\n#\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/sbin/fsck.zfs"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 59,
                  "endLine": 4,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# fsck.zfs: A fsck helper to accommodate distributions that expect\n# to be able to execute a fsck on all filesystem types.\n#\n# This script simply bubbles up some already-known-about errors,\n# see fsck.zfs(8)\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# fsck.zfs: A fsck helper to accommodate distributions that expect\n# to be able to execute a fsck on all filesystem types.\n#\n# This script simply bubbles up some already-known-about errors,\n# see fsck.zfs(8)\n",
                      "markdown": "`#!/bin/sh\n#\n# fsck.zfs: A fsck helper to accommodate distributions that expect\n# to be able to execute a fsck on all filesystem types.\n#\n# This script simply bubbles up some already-known-about errors,\n# see fsck.zfs(8)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/w_ucor"
                },
                "region": {
                  "startLine": 244,
                  "startColumn": 47,
                  "endLine": 244,
                  "endColumn": 52,
                  "snippet": {
                    "text": "\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n\nif [ -n \"$without_vals\" ]; then\n",
                    "rendered": {
                      "text": "\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n\nif [ -n \"$without_vals\" ]; then\n",
                      "markdown": "`\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n\nif [ -n \"$without_vals\" ]; then\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/w_ucor"
                },
                "region": {
                  "startLine": 242,
                  "startColumn": 29,
                  "endLine": 242,
                  "endColumn": 34,
                  "snippet": {
                    "text": "\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n",
                    "rendered": {
                      "text": "\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n",
                      "markdown": "`\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/w_ucor"
                },
                "region": {
                  "startLine": 242,
                  "startColumn": 1,
                  "endLine": 242,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n",
                    "rendered": {
                      "text": "\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n",
                      "markdown": "`\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/w_ucor"
                },
                "region": {
                  "startLine": 241,
                  "startColumn": 1,
                  "endLine": 241,
                  "endColumn": 7,
                  "snippet": {
                    "text": "if [ -n \"$with_vals\" ]; then\n\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\n",
                    "rendered": {
                      "text": "if [ -n \"$with_vals\" ]; then\n\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\n",
                      "markdown": "`if [ -n \"$with_vals\" ]; then\n\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/w_ucor"
                },
                "region": {
                  "startLine": 237,
                  "startColumn": 25,
                  "endLine": 237,
                  "endColumn": 31,
                  "snippet": {
                    "text": "\tscripts=\"$script\"\nesac\n\nwith_vals=$(echo \"$out\" | grep -E \"$scripts\")\nif [ -n \"$with_vals\" ]; then\n\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n",
                    "rendered": {
                      "text": "\tscripts=\"$script\"\nesac\n\nwith_vals=$(echo \"$out\" | grep -E \"$scripts\")\nif [ -n \"$with_vals\" ]; then\n\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n",
                      "markdown": "`\tscripts=\"$script\"\nesac\n\nwith_vals=$(echo \"$out\" | grep -E \"$scripts\")\nif [ -n \"$with_vals\" ]; then\n\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/w_ucor"
                },
                "region": {
                  "startLine": 199,
                  "startColumn": 36,
                  "endLine": 199,
                  "endColumn": 41,
                  "snippet": {
                    "text": "END {print \"type=\"type; ORS=\"\\n\"; print \"\"}\n');\nfi\ntype=$(echo \"$out\" | grep '^type=' | cut -d '=' -f 2)\n\n# If type is not set by now, either we don't have a block device\n# or smartctl failed. Either way, default to ATA and set $out to\n",
                    "rendered": {
                      "text": "END {print \"type=\"type; ORS=\"\\n\"; print \"\"}\n');\nfi\ntype=$(echo \"$out\" | grep '^type=' | cut -d '=' -f 2)\n\n# If type is not set by now, either we don't have a block device\n# or smartctl failed. Either way, default to ATA and set $out to\n",
                      "markdown": "`END {print \"type=\"type; ORS=\"\\n\"; print \"\"}\n');\nfi\ntype=$(echo \"$out\" | grep '^type=' | cut -d '=' -f 2)\n\n# If type is not set by now, either we don't have a block device\n# or smartctl failed. Either way, default to ATA and set $out to\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/w_ucor"
                },
                "region": {
                  "startLine": 199,
                  "startColumn": 20,
                  "endLine": 199,
                  "endColumn": 26,
                  "snippet": {
                    "text": "END {print \"type=\"type; ORS=\"\\n\"; print \"\"}\n');\nfi\ntype=$(echo \"$out\" | grep '^type=' | cut -d '=' -f 2)\n\n# If type is not set by now, either we don't have a block device\n# or smartctl failed. Either way, default to ATA and set $out to\n",
                    "rendered": {
                      "text": "END {print \"type=\"type; ORS=\"\\n\"; print \"\"}\n');\nfi\ntype=$(echo \"$out\" | grep '^type=' | cut -d '=' -f 2)\n\n# If type is not set by now, either we don't have a block device\n# or smartctl failed. Either way, default to ATA and set $out to\n",
                      "markdown": "`END {print \"type=\"type; ORS=\"\\n\"; print \"\"}\n');\nfi\ntype=$(echo \"$out\" | grep '^type=' | cut -d '=' -f 2)\n\n# If type is not set by now, either we don't have a block device\n# or smartctl failed. Either way, default to ATA and set $out to\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/w_ucor"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 24,
                  "endLine": 103,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\t# NVMe:\n\t#       SMART/Health Information (NVMe Log 0xnn, NSID 0xnn)\n\t#\n\tout=$(echo \"$raw_out\" | awk '\n# SAS specific\n/read:/{print \"rrd=\"$4\"\\nr_cor=\"$5\"\\nr_proc=\"$7\"\\nr_ucor=\"$8}\n/write:/{print \"rwr=\"$4\"\\nw_cor=\"$5\"\\nw_proc=\"$7\"\\nw_ucor=\"$8}\n",
                    "rendered": {
                      "text": "\t# NVMe:\n\t#       SMART/Health Information (NVMe Log 0xnn, NSID 0xnn)\n\t#\n\tout=$(echo \"$raw_out\" | awk '\n# SAS specific\n/read:/{print \"rrd=\"$4\"\\nr_cor=\"$5\"\\nr_proc=\"$7\"\\nr_ucor=\"$8}\n/write:/{print \"rwr=\"$4\"\\nw_cor=\"$5\"\\nw_proc=\"$7\"\\nw_ucor=\"$8}\n",
                      "markdown": "`\t# NVMe:\n\t#       SMART/Health Information (NVMe Log 0xnn, NSID 0xnn)\n\t#\n\tout=$(echo \"$raw_out\" | awk '\n# SAS specific\n/read:/{print \"rrd=\"$4\"\\nr_cor=\"$5\"\\nr_proc=\"$7\"\\nr_ucor=\"$8}\n/write:/{print \"rwr=\"$4\"\\nw_cor=\"$5\"\\nw_proc=\"$7\"\\nw_ucor=\"$8}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/w_ucor"
                },
                "region": {
                  "startLine": 83,
                  "startColumn": 3,
                  "endLine": 83,
                  "endColumn": 8,
                  "snippet": {
                    "text": "\nif [ -b \"$somepath\" ] && PATH=\"/usr/sbin:$PATH\" command -v smartctl > /dev/null || [ -n \"$samples\" ] ; then\n\tif [ -n \"$samples\" ] ; then\n\t\t# cat a smartctl output text file instead of running smartctl\n\t\t# on a vdev (only used for developer testing).\n\t\tfile=$(get_filename_from_dir \"$samples\")\n\t\techo \"file=$file\"\n",
                    "rendered": {
                      "text": "\nif [ -b \"$somepath\" ] && PATH=\"/usr/sbin:$PATH\" command -v smartctl > /dev/null || [ -n \"$samples\" ] ; then\n\tif [ -n \"$samples\" ] ; then\n\t\t# cat a smartctl output text file instead of running smartctl\n\t\t# on a vdev (only used for developer testing).\n\t\tfile=$(get_filename_from_dir \"$samples\")\n\t\techo \"file=$file\"\n",
                      "markdown": "`\nif [ -b \"$somepath\" ] && PATH=\"/usr/sbin:$PATH\" command -v smartctl > /dev/null || [ -n \"$samples\" ] ; then\n\tif [ -n \"$samples\" ] ; then\n\t\t# cat a smartctl output text file instead of running smartctl\n\t\t# on a vdev (only used for developer testing).\n\t\tfile=$(get_filename_from_dir \"$samples\")\n\t\techo \"file=$file\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/w_ucor"
                },
                "region": {
                  "startLine": 68,
                  "startColumn": 56,
                  "endLine": 68,
                  "endColumn": 61,
                  "snippet": {
                    "text": "script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n",
                    "rendered": {
                      "text": "script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n",
                      "markdown": "`script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/w_ucor"
                },
                "region": {
                  "startLine": 68,
                  "startColumn": 25,
                  "endLine": 68,
                  "endColumn": 31,
                  "snippet": {
                    "text": "script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n",
                    "rendered": {
                      "text": "script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n",
                      "markdown": "`script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/w_ucor"
                },
                "region": {
                  "startLine": 56,
                  "endLine": 56,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\tnum_files=$(find \"$dir\" -maxdepth 1 -type f | wc -l)\n\tmod=$((pid % num_files))\n\ti=0\n\tfind \"$dir\" -type f -printf '%f\\n' | while read -r file ; do\n\t\tif [ \"$mod\" = \"$i\" ] ; then\n\t\t\techo \"$file\"\n\t\t\tbreak\n",
                    "rendered": {
                      "text": "\tnum_files=$(find \"$dir\" -maxdepth 1 -type f | wc -l)\n\tmod=$((pid % num_files))\n\ti=0\n\tfind \"$dir\" -type f -printf '%f\\n' | while read -r file ; do\n\t\tif [ \"$mod\" = \"$i\" ] ; then\n\t\t\techo \"$file\"\n\t\t\tbreak\n",
                      "markdown": "`\tnum_files=$(find \"$dir\" -maxdepth 1 -type f | wc -l)\n\tmod=$((pid % num_files))\n\ti=0\n\tfind \"$dir\" -type f -printf '%f\\n' | while read -r file ; do\n\t\tif [ \"$mod\" = \"$i\" ] ; then\n\t\t\techo \"$file\"\n\t\t\tbreak\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/w_ucor"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 38,
                  "endLine": 47,
                  "endColumn": 46,
                  "snippet": {
                    "text": "#\n# Look in directory DIR and return a filename from it.  The filename returned\n# is chosen quasi-sequentially (based off our PID).  This allows us to return\n# a different filename every time this script is invoked (which we do for each\n# vdev), without having to maintain state.\nget_filename_from_dir()\n{\n",
                    "rendered": {
                      "text": "#\n# Look in directory DIR and return a filename from it.  The filename returned\n# is chosen quasi-sequentially (based off our PID).  This allows us to return\n# a different filename every time this script is invoked (which we do for each\n# vdev), without having to maintain state.\nget_filename_from_dir()\n{\n",
                      "markdown": "`#\n# Look in directory DIR and return a filename from it.  The filename returned\n# is chosen quasi-sequentially (based off our PID).  This allows us to return\n# a different filename every time this script is invoked (which we do for each\n# vdev), without having to maintain state.\nget_filename_from_dir()\n{\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/w_ucor"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 28,
                  "endLine": 47,
                  "endColumn": 34,
                  "snippet": {
                    "text": "#\n# Look in directory DIR and return a filename from it.  The filename returned\n# is chosen quasi-sequentially (based off our PID).  This allows us to return\n# a different filename every time this script is invoked (which we do for each\n# vdev), without having to maintain state.\nget_filename_from_dir()\n{\n",
                    "rendered": {
                      "text": "#\n# Look in directory DIR and return a filename from it.  The filename returned\n# is chosen quasi-sequentially (based off our PID).  This allows us to return\n# a different filename every time this script is invoked (which we do for each\n# vdev), without having to maintain state.\nget_filename_from_dir()\n{\n",
                      "markdown": "`#\n# Look in directory DIR and return a filename from it.  The filename returned\n# is chosen quasi-sequentially (based off our PID).  This allows us to return\n# a different filename every time this script is invoked (which we do for each\n# vdev), without having to maintain state.\nget_filename_from_dir()\n{\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/w_ucor"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 27,
                  "endLine": 20,
                  "endColumn": 36,
                  "snippet": {
                    "text": "hours_on:\tShow number of hours drive powered on (all drives).\nrealloc:\tShow SMART reallocated sectors count (ATA).\nrep_ucor:\tShow SMART reported uncorrectable count (ATA).\ncmd_to:\t\tShow SMART command timeout count (ATA).\npend_sec:\tShow SMART current pending sector count (ATA).\noff_ucor:\tShow SMART offline uncorrectable errors (ATA).\nata_err:\tShow SMART ATA errors (ATA).\n",
                    "rendered": {
                      "text": "hours_on:\tShow number of hours drive powered on (all drives).\nrealloc:\tShow SMART reallocated sectors count (ATA).\nrep_ucor:\tShow SMART reported uncorrectable count (ATA).\ncmd_to:\t\tShow SMART command timeout count (ATA).\npend_sec:\tShow SMART current pending sector count (ATA).\noff_ucor:\tShow SMART offline uncorrectable errors (ATA).\nata_err:\tShow SMART ATA errors (ATA).\n",
                      "markdown": "`hours_on:\tShow number of hours drive powered on (all drives).\nrealloc:\tShow SMART reallocated sectors count (ATA).\nrep_ucor:\tShow SMART reported uncorrectable count (ATA).\ncmd_to:\t\tShow SMART command timeout count (ATA).\npend_sec:\tShow SMART current pending sector count (ATA).\noff_ucor:\tShow SMART offline uncorrectable errors (ATA).\nata_err:\tShow SMART ATA errors (ATA).\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/w_proc"
                },
                "region": {
                  "startLine": 244,
                  "startColumn": 47,
                  "endLine": 244,
                  "endColumn": 52,
                  "snippet": {
                    "text": "\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n\nif [ -n \"$without_vals\" ]; then\n",
                    "rendered": {
                      "text": "\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n\nif [ -n \"$without_vals\" ]; then\n",
                      "markdown": "`\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n\nif [ -n \"$without_vals\" ]; then\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/w_proc"
                },
                "region": {
                  "startLine": 242,
                  "startColumn": 29,
                  "endLine": 242,
                  "endColumn": 34,
                  "snippet": {
                    "text": "\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n",
                    "rendered": {
                      "text": "\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n",
                      "markdown": "`\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/w_proc"
                },
                "region": {
                  "startLine": 242,
                  "startColumn": 1,
                  "endLine": 242,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n",
                    "rendered": {
                      "text": "\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n",
                      "markdown": "`\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/w_proc"
                },
                "region": {
                  "startLine": 241,
                  "startColumn": 1,
                  "endLine": 241,
                  "endColumn": 7,
                  "snippet": {
                    "text": "if [ -n \"$with_vals\" ]; then\n\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\n",
                    "rendered": {
                      "text": "if [ -n \"$with_vals\" ]; then\n\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\n",
                      "markdown": "`if [ -n \"$with_vals\" ]; then\n\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/w_proc"
                },
                "region": {
                  "startLine": 237,
                  "startColumn": 25,
                  "endLine": 237,
                  "endColumn": 31,
                  "snippet": {
                    "text": "\tscripts=\"$script\"\nesac\n\nwith_vals=$(echo \"$out\" | grep -E \"$scripts\")\nif [ -n \"$with_vals\" ]; then\n\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n",
                    "rendered": {
                      "text": "\tscripts=\"$script\"\nesac\n\nwith_vals=$(echo \"$out\" | grep -E \"$scripts\")\nif [ -n \"$with_vals\" ]; then\n\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n",
                      "markdown": "`\tscripts=\"$script\"\nesac\n\nwith_vals=$(echo \"$out\" | grep -E \"$scripts\")\nif [ -n \"$with_vals\" ]; then\n\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/w_proc"
                },
                "region": {
                  "startLine": 199,
                  "startColumn": 36,
                  "endLine": 199,
                  "endColumn": 41,
                  "snippet": {
                    "text": "END {print \"type=\"type; ORS=\"\\n\"; print \"\"}\n');\nfi\ntype=$(echo \"$out\" | grep '^type=' | cut -d '=' -f 2)\n\n# If type is not set by now, either we don't have a block device\n# or smartctl failed. Either way, default to ATA and set $out to\n",
                    "rendered": {
                      "text": "END {print \"type=\"type; ORS=\"\\n\"; print \"\"}\n');\nfi\ntype=$(echo \"$out\" | grep '^type=' | cut -d '=' -f 2)\n\n# If type is not set by now, either we don't have a block device\n# or smartctl failed. Either way, default to ATA and set $out to\n",
                      "markdown": "`END {print \"type=\"type; ORS=\"\\n\"; print \"\"}\n');\nfi\ntype=$(echo \"$out\" | grep '^type=' | cut -d '=' -f 2)\n\n# If type is not set by now, either we don't have a block device\n# or smartctl failed. Either way, default to ATA and set $out to\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/w_proc"
                },
                "region": {
                  "startLine": 199,
                  "startColumn": 20,
                  "endLine": 199,
                  "endColumn": 26,
                  "snippet": {
                    "text": "END {print \"type=\"type; ORS=\"\\n\"; print \"\"}\n');\nfi\ntype=$(echo \"$out\" | grep '^type=' | cut -d '=' -f 2)\n\n# If type is not set by now, either we don't have a block device\n# or smartctl failed. Either way, default to ATA and set $out to\n",
                    "rendered": {
                      "text": "END {print \"type=\"type; ORS=\"\\n\"; print \"\"}\n');\nfi\ntype=$(echo \"$out\" | grep '^type=' | cut -d '=' -f 2)\n\n# If type is not set by now, either we don't have a block device\n# or smartctl failed. Either way, default to ATA and set $out to\n",
                      "markdown": "`END {print \"type=\"type; ORS=\"\\n\"; print \"\"}\n');\nfi\ntype=$(echo \"$out\" | grep '^type=' | cut -d '=' -f 2)\n\n# If type is not set by now, either we don't have a block device\n# or smartctl failed. Either way, default to ATA and set $out to\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/w_proc"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 24,
                  "endLine": 103,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\t# NVMe:\n\t#       SMART/Health Information (NVMe Log 0xnn, NSID 0xnn)\n\t#\n\tout=$(echo \"$raw_out\" | awk '\n# SAS specific\n/read:/{print \"rrd=\"$4\"\\nr_cor=\"$5\"\\nr_proc=\"$7\"\\nr_ucor=\"$8}\n/write:/{print \"rwr=\"$4\"\\nw_cor=\"$5\"\\nw_proc=\"$7\"\\nw_ucor=\"$8}\n",
                    "rendered": {
                      "text": "\t# NVMe:\n\t#       SMART/Health Information (NVMe Log 0xnn, NSID 0xnn)\n\t#\n\tout=$(echo \"$raw_out\" | awk '\n# SAS specific\n/read:/{print \"rrd=\"$4\"\\nr_cor=\"$5\"\\nr_proc=\"$7\"\\nr_ucor=\"$8}\n/write:/{print \"rwr=\"$4\"\\nw_cor=\"$5\"\\nw_proc=\"$7\"\\nw_ucor=\"$8}\n",
                      "markdown": "`\t# NVMe:\n\t#       SMART/Health Information (NVMe Log 0xnn, NSID 0xnn)\n\t#\n\tout=$(echo \"$raw_out\" | awk '\n# SAS specific\n/read:/{print \"rrd=\"$4\"\\nr_cor=\"$5\"\\nr_proc=\"$7\"\\nr_ucor=\"$8}\n/write:/{print \"rwr=\"$4\"\\nw_cor=\"$5\"\\nw_proc=\"$7\"\\nw_ucor=\"$8}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/w_proc"
                },
                "region": {
                  "startLine": 83,
                  "startColumn": 3,
                  "endLine": 83,
                  "endColumn": 8,
                  "snippet": {
                    "text": "\nif [ -b \"$somepath\" ] && PATH=\"/usr/sbin:$PATH\" command -v smartctl > /dev/null || [ -n \"$samples\" ] ; then\n\tif [ -n \"$samples\" ] ; then\n\t\t# cat a smartctl output text file instead of running smartctl\n\t\t# on a vdev (only used for developer testing).\n\t\tfile=$(get_filename_from_dir \"$samples\")\n\t\techo \"file=$file\"\n",
                    "rendered": {
                      "text": "\nif [ -b \"$somepath\" ] && PATH=\"/usr/sbin:$PATH\" command -v smartctl > /dev/null || [ -n \"$samples\" ] ; then\n\tif [ -n \"$samples\" ] ; then\n\t\t# cat a smartctl output text file instead of running smartctl\n\t\t# on a vdev (only used for developer testing).\n\t\tfile=$(get_filename_from_dir \"$samples\")\n\t\techo \"file=$file\"\n",
                      "markdown": "`\nif [ -b \"$somepath\" ] && PATH=\"/usr/sbin:$PATH\" command -v smartctl > /dev/null || [ -n \"$samples\" ] ; then\n\tif [ -n \"$samples\" ] ; then\n\t\t# cat a smartctl output text file instead of running smartctl\n\t\t# on a vdev (only used for developer testing).\n\t\tfile=$(get_filename_from_dir \"$samples\")\n\t\techo \"file=$file\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/w_proc"
                },
                "region": {
                  "startLine": 68,
                  "startColumn": 56,
                  "endLine": 68,
                  "endColumn": 61,
                  "snippet": {
                    "text": "script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n",
                    "rendered": {
                      "text": "script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n",
                      "markdown": "`script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/w_proc"
                },
                "region": {
                  "startLine": 68,
                  "startColumn": 25,
                  "endLine": 68,
                  "endColumn": 31,
                  "snippet": {
                    "text": "script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n",
                    "rendered": {
                      "text": "script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n",
                      "markdown": "`script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/w_proc"
                },
                "region": {
                  "startLine": 56,
                  "endLine": 56,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\tnum_files=$(find \"$dir\" -maxdepth 1 -type f | wc -l)\n\tmod=$((pid % num_files))\n\ti=0\n\tfind \"$dir\" -type f -printf '%f\\n' | while read -r file ; do\n\t\tif [ \"$mod\" = \"$i\" ] ; then\n\t\t\techo \"$file\"\n\t\t\tbreak\n",
                    "rendered": {
                      "text": "\tnum_files=$(find \"$dir\" -maxdepth 1 -type f | wc -l)\n\tmod=$((pid % num_files))\n\ti=0\n\tfind \"$dir\" -type f -printf '%f\\n' | while read -r file ; do\n\t\tif [ \"$mod\" = \"$i\" ] ; then\n\t\t\techo \"$file\"\n\t\t\tbreak\n",
                      "markdown": "`\tnum_files=$(find \"$dir\" -maxdepth 1 -type f | wc -l)\n\tmod=$((pid % num_files))\n\ti=0\n\tfind \"$dir\" -type f -printf '%f\\n' | while read -r file ; do\n\t\tif [ \"$mod\" = \"$i\" ] ; then\n\t\t\techo \"$file\"\n\t\t\tbreak\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/w_proc"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 38,
                  "endLine": 47,
                  "endColumn": 46,
                  "snippet": {
                    "text": "#\n# Look in directory DIR and return a filename from it.  The filename returned\n# is chosen quasi-sequentially (based off our PID).  This allows us to return\n# a different filename every time this script is invoked (which we do for each\n# vdev), without having to maintain state.\nget_filename_from_dir()\n{\n",
                    "rendered": {
                      "text": "#\n# Look in directory DIR and return a filename from it.  The filename returned\n# is chosen quasi-sequentially (based off our PID).  This allows us to return\n# a different filename every time this script is invoked (which we do for each\n# vdev), without having to maintain state.\nget_filename_from_dir()\n{\n",
                      "markdown": "`#\n# Look in directory DIR and return a filename from it.  The filename returned\n# is chosen quasi-sequentially (based off our PID).  This allows us to return\n# a different filename every time this script is invoked (which we do for each\n# vdev), without having to maintain state.\nget_filename_from_dir()\n{\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/w_proc"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 28,
                  "endLine": 47,
                  "endColumn": 34,
                  "snippet": {
                    "text": "#\n# Look in directory DIR and return a filename from it.  The filename returned\n# is chosen quasi-sequentially (based off our PID).  This allows us to return\n# a different filename every time this script is invoked (which we do for each\n# vdev), without having to maintain state.\nget_filename_from_dir()\n{\n",
                    "rendered": {
                      "text": "#\n# Look in directory DIR and return a filename from it.  The filename returned\n# is chosen quasi-sequentially (based off our PID).  This allows us to return\n# a different filename every time this script is invoked (which we do for each\n# vdev), without having to maintain state.\nget_filename_from_dir()\n{\n",
                      "markdown": "`#\n# Look in directory DIR and return a filename from it.  The filename returned\n# is chosen quasi-sequentially (based off our PID).  This allows us to return\n# a different filename every time this script is invoked (which we do for each\n# vdev), without having to maintain state.\nget_filename_from_dir()\n{\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/w_proc"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 27,
                  "endLine": 20,
                  "endColumn": 36,
                  "snippet": {
                    "text": "hours_on:\tShow number of hours drive powered on (all drives).\nrealloc:\tShow SMART reallocated sectors count (ATA).\nrep_ucor:\tShow SMART reported uncorrectable count (ATA).\ncmd_to:\t\tShow SMART command timeout count (ATA).\npend_sec:\tShow SMART current pending sector count (ATA).\noff_ucor:\tShow SMART offline uncorrectable errors (ATA).\nata_err:\tShow SMART ATA errors (ATA).\n",
                    "rendered": {
                      "text": "hours_on:\tShow number of hours drive powered on (all drives).\nrealloc:\tShow SMART reallocated sectors count (ATA).\nrep_ucor:\tShow SMART reported uncorrectable count (ATA).\ncmd_to:\t\tShow SMART command timeout count (ATA).\npend_sec:\tShow SMART current pending sector count (ATA).\noff_ucor:\tShow SMART offline uncorrectable errors (ATA).\nata_err:\tShow SMART ATA errors (ATA).\n",
                      "markdown": "`hours_on:\tShow number of hours drive powered on (all drives).\nrealloc:\tShow SMART reallocated sectors count (ATA).\nrep_ucor:\tShow SMART reported uncorrectable count (ATA).\ncmd_to:\t\tShow SMART command timeout count (ATA).\npend_sec:\tShow SMART current pending sector count (ATA).\noff_ucor:\tShow SMART offline uncorrectable errors (ATA).\nata_err:\tShow SMART ATA errors (ATA).\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/locate_led"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 34,
                  "endLine": 43,
                  "endColumn": 40,
                  "snippet": {
                    "text": "\t\tfi\n\t\t;;\n\tslot)\n\t\tif echo \"$VDEV_ENC_SYSFS_PATH\" | grep -q '/sys/bus/pci/slots' ; then\n\t\t\tval=\"$(basename \"\"\"$VDEV_ENC_SYSFS_PATH\"\"\")\"\n\t\telse\n\t\t\tval=\"$(cat \"\"\"$VDEV_ENC_SYSFS_PATH/slot\"\"\" 2>/dev/null)\"\n",
                    "rendered": {
                      "text": "\t\tfi\n\t\t;;\n\tslot)\n\t\tif echo \"$VDEV_ENC_SYSFS_PATH\" | grep -q '/sys/bus/pci/slots' ; then\n\t\t\tval=\"$(basename \"\"\"$VDEV_ENC_SYSFS_PATH\"\"\")\"\n\t\telse\n\t\t\tval=\"$(cat \"\"\"$VDEV_ENC_SYSFS_PATH/slot\"\"\" 2>/dev/null)\"\n",
                      "markdown": "`\t\tfi\n\t\t;;\n\tslot)\n\t\tif echo \"$VDEV_ENC_SYSFS_PATH\" | grep -q '/sys/bus/pci/slots' ; then\n\t\t\tval=\"$(basename \"\"\"$VDEV_ENC_SYSFS_PATH\"\"\")\"\n\t\telse\n\t\t\tval=\"$(cat \"\"\"$VDEV_ENC_SYSFS_PATH/slot\"\"\" 2>/dev/null)\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/locate_led"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 34,
                  "endLine": 36,
                  "endColumn": 40,
                  "snippet": {
                    "text": "\tval=\"\"\n\tcase $i in\n\tenc)\n\t\tif echo \"$VDEV_ENC_SYSFS_PATH\" | grep -q '/sys/bus/pci/slots' ; then\n\t\t\tval=\"$VDEV_ENC_SYSFS_PATH\"\n\t\telse\n\t\t\tval=\"$(ls \"\"\"$VDEV_ENC_SYSFS_PATH/../../\"\"\" 2>/dev/null)\"\n",
                    "rendered": {
                      "text": "\tval=\"\"\n\tcase $i in\n\tenc)\n\t\tif echo \"$VDEV_ENC_SYSFS_PATH\" | grep -q '/sys/bus/pci/slots' ; then\n\t\t\tval=\"$VDEV_ENC_SYSFS_PATH\"\n\t\telse\n\t\t\tval=\"$(ls \"\"\"$VDEV_ENC_SYSFS_PATH/../../\"\"\" 2>/dev/null)\"\n",
                      "markdown": "`\tval=\"\"\n\tcase $i in\n\tenc)\n\t\tif echo \"$VDEV_ENC_SYSFS_PATH\" | grep -q '/sys/bus/pci/slots' ; then\n\t\t\tval=\"$VDEV_ENC_SYSFS_PATH\"\n\t\telse\n\t\t\tval=\"$(ls \"\"\"$VDEV_ENC_SYSFS_PATH/../../\"\"\" 2>/dev/null)\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/locate_led"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 49,
                  "endLine": 16,
                  "endColumn": 54,
                  "snippet": {
                    "text": "\nscript=\"${0##*/}\"\nif [ \"$1\" = \"-h\" ] ; then\n\techo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n\texit\nfi\n\n",
                    "rendered": {
                      "text": "\nscript=\"${0##*/}\"\nif [ \"$1\" = \"-h\" ] ; then\n\techo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n\texit\nfi\n\n",
                      "markdown": "`\nscript=\"${0##*/}\"\nif [ \"$1\" = \"-h\" ] ; then\n\techo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n\texit\nfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/locate_led"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 18,
                  "endLine": 16,
                  "endColumn": 24,
                  "snippet": {
                    "text": "\nscript=\"${0##*/}\"\nif [ \"$1\" = \"-h\" ] ; then\n\techo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n\texit\nfi\n\n",
                    "rendered": {
                      "text": "\nscript=\"${0##*/}\"\nif [ \"$1\" = \"-h\" ] ; then\n\techo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n\texit\nfi\n\n",
                      "markdown": "`\nscript=\"${0##*/}\"\nif [ \"$1\" = \"-h\" ] ; then\n\techo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n\texit\nfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/label"
                },
                "region": {
                  "startLine": 88,
                  "startColumn": 21,
                  "endLine": 88,
                  "endColumn": 26,
                  "snippet": {
                    "text": "\tval=\"\"\n\tif val=$(eval \"lsblk -dl -n -o $i $somepath 2>/dev/null\") ; then\n\t\t# Remove leading/trailing whitespace from value\n\t\tval=$(echo \"$val\" | sed -e 's/^[[:space:]]*//' \\\n\t\t     -e 's/[[:space:]]*$//')\n\tfi\n\techo \"$i=$val\"\n",
                    "rendered": {
                      "text": "\tval=\"\"\n\tif val=$(eval \"lsblk -dl -n -o $i $somepath 2>/dev/null\") ; then\n\t\t# Remove leading/trailing whitespace from value\n\t\tval=$(echo \"$val\" | sed -e 's/^[[:space:]]*//' \\\n\t\t     -e 's/[[:space:]]*$//')\n\tfi\n\techo \"$i=$val\"\n",
                      "markdown": "`\tval=\"\"\n\tif val=$(eval \"lsblk -dl -n -o $i $somepath 2>/dev/null\") ; then\n\t\t# Remove leading/trailing whitespace from value\n\t\tval=$(echo \"$val\" | sed -e 's/^[[:space:]]*//' \\\n\t\t     -e 's/[[:space:]]*$//')\n\tfi\n\techo \"$i=$val\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/label"
                },
                "region": {
                  "startLine": 79,
                  "startColumn": 44,
                  "endLine": 79,
                  "endColumn": 49,
                  "snippet": {
                    "text": "\t# Special case: Looking up the size of a file-based vdev can't\n\t# be done with lsblk.\n\tif [ \"$i\" = \"size\" ] && [ -f \"$somepath\" ] ; then\n\t\tsize=$(du -h --apparent-size \"$somepath\" | cut -f 1)\n\t\techo \"size=$size\"\n\t\tcontinue\n\tfi\n",
                    "rendered": {
                      "text": "\t# Special case: Looking up the size of a file-based vdev can't\n\t# be done with lsblk.\n\tif [ \"$i\" = \"size\" ] && [ -f \"$somepath\" ] ; then\n\t\tsize=$(du -h --apparent-size \"$somepath\" | cut -f 1)\n\t\techo \"size=$size\"\n\t\tcontinue\n\tfi\n",
                      "markdown": "`\t# Special case: Looking up the size of a file-based vdev can't\n\t# be done with lsblk.\n\tif [ \"$i\" = \"size\" ] && [ -f \"$somepath\" ] ; then\n\t\tsize=$(du -h --apparent-size \"$somepath\" | cut -f 1)\n\t\techo \"size=$size\"\n\t\tcontinue\n\tfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/label"
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 56,
                  "endLine": 54,
                  "endColumn": 61,
                  "snippet": {
                    "text": "script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n",
                    "rendered": {
                      "text": "script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n",
                      "markdown": "`script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/label"
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 25,
                  "endLine": 54,
                  "endColumn": 31,
                  "snippet": {
                    "text": "script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n",
                    "rendered": {
                      "text": "script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n",
                      "markdown": "`script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/label"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 8,
                  "endLine": 40,
                  "endColumn": 16,
                  "snippet": {
                    "text": "#    DISC-MAX  discard max bytes\n#   DISC-ZERO  discard zeroes data\n#\n# If the script is run as just 'lsblk' then print out disk size, vendor,\n# and model number.\n\n\n",
                    "rendered": {
                      "text": "#    DISC-MAX  discard max bytes\n#   DISC-ZERO  discard zeroes data\n#\n# If the script is run as just 'lsblk' then print out disk size, vendor,\n# and model number.\n\n\n",
                      "markdown": "`#    DISC-MAX  discard max bytes\n#   DISC-ZERO  discard zeroes data\n#\n# If the script is run as just 'lsblk' then print out disk size, vendor,\n# and model number.\n\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/label"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 21,
                  "endLine": 25,
                  "endColumn": 27,
                  "snippet": {
                    "text": "#       STATE  state of the device\n#       OWNER  user name\n#       GROUP  group name\n#        MODE  device node permissions\n#   ALIGNMENT  alignment offset\n#      MIN-IO  minimum I/O size\n#      OPT-IO  optimal I/O size\n",
                    "rendered": {
                      "text": "#       STATE  state of the device\n#       OWNER  user name\n#       GROUP  group name\n#        MODE  device node permissions\n#   ALIGNMENT  alignment offset\n#      MIN-IO  minimum I/O size\n#      OPT-IO  optimal I/O size\n",
                      "markdown": "`#       STATE  state of the device\n#       OWNER  user name\n#       GROUP  group name\n#        MODE  device node permissions\n#   ALIGNMENT  alignment offset\n#      MIN-IO  minimum I/O size\n#      OPT-IO  optimal I/O size\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/label"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 46,
                  "endLine": 5,
                  "endColumn": 54,
                  "snippet": {
                    "text": "#\n# Print some common lsblk values\n#\n# Any (lowercased) name symlinked to the lsblk script will be passed to lsblk\n# as one of its --output names.  Here's a partial list of --output names\n# from the lsblk binary:\n#\n",
                    "rendered": {
                      "text": "#\n# Print some common lsblk values\n#\n# Any (lowercased) name symlinked to the lsblk script will be passed to lsblk\n# as one of its --output names.  Here's a partial list of --output names\n# from the lsblk binary:\n#\n",
                      "markdown": "`#\n# Print some common lsblk values\n#\n# Any (lowercased) name symlinked to the lsblk script will be passed to lsblk\n# as one of its --output names.  Here's a partial list of --output names\n# from the lsblk binary:\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/iostat-1s"
                },
                "region": {
                  "startLine": 84,
                  "startColumn": 21,
                  "endLine": 84,
                  "endColumn": 26,
                  "snippet": {
                    "text": "\tfi\n\n\t# Get i'th value\n\tval=$(echo \"$vals\" | cut -f \"$i\")\n\techo \"$col=$val\"\ndone\n",
                    "rendered": {
                      "text": "\tfi\n\n\t# Get i'th value\n\tval=$(echo \"$vals\" | cut -f \"$i\")\n\techo \"$col=$val\"\ndone\n",
                      "markdown": "`\tfi\n\n\t# Get i'th value\n\tval=$(echo \"$vals\" | cut -f \"$i\")\n\techo \"$col=$val\"\ndone\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/iostat-1s"
                },
                "region": {
                  "startLine": 73,
                  "startColumn": 20,
                  "endLine": 73,
                  "endColumn": 26,
                  "snippet": {
                    "text": "cols=$(echo \"$out\" | head -n 1)\n\n# Get the values and tab separate them to make them cut-able.\nvals=$(echo \"$out\" | tail -n 1 | tr -s '[:space:]' '\\t')\n\ni=0\nfor col in $cols ; do\n",
                    "rendered": {
                      "text": "cols=$(echo \"$out\" | head -n 1)\n\n# Get the values and tab separate them to make them cut-able.\nvals=$(echo \"$out\" | tail -n 1 | tr -s '[:space:]' '\\t')\n\ni=0\nfor col in $cols ; do\n",
                      "markdown": "`cols=$(echo \"$out\" | head -n 1)\n\n# Get the values and tab separate them to make them cut-able.\nvals=$(echo \"$out\" | tail -n 1 | tr -s '[:space:]' '\\t')\n\ni=0\nfor col in $cols ; do\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/iostat-1s"
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 20,
                  "endLine": 70,
                  "endColumn": 26,
                  "snippet": {
                    "text": "#\n\n# Get the column names\ncols=$(echo \"$out\" | head -n 1)\n\n# Get the values and tab separate them to make them cut-able.\nvals=$(echo \"$out\" | tail -n 1 | tr -s '[:space:]' '\\t')\n",
                    "rendered": {
                      "text": "#\n\n# Get the column names\ncols=$(echo \"$out\" | head -n 1)\n\n# Get the values and tab separate them to make them cut-able.\nvals=$(echo \"$out\" | tail -n 1 | tr -s '[:space:]' '\\t')\n",
                      "markdown": "`#\n\n# Get the column names\ncols=$(echo \"$out\" | head -n 1)\n\n# Get the values and tab separate them to make them cut-able.\nvals=$(echo \"$out\" | tail -n 1 | tr -s '[:space:]' '\\t')\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/iostat-1s"
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 30,
                  "endLine": 54,
                  "endColumn": 36,
                  "snippet": {
                    "text": "\t\t${brief:+\"-y\"} \\\n\t\t${interval:+\"$interval\"} \\\n\t\t${interval:+\"1\"} \\\n\t\t\"$somepath\" | grep -v '^$' | tail -n 2)\nfi\n\n\n",
                    "rendered": {
                      "text": "\t\t${brief:+\"-y\"} \\\n\t\t${interval:+\"$interval\"} \\\n\t\t${interval:+\"1\"} \\\n\t\t\"$somepath\" | grep -v '^$' | tail -n 2)\nfi\n\n\n",
                      "markdown": "`\t\t${brief:+\"-y\"} \\\n\t\t${interval:+\"$interval\"} \\\n\t\t${interval:+\"1\"} \\\n\t\t\"$somepath\" | grep -v '^$' | tail -n 2)\nfi\n\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/iostat-1s"
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 15,
                  "endLine": 54,
                  "endColumn": 21,
                  "snippet": {
                    "text": "\t\t${brief:+\"-y\"} \\\n\t\t${interval:+\"$interval\"} \\\n\t\t${interval:+\"1\"} \\\n\t\t\"$somepath\" | grep -v '^$' | tail -n 2)\nfi\n\n\n",
                    "rendered": {
                      "text": "\t\t${brief:+\"-y\"} \\\n\t\t${interval:+\"$interval\"} \\\n\t\t${interval:+\"1\"} \\\n\t\t\"$somepath\" | grep -v '^$' | tail -n 2)\nfi\n\n\n",
                      "markdown": "`\t\t${brief:+\"-y\"} \\\n\t\t${interval:+\"$interval\"} \\\n\t\t${interval:+\"1\"} \\\n\t\t\"$somepath\" | grep -v '^$' | tail -n 2)\nfi\n\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/iostat-1s"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 15,
                  "endLine": 48,
                  "endColumn": 21,
                  "snippet": {
                    "text": "\tout=$(iostat -dKx \\\n\t\t${interval:+\"-w $interval\"} \\\n\t\t${interval:+\"-c 1\"} \\\n\t\t\"$somepath\" | tail -n 2)\nelse\n\tout=$(iostat -kx \\\n\t\t${brief:+\"-y\"} \\\n",
                    "rendered": {
                      "text": "\tout=$(iostat -dKx \\\n\t\t${interval:+\"-w $interval\"} \\\n\t\t${interval:+\"-c 1\"} \\\n\t\t\"$somepath\" | tail -n 2)\nelse\n\tout=$(iostat -kx \\\n\t\t${brief:+\"-y\"} \\\n",
                      "markdown": "`\tout=$(iostat -dKx \\\n\t\t${interval:+\"-w $interval\"} \\\n\t\t${interval:+\"-c 1\"} \\\n\t\t\"$somepath\" | tail -n 2)\nelse\n\tout=$(iostat -kx \\\n\t\t${brief:+\"-y\"} \\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/iostat-1s"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 49,
                  "endLine": 14,
                  "endColumn": 54,
                  "snippet": {
                    "text": "\nscript=\"${0##*/}\"\nif [ \"$1\" = \"-h\" ] ; then\n\techo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n\texit\nfi\n\n",
                    "rendered": {
                      "text": "\nscript=\"${0##*/}\"\nif [ \"$1\" = \"-h\" ] ; then\n\techo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n\texit\nfi\n\n",
                      "markdown": "`\nscript=\"${0##*/}\"\nif [ \"$1\" = \"-h\" ] ; then\n\techo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n\texit\nfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/iostat-1s"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 18,
                  "endLine": 14,
                  "endColumn": 24,
                  "snippet": {
                    "text": "\nscript=\"${0##*/}\"\nif [ \"$1\" = \"-h\" ] ; then\n\techo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n\texit\nfi\n\n",
                    "rendered": {
                      "text": "\nscript=\"${0##*/}\"\nif [ \"$1\" = \"-h\" ] ; then\n\techo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n\texit\nfi\n\n",
                      "markdown": "`\nscript=\"${0##*/}\"\nif [ \"$1\" = \"-h\" ] ; then\n\techo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n\texit\nfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/iostat-10s"
                },
                "region": {
                  "startLine": 84,
                  "startColumn": 21,
                  "endLine": 84,
                  "endColumn": 26,
                  "snippet": {
                    "text": "\tfi\n\n\t# Get i'th value\n\tval=$(echo \"$vals\" | cut -f \"$i\")\n\techo \"$col=$val\"\ndone\n",
                    "rendered": {
                      "text": "\tfi\n\n\t# Get i'th value\n\tval=$(echo \"$vals\" | cut -f \"$i\")\n\techo \"$col=$val\"\ndone\n",
                      "markdown": "`\tfi\n\n\t# Get i'th value\n\tval=$(echo \"$vals\" | cut -f \"$i\")\n\techo \"$col=$val\"\ndone\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/iostat-10s"
                },
                "region": {
                  "startLine": 73,
                  "startColumn": 20,
                  "endLine": 73,
                  "endColumn": 26,
                  "snippet": {
                    "text": "cols=$(echo \"$out\" | head -n 1)\n\n# Get the values and tab separate them to make them cut-able.\nvals=$(echo \"$out\" | tail -n 1 | tr -s '[:space:]' '\\t')\n\ni=0\nfor col in $cols ; do\n",
                    "rendered": {
                      "text": "cols=$(echo \"$out\" | head -n 1)\n\n# Get the values and tab separate them to make them cut-able.\nvals=$(echo \"$out\" | tail -n 1 | tr -s '[:space:]' '\\t')\n\ni=0\nfor col in $cols ; do\n",
                      "markdown": "`cols=$(echo \"$out\" | head -n 1)\n\n# Get the values and tab separate them to make them cut-able.\nvals=$(echo \"$out\" | tail -n 1 | tr -s '[:space:]' '\\t')\n\ni=0\nfor col in $cols ; do\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/iostat-10s"
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 20,
                  "endLine": 70,
                  "endColumn": 26,
                  "snippet": {
                    "text": "#\n\n# Get the column names\ncols=$(echo \"$out\" | head -n 1)\n\n# Get the values and tab separate them to make them cut-able.\nvals=$(echo \"$out\" | tail -n 1 | tr -s '[:space:]' '\\t')\n",
                    "rendered": {
                      "text": "#\n\n# Get the column names\ncols=$(echo \"$out\" | head -n 1)\n\n# Get the values and tab separate them to make them cut-able.\nvals=$(echo \"$out\" | tail -n 1 | tr -s '[:space:]' '\\t')\n",
                      "markdown": "`#\n\n# Get the column names\ncols=$(echo \"$out\" | head -n 1)\n\n# Get the values and tab separate them to make them cut-able.\nvals=$(echo \"$out\" | tail -n 1 | tr -s '[:space:]' '\\t')\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/iostat-10s"
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 30,
                  "endLine": 54,
                  "endColumn": 36,
                  "snippet": {
                    "text": "\t\t${brief:+\"-y\"} \\\n\t\t${interval:+\"$interval\"} \\\n\t\t${interval:+\"1\"} \\\n\t\t\"$somepath\" | grep -v '^$' | tail -n 2)\nfi\n\n\n",
                    "rendered": {
                      "text": "\t\t${brief:+\"-y\"} \\\n\t\t${interval:+\"$interval\"} \\\n\t\t${interval:+\"1\"} \\\n\t\t\"$somepath\" | grep -v '^$' | tail -n 2)\nfi\n\n\n",
                      "markdown": "`\t\t${brief:+\"-y\"} \\\n\t\t${interval:+\"$interval\"} \\\n\t\t${interval:+\"1\"} \\\n\t\t\"$somepath\" | grep -v '^$' | tail -n 2)\nfi\n\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/iostat-10s"
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 15,
                  "endLine": 54,
                  "endColumn": 21,
                  "snippet": {
                    "text": "\t\t${brief:+\"-y\"} \\\n\t\t${interval:+\"$interval\"} \\\n\t\t${interval:+\"1\"} \\\n\t\t\"$somepath\" | grep -v '^$' | tail -n 2)\nfi\n\n\n",
                    "rendered": {
                      "text": "\t\t${brief:+\"-y\"} \\\n\t\t${interval:+\"$interval\"} \\\n\t\t${interval:+\"1\"} \\\n\t\t\"$somepath\" | grep -v '^$' | tail -n 2)\nfi\n\n\n",
                      "markdown": "`\t\t${brief:+\"-y\"} \\\n\t\t${interval:+\"$interval\"} \\\n\t\t${interval:+\"1\"} \\\n\t\t\"$somepath\" | grep -v '^$' | tail -n 2)\nfi\n\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/iostat-10s"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 15,
                  "endLine": 48,
                  "endColumn": 21,
                  "snippet": {
                    "text": "\tout=$(iostat -dKx \\\n\t\t${interval:+\"-w $interval\"} \\\n\t\t${interval:+\"-c 1\"} \\\n\t\t\"$somepath\" | tail -n 2)\nelse\n\tout=$(iostat -kx \\\n\t\t${brief:+\"-y\"} \\\n",
                    "rendered": {
                      "text": "\tout=$(iostat -dKx \\\n\t\t${interval:+\"-w $interval\"} \\\n\t\t${interval:+\"-c 1\"} \\\n\t\t\"$somepath\" | tail -n 2)\nelse\n\tout=$(iostat -kx \\\n\t\t${brief:+\"-y\"} \\\n",
                      "markdown": "`\tout=$(iostat -dKx \\\n\t\t${interval:+\"-w $interval\"} \\\n\t\t${interval:+\"-c 1\"} \\\n\t\t\"$somepath\" | tail -n 2)\nelse\n\tout=$(iostat -kx \\\n\t\t${brief:+\"-y\"} \\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/iostat-10s"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 49,
                  "endLine": 14,
                  "endColumn": 54,
                  "snippet": {
                    "text": "\nscript=\"${0##*/}\"\nif [ \"$1\" = \"-h\" ] ; then\n\techo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n\texit\nfi\n\n",
                    "rendered": {
                      "text": "\nscript=\"${0##*/}\"\nif [ \"$1\" = \"-h\" ] ; then\n\techo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n\texit\nfi\n\n",
                      "markdown": "`\nscript=\"${0##*/}\"\nif [ \"$1\" = \"-h\" ] ; then\n\techo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n\texit\nfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/iostat-10s"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 18,
                  "endLine": 14,
                  "endColumn": 24,
                  "snippet": {
                    "text": "\nscript=\"${0##*/}\"\nif [ \"$1\" = \"-h\" ] ; then\n\techo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n\texit\nfi\n\n",
                    "rendered": {
                      "text": "\nscript=\"${0##*/}\"\nif [ \"$1\" = \"-h\" ] ; then\n\techo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n\texit\nfi\n\n",
                      "markdown": "`\nscript=\"${0##*/}\"\nif [ \"$1\" = \"-h\" ] ; then\n\techo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n\texit\nfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/lib/dracut/modules.d/90zfs/zfs-lib.sh"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 92,
                  "endLine": 55,
                  "endColumn": 96,
                  "snippet": {
                    "text": "\n                case \"$mountpoint\" in\n                    /etc|/bin|/lib|/lib??|/libx32|/usr)\n                        # If these aren't mounted we may not be able to get to the real init at all, or pollute the dataset holding the rootfs\n                        \"${exec}\" \"${dataset}\" \"${mountpoint}\" || _ret=$?\n                        ;;\n                    *)\n",
                    "rendered": {
                      "text": "\n                case \"$mountpoint\" in\n                    /etc|/bin|/lib|/lib??|/libx32|/usr)\n                        # If these aren't mounted we may not be able to get to the real init at all, or pollute the dataset holding the rootfs\n                        \"${exec}\" \"${dataset}\" \"${mountpoint}\" || _ret=$?\n                        ;;\n                    *)\n",
                      "markdown": "`\n                case \"$mountpoint\" in\n                    /etc|/bin|/lib|/lib??|/libx32|/usr)\n                        # If these aren't mounted we may not be able to get to the real init at all, or pollute the dataset holding the rootfs\n                        \"${exec}\" \"${dataset}\" \"${mountpoint}\" || _ret=$?\n                        ;;\n                    *)\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/lib/dracut/modules.d/90zfs/zfs-lib.sh"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 7,
                  "endLine": 30,
                  "endColumn": 14,
                  "snippet": {
                    "text": "    if [ \"${mountpoint}\" = \"legacy\" ] ; then\n        mount -t zfs \"${dataset}\" \"${NEWROOT}\" || ret=$?\n    else\n        mount -o zfsutil -t zfs \"${dataset}\" \"${NEWROOT}\" || ret=$?\n\n        if [ \"$ret\" = \"0\" ]; then\n            for_relevant_root_children \"${dataset}\" _mount_dataset_cb || ret=$?\n",
                    "rendered": {
                      "text": "    if [ \"${mountpoint}\" = \"legacy\" ] ; then\n        mount -t zfs \"${dataset}\" \"${NEWROOT}\" || ret=$?\n    else\n        mount -o zfsutil -t zfs \"${dataset}\" \"${NEWROOT}\" || ret=$?\n\n        if [ \"$ret\" = \"0\" ]; then\n            for_relevant_root_children \"${dataset}\" _mount_dataset_cb || ret=$?\n",
                      "markdown": "`    if [ \"${mountpoint}\" = \"legacy\" ] ; then\n        mount -t zfs \"${dataset}\" \"${NEWROOT}\" || ret=$?\n    else\n        mount -o zfsutil -t zfs \"${dataset}\" \"${NEWROOT}\" || ret=$?\n\n        if [ \"$ret\" = \"0\" ]; then\n            for_relevant_root_children \"${dataset}\" _mount_dataset_cb || ret=$?\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/lib/dracut/modules.d/90zfs/zfs-lib.sh"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 7,
                  "endLine": 28,
                  "endColumn": 14,
                  "snippet": {
                    "text": "\n    # We need zfsutil for non-legacy mounts and not for legacy mounts.\n    if [ \"${mountpoint}\" = \"legacy\" ] ; then\n        mount -t zfs \"${dataset}\" \"${NEWROOT}\" || ret=$?\n    else\n        mount -o zfsutil -t zfs \"${dataset}\" \"${NEWROOT}\" || ret=$?\n\n",
                    "rendered": {
                      "text": "\n    # We need zfsutil for non-legacy mounts and not for legacy mounts.\n    if [ \"${mountpoint}\" = \"legacy\" ] ; then\n        mount -t zfs \"${dataset}\" \"${NEWROOT}\" || ret=$?\n    else\n        mount -o zfsutil -t zfs \"${dataset}\" \"${NEWROOT}\" || ret=$?\n\n",
                      "markdown": "`\n    # We need zfsutil for non-legacy mounts and not for legacy mounts.\n    if [ \"${mountpoint}\" = \"legacy\" ] ; then\n        mount -t zfs \"${dataset}\" \"${NEWROOT}\" || ret=$?\n    else\n        mount -o zfsutil -t zfs \"${dataset}\" \"${NEWROOT}\" || ret=$?\n\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/lib/dracut/modules.d/90zfs/zfs-lib.sh"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 3,
                  "endLine": 16,
                  "endColumn": 10,
                  "snippet": {
                    "text": "\n_mount_dataset_cb() {\n    # shellcheck disable=SC2154\n    mount -o zfsutil -t zfs \"${1}\" \"${NEWROOT}${2}\"\n}\n\n# mount_dataset DATASET\n",
                    "rendered": {
                      "text": "\n_mount_dataset_cb() {\n    # shellcheck disable=SC2154\n    mount -o zfsutil -t zfs \"${1}\" \"${NEWROOT}${2}\"\n}\n\n# mount_dataset DATASET\n",
                      "markdown": "`\n_mount_dataset_cb() {\n    # shellcheck disable=SC2154\n    mount -o zfsutil -t zfs \"${1}\" \"${NEWROOT}${2}\"\n}\n\n# mount_dataset DATASET\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/lib/dracut/modules.d/90zfs/zfs-generator.sh"
                },
                "region": {
                  "startLine": 3,
                  "endLine": 4,
                  "endColumn": 5,
                  "snippet": {
                    "text": "#!/bin/sh\n# shellcheck disable=SC2016,SC1004,SC2154\n\ngrep -wq debug /proc/cmdline && debug=1\n[ -n \"$debug\" ] && echo \"zfs-generator: starting\" >> /dev/kmsg\n\nGENERATOR_DIR=\"$1\"\n",
                    "rendered": {
                      "text": "#!/bin/sh\n# shellcheck disable=SC2016,SC1004,SC2154\n\ngrep -wq debug /proc/cmdline && debug=1\n[ -n \"$debug\" ] && echo \"zfs-generator: starting\" >> /dev/kmsg\n\nGENERATOR_DIR=\"$1\"\n",
                      "markdown": "`#!/bin/sh\n# shellcheck disable=SC2016,SC1004,SC2154\n\ngrep -wq debug /proc/cmdline && debug=1\n[ -n \"$debug\" ] && echo \"zfs-generator: starting\" >> /dev/kmsg\n\nGENERATOR_DIR=\"$1\"\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/lib/dracut/modules.d/90zfs/zfs-env-bootfs.service"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 8,
                  "endLine": 21,
                  "endColumn": 19,
                  "snippet": {
                    "text": "            ,,) rootflags=zfsutil ;;                                                           \\\n            *)  rootflags=\"zfsutil,$rootflags\" ;;                                              \\\n        esac;                                                                                  \\\n    exec systemctl set-environment BOOTFS=\"$root\" BOOTFSFLAGS=\"$rootflags\"'\n\n[Install]\nWantedBy=zfs-import.target\n",
                    "rendered": {
                      "text": "            ,,) rootflags=zfsutil ;;                                                           \\\n            *)  rootflags=\"zfsutil,$rootflags\" ;;                                              \\\n        esac;                                                                                  \\\n    exec systemctl set-environment BOOTFS=\"$root\" BOOTFSFLAGS=\"$rootflags\"'\n\n[Install]\nWantedBy=zfs-import.target\n",
                      "markdown": "`            ,,) rootflags=zfsutil ;;                                                           \\\n            *)  rootflags=\"zfsutil,$rootflags\" ;;                                              \\\n        esac;                                                                                  \\\n    exec systemctl set-environment BOOTFS=\"$root\" BOOTFSFLAGS=\"$rootflags\"'\n\n[Install]\nWantedBy=zfs-import.target\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/lib/dracut/modules.d/90zfs/zfs-env-bootfs.service"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 75,
                  "endLine": 13,
                  "endColumn": 81,
                  "snippet": {
                    "text": "                             \\\n    . /lib/dracut-zfs-lib.sh;                                                                  \\\n    decode_root_args || exit 0;                                                                \\\n    [ \"$root\" = \"zfs:AUTO\" ] && root=\"$(/usr/sbin/zpool list -H -o bootfs | grep -m1 -vFx -)\"; \\\n    rootflags=\"$(getarg rootflags=)\";                                                          \\\n    [ \"$(/usr/sbin/zfs get -H -o value mountpoint \"$root\")\" = legacy ] ||                      \\\n        case \",$rootflags,\" in                                                            ",
                    "rendered": {
                      "text": "                             \\\n    . /lib/dracut-zfs-lib.sh;                                                                  \\\n    decode_root_args || exit 0;                                                                \\\n    [ \"$root\" = \"zfs:AUTO\" ] && root=\"$(/usr/sbin/zpool list -H -o bootfs | grep -m1 -vFx -)\"; \\\n    rootflags=\"$(getarg rootflags=)\";                                                          \\\n    [ \"$(/usr/sbin/zfs get -H -o value mountpoint \"$root\")\" = legacy ] ||                      \\\n        case \",$rootflags,\" in                                                            ",
                      "markdown": "`                             \\\n    . /lib/dracut-zfs-lib.sh;                                                                  \\\n    decode_root_args || exit 0;                                                                \\\n    [ \"$root\" = \"zfs:AUTO\" ] && root=\"$(/usr/sbin/zpool list -H -o bootfs | grep -m1 -vFx -)\"; \\\n    rootflags=\"$(getarg rootflags=)\";                                                          \\\n    [ \"$(/usr/sbin/zfs get -H -o value mountpoint \"$root\")\" = legacy ] ||                      \\\n        case \",$rootflags,\" in                                                            `"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/etc/init.d/zfs-zed"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 24,
                  "endLine": 29,
                  "snippet": {
                    "text": "# This script is based on debian/zfsutils.zfs.init from the\n# Debian GNU/kFreeBSD zfsutils 8.1-3 package, written by Aurelien Jarno.\n\n# Source the common init script\n. /etc/zfs/zfs-functions\n\nZED_NAME=\"zed\"\nZED_PIDFILE=\"/var/run/$ZED_NAME.pid\"\n",
                    "rendered": {
                      "text": "# This script is based on debian/zfsutils.zfs.init from the\n# Debian GNU/kFreeBSD zfsutils 8.1-3 package, written by Aurelien Jarno.\n\n# Source the common init script\n. /etc/zfs/zfs-functions\n\nZED_NAME=\"zed\"\nZED_PIDFILE=\"/var/run/$ZED_NAME.pid\"\n",
                      "markdown": "`# This script is based on debian/zfsutils.zfs.init from the\n# Debian GNU/kFreeBSD zfsutils 8.1-3 package, written by Aurelien Jarno.\n\n# Source the common init script\n. /etc/zfs/zfs-functions\n\nZED_NAME=\"zed\"\nZED_PIDFILE=\"/var/run/$ZED_NAME.pid\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/etc/init.d/zfs-zed"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 6,
                  "endLine": 25,
                  "endColumn": 14,
                  "snippet": {
                    "text": "#\n# Released under the 2-clause BSD license.\n#\n# This script is based on debian/zfsutils.zfs.init from the\n# Debian GNU/kFreeBSD zfsutils 8.1-3 package, written by Aurelien Jarno.\n\n# Source the common init script\n",
                    "rendered": {
                      "text": "#\n# Released under the 2-clause BSD license.\n#\n# This script is based on debian/zfsutils.zfs.init from the\n# Debian GNU/kFreeBSD zfsutils 8.1-3 package, written by Aurelien Jarno.\n\n# Source the common init script\n",
                      "markdown": "`#\n# Released under the 2-clause BSD license.\n#\n# This script is based on debian/zfsutils.zfs.init from the\n# Debian GNU/kFreeBSD zfsutils 8.1-3 package, written by Aurelien Jarno.\n\n# Source the common init script\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/etc/init.d/zfs-zed"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 20,
                  "endLine": 7,
                  "endColumn": 28,
                  "snippet": {
                    "text": "# zfs-zed\n#\n# chkconfig:    2345 29 99\n# description:  This script will start and stop the ZFS Event Daemon.\n# probe: true\n#\n### BEGIN INIT INFO\n",
                    "rendered": {
                      "text": "# zfs-zed\n#\n# chkconfig:    2345 29 99\n# description:  This script will start and stop the ZFS Event Daemon.\n# probe: true\n#\n### BEGIN INIT INFO\n",
                      "markdown": "`# zfs-zed\n#\n# chkconfig:    2345 29 99\n# description:  This script will start and stop the ZFS Event Daemon.\n# probe: true\n#\n### BEGIN INIT INFO\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/smart"
                },
                "region": {
                  "startLine": 244,
                  "startColumn": 47,
                  "endLine": 244,
                  "endColumn": 52,
                  "snippet": {
                    "text": "\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n\nif [ -n \"$without_vals\" ]; then\n",
                    "rendered": {
                      "text": "\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n\nif [ -n \"$without_vals\" ]; then\n",
                      "markdown": "`\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n\nif [ -n \"$without_vals\" ]; then\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/smart"
                },
                "region": {
                  "startLine": 242,
                  "startColumn": 29,
                  "endLine": 242,
                  "endColumn": 34,
                  "snippet": {
                    "text": "\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n",
                    "rendered": {
                      "text": "\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n",
                      "markdown": "`\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/smart"
                },
                "region": {
                  "startLine": 242,
                  "startColumn": 1,
                  "endLine": 242,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n",
                    "rendered": {
                      "text": "\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n",
                      "markdown": "`\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/smart"
                },
                "region": {
                  "startLine": 241,
                  "startColumn": 1,
                  "endLine": 241,
                  "endColumn": 7,
                  "snippet": {
                    "text": "if [ -n \"$with_vals\" ]; then\n\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\n",
                    "rendered": {
                      "text": "if [ -n \"$with_vals\" ]; then\n\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\n",
                      "markdown": "`if [ -n \"$with_vals\" ]; then\n\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/smart"
                },
                "region": {
                  "startLine": 237,
                  "startColumn": 25,
                  "endLine": 237,
                  "endColumn": 31,
                  "snippet": {
                    "text": "\tscripts=\"$script\"\nesac\n\nwith_vals=$(echo \"$out\" | grep -E \"$scripts\")\nif [ -n \"$with_vals\" ]; then\n\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n",
                    "rendered": {
                      "text": "\tscripts=\"$script\"\nesac\n\nwith_vals=$(echo \"$out\" | grep -E \"$scripts\")\nif [ -n \"$with_vals\" ]; then\n\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n",
                      "markdown": "`\tscripts=\"$script\"\nesac\n\nwith_vals=$(echo \"$out\" | grep -E \"$scripts\")\nif [ -n \"$with_vals\" ]; then\n\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/smart"
                },
                "region": {
                  "startLine": 199,
                  "startColumn": 36,
                  "endLine": 199,
                  "endColumn": 41,
                  "snippet": {
                    "text": "END {print \"type=\"type; ORS=\"\\n\"; print \"\"}\n');\nfi\ntype=$(echo \"$out\" | grep '^type=' | cut -d '=' -f 2)\n\n# If type is not set by now, either we don't have a block device\n# or smartctl failed. Either way, default to ATA and set $out to\n",
                    "rendered": {
                      "text": "END {print \"type=\"type; ORS=\"\\n\"; print \"\"}\n');\nfi\ntype=$(echo \"$out\" | grep '^type=' | cut -d '=' -f 2)\n\n# If type is not set by now, either we don't have a block device\n# or smartctl failed. Either way, default to ATA and set $out to\n",
                      "markdown": "`END {print \"type=\"type; ORS=\"\\n\"; print \"\"}\n');\nfi\ntype=$(echo \"$out\" | grep '^type=' | cut -d '=' -f 2)\n\n# If type is not set by now, either we don't have a block device\n# or smartctl failed. Either way, default to ATA and set $out to\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/smart"
                },
                "region": {
                  "startLine": 199,
                  "startColumn": 20,
                  "endLine": 199,
                  "endColumn": 26,
                  "snippet": {
                    "text": "END {print \"type=\"type; ORS=\"\\n\"; print \"\"}\n');\nfi\ntype=$(echo \"$out\" | grep '^type=' | cut -d '=' -f 2)\n\n# If type is not set by now, either we don't have a block device\n# or smartctl failed. Either way, default to ATA and set $out to\n",
                    "rendered": {
                      "text": "END {print \"type=\"type; ORS=\"\\n\"; print \"\"}\n');\nfi\ntype=$(echo \"$out\" | grep '^type=' | cut -d '=' -f 2)\n\n# If type is not set by now, either we don't have a block device\n# or smartctl failed. Either way, default to ATA and set $out to\n",
                      "markdown": "`END {print \"type=\"type; ORS=\"\\n\"; print \"\"}\n');\nfi\ntype=$(echo \"$out\" | grep '^type=' | cut -d '=' -f 2)\n\n# If type is not set by now, either we don't have a block device\n# or smartctl failed. Either way, default to ATA and set $out to\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/smart"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 24,
                  "endLine": 103,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\t# NVMe:\n\t#       SMART/Health Information (NVMe Log 0xnn, NSID 0xnn)\n\t#\n\tout=$(echo \"$raw_out\" | awk '\n# SAS specific\n/read:/{print \"rrd=\"$4\"\\nr_cor=\"$5\"\\nr_proc=\"$7\"\\nr_ucor=\"$8}\n/write:/{print \"rwr=\"$4\"\\nw_cor=\"$5\"\\nw_proc=\"$7\"\\nw_ucor=\"$8}\n",
                    "rendered": {
                      "text": "\t# NVMe:\n\t#       SMART/Health Information (NVMe Log 0xnn, NSID 0xnn)\n\t#\n\tout=$(echo \"$raw_out\" | awk '\n# SAS specific\n/read:/{print \"rrd=\"$4\"\\nr_cor=\"$5\"\\nr_proc=\"$7\"\\nr_ucor=\"$8}\n/write:/{print \"rwr=\"$4\"\\nw_cor=\"$5\"\\nw_proc=\"$7\"\\nw_ucor=\"$8}\n",
                      "markdown": "`\t# NVMe:\n\t#       SMART/Health Information (NVMe Log 0xnn, NSID 0xnn)\n\t#\n\tout=$(echo \"$raw_out\" | awk '\n# SAS specific\n/read:/{print \"rrd=\"$4\"\\nr_cor=\"$5\"\\nr_proc=\"$7\"\\nr_ucor=\"$8}\n/write:/{print \"rwr=\"$4\"\\nw_cor=\"$5\"\\nw_proc=\"$7\"\\nw_ucor=\"$8}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/smart"
                },
                "region": {
                  "startLine": 83,
                  "startColumn": 3,
                  "endLine": 83,
                  "endColumn": 8,
                  "snippet": {
                    "text": "\nif [ -b \"$somepath\" ] && PATH=\"/usr/sbin:$PATH\" command -v smartctl > /dev/null || [ -n \"$samples\" ] ; then\n\tif [ -n \"$samples\" ] ; then\n\t\t# cat a smartctl output text file instead of running smartctl\n\t\t# on a vdev (only used for developer testing).\n\t\tfile=$(get_filename_from_dir \"$samples\")\n\t\techo \"file=$file\"\n",
                    "rendered": {
                      "text": "\nif [ -b \"$somepath\" ] && PATH=\"/usr/sbin:$PATH\" command -v smartctl > /dev/null || [ -n \"$samples\" ] ; then\n\tif [ -n \"$samples\" ] ; then\n\t\t# cat a smartctl output text file instead of running smartctl\n\t\t# on a vdev (only used for developer testing).\n\t\tfile=$(get_filename_from_dir \"$samples\")\n\t\techo \"file=$file\"\n",
                      "markdown": "`\nif [ -b \"$somepath\" ] && PATH=\"/usr/sbin:$PATH\" command -v smartctl > /dev/null || [ -n \"$samples\" ] ; then\n\tif [ -n \"$samples\" ] ; then\n\t\t# cat a smartctl output text file instead of running smartctl\n\t\t# on a vdev (only used for developer testing).\n\t\tfile=$(get_filename_from_dir \"$samples\")\n\t\techo \"file=$file\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/smart"
                },
                "region": {
                  "startLine": 68,
                  "startColumn": 56,
                  "endLine": 68,
                  "endColumn": 61,
                  "snippet": {
                    "text": "script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n",
                    "rendered": {
                      "text": "script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n",
                      "markdown": "`script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/smart"
                },
                "region": {
                  "startLine": 68,
                  "startColumn": 25,
                  "endLine": 68,
                  "endColumn": 31,
                  "snippet": {
                    "text": "script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n",
                    "rendered": {
                      "text": "script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n",
                      "markdown": "`script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/smart"
                },
                "region": {
                  "startLine": 56,
                  "endLine": 56,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\tnum_files=$(find \"$dir\" -maxdepth 1 -type f | wc -l)\n\tmod=$((pid % num_files))\n\ti=0\n\tfind \"$dir\" -type f -printf '%f\\n' | while read -r file ; do\n\t\tif [ \"$mod\" = \"$i\" ] ; then\n\t\t\techo \"$file\"\n\t\t\tbreak\n",
                    "rendered": {
                      "text": "\tnum_files=$(find \"$dir\" -maxdepth 1 -type f | wc -l)\n\tmod=$((pid % num_files))\n\ti=0\n\tfind \"$dir\" -type f -printf '%f\\n' | while read -r file ; do\n\t\tif [ \"$mod\" = \"$i\" ] ; then\n\t\t\techo \"$file\"\n\t\t\tbreak\n",
                      "markdown": "`\tnum_files=$(find \"$dir\" -maxdepth 1 -type f | wc -l)\n\tmod=$((pid % num_files))\n\ti=0\n\tfind \"$dir\" -type f -printf '%f\\n' | while read -r file ; do\n\t\tif [ \"$mod\" = \"$i\" ] ; then\n\t\t\techo \"$file\"\n\t\t\tbreak\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/smart"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 38,
                  "endLine": 47,
                  "endColumn": 46,
                  "snippet": {
                    "text": "#\n# Look in directory DIR and return a filename from it.  The filename returned\n# is chosen quasi-sequentially (based off our PID).  This allows us to return\n# a different filename every time this script is invoked (which we do for each\n# vdev), without having to maintain state.\nget_filename_from_dir()\n{\n",
                    "rendered": {
                      "text": "#\n# Look in directory DIR and return a filename from it.  The filename returned\n# is chosen quasi-sequentially (based off our PID).  This allows us to return\n# a different filename every time this script is invoked (which we do for each\n# vdev), without having to maintain state.\nget_filename_from_dir()\n{\n",
                      "markdown": "`#\n# Look in directory DIR and return a filename from it.  The filename returned\n# is chosen quasi-sequentially (based off our PID).  This allows us to return\n# a different filename every time this script is invoked (which we do for each\n# vdev), without having to maintain state.\nget_filename_from_dir()\n{\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/smart"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 28,
                  "endLine": 47,
                  "endColumn": 34,
                  "snippet": {
                    "text": "#\n# Look in directory DIR and return a filename from it.  The filename returned\n# is chosen quasi-sequentially (based off our PID).  This allows us to return\n# a different filename every time this script is invoked (which we do for each\n# vdev), without having to maintain state.\nget_filename_from_dir()\n{\n",
                    "rendered": {
                      "text": "#\n# Look in directory DIR and return a filename from it.  The filename returned\n# is chosen quasi-sequentially (based off our PID).  This allows us to return\n# a different filename every time this script is invoked (which we do for each\n# vdev), without having to maintain state.\nget_filename_from_dir()\n{\n",
                      "markdown": "`#\n# Look in directory DIR and return a filename from it.  The filename returned\n# is chosen quasi-sequentially (based off our PID).  This allows us to return\n# a different filename every time this script is invoked (which we do for each\n# vdev), without having to maintain state.\nget_filename_from_dir()\n{\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/smart"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 27,
                  "endLine": 20,
                  "endColumn": 36,
                  "snippet": {
                    "text": "hours_on:\tShow number of hours drive powered on (all drives).\nrealloc:\tShow SMART reallocated sectors count (ATA).\nrep_ucor:\tShow SMART reported uncorrectable count (ATA).\ncmd_to:\t\tShow SMART command timeout count (ATA).\npend_sec:\tShow SMART current pending sector count (ATA).\noff_ucor:\tShow SMART offline uncorrectable errors (ATA).\nata_err:\tShow SMART ATA errors (ATA).\n",
                    "rendered": {
                      "text": "hours_on:\tShow number of hours drive powered on (all drives).\nrealloc:\tShow SMART reallocated sectors count (ATA).\nrep_ucor:\tShow SMART reported uncorrectable count (ATA).\ncmd_to:\t\tShow SMART command timeout count (ATA).\npend_sec:\tShow SMART current pending sector count (ATA).\noff_ucor:\tShow SMART offline uncorrectable errors (ATA).\nata_err:\tShow SMART ATA errors (ATA).\n",
                      "markdown": "`hours_on:\tShow number of hours drive powered on (all drives).\nrealloc:\tShow SMART reallocated sectors count (ATA).\nrep_ucor:\tShow SMART reported uncorrectable count (ATA).\ncmd_to:\t\tShow SMART command timeout count (ATA).\npend_sec:\tShow SMART current pending sector count (ATA).\noff_ucor:\tShow SMART offline uncorrectable errors (ATA).\nata_err:\tShow SMART ATA errors (ATA).\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/slot"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 34,
                  "endLine": 43,
                  "endColumn": 40,
                  "snippet": {
                    "text": "\t\tfi\n\t\t;;\n\tslot)\n\t\tif echo \"$VDEV_ENC_SYSFS_PATH\" | grep -q '/sys/bus/pci/slots' ; then\n\t\t\tval=\"$(basename \"\"\"$VDEV_ENC_SYSFS_PATH\"\"\")\"\n\t\telse\n\t\t\tval=\"$(cat \"\"\"$VDEV_ENC_SYSFS_PATH/slot\"\"\" 2>/dev/null)\"\n",
                    "rendered": {
                      "text": "\t\tfi\n\t\t;;\n\tslot)\n\t\tif echo \"$VDEV_ENC_SYSFS_PATH\" | grep -q '/sys/bus/pci/slots' ; then\n\t\t\tval=\"$(basename \"\"\"$VDEV_ENC_SYSFS_PATH\"\"\")\"\n\t\telse\n\t\t\tval=\"$(cat \"\"\"$VDEV_ENC_SYSFS_PATH/slot\"\"\" 2>/dev/null)\"\n",
                      "markdown": "`\t\tfi\n\t\t;;\n\tslot)\n\t\tif echo \"$VDEV_ENC_SYSFS_PATH\" | grep -q '/sys/bus/pci/slots' ; then\n\t\t\tval=\"$(basename \"\"\"$VDEV_ENC_SYSFS_PATH\"\"\")\"\n\t\telse\n\t\t\tval=\"$(cat \"\"\"$VDEV_ENC_SYSFS_PATH/slot\"\"\" 2>/dev/null)\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/slot"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 34,
                  "endLine": 36,
                  "endColumn": 40,
                  "snippet": {
                    "text": "\tval=\"\"\n\tcase $i in\n\tenc)\n\t\tif echo \"$VDEV_ENC_SYSFS_PATH\" | grep -q '/sys/bus/pci/slots' ; then\n\t\t\tval=\"$VDEV_ENC_SYSFS_PATH\"\n\t\telse\n\t\t\tval=\"$(ls \"\"\"$VDEV_ENC_SYSFS_PATH/../../\"\"\" 2>/dev/null)\"\n",
                    "rendered": {
                      "text": "\tval=\"\"\n\tcase $i in\n\tenc)\n\t\tif echo \"$VDEV_ENC_SYSFS_PATH\" | grep -q '/sys/bus/pci/slots' ; then\n\t\t\tval=\"$VDEV_ENC_SYSFS_PATH\"\n\t\telse\n\t\t\tval=\"$(ls \"\"\"$VDEV_ENC_SYSFS_PATH/../../\"\"\" 2>/dev/null)\"\n",
                      "markdown": "`\tval=\"\"\n\tcase $i in\n\tenc)\n\t\tif echo \"$VDEV_ENC_SYSFS_PATH\" | grep -q '/sys/bus/pci/slots' ; then\n\t\t\tval=\"$VDEV_ENC_SYSFS_PATH\"\n\t\telse\n\t\t\tval=\"$(ls \"\"\"$VDEV_ENC_SYSFS_PATH/../../\"\"\" 2>/dev/null)\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/slot"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 49,
                  "endLine": 16,
                  "endColumn": 54,
                  "snippet": {
                    "text": "\nscript=\"${0##*/}\"\nif [ \"$1\" = \"-h\" ] ; then\n\techo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n\texit\nfi\n\n",
                    "rendered": {
                      "text": "\nscript=\"${0##*/}\"\nif [ \"$1\" = \"-h\" ] ; then\n\techo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n\texit\nfi\n\n",
                      "markdown": "`\nscript=\"${0##*/}\"\nif [ \"$1\" = \"-h\" ] ; then\n\techo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n\texit\nfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/slot"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 18,
                  "endLine": 16,
                  "endColumn": 24,
                  "snippet": {
                    "text": "\nscript=\"${0##*/}\"\nif [ \"$1\" = \"-h\" ] ; then\n\techo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n\texit\nfi\n\n",
                    "rendered": {
                      "text": "\nscript=\"${0##*/}\"\nif [ \"$1\" = \"-h\" ] ; then\n\techo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n\texit\nfi\n\n",
                      "markdown": "`\nscript=\"${0##*/}\"\nif [ \"$1\" = \"-h\" ] ; then\n\techo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n\texit\nfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/size"
                },
                "region": {
                  "startLine": 88,
                  "startColumn": 21,
                  "endLine": 88,
                  "endColumn": 26,
                  "snippet": {
                    "text": "\tval=\"\"\n\tif val=$(eval \"lsblk -dl -n -o $i $somepath 2>/dev/null\") ; then\n\t\t# Remove leading/trailing whitespace from value\n\t\tval=$(echo \"$val\" | sed -e 's/^[[:space:]]*//' \\\n\t\t     -e 's/[[:space:]]*$//')\n\tfi\n\techo \"$i=$val\"\n",
                    "rendered": {
                      "text": "\tval=\"\"\n\tif val=$(eval \"lsblk -dl -n -o $i $somepath 2>/dev/null\") ; then\n\t\t# Remove leading/trailing whitespace from value\n\t\tval=$(echo \"$val\" | sed -e 's/^[[:space:]]*//' \\\n\t\t     -e 's/[[:space:]]*$//')\n\tfi\n\techo \"$i=$val\"\n",
                      "markdown": "`\tval=\"\"\n\tif val=$(eval \"lsblk -dl -n -o $i $somepath 2>/dev/null\") ; then\n\t\t# Remove leading/trailing whitespace from value\n\t\tval=$(echo \"$val\" | sed -e 's/^[[:space:]]*//' \\\n\t\t     -e 's/[[:space:]]*$//')\n\tfi\n\techo \"$i=$val\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/size"
                },
                "region": {
                  "startLine": 79,
                  "startColumn": 44,
                  "endLine": 79,
                  "endColumn": 49,
                  "snippet": {
                    "text": "\t# Special case: Looking up the size of a file-based vdev can't\n\t# be done with lsblk.\n\tif [ \"$i\" = \"size\" ] && [ -f \"$somepath\" ] ; then\n\t\tsize=$(du -h --apparent-size \"$somepath\" | cut -f 1)\n\t\techo \"size=$size\"\n\t\tcontinue\n\tfi\n",
                    "rendered": {
                      "text": "\t# Special case: Looking up the size of a file-based vdev can't\n\t# be done with lsblk.\n\tif [ \"$i\" = \"size\" ] && [ -f \"$somepath\" ] ; then\n\t\tsize=$(du -h --apparent-size \"$somepath\" | cut -f 1)\n\t\techo \"size=$size\"\n\t\tcontinue\n\tfi\n",
                      "markdown": "`\t# Special case: Looking up the size of a file-based vdev can't\n\t# be done with lsblk.\n\tif [ \"$i\" = \"size\" ] && [ -f \"$somepath\" ] ; then\n\t\tsize=$(du -h --apparent-size \"$somepath\" | cut -f 1)\n\t\techo \"size=$size\"\n\t\tcontinue\n\tfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/size"
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 56,
                  "endLine": 54,
                  "endColumn": 61,
                  "snippet": {
                    "text": "script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n",
                    "rendered": {
                      "text": "script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n",
                      "markdown": "`script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/size"
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 25,
                  "endLine": 54,
                  "endColumn": 31,
                  "snippet": {
                    "text": "script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n",
                    "rendered": {
                      "text": "script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n",
                      "markdown": "`script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/size"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 8,
                  "endLine": 40,
                  "endColumn": 16,
                  "snippet": {
                    "text": "#    DISC-MAX  discard max bytes\n#   DISC-ZERO  discard zeroes data\n#\n# If the script is run as just 'lsblk' then print out disk size, vendor,\n# and model number.\n\n\n",
                    "rendered": {
                      "text": "#    DISC-MAX  discard max bytes\n#   DISC-ZERO  discard zeroes data\n#\n# If the script is run as just 'lsblk' then print out disk size, vendor,\n# and model number.\n\n\n",
                      "markdown": "`#    DISC-MAX  discard max bytes\n#   DISC-ZERO  discard zeroes data\n#\n# If the script is run as just 'lsblk' then print out disk size, vendor,\n# and model number.\n\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/size"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 21,
                  "endLine": 25,
                  "endColumn": 27,
                  "snippet": {
                    "text": "#       STATE  state of the device\n#       OWNER  user name\n#       GROUP  group name\n#        MODE  device node permissions\n#   ALIGNMENT  alignment offset\n#      MIN-IO  minimum I/O size\n#      OPT-IO  optimal I/O size\n",
                    "rendered": {
                      "text": "#       STATE  state of the device\n#       OWNER  user name\n#       GROUP  group name\n#        MODE  device node permissions\n#   ALIGNMENT  alignment offset\n#      MIN-IO  minimum I/O size\n#      OPT-IO  optimal I/O size\n",
                      "markdown": "`#       STATE  state of the device\n#       OWNER  user name\n#       GROUP  group name\n#        MODE  device node permissions\n#   ALIGNMENT  alignment offset\n#      MIN-IO  minimum I/O size\n#      OPT-IO  optimal I/O size\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/size"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 46,
                  "endLine": 5,
                  "endColumn": 54,
                  "snippet": {
                    "text": "#\n# Print some common lsblk values\n#\n# Any (lowercased) name symlinked to the lsblk script will be passed to lsblk\n# as one of its --output names.  Here's a partial list of --output names\n# from the lsblk binary:\n#\n",
                    "rendered": {
                      "text": "#\n# Print some common lsblk values\n#\n# Any (lowercased) name symlinked to the lsblk script will be passed to lsblk\n# as one of its --output names.  Here's a partial list of --output names\n# from the lsblk binary:\n#\n",
                      "markdown": "`#\n# Print some common lsblk values\n#\n# Any (lowercased) name symlinked to the lsblk script will be passed to lsblk\n# as one of its --output names.  Here's a partial list of --output names\n# from the lsblk binary:\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/ses"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 34,
                  "endLine": 43,
                  "endColumn": 40,
                  "snippet": {
                    "text": "\t\tfi\n\t\t;;\n\tslot)\n\t\tif echo \"$VDEV_ENC_SYSFS_PATH\" | grep -q '/sys/bus/pci/slots' ; then\n\t\t\tval=\"$(basename \"\"\"$VDEV_ENC_SYSFS_PATH\"\"\")\"\n\t\telse\n\t\t\tval=\"$(cat \"\"\"$VDEV_ENC_SYSFS_PATH/slot\"\"\" 2>/dev/null)\"\n",
                    "rendered": {
                      "text": "\t\tfi\n\t\t;;\n\tslot)\n\t\tif echo \"$VDEV_ENC_SYSFS_PATH\" | grep -q '/sys/bus/pci/slots' ; then\n\t\t\tval=\"$(basename \"\"\"$VDEV_ENC_SYSFS_PATH\"\"\")\"\n\t\telse\n\t\t\tval=\"$(cat \"\"\"$VDEV_ENC_SYSFS_PATH/slot\"\"\" 2>/dev/null)\"\n",
                      "markdown": "`\t\tfi\n\t\t;;\n\tslot)\n\t\tif echo \"$VDEV_ENC_SYSFS_PATH\" | grep -q '/sys/bus/pci/slots' ; then\n\t\t\tval=\"$(basename \"\"\"$VDEV_ENC_SYSFS_PATH\"\"\")\"\n\t\telse\n\t\t\tval=\"$(cat \"\"\"$VDEV_ENC_SYSFS_PATH/slot\"\"\" 2>/dev/null)\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/ses"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 34,
                  "endLine": 36,
                  "endColumn": 40,
                  "snippet": {
                    "text": "\tval=\"\"\n\tcase $i in\n\tenc)\n\t\tif echo \"$VDEV_ENC_SYSFS_PATH\" | grep -q '/sys/bus/pci/slots' ; then\n\t\t\tval=\"$VDEV_ENC_SYSFS_PATH\"\n\t\telse\n\t\t\tval=\"$(ls \"\"\"$VDEV_ENC_SYSFS_PATH/../../\"\"\" 2>/dev/null)\"\n",
                    "rendered": {
                      "text": "\tval=\"\"\n\tcase $i in\n\tenc)\n\t\tif echo \"$VDEV_ENC_SYSFS_PATH\" | grep -q '/sys/bus/pci/slots' ; then\n\t\t\tval=\"$VDEV_ENC_SYSFS_PATH\"\n\t\telse\n\t\t\tval=\"$(ls \"\"\"$VDEV_ENC_SYSFS_PATH/../../\"\"\" 2>/dev/null)\"\n",
                      "markdown": "`\tval=\"\"\n\tcase $i in\n\tenc)\n\t\tif echo \"$VDEV_ENC_SYSFS_PATH\" | grep -q '/sys/bus/pci/slots' ; then\n\t\t\tval=\"$VDEV_ENC_SYSFS_PATH\"\n\t\telse\n\t\t\tval=\"$(ls \"\"\"$VDEV_ENC_SYSFS_PATH/../../\"\"\" 2>/dev/null)\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/ses"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 49,
                  "endLine": 16,
                  "endColumn": 54,
                  "snippet": {
                    "text": "\nscript=\"${0##*/}\"\nif [ \"$1\" = \"-h\" ] ; then\n\techo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n\texit\nfi\n\n",
                    "rendered": {
                      "text": "\nscript=\"${0##*/}\"\nif [ \"$1\" = \"-h\" ] ; then\n\techo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n\texit\nfi\n\n",
                      "markdown": "`\nscript=\"${0##*/}\"\nif [ \"$1\" = \"-h\" ] ; then\n\techo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n\texit\nfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/ses"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 18,
                  "endLine": 16,
                  "endColumn": 24,
                  "snippet": {
                    "text": "\nscript=\"${0##*/}\"\nif [ \"$1\" = \"-h\" ] ; then\n\techo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n\texit\nfi\n\n",
                    "rendered": {
                      "text": "\nscript=\"${0##*/}\"\nif [ \"$1\" = \"-h\" ] ; then\n\techo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n\texit\nfi\n\n",
                      "markdown": "`\nscript=\"${0##*/}\"\nif [ \"$1\" = \"-h\" ] ; then\n\techo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n\texit\nfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zed.d/statechange-notify.sh"
                },
                "region": {
                  "startLine": 60,
                  "startColumn": 21,
                  "endLine": 60,
                  "endColumn": 29,
                  "snippet": {
                    "text": "    echo \"    eid: ${ZEVENT_EID}\"\n    echo \"  class: ${ZEVENT_SUBCLASS}\"\n    echo \"  state: ${ZEVENT_VDEV_STATE_STR}\"\n    echo \"   host: $(hostname)\"\n    echo \"   time: ${ZEVENT_TIME_STRING}\"\n\n    [ -n \"${ZEVENT_VDEV_TYPE}\" ] && echo \"  vtype: ${ZEVENT_VDEV_TYPE}\"\n",
                    "rendered": {
                      "text": "    echo \"    eid: ${ZEVENT_EID}\"\n    echo \"  class: ${ZEVENT_SUBCLASS}\"\n    echo \"  state: ${ZEVENT_VDEV_STATE_STR}\"\n    echo \"   host: $(hostname)\"\n    echo \"   time: ${ZEVENT_TIME_STRING}\"\n\n    [ -n \"${ZEVENT_VDEV_TYPE}\" ] && echo \"  vtype: ${ZEVENT_VDEV_TYPE}\"\n",
                      "markdown": "`    echo \"    eid: ${ZEVENT_EID}\"\n    echo \"  class: ${ZEVENT_SUBCLASS}\"\n    echo \"  state: ${ZEVENT_VDEV_STATE_STR}\"\n    echo \"   host: $(hostname)\"\n    echo \"   time: ${ZEVENT_TIME_STRING}\"\n\n    [ -n \"${ZEVENT_VDEV_TYPE}\" ] && echo \"  vtype: ${ZEVENT_VDEV_TYPE}\"\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zed.d/statechange-notify.sh"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 60,
                  "endLine": 41,
                  "endColumn": 68,
                  "snippet": {
                    "text": "fi\n\numask 077\nnote_subject=\"ZFS device fault for pool ${ZEVENT_POOL} on $(hostname)\"\nnote_pathname=\"$(mktemp)\"\n{\n    if [ \"${ZEVENT_VDEV_STATE_STR}\" = \"FAULTED\" ] ; then\n",
                    "rendered": {
                      "text": "fi\n\numask 077\nnote_subject=\"ZFS device fault for pool ${ZEVENT_POOL} on $(hostname)\"\nnote_pathname=\"$(mktemp)\"\n{\n    if [ \"${ZEVENT_VDEV_STATE_STR}\" = \"FAULTED\" ] ; then\n",
                      "markdown": "`fi\n\numask 077\nnote_subject=\"ZFS device fault for pool ${ZEVENT_POOL} on $(hostname)\"\nnote_pathname=\"$(mktemp)\"\n{\n    if [ \"${ZEVENT_VDEV_STATE_STR}\" = \"FAULTED\" ] ; then\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zed.d/statechange-notify.sh"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 26,
                  "endLine": 9,
                  "endColumn": 30,
                  "snippet": {
                    "text": "# The contents of this file are subject to the terms of the\n# Common Development and Distribution License Version 1.0 (CDDL-1.0).\n# You can obtain a copy of the license from the top-level file\n# \"OPENSOLARIS.LICENSE\" or at <http://opensource.org/licenses/CDDL-1.0>.\n# You may not use this file except in compliance with the license.\n#\n# CDDL HEADER END\n",
                    "rendered": {
                      "text": "# The contents of this file are subject to the terms of the\n# Common Development and Distribution License Version 1.0 (CDDL-1.0).\n# You can obtain a copy of the license from the top-level file\n# \"OPENSOLARIS.LICENSE\" or at <http://opensource.org/licenses/CDDL-1.0>.\n# You may not use this file except in compliance with the license.\n#\n# CDDL HEADER END\n",
                      "markdown": "`# The contents of this file are subject to the terms of the\n# Common Development and Distribution License Version 1.0 (CDDL-1.0).\n# You can obtain a copy of the license from the top-level file\n# \"OPENSOLARIS.LICENSE\" or at <http://opensource.org/licenses/CDDL-1.0>.\n# You may not use this file except in compliance with the license.\n#\n# CDDL HEADER END\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zed.d/statechange-led.sh"
                },
                "region": {
                  "startLine": 73,
                  "startColumn": 6,
                  "endLine": 73,
                  "endColumn": 14,
                  "snippet": {
                    "text": "\tfi\n\n\t# If another process is accessing the LED when we attempt to update it,\n\t# the update will be lost so retry until the LED actually changes or we\n\t# timeout.\n\tfor _ in 1 2 3 4 5; do\n\t\t# We want to check the current state first, since writing to the\n",
                    "rendered": {
                      "text": "\tfi\n\n\t# If another process is accessing the LED when we attempt to update it,\n\t# the update will be lost so retry until the LED actually changes or we\n\t# timeout.\n\tfor _ in 1 2 3 4 5; do\n\t\t# We want to check the current state first, since writing to the\n",
                      "markdown": "`\tfi\n\n\t# If another process is accessing the LED when we attempt to update it,\n\t# the update will be lost so retry until the LED actually changes or we\n\t# timeout.\n\tfor _ in 1 2 3 4 5; do\n\t\t# We want to check the current state first, since writing to the\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zed.d/statechange-led.sh"
                },
                "region": {
                  "startLine": 72,
                  "startColumn": 61,
                  "endLine": 72,
                  "endColumn": 69,
                  "snippet": {
                    "text": "\t\treturn 3\n\tfi\n\n\t# If another process is accessing the LED when we attempt to update it,\n\t# the update will be lost so retry until the LED actually changes or we\n\t# timeout.\n\tfor _ in 1 2 3 4 5; do\n",
                    "rendered": {
                      "text": "\t\treturn 3\n\tfi\n\n\t# If another process is accessing the LED when we attempt to update it,\n\t# the update will be lost so retry until the LED actually changes or we\n\t# timeout.\n\tfor _ in 1 2 3 4 5; do\n",
                      "markdown": "`\t\treturn 3\n\tfi\n\n\t# If another process is accessing the LED when we attempt to update it,\n\t# the update will be lost so retry until the LED actually changes or we\n\t# timeout.\n\tfor _ in 1 2 3 4 5; do\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zed.d/statechange-led.sh"
                },
                "region": {
                  "startLine": 200,
                  "startColumn": 33,
                  "endLine": 200,
                  "endColumn": 38,
                  "snippet": {
                    "text": "\t\t\tvdev_enc_sysfs_path=$(nvme_dev_to_slot \"$dev\")\n\t\tfi\n\n\t\tcurrent_val=$(echo \"$therest\" | awk '{print $NF}')\n\n\t\tif [ \"$current_val\" != \"0\" ] ; then\n\t\t\tcurrent_val=1\n",
                    "rendered": {
                      "text": "\t\t\tvdev_enc_sysfs_path=$(nvme_dev_to_slot \"$dev\")\n\t\tfi\n\n\t\tcurrent_val=$(echo \"$therest\" | awk '{print $NF}')\n\n\t\tif [ \"$current_val\" != \"0\" ] ; then\n\t\t\tcurrent_val=1\n",
                      "markdown": "`\t\t\tvdev_enc_sysfs_path=$(nvme_dev_to_slot \"$dev\")\n\t\tfi\n\n\t\tcurrent_val=$(echo \"$therest\" | awk '{print $NF}')\n\n\t\tif [ \"$current_val\" != \"0\" ] ; then\n\t\t\tcurrent_val=1\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zed.d/statechange-led.sh"
                },
                "region": {
                  "startLine": 193,
                  "startColumn": 37,
                  "endLine": 193,
                  "endColumn": 42,
                  "snippet": {
                    "text": "\twhile read -r vdev state _ _ _ therest; do\n\t\t# Read out current LED value and path\n\t\t# Get dev name (like 'sda')\n\t\tdev=$(basename \"$(echo \"$therest\" | awk '{print $(NF-1)}')\")\n\t\tvdev_enc_sysfs_path=$(realpath \"/sys/class/block/$dev/device/enclosure_device\"*)\n\t\tif [ ! -d \"$vdev_enc_sysfs_path\" ] ; then\n\t\t\t# This is not a JBOD disk, but it could be a PCI NVMe drive\n",
                    "rendered": {
                      "text": "\twhile read -r vdev state _ _ _ therest; do\n\t\t# Read out current LED value and path\n\t\t# Get dev name (like 'sda')\n\t\tdev=$(basename \"$(echo \"$therest\" | awk '{print $(NF-1)}')\")\n\t\tvdev_enc_sysfs_path=$(realpath \"/sys/class/block/$dev/device/enclosure_device\"*)\n\t\tif [ ! -d \"$vdev_enc_sysfs_path\" ] ; then\n\t\t\t# This is not a JBOD disk, but it could be a PCI NVMe drive\n",
                      "markdown": "`\twhile read -r vdev state _ _ _ therest; do\n\t\t# Read out current LED value and path\n\t\t# Get dev name (like 'sda')\n\t\tdev=$(basename \"$(echo \"$therest\" | awk '{print $(NF-1)}')\")\n\t\tvdev_enc_sysfs_path=$(realpath \"/sys/class/block/$dev/device/enclosure_device\"*)\n\t\tif [ ! -d \"$vdev_enc_sysfs_path\" ] ; then\n\t\t\t# This is not a JBOD disk, but it could be a PCI NVMe drive\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zed.d/statechange-led.sh"
                },
                "region": {
                  "startLine": 188,
                  "startColumn": 67,
                  "endLine": 188,
                  "endColumn": 73,
                  "snippet": {
                    "text": "\t#    U47     ONLINE       0     0     0   /dev/sdn          0\n\t#    U50     ONLINE       0     0     0  /dev/sdbn          0\n\t#\n\tZPOOL_SCRIPTS_AS_ROOT=1 $ZPOOL status -c upath,fault_led \"$pool\" | grep '/dev/' | (\n\trc=0\n\twhile read -r vdev state _ _ _ therest; do\n\t\t# Read out current LED value and path\n",
                    "rendered": {
                      "text": "\t#    U47     ONLINE       0     0     0   /dev/sdn          0\n\t#    U50     ONLINE       0     0     0  /dev/sdbn          0\n\t#\n\tZPOOL_SCRIPTS_AS_ROOT=1 $ZPOOL status -c upath,fault_led \"$pool\" | grep '/dev/' | (\n\trc=0\n\twhile read -r vdev state _ _ _ therest; do\n\t\t# Read out current LED value and path\n",
                      "markdown": "`\t#    U47     ONLINE       0     0     0   /dev/sdn          0\n\t#    U50     ONLINE       0     0     0  /dev/sdbn          0\n\t#\n\tZPOOL_SCRIPTS_AS_ROOT=1 $ZPOOL status -c upath,fault_led \"$pool\" | grep '/dev/' | (\n\trc=0\n\twhile read -r vdev state _ _ _ therest; do\n\t\t# Read out current LED value and path\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zed.d/statechange-led.sh"
                },
                "region": {
                  "startLine": 158,
                  "startColumn": 23,
                  "endLine": 158,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\t\t\t# address=           \"0000:01:00.0\"\n\t\t\t# this_address =     \"0000:01:00\"\n\t\t\t#\n\t\t\tif echo \"$address\" | grep -Eq ^\"$this_address\" ; then\n\t\t\t\techo \"${sys_addr%/*}\"\n\t\t\t\tbreak\n\t\t\tfi\n",
                    "rendered": {
                      "text": "\t\t\t# address=           \"0000:01:00.0\"\n\t\t\t# this_address =     \"0000:01:00\"\n\t\t\t#\n\t\t\tif echo \"$address\" | grep -Eq ^\"$this_address\" ; then\n\t\t\t\techo \"${sys_addr%/*}\"\n\t\t\t\tbreak\n\t\t\tfi\n",
                      "markdown": "`\t\t\t# address=           \"0000:01:00.0\"\n\t\t\t# this_address =     \"0000:01:00\"\n\t\t\t#\n\t\t\tif echo \"$address\" | grep -Eq ^\"$this_address\" ; then\n\t\t\t\techo \"${sys_addr%/*}\"\n\t\t\t\tbreak\n\t\t\tfi\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zed.d/statechange-led.sh"
                },
                "region": {
                  "startLine": 147,
                  "endLine": 147,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\t# Get the address \"0000:01:00.0\"\n\tread -r address < \"/sys/class/block/$dev/device/address\"\n\n\tfind /sys/bus/pci/slots -regex '.*/[0-9]+/address$' | \\\n\t\twhile read -r sys_addr; do\n\t\t\tread -r this_address < \"$sys_addr\"\n\n",
                    "rendered": {
                      "text": "\t# Get the address \"0000:01:00.0\"\n\tread -r address < \"/sys/class/block/$dev/device/address\"\n\n\tfind /sys/bus/pci/slots -regex '.*/[0-9]+/address$' | \\\n\t\twhile read -r sys_addr; do\n\t\t\tread -r this_address < \"$sys_addr\"\n\n",
                      "markdown": "`\t# Get the address \"0000:01:00.0\"\n\tread -r address < \"/sys/class/block/$dev/device/address\"\n\n\tfind /sys/bus/pci/slots -regex '.*/[0-9]+/address$' | \\\n\t\twhile read -r sys_addr; do\n\t\t\tread -r this_address < \"$sys_addr\"\n\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zed.d/statechange-led.sh"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 13,
                  "endLine": 43,
                  "endColumn": 18,
                  "snippet": {
                    "text": "fi\n\nzed_check_cmd \"$ZPOOL\" || exit 4\nzed_check_cmd awk || exit 5\n\n# Global used in set_led debug print\nvdev=\"\"\n",
                    "rendered": {
                      "text": "fi\n\nzed_check_cmd \"$ZPOOL\" || exit 4\nzed_check_cmd awk || exit 5\n\n# Global used in set_led debug print\nvdev=\"\"\n",
                      "markdown": "`fi\n\nzed_check_cmd \"$ZPOOL\" || exit 4\nzed_check_cmd awk || exit 5\n\n# Global used in set_led debug print\nvdev=\"\"\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zed.d/statechange-led.sh"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 6,
                  "endLine": 28,
                  "endColumn": 11,
                  "snippet": {
                    "text": "#   2: enclosure leds administratively disabled\n#   3: The led sysfs path passed from ZFS does not exist\n#   4: $ZPOOL not set\n#   5: awk is not installed\n\n[ -f \"${ZED_ZEDLET_DIR}/zed.rc\" ] && . \"${ZED_ZEDLET_DIR}/zed.rc\"\n. \"${ZED_ZEDLET_DIR}/zed-functions.sh\"\n",
                    "rendered": {
                      "text": "#   2: enclosure leds administratively disabled\n#   3: The led sysfs path passed from ZFS does not exist\n#   4: $ZPOOL not set\n#   5: awk is not installed\n\n[ -f \"${ZED_ZEDLET_DIR}/zed.rc\" ] && . \"${ZED_ZEDLET_DIR}/zed.rc\"\n. \"${ZED_ZEDLET_DIR}/zed-functions.sh\"\n",
                      "markdown": "`#   2: enclosure leds administratively disabled\n#   3: The led sysfs path passed from ZFS does not exist\n#   4: $ZPOOL not set\n#   5: awk is not installed\n\n[ -f \"${ZED_ZEDLET_DIR}/zed.rc\" ] && . \"${ZED_ZEDLET_DIR}/zed.rc\"\n. \"${ZED_ZEDLET_DIR}/zed-functions.sh\"\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zed.d/statechange-led.sh"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 50,
                  "endLine": 19,
                  "endColumn": 58,
                  "snippet": {
                    "text": "# and set the LEDs accordingly.  This is the case for pool_import events.\n#\n# Note that this script requires that your enclosure be supported by the\n# Linux SCSI Enclosure services (SES) driver.  The script will do nothing\n# if you have no enclosure, or if your enclosure isn't supported.\n#\n# Exit codes:\n",
                    "rendered": {
                      "text": "# and set the LEDs accordingly.  This is the case for pool_import events.\n#\n# Note that this script requires that your enclosure be supported by the\n# Linux SCSI Enclosure services (SES) driver.  The script will do nothing\n# if you have no enclosure, or if your enclosure isn't supported.\n#\n# Exit codes:\n",
                      "markdown": "`# and set the LEDs accordingly.  This is the case for pool_import events.\n#\n# Note that this script requires that your enclosure be supported by the\n# Linux SCSI Enclosure services (SES) driver.  The script will do nothing\n# if you have no enclosure, or if your enclosure isn't supported.\n#\n# Exit codes:\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zed.d/statechange-led.sh"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 16,
                  "endLine": 18,
                  "endColumn": 24,
                  "snippet": {
                    "text": "# 2. If those vars are not set, then check the state of all vdevs in the pool\n# and set the LEDs accordingly.  This is the case for pool_import events.\n#\n# Note that this script requires that your enclosure be supported by the\n# Linux SCSI Enclosure services (SES) driver.  The script will do nothing\n# if you have no enclosure, or if your enclosure isn't supported.\n#\n",
                    "rendered": {
                      "text": "# 2. If those vars are not set, then check the state of all vdevs in the pool\n# and set the LEDs accordingly.  This is the case for pool_import events.\n#\n# Note that this script requires that your enclosure be supported by the\n# Linux SCSI Enclosure services (SES) driver.  The script will do nothing\n# if you have no enclosure, or if your enclosure isn't supported.\n#\n",
                      "markdown": "`# 2. If those vars are not set, then check the state of all vdevs in the pool\n# and set the LEDs accordingly.  This is the case for pool_import events.\n#\n# Note that this script requires that your enclosure be supported by the\n# Linux SCSI Enclosure services (SES) driver.  The script will do nothing\n# if you have no enclosure, or if your enclosure isn't supported.\n#\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zed.d/statechange-led.sh"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 6,
                  "endLine": 9,
                  "endColumn": 14,
                  "snippet": {
                    "text": "# Turn a vdev's fault LED on if it becomes FAULTED, DEGRADED or UNAVAIL.\n# Turn its LED off when it's back ONLINE again.\n#\n# This script run in two basic modes:\n#\n# 1. If $ZEVENT_VDEV_ENC_SYSFS_PATH and $ZEVENT_VDEV_STATE_STR are set, then\n# only set the LED for that particular vdev. This is the case for statechange\n",
                    "rendered": {
                      "text": "# Turn a vdev's fault LED on if it becomes FAULTED, DEGRADED or UNAVAIL.\n# Turn its LED off when it's back ONLINE again.\n#\n# This script run in two basic modes:\n#\n# 1. If $ZEVENT_VDEV_ENC_SYSFS_PATH and $ZEVENT_VDEV_STATE_STR are set, then\n# only set the LED for that particular vdev. This is the case for statechange\n",
                      "markdown": "`# Turn a vdev's fault LED on if it becomes FAULTED, DEGRADED or UNAVAIL.\n# Turn its LED off when it's back ONLINE again.\n#\n# This script run in two basic modes:\n#\n# 1. If $ZEVENT_VDEV_ENC_SYSFS_PATH and $ZEVENT_VDEV_STATE_STR are set, then\n# only set the LED for that particular vdev. This is the case for statechange\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zed.d/scrub_finish-notify.sh"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 20,
                  "endLine": 51,
                  "endColumn": 28,
                  "snippet": {
                    "text": "    echo\n    echo \"   eid: ${ZEVENT_EID}\"\n    echo \" class: ${ZEVENT_SUBCLASS}\"\n    echo \"  host: $(hostname)\"\n    echo \"  time: ${ZEVENT_TIME_STRING}\"\n\n    \"${ZPOOL}\" status \"${ZEVENT_POOL}\"\n",
                    "rendered": {
                      "text": "    echo\n    echo \"   eid: ${ZEVENT_EID}\"\n    echo \" class: ${ZEVENT_SUBCLASS}\"\n    echo \"  host: $(hostname)\"\n    echo \"  time: ${ZEVENT_TIME_STRING}\"\n\n    \"${ZPOOL}\" status \"${ZEVENT_POOL}\"\n",
                      "markdown": "`    echo\n    echo \"   eid: ${ZEVENT_EID}\"\n    echo \" class: ${ZEVENT_SUBCLASS}\"\n    echo \"  host: $(hostname)\"\n    echo \"  time: ${ZEVENT_TIME_STRING}\"\n\n    \"${ZPOOL}\" status \"${ZEVENT_POOL}\"\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zed.d/scrub_finish-notify.sh"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 67,
                  "endLine": 44,
                  "endColumn": 75,
                  "snippet": {
                    "text": "fi\n\numask 077\nnote_subject=\"ZFS ${ZEVENT_SUBCLASS} event for ${ZEVENT_POOL} on $(hostname)\"\nnote_pathname=\"$(mktemp)\"\n{\n    echo \"ZFS has finished a ${action}:\"\n",
                    "rendered": {
                      "text": "fi\n\numask 077\nnote_subject=\"ZFS ${ZEVENT_SUBCLASS} event for ${ZEVENT_POOL} on $(hostname)\"\nnote_pathname=\"$(mktemp)\"\n{\n    echo \"ZFS has finished a ${action}:\"\n",
                      "markdown": "`fi\n\numask 077\nnote_subject=\"ZFS ${ZEVENT_SUBCLASS} event for ${ZEVENT_POOL} on $(hostname)\"\nnote_pathname=\"$(mktemp)\"\n{\n    echo \"ZFS has finished a ${action}:\"\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zed.d/scrub_finish-notify.sh"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 9,
                  "endLine": 39,
                  "endColumn": 15,
                  "snippet": {
                    "text": "#\nif [ \"${ZEVENT_SUBCLASS}\" = \"scrub_finish\" ]; then\n    healthy=\"$(\"${ZPOOL}\" status -x \"${ZEVENT_POOL}\" \\\n        | grep \"'${ZEVENT_POOL}' is healthy\")\"\n    [ -n \"${healthy}\" ] && [ \"${ZED_NOTIFY_VERBOSE}\" -eq 0 ] && exit 3\nfi\n\n",
                    "rendered": {
                      "text": "#\nif [ \"${ZEVENT_SUBCLASS}\" = \"scrub_finish\" ]; then\n    healthy=\"$(\"${ZPOOL}\" status -x \"${ZEVENT_POOL}\" \\\n        | grep \"'${ZEVENT_POOL}' is healthy\")\"\n    [ -n \"${healthy}\" ] && [ \"${ZED_NOTIFY_VERBOSE}\" -eq 0 ] && exit 3\nfi\n\n",
                      "markdown": "`#\nif [ \"${ZEVENT_SUBCLASS}\" = \"scrub_finish\" ]; then\n    healthy=\"$(\"${ZPOOL}\" status -x \"${ZEVENT_POOL}\" \\\n        | grep \"'${ZEVENT_POOL}' is healthy\")\"\n    [ -n \"${healthy}\" ] && [ \"${ZED_NOTIFY_VERBOSE}\" -eq 0 ] && exit 3\nfi\n\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zed.d/resilver_finish-start-scrub.sh"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 4,
                  "endLine": 8,
                  "endColumn": 12,
                  "snippet": {
                    "text": "#\n# Exit codes:\n# 1: Internal error\n# 2: Script wasn't enabled in zed.rc\n# 3: Scrubs are automatically started for sequential resilvers\n[ -f \"${ZED_ZEDLET_DIR}/zed.rc\" ] && . \"${ZED_ZEDLET_DIR}/zed.rc\"\n. \"${ZED_ZEDLET_DIR}/zed-functions.sh\"\n",
                    "rendered": {
                      "text": "#\n# Exit codes:\n# 1: Internal error\n# 2: Script wasn't enabled in zed.rc\n# 3: Scrubs are automatically started for sequential resilvers\n[ -f \"${ZED_ZEDLET_DIR}/zed.rc\" ] && . \"${ZED_ZEDLET_DIR}/zed.rc\"\n. \"${ZED_ZEDLET_DIR}/zed-functions.sh\"\n",
                      "markdown": "`#\n# Exit codes:\n# 1: Internal error\n# 2: Script wasn't enabled in zed.rc\n# 3: Scrubs are automatically started for sequential resilvers\n[ -f \"${ZED_ZEDLET_DIR}/zed.rc\" ] && . \"${ZED_ZEDLET_DIR}/zed.rc\"\n. \"${ZED_ZEDLET_DIR}/zed-functions.sh\"\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/etc/zfs/zfs-functions"
                },
                "region": {
                  "startLine": 292,
                  "startColumn": 41,
                  "endLine": 292,
                  "endColumn": 45,
                  "snippet": {
                    "text": "\tthen\n\t\t# Called with zfs=(off|no|0) - bail because we don't\n\t\t# want anything import, mounted or shared.\n\t\t# HOWEVER, only do this if we're called at the boot up\n\t\t# (from init), not if we're running interactively (as in\n\t\t# from the shell - we know what we're doing).\n\t\t# shellcheck disable=SC2154\n",
                    "rendered": {
                      "text": "\tthen\n\t\t# Called with zfs=(off|no|0) - bail because we don't\n\t\t# want anything import, mounted or shared.\n\t\t# HOWEVER, only do this if we're called at the boot up\n\t\t# (from init), not if we're running interactively (as in\n\t\t# from the shell - we know what we're doing).\n\t\t# shellcheck disable=SC2154\n",
                      "markdown": "`\tthen\n\t\t# Called with zfs=(off|no|0) - bail because we don't\n\t\t# want anything import, mounted or shared.\n\t\t# HOWEVER, only do this if we're called at the boot up\n\t\t# (from init), not if we're running interactively (as in\n\t\t# from the shell - we know what we're doing).\n\t\t# shellcheck disable=SC2154\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/etc/zfs/zfs-functions"
                },
                "region": {
                  "startLine": 404,
                  "startColumn": 39,
                  "endLine": 404,
                  "endColumn": 45,
                  "snippet": {
                    "text": "\t\techo \"$mntpnt\" | grep -qE '^none|^swap' && continue\n\t\techo \"$fstype\" | grep -qE '^swap' && continue\n\n\t\tif echo \"$fs $mntpnt $fstype $opts\" | grep -qE \"$match\"; then\n\t\t\teval export \"FSTAB_dev_$i=$fs\"\n\t\t\tfs=$(printf '%b' \"$fs\" | tr '/' '_')\n\t\t\teval export \"FSTAB_$i=$mntpnt\"\n",
                    "rendered": {
                      "text": "\t\techo \"$mntpnt\" | grep -qE '^none|^swap' && continue\n\t\techo \"$fstype\" | grep -qE '^swap' && continue\n\n\t\tif echo \"$fs $mntpnt $fstype $opts\" | grep -qE \"$match\"; then\n\t\t\teval export \"FSTAB_dev_$i=$fs\"\n\t\t\tfs=$(printf '%b' \"$fs\" | tr '/' '_')\n\t\t\teval export \"FSTAB_$i=$mntpnt\"\n",
                      "markdown": "`\t\techo \"$mntpnt\" | grep -qE '^none|^swap' && continue\n\t\techo \"$fstype\" | grep -qE '^swap' && continue\n\n\t\tif echo \"$fs $mntpnt $fstype $opts\" | grep -qE \"$match\"; then\n\t\t\teval export \"FSTAB_dev_$i=$fs\"\n\t\t\tfs=$(printf '%b' \"$fs\" | tr '/' '_')\n\t\t\teval export \"FSTAB_$i=$mntpnt\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/etc/zfs/zfs-functions"
                },
                "region": {
                  "startLine": 402,
                  "startColumn": 18,
                  "endLine": 402,
                  "endColumn": 24,
                  "snippet": {
                    "text": "\twhile read -r fs mntpnt fstype opts; do\n\t\techo \"$fs\" | grep -qE '^#|^$' && continue\n\t\techo \"$mntpnt\" | grep -qE '^none|^swap' && continue\n\t\techo \"$fstype\" | grep -qE '^swap' && continue\n\n\t\tif echo \"$fs $mntpnt $fstype $opts\" | grep -qE \"$match\"; then\n\t\t\teval export \"FSTAB_dev_$i=$fs\"\n",
                    "rendered": {
                      "text": "\twhile read -r fs mntpnt fstype opts; do\n\t\techo \"$fs\" | grep -qE '^#|^$' && continue\n\t\techo \"$mntpnt\" | grep -qE '^none|^swap' && continue\n\t\techo \"$fstype\" | grep -qE '^swap' && continue\n\n\t\tif echo \"$fs $mntpnt $fstype $opts\" | grep -qE \"$match\"; then\n\t\t\teval export \"FSTAB_dev_$i=$fs\"\n",
                      "markdown": "`\twhile read -r fs mntpnt fstype opts; do\n\t\techo \"$fs\" | grep -qE '^#|^$' && continue\n\t\techo \"$mntpnt\" | grep -qE '^none|^swap' && continue\n\t\techo \"$fstype\" | grep -qE '^swap' && continue\n\n\t\tif echo \"$fs $mntpnt $fstype $opts\" | grep -qE \"$match\"; then\n\t\t\teval export \"FSTAB_dev_$i=$fs\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/etc/zfs/zfs-functions"
                },
                "region": {
                  "startLine": 401,
                  "startColumn": 18,
                  "endLine": 401,
                  "endColumn": 24,
                  "snippet": {
                    "text": "\ti=0\n\twhile read -r fs mntpnt fstype opts; do\n\t\techo \"$fs\" | grep -qE '^#|^$' && continue\n\t\techo \"$mntpnt\" | grep -qE '^none|^swap' && continue\n\t\techo \"$fstype\" | grep -qE '^swap' && continue\n\n\t\tif echo \"$fs $mntpnt $fstype $opts\" | grep -qE \"$match\"; then\n",
                    "rendered": {
                      "text": "\ti=0\n\twhile read -r fs mntpnt fstype opts; do\n\t\techo \"$fs\" | grep -qE '^#|^$' && continue\n\t\techo \"$mntpnt\" | grep -qE '^none|^swap' && continue\n\t\techo \"$fstype\" | grep -qE '^swap' && continue\n\n\t\tif echo \"$fs $mntpnt $fstype $opts\" | grep -qE \"$match\"; then\n",
                      "markdown": "`\ti=0\n\twhile read -r fs mntpnt fstype opts; do\n\t\techo \"$fs\" | grep -qE '^#|^$' && continue\n\t\techo \"$mntpnt\" | grep -qE '^none|^swap' && continue\n\t\techo \"$fstype\" | grep -qE '^swap' && continue\n\n\t\tif echo \"$fs $mntpnt $fstype $opts\" | grep -qE \"$match\"; then\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/etc/zfs/zfs-functions"
                },
                "region": {
                  "startLine": 400,
                  "startColumn": 14,
                  "endLine": 400,
                  "endColumn": 20,
                  "snippet": {
                    "text": "\n\ti=0\n\twhile read -r fs mntpnt fstype opts; do\n\t\techo \"$fs\" | grep -qE '^#|^$' && continue\n\t\techo \"$mntpnt\" | grep -qE '^none|^swap' && continue\n\t\techo \"$fstype\" | grep -qE '^swap' && continue\n\n",
                    "rendered": {
                      "text": "\n\ti=0\n\twhile read -r fs mntpnt fstype opts; do\n\t\techo \"$fs\" | grep -qE '^#|^$' && continue\n\t\techo \"$mntpnt\" | grep -qE '^none|^swap' && continue\n\t\techo \"$fstype\" | grep -qE '^swap' && continue\n\n",
                      "markdown": "`\n\ti=0\n\twhile read -r fs mntpnt fstype opts; do\n\t\techo \"$fs\" | grep -qE '^#|^$' && continue\n\t\techo \"$mntpnt\" | grep -qE '^none|^swap' && continue\n\t\techo \"$fstype\" | grep -qE '^swap' && continue\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/etc/zfs/zfs-functions"
                },
                "region": {
                  "startLine": 396,
                  "startColumn": 14,
                  "endLine": 396,
                  "endColumn": 19,
                  "snippet": {
                    "text": "\n\t# Unset all FSTAB_* variables\n\t# shellcheck disable=SC2046\n\tunset $(env | sed -e '/^FSTAB_/!d' -e 's,=.*,,')\n\n\ti=0\n\twhile read -r fs mntpnt fstype opts; do\n",
                    "rendered": {
                      "text": "\n\t# Unset all FSTAB_* variables\n\t# shellcheck disable=SC2046\n\tunset $(env | sed -e '/^FSTAB_/!d' -e 's,=.*,,')\n\n\ti=0\n\twhile read -r fs mntpnt fstype opts; do\n",
                      "markdown": "`\n\t# Unset all FSTAB_* variables\n\t# shellcheck disable=SC2046\n\tunset $(env | sed -e '/^FSTAB_/!d' -e 's,=.*,,')\n\n\ti=0\n\twhile read -r fs mntpnt fstype opts; do\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/etc/zfs/zfs-functions"
                },
                "region": {
                  "startLine": 364,
                  "startColumn": 25,
                  "endLine": 364,
                  "endColumn": 30,
                  "snippet": {
                    "text": "\t\t\t#   internal one would interpret the backslash code\n\t\t\t#   (incorrectly), giving us a \u0001 instead.\n\t\t\tmntpnt=$(/bin/echo \"$mntpnt\" | sed 's,\\\\0,\\\\00,g')\n\t\t\tfs=$(/bin/echo \"$fs\" | sed 's,\\\\0,\\\\00,')\n\n\t\t\t# Remove 'unwanted' characters.\n\t\t\tmntpnt=$(printf '%b' \"$mntpnt\" | tr -d '/. -')\n",
                    "rendered": {
                      "text": "\t\t\t#   internal one would interpret the backslash code\n\t\t\t#   (incorrectly), giving us a \u0001 instead.\n\t\t\tmntpnt=$(/bin/echo \"$mntpnt\" | sed 's,\\\\0,\\\\00,g')\n\t\t\tfs=$(/bin/echo \"$fs\" | sed 's,\\\\0,\\\\00,')\n\n\t\t\t# Remove 'unwanted' characters.\n\t\t\tmntpnt=$(printf '%b' \"$mntpnt\" | tr -d '/. -')\n",
                      "markdown": "`\t\t\t#   internal one would interpret the backslash code\n\t\t\t#   (incorrectly), giving us a \u0001 instead.\n\t\t\tmntpnt=$(/bin/echo \"$mntpnt\" | sed 's,\\\\0,\\\\00,g')\n\t\t\tfs=$(/bin/echo \"$fs\" | sed 's,\\\\0,\\\\00,')\n\n\t\t\t# Remove 'unwanted' characters.\n\t\t\tmntpnt=$(printf '%b' \"$mntpnt\" | tr -d '/. -')\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/etc/zfs/zfs-functions"
                },
                "region": {
                  "startLine": 363,
                  "startColumn": 33,
                  "endLine": 363,
                  "endColumn": 38,
                  "snippet": {
                    "text": "\t\t\t# * We need to use the external echo, because the\n\t\t\t#   internal one would interpret the backslash code\n\t\t\t#   (incorrectly), giving us a \u0001 instead.\n\t\t\tmntpnt=$(/bin/echo \"$mntpnt\" | sed 's,\\\\0,\\\\00,g')\n\t\t\tfs=$(/bin/echo \"$fs\" | sed 's,\\\\0,\\\\00,')\n\n\t\t\t# Remove 'unwanted' characters.\n",
                    "rendered": {
                      "text": "\t\t\t# * We need to use the external echo, because the\n\t\t\t#   internal one would interpret the backslash code\n\t\t\t#   (incorrectly), giving us a \u0001 instead.\n\t\t\tmntpnt=$(/bin/echo \"$mntpnt\" | sed 's,\\\\0,\\\\00,g')\n\t\t\tfs=$(/bin/echo \"$fs\" | sed 's,\\\\0,\\\\00,')\n\n\t\t\t# Remove 'unwanted' characters.\n",
                      "markdown": "`\t\t\t# * We need to use the external echo, because the\n\t\t\t#   internal one would interpret the backslash code\n\t\t\t#   (incorrectly), giving us a \u0001 instead.\n\t\t\tmntpnt=$(/bin/echo \"$mntpnt\" | sed 's,\\\\0,\\\\00,g')\n\t\t\tfs=$(/bin/echo \"$fs\" | sed 's,\\\\0,\\\\00,')\n\n\t\t\t# Remove 'unwanted' characters.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/etc/zfs/zfs-functions"
                },
                "region": {
                  "startLine": 355,
                  "startColumn": 39,
                  "endLine": 355,
                  "endColumn": 45,
                  "snippet": {
                    "text": "\tunset $(env | sed -e '/^MTAB_/!d' -e 's,=.*,,')\n\n\twhile read -r fs mntpnt fstype opts rest; do\n\t\tif echo \"$fs $mntpnt $fstype $opts\" | grep -qE \"$match\"; then\n\t\t\t# * Fix problems (!?) in the mounts file. It will record\n\t\t\t#   'rpool 1' as 'rpool\\0401' instead of 'rpool\\00401'\n\t\t\t#   which seems to be the correct (at least as far as\n",
                    "rendered": {
                      "text": "\tunset $(env | sed -e '/^MTAB_/!d' -e 's,=.*,,')\n\n\twhile read -r fs mntpnt fstype opts rest; do\n\t\tif echo \"$fs $mntpnt $fstype $opts\" | grep -qE \"$match\"; then\n\t\t\t# * Fix problems (!?) in the mounts file. It will record\n\t\t\t#   'rpool 1' as 'rpool\\0401' instead of 'rpool\\00401'\n\t\t\t#   which seems to be the correct (at least as far as\n",
                      "markdown": "`\tunset $(env | sed -e '/^MTAB_/!d' -e 's,=.*,,')\n\n\twhile read -r fs mntpnt fstype opts rest; do\n\t\tif echo \"$fs $mntpnt $fstype $opts\" | grep -qE \"$match\"; then\n\t\t\t# * Fix problems (!?) in the mounts file. It will record\n\t\t\t#   'rpool 1' as 'rpool\\0401' instead of 'rpool\\00401'\n\t\t\t#   which seems to be the correct (at least as far as\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/etc/zfs/zfs-functions"
                },
                "region": {
                  "startLine": 352,
                  "startColumn": 14,
                  "endLine": 352,
                  "endColumn": 19,
                  "snippet": {
                    "text": "\n\t# Unset all MTAB_* variables\n\t# shellcheck disable=SC2046\n\tunset $(env | sed -e '/^MTAB_/!d' -e 's,=.*,,')\n\n\twhile read -r fs mntpnt fstype opts rest; do\n\t\tif echo \"$fs $mntpnt $fstype $opts\" | grep -qE \"$match\"; then\n",
                    "rendered": {
                      "text": "\n\t# Unset all MTAB_* variables\n\t# shellcheck disable=SC2046\n\tunset $(env | sed -e '/^MTAB_/!d' -e 's,=.*,,')\n\n\twhile read -r fs mntpnt fstype opts rest; do\n\t\tif echo \"$fs $mntpnt $fstype $opts\" | grep -qE \"$match\"; then\n",
                      "markdown": "`\n\t# Unset all MTAB_* variables\n\t# shellcheck disable=SC2046\n\tunset $(env | sed -e '/^MTAB_/!d' -e 's,=.*,,')\n\n\twhile read -r fs mntpnt fstype opts rest; do\n\t\tif echo \"$fs $mntpnt $fstype $opts\" | grep -qE \"$match\"; then\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/etc/zfs/zfs-functions"
                },
                "region": {
                  "startLine": 321,
                  "startColumn": 14,
                  "endLine": 321,
                  "endColumn": 20,
                  "snippet": {
                    "text": "{\n\tlocal var=\"$1\"\n\n\techo \"$var\" | grep -Eiq \"^yes$|^on$|^true$|^1$\" && return 0 || return 1\n}\n\ncheck_module_loaded()\n",
                    "rendered": {
                      "text": "{\n\tlocal var=\"$1\"\n\n\techo \"$var\" | grep -Eiq \"^yes$|^on$|^true$|^1$\" && return 0 || return 1\n}\n\ncheck_module_loaded()\n",
                      "markdown": "`{\n\tlocal var=\"$1\"\n\n\techo \"$var\" | grep -Eiq \"^yes$|^on$|^true$|^1$\" && return 0 || return 1\n}\n\ncheck_module_loaded()\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/etc/zfs/zfs-functions"
                },
                "region": {
                  "startLine": 311,
                  "startColumn": 17,
                  "endLine": 311,
                  "endColumn": 23,
                  "snippet": {
                    "text": "get_root_pool()\n{\n\t# shellcheck disable=SC2046\n\tset -- $(mount | grep ' on / ')\n\t[ \"$5\" = \"zfs\" ] && echo \"${1%%/*}\"\n}\n\n",
                    "rendered": {
                      "text": "get_root_pool()\n{\n\t# shellcheck disable=SC2046\n\tset -- $(mount | grep ' on / ')\n\t[ \"$5\" = \"zfs\" ] && echo \"${1%%/*}\"\n}\n\n",
                      "markdown": "`get_root_pool()\n{\n\t# shellcheck disable=SC2046\n\tset -- $(mount | grep ' on / ')\n\t[ \"$5\" = \"zfs\" ] && echo \"${1%%/*}\"\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/etc/zfs/zfs-functions"
                },
                "region": {
                  "startLine": 288,
                  "startColumn": 3,
                  "endLine": 288,
                  "endColumn": 9,
                  "snippet": {
                    "text": "# Do a lot of checks to make sure it's 'safe' to continue with the import.\nchecksystem()\n{\n\tif grep -qiE '(^|[^\\\\](\\\\\\\\)* )zfs=(off|no|0)( |$)' /proc/cmdline;\n\tthen\n\t\t# Called with zfs=(off|no|0) - bail because we don't\n\t\t# want anything import, mounted or shared.\n",
                    "rendered": {
                      "text": "# Do a lot of checks to make sure it's 'safe' to continue with the import.\nchecksystem()\n{\n\tif grep -qiE '(^|[^\\\\](\\\\\\\\)* )zfs=(off|no|0)( |$)' /proc/cmdline;\n\tthen\n\t\t# Called with zfs=(off|no|0) - bail because we don't\n\t\t# want anything import, mounted or shared.\n",
                      "markdown": "`# Do a lot of checks to make sure it's 'safe' to continue with the import.\nchecksystem()\n{\n\tif grep -qiE '(^|[^\\\\](\\\\\\\\)* )zfs=(off|no|0)( |$)' /proc/cmdline;\n\tthen\n\t\t# Called with zfs=(off|no|0) - bail because we don't\n\t\t# want anything import, mounted or shared.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/etc/zfs/zfs-functions"
                },
                "region": {
                  "startLine": 237,
                  "startColumn": 1,
                  "endLine": 237,
                  "endColumn": 20,
                  "snippet": {
                    "text": "\n\tif type start-stop-daemon > /dev/null 2>&1 ; then\n\t\t# LSB functions\n\t\tstart-stop-daemon --stop --signal 1 --quiet \\\n\t\t    --pidfile \"$PIDFILE\" --name \"$DAEMON_NAME\"\n\t\treturn $?\n\telif type killproc > /dev/null 2>&1 ; then\n",
                    "rendered": {
                      "text": "\n\tif type start-stop-daemon > /dev/null 2>&1 ; then\n\t\t# LSB functions\n\t\tstart-stop-daemon --stop --signal 1 --quiet \\\n\t\t    --pidfile \"$PIDFILE\" --name \"$DAEMON_NAME\"\n\t\treturn $?\n\telif type killproc > /dev/null 2>&1 ; then\n",
                      "markdown": "`\n\tif type start-stop-daemon > /dev/null 2>&1 ; then\n\t\t# LSB functions\n\t\tstart-stop-daemon --stop --signal 1 --quiet \\\n\t\t    --pidfile \"$PIDFILE\" --name \"$DAEMON_NAME\"\n\t\treturn $?\n\telif type killproc > /dev/null 2>&1 ; then\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/etc/zfs/zfs-functions"
                },
                "region": {
                  "startLine": 235,
                  "startColumn": 8,
                  "endLine": 235,
                  "endColumn": 27,
                  "snippet": {
                    "text": "\tlocal PIDFILE=\"$1\"\n\tlocal DAEMON_NAME=\"$2\"\n\n\tif type start-stop-daemon > /dev/null 2>&1 ; then\n\t\t# LSB functions\n\t\tstart-stop-daemon --stop --signal 1 --quiet \\\n\t\t    --pidfile \"$PIDFILE\" --name \"$DAEMON_NAME\"\n",
                    "rendered": {
                      "text": "\tlocal PIDFILE=\"$1\"\n\tlocal DAEMON_NAME=\"$2\"\n\n\tif type start-stop-daemon > /dev/null 2>&1 ; then\n\t\t# LSB functions\n\t\tstart-stop-daemon --stop --signal 1 --quiet \\\n\t\t    --pidfile \"$PIDFILE\" --name \"$DAEMON_NAME\"\n",
                      "markdown": "`\tlocal PIDFILE=\"$1\"\n\tlocal DAEMON_NAME=\"$2\"\n\n\tif type start-stop-daemon > /dev/null 2>&1 ; then\n\t\t# LSB functions\n\t\tstart-stop-daemon --stop --signal 1 --quiet \\\n\t\t    --pidfile \"$PIDFILE\" --name \"$DAEMON_NAME\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/etc/zfs/zfs-functions"
                },
                "region": {
                  "startLine": 186,
                  "startColumn": 1,
                  "endLine": 186,
                  "endColumn": 20,
                  "snippet": {
                    "text": "\n\tif type start-stop-daemon > /dev/null 2>&1 ; then\n\t\t# LSB functions\n\t\tstart-stop-daemon --stop --quiet --retry=TERM/30/KILL/5 \\\n\t\t    --pidfile \"$PIDFILE\" --name \"$DAEMON_NAME\"\n\t\tret=\"$?\"\n\t\t[ \"$ret\" = 0 ] && rm -f \"$PIDFILE\"\n",
                    "rendered": {
                      "text": "\n\tif type start-stop-daemon > /dev/null 2>&1 ; then\n\t\t# LSB functions\n\t\tstart-stop-daemon --stop --quiet --retry=TERM/30/KILL/5 \\\n\t\t    --pidfile \"$PIDFILE\" --name \"$DAEMON_NAME\"\n\t\tret=\"$?\"\n\t\t[ \"$ret\" = 0 ] && rm -f \"$PIDFILE\"\n",
                      "markdown": "`\n\tif type start-stop-daemon > /dev/null 2>&1 ; then\n\t\t# LSB functions\n\t\tstart-stop-daemon --stop --quiet --retry=TERM/30/KILL/5 \\\n\t\t    --pidfile \"$PIDFILE\" --name \"$DAEMON_NAME\"\n\t\tret=\"$?\"\n\t\t[ \"$ret\" = 0 ] && rm -f \"$PIDFILE\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/etc/zfs/zfs-functions"
                },
                "region": {
                  "startLine": 184,
                  "startColumn": 8,
                  "endLine": 184,
                  "endColumn": 27,
                  "snippet": {
                    "text": "\tlocal DAEMON_BIN=\"$2\"\n\tlocal DAEMON_NAME=\"$3\"\n\n\tif type start-stop-daemon > /dev/null 2>&1 ; then\n\t\t# LSB functions\n\t\tstart-stop-daemon --stop --quiet --retry=TERM/30/KILL/5 \\\n\t\t    --pidfile \"$PIDFILE\" --name \"$DAEMON_NAME\"\n",
                    "rendered": {
                      "text": "\tlocal DAEMON_BIN=\"$2\"\n\tlocal DAEMON_NAME=\"$3\"\n\n\tif type start-stop-daemon > /dev/null 2>&1 ; then\n\t\t# LSB functions\n\t\tstart-stop-daemon --stop --quiet --retry=TERM/30/KILL/5 \\\n\t\t    --pidfile \"$PIDFILE\" --name \"$DAEMON_NAME\"\n",
                      "markdown": "`\tlocal DAEMON_BIN=\"$2\"\n\tlocal DAEMON_NAME=\"$3\"\n\n\tif type start-stop-daemon > /dev/null 2>&1 ; then\n\t\t# LSB functions\n\t\tstart-stop-daemon --stop --quiet --retry=TERM/30/KILL/5 \\\n\t\t    --pidfile \"$PIDFILE\" --name \"$DAEMON_NAME\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/etc/zfs/zfs-functions"
                },
                "region": {
                  "startLine": 151,
                  "startColumn": 35,
                  "endLine": 151,
                  "endColumn": 43,
                  "snippet": {
                    "text": "\t\tstart-stop-daemon --start --quiet --exec \"$DAEMON_BIN\" -- \\\n\t\t    \"$@\" || return 2\n\n\t\t# On Debian, there's a 'sendsigs' script that will\n\t\t# kill basically everything quite early and zed is stopped\n\t\t# much later than that. We don't want zed to be among them,\n\t\t# so add the zed pid to list of pids to ignore.\n",
                    "rendered": {
                      "text": "\t\tstart-stop-daemon --start --quiet --exec \"$DAEMON_BIN\" -- \\\n\t\t    \"$@\" || return 2\n\n\t\t# On Debian, there's a 'sendsigs' script that will\n\t\t# kill basically everything quite early and zed is stopped\n\t\t# much later than that. We don't want zed to be among them,\n\t\t# so add the zed pid to list of pids to ignore.\n",
                      "markdown": "`\t\tstart-stop-daemon --start --quiet --exec \"$DAEMON_BIN\" -- \\\n\t\t    \"$@\" || return 2\n\n\t\t# On Debian, there's a 'sendsigs' script that will\n\t\t# kill basically everything quite early and zed is stopped\n\t\t# much later than that. We don't want zed to be among them,\n\t\t# so add the zed pid to list of pids to ignore.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/etc/zfs/zfs-functions"
                },
                "region": {
                  "startLine": 148,
                  "startColumn": 1,
                  "endLine": 148,
                  "endColumn": 20,
                  "snippet": {
                    "text": "\t\t    --exec \"$DAEMON_BIN\" --test > /dev/null || return 1\n\n\t\t# shellcheck disable=SC2086\n\t\tstart-stop-daemon --start --quiet --exec \"$DAEMON_BIN\" -- \\\n\t\t    \"$@\" || return 2\n\n\t\t# On Debian, there's a 'sendsigs' script that will\n",
                    "rendered": {
                      "text": "\t\t    --exec \"$DAEMON_BIN\" --test > /dev/null || return 1\n\n\t\t# shellcheck disable=SC2086\n\t\tstart-stop-daemon --start --quiet --exec \"$DAEMON_BIN\" -- \\\n\t\t    \"$@\" || return 2\n\n\t\t# On Debian, there's a 'sendsigs' script that will\n",
                      "markdown": "`\t\t    --exec \"$DAEMON_BIN\" --test > /dev/null || return 1\n\n\t\t# shellcheck disable=SC2086\n\t\tstart-stop-daemon --start --quiet --exec \"$DAEMON_BIN\" -- \\\n\t\t    \"$@\" || return 2\n\n\t\t# On Debian, there's a 'sendsigs' script that will\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/etc/zfs/zfs-functions"
                },
                "region": {
                  "startLine": 144,
                  "startColumn": 1,
                  "endLine": 144,
                  "endColumn": 20,
                  "snippet": {
                    "text": "\n\tif type start-stop-daemon > /dev/null 2>&1 ; then\n\t\t# LSB functions\n\t\tstart-stop-daemon --start --quiet --pidfile \"$PIDFILE\" \\\n\t\t    --exec \"$DAEMON_BIN\" --test > /dev/null || return 1\n\n\t\t# shellcheck disable=SC2086\n",
                    "rendered": {
                      "text": "\n\tif type start-stop-daemon > /dev/null 2>&1 ; then\n\t\t# LSB functions\n\t\tstart-stop-daemon --start --quiet --pidfile \"$PIDFILE\" \\\n\t\t    --exec \"$DAEMON_BIN\" --test > /dev/null || return 1\n\n\t\t# shellcheck disable=SC2086\n",
                      "markdown": "`\n\tif type start-stop-daemon > /dev/null 2>&1 ; then\n\t\t# LSB functions\n\t\tstart-stop-daemon --start --quiet --pidfile \"$PIDFILE\" \\\n\t\t    --exec \"$DAEMON_BIN\" --test > /dev/null || return 1\n\n\t\t# shellcheck disable=SC2086\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/etc/zfs/zfs-functions"
                },
                "region": {
                  "startLine": 142,
                  "startColumn": 8,
                  "endLine": 142,
                  "endColumn": 27,
                  "snippet": {
                    "text": "\tlocal PIDFILE=\"$1\";\tshift\n\tlocal DAEMON_BIN=\"$1\";\tshift\n\n\tif type start-stop-daemon > /dev/null 2>&1 ; then\n\t\t# LSB functions\n\t\tstart-stop-daemon --start --quiet --pidfile \"$PIDFILE\" \\\n\t\t    --exec \"$DAEMON_BIN\" --test > /dev/null || return 1\n",
                    "rendered": {
                      "text": "\tlocal PIDFILE=\"$1\";\tshift\n\tlocal DAEMON_BIN=\"$1\";\tshift\n\n\tif type start-stop-daemon > /dev/null 2>&1 ; then\n\t\t# LSB functions\n\t\tstart-stop-daemon --start --quiet --pidfile \"$PIDFILE\" \\\n\t\t    --exec \"$DAEMON_BIN\" --test > /dev/null || return 1\n",
                      "markdown": "`\tlocal PIDFILE=\"$1\";\tshift\n\tlocal DAEMON_BIN=\"$1\";\tshift\n\n\tif type start-stop-daemon > /dev/null 2>&1 ; then\n\t\t# LSB functions\n\t\tstart-stop-daemon --start --quiet --pidfile \"$PIDFILE\" \\\n\t\t    --exec \"$DAEMON_BIN\" --test > /dev/null || return 1\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/etc/zfs/zfs-functions"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 6,
                  "endLine": 8,
                  "endColumn": 14,
                  "snippet": {
                    "text": "#\n# Released under the 2-clause BSD license.\n#\n# This script is based on debian/zfsutils.zfs.init from the\n# Debian GNU/kFreeBSD zfsutils 8.1-3 package, written by Aurelien Jarno.\n\nPATH=/sbin:/bin:/usr/bin:/usr/sbin\n",
                    "rendered": {
                      "text": "#\n# Released under the 2-clause BSD license.\n#\n# This script is based on debian/zfsutils.zfs.init from the\n# Debian GNU/kFreeBSD zfsutils 8.1-3 package, written by Aurelien Jarno.\n\nPATH=/sbin:/bin:/usr/bin:/usr/sbin\n",
                      "markdown": "`#\n# Released under the 2-clause BSD license.\n#\n# This script is based on debian/zfsutils.zfs.init from the\n# Debian GNU/kFreeBSD zfsutils 8.1-3 package, written by Aurelien Jarno.\n\nPATH=/sbin:/bin:/usr/bin:/usr/sbin\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/etc/zfs/zfs-functions"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 11,
                  "endLine": 1,
                  "endColumn": 19,
                  "snippet": {
                    "text": "# This is a script with common functions etc used by zfs-import, zfs-load-key,\n# zfs-mount, zfs-share and zfs-zed.\n#\n# It is _NOT_ to be called independently\n",
                    "rendered": {
                      "text": "# This is a script with common functions etc used by zfs-import, zfs-load-key,\n# zfs-mount, zfs-share and zfs-zed.\n#\n# It is _NOT_ to be called independently\n",
                      "markdown": "`# This is a script with common functions etc used by zfs-import, zfs-load-key,\n# zfs-mount, zfs-share and zfs-zed.\n#\n# It is _NOT_ to be called independently\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/etc/default/zfs"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 43,
                  "endLine": 58,
                  "endColumn": 47,
                  "snippet": {
                    "text": "# The old variable will still work in the code, but is deprecated.\n#ZPOOL_IMPORT_PATH=\"/dev/disk/by-vdev:/dev/disk/by-id\"\n\n# List of pools that should NOT be imported at boot\n# when ZPOOL_IMPORT_ALL_VISIBLE is 'yes'.\n# This is a space separated list.\n#ZFS_POOL_EXCEPTIONS=\"test2\"\n",
                    "rendered": {
                      "text": "# The old variable will still work in the code, but is deprecated.\n#ZPOOL_IMPORT_PATH=\"/dev/disk/by-vdev:/dev/disk/by-id\"\n\n# List of pools that should NOT be imported at boot\n# when ZPOOL_IMPORT_ALL_VISIBLE is 'yes'.\n# This is a space separated list.\n#ZFS_POOL_EXCEPTIONS=\"test2\"\n",
                      "markdown": "`# The old variable will still work in the code, but is deprecated.\n#ZPOOL_IMPORT_PATH=\"/dev/disk/by-vdev:/dev/disk/by-id\"\n\n# List of pools that should NOT be imported at boot\n# when ZPOOL_IMPORT_ALL_VISIBLE is 'yes'.\n# This is a space separated list.\n#ZFS_POOL_EXCEPTIONS=\"test2\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/etc/default/zfs"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 49,
                  "endLine": 47,
                  "endColumn": 58,
                  "snippet": {
                    "text": "# expect, such as those on removable devices and SANs, and those pools may\n# proceed to mount themselves in places you do not want them to.  The results\n# can be unpredictable and possibly dangerous.  Only enable this option if you\n# understand this risk and have complete physical control over your system and\n# SAN to prevent the insertion of malicious pools.\nZPOOL_IMPORT_ALL_VISIBLE='no'\n\n",
                    "rendered": {
                      "text": "# expect, such as those on removable devices and SANs, and those pools may\n# proceed to mount themselves in places you do not want them to.  The results\n# can be unpredictable and possibly dangerous.  Only enable this option if you\n# understand this risk and have complete physical control over your system and\n# SAN to prevent the insertion of malicious pools.\nZPOOL_IMPORT_ALL_VISIBLE='no'\n\n",
                      "markdown": "`# expect, such as those on removable devices and SANs, and those pools may\n# proceed to mount themselves in places you do not want them to.  The results\n# can be unpredictable and possibly dangerous.  Only enable this option if you\n# understand this risk and have complete physical control over your system and\n# SAN to prevent the insertion of malicious pools.\nZPOOL_IMPORT_ALL_VISIBLE='no'\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/etc/default/zfs"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 38,
                  "endLine": 38,
                  "endColumn": 42,
                  "snippet": {
                    "text": "# managed automatically by the 'zpool import' and 'zpool export' commands.\n#\n# By setting this to 'yes', the system will instead search all devices for\n# pools and attempt to import them all at boot, even those that have been\n# exported.  Under this mode, the search path can be controlled by the\n# ZPOOL_IMPORT_PATH variable and a list of pools that should not be imported\n# can be listed in the ZFS_POOL_EXCEPTIONS variable.\n",
                    "rendered": {
                      "text": "# managed automatically by the 'zpool import' and 'zpool export' commands.\n#\n# By setting this to 'yes', the system will instead search all devices for\n# pools and attempt to import them all at boot, even those that have been\n# exported.  Under this mode, the search path can be controlled by the\n# ZPOOL_IMPORT_PATH variable and a list of pools that should not be imported\n# can be listed in the ZFS_POOL_EXCEPTIONS variable.\n",
                      "markdown": "`# managed automatically by the 'zpool import' and 'zpool export' commands.\n#\n# By setting this to 'yes', the system will instead search all devices for\n# pools and attempt to import them all at boot, even those that have been\n# exported.  Under this mode, the search path can be controlled by the\n# ZPOOL_IMPORT_PATH variable and a list of pools that should not be imported\n# can be listed in the ZFS_POOL_EXCEPTIONS variable.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/etc/default/zfs"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 57,
                  "endLine": 33,
                  "endColumn": 61,
                  "snippet": {
                    "text": "# Run `zfs unshare -a` during system stop?\nZFS_UNSHARE='yes'\n\n# By default, a verbatim import of all pools is performed at boot based on the\n# contents of the default zpool cache file.  The contents of the cache are\n# managed automatically by the 'zpool import' and 'zpool export' commands.\n#\n",
                    "rendered": {
                      "text": "# Run `zfs unshare -a` during system stop?\nZFS_UNSHARE='yes'\n\n# By default, a verbatim import of all pools is performed at boot based on the\n# contents of the default zpool cache file.  The contents of the cache are\n# managed automatically by the 'zpool import' and 'zpool export' commands.\n#\n",
                      "markdown": "`# Run `zfs unshare -a` during system stop?\nZFS_UNSHARE='yes'\n\n# By default, a verbatim import of all pools is performed at boot based on the\n# contents of the default zpool cache file.  The contents of the cache are\n# managed automatically by the 'zpool import' and 'zpool export' commands.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/etc/default/zfs"
                },
                "region": {
                  "startLine": 64,
                  "startColumn": 3,
                  "endLine": 64,
                  "endColumn": 10,
                  "snippet": {
                    "text": "#ZFS_POOL_EXCEPTIONS=\"test2\"\n\n# Should the datasets be mounted verbosely?\n# A mount counter will be used when mounting if set to 'yes'.\nVERBOSE_MOUNT='no'\n\n# Should we allow overlay mounts?\n",
                    "rendered": {
                      "text": "#ZFS_POOL_EXCEPTIONS=\"test2\"\n\n# Should the datasets be mounted verbosely?\n# A mount counter will be used when mounting if set to 'yes'.\nVERBOSE_MOUNT='no'\n\n# Should we allow overlay mounts?\n",
                      "markdown": "`#ZFS_POOL_EXCEPTIONS=\"test2\"\n\n# Should the datasets be mounted verbosely?\n# A mount counter will be used when mounting if set to 'yes'.\nVERBOSE_MOUNT='no'\n\n# Should we allow overlay mounts?\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/etc/default/zfs"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 12,
                  "endLine": 45,
                  "endColumn": 19,
                  "snippet": {
                    "text": "#\n# Note that importing all visible pools may include pools that you don't\n# expect, such as those on removable devices and SANs, and those pools may\n# proceed to mount themselves in places you do not want them to.  The results\n# can be unpredictable and possibly dangerous.  Only enable this option if you\n# understand this risk and have complete physical control over your system and\n# SAN to prevent the insertion of malicious pools.\n",
                    "rendered": {
                      "text": "#\n# Note that importing all visible pools may include pools that you don't\n# expect, such as those on removable devices and SANs, and those pools may\n# proceed to mount themselves in places you do not want them to.  The results\n# can be unpredictable and possibly dangerous.  Only enable this option if you\n# understand this risk and have complete physical control over your system and\n# SAN to prevent the insertion of malicious pools.\n",
                      "markdown": "`#\n# Note that importing all visible pools may include pools that you don't\n# expect, such as those on removable devices and SANs, and those pools may\n# proceed to mount themselves in places you do not want them to.  The results\n# can be unpredictable and possibly dangerous.  Only enable this option if you\n# understand this risk and have complete physical control over your system and\n# SAN to prevent the insertion of malicious pools.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/etc/default/zfs"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 10,
                  "endLine": 30,
                  "endColumn": 19,
                  "snippet": {
                    "text": "# nb: The shareiscsi, sharenfs, and sharesmb dataset properties.\nZFS_SHARE='yes'\n\n# Run `zfs unshare -a` during system stop?\nZFS_UNSHARE='yes'\n\n# By default, a verbatim import of all pools is performed at boot based on the\n",
                    "rendered": {
                      "text": "# nb: The shareiscsi, sharenfs, and sharesmb dataset properties.\nZFS_SHARE='yes'\n\n# Run `zfs unshare -a` during system stop?\nZFS_UNSHARE='yes'\n\n# By default, a verbatim import of all pools is performed at boot based on the\n",
                      "markdown": "`# nb: The shareiscsi, sharenfs, and sharesmb dataset properties.\nZFS_SHARE='yes'\n\n# Run `zfs unshare -a` during system stop?\nZFS_UNSHARE='yes'\n\n# By default, a verbatim import of all pools is performed at boot based on the\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/etc/default/zfs"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 10,
                  "endLine": 20,
                  "endColumn": 17,
                  "snippet": {
                    "text": "# Run `zfs unload-key` during system stop?\nZFS_UNLOAD_KEY='no'\n\n# Run `zfs mount -a` during system start?\nZFS_MOUNT='yes'\n\n# Run `zfs unmount -a` during system stop?\n",
                    "rendered": {
                      "text": "# Run `zfs unload-key` during system stop?\nZFS_UNLOAD_KEY='no'\n\n# Run `zfs mount -a` during system start?\nZFS_MOUNT='yes'\n\n# Run `zfs unmount -a` during system stop?\n",
                      "markdown": "`# Run `zfs unload-key` during system stop?\nZFS_UNLOAD_KEY='no'\n\n# Run `zfs mount -a` during system start?\nZFS_MOUNT='yes'\n\n# Run `zfs unmount -a` during system stop?\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/nonmed"
                },
                "region": {
                  "startLine": 244,
                  "startColumn": 47,
                  "endLine": 244,
                  "endColumn": 52,
                  "snippet": {
                    "text": "\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n\nif [ -n \"$without_vals\" ]; then\n",
                    "rendered": {
                      "text": "\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n\nif [ -n \"$without_vals\" ]; then\n",
                      "markdown": "`\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n\nif [ -n \"$without_vals\" ]; then\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/nonmed"
                },
                "region": {
                  "startLine": 242,
                  "startColumn": 29,
                  "endLine": 242,
                  "endColumn": 34,
                  "snippet": {
                    "text": "\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n",
                    "rendered": {
                      "text": "\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n",
                      "markdown": "`\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/nonmed"
                },
                "region": {
                  "startLine": 242,
                  "startColumn": 1,
                  "endLine": 242,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n",
                    "rendered": {
                      "text": "\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n",
                      "markdown": "`\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/nonmed"
                },
                "region": {
                  "startLine": 241,
                  "startColumn": 1,
                  "endLine": 241,
                  "endColumn": 7,
                  "snippet": {
                    "text": "if [ -n \"$with_vals\" ]; then\n\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\n",
                    "rendered": {
                      "text": "if [ -n \"$with_vals\" ]; then\n\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\n",
                      "markdown": "`if [ -n \"$with_vals\" ]; then\n\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/nonmed"
                },
                "region": {
                  "startLine": 237,
                  "startColumn": 25,
                  "endLine": 237,
                  "endColumn": 31,
                  "snippet": {
                    "text": "\tscripts=\"$script\"\nesac\n\nwith_vals=$(echo \"$out\" | grep -E \"$scripts\")\nif [ -n \"$with_vals\" ]; then\n\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n",
                    "rendered": {
                      "text": "\tscripts=\"$script\"\nesac\n\nwith_vals=$(echo \"$out\" | grep -E \"$scripts\")\nif [ -n \"$with_vals\" ]; then\n\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n",
                      "markdown": "`\tscripts=\"$script\"\nesac\n\nwith_vals=$(echo \"$out\" | grep -E \"$scripts\")\nif [ -n \"$with_vals\" ]; then\n\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/nonmed"
                },
                "region": {
                  "startLine": 199,
                  "startColumn": 36,
                  "endLine": 199,
                  "endColumn": 41,
                  "snippet": {
                    "text": "END {print \"type=\"type; ORS=\"\\n\"; print \"\"}\n');\nfi\ntype=$(echo \"$out\" | grep '^type=' | cut -d '=' -f 2)\n\n# If type is not set by now, either we don't have a block device\n# or smartctl failed. Either way, default to ATA and set $out to\n",
                    "rendered": {
                      "text": "END {print \"type=\"type; ORS=\"\\n\"; print \"\"}\n');\nfi\ntype=$(echo \"$out\" | grep '^type=' | cut -d '=' -f 2)\n\n# If type is not set by now, either we don't have a block device\n# or smartctl failed. Either way, default to ATA and set $out to\n",
                      "markdown": "`END {print \"type=\"type; ORS=\"\\n\"; print \"\"}\n');\nfi\ntype=$(echo \"$out\" | grep '^type=' | cut -d '=' -f 2)\n\n# If type is not set by now, either we don't have a block device\n# or smartctl failed. Either way, default to ATA and set $out to\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/nonmed"
                },
                "region": {
                  "startLine": 199,
                  "startColumn": 20,
                  "endLine": 199,
                  "endColumn": 26,
                  "snippet": {
                    "text": "END {print \"type=\"type; ORS=\"\\n\"; print \"\"}\n');\nfi\ntype=$(echo \"$out\" | grep '^type=' | cut -d '=' -f 2)\n\n# If type is not set by now, either we don't have a block device\n# or smartctl failed. Either way, default to ATA and set $out to\n",
                    "rendered": {
                      "text": "END {print \"type=\"type; ORS=\"\\n\"; print \"\"}\n');\nfi\ntype=$(echo \"$out\" | grep '^type=' | cut -d '=' -f 2)\n\n# If type is not set by now, either we don't have a block device\n# or smartctl failed. Either way, default to ATA and set $out to\n",
                      "markdown": "`END {print \"type=\"type; ORS=\"\\n\"; print \"\"}\n');\nfi\ntype=$(echo \"$out\" | grep '^type=' | cut -d '=' -f 2)\n\n# If type is not set by now, either we don't have a block device\n# or smartctl failed. Either way, default to ATA and set $out to\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/nonmed"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 24,
                  "endLine": 103,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\t# NVMe:\n\t#       SMART/Health Information (NVMe Log 0xnn, NSID 0xnn)\n\t#\n\tout=$(echo \"$raw_out\" | awk '\n# SAS specific\n/read:/{print \"rrd=\"$4\"\\nr_cor=\"$5\"\\nr_proc=\"$7\"\\nr_ucor=\"$8}\n/write:/{print \"rwr=\"$4\"\\nw_cor=\"$5\"\\nw_proc=\"$7\"\\nw_ucor=\"$8}\n",
                    "rendered": {
                      "text": "\t# NVMe:\n\t#       SMART/Health Information (NVMe Log 0xnn, NSID 0xnn)\n\t#\n\tout=$(echo \"$raw_out\" | awk '\n# SAS specific\n/read:/{print \"rrd=\"$4\"\\nr_cor=\"$5\"\\nr_proc=\"$7\"\\nr_ucor=\"$8}\n/write:/{print \"rwr=\"$4\"\\nw_cor=\"$5\"\\nw_proc=\"$7\"\\nw_ucor=\"$8}\n",
                      "markdown": "`\t# NVMe:\n\t#       SMART/Health Information (NVMe Log 0xnn, NSID 0xnn)\n\t#\n\tout=$(echo \"$raw_out\" | awk '\n# SAS specific\n/read:/{print \"rrd=\"$4\"\\nr_cor=\"$5\"\\nr_proc=\"$7\"\\nr_ucor=\"$8}\n/write:/{print \"rwr=\"$4\"\\nw_cor=\"$5\"\\nw_proc=\"$7\"\\nw_ucor=\"$8}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/nonmed"
                },
                "region": {
                  "startLine": 83,
                  "startColumn": 3,
                  "endLine": 83,
                  "endColumn": 8,
                  "snippet": {
                    "text": "\nif [ -b \"$somepath\" ] && PATH=\"/usr/sbin:$PATH\" command -v smartctl > /dev/null || [ -n \"$samples\" ] ; then\n\tif [ -n \"$samples\" ] ; then\n\t\t# cat a smartctl output text file instead of running smartctl\n\t\t# on a vdev (only used for developer testing).\n\t\tfile=$(get_filename_from_dir \"$samples\")\n\t\techo \"file=$file\"\n",
                    "rendered": {
                      "text": "\nif [ -b \"$somepath\" ] && PATH=\"/usr/sbin:$PATH\" command -v smartctl > /dev/null || [ -n \"$samples\" ] ; then\n\tif [ -n \"$samples\" ] ; then\n\t\t# cat a smartctl output text file instead of running smartctl\n\t\t# on a vdev (only used for developer testing).\n\t\tfile=$(get_filename_from_dir \"$samples\")\n\t\techo \"file=$file\"\n",
                      "markdown": "`\nif [ -b \"$somepath\" ] && PATH=\"/usr/sbin:$PATH\" command -v smartctl > /dev/null || [ -n \"$samples\" ] ; then\n\tif [ -n \"$samples\" ] ; then\n\t\t# cat a smartctl output text file instead of running smartctl\n\t\t# on a vdev (only used for developer testing).\n\t\tfile=$(get_filename_from_dir \"$samples\")\n\t\techo \"file=$file\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/nonmed"
                },
                "region": {
                  "startLine": 68,
                  "startColumn": 56,
                  "endLine": 68,
                  "endColumn": 61,
                  "snippet": {
                    "text": "script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n",
                    "rendered": {
                      "text": "script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n",
                      "markdown": "`script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/nonmed"
                },
                "region": {
                  "startLine": 68,
                  "startColumn": 25,
                  "endLine": 68,
                  "endColumn": 31,
                  "snippet": {
                    "text": "script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n",
                    "rendered": {
                      "text": "script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n",
                      "markdown": "`script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/nonmed"
                },
                "region": {
                  "startLine": 56,
                  "endLine": 56,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\tnum_files=$(find \"$dir\" -maxdepth 1 -type f | wc -l)\n\tmod=$((pid % num_files))\n\ti=0\n\tfind \"$dir\" -type f -printf '%f\\n' | while read -r file ; do\n\t\tif [ \"$mod\" = \"$i\" ] ; then\n\t\t\techo \"$file\"\n\t\t\tbreak\n",
                    "rendered": {
                      "text": "\tnum_files=$(find \"$dir\" -maxdepth 1 -type f | wc -l)\n\tmod=$((pid % num_files))\n\ti=0\n\tfind \"$dir\" -type f -printf '%f\\n' | while read -r file ; do\n\t\tif [ \"$mod\" = \"$i\" ] ; then\n\t\t\techo \"$file\"\n\t\t\tbreak\n",
                      "markdown": "`\tnum_files=$(find \"$dir\" -maxdepth 1 -type f | wc -l)\n\tmod=$((pid % num_files))\n\ti=0\n\tfind \"$dir\" -type f -printf '%f\\n' | while read -r file ; do\n\t\tif [ \"$mod\" = \"$i\" ] ; then\n\t\t\techo \"$file\"\n\t\t\tbreak\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/nonmed"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 38,
                  "endLine": 47,
                  "endColumn": 46,
                  "snippet": {
                    "text": "#\n# Look in directory DIR and return a filename from it.  The filename returned\n# is chosen quasi-sequentially (based off our PID).  This allows us to return\n# a different filename every time this script is invoked (which we do for each\n# vdev), without having to maintain state.\nget_filename_from_dir()\n{\n",
                    "rendered": {
                      "text": "#\n# Look in directory DIR and return a filename from it.  The filename returned\n# is chosen quasi-sequentially (based off our PID).  This allows us to return\n# a different filename every time this script is invoked (which we do for each\n# vdev), without having to maintain state.\nget_filename_from_dir()\n{\n",
                      "markdown": "`#\n# Look in directory DIR and return a filename from it.  The filename returned\n# is chosen quasi-sequentially (based off our PID).  This allows us to return\n# a different filename every time this script is invoked (which we do for each\n# vdev), without having to maintain state.\nget_filename_from_dir()\n{\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/nonmed"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 28,
                  "endLine": 47,
                  "endColumn": 34,
                  "snippet": {
                    "text": "#\n# Look in directory DIR and return a filename from it.  The filename returned\n# is chosen quasi-sequentially (based off our PID).  This allows us to return\n# a different filename every time this script is invoked (which we do for each\n# vdev), without having to maintain state.\nget_filename_from_dir()\n{\n",
                    "rendered": {
                      "text": "#\n# Look in directory DIR and return a filename from it.  The filename returned\n# is chosen quasi-sequentially (based off our PID).  This allows us to return\n# a different filename every time this script is invoked (which we do for each\n# vdev), without having to maintain state.\nget_filename_from_dir()\n{\n",
                      "markdown": "`#\n# Look in directory DIR and return a filename from it.  The filename returned\n# is chosen quasi-sequentially (based off our PID).  This allows us to return\n# a different filename every time this script is invoked (which we do for each\n# vdev), without having to maintain state.\nget_filename_from_dir()\n{\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/nonmed"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 27,
                  "endLine": 20,
                  "endColumn": 36,
                  "snippet": {
                    "text": "hours_on:\tShow number of hours drive powered on (all drives).\nrealloc:\tShow SMART reallocated sectors count (ATA).\nrep_ucor:\tShow SMART reported uncorrectable count (ATA).\ncmd_to:\t\tShow SMART command timeout count (ATA).\npend_sec:\tShow SMART current pending sector count (ATA).\noff_ucor:\tShow SMART offline uncorrectable errors (ATA).\nata_err:\tShow SMART ATA errors (ATA).\n",
                    "rendered": {
                      "text": "hours_on:\tShow number of hours drive powered on (all drives).\nrealloc:\tShow SMART reallocated sectors count (ATA).\nrep_ucor:\tShow SMART reported uncorrectable count (ATA).\ncmd_to:\t\tShow SMART command timeout count (ATA).\npend_sec:\tShow SMART current pending sector count (ATA).\noff_ucor:\tShow SMART offline uncorrectable errors (ATA).\nata_err:\tShow SMART ATA errors (ATA).\n",
                      "markdown": "`hours_on:\tShow number of hours drive powered on (all drives).\nrealloc:\tShow SMART reallocated sectors count (ATA).\nrep_ucor:\tShow SMART reported uncorrectable count (ATA).\ncmd_to:\t\tShow SMART command timeout count (ATA).\npend_sec:\tShow SMART current pending sector count (ATA).\noff_ucor:\tShow SMART offline uncorrectable errors (ATA).\nata_err:\tShow SMART ATA errors (ATA).\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/model"
                },
                "region": {
                  "startLine": 88,
                  "startColumn": 21,
                  "endLine": 88,
                  "endColumn": 26,
                  "snippet": {
                    "text": "\tval=\"\"\n\tif val=$(eval \"lsblk -dl -n -o $i $somepath 2>/dev/null\") ; then\n\t\t# Remove leading/trailing whitespace from value\n\t\tval=$(echo \"$val\" | sed -e 's/^[[:space:]]*//' \\\n\t\t     -e 's/[[:space:]]*$//')\n\tfi\n\techo \"$i=$val\"\n",
                    "rendered": {
                      "text": "\tval=\"\"\n\tif val=$(eval \"lsblk -dl -n -o $i $somepath 2>/dev/null\") ; then\n\t\t# Remove leading/trailing whitespace from value\n\t\tval=$(echo \"$val\" | sed -e 's/^[[:space:]]*//' \\\n\t\t     -e 's/[[:space:]]*$//')\n\tfi\n\techo \"$i=$val\"\n",
                      "markdown": "`\tval=\"\"\n\tif val=$(eval \"lsblk -dl -n -o $i $somepath 2>/dev/null\") ; then\n\t\t# Remove leading/trailing whitespace from value\n\t\tval=$(echo \"$val\" | sed -e 's/^[[:space:]]*//' \\\n\t\t     -e 's/[[:space:]]*$//')\n\tfi\n\techo \"$i=$val\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/model"
                },
                "region": {
                  "startLine": 79,
                  "startColumn": 44,
                  "endLine": 79,
                  "endColumn": 49,
                  "snippet": {
                    "text": "\t# Special case: Looking up the size of a file-based vdev can't\n\t# be done with lsblk.\n\tif [ \"$i\" = \"size\" ] && [ -f \"$somepath\" ] ; then\n\t\tsize=$(du -h --apparent-size \"$somepath\" | cut -f 1)\n\t\techo \"size=$size\"\n\t\tcontinue\n\tfi\n",
                    "rendered": {
                      "text": "\t# Special case: Looking up the size of a file-based vdev can't\n\t# be done with lsblk.\n\tif [ \"$i\" = \"size\" ] && [ -f \"$somepath\" ] ; then\n\t\tsize=$(du -h --apparent-size \"$somepath\" | cut -f 1)\n\t\techo \"size=$size\"\n\t\tcontinue\n\tfi\n",
                      "markdown": "`\t# Special case: Looking up the size of a file-based vdev can't\n\t# be done with lsblk.\n\tif [ \"$i\" = \"size\" ] && [ -f \"$somepath\" ] ; then\n\t\tsize=$(du -h --apparent-size \"$somepath\" | cut -f 1)\n\t\techo \"size=$size\"\n\t\tcontinue\n\tfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/model"
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 56,
                  "endLine": 54,
                  "endColumn": 61,
                  "snippet": {
                    "text": "script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n",
                    "rendered": {
                      "text": "script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n",
                      "markdown": "`script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/model"
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 25,
                  "endLine": 54,
                  "endColumn": 31,
                  "snippet": {
                    "text": "script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n",
                    "rendered": {
                      "text": "script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n",
                      "markdown": "`script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/model"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 8,
                  "endLine": 40,
                  "endColumn": 16,
                  "snippet": {
                    "text": "#    DISC-MAX  discard max bytes\n#   DISC-ZERO  discard zeroes data\n#\n# If the script is run as just 'lsblk' then print out disk size, vendor,\n# and model number.\n\n\n",
                    "rendered": {
                      "text": "#    DISC-MAX  discard max bytes\n#   DISC-ZERO  discard zeroes data\n#\n# If the script is run as just 'lsblk' then print out disk size, vendor,\n# and model number.\n\n\n",
                      "markdown": "`#    DISC-MAX  discard max bytes\n#   DISC-ZERO  discard zeroes data\n#\n# If the script is run as just 'lsblk' then print out disk size, vendor,\n# and model number.\n\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/model"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 21,
                  "endLine": 25,
                  "endColumn": 27,
                  "snippet": {
                    "text": "#       STATE  state of the device\n#       OWNER  user name\n#       GROUP  group name\n#        MODE  device node permissions\n#   ALIGNMENT  alignment offset\n#      MIN-IO  minimum I/O size\n#      OPT-IO  optimal I/O size\n",
                    "rendered": {
                      "text": "#       STATE  state of the device\n#       OWNER  user name\n#       GROUP  group name\n#        MODE  device node permissions\n#   ALIGNMENT  alignment offset\n#      MIN-IO  minimum I/O size\n#      OPT-IO  optimal I/O size\n",
                      "markdown": "`#       STATE  state of the device\n#       OWNER  user name\n#       GROUP  group name\n#        MODE  device node permissions\n#   ALIGNMENT  alignment offset\n#      MIN-IO  minimum I/O size\n#      OPT-IO  optimal I/O size\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/model"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 46,
                  "endLine": 5,
                  "endColumn": 54,
                  "snippet": {
                    "text": "#\n# Print some common lsblk values\n#\n# Any (lowercased) name symlinked to the lsblk script will be passed to lsblk\n# as one of its --output names.  Here's a partial list of --output names\n# from the lsblk binary:\n#\n",
                    "rendered": {
                      "text": "#\n# Print some common lsblk values\n#\n# Any (lowercased) name symlinked to the lsblk script will be passed to lsblk\n# as one of its --output names.  Here's a partial list of --output names\n# from the lsblk binary:\n#\n",
                      "markdown": "`#\n# Print some common lsblk values\n#\n# Any (lowercased) name symlinked to the lsblk script will be passed to lsblk\n# as one of its --output names.  Here's a partial list of --output names\n# from the lsblk binary:\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/media"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 4,
                  "endLine": 23,
                  "endColumn": 10,
                  "snippet": {
                    "text": "\n\tvpd_pg83=\"/sys/block/$device/device/vpd_pg83\"\n\tif [ -f \"$vpd_pg83\" ]; then\n\t\tif grep -q --binary \"iqn.\" \"$vpd_pg83\"; then\n\t\t\tMEDIA=\"iscsi\"\n\t\tfi\n\tfi\n",
                    "rendered": {
                      "text": "\n\tvpd_pg83=\"/sys/block/$device/device/vpd_pg83\"\n\tif [ -f \"$vpd_pg83\" ]; then\n\t\tif grep -q --binary \"iqn.\" \"$vpd_pg83\"; then\n\t\t\tMEDIA=\"iscsi\"\n\t\tfi\n\tfi\n",
                      "markdown": "`\n\tvpd_pg83=\"/sys/block/$device/device/vpd_pg83\"\n\tif [ -f \"$vpd_pg83\" ]; then\n\t\tif grep -q --binary \"iqn.\" \"$vpd_pg83\"; then\n\t\t\tMEDIA=\"iscsi\"\n\t\tfi\n\tfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/lsblk"
                },
                "region": {
                  "startLine": 88,
                  "startColumn": 21,
                  "endLine": 88,
                  "endColumn": 26,
                  "snippet": {
                    "text": "\tval=\"\"\n\tif val=$(eval \"lsblk -dl -n -o $i $somepath 2>/dev/null\") ; then\n\t\t# Remove leading/trailing whitespace from value\n\t\tval=$(echo \"$val\" | sed -e 's/^[[:space:]]*//' \\\n\t\t     -e 's/[[:space:]]*$//')\n\tfi\n\techo \"$i=$val\"\n",
                    "rendered": {
                      "text": "\tval=\"\"\n\tif val=$(eval \"lsblk -dl -n -o $i $somepath 2>/dev/null\") ; then\n\t\t# Remove leading/trailing whitespace from value\n\t\tval=$(echo \"$val\" | sed -e 's/^[[:space:]]*//' \\\n\t\t     -e 's/[[:space:]]*$//')\n\tfi\n\techo \"$i=$val\"\n",
                      "markdown": "`\tval=\"\"\n\tif val=$(eval \"lsblk -dl -n -o $i $somepath 2>/dev/null\") ; then\n\t\t# Remove leading/trailing whitespace from value\n\t\tval=$(echo \"$val\" | sed -e 's/^[[:space:]]*//' \\\n\t\t     -e 's/[[:space:]]*$//')\n\tfi\n\techo \"$i=$val\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/lsblk"
                },
                "region": {
                  "startLine": 79,
                  "startColumn": 44,
                  "endLine": 79,
                  "endColumn": 49,
                  "snippet": {
                    "text": "\t# Special case: Looking up the size of a file-based vdev can't\n\t# be done with lsblk.\n\tif [ \"$i\" = \"size\" ] && [ -f \"$somepath\" ] ; then\n\t\tsize=$(du -h --apparent-size \"$somepath\" | cut -f 1)\n\t\techo \"size=$size\"\n\t\tcontinue\n\tfi\n",
                    "rendered": {
                      "text": "\t# Special case: Looking up the size of a file-based vdev can't\n\t# be done with lsblk.\n\tif [ \"$i\" = \"size\" ] && [ -f \"$somepath\" ] ; then\n\t\tsize=$(du -h --apparent-size \"$somepath\" | cut -f 1)\n\t\techo \"size=$size\"\n\t\tcontinue\n\tfi\n",
                      "markdown": "`\t# Special case: Looking up the size of a file-based vdev can't\n\t# be done with lsblk.\n\tif [ \"$i\" = \"size\" ] && [ -f \"$somepath\" ] ; then\n\t\tsize=$(du -h --apparent-size \"$somepath\" | cut -f 1)\n\t\techo \"size=$size\"\n\t\tcontinue\n\tfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/lsblk"
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 56,
                  "endLine": 54,
                  "endColumn": 61,
                  "snippet": {
                    "text": "script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n",
                    "rendered": {
                      "text": "script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n",
                      "markdown": "`script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/lsblk"
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 25,
                  "endLine": 54,
                  "endColumn": 31,
                  "snippet": {
                    "text": "script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n",
                    "rendered": {
                      "text": "script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n",
                      "markdown": "`script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/lsblk"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 8,
                  "endLine": 40,
                  "endColumn": 16,
                  "snippet": {
                    "text": "#    DISC-MAX  discard max bytes\n#   DISC-ZERO  discard zeroes data\n#\n# If the script is run as just 'lsblk' then print out disk size, vendor,\n# and model number.\n\n\n",
                    "rendered": {
                      "text": "#    DISC-MAX  discard max bytes\n#   DISC-ZERO  discard zeroes data\n#\n# If the script is run as just 'lsblk' then print out disk size, vendor,\n# and model number.\n\n\n",
                      "markdown": "`#    DISC-MAX  discard max bytes\n#   DISC-ZERO  discard zeroes data\n#\n# If the script is run as just 'lsblk' then print out disk size, vendor,\n# and model number.\n\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/lsblk"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 21,
                  "endLine": 25,
                  "endColumn": 27,
                  "snippet": {
                    "text": "#       STATE  state of the device\n#       OWNER  user name\n#       GROUP  group name\n#        MODE  device node permissions\n#   ALIGNMENT  alignment offset\n#      MIN-IO  minimum I/O size\n#      OPT-IO  optimal I/O size\n",
                    "rendered": {
                      "text": "#       STATE  state of the device\n#       OWNER  user name\n#       GROUP  group name\n#        MODE  device node permissions\n#   ALIGNMENT  alignment offset\n#      MIN-IO  minimum I/O size\n#      OPT-IO  optimal I/O size\n",
                      "markdown": "`#       STATE  state of the device\n#       OWNER  user name\n#       GROUP  group name\n#        MODE  device node permissions\n#   ALIGNMENT  alignment offset\n#      MIN-IO  minimum I/O size\n#      OPT-IO  optimal I/O size\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/lsblk"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 46,
                  "endLine": 5,
                  "endColumn": 54,
                  "snippet": {
                    "text": "#\n# Print some common lsblk values\n#\n# Any (lowercased) name symlinked to the lsblk script will be passed to lsblk\n# as one of its --output names.  Here's a partial list of --output names\n# from the lsblk binary:\n#\n",
                    "rendered": {
                      "text": "#\n# Print some common lsblk values\n#\n# Any (lowercased) name symlinked to the lsblk script will be passed to lsblk\n# as one of its --output names.  Here's a partial list of --output names\n# from the lsblk binary:\n#\n",
                      "markdown": "`#\n# Print some common lsblk values\n#\n# Any (lowercased) name symlinked to the lsblk script will be passed to lsblk\n# as one of its --output names.  Here's a partial list of --output names\n# from the lsblk binary:\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zed.d/all-debug.sh"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 6,
                  "endLine": 19,
                  "snippet": {
                    "text": "\nzed_lock \"${ZED_DEBUG_LOG}\"\n{\n\tenv | sort\n\techo\n} 1>&\"${ZED_FLOCK_FD}\"\nzed_unlock \"${ZED_DEBUG_LOG}\"\n\n",
                    "rendered": {
                      "text": "\nzed_lock \"${ZED_DEBUG_LOG}\"\n{\n\tenv | sort\n\techo\n} 1>&\"${ZED_FLOCK_FD}\"\nzed_unlock \"${ZED_DEBUG_LOG}\"\n\n",
                      "markdown": "`\nzed_lock \"${ZED_DEBUG_LOG}\"\n{\n\tenv | sort\n\techo\n} 1>&\"${ZED_FLOCK_FD}\"\nzed_unlock \"${ZED_DEBUG_LOG}\"\n\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zed.d/all-debug.sh"
                },
                "region": {
                  "startLine": 18,
                  "endLine": 18,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\nzed_lock \"${ZED_DEBUG_LOG}\"\n{\n\tenv | sort\n\techo\n} 1>&\"${ZED_FLOCK_FD}\"\nzed_unlock \"${ZED_DEBUG_LOG}\"\n",
                    "rendered": {
                      "text": "\nzed_lock \"${ZED_DEBUG_LOG}\"\n{\n\tenv | sort\n\techo\n} 1>&\"${ZED_FLOCK_FD}\"\nzed_unlock \"${ZED_DEBUG_LOG}\"\n",
                      "markdown": "`\nzed_lock \"${ZED_DEBUG_LOG}\"\n{\n\tenv | sort\n\techo\n} 1>&\"${ZED_FLOCK_FD}\"\nzed_unlock \"${ZED_DEBUG_LOG}\"\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/bin/zilstat"
                },
                "region": {
                  "startLine": 82,
                  "endLine": 83,
                  "endColumn": 4,
                  "snippet": {
                    "text": "\nghdr = [\"time\", \"cc\", \"ic\", \"idc\", \"idb\", \"iic\", \"iib\",\n\t\"imnc\", \"imnw\", \"imsc\", \"imsw\"]\n\ncmd = (\"Usage: zilstat [-hgdv] [-i interval] [-p pool_name]\")\n\ncurr = {}\ndiff = {}\n",
                    "rendered": {
                      "text": "\nghdr = [\"time\", \"cc\", \"ic\", \"idc\", \"idb\", \"iic\", \"iib\",\n\t\"imnc\", \"imnw\", \"imsc\", \"imsw\"]\n\ncmd = (\"Usage: zilstat [-hgdv] [-i interval] [-p pool_name]\")\n\ncurr = {}\ndiff = {}\n",
                      "markdown": "`\nghdr = [\"time\", \"cc\", \"ic\", \"idc\", \"idb\", \"iic\", \"iib\",\n\t\"imnc\", \"imnw\", \"imsc\", \"imsw\"]\n\ncmd = (\"Usage: zilstat [-hgdv] [-i interval] [-p pool_name]\")\n\ncurr = {}\ndiff = {}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/bin/zilstat"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 35,
                  "endLine": 19,
                  "endColumn": 39,
                  "snippet": {
                    "text": "# and limitations under the License.\n#\n# When distributing Covered Code, include this CDDL HEADER in each\n# file and include the License file at usr/src/OPENSOLARIS.LICENSE.\n# If applicable, add the following below this CDDL HEADER, with the\n# fields enclosed by brackets \"[]\" replaced with your own identifying\n# information: Portions Copyright [yyyy] [name of copyright owner]\n",
                    "rendered": {
                      "text": "# and limitations under the License.\n#\n# When distributing Covered Code, include this CDDL HEADER in each\n# file and include the License file at usr/src/OPENSOLARIS.LICENSE.\n# If applicable, add the following below this CDDL HEADER, with the\n# fields enclosed by brackets \"[]\" replaced with your own identifying\n# information: Portions Copyright [yyyy] [name of copyright owner]\n",
                      "markdown": "`# and limitations under the License.\n#\n# When distributing Covered Code, include this CDDL HEADER in each\n# file and include the License file at usr/src/OPENSOLARIS.LICENSE.\n# If applicable, add the following below this CDDL HEADER, with the\n# fields enclosed by brackets \"[]\" replaced with your own identifying\n# information: Portions Copyright [yyyy] [name of copyright owner]\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/bin/zilstat"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 38,
                  "endLine": 13,
                  "endColumn": 42,
                  "snippet": {
                    "text": "# (the \"License\").  You may not use this file except in compliance\n# with the License.\n#\n# You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE\n# or https://opensource.org/licenses/CDDL-1.0.\n# See the License for the specific language governing permissions\n# and limitations under the License.\n",
                    "rendered": {
                      "text": "# (the \"License\").  You may not use this file except in compliance\n# with the License.\n#\n# You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE\n# or https://opensource.org/licenses/CDDL-1.0.\n# See the License for the specific language governing permissions\n# and limitations under the License.\n",
                      "markdown": "`# (the \"License\").  You may not use this file except in compliance\n# with the License.\n#\n# You can obtain a copy of the license at usr/src/OPENSOLARIS.LICENSE\n# or https://opensource.org/licenses/CDDL-1.0.\n# See the License for the specific language governing permissions\n# and limitations under the License.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/bin/zilstat"
                },
                "region": {
                  "startLine": 545,
                  "startColumn": 1,
                  "endLine": 545,
                  "endColumn": 7,
                  "snippet": {
                    "text": "\t\t\tprint_dict(diff)\n\t\t\ttime.sleep(interval)\n\telse:\n\t\tdiff = curr\n\t\tzil_extend_dict()\n\t\tprint_dict(diff)\n\n",
                    "rendered": {
                      "text": "\t\t\tprint_dict(diff)\n\t\t\ttime.sleep(interval)\n\telse:\n\t\tdiff = curr\n\t\tzil_extend_dict()\n\t\tprint_dict(diff)\n\n",
                      "markdown": "`\t\t\tprint_dict(diff)\n\t\t\ttime.sleep(interval)\n\telse:\n\t\tdiff = curr\n\t\tzil_extend_dict()\n\t\tprint_dict(diff)\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/bin/zilstat"
                },
                "region": {
                  "startLine": 523,
                  "startColumn": 13,
                  "endLine": 524,
                  "snippet": {
                    "text": "\ndef main():\n\tglobal interval\n\tglobal curr, diff\n\thprint = False\n\tinit()\n\tsignal.signal(signal.SIGINT, signal.SIG_DFL)\n\tsignal.signal(signal.SIGPIPE, sign_handler_epipe)\n",
                    "rendered": {
                      "text": "\ndef main():\n\tglobal interval\n\tglobal curr, diff\n\thprint = False\n\tinit()\n\tsignal.signal(signal.SIGINT, signal.SIG_DFL)\n\tsignal.signal(signal.SIGPIPE, sign_handler_epipe)\n",
                      "markdown": "`\ndef main():\n\tglobal interval\n\tglobal curr, diff\n\thprint = False\n\tinit()\n\tsignal.signal(signal.SIGINT, signal.SIG_DFL)\n\tsignal.signal(signal.SIGPIPE, sign_handler_epipe)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/bin/zilstat"
                },
                "region": {
                  "startLine": 446,
                  "startColumn": 7,
                  "endLine": 447,
                  "snippet": {
                    "text": "\t\t\tcurr[pool][objset][key] = val\n\ndef zil_extend_dict():\n\tglobal diff\n\tfor pool in diff:\n\t\tfor objset in diff[pool]:\n\t\t\tdiff[pool][objset][\"pool\"] = pool\n\t\t\tdiff[pool][objset][\"objset\"] = objset\n",
                    "rendered": {
                      "text": "\t\t\tcurr[pool][objset][key] = val\n\ndef zil_extend_dict():\n\tglobal diff\n\tfor pool in diff:\n\t\tfor objset in diff[pool]:\n\t\t\tdiff[pool][objset][\"pool\"] = pool\n\t\t\tdiff[pool][objset][\"objset\"] = objset\n",
                      "markdown": "`\t\t\tcurr[pool][objset][key] = val\n\ndef zil_extend_dict():\n\tglobal diff\n\tfor pool in diff:\n\t\tfor objset in diff[pool]:\n\t\t\tdiff[pool][objset][\"pool\"] = pool\n\t\t\tdiff[pool][objset][\"objset\"] = objset\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/bin/zilstat"
                },
                "region": {
                  "startLine": 426,
                  "startColumn": 11,
                  "endLine": 426,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\t\t\t\tif not isinstance(diff[pool][objset][key], int):\n\t\t\t\t\tcontinue\n\t\t\t\t# If prev is NULL, this is the\n\t\t\t\t# first time we are here\n\t\t\t\tif not prev:\n\t\t\t\t\tdiff[pool][objset][key] = 0\n\t\t\t\telse:\n",
                    "rendered": {
                      "text": "\t\t\t\tif not isinstance(diff[pool][objset][key], int):\n\t\t\t\t\tcontinue\n\t\t\t\t# If prev is NULL, this is the\n\t\t\t\t# first time we are here\n\t\t\t\tif not prev:\n\t\t\t\t\tdiff[pool][objset][key] = 0\n\t\t\t\telse:\n",
                      "markdown": "`\t\t\t\tif not isinstance(diff[pool][objset][key], int):\n\t\t\t\t\tcontinue\n\t\t\t\t# If prev is NULL, this is the\n\t\t\t\t# first time we are here\n\t\t\t\tif not prev:\n\t\t\t\t\tdiff[pool][objset][key] = 0\n\t\t\t\telse:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/bin/zilstat"
                },
                "region": {
                  "startLine": 419,
                  "endLine": 419,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\tglobal curr, diff\n\tprev = copy.deepcopy(curr)\n\tzil_process_kstat()\n\tdiff = copy.deepcopy(curr)\n\tfor pool in curr:\n\t\tfor objset in curr[pool]:\n\t\t\tfor key in curr[pool][objset]:\n",
                    "rendered": {
                      "text": "\tglobal curr, diff\n\tprev = copy.deepcopy(curr)\n\tzil_process_kstat()\n\tdiff = copy.deepcopy(curr)\n\tfor pool in curr:\n\t\tfor objset in curr[pool]:\n\t\t\tfor key in curr[pool][objset]:\n",
                      "markdown": "`\tglobal curr, diff\n\tprev = copy.deepcopy(curr)\n\tzil_process_kstat()\n\tdiff = copy.deepcopy(curr)\n\tfor pool in curr:\n\t\tfor objset in curr[pool]:\n\t\t\tfor key in curr[pool][objset]:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/bin/zilstat"
                },
                "region": {
                  "startLine": 416,
                  "startColumn": 13,
                  "endLine": 417,
                  "snippet": {
                    "text": "\t\t\t\tzil_build_dict(pool)\n\ndef calculate_diff():\n\tglobal curr, diff\n\tprev = copy.deepcopy(curr)\n\tzil_process_kstat()\n\tdiff = copy.deepcopy(curr)\n\tfor pool in curr:\n",
                    "rendered": {
                      "text": "\t\t\t\tzil_build_dict(pool)\n\ndef calculate_diff():\n\tglobal curr, diff\n\tprev = copy.deepcopy(curr)\n\tzil_process_kstat()\n\tdiff = copy.deepcopy(curr)\n\tfor pool in curr:\n",
                      "markdown": "`\t\t\t\tzil_build_dict(pool)\n\ndef calculate_diff():\n\tglobal curr, diff\n\tprev = copy.deepcopy(curr)\n\tzil_process_kstat()\n\tdiff = copy.deepcopy(curr)\n\tfor pool in curr:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/bin/zilstat"
                },
                "region": {
                  "startLine": 85,
                  "startColumn": 9,
                  "endLine": 86,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\ncmd = (\"Usage: zilstat [-hgdv] [-i interval] [-p pool_name]\")\n\ncurr = {}\ndiff = {}\nkstat = {}\nds_pairs = {}\npool_name = None\n",
                    "rendered": {
                      "text": "\ncmd = (\"Usage: zilstat [-hgdv] [-i interval] [-p pool_name]\")\n\ncurr = {}\ndiff = {}\nkstat = {}\nds_pairs = {}\npool_name = None\n",
                      "markdown": "`\ncmd = (\"Usage: zilstat [-hgdv] [-i interval] [-p pool_name]\")\n\ncurr = {}\ndiff = {}\nkstat = {}\nds_pairs = {}\npool_name = None\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/bin/zilstat"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 6,
                  "endLine": 30,
                  "snippet": {
                    "text": "\nimport sys\nimport subprocess\nimport time\nimport copy\nimport os\nimport re\nimport signal\n",
                    "rendered": {
                      "text": "\nimport sys\nimport subprocess\nimport time\nimport copy\nimport os\nimport re\nimport signal\n",
                      "markdown": "`\nimport sys\nimport subprocess\nimport time\nimport copy\nimport os\nimport re\nimport signal\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/bin/zilstat"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 6,
                  "endLine": 24,
                  "endColumn": 14,
                  "snippet": {
                    "text": "# fields enclosed by brackets \"[]\" replaced with your own identifying\n# information: Portions Copyright [yyyy] [name of copyright owner]\n#\n# This script must remain compatible with Python 3.6+.\n#\n\nimport sys\n",
                    "rendered": {
                      "text": "# fields enclosed by brackets \"[]\" replaced with your own identifying\n# information: Portions Copyright [yyyy] [name of copyright owner]\n#\n# This script must remain compatible with Python 3.6+.\n#\n\nimport sys\n",
                      "markdown": "`# fields enclosed by brackets \"[]\" replaced with your own identifying\n# information: Portions Copyright [yyyy] [name of copyright owner]\n#\n# This script must remain compatible with Python 3.6+.\n#\n\nimport sys\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/etc/init.d/zfs-share"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 46,
                  "endLine": 55,
                  "endColumn": 55,
                  "snippet": {
                    "text": "\n\tcheck_module_loaded \"zfs\" || exit 0\n\n\tzfs_action \"Unsharing ZFS filesystems\" \"$ZFS\" unshare -a\n}\n\n# ----------------------------------------------------\n",
                    "rendered": {
                      "text": "\n\tcheck_module_loaded \"zfs\" || exit 0\n\n\tzfs_action \"Unsharing ZFS filesystems\" \"$ZFS\" unshare -a\n}\n\n# ----------------------------------------------------\n",
                      "markdown": "`\n\tcheck_module_loaded \"zfs\" || exit 0\n\n\tzfs_action \"Unsharing ZFS filesystems\" \"$ZFS\" unshare -a\n}\n\n# ----------------------------------------------------\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/etc/init.d/zfs-share"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 24,
                  "endLine": 30,
                  "snippet": {
                    "text": "# This script is based on debian/zfsutils.zfs.init from the\n# Debian GNU/kFreeBSD zfsutils 8.1-3 package, written by Aurelien Jarno.\n\n# Source the common init script\n. /etc/zfs/zfs-functions\n\n# ----------------------------------------------------\n\n",
                    "rendered": {
                      "text": "# This script is based on debian/zfsutils.zfs.init from the\n# Debian GNU/kFreeBSD zfsutils 8.1-3 package, written by Aurelien Jarno.\n\n# Source the common init script\n. /etc/zfs/zfs-functions\n\n# ----------------------------------------------------\n\n",
                      "markdown": "`# This script is based on debian/zfsutils.zfs.init from the\n# Debian GNU/kFreeBSD zfsutils 8.1-3 package, written by Aurelien Jarno.\n\n# Source the common init script\n. /etc/zfs/zfs-functions\n\n# ----------------------------------------------------\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/etc/init.d/zfs-share"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 6,
                  "endLine": 26,
                  "endColumn": 14,
                  "snippet": {
                    "text": "#\n# Released under the 2-clause BSD license.\n#\n# This script is based on debian/zfsutils.zfs.init from the\n# Debian GNU/kFreeBSD zfsutils 8.1-3 package, written by Aurelien Jarno.\n\n# Source the common init script\n",
                    "rendered": {
                      "text": "#\n# Released under the 2-clause BSD license.\n#\n# This script is based on debian/zfsutils.zfs.init from the\n# Debian GNU/kFreeBSD zfsutils 8.1-3 package, written by Aurelien Jarno.\n\n# Source the common init script\n",
                      "markdown": "`#\n# Released under the 2-clause BSD license.\n#\n# This script is based on debian/zfsutils.zfs.init from the\n# Debian GNU/kFreeBSD zfsutils 8.1-3 package, written by Aurelien Jarno.\n\n# Source the common init script\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/etc/init.d/zfs-share"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 51,
                  "endLine": 20,
                  "endColumn": 60,
                  "snippet": {
                    "text": "# Should-Start:      iscsi iscsitarget istgt scst nfs samba samba4 zfs-mount zfs-zed\n# Should-Stop:       iscsi iscsitarget istgt scst nfs samba samba4 zfs-mount zfs-zed\n# Short-Description: Network share ZFS datasets and volumes.\n# Description:       Run the `zfs share -a` or `zfs unshare -a` commands\n#                    for controlling iSCSI, NFS, or CIFS network shares.\n### END INIT INFO\n#\n",
                    "rendered": {
                      "text": "# Should-Start:      iscsi iscsitarget istgt scst nfs samba samba4 zfs-mount zfs-zed\n# Should-Stop:       iscsi iscsitarget istgt scst nfs samba samba4 zfs-mount zfs-zed\n# Short-Description: Network share ZFS datasets and volumes.\n# Description:       Run the `zfs share -a` or `zfs unshare -a` commands\n#                    for controlling iSCSI, NFS, or CIFS network shares.\n### END INIT INFO\n#\n",
                      "markdown": "`# Should-Start:      iscsi iscsitarget istgt scst nfs samba samba4 zfs-mount zfs-zed\n# Should-Stop:       iscsi iscsitarget istgt scst nfs samba samba4 zfs-mount zfs-zed\n# Short-Description: Network share ZFS datasets and volumes.\n# Description:       Run the `zfs share -a` or `zfs unshare -a` commands\n#                    for controlling iSCSI, NFS, or CIFS network shares.\n### END INIT INFO\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/etc/init.d/zfs-share"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 46,
                  "endLine": 7,
                  "endColumn": 55,
                  "snippet": {
                    "text": "# zfs-share     This script will network share zfs filesystems and volumes.\n#\n# chkconfig:    2345 30 99\n# description:  Run the `zfs share -a` or `zfs unshare -a` commands\n#               for controlling iSCSI, NFS, or CIFS network shares.\n# probe: true\n#\n",
                    "rendered": {
                      "text": "# zfs-share     This script will network share zfs filesystems and volumes.\n#\n# chkconfig:    2345 30 99\n# description:  Run the `zfs share -a` or `zfs unshare -a` commands\n#               for controlling iSCSI, NFS, or CIFS network shares.\n# probe: true\n#\n",
                      "markdown": "`# zfs-share     This script will network share zfs filesystems and volumes.\n#\n# chkconfig:    2345 30 99\n# description:  Run the `zfs share -a` or `zfs unshare -a` commands\n#               for controlling iSCSI, NFS, or CIFS network shares.\n# probe: true\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/etc/init.d/zfs-share"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 20,
                  "endLine": 4,
                  "endColumn": 28,
                  "snippet": {
                    "text": "#!/bin/sh\n# shellcheck disable=SC2154\n#\n# zfs-share     This script will network share zfs filesystems and volumes.\n#\n# chkconfig:    2345 30 99\n# description:  Run the `zfs share -a` or `zfs unshare -a` commands\n",
                    "rendered": {
                      "text": "#!/bin/sh\n# shellcheck disable=SC2154\n#\n# zfs-share     This script will network share zfs filesystems and volumes.\n#\n# chkconfig:    2345 30 99\n# description:  Run the `zfs share -a` or `zfs unshare -a` commands\n",
                      "markdown": "`#!/bin/sh\n# shellcheck disable=SC2154\n#\n# zfs-share     This script will network share zfs filesystems and volumes.\n#\n# chkconfig:    2345 30 99\n# description:  Run the `zfs share -a` or `zfs unshare -a` commands\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/defect"
                },
                "region": {
                  "startLine": 244,
                  "startColumn": 47,
                  "endLine": 244,
                  "endColumn": 52,
                  "snippet": {
                    "text": "\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n\nif [ -n \"$without_vals\" ]; then\n",
                    "rendered": {
                      "text": "\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n\nif [ -n \"$without_vals\" ]; then\n",
                      "markdown": "`\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n\nif [ -n \"$without_vals\" ]; then\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/defect"
                },
                "region": {
                  "startLine": 242,
                  "startColumn": 29,
                  "endLine": 242,
                  "endColumn": 34,
                  "snippet": {
                    "text": "\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n",
                    "rendered": {
                      "text": "\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n",
                      "markdown": "`\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/defect"
                },
                "region": {
                  "startLine": 242,
                  "startColumn": 1,
                  "endLine": 242,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n",
                    "rendered": {
                      "text": "\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n",
                      "markdown": "`\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/defect"
                },
                "region": {
                  "startLine": 241,
                  "startColumn": 1,
                  "endLine": 241,
                  "endColumn": 7,
                  "snippet": {
                    "text": "if [ -n \"$with_vals\" ]; then\n\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\n",
                    "rendered": {
                      "text": "if [ -n \"$with_vals\" ]; then\n\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\n",
                      "markdown": "`if [ -n \"$with_vals\" ]; then\n\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/defect"
                },
                "region": {
                  "startLine": 237,
                  "startColumn": 25,
                  "endLine": 237,
                  "endColumn": 31,
                  "snippet": {
                    "text": "\tscripts=\"$script\"\nesac\n\nwith_vals=$(echo \"$out\" | grep -E \"$scripts\")\nif [ -n \"$with_vals\" ]; then\n\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n",
                    "rendered": {
                      "text": "\tscripts=\"$script\"\nesac\n\nwith_vals=$(echo \"$out\" | grep -E \"$scripts\")\nif [ -n \"$with_vals\" ]; then\n\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n",
                      "markdown": "`\tscripts=\"$script\"\nesac\n\nwith_vals=$(echo \"$out\" | grep -E \"$scripts\")\nif [ -n \"$with_vals\" ]; then\n\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/defect"
                },
                "region": {
                  "startLine": 199,
                  "startColumn": 36,
                  "endLine": 199,
                  "endColumn": 41,
                  "snippet": {
                    "text": "END {print \"type=\"type; ORS=\"\\n\"; print \"\"}\n');\nfi\ntype=$(echo \"$out\" | grep '^type=' | cut -d '=' -f 2)\n\n# If type is not set by now, either we don't have a block device\n# or smartctl failed. Either way, default to ATA and set $out to\n",
                    "rendered": {
                      "text": "END {print \"type=\"type; ORS=\"\\n\"; print \"\"}\n');\nfi\ntype=$(echo \"$out\" | grep '^type=' | cut -d '=' -f 2)\n\n# If type is not set by now, either we don't have a block device\n# or smartctl failed. Either way, default to ATA and set $out to\n",
                      "markdown": "`END {print \"type=\"type; ORS=\"\\n\"; print \"\"}\n');\nfi\ntype=$(echo \"$out\" | grep '^type=' | cut -d '=' -f 2)\n\n# If type is not set by now, either we don't have a block device\n# or smartctl failed. Either way, default to ATA and set $out to\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/defect"
                },
                "region": {
                  "startLine": 199,
                  "startColumn": 20,
                  "endLine": 199,
                  "endColumn": 26,
                  "snippet": {
                    "text": "END {print \"type=\"type; ORS=\"\\n\"; print \"\"}\n');\nfi\ntype=$(echo \"$out\" | grep '^type=' | cut -d '=' -f 2)\n\n# If type is not set by now, either we don't have a block device\n# or smartctl failed. Either way, default to ATA and set $out to\n",
                    "rendered": {
                      "text": "END {print \"type=\"type; ORS=\"\\n\"; print \"\"}\n');\nfi\ntype=$(echo \"$out\" | grep '^type=' | cut -d '=' -f 2)\n\n# If type is not set by now, either we don't have a block device\n# or smartctl failed. Either way, default to ATA and set $out to\n",
                      "markdown": "`END {print \"type=\"type; ORS=\"\\n\"; print \"\"}\n');\nfi\ntype=$(echo \"$out\" | grep '^type=' | cut -d '=' -f 2)\n\n# If type is not set by now, either we don't have a block device\n# or smartctl failed. Either way, default to ATA and set $out to\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/defect"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 24,
                  "endLine": 103,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\t# NVMe:\n\t#       SMART/Health Information (NVMe Log 0xnn, NSID 0xnn)\n\t#\n\tout=$(echo \"$raw_out\" | awk '\n# SAS specific\n/read:/{print \"rrd=\"$4\"\\nr_cor=\"$5\"\\nr_proc=\"$7\"\\nr_ucor=\"$8}\n/write:/{print \"rwr=\"$4\"\\nw_cor=\"$5\"\\nw_proc=\"$7\"\\nw_ucor=\"$8}\n",
                    "rendered": {
                      "text": "\t# NVMe:\n\t#       SMART/Health Information (NVMe Log 0xnn, NSID 0xnn)\n\t#\n\tout=$(echo \"$raw_out\" | awk '\n# SAS specific\n/read:/{print \"rrd=\"$4\"\\nr_cor=\"$5\"\\nr_proc=\"$7\"\\nr_ucor=\"$8}\n/write:/{print \"rwr=\"$4\"\\nw_cor=\"$5\"\\nw_proc=\"$7\"\\nw_ucor=\"$8}\n",
                      "markdown": "`\t# NVMe:\n\t#       SMART/Health Information (NVMe Log 0xnn, NSID 0xnn)\n\t#\n\tout=$(echo \"$raw_out\" | awk '\n# SAS specific\n/read:/{print \"rrd=\"$4\"\\nr_cor=\"$5\"\\nr_proc=\"$7\"\\nr_ucor=\"$8}\n/write:/{print \"rwr=\"$4\"\\nw_cor=\"$5\"\\nw_proc=\"$7\"\\nw_ucor=\"$8}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/defect"
                },
                "region": {
                  "startLine": 83,
                  "startColumn": 3,
                  "endLine": 83,
                  "endColumn": 8,
                  "snippet": {
                    "text": "\nif [ -b \"$somepath\" ] && PATH=\"/usr/sbin:$PATH\" command -v smartctl > /dev/null || [ -n \"$samples\" ] ; then\n\tif [ -n \"$samples\" ] ; then\n\t\t# cat a smartctl output text file instead of running smartctl\n\t\t# on a vdev (only used for developer testing).\n\t\tfile=$(get_filename_from_dir \"$samples\")\n\t\techo \"file=$file\"\n",
                    "rendered": {
                      "text": "\nif [ -b \"$somepath\" ] && PATH=\"/usr/sbin:$PATH\" command -v smartctl > /dev/null || [ -n \"$samples\" ] ; then\n\tif [ -n \"$samples\" ] ; then\n\t\t# cat a smartctl output text file instead of running smartctl\n\t\t# on a vdev (only used for developer testing).\n\t\tfile=$(get_filename_from_dir \"$samples\")\n\t\techo \"file=$file\"\n",
                      "markdown": "`\nif [ -b \"$somepath\" ] && PATH=\"/usr/sbin:$PATH\" command -v smartctl > /dev/null || [ -n \"$samples\" ] ; then\n\tif [ -n \"$samples\" ] ; then\n\t\t# cat a smartctl output text file instead of running smartctl\n\t\t# on a vdev (only used for developer testing).\n\t\tfile=$(get_filename_from_dir \"$samples\")\n\t\techo \"file=$file\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/defect"
                },
                "region": {
                  "startLine": 68,
                  "startColumn": 56,
                  "endLine": 68,
                  "endColumn": 61,
                  "snippet": {
                    "text": "script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n",
                    "rendered": {
                      "text": "script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n",
                      "markdown": "`script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/defect"
                },
                "region": {
                  "startLine": 68,
                  "startColumn": 25,
                  "endLine": 68,
                  "endColumn": 31,
                  "snippet": {
                    "text": "script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n",
                    "rendered": {
                      "text": "script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n",
                      "markdown": "`script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/defect"
                },
                "region": {
                  "startLine": 56,
                  "endLine": 56,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\tnum_files=$(find \"$dir\" -maxdepth 1 -type f | wc -l)\n\tmod=$((pid % num_files))\n\ti=0\n\tfind \"$dir\" -type f -printf '%f\\n' | while read -r file ; do\n\t\tif [ \"$mod\" = \"$i\" ] ; then\n\t\t\techo \"$file\"\n\t\t\tbreak\n",
                    "rendered": {
                      "text": "\tnum_files=$(find \"$dir\" -maxdepth 1 -type f | wc -l)\n\tmod=$((pid % num_files))\n\ti=0\n\tfind \"$dir\" -type f -printf '%f\\n' | while read -r file ; do\n\t\tif [ \"$mod\" = \"$i\" ] ; then\n\t\t\techo \"$file\"\n\t\t\tbreak\n",
                      "markdown": "`\tnum_files=$(find \"$dir\" -maxdepth 1 -type f | wc -l)\n\tmod=$((pid % num_files))\n\ti=0\n\tfind \"$dir\" -type f -printf '%f\\n' | while read -r file ; do\n\t\tif [ \"$mod\" = \"$i\" ] ; then\n\t\t\techo \"$file\"\n\t\t\tbreak\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/defect"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 38,
                  "endLine": 47,
                  "endColumn": 46,
                  "snippet": {
                    "text": "#\n# Look in directory DIR and return a filename from it.  The filename returned\n# is chosen quasi-sequentially (based off our PID).  This allows us to return\n# a different filename every time this script is invoked (which we do for each\n# vdev), without having to maintain state.\nget_filename_from_dir()\n{\n",
                    "rendered": {
                      "text": "#\n# Look in directory DIR and return a filename from it.  The filename returned\n# is chosen quasi-sequentially (based off our PID).  This allows us to return\n# a different filename every time this script is invoked (which we do for each\n# vdev), without having to maintain state.\nget_filename_from_dir()\n{\n",
                      "markdown": "`#\n# Look in directory DIR and return a filename from it.  The filename returned\n# is chosen quasi-sequentially (based off our PID).  This allows us to return\n# a different filename every time this script is invoked (which we do for each\n# vdev), without having to maintain state.\nget_filename_from_dir()\n{\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/defect"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 28,
                  "endLine": 47,
                  "endColumn": 34,
                  "snippet": {
                    "text": "#\n# Look in directory DIR and return a filename from it.  The filename returned\n# is chosen quasi-sequentially (based off our PID).  This allows us to return\n# a different filename every time this script is invoked (which we do for each\n# vdev), without having to maintain state.\nget_filename_from_dir()\n{\n",
                    "rendered": {
                      "text": "#\n# Look in directory DIR and return a filename from it.  The filename returned\n# is chosen quasi-sequentially (based off our PID).  This allows us to return\n# a different filename every time this script is invoked (which we do for each\n# vdev), without having to maintain state.\nget_filename_from_dir()\n{\n",
                      "markdown": "`#\n# Look in directory DIR and return a filename from it.  The filename returned\n# is chosen quasi-sequentially (based off our PID).  This allows us to return\n# a different filename every time this script is invoked (which we do for each\n# vdev), without having to maintain state.\nget_filename_from_dir()\n{\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/defect"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 27,
                  "endLine": 20,
                  "endColumn": 36,
                  "snippet": {
                    "text": "hours_on:\tShow number of hours drive powered on (all drives).\nrealloc:\tShow SMART reallocated sectors count (ATA).\nrep_ucor:\tShow SMART reported uncorrectable count (ATA).\ncmd_to:\t\tShow SMART command timeout count (ATA).\npend_sec:\tShow SMART current pending sector count (ATA).\noff_ucor:\tShow SMART offline uncorrectable errors (ATA).\nata_err:\tShow SMART ATA errors (ATA).\n",
                    "rendered": {
                      "text": "hours_on:\tShow number of hours drive powered on (all drives).\nrealloc:\tShow SMART reallocated sectors count (ATA).\nrep_ucor:\tShow SMART reported uncorrectable count (ATA).\ncmd_to:\t\tShow SMART command timeout count (ATA).\npend_sec:\tShow SMART current pending sector count (ATA).\noff_ucor:\tShow SMART offline uncorrectable errors (ATA).\nata_err:\tShow SMART ATA errors (ATA).\n",
                      "markdown": "`hours_on:\tShow number of hours drive powered on (all drives).\nrealloc:\tShow SMART reallocated sectors count (ATA).\nrep_ucor:\tShow SMART reported uncorrectable count (ATA).\ncmd_to:\t\tShow SMART command timeout count (ATA).\npend_sec:\tShow SMART current pending sector count (ATA).\noff_ucor:\tShow SMART offline uncorrectable errors (ATA).\nata_err:\tShow SMART ATA errors (ATA).\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/lib/dracut/modules.d/90zfs/zfs-load-key.sh"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 73,
                  "endLine": 37,
                  "endColumn": 81,
                  "snippet": {
                    "text": "    case \"${KEYLOCATION%%://*}\" in\n        prompt)\n            for _ in 1 2 3; do\n                systemd-ask-password --timeout=0 --no-tty \"Encrypted ZFS password for ${dataset}\" | zfs load-key \"${ENCRYPTIONROOT}\" && break\n            done\n            ;;\n        http*)\n",
                    "rendered": {
                      "text": "    case \"${KEYLOCATION%%://*}\" in\n        prompt)\n            for _ in 1 2 3; do\n                systemd-ask-password --timeout=0 --no-tty \"Encrypted ZFS password for ${dataset}\" | zfs load-key \"${ENCRYPTIONROOT}\" && break\n            done\n            ;;\n        http*)\n",
                      "markdown": "`    case \"${KEYLOCATION%%://*}\" in\n        prompt)\n            for _ in 1 2 3; do\n                systemd-ask-password --timeout=0 --no-tty \"Encrypted ZFS password for ${dataset}\" | zfs load-key \"${ENCRYPTIONROOT}\" && break\n            done\n            ;;\n        http*)\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/lib/dracut/modules.d/90zfs/zfs-load-key.sh"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 28,
                  "endLine": 37,
                  "endColumn": 36,
                  "snippet": {
                    "text": "    case \"${KEYLOCATION%%://*}\" in\n        prompt)\n            for _ in 1 2 3; do\n                systemd-ask-password --timeout=0 --no-tty \"Encrypted ZFS password for ${dataset}\" | zfs load-key \"${ENCRYPTIONROOT}\" && break\n            done\n            ;;\n        http*)\n",
                    "rendered": {
                      "text": "    case \"${KEYLOCATION%%://*}\" in\n        prompt)\n            for _ in 1 2 3; do\n                systemd-ask-password --timeout=0 --no-tty \"Encrypted ZFS password for ${dataset}\" | zfs load-key \"${ENCRYPTIONROOT}\" && break\n            done\n            ;;\n        http*)\n",
                      "markdown": "`    case \"${KEYLOCATION%%://*}\" in\n        prompt)\n            for _ in 1 2 3; do\n                systemd-ask-password --timeout=0 --no-tty \"Encrypted ZFS password for ${dataset}\" | zfs load-key \"${ENCRYPTIONROOT}\" && break\n            done\n            ;;\n        http*)\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/lib/dracut/modules.d/90zfs/zfs-load-key.sh"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 11,
                  "endLine": 41,
                  "endColumn": 22,
                  "snippet": {
                    "text": "            done\n            ;;\n        http*)\n            systemctl start network-online.target\n            zfs load-key \"${ENCRYPTIONROOT}\"\n            ;;\n        file)\n",
                    "rendered": {
                      "text": "            done\n            ;;\n        http*)\n            systemctl start network-online.target\n            zfs load-key \"${ENCRYPTIONROOT}\"\n            ;;\n        file)\n",
                      "markdown": "`            done\n            ;;\n        http*)\n            systemctl start network-online.target\n            zfs load-key \"${ENCRYPTIONROOT}\"\n            ;;\n        file)\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/lib/dracut/modules.d/90zfs/zfs-load-key.sh"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 42,
                  "endLine": 20,
                  "endColumn": 48,
                  "snippet": {
                    "text": "\nBOOTFS=\"$root\"\nif [ \"$BOOTFS\" = \"zfs:AUTO\" ]; then\n    BOOTFS=\"$(zpool get -Ho value bootfs | grep -m1 -vFx -)\"\nfi\n\n[ \"$(zpool get -Ho value feature@encryption \"${BOOTFS%%/*}\")\" = 'active' ] || return 0\n",
                    "rendered": {
                      "text": "\nBOOTFS=\"$root\"\nif [ \"$BOOTFS\" = \"zfs:AUTO\" ]; then\n    BOOTFS=\"$(zpool get -Ho value bootfs | grep -m1 -vFx -)\"\nfi\n\n[ \"$(zpool get -Ho value feature@encryption \"${BOOTFS%%/*}\")\" = 'active' ] || return 0\n",
                      "markdown": "`\nBOOTFS=\"$root\"\nif [ \"$BOOTFS\" = \"zfs:AUTO\" ]; then\n    BOOTFS=\"$(zpool get -Ho value bootfs | grep -m1 -vFx -)\"\nfi\n\n[ \"$(zpool get -Ho value feature@encryption \"${BOOTFS%%/*}\")\" = 'active' ] || return 0\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/lib/dracut/modules.d/90zfs/zfs-load-key.sh"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 3,
                  "endLine": 14,
                  "endColumn": 14,
                  "snippet": {
                    "text": "\n# There is a race between the zpool import and the pre-mount hooks, so we wait for a pool to be imported\nwhile ! systemctl is-active --quiet zfs-import.target; do\n    systemctl is-failed --quiet zfs-import-cache.service zfs-import-scan.service && return 1\n    sleep 0.1s\ndone\n\n",
                    "rendered": {
                      "text": "\n# There is a race between the zpool import and the pre-mount hooks, so we wait for a pool to be imported\nwhile ! systemctl is-active --quiet zfs-import.target; do\n    systemctl is-failed --quiet zfs-import-cache.service zfs-import-scan.service && return 1\n    sleep 0.1s\ndone\n\n",
                      "markdown": "`\n# There is a race between the zpool import and the pre-mount hooks, so we wait for a pool to be imported\nwhile ! systemctl is-active --quiet zfs-import.target; do\n    systemctl is-failed --quiet zfs-import-cache.service zfs-import-scan.service && return 1\n    sleep 0.1s\ndone\n\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/lib/dracut/modules.d/90zfs/zfs-load-key.sh"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 7,
                  "endLine": 13,
                  "endColumn": 18,
                  "snippet": {
                    "text": "decode_root_args || return 0\n\n# There is a race between the zpool import and the pre-mount hooks, so we wait for a pool to be imported\nwhile ! systemctl is-active --quiet zfs-import.target; do\n    systemctl is-failed --quiet zfs-import-cache.service zfs-import-scan.service && return 1\n    sleep 0.1s\ndone\n",
                    "rendered": {
                      "text": "decode_root_args || return 0\n\n# There is a race between the zpool import and the pre-mount hooks, so we wait for a pool to be imported\nwhile ! systemctl is-active --quiet zfs-import.target; do\n    systemctl is-failed --quiet zfs-import-cache.service zfs-import-scan.service && return 1\n    sleep 0.1s\ndone\n",
                      "markdown": "`decode_root_args || return 0\n\n# There is a race between the zpool import and the pre-mount hooks, so we wait for a pool to be imported\nwhile ! systemctl is-active --quiet zfs-import.target; do\n    systemctl is-failed --quiet zfs-import-cache.service zfs-import-scan.service && return 1\n    sleep 0.1s\ndone\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/lib/dracut/modules.d/90zfs/zfs-load-key.sh"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 80,
                  "endLine": 4,
                  "endColumn": 87,
                  "snippet": {
                    "text": "#!/bin/sh\n# shellcheck disable=SC2154\n\n# only run this on systemd systems, we handle the decrypt in mount-zfs.sh in the mount hook otherwise\n[ -e /bin/systemctl ] || [ -e /usr/bin/systemctl ] || return 0\n\n# shellcheck source=zfs-lib.sh.in\n",
                    "rendered": {
                      "text": "#!/bin/sh\n# shellcheck disable=SC2154\n\n# only run this on systemd systems, we handle the decrypt in mount-zfs.sh in the mount hook otherwise\n[ -e /bin/systemctl ] || [ -e /usr/bin/systemctl ] || return 0\n\n# shellcheck source=zfs-lib.sh.in\n",
                      "markdown": "`#!/bin/sh\n# shellcheck disable=SC2154\n\n# only run this on systemd systems, we handle the decrypt in mount-zfs.sh in the mount hook otherwise\n[ -e /bin/systemctl ] || [ -e /usr/bin/systemctl ] || return 0\n\n# shellcheck source=zfs-lib.sh.in\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/etc/bash_completion.d/zfs"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 26,
                  "endLine": 27,
                  "endColumn": 34,
                  "snippet": {
                    "text": "__ZFS_CMD=\"/usr/sbin/zfs\"\n__ZPOOL_CMD=\"/usr/sbin/zpool\"\n\n# Disable bash's built-in hostname completion, as this makes it impossible to\n# provide completions containing an @-sign, which is necessary for completing\n# snapshot names. If bash_completion is in use, this will already be disabled\n# and replaced with better completions anyway.\n",
                    "rendered": {
                      "text": "__ZFS_CMD=\"/usr/sbin/zfs\"\n__ZPOOL_CMD=\"/usr/sbin/zpool\"\n\n# Disable bash's built-in hostname completion, as this makes it impossible to\n# provide completions containing an @-sign, which is necessary for completing\n# snapshot names. If bash_completion is in use, this will already be disabled\n# and replaced with better completions anyway.\n",
                      "markdown": "`__ZFS_CMD=\"/usr/sbin/zfs\"\n__ZPOOL_CMD=\"/usr/sbin/zpool\"\n\n# Disable bash's built-in hostname completion, as this makes it impossible to\n# provide completions containing an @-sign, which is necessary for completing\n# snapshot names. If bash_completion is in use, this will already be disabled\n# and replaced with better completions anyway.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/etc/bash_completion.d/zfs"
                },
                "region": {
                  "startLine": 432,
                  "startColumn": 18,
                  "endLine": 432,
                  "endColumn": 23,
                  "snippet": {
                    "text": "\n__zpool_complete()\n{\n    local cur prev cmd cmds pools\n    COMPREPLY=()\n    cur=\"${COMP_WORDS[COMP_CWORD]}\"\n    prev=\"${COMP_WORDS[COMP_CWORD-1]}\"\n",
                    "rendered": {
                      "text": "\n__zpool_complete()\n{\n    local cur prev cmd cmds pools\n    COMPREPLY=()\n    cur=\"${COMP_WORDS[COMP_CWORD]}\"\n    prev=\"${COMP_WORDS[COMP_CWORD-1]}\"\n",
                      "markdown": "`\n__zpool_complete()\n{\n    local cur prev cmd cmds pools\n    COMPREPLY=()\n    cur=\"${COMP_WORDS[COMP_CWORD]}\"\n    prev=\"${COMP_WORDS[COMP_CWORD-1]}\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/etc/bash_completion.d/zfs"
                },
                "region": {
                  "startLine": 232,
                  "startColumn": 18,
                  "endLine": 232,
                  "endColumn": 23,
                  "snippet": {
                    "text": "\n__zfs_complete()\n{\n    local cur prev cmd cmds\n    COMPREPLY=()\n    if type _get_comp_words_by_ref &> /dev/null\n    then\n",
                    "rendered": {
                      "text": "\n__zfs_complete()\n{\n    local cur prev cmd cmds\n    COMPREPLY=()\n    if type _get_comp_words_by_ref &> /dev/null\n    then\n",
                      "markdown": "`\n__zfs_complete()\n{\n    local cur prev cmd cmds\n    COMPREPLY=()\n    if type _get_comp_words_by_ref &> /dev/null\n    then\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/etc/bash_completion.d/zfs"
                },
                "region": {
                  "startLine": 222,
                  "startColumn": 46,
                  "endLine": 222,
                  "endColumn": 52,
                  "snippet": {
                    "text": "\n__zfs_complete_nospace()\n{\n    # Google indicates that there may still be bash versions out there that\n    # don't have compopt.\n    if type compopt &> /dev/null\n    then\n",
                    "rendered": {
                      "text": "\n__zfs_complete_nospace()\n{\n    # Google indicates that there may still be bash versions out there that\n    # don't have compopt.\n    if type compopt &> /dev/null\n    then\n",
                      "markdown": "`\n__zfs_complete_nospace()\n{\n    # Google indicates that there may still be bash versions out there that\n    # don't have compopt.\n    if type compopt &> /dev/null\n    then\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/etc/bash_completion.d/zfs"
                },
                "region": {
                  "startLine": 75,
                  "startColumn": 22,
                  "endLine": 75,
                  "endColumn": 28,
                  "snippet": {
                    "text": "            $__ZFS_CMD list -H -o name -s name -t filesystem,volume -r \"$cur\" | tail -n +2\n            # We output the base dataset name even though we might be\n            # completing a command that can only take a snapshot, because it\n            # prevents bash from considering the completion finished when it\n            # ends in the bare @.\n            echo \"$cur\"\n            echo \"$cur@\"\n",
                    "rendered": {
                      "text": "            $__ZFS_CMD list -H -o name -s name -t filesystem,volume -r \"$cur\" | tail -n +2\n            # We output the base dataset name even though we might be\n            # completing a command that can only take a snapshot, because it\n            # prevents bash from considering the completion finished when it\n            # ends in the bare @.\n            echo \"$cur\"\n            echo \"$cur@\"\n",
                      "markdown": "`            $__ZFS_CMD list -H -o name -s name -t filesystem,volume -r \"$cur\" | tail -n +2\n            # We output the base dataset name even though we might be\n            # completing a command that can only take a snapshot, because it\n            # prevents bash from considering the completion finished when it\n            # ends in the bare @.\n            echo \"$cur\"\n            echo \"$cur@\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/etc/bash_completion.d/zfs"
                },
                "region": {
                  "startLine": 422,
                  "startColumn": 27,
                  "endLine": 422,
                  "endColumn": 32,
                  "snippet": {
                    "text": "\n__zpool_get_editable_properties()\n{\n    $__ZPOOL_CMD get 2>&1 | awk '$2 == \"YES\" {print $1\"=\"}'\n}\n\n__zpool_list_pools()\n",
                    "rendered": {
                      "text": "\n__zpool_get_editable_properties()\n{\n    $__ZPOOL_CMD get 2>&1 | awk '$2 == \"YES\" {print $1\"=\"}'\n}\n\n__zpool_list_pools()\n",
                      "markdown": "`\n__zpool_get_editable_properties()\n{\n    $__ZPOOL_CMD get 2>&1 | awk '$2 == \"YES\" {print $1\"=\"}'\n}\n\n__zpool_list_pools()\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/etc/bash_completion.d/zfs"
                },
                "region": {
                  "startLine": 417,
                  "startColumn": 27,
                  "endLine": 417,
                  "endColumn": 32,
                  "snippet": {
                    "text": "\n__zpool_get_properties()\n{\n    $__ZPOOL_CMD get 2>&1 | awk '$2 == \"YES\" || $2 == \"NO\" {print $1}'; echo all\n}\n\n__zpool_get_editable_properties()\n",
                    "rendered": {
                      "text": "\n__zpool_get_properties()\n{\n    $__ZPOOL_CMD get 2>&1 | awk '$2 == \"YES\" || $2 == \"NO\" {print $1}'; echo all\n}\n\n__zpool_get_editable_properties()\n",
                      "markdown": "`\n__zpool_get_properties()\n{\n    $__ZPOOL_CMD get 2>&1 | awk '$2 == \"YES\" || $2 == \"NO\" {print $1}'; echo all\n}\n\n__zpool_get_editable_properties()\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/etc/bash_completion.d/zfs"
                },
                "region": {
                  "startLine": 412,
                  "startColumn": 53,
                  "endLine": 413,
                  "snippet": {
                    "text": "\n__zpool_get_commands()\n{\n    $__ZPOOL_CMD 2>&1 | awk '/^\\t[a-z]/ {print $1}' | uniq\n}\n\n__zpool_get_properties()\n{\n",
                    "rendered": {
                      "text": "\n__zpool_get_commands()\n{\n    $__ZPOOL_CMD 2>&1 | awk '/^\\t[a-z]/ {print $1}' | uniq\n}\n\n__zpool_get_properties()\n{\n",
                      "markdown": "`\n__zpool_get_commands()\n{\n    $__ZPOOL_CMD 2>&1 | awk '/^\\t[a-z]/ {print $1}' | uniq\n}\n\n__zpool_get_properties()\n{\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/etc/bash_completion.d/zfs"
                },
                "region": {
                  "startLine": 412,
                  "startColumn": 23,
                  "endLine": 412,
                  "endColumn": 28,
                  "snippet": {
                    "text": "\n__zpool_get_commands()\n{\n    $__ZPOOL_CMD 2>&1 | awk '/^\\t[a-z]/ {print $1}' | uniq\n}\n\n__zpool_get_properties()\n",
                    "rendered": {
                      "text": "\n__zpool_get_commands()\n{\n    $__ZPOOL_CMD 2>&1 | awk '/^\\t[a-z]/ {print $1}' | uniq\n}\n\n__zpool_get_properties()\n",
                      "markdown": "`\n__zpool_get_commands()\n{\n    $__ZPOOL_CMD 2>&1 | awk '/^\\t[a-z]/ {print $1}' | uniq\n}\n\n__zpool_get_properties()\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/etc/bash_completion.d/zfs"
                },
                "region": {
                  "startLine": 222,
                  "startColumn": 46,
                  "endLine": 222,
                  "endColumn": 52,
                  "snippet": {
                    "text": "\n__zfs_complete_nospace()\n{\n    # Google indicates that there may still be bash versions out there that\n    # don't have compopt.\n    if type compopt &> /dev/null\n    then\n",
                    "rendered": {
                      "text": "\n__zfs_complete_nospace()\n{\n    # Google indicates that there may still be bash versions out there that\n    # don't have compopt.\n    if type compopt &> /dev/null\n    then\n",
                      "markdown": "`\n__zfs_complete_nospace()\n{\n    # Google indicates that there may still be bash versions out there that\n    # don't have compopt.\n    if type compopt &> /dev/null\n    then\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/etc/bash_completion.d/zfs"
                },
                "region": {
                  "startLine": 143,
                  "startColumn": 81,
                  "endLine": 143,
                  "endColumn": 86,
                  "snippet": {
                    "text": "            local range_start\n            range_start=\"$(expr \"$cur\" : '\\(.*%\\)')\"\n            # shellcheck disable=SC2016\n            $__ZFS_CMD list -H -o name -s name -t snapshot -d 1 \"$base_dataset\" | sed 's$.*@$'\"$range_start\"'$g'\n        fi\n    else\n        __zfs_match_snapshot_or_bookmark\n",
                    "rendered": {
                      "text": "            local range_start\n            range_start=\"$(expr \"$cur\" : '\\(.*%\\)')\"\n            # shellcheck disable=SC2016\n            $__ZFS_CMD list -H -o name -s name -t snapshot -d 1 \"$base_dataset\" | sed 's$.*@$'\"$range_start\"'$g'\n        fi\n    else\n        __zfs_match_snapshot_or_bookmark\n",
                      "markdown": "`            local range_start\n            range_start=\"$(expr \"$cur\" : '\\(.*%\\)')\"\n            # shellcheck disable=SC2016\n            $__ZFS_CMD list -H -o name -s name -t snapshot -d 1 \"$base_dataset\" | sed 's$.*@$'\"$range_start\"'$g'\n        fi\n    else\n        __zfs_match_snapshot_or_bookmark\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/etc/bash_completion.d/zfs"
                },
                "region": {
                  "startLine": 99,
                  "startColumn": 30,
                  "endLine": 99,
                  "endColumn": 35,
                  "snippet": {
                    "text": "                    return 0\n                fi\n            fi\n            echo \"$datasets\" | awk '{print $1 \"@\"}'\n        fi\n    fi\n}\n",
                    "rendered": {
                      "text": "                    return 0\n                fi\n            fi\n            echo \"$datasets\" | awk '{print $1 \"@\"}'\n        fi\n    fi\n}\n",
                      "markdown": "`                    return 0\n                fi\n            fi\n            echo \"$datasets\" | awk '{print $1 \"@\"}'\n        fi\n    fi\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/etc/bash_completion.d/zfs"
                },
                "region": {
                  "startLine": 88,
                  "startColumn": 68,
                  "endLine": 88,
                  "endColumn": 74,
                  "snippet": {
                    "text": "            then\n                # If the current command ends with a slash, then the only way\n                # it can be completed with a single tab press (ie. in this pass)\n                # is if it has exactly one child, so that's the only time we\n                # need to offer a suggestion with an @ appended.\n                local num_children\n                # This is actually off by one as zfs list includes the named\n",
                    "rendered": {
                      "text": "            then\n                # If the current command ends with a slash, then the only way\n                # it can be completed with a single tab press (ie. in this pass)\n                # is if it has exactly one child, so that's the only time we\n                # need to offer a suggestion with an @ appended.\n                local num_children\n                # This is actually off by one as zfs list includes the named\n",
                      "markdown": "`            then\n                # If the current command ends with a slash, then the only way\n                # it can be completed with a single tab press (ie. in this pass)\n                # is if it has exactly one child, so that's the only time we\n                # need to offer a suggestion with an @ appended.\n                local num_children\n                # This is actually off by one as zfs list includes the named\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/etc/bash_completion.d/zfs"
                },
                "region": {
                  "startLine": 75,
                  "startColumn": 22,
                  "endLine": 75,
                  "endColumn": 28,
                  "snippet": {
                    "text": "            $__ZFS_CMD list -H -o name -s name -t filesystem,volume -r \"$cur\" | tail -n +2\n            # We output the base dataset name even though we might be\n            # completing a command that can only take a snapshot, because it\n            # prevents bash from considering the completion finished when it\n            # ends in the bare @.\n            echo \"$cur\"\n            echo \"$cur@\"\n",
                    "rendered": {
                      "text": "            $__ZFS_CMD list -H -o name -s name -t filesystem,volume -r \"$cur\" | tail -n +2\n            # We output the base dataset name even though we might be\n            # completing a command that can only take a snapshot, because it\n            # prevents bash from considering the completion finished when it\n            # ends in the bare @.\n            echo \"$cur\"\n            echo \"$cur@\"\n",
                      "markdown": "`            $__ZFS_CMD list -H -o name -s name -t filesystem,volume -r \"$cur\" | tail -n +2\n            # We output the base dataset name even though we might be\n            # completing a command that can only take a snapshot, because it\n            # prevents bash from considering the completion finished when it\n            # ends in the bare @.\n            echo \"$cur\"\n            echo \"$cur@\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/etc/bash_completion.d/zfs"
                },
                "region": {
                  "startLine": 72,
                  "startColumn": 79,
                  "endLine": 72,
                  "endColumn": 85,
                  "snippet": {
                    "text": "    else\n        if [[ \"$cur\" != \"\" ]] && __zfs_list_datasets \"$cur\" &> /dev/null\n        then\n            $__ZFS_CMD list -H -o name -s name -t filesystem,volume -r \"$cur\" | tail -n +2\n            # We output the base dataset name even though we might be\n            # completing a command that can only take a snapshot, because it\n            # prevents bash from considering the completion finished when it\n",
                    "rendered": {
                      "text": "    else\n        if [[ \"$cur\" != \"\" ]] && __zfs_list_datasets \"$cur\" &> /dev/null\n        then\n            $__ZFS_CMD list -H -o name -s name -t filesystem,volume -r \"$cur\" | tail -n +2\n            # We output the base dataset name even though we might be\n            # completing a command that can only take a snapshot, because it\n            # prevents bash from considering the completion finished when it\n",
                      "markdown": "`    else\n        if [[ \"$cur\" != \"\" ]] && __zfs_list_datasets \"$cur\" &> /dev/null\n        then\n            $__ZFS_CMD list -H -o name -s name -t filesystem,volume -r \"$cur\" | tail -n +2\n            # We output the base dataset name even though we might be\n            # completing a command that can only take a snapshot, because it\n            # prevents bash from considering the completion finished when it\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/etc/bash_completion.d/zfs"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 25,
                  "endLine": 50,
                  "endColumn": 30,
                  "snippet": {
                    "text": "\n__zfs_get_inheritable_properties()\n{\n    $__ZFS_CMD get 2>&1 | awk '$3 == \"YES\" {print $1}'\n}\n\n__zfs_list_datasets()\n",
                    "rendered": {
                      "text": "\n__zfs_get_inheritable_properties()\n{\n    $__ZFS_CMD get 2>&1 | awk '$3 == \"YES\" {print $1}'\n}\n\n__zfs_list_datasets()\n",
                      "markdown": "`\n__zfs_get_inheritable_properties()\n{\n    $__ZFS_CMD get 2>&1 | awk '$3 == \"YES\" {print $1}'\n}\n\n__zfs_list_datasets()\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/etc/bash_completion.d/zfs"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 25,
                  "endLine": 45,
                  "endColumn": 30,
                  "snippet": {
                    "text": "\n__zfs_get_editable_properties()\n{\n    $__ZFS_CMD get 2>&1 | awk '$2 == \"YES\" {print $1\"=\"}'\n}\n\n__zfs_get_inheritable_properties()\n",
                    "rendered": {
                      "text": "\n__zfs_get_editable_properties()\n{\n    $__ZFS_CMD get 2>&1 | awk '$2 == \"YES\" {print $1\"=\"}'\n}\n\n__zfs_get_inheritable_properties()\n",
                      "markdown": "`\n__zfs_get_editable_properties()\n{\n    $__ZFS_CMD get 2>&1 | awk '$2 == \"YES\" {print $1\"=\"}'\n}\n\n__zfs_get_inheritable_properties()\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/etc/bash_completion.d/zfs"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 25,
                  "endLine": 40,
                  "endColumn": 30,
                  "snippet": {
                    "text": "\n__zfs_get_properties()\n{\n    $__ZFS_CMD get 2>&1 | awk '$2 == \"YES\" || $2 == \"NO\" {print $1}'; echo all name space\n}\n\n__zfs_get_editable_properties()\n",
                    "rendered": {
                      "text": "\n__zfs_get_properties()\n{\n    $__ZFS_CMD get 2>&1 | awk '$2 == \"YES\" || $2 == \"NO\" {print $1}'; echo all name space\n}\n\n__zfs_get_editable_properties()\n",
                      "markdown": "`\n__zfs_get_properties()\n{\n    $__ZFS_CMD get 2>&1 | awk '$2 == \"YES\" || $2 == \"NO\" {print $1}'; echo all name space\n}\n\n__zfs_get_editable_properties()\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/etc/bash_completion.d/zfs"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 68,
                  "endLine": 36,
                  "snippet": {
                    "text": "\n__zfs_get_commands()\n{\n    $__ZFS_CMD 2>&1 | awk '/^\\t[a-z]/ {print $1}' | cut -f1 -d '|' | uniq\n}\n\n__zfs_get_properties()\n{\n",
                    "rendered": {
                      "text": "\n__zfs_get_commands()\n{\n    $__ZFS_CMD 2>&1 | awk '/^\\t[a-z]/ {print $1}' | cut -f1 -d '|' | uniq\n}\n\n__zfs_get_properties()\n{\n",
                      "markdown": "`\n__zfs_get_commands()\n{\n    $__ZFS_CMD 2>&1 | awk '/^\\t[a-z]/ {print $1}' | cut -f1 -d '|' | uniq\n}\n\n__zfs_get_properties()\n{\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/etc/bash_completion.d/zfs"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 51,
                  "endLine": 35,
                  "endColumn": 56,
                  "snippet": {
                    "text": "\n__zfs_get_commands()\n{\n    $__ZFS_CMD 2>&1 | awk '/^\\t[a-z]/ {print $1}' | cut -f1 -d '|' | uniq\n}\n\n__zfs_get_properties()\n",
                    "rendered": {
                      "text": "\n__zfs_get_commands()\n{\n    $__ZFS_CMD 2>&1 | awk '/^\\t[a-z]/ {print $1}' | cut -f1 -d '|' | uniq\n}\n\n__zfs_get_properties()\n",
                      "markdown": "`\n__zfs_get_commands()\n{\n    $__ZFS_CMD 2>&1 | awk '/^\\t[a-z]/ {print $1}' | cut -f1 -d '|' | uniq\n}\n\n__zfs_get_properties()\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/etc/bash_completion.d/zfs"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 21,
                  "endLine": 35,
                  "endColumn": 26,
                  "snippet": {
                    "text": "\n__zfs_get_commands()\n{\n    $__ZFS_CMD 2>&1 | awk '/^\\t[a-z]/ {print $1}' | cut -f1 -d '|' | uniq\n}\n\n__zfs_get_properties()\n",
                    "rendered": {
                      "text": "\n__zfs_get_commands()\n{\n    $__ZFS_CMD 2>&1 | awk '/^\\t[a-z]/ {print $1}' | cut -f1 -d '|' | uniq\n}\n\n__zfs_get_properties()\n",
                      "markdown": "`\n__zfs_get_commands()\n{\n    $__ZFS_CMD 2>&1 | awk '/^\\t[a-z]/ {print $1}' | cut -f1 -d '|' | uniq\n}\n\n__zfs_get_properties()\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/test_ended"
                },
                "region": {
                  "startLine": 244,
                  "startColumn": 47,
                  "endLine": 244,
                  "endColumn": 52,
                  "snippet": {
                    "text": "\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n\nif [ -n \"$without_vals\" ]; then\n",
                    "rendered": {
                      "text": "\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n\nif [ -n \"$without_vals\" ]; then\n",
                      "markdown": "`\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n\nif [ -n \"$without_vals\" ]; then\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/test_ended"
                },
                "region": {
                  "startLine": 242,
                  "startColumn": 29,
                  "endLine": 242,
                  "endColumn": 34,
                  "snippet": {
                    "text": "\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n",
                    "rendered": {
                      "text": "\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n",
                      "markdown": "`\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/test_ended"
                },
                "region": {
                  "startLine": 242,
                  "startColumn": 1,
                  "endLine": 242,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n",
                    "rendered": {
                      "text": "\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n",
                      "markdown": "`\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/test_ended"
                },
                "region": {
                  "startLine": 241,
                  "startColumn": 1,
                  "endLine": 241,
                  "endColumn": 7,
                  "snippet": {
                    "text": "if [ -n \"$with_vals\" ]; then\n\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\n",
                    "rendered": {
                      "text": "if [ -n \"$with_vals\" ]; then\n\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\n",
                      "markdown": "`if [ -n \"$with_vals\" ]; then\n\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/test_ended"
                },
                "region": {
                  "startLine": 237,
                  "startColumn": 25,
                  "endLine": 237,
                  "endColumn": 31,
                  "snippet": {
                    "text": "\tscripts=\"$script\"\nesac\n\nwith_vals=$(echo \"$out\" | grep -E \"$scripts\")\nif [ -n \"$with_vals\" ]; then\n\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n",
                    "rendered": {
                      "text": "\tscripts=\"$script\"\nesac\n\nwith_vals=$(echo \"$out\" | grep -E \"$scripts\")\nif [ -n \"$with_vals\" ]; then\n\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n",
                      "markdown": "`\tscripts=\"$script\"\nesac\n\nwith_vals=$(echo \"$out\" | grep -E \"$scripts\")\nif [ -n \"$with_vals\" ]; then\n\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/test_ended"
                },
                "region": {
                  "startLine": 199,
                  "startColumn": 36,
                  "endLine": 199,
                  "endColumn": 41,
                  "snippet": {
                    "text": "END {print \"type=\"type; ORS=\"\\n\"; print \"\"}\n');\nfi\ntype=$(echo \"$out\" | grep '^type=' | cut -d '=' -f 2)\n\n# If type is not set by now, either we don't have a block device\n# or smartctl failed. Either way, default to ATA and set $out to\n",
                    "rendered": {
                      "text": "END {print \"type=\"type; ORS=\"\\n\"; print \"\"}\n');\nfi\ntype=$(echo \"$out\" | grep '^type=' | cut -d '=' -f 2)\n\n# If type is not set by now, either we don't have a block device\n# or smartctl failed. Either way, default to ATA and set $out to\n",
                      "markdown": "`END {print \"type=\"type; ORS=\"\\n\"; print \"\"}\n');\nfi\ntype=$(echo \"$out\" | grep '^type=' | cut -d '=' -f 2)\n\n# If type is not set by now, either we don't have a block device\n# or smartctl failed. Either way, default to ATA and set $out to\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/test_ended"
                },
                "region": {
                  "startLine": 199,
                  "startColumn": 20,
                  "endLine": 199,
                  "endColumn": 26,
                  "snippet": {
                    "text": "END {print \"type=\"type; ORS=\"\\n\"; print \"\"}\n');\nfi\ntype=$(echo \"$out\" | grep '^type=' | cut -d '=' -f 2)\n\n# If type is not set by now, either we don't have a block device\n# or smartctl failed. Either way, default to ATA and set $out to\n",
                    "rendered": {
                      "text": "END {print \"type=\"type; ORS=\"\\n\"; print \"\"}\n');\nfi\ntype=$(echo \"$out\" | grep '^type=' | cut -d '=' -f 2)\n\n# If type is not set by now, either we don't have a block device\n# or smartctl failed. Either way, default to ATA and set $out to\n",
                      "markdown": "`END {print \"type=\"type; ORS=\"\\n\"; print \"\"}\n');\nfi\ntype=$(echo \"$out\" | grep '^type=' | cut -d '=' -f 2)\n\n# If type is not set by now, either we don't have a block device\n# or smartctl failed. Either way, default to ATA and set $out to\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/test_ended"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 24,
                  "endLine": 103,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\t# NVMe:\n\t#       SMART/Health Information (NVMe Log 0xnn, NSID 0xnn)\n\t#\n\tout=$(echo \"$raw_out\" | awk '\n# SAS specific\n/read:/{print \"rrd=\"$4\"\\nr_cor=\"$5\"\\nr_proc=\"$7\"\\nr_ucor=\"$8}\n/write:/{print \"rwr=\"$4\"\\nw_cor=\"$5\"\\nw_proc=\"$7\"\\nw_ucor=\"$8}\n",
                    "rendered": {
                      "text": "\t# NVMe:\n\t#       SMART/Health Information (NVMe Log 0xnn, NSID 0xnn)\n\t#\n\tout=$(echo \"$raw_out\" | awk '\n# SAS specific\n/read:/{print \"rrd=\"$4\"\\nr_cor=\"$5\"\\nr_proc=\"$7\"\\nr_ucor=\"$8}\n/write:/{print \"rwr=\"$4\"\\nw_cor=\"$5\"\\nw_proc=\"$7\"\\nw_ucor=\"$8}\n",
                      "markdown": "`\t# NVMe:\n\t#       SMART/Health Information (NVMe Log 0xnn, NSID 0xnn)\n\t#\n\tout=$(echo \"$raw_out\" | awk '\n# SAS specific\n/read:/{print \"rrd=\"$4\"\\nr_cor=\"$5\"\\nr_proc=\"$7\"\\nr_ucor=\"$8}\n/write:/{print \"rwr=\"$4\"\\nw_cor=\"$5\"\\nw_proc=\"$7\"\\nw_ucor=\"$8}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/test_ended"
                },
                "region": {
                  "startLine": 83,
                  "startColumn": 3,
                  "endLine": 83,
                  "endColumn": 8,
                  "snippet": {
                    "text": "\nif [ -b \"$somepath\" ] && PATH=\"/usr/sbin:$PATH\" command -v smartctl > /dev/null || [ -n \"$samples\" ] ; then\n\tif [ -n \"$samples\" ] ; then\n\t\t# cat a smartctl output text file instead of running smartctl\n\t\t# on a vdev (only used for developer testing).\n\t\tfile=$(get_filename_from_dir \"$samples\")\n\t\techo \"file=$file\"\n",
                    "rendered": {
                      "text": "\nif [ -b \"$somepath\" ] && PATH=\"/usr/sbin:$PATH\" command -v smartctl > /dev/null || [ -n \"$samples\" ] ; then\n\tif [ -n \"$samples\" ] ; then\n\t\t# cat a smartctl output text file instead of running smartctl\n\t\t# on a vdev (only used for developer testing).\n\t\tfile=$(get_filename_from_dir \"$samples\")\n\t\techo \"file=$file\"\n",
                      "markdown": "`\nif [ -b \"$somepath\" ] && PATH=\"/usr/sbin:$PATH\" command -v smartctl > /dev/null || [ -n \"$samples\" ] ; then\n\tif [ -n \"$samples\" ] ; then\n\t\t# cat a smartctl output text file instead of running smartctl\n\t\t# on a vdev (only used for developer testing).\n\t\tfile=$(get_filename_from_dir \"$samples\")\n\t\techo \"file=$file\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/test_ended"
                },
                "region": {
                  "startLine": 68,
                  "startColumn": 56,
                  "endLine": 68,
                  "endColumn": 61,
                  "snippet": {
                    "text": "script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n",
                    "rendered": {
                      "text": "script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n",
                      "markdown": "`script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/test_ended"
                },
                "region": {
                  "startLine": 68,
                  "startColumn": 25,
                  "endLine": 68,
                  "endColumn": 31,
                  "snippet": {
                    "text": "script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n",
                    "rendered": {
                      "text": "script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n",
                      "markdown": "`script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/test_ended"
                },
                "region": {
                  "startLine": 56,
                  "endLine": 56,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\tnum_files=$(find \"$dir\" -maxdepth 1 -type f | wc -l)\n\tmod=$((pid % num_files))\n\ti=0\n\tfind \"$dir\" -type f -printf '%f\\n' | while read -r file ; do\n\t\tif [ \"$mod\" = \"$i\" ] ; then\n\t\t\techo \"$file\"\n\t\t\tbreak\n",
                    "rendered": {
                      "text": "\tnum_files=$(find \"$dir\" -maxdepth 1 -type f | wc -l)\n\tmod=$((pid % num_files))\n\ti=0\n\tfind \"$dir\" -type f -printf '%f\\n' | while read -r file ; do\n\t\tif [ \"$mod\" = \"$i\" ] ; then\n\t\t\techo \"$file\"\n\t\t\tbreak\n",
                      "markdown": "`\tnum_files=$(find \"$dir\" -maxdepth 1 -type f | wc -l)\n\tmod=$((pid % num_files))\n\ti=0\n\tfind \"$dir\" -type f -printf '%f\\n' | while read -r file ; do\n\t\tif [ \"$mod\" = \"$i\" ] ; then\n\t\t\techo \"$file\"\n\t\t\tbreak\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/test_ended"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 38,
                  "endLine": 47,
                  "endColumn": 46,
                  "snippet": {
                    "text": "#\n# Look in directory DIR and return a filename from it.  The filename returned\n# is chosen quasi-sequentially (based off our PID).  This allows us to return\n# a different filename every time this script is invoked (which we do for each\n# vdev), without having to maintain state.\nget_filename_from_dir()\n{\n",
                    "rendered": {
                      "text": "#\n# Look in directory DIR and return a filename from it.  The filename returned\n# is chosen quasi-sequentially (based off our PID).  This allows us to return\n# a different filename every time this script is invoked (which we do for each\n# vdev), without having to maintain state.\nget_filename_from_dir()\n{\n",
                      "markdown": "`#\n# Look in directory DIR and return a filename from it.  The filename returned\n# is chosen quasi-sequentially (based off our PID).  This allows us to return\n# a different filename every time this script is invoked (which we do for each\n# vdev), without having to maintain state.\nget_filename_from_dir()\n{\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/test_ended"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 28,
                  "endLine": 47,
                  "endColumn": 34,
                  "snippet": {
                    "text": "#\n# Look in directory DIR and return a filename from it.  The filename returned\n# is chosen quasi-sequentially (based off our PID).  This allows us to return\n# a different filename every time this script is invoked (which we do for each\n# vdev), without having to maintain state.\nget_filename_from_dir()\n{\n",
                    "rendered": {
                      "text": "#\n# Look in directory DIR and return a filename from it.  The filename returned\n# is chosen quasi-sequentially (based off our PID).  This allows us to return\n# a different filename every time this script is invoked (which we do for each\n# vdev), without having to maintain state.\nget_filename_from_dir()\n{\n",
                      "markdown": "`#\n# Look in directory DIR and return a filename from it.  The filename returned\n# is chosen quasi-sequentially (based off our PID).  This allows us to return\n# a different filename every time this script is invoked (which we do for each\n# vdev), without having to maintain state.\nget_filename_from_dir()\n{\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/test_ended"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 27,
                  "endLine": 20,
                  "endColumn": 36,
                  "snippet": {
                    "text": "hours_on:\tShow number of hours drive powered on (all drives).\nrealloc:\tShow SMART reallocated sectors count (ATA).\nrep_ucor:\tShow SMART reported uncorrectable count (ATA).\ncmd_to:\t\tShow SMART command timeout count (ATA).\npend_sec:\tShow SMART current pending sector count (ATA).\noff_ucor:\tShow SMART offline uncorrectable errors (ATA).\nata_err:\tShow SMART ATA errors (ATA).\n",
                    "rendered": {
                      "text": "hours_on:\tShow number of hours drive powered on (all drives).\nrealloc:\tShow SMART reallocated sectors count (ATA).\nrep_ucor:\tShow SMART reported uncorrectable count (ATA).\ncmd_to:\t\tShow SMART command timeout count (ATA).\npend_sec:\tShow SMART current pending sector count (ATA).\noff_ucor:\tShow SMART offline uncorrectable errors (ATA).\nata_err:\tShow SMART ATA errors (ATA).\n",
                      "markdown": "`hours_on:\tShow number of hours drive powered on (all drives).\nrealloc:\tShow SMART reallocated sectors count (ATA).\nrep_ucor:\tShow SMART reported uncorrectable count (ATA).\ncmd_to:\t\tShow SMART command timeout count (ATA).\npend_sec:\tShow SMART current pending sector count (ATA).\noff_ucor:\tShow SMART offline uncorrectable errors (ATA).\nata_err:\tShow SMART ATA errors (ATA).\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/temp"
                },
                "region": {
                  "startLine": 244,
                  "startColumn": 47,
                  "endLine": 244,
                  "endColumn": 52,
                  "snippet": {
                    "text": "\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n\nif [ -n \"$without_vals\" ]; then\n",
                    "rendered": {
                      "text": "\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n\nif [ -n \"$without_vals\" ]; then\n",
                      "markdown": "`\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n\nif [ -n \"$without_vals\" ]; then\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/temp"
                },
                "region": {
                  "startLine": 242,
                  "startColumn": 29,
                  "endLine": 242,
                  "endColumn": 34,
                  "snippet": {
                    "text": "\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n",
                    "rendered": {
                      "text": "\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n",
                      "markdown": "`\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/temp"
                },
                "region": {
                  "startLine": 242,
                  "startColumn": 1,
                  "endLine": 242,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n",
                    "rendered": {
                      "text": "\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n",
                      "markdown": "`\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/temp"
                },
                "region": {
                  "startLine": 241,
                  "startColumn": 1,
                  "endLine": 241,
                  "endColumn": 7,
                  "snippet": {
                    "text": "if [ -n \"$with_vals\" ]; then\n\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\n",
                    "rendered": {
                      "text": "if [ -n \"$with_vals\" ]; then\n\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\n",
                      "markdown": "`if [ -n \"$with_vals\" ]; then\n\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/temp"
                },
                "region": {
                  "startLine": 237,
                  "startColumn": 25,
                  "endLine": 237,
                  "endColumn": 31,
                  "snippet": {
                    "text": "\tscripts=\"$script\"\nesac\n\nwith_vals=$(echo \"$out\" | grep -E \"$scripts\")\nif [ -n \"$with_vals\" ]; then\n\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n",
                    "rendered": {
                      "text": "\tscripts=\"$script\"\nesac\n\nwith_vals=$(echo \"$out\" | grep -E \"$scripts\")\nif [ -n \"$with_vals\" ]; then\n\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n",
                      "markdown": "`\tscripts=\"$script\"\nesac\n\nwith_vals=$(echo \"$out\" | grep -E \"$scripts\")\nif [ -n \"$with_vals\" ]; then\n\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/temp"
                },
                "region": {
                  "startLine": 199,
                  "startColumn": 36,
                  "endLine": 199,
                  "endColumn": 41,
                  "snippet": {
                    "text": "END {print \"type=\"type; ORS=\"\\n\"; print \"\"}\n');\nfi\ntype=$(echo \"$out\" | grep '^type=' | cut -d '=' -f 2)\n\n# If type is not set by now, either we don't have a block device\n# or smartctl failed. Either way, default to ATA and set $out to\n",
                    "rendered": {
                      "text": "END {print \"type=\"type; ORS=\"\\n\"; print \"\"}\n');\nfi\ntype=$(echo \"$out\" | grep '^type=' | cut -d '=' -f 2)\n\n# If type is not set by now, either we don't have a block device\n# or smartctl failed. Either way, default to ATA and set $out to\n",
                      "markdown": "`END {print \"type=\"type; ORS=\"\\n\"; print \"\"}\n');\nfi\ntype=$(echo \"$out\" | grep '^type=' | cut -d '=' -f 2)\n\n# If type is not set by now, either we don't have a block device\n# or smartctl failed. Either way, default to ATA and set $out to\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/temp"
                },
                "region": {
                  "startLine": 199,
                  "startColumn": 20,
                  "endLine": 199,
                  "endColumn": 26,
                  "snippet": {
                    "text": "END {print \"type=\"type; ORS=\"\\n\"; print \"\"}\n');\nfi\ntype=$(echo \"$out\" | grep '^type=' | cut -d '=' -f 2)\n\n# If type is not set by now, either we don't have a block device\n# or smartctl failed. Either way, default to ATA and set $out to\n",
                    "rendered": {
                      "text": "END {print \"type=\"type; ORS=\"\\n\"; print \"\"}\n');\nfi\ntype=$(echo \"$out\" | grep '^type=' | cut -d '=' -f 2)\n\n# If type is not set by now, either we don't have a block device\n# or smartctl failed. Either way, default to ATA and set $out to\n",
                      "markdown": "`END {print \"type=\"type; ORS=\"\\n\"; print \"\"}\n');\nfi\ntype=$(echo \"$out\" | grep '^type=' | cut -d '=' -f 2)\n\n# If type is not set by now, either we don't have a block device\n# or smartctl failed. Either way, default to ATA and set $out to\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/temp"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 24,
                  "endLine": 103,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\t# NVMe:\n\t#       SMART/Health Information (NVMe Log 0xnn, NSID 0xnn)\n\t#\n\tout=$(echo \"$raw_out\" | awk '\n# SAS specific\n/read:/{print \"rrd=\"$4\"\\nr_cor=\"$5\"\\nr_proc=\"$7\"\\nr_ucor=\"$8}\n/write:/{print \"rwr=\"$4\"\\nw_cor=\"$5\"\\nw_proc=\"$7\"\\nw_ucor=\"$8}\n",
                    "rendered": {
                      "text": "\t# NVMe:\n\t#       SMART/Health Information (NVMe Log 0xnn, NSID 0xnn)\n\t#\n\tout=$(echo \"$raw_out\" | awk '\n# SAS specific\n/read:/{print \"rrd=\"$4\"\\nr_cor=\"$5\"\\nr_proc=\"$7\"\\nr_ucor=\"$8}\n/write:/{print \"rwr=\"$4\"\\nw_cor=\"$5\"\\nw_proc=\"$7\"\\nw_ucor=\"$8}\n",
                      "markdown": "`\t# NVMe:\n\t#       SMART/Health Information (NVMe Log 0xnn, NSID 0xnn)\n\t#\n\tout=$(echo \"$raw_out\" | awk '\n# SAS specific\n/read:/{print \"rrd=\"$4\"\\nr_cor=\"$5\"\\nr_proc=\"$7\"\\nr_ucor=\"$8}\n/write:/{print \"rwr=\"$4\"\\nw_cor=\"$5\"\\nw_proc=\"$7\"\\nw_ucor=\"$8}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/temp"
                },
                "region": {
                  "startLine": 83,
                  "startColumn": 3,
                  "endLine": 83,
                  "endColumn": 8,
                  "snippet": {
                    "text": "\nif [ -b \"$somepath\" ] && PATH=\"/usr/sbin:$PATH\" command -v smartctl > /dev/null || [ -n \"$samples\" ] ; then\n\tif [ -n \"$samples\" ] ; then\n\t\t# cat a smartctl output text file instead of running smartctl\n\t\t# on a vdev (only used for developer testing).\n\t\tfile=$(get_filename_from_dir \"$samples\")\n\t\techo \"file=$file\"\n",
                    "rendered": {
                      "text": "\nif [ -b \"$somepath\" ] && PATH=\"/usr/sbin:$PATH\" command -v smartctl > /dev/null || [ -n \"$samples\" ] ; then\n\tif [ -n \"$samples\" ] ; then\n\t\t# cat a smartctl output text file instead of running smartctl\n\t\t# on a vdev (only used for developer testing).\n\t\tfile=$(get_filename_from_dir \"$samples\")\n\t\techo \"file=$file\"\n",
                      "markdown": "`\nif [ -b \"$somepath\" ] && PATH=\"/usr/sbin:$PATH\" command -v smartctl > /dev/null || [ -n \"$samples\" ] ; then\n\tif [ -n \"$samples\" ] ; then\n\t\t# cat a smartctl output text file instead of running smartctl\n\t\t# on a vdev (only used for developer testing).\n\t\tfile=$(get_filename_from_dir \"$samples\")\n\t\techo \"file=$file\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/temp"
                },
                "region": {
                  "startLine": 68,
                  "startColumn": 56,
                  "endLine": 68,
                  "endColumn": 61,
                  "snippet": {
                    "text": "script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n",
                    "rendered": {
                      "text": "script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n",
                      "markdown": "`script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/temp"
                },
                "region": {
                  "startLine": 68,
                  "startColumn": 25,
                  "endLine": 68,
                  "endColumn": 31,
                  "snippet": {
                    "text": "script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n",
                    "rendered": {
                      "text": "script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n",
                      "markdown": "`script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/temp"
                },
                "region": {
                  "startLine": 56,
                  "endLine": 56,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\tnum_files=$(find \"$dir\" -maxdepth 1 -type f | wc -l)\n\tmod=$((pid % num_files))\n\ti=0\n\tfind \"$dir\" -type f -printf '%f\\n' | while read -r file ; do\n\t\tif [ \"$mod\" = \"$i\" ] ; then\n\t\t\techo \"$file\"\n\t\t\tbreak\n",
                    "rendered": {
                      "text": "\tnum_files=$(find \"$dir\" -maxdepth 1 -type f | wc -l)\n\tmod=$((pid % num_files))\n\ti=0\n\tfind \"$dir\" -type f -printf '%f\\n' | while read -r file ; do\n\t\tif [ \"$mod\" = \"$i\" ] ; then\n\t\t\techo \"$file\"\n\t\t\tbreak\n",
                      "markdown": "`\tnum_files=$(find \"$dir\" -maxdepth 1 -type f | wc -l)\n\tmod=$((pid % num_files))\n\ti=0\n\tfind \"$dir\" -type f -printf '%f\\n' | while read -r file ; do\n\t\tif [ \"$mod\" = \"$i\" ] ; then\n\t\t\techo \"$file\"\n\t\t\tbreak\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/temp"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 38,
                  "endLine": 47,
                  "endColumn": 46,
                  "snippet": {
                    "text": "#\n# Look in directory DIR and return a filename from it.  The filename returned\n# is chosen quasi-sequentially (based off our PID).  This allows us to return\n# a different filename every time this script is invoked (which we do for each\n# vdev), without having to maintain state.\nget_filename_from_dir()\n{\n",
                    "rendered": {
                      "text": "#\n# Look in directory DIR and return a filename from it.  The filename returned\n# is chosen quasi-sequentially (based off our PID).  This allows us to return\n# a different filename every time this script is invoked (which we do for each\n# vdev), without having to maintain state.\nget_filename_from_dir()\n{\n",
                      "markdown": "`#\n# Look in directory DIR and return a filename from it.  The filename returned\n# is chosen quasi-sequentially (based off our PID).  This allows us to return\n# a different filename every time this script is invoked (which we do for each\n# vdev), without having to maintain state.\nget_filename_from_dir()\n{\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/temp"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 28,
                  "endLine": 47,
                  "endColumn": 34,
                  "snippet": {
                    "text": "#\n# Look in directory DIR and return a filename from it.  The filename returned\n# is chosen quasi-sequentially (based off our PID).  This allows us to return\n# a different filename every time this script is invoked (which we do for each\n# vdev), without having to maintain state.\nget_filename_from_dir()\n{\n",
                    "rendered": {
                      "text": "#\n# Look in directory DIR and return a filename from it.  The filename returned\n# is chosen quasi-sequentially (based off our PID).  This allows us to return\n# a different filename every time this script is invoked (which we do for each\n# vdev), without having to maintain state.\nget_filename_from_dir()\n{\n",
                      "markdown": "`#\n# Look in directory DIR and return a filename from it.  The filename returned\n# is chosen quasi-sequentially (based off our PID).  This allows us to return\n# a different filename every time this script is invoked (which we do for each\n# vdev), without having to maintain state.\nget_filename_from_dir()\n{\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/temp"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 27,
                  "endLine": 20,
                  "endColumn": 36,
                  "snippet": {
                    "text": "hours_on:\tShow number of hours drive powered on (all drives).\nrealloc:\tShow SMART reallocated sectors count (ATA).\nrep_ucor:\tShow SMART reported uncorrectable count (ATA).\ncmd_to:\t\tShow SMART command timeout count (ATA).\npend_sec:\tShow SMART current pending sector count (ATA).\noff_ucor:\tShow SMART offline uncorrectable errors (ATA).\nata_err:\tShow SMART ATA errors (ATA).\n",
                    "rendered": {
                      "text": "hours_on:\tShow number of hours drive powered on (all drives).\nrealloc:\tShow SMART reallocated sectors count (ATA).\nrep_ucor:\tShow SMART reported uncorrectable count (ATA).\ncmd_to:\t\tShow SMART command timeout count (ATA).\npend_sec:\tShow SMART current pending sector count (ATA).\noff_ucor:\tShow SMART offline uncorrectable errors (ATA).\nata_err:\tShow SMART ATA errors (ATA).\n",
                      "markdown": "`hours_on:\tShow number of hours drive powered on (all drives).\nrealloc:\tShow SMART reallocated sectors count (ATA).\nrep_ucor:\tShow SMART reported uncorrectable count (ATA).\ncmd_to:\t\tShow SMART command timeout count (ATA).\npend_sec:\tShow SMART current pending sector count (ATA).\noff_ucor:\tShow SMART offline uncorrectable errors (ATA).\nata_err:\tShow SMART ATA errors (ATA).\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/smartx"
                },
                "region": {
                  "startLine": 244,
                  "startColumn": 47,
                  "endLine": 244,
                  "endColumn": 52,
                  "snippet": {
                    "text": "\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n\nif [ -n \"$without_vals\" ]; then\n",
                    "rendered": {
                      "text": "\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n\nif [ -n \"$without_vals\" ]; then\n",
                      "markdown": "`\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n\nif [ -n \"$without_vals\" ]; then\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/smartx"
                },
                "region": {
                  "startLine": 242,
                  "startColumn": 29,
                  "endLine": 242,
                  "endColumn": 34,
                  "snippet": {
                    "text": "\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n",
                    "rendered": {
                      "text": "\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n",
                      "markdown": "`\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/smartx"
                },
                "region": {
                  "startLine": 242,
                  "startColumn": 1,
                  "endLine": 242,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n",
                    "rendered": {
                      "text": "\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n",
                      "markdown": "`\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/smartx"
                },
                "region": {
                  "startLine": 241,
                  "startColumn": 1,
                  "endLine": 241,
                  "endColumn": 7,
                  "snippet": {
                    "text": "if [ -n \"$with_vals\" ]; then\n\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\n",
                    "rendered": {
                      "text": "if [ -n \"$with_vals\" ]; then\n\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\n",
                      "markdown": "`if [ -n \"$with_vals\" ]; then\n\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/smartx"
                },
                "region": {
                  "startLine": 237,
                  "startColumn": 25,
                  "endLine": 237,
                  "endColumn": 31,
                  "snippet": {
                    "text": "\tscripts=\"$script\"\nesac\n\nwith_vals=$(echo \"$out\" | grep -E \"$scripts\")\nif [ -n \"$with_vals\" ]; then\n\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n",
                    "rendered": {
                      "text": "\tscripts=\"$script\"\nesac\n\nwith_vals=$(echo \"$out\" | grep -E \"$scripts\")\nif [ -n \"$with_vals\" ]; then\n\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n",
                      "markdown": "`\tscripts=\"$script\"\nesac\n\nwith_vals=$(echo \"$out\" | grep -E \"$scripts\")\nif [ -n \"$with_vals\" ]; then\n\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/smartx"
                },
                "region": {
                  "startLine": 199,
                  "startColumn": 36,
                  "endLine": 199,
                  "endColumn": 41,
                  "snippet": {
                    "text": "END {print \"type=\"type; ORS=\"\\n\"; print \"\"}\n');\nfi\ntype=$(echo \"$out\" | grep '^type=' | cut -d '=' -f 2)\n\n# If type is not set by now, either we don't have a block device\n# or smartctl failed. Either way, default to ATA and set $out to\n",
                    "rendered": {
                      "text": "END {print \"type=\"type; ORS=\"\\n\"; print \"\"}\n');\nfi\ntype=$(echo \"$out\" | grep '^type=' | cut -d '=' -f 2)\n\n# If type is not set by now, either we don't have a block device\n# or smartctl failed. Either way, default to ATA and set $out to\n",
                      "markdown": "`END {print \"type=\"type; ORS=\"\\n\"; print \"\"}\n');\nfi\ntype=$(echo \"$out\" | grep '^type=' | cut -d '=' -f 2)\n\n# If type is not set by now, either we don't have a block device\n# or smartctl failed. Either way, default to ATA and set $out to\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/smartx"
                },
                "region": {
                  "startLine": 199,
                  "startColumn": 20,
                  "endLine": 199,
                  "endColumn": 26,
                  "snippet": {
                    "text": "END {print \"type=\"type; ORS=\"\\n\"; print \"\"}\n');\nfi\ntype=$(echo \"$out\" | grep '^type=' | cut -d '=' -f 2)\n\n# If type is not set by now, either we don't have a block device\n# or smartctl failed. Either way, default to ATA and set $out to\n",
                    "rendered": {
                      "text": "END {print \"type=\"type; ORS=\"\\n\"; print \"\"}\n');\nfi\ntype=$(echo \"$out\" | grep '^type=' | cut -d '=' -f 2)\n\n# If type is not set by now, either we don't have a block device\n# or smartctl failed. Either way, default to ATA and set $out to\n",
                      "markdown": "`END {print \"type=\"type; ORS=\"\\n\"; print \"\"}\n');\nfi\ntype=$(echo \"$out\" | grep '^type=' | cut -d '=' -f 2)\n\n# If type is not set by now, either we don't have a block device\n# or smartctl failed. Either way, default to ATA and set $out to\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/smartx"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 24,
                  "endLine": 103,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\t# NVMe:\n\t#       SMART/Health Information (NVMe Log 0xnn, NSID 0xnn)\n\t#\n\tout=$(echo \"$raw_out\" | awk '\n# SAS specific\n/read:/{print \"rrd=\"$4\"\\nr_cor=\"$5\"\\nr_proc=\"$7\"\\nr_ucor=\"$8}\n/write:/{print \"rwr=\"$4\"\\nw_cor=\"$5\"\\nw_proc=\"$7\"\\nw_ucor=\"$8}\n",
                    "rendered": {
                      "text": "\t# NVMe:\n\t#       SMART/Health Information (NVMe Log 0xnn, NSID 0xnn)\n\t#\n\tout=$(echo \"$raw_out\" | awk '\n# SAS specific\n/read:/{print \"rrd=\"$4\"\\nr_cor=\"$5\"\\nr_proc=\"$7\"\\nr_ucor=\"$8}\n/write:/{print \"rwr=\"$4\"\\nw_cor=\"$5\"\\nw_proc=\"$7\"\\nw_ucor=\"$8}\n",
                      "markdown": "`\t# NVMe:\n\t#       SMART/Health Information (NVMe Log 0xnn, NSID 0xnn)\n\t#\n\tout=$(echo \"$raw_out\" | awk '\n# SAS specific\n/read:/{print \"rrd=\"$4\"\\nr_cor=\"$5\"\\nr_proc=\"$7\"\\nr_ucor=\"$8}\n/write:/{print \"rwr=\"$4\"\\nw_cor=\"$5\"\\nw_proc=\"$7\"\\nw_ucor=\"$8}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/smartx"
                },
                "region": {
                  "startLine": 83,
                  "startColumn": 3,
                  "endLine": 83,
                  "endColumn": 8,
                  "snippet": {
                    "text": "\nif [ -b \"$somepath\" ] && PATH=\"/usr/sbin:$PATH\" command -v smartctl > /dev/null || [ -n \"$samples\" ] ; then\n\tif [ -n \"$samples\" ] ; then\n\t\t# cat a smartctl output text file instead of running smartctl\n\t\t# on a vdev (only used for developer testing).\n\t\tfile=$(get_filename_from_dir \"$samples\")\n\t\techo \"file=$file\"\n",
                    "rendered": {
                      "text": "\nif [ -b \"$somepath\" ] && PATH=\"/usr/sbin:$PATH\" command -v smartctl > /dev/null || [ -n \"$samples\" ] ; then\n\tif [ -n \"$samples\" ] ; then\n\t\t# cat a smartctl output text file instead of running smartctl\n\t\t# on a vdev (only used for developer testing).\n\t\tfile=$(get_filename_from_dir \"$samples\")\n\t\techo \"file=$file\"\n",
                      "markdown": "`\nif [ -b \"$somepath\" ] && PATH=\"/usr/sbin:$PATH\" command -v smartctl > /dev/null || [ -n \"$samples\" ] ; then\n\tif [ -n \"$samples\" ] ; then\n\t\t# cat a smartctl output text file instead of running smartctl\n\t\t# on a vdev (only used for developer testing).\n\t\tfile=$(get_filename_from_dir \"$samples\")\n\t\techo \"file=$file\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/smartx"
                },
                "region": {
                  "startLine": 68,
                  "startColumn": 56,
                  "endLine": 68,
                  "endColumn": 61,
                  "snippet": {
                    "text": "script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n",
                    "rendered": {
                      "text": "script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n",
                      "markdown": "`script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/smartx"
                },
                "region": {
                  "startLine": 68,
                  "startColumn": 25,
                  "endLine": 68,
                  "endColumn": 31,
                  "snippet": {
                    "text": "script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n",
                    "rendered": {
                      "text": "script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n",
                      "markdown": "`script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/smartx"
                },
                "region": {
                  "startLine": 56,
                  "endLine": 56,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\tnum_files=$(find \"$dir\" -maxdepth 1 -type f | wc -l)\n\tmod=$((pid % num_files))\n\ti=0\n\tfind \"$dir\" -type f -printf '%f\\n' | while read -r file ; do\n\t\tif [ \"$mod\" = \"$i\" ] ; then\n\t\t\techo \"$file\"\n\t\t\tbreak\n",
                    "rendered": {
                      "text": "\tnum_files=$(find \"$dir\" -maxdepth 1 -type f | wc -l)\n\tmod=$((pid % num_files))\n\ti=0\n\tfind \"$dir\" -type f -printf '%f\\n' | while read -r file ; do\n\t\tif [ \"$mod\" = \"$i\" ] ; then\n\t\t\techo \"$file\"\n\t\t\tbreak\n",
                      "markdown": "`\tnum_files=$(find \"$dir\" -maxdepth 1 -type f | wc -l)\n\tmod=$((pid % num_files))\n\ti=0\n\tfind \"$dir\" -type f -printf '%f\\n' | while read -r file ; do\n\t\tif [ \"$mod\" = \"$i\" ] ; then\n\t\t\techo \"$file\"\n\t\t\tbreak\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/smartx"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 38,
                  "endLine": 47,
                  "endColumn": 46,
                  "snippet": {
                    "text": "#\n# Look in directory DIR and return a filename from it.  The filename returned\n# is chosen quasi-sequentially (based off our PID).  This allows us to return\n# a different filename every time this script is invoked (which we do for each\n# vdev), without having to maintain state.\nget_filename_from_dir()\n{\n",
                    "rendered": {
                      "text": "#\n# Look in directory DIR and return a filename from it.  The filename returned\n# is chosen quasi-sequentially (based off our PID).  This allows us to return\n# a different filename every time this script is invoked (which we do for each\n# vdev), without having to maintain state.\nget_filename_from_dir()\n{\n",
                      "markdown": "`#\n# Look in directory DIR and return a filename from it.  The filename returned\n# is chosen quasi-sequentially (based off our PID).  This allows us to return\n# a different filename every time this script is invoked (which we do for each\n# vdev), without having to maintain state.\nget_filename_from_dir()\n{\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/smartx"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 28,
                  "endLine": 47,
                  "endColumn": 34,
                  "snippet": {
                    "text": "#\n# Look in directory DIR and return a filename from it.  The filename returned\n# is chosen quasi-sequentially (based off our PID).  This allows us to return\n# a different filename every time this script is invoked (which we do for each\n# vdev), without having to maintain state.\nget_filename_from_dir()\n{\n",
                    "rendered": {
                      "text": "#\n# Look in directory DIR and return a filename from it.  The filename returned\n# is chosen quasi-sequentially (based off our PID).  This allows us to return\n# a different filename every time this script is invoked (which we do for each\n# vdev), without having to maintain state.\nget_filename_from_dir()\n{\n",
                      "markdown": "`#\n# Look in directory DIR and return a filename from it.  The filename returned\n# is chosen quasi-sequentially (based off our PID).  This allows us to return\n# a different filename every time this script is invoked (which we do for each\n# vdev), without having to maintain state.\nget_filename_from_dir()\n{\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/smartx"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 27,
                  "endLine": 20,
                  "endColumn": 36,
                  "snippet": {
                    "text": "hours_on:\tShow number of hours drive powered on (all drives).\nrealloc:\tShow SMART reallocated sectors count (ATA).\nrep_ucor:\tShow SMART reported uncorrectable count (ATA).\ncmd_to:\t\tShow SMART command timeout count (ATA).\npend_sec:\tShow SMART current pending sector count (ATA).\noff_ucor:\tShow SMART offline uncorrectable errors (ATA).\nata_err:\tShow SMART ATA errors (ATA).\n",
                    "rendered": {
                      "text": "hours_on:\tShow number of hours drive powered on (all drives).\nrealloc:\tShow SMART reallocated sectors count (ATA).\nrep_ucor:\tShow SMART reported uncorrectable count (ATA).\ncmd_to:\t\tShow SMART command timeout count (ATA).\npend_sec:\tShow SMART current pending sector count (ATA).\noff_ucor:\tShow SMART offline uncorrectable errors (ATA).\nata_err:\tShow SMART ATA errors (ATA).\n",
                      "markdown": "`hours_on:\tShow number of hours drive powered on (all drives).\nrealloc:\tShow SMART reallocated sectors count (ATA).\nrep_ucor:\tShow SMART reported uncorrectable count (ATA).\ncmd_to:\t\tShow SMART command timeout count (ATA).\npend_sec:\tShow SMART current pending sector count (ATA).\noff_ucor:\tShow SMART offline uncorrectable errors (ATA).\nata_err:\tShow SMART ATA errors (ATA).\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/smart_test"
                },
                "region": {
                  "startLine": 244,
                  "startColumn": 47,
                  "endLine": 244,
                  "endColumn": 52,
                  "snippet": {
                    "text": "\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n\nif [ -n \"$without_vals\" ]; then\n",
                    "rendered": {
                      "text": "\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n\nif [ -n \"$without_vals\" ]; then\n",
                      "markdown": "`\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n\nif [ -n \"$without_vals\" ]; then\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/smart_test"
                },
                "region": {
                  "startLine": 242,
                  "startColumn": 29,
                  "endLine": 242,
                  "endColumn": 34,
                  "snippet": {
                    "text": "\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n",
                    "rendered": {
                      "text": "\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n",
                      "markdown": "`\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/smart_test"
                },
                "region": {
                  "startLine": 242,
                  "startColumn": 1,
                  "endLine": 242,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n",
                    "rendered": {
                      "text": "\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n",
                      "markdown": "`\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/smart_test"
                },
                "region": {
                  "startLine": 241,
                  "startColumn": 1,
                  "endLine": 241,
                  "endColumn": 7,
                  "snippet": {
                    "text": "if [ -n \"$with_vals\" ]; then\n\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\n",
                    "rendered": {
                      "text": "if [ -n \"$with_vals\" ]; then\n\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\n",
                      "markdown": "`if [ -n \"$with_vals\" ]; then\n\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/smart_test"
                },
                "region": {
                  "startLine": 237,
                  "startColumn": 25,
                  "endLine": 237,
                  "endColumn": 31,
                  "snippet": {
                    "text": "\tscripts=\"$script\"\nesac\n\nwith_vals=$(echo \"$out\" | grep -E \"$scripts\")\nif [ -n \"$with_vals\" ]; then\n\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n",
                    "rendered": {
                      "text": "\tscripts=\"$script\"\nesac\n\nwith_vals=$(echo \"$out\" | grep -E \"$scripts\")\nif [ -n \"$with_vals\" ]; then\n\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n",
                      "markdown": "`\tscripts=\"$script\"\nesac\n\nwith_vals=$(echo \"$out\" | grep -E \"$scripts\")\nif [ -n \"$with_vals\" ]; then\n\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/smart_test"
                },
                "region": {
                  "startLine": 199,
                  "startColumn": 36,
                  "endLine": 199,
                  "endColumn": 41,
                  "snippet": {
                    "text": "END {print \"type=\"type; ORS=\"\\n\"; print \"\"}\n');\nfi\ntype=$(echo \"$out\" | grep '^type=' | cut -d '=' -f 2)\n\n# If type is not set by now, either we don't have a block device\n# or smartctl failed. Either way, default to ATA and set $out to\n",
                    "rendered": {
                      "text": "END {print \"type=\"type; ORS=\"\\n\"; print \"\"}\n');\nfi\ntype=$(echo \"$out\" | grep '^type=' | cut -d '=' -f 2)\n\n# If type is not set by now, either we don't have a block device\n# or smartctl failed. Either way, default to ATA and set $out to\n",
                      "markdown": "`END {print \"type=\"type; ORS=\"\\n\"; print \"\"}\n');\nfi\ntype=$(echo \"$out\" | grep '^type=' | cut -d '=' -f 2)\n\n# If type is not set by now, either we don't have a block device\n# or smartctl failed. Either way, default to ATA and set $out to\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/smart_test"
                },
                "region": {
                  "startLine": 199,
                  "startColumn": 20,
                  "endLine": 199,
                  "endColumn": 26,
                  "snippet": {
                    "text": "END {print \"type=\"type; ORS=\"\\n\"; print \"\"}\n');\nfi\ntype=$(echo \"$out\" | grep '^type=' | cut -d '=' -f 2)\n\n# If type is not set by now, either we don't have a block device\n# or smartctl failed. Either way, default to ATA and set $out to\n",
                    "rendered": {
                      "text": "END {print \"type=\"type; ORS=\"\\n\"; print \"\"}\n');\nfi\ntype=$(echo \"$out\" | grep '^type=' | cut -d '=' -f 2)\n\n# If type is not set by now, either we don't have a block device\n# or smartctl failed. Either way, default to ATA and set $out to\n",
                      "markdown": "`END {print \"type=\"type; ORS=\"\\n\"; print \"\"}\n');\nfi\ntype=$(echo \"$out\" | grep '^type=' | cut -d '=' -f 2)\n\n# If type is not set by now, either we don't have a block device\n# or smartctl failed. Either way, default to ATA and set $out to\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/smart_test"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 24,
                  "endLine": 103,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\t# NVMe:\n\t#       SMART/Health Information (NVMe Log 0xnn, NSID 0xnn)\n\t#\n\tout=$(echo \"$raw_out\" | awk '\n# SAS specific\n/read:/{print \"rrd=\"$4\"\\nr_cor=\"$5\"\\nr_proc=\"$7\"\\nr_ucor=\"$8}\n/write:/{print \"rwr=\"$4\"\\nw_cor=\"$5\"\\nw_proc=\"$7\"\\nw_ucor=\"$8}\n",
                    "rendered": {
                      "text": "\t# NVMe:\n\t#       SMART/Health Information (NVMe Log 0xnn, NSID 0xnn)\n\t#\n\tout=$(echo \"$raw_out\" | awk '\n# SAS specific\n/read:/{print \"rrd=\"$4\"\\nr_cor=\"$5\"\\nr_proc=\"$7\"\\nr_ucor=\"$8}\n/write:/{print \"rwr=\"$4\"\\nw_cor=\"$5\"\\nw_proc=\"$7\"\\nw_ucor=\"$8}\n",
                      "markdown": "`\t# NVMe:\n\t#       SMART/Health Information (NVMe Log 0xnn, NSID 0xnn)\n\t#\n\tout=$(echo \"$raw_out\" | awk '\n# SAS specific\n/read:/{print \"rrd=\"$4\"\\nr_cor=\"$5\"\\nr_proc=\"$7\"\\nr_ucor=\"$8}\n/write:/{print \"rwr=\"$4\"\\nw_cor=\"$5\"\\nw_proc=\"$7\"\\nw_ucor=\"$8}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/smart_test"
                },
                "region": {
                  "startLine": 83,
                  "startColumn": 3,
                  "endLine": 83,
                  "endColumn": 8,
                  "snippet": {
                    "text": "\nif [ -b \"$somepath\" ] && PATH=\"/usr/sbin:$PATH\" command -v smartctl > /dev/null || [ -n \"$samples\" ] ; then\n\tif [ -n \"$samples\" ] ; then\n\t\t# cat a smartctl output text file instead of running smartctl\n\t\t# on a vdev (only used for developer testing).\n\t\tfile=$(get_filename_from_dir \"$samples\")\n\t\techo \"file=$file\"\n",
                    "rendered": {
                      "text": "\nif [ -b \"$somepath\" ] && PATH=\"/usr/sbin:$PATH\" command -v smartctl > /dev/null || [ -n \"$samples\" ] ; then\n\tif [ -n \"$samples\" ] ; then\n\t\t# cat a smartctl output text file instead of running smartctl\n\t\t# on a vdev (only used for developer testing).\n\t\tfile=$(get_filename_from_dir \"$samples\")\n\t\techo \"file=$file\"\n",
                      "markdown": "`\nif [ -b \"$somepath\" ] && PATH=\"/usr/sbin:$PATH\" command -v smartctl > /dev/null || [ -n \"$samples\" ] ; then\n\tif [ -n \"$samples\" ] ; then\n\t\t# cat a smartctl output text file instead of running smartctl\n\t\t# on a vdev (only used for developer testing).\n\t\tfile=$(get_filename_from_dir \"$samples\")\n\t\techo \"file=$file\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/smart_test"
                },
                "region": {
                  "startLine": 68,
                  "startColumn": 56,
                  "endLine": 68,
                  "endColumn": 61,
                  "snippet": {
                    "text": "script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n",
                    "rendered": {
                      "text": "script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n",
                      "markdown": "`script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/smart_test"
                },
                "region": {
                  "startLine": 68,
                  "startColumn": 25,
                  "endLine": 68,
                  "endColumn": 31,
                  "snippet": {
                    "text": "script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n",
                    "rendered": {
                      "text": "script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n",
                      "markdown": "`script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/smart_test"
                },
                "region": {
                  "startLine": 56,
                  "endLine": 56,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\tnum_files=$(find \"$dir\" -maxdepth 1 -type f | wc -l)\n\tmod=$((pid % num_files))\n\ti=0\n\tfind \"$dir\" -type f -printf '%f\\n' | while read -r file ; do\n\t\tif [ \"$mod\" = \"$i\" ] ; then\n\t\t\techo \"$file\"\n\t\t\tbreak\n",
                    "rendered": {
                      "text": "\tnum_files=$(find \"$dir\" -maxdepth 1 -type f | wc -l)\n\tmod=$((pid % num_files))\n\ti=0\n\tfind \"$dir\" -type f -printf '%f\\n' | while read -r file ; do\n\t\tif [ \"$mod\" = \"$i\" ] ; then\n\t\t\techo \"$file\"\n\t\t\tbreak\n",
                      "markdown": "`\tnum_files=$(find \"$dir\" -maxdepth 1 -type f | wc -l)\n\tmod=$((pid % num_files))\n\ti=0\n\tfind \"$dir\" -type f -printf '%f\\n' | while read -r file ; do\n\t\tif [ \"$mod\" = \"$i\" ] ; then\n\t\t\techo \"$file\"\n\t\t\tbreak\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/smart_test"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 38,
                  "endLine": 47,
                  "endColumn": 46,
                  "snippet": {
                    "text": "#\n# Look in directory DIR and return a filename from it.  The filename returned\n# is chosen quasi-sequentially (based off our PID).  This allows us to return\n# a different filename every time this script is invoked (which we do for each\n# vdev), without having to maintain state.\nget_filename_from_dir()\n{\n",
                    "rendered": {
                      "text": "#\n# Look in directory DIR and return a filename from it.  The filename returned\n# is chosen quasi-sequentially (based off our PID).  This allows us to return\n# a different filename every time this script is invoked (which we do for each\n# vdev), without having to maintain state.\nget_filename_from_dir()\n{\n",
                      "markdown": "`#\n# Look in directory DIR and return a filename from it.  The filename returned\n# is chosen quasi-sequentially (based off our PID).  This allows us to return\n# a different filename every time this script is invoked (which we do for each\n# vdev), without having to maintain state.\nget_filename_from_dir()\n{\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/smart_test"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 28,
                  "endLine": 47,
                  "endColumn": 34,
                  "snippet": {
                    "text": "#\n# Look in directory DIR and return a filename from it.  The filename returned\n# is chosen quasi-sequentially (based off our PID).  This allows us to return\n# a different filename every time this script is invoked (which we do for each\n# vdev), without having to maintain state.\nget_filename_from_dir()\n{\n",
                    "rendered": {
                      "text": "#\n# Look in directory DIR and return a filename from it.  The filename returned\n# is chosen quasi-sequentially (based off our PID).  This allows us to return\n# a different filename every time this script is invoked (which we do for each\n# vdev), without having to maintain state.\nget_filename_from_dir()\n{\n",
                      "markdown": "`#\n# Look in directory DIR and return a filename from it.  The filename returned\n# is chosen quasi-sequentially (based off our PID).  This allows us to return\n# a different filename every time this script is invoked (which we do for each\n# vdev), without having to maintain state.\nget_filename_from_dir()\n{\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/smart_test"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 27,
                  "endLine": 20,
                  "endColumn": 36,
                  "snippet": {
                    "text": "hours_on:\tShow number of hours drive powered on (all drives).\nrealloc:\tShow SMART reallocated sectors count (ATA).\nrep_ucor:\tShow SMART reported uncorrectable count (ATA).\ncmd_to:\t\tShow SMART command timeout count (ATA).\npend_sec:\tShow SMART current pending sector count (ATA).\noff_ucor:\tShow SMART offline uncorrectable errors (ATA).\nata_err:\tShow SMART ATA errors (ATA).\n",
                    "rendered": {
                      "text": "hours_on:\tShow number of hours drive powered on (all drives).\nrealloc:\tShow SMART reallocated sectors count (ATA).\nrep_ucor:\tShow SMART reported uncorrectable count (ATA).\ncmd_to:\t\tShow SMART command timeout count (ATA).\npend_sec:\tShow SMART current pending sector count (ATA).\noff_ucor:\tShow SMART offline uncorrectable errors (ATA).\nata_err:\tShow SMART ATA errors (ATA).\n",
                      "markdown": "`hours_on:\tShow number of hours drive powered on (all drives).\nrealloc:\tShow SMART reallocated sectors count (ATA).\nrep_ucor:\tShow SMART reported uncorrectable count (ATA).\ncmd_to:\t\tShow SMART command timeout count (ATA).\npend_sec:\tShow SMART current pending sector count (ATA).\noff_ucor:\tShow SMART offline uncorrectable errors (ATA).\nata_err:\tShow SMART ATA errors (ATA).\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/cmd_to"
                },
                "region": {
                  "startLine": 244,
                  "startColumn": 47,
                  "endLine": 244,
                  "endColumn": 52,
                  "snippet": {
                    "text": "\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n\nif [ -n \"$without_vals\" ]; then\n",
                    "rendered": {
                      "text": "\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n\nif [ -n \"$without_vals\" ]; then\n",
                      "markdown": "`\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n\nif [ -n \"$without_vals\" ]; then\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/cmd_to"
                },
                "region": {
                  "startLine": 242,
                  "startColumn": 29,
                  "endLine": 242,
                  "endColumn": 34,
                  "snippet": {
                    "text": "\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n",
                    "rendered": {
                      "text": "\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n",
                      "markdown": "`\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/cmd_to"
                },
                "region": {
                  "startLine": 242,
                  "startColumn": 1,
                  "endLine": 242,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n",
                    "rendered": {
                      "text": "\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n",
                      "markdown": "`\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/cmd_to"
                },
                "region": {
                  "startLine": 241,
                  "startColumn": 1,
                  "endLine": 241,
                  "endColumn": 7,
                  "snippet": {
                    "text": "if [ -n \"$with_vals\" ]; then\n\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\n",
                    "rendered": {
                      "text": "if [ -n \"$with_vals\" ]; then\n\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\n",
                      "markdown": "`if [ -n \"$with_vals\" ]; then\n\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/cmd_to"
                },
                "region": {
                  "startLine": 237,
                  "startColumn": 25,
                  "endLine": 237,
                  "endColumn": 31,
                  "snippet": {
                    "text": "\tscripts=\"$script\"\nesac\n\nwith_vals=$(echo \"$out\" | grep -E \"$scripts\")\nif [ -n \"$with_vals\" ]; then\n\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n",
                    "rendered": {
                      "text": "\tscripts=\"$script\"\nesac\n\nwith_vals=$(echo \"$out\" | grep -E \"$scripts\")\nif [ -n \"$with_vals\" ]; then\n\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n",
                      "markdown": "`\tscripts=\"$script\"\nesac\n\nwith_vals=$(echo \"$out\" | grep -E \"$scripts\")\nif [ -n \"$with_vals\" ]; then\n\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/cmd_to"
                },
                "region": {
                  "startLine": 199,
                  "startColumn": 36,
                  "endLine": 199,
                  "endColumn": 41,
                  "snippet": {
                    "text": "END {print \"type=\"type; ORS=\"\\n\"; print \"\"}\n');\nfi\ntype=$(echo \"$out\" | grep '^type=' | cut -d '=' -f 2)\n\n# If type is not set by now, either we don't have a block device\n# or smartctl failed. Either way, default to ATA and set $out to\n",
                    "rendered": {
                      "text": "END {print \"type=\"type; ORS=\"\\n\"; print \"\"}\n');\nfi\ntype=$(echo \"$out\" | grep '^type=' | cut -d '=' -f 2)\n\n# If type is not set by now, either we don't have a block device\n# or smartctl failed. Either way, default to ATA and set $out to\n",
                      "markdown": "`END {print \"type=\"type; ORS=\"\\n\"; print \"\"}\n');\nfi\ntype=$(echo \"$out\" | grep '^type=' | cut -d '=' -f 2)\n\n# If type is not set by now, either we don't have a block device\n# or smartctl failed. Either way, default to ATA and set $out to\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/cmd_to"
                },
                "region": {
                  "startLine": 199,
                  "startColumn": 20,
                  "endLine": 199,
                  "endColumn": 26,
                  "snippet": {
                    "text": "END {print \"type=\"type; ORS=\"\\n\"; print \"\"}\n');\nfi\ntype=$(echo \"$out\" | grep '^type=' | cut -d '=' -f 2)\n\n# If type is not set by now, either we don't have a block device\n# or smartctl failed. Either way, default to ATA and set $out to\n",
                    "rendered": {
                      "text": "END {print \"type=\"type; ORS=\"\\n\"; print \"\"}\n');\nfi\ntype=$(echo \"$out\" | grep '^type=' | cut -d '=' -f 2)\n\n# If type is not set by now, either we don't have a block device\n# or smartctl failed. Either way, default to ATA and set $out to\n",
                      "markdown": "`END {print \"type=\"type; ORS=\"\\n\"; print \"\"}\n');\nfi\ntype=$(echo \"$out\" | grep '^type=' | cut -d '=' -f 2)\n\n# If type is not set by now, either we don't have a block device\n# or smartctl failed. Either way, default to ATA and set $out to\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/cmd_to"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 24,
                  "endLine": 103,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\t# NVMe:\n\t#       SMART/Health Information (NVMe Log 0xnn, NSID 0xnn)\n\t#\n\tout=$(echo \"$raw_out\" | awk '\n# SAS specific\n/read:/{print \"rrd=\"$4\"\\nr_cor=\"$5\"\\nr_proc=\"$7\"\\nr_ucor=\"$8}\n/write:/{print \"rwr=\"$4\"\\nw_cor=\"$5\"\\nw_proc=\"$7\"\\nw_ucor=\"$8}\n",
                    "rendered": {
                      "text": "\t# NVMe:\n\t#       SMART/Health Information (NVMe Log 0xnn, NSID 0xnn)\n\t#\n\tout=$(echo \"$raw_out\" | awk '\n# SAS specific\n/read:/{print \"rrd=\"$4\"\\nr_cor=\"$5\"\\nr_proc=\"$7\"\\nr_ucor=\"$8}\n/write:/{print \"rwr=\"$4\"\\nw_cor=\"$5\"\\nw_proc=\"$7\"\\nw_ucor=\"$8}\n",
                      "markdown": "`\t# NVMe:\n\t#       SMART/Health Information (NVMe Log 0xnn, NSID 0xnn)\n\t#\n\tout=$(echo \"$raw_out\" | awk '\n# SAS specific\n/read:/{print \"rrd=\"$4\"\\nr_cor=\"$5\"\\nr_proc=\"$7\"\\nr_ucor=\"$8}\n/write:/{print \"rwr=\"$4\"\\nw_cor=\"$5\"\\nw_proc=\"$7\"\\nw_ucor=\"$8}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/cmd_to"
                },
                "region": {
                  "startLine": 83,
                  "startColumn": 3,
                  "endLine": 83,
                  "endColumn": 8,
                  "snippet": {
                    "text": "\nif [ -b \"$somepath\" ] && PATH=\"/usr/sbin:$PATH\" command -v smartctl > /dev/null || [ -n \"$samples\" ] ; then\n\tif [ -n \"$samples\" ] ; then\n\t\t# cat a smartctl output text file instead of running smartctl\n\t\t# on a vdev (only used for developer testing).\n\t\tfile=$(get_filename_from_dir \"$samples\")\n\t\techo \"file=$file\"\n",
                    "rendered": {
                      "text": "\nif [ -b \"$somepath\" ] && PATH=\"/usr/sbin:$PATH\" command -v smartctl > /dev/null || [ -n \"$samples\" ] ; then\n\tif [ -n \"$samples\" ] ; then\n\t\t# cat a smartctl output text file instead of running smartctl\n\t\t# on a vdev (only used for developer testing).\n\t\tfile=$(get_filename_from_dir \"$samples\")\n\t\techo \"file=$file\"\n",
                      "markdown": "`\nif [ -b \"$somepath\" ] && PATH=\"/usr/sbin:$PATH\" command -v smartctl > /dev/null || [ -n \"$samples\" ] ; then\n\tif [ -n \"$samples\" ] ; then\n\t\t# cat a smartctl output text file instead of running smartctl\n\t\t# on a vdev (only used for developer testing).\n\t\tfile=$(get_filename_from_dir \"$samples\")\n\t\techo \"file=$file\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/cmd_to"
                },
                "region": {
                  "startLine": 68,
                  "startColumn": 56,
                  "endLine": 68,
                  "endColumn": 61,
                  "snippet": {
                    "text": "script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n",
                    "rendered": {
                      "text": "script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n",
                      "markdown": "`script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/cmd_to"
                },
                "region": {
                  "startLine": 68,
                  "startColumn": 25,
                  "endLine": 68,
                  "endColumn": 31,
                  "snippet": {
                    "text": "script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n",
                    "rendered": {
                      "text": "script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n",
                      "markdown": "`script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/cmd_to"
                },
                "region": {
                  "startLine": 56,
                  "endLine": 56,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\tnum_files=$(find \"$dir\" -maxdepth 1 -type f | wc -l)\n\tmod=$((pid % num_files))\n\ti=0\n\tfind \"$dir\" -type f -printf '%f\\n' | while read -r file ; do\n\t\tif [ \"$mod\" = \"$i\" ] ; then\n\t\t\techo \"$file\"\n\t\t\tbreak\n",
                    "rendered": {
                      "text": "\tnum_files=$(find \"$dir\" -maxdepth 1 -type f | wc -l)\n\tmod=$((pid % num_files))\n\ti=0\n\tfind \"$dir\" -type f -printf '%f\\n' | while read -r file ; do\n\t\tif [ \"$mod\" = \"$i\" ] ; then\n\t\t\techo \"$file\"\n\t\t\tbreak\n",
                      "markdown": "`\tnum_files=$(find \"$dir\" -maxdepth 1 -type f | wc -l)\n\tmod=$((pid % num_files))\n\ti=0\n\tfind \"$dir\" -type f -printf '%f\\n' | while read -r file ; do\n\t\tif [ \"$mod\" = \"$i\" ] ; then\n\t\t\techo \"$file\"\n\t\t\tbreak\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/cmd_to"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 38,
                  "endLine": 47,
                  "endColumn": 46,
                  "snippet": {
                    "text": "#\n# Look in directory DIR and return a filename from it.  The filename returned\n# is chosen quasi-sequentially (based off our PID).  This allows us to return\n# a different filename every time this script is invoked (which we do for each\n# vdev), without having to maintain state.\nget_filename_from_dir()\n{\n",
                    "rendered": {
                      "text": "#\n# Look in directory DIR and return a filename from it.  The filename returned\n# is chosen quasi-sequentially (based off our PID).  This allows us to return\n# a different filename every time this script is invoked (which we do for each\n# vdev), without having to maintain state.\nget_filename_from_dir()\n{\n",
                      "markdown": "`#\n# Look in directory DIR and return a filename from it.  The filename returned\n# is chosen quasi-sequentially (based off our PID).  This allows us to return\n# a different filename every time this script is invoked (which we do for each\n# vdev), without having to maintain state.\nget_filename_from_dir()\n{\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/cmd_to"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 28,
                  "endLine": 47,
                  "endColumn": 34,
                  "snippet": {
                    "text": "#\n# Look in directory DIR and return a filename from it.  The filename returned\n# is chosen quasi-sequentially (based off our PID).  This allows us to return\n# a different filename every time this script is invoked (which we do for each\n# vdev), without having to maintain state.\nget_filename_from_dir()\n{\n",
                    "rendered": {
                      "text": "#\n# Look in directory DIR and return a filename from it.  The filename returned\n# is chosen quasi-sequentially (based off our PID).  This allows us to return\n# a different filename every time this script is invoked (which we do for each\n# vdev), without having to maintain state.\nget_filename_from_dir()\n{\n",
                      "markdown": "`#\n# Look in directory DIR and return a filename from it.  The filename returned\n# is chosen quasi-sequentially (based off our PID).  This allows us to return\n# a different filename every time this script is invoked (which we do for each\n# vdev), without having to maintain state.\nget_filename_from_dir()\n{\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/cmd_to"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 27,
                  "endLine": 20,
                  "endColumn": 36,
                  "snippet": {
                    "text": "hours_on:\tShow number of hours drive powered on (all drives).\nrealloc:\tShow SMART reallocated sectors count (ATA).\nrep_ucor:\tShow SMART reported uncorrectable count (ATA).\ncmd_to:\t\tShow SMART command timeout count (ATA).\npend_sec:\tShow SMART current pending sector count (ATA).\noff_ucor:\tShow SMART offline uncorrectable errors (ATA).\nata_err:\tShow SMART ATA errors (ATA).\n",
                    "rendered": {
                      "text": "hours_on:\tShow number of hours drive powered on (all drives).\nrealloc:\tShow SMART reallocated sectors count (ATA).\nrep_ucor:\tShow SMART reported uncorrectable count (ATA).\ncmd_to:\t\tShow SMART command timeout count (ATA).\npend_sec:\tShow SMART current pending sector count (ATA).\noff_ucor:\tShow SMART offline uncorrectable errors (ATA).\nata_err:\tShow SMART ATA errors (ATA).\n",
                      "markdown": "`hours_on:\tShow number of hours drive powered on (all drives).\nrealloc:\tShow SMART reallocated sectors count (ATA).\nrep_ucor:\tShow SMART reported uncorrectable count (ATA).\ncmd_to:\t\tShow SMART command timeout count (ATA).\npend_sec:\tShow SMART current pending sector count (ATA).\noff_ucor:\tShow SMART offline uncorrectable errors (ATA).\nata_err:\tShow SMART ATA errors (ATA).\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/ata_err"
                },
                "region": {
                  "startLine": 244,
                  "startColumn": 47,
                  "endLine": 244,
                  "endColumn": 52,
                  "snippet": {
                    "text": "\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n\nif [ -n \"$without_vals\" ]; then\n",
                    "rendered": {
                      "text": "\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n\nif [ -n \"$without_vals\" ]; then\n",
                      "markdown": "`\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n\nif [ -n \"$without_vals\" ]; then\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/ata_err"
                },
                "region": {
                  "startLine": 242,
                  "startColumn": 29,
                  "endLine": 242,
                  "endColumn": 34,
                  "snippet": {
                    "text": "\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n",
                    "rendered": {
                      "text": "\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n",
                      "markdown": "`\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/ata_err"
                },
                "region": {
                  "startLine": 242,
                  "startColumn": 1,
                  "endLine": 242,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n",
                    "rendered": {
                      "text": "\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n",
                      "markdown": "`\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/ata_err"
                },
                "region": {
                  "startLine": 241,
                  "startColumn": 1,
                  "endLine": 241,
                  "endColumn": 7,
                  "snippet": {
                    "text": "if [ -n \"$with_vals\" ]; then\n\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\n",
                    "rendered": {
                      "text": "if [ -n \"$with_vals\" ]; then\n\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\n",
                      "markdown": "`if [ -n \"$with_vals\" ]; then\n\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/ata_err"
                },
                "region": {
                  "startLine": 237,
                  "startColumn": 25,
                  "endLine": 237,
                  "endColumn": 31,
                  "snippet": {
                    "text": "\tscripts=\"$script\"\nesac\n\nwith_vals=$(echo \"$out\" | grep -E \"$scripts\")\nif [ -n \"$with_vals\" ]; then\n\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n",
                    "rendered": {
                      "text": "\tscripts=\"$script\"\nesac\n\nwith_vals=$(echo \"$out\" | grep -E \"$scripts\")\nif [ -n \"$with_vals\" ]; then\n\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n",
                      "markdown": "`\tscripts=\"$script\"\nesac\n\nwith_vals=$(echo \"$out\" | grep -E \"$scripts\")\nif [ -n \"$with_vals\" ]; then\n\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/ata_err"
                },
                "region": {
                  "startLine": 199,
                  "startColumn": 36,
                  "endLine": 199,
                  "endColumn": 41,
                  "snippet": {
                    "text": "END {print \"type=\"type; ORS=\"\\n\"; print \"\"}\n');\nfi\ntype=$(echo \"$out\" | grep '^type=' | cut -d '=' -f 2)\n\n# If type is not set by now, either we don't have a block device\n# or smartctl failed. Either way, default to ATA and set $out to\n",
                    "rendered": {
                      "text": "END {print \"type=\"type; ORS=\"\\n\"; print \"\"}\n');\nfi\ntype=$(echo \"$out\" | grep '^type=' | cut -d '=' -f 2)\n\n# If type is not set by now, either we don't have a block device\n# or smartctl failed. Either way, default to ATA and set $out to\n",
                      "markdown": "`END {print \"type=\"type; ORS=\"\\n\"; print \"\"}\n');\nfi\ntype=$(echo \"$out\" | grep '^type=' | cut -d '=' -f 2)\n\n# If type is not set by now, either we don't have a block device\n# or smartctl failed. Either way, default to ATA and set $out to\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/ata_err"
                },
                "region": {
                  "startLine": 199,
                  "startColumn": 20,
                  "endLine": 199,
                  "endColumn": 26,
                  "snippet": {
                    "text": "END {print \"type=\"type; ORS=\"\\n\"; print \"\"}\n');\nfi\ntype=$(echo \"$out\" | grep '^type=' | cut -d '=' -f 2)\n\n# If type is not set by now, either we don't have a block device\n# or smartctl failed. Either way, default to ATA and set $out to\n",
                    "rendered": {
                      "text": "END {print \"type=\"type; ORS=\"\\n\"; print \"\"}\n');\nfi\ntype=$(echo \"$out\" | grep '^type=' | cut -d '=' -f 2)\n\n# If type is not set by now, either we don't have a block device\n# or smartctl failed. Either way, default to ATA and set $out to\n",
                      "markdown": "`END {print \"type=\"type; ORS=\"\\n\"; print \"\"}\n');\nfi\ntype=$(echo \"$out\" | grep '^type=' | cut -d '=' -f 2)\n\n# If type is not set by now, either we don't have a block device\n# or smartctl failed. Either way, default to ATA and set $out to\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/ata_err"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 24,
                  "endLine": 103,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\t# NVMe:\n\t#       SMART/Health Information (NVMe Log 0xnn, NSID 0xnn)\n\t#\n\tout=$(echo \"$raw_out\" | awk '\n# SAS specific\n/read:/{print \"rrd=\"$4\"\\nr_cor=\"$5\"\\nr_proc=\"$7\"\\nr_ucor=\"$8}\n/write:/{print \"rwr=\"$4\"\\nw_cor=\"$5\"\\nw_proc=\"$7\"\\nw_ucor=\"$8}\n",
                    "rendered": {
                      "text": "\t# NVMe:\n\t#       SMART/Health Information (NVMe Log 0xnn, NSID 0xnn)\n\t#\n\tout=$(echo \"$raw_out\" | awk '\n# SAS specific\n/read:/{print \"rrd=\"$4\"\\nr_cor=\"$5\"\\nr_proc=\"$7\"\\nr_ucor=\"$8}\n/write:/{print \"rwr=\"$4\"\\nw_cor=\"$5\"\\nw_proc=\"$7\"\\nw_ucor=\"$8}\n",
                      "markdown": "`\t# NVMe:\n\t#       SMART/Health Information (NVMe Log 0xnn, NSID 0xnn)\n\t#\n\tout=$(echo \"$raw_out\" | awk '\n# SAS specific\n/read:/{print \"rrd=\"$4\"\\nr_cor=\"$5\"\\nr_proc=\"$7\"\\nr_ucor=\"$8}\n/write:/{print \"rwr=\"$4\"\\nw_cor=\"$5\"\\nw_proc=\"$7\"\\nw_ucor=\"$8}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/ata_err"
                },
                "region": {
                  "startLine": 83,
                  "startColumn": 3,
                  "endLine": 83,
                  "endColumn": 8,
                  "snippet": {
                    "text": "\nif [ -b \"$somepath\" ] && PATH=\"/usr/sbin:$PATH\" command -v smartctl > /dev/null || [ -n \"$samples\" ] ; then\n\tif [ -n \"$samples\" ] ; then\n\t\t# cat a smartctl output text file instead of running smartctl\n\t\t# on a vdev (only used for developer testing).\n\t\tfile=$(get_filename_from_dir \"$samples\")\n\t\techo \"file=$file\"\n",
                    "rendered": {
                      "text": "\nif [ -b \"$somepath\" ] && PATH=\"/usr/sbin:$PATH\" command -v smartctl > /dev/null || [ -n \"$samples\" ] ; then\n\tif [ -n \"$samples\" ] ; then\n\t\t# cat a smartctl output text file instead of running smartctl\n\t\t# on a vdev (only used for developer testing).\n\t\tfile=$(get_filename_from_dir \"$samples\")\n\t\techo \"file=$file\"\n",
                      "markdown": "`\nif [ -b \"$somepath\" ] && PATH=\"/usr/sbin:$PATH\" command -v smartctl > /dev/null || [ -n \"$samples\" ] ; then\n\tif [ -n \"$samples\" ] ; then\n\t\t# cat a smartctl output text file instead of running smartctl\n\t\t# on a vdev (only used for developer testing).\n\t\tfile=$(get_filename_from_dir \"$samples\")\n\t\techo \"file=$file\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/ata_err"
                },
                "region": {
                  "startLine": 68,
                  "startColumn": 56,
                  "endLine": 68,
                  "endColumn": 61,
                  "snippet": {
                    "text": "script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n",
                    "rendered": {
                      "text": "script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n",
                      "markdown": "`script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/ata_err"
                },
                "region": {
                  "startLine": 68,
                  "startColumn": 25,
                  "endLine": 68,
                  "endColumn": 31,
                  "snippet": {
                    "text": "script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n",
                    "rendered": {
                      "text": "script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n",
                      "markdown": "`script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/ata_err"
                },
                "region": {
                  "startLine": 56,
                  "endLine": 56,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\tnum_files=$(find \"$dir\" -maxdepth 1 -type f | wc -l)\n\tmod=$((pid % num_files))\n\ti=0\n\tfind \"$dir\" -type f -printf '%f\\n' | while read -r file ; do\n\t\tif [ \"$mod\" = \"$i\" ] ; then\n\t\t\techo \"$file\"\n\t\t\tbreak\n",
                    "rendered": {
                      "text": "\tnum_files=$(find \"$dir\" -maxdepth 1 -type f | wc -l)\n\tmod=$((pid % num_files))\n\ti=0\n\tfind \"$dir\" -type f -printf '%f\\n' | while read -r file ; do\n\t\tif [ \"$mod\" = \"$i\" ] ; then\n\t\t\techo \"$file\"\n\t\t\tbreak\n",
                      "markdown": "`\tnum_files=$(find \"$dir\" -maxdepth 1 -type f | wc -l)\n\tmod=$((pid % num_files))\n\ti=0\n\tfind \"$dir\" -type f -printf '%f\\n' | while read -r file ; do\n\t\tif [ \"$mod\" = \"$i\" ] ; then\n\t\t\techo \"$file\"\n\t\t\tbreak\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/ata_err"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 38,
                  "endLine": 47,
                  "endColumn": 46,
                  "snippet": {
                    "text": "#\n# Look in directory DIR and return a filename from it.  The filename returned\n# is chosen quasi-sequentially (based off our PID).  This allows us to return\n# a different filename every time this script is invoked (which we do for each\n# vdev), without having to maintain state.\nget_filename_from_dir()\n{\n",
                    "rendered": {
                      "text": "#\n# Look in directory DIR and return a filename from it.  The filename returned\n# is chosen quasi-sequentially (based off our PID).  This allows us to return\n# a different filename every time this script is invoked (which we do for each\n# vdev), without having to maintain state.\nget_filename_from_dir()\n{\n",
                      "markdown": "`#\n# Look in directory DIR and return a filename from it.  The filename returned\n# is chosen quasi-sequentially (based off our PID).  This allows us to return\n# a different filename every time this script is invoked (which we do for each\n# vdev), without having to maintain state.\nget_filename_from_dir()\n{\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/ata_err"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 28,
                  "endLine": 47,
                  "endColumn": 34,
                  "snippet": {
                    "text": "#\n# Look in directory DIR and return a filename from it.  The filename returned\n# is chosen quasi-sequentially (based off our PID).  This allows us to return\n# a different filename every time this script is invoked (which we do for each\n# vdev), without having to maintain state.\nget_filename_from_dir()\n{\n",
                    "rendered": {
                      "text": "#\n# Look in directory DIR and return a filename from it.  The filename returned\n# is chosen quasi-sequentially (based off our PID).  This allows us to return\n# a different filename every time this script is invoked (which we do for each\n# vdev), without having to maintain state.\nget_filename_from_dir()\n{\n",
                      "markdown": "`#\n# Look in directory DIR and return a filename from it.  The filename returned\n# is chosen quasi-sequentially (based off our PID).  This allows us to return\n# a different filename every time this script is invoked (which we do for each\n# vdev), without having to maintain state.\nget_filename_from_dir()\n{\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/ata_err"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 27,
                  "endLine": 20,
                  "endColumn": 36,
                  "snippet": {
                    "text": "hours_on:\tShow number of hours drive powered on (all drives).\nrealloc:\tShow SMART reallocated sectors count (ATA).\nrep_ucor:\tShow SMART reported uncorrectable count (ATA).\ncmd_to:\t\tShow SMART command timeout count (ATA).\npend_sec:\tShow SMART current pending sector count (ATA).\noff_ucor:\tShow SMART offline uncorrectable errors (ATA).\nata_err:\tShow SMART ATA errors (ATA).\n",
                    "rendered": {
                      "text": "hours_on:\tShow number of hours drive powered on (all drives).\nrealloc:\tShow SMART reallocated sectors count (ATA).\nrep_ucor:\tShow SMART reported uncorrectable count (ATA).\ncmd_to:\t\tShow SMART command timeout count (ATA).\npend_sec:\tShow SMART current pending sector count (ATA).\noff_ucor:\tShow SMART offline uncorrectable errors (ATA).\nata_err:\tShow SMART ATA errors (ATA).\n",
                      "markdown": "`hours_on:\tShow number of hours drive powered on (all drives).\nrealloc:\tShow SMART reallocated sectors count (ATA).\nrep_ucor:\tShow SMART reported uncorrectable count (ATA).\ncmd_to:\t\tShow SMART command timeout count (ATA).\npend_sec:\tShow SMART current pending sector count (ATA).\noff_ucor:\tShow SMART offline uncorrectable errors (ATA).\nata_err:\tShow SMART ATA errors (ATA).\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/etc/init.d/zfs-import"
                },
                "region": {
                  "startLine": 179,
                  "startColumn": 16,
                  "endLine": 179,
                  "endColumn": 20,
                  "snippet": {
                    "text": "\t\t\tfi\n\t\tfi\n\n\t\t# ... and /dev at the very end, just for good measure.\n\t\tZPOOL_IMPORT_PATH=\"$ZPOOL_IMPORT_PATH$dirs:/dev\"\n\tfi\n\n",
                    "rendered": {
                      "text": "\t\t\tfi\n\t\tfi\n\n\t\t# ... and /dev at the very end, just for good measure.\n\t\tZPOOL_IMPORT_PATH=\"$ZPOOL_IMPORT_PATH$dirs:/dev\"\n\tfi\n\n",
                      "markdown": "`\t\t\tfi\n\t\tfi\n\n\t\t# ... and /dev at the very end, just for good measure.\n\t\tZPOOL_IMPORT_PATH=\"$ZPOOL_IMPORT_PATH$dirs:/dev\"\n\tfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/etc/init.d/zfs-import"
                },
                "region": {
                  "startLine": 166,
                  "startColumn": 16,
                  "endLine": 166,
                  "endColumn": 20,
                  "snippet": {
                    "text": "\n\t\tif [ -d \"/dev/disk/by-vdev\" ]\n\t\tthen\n\t\t\t# Add by-vdev at the beginning.\n\t\t\tZPOOL_IMPORT_PATH=\"/dev/disk/by-vdev:\"\n\t\tfi\n\n",
                    "rendered": {
                      "text": "\n\t\tif [ -d \"/dev/disk/by-vdev\" ]\n\t\tthen\n\t\t\t# Add by-vdev at the beginning.\n\t\t\tZPOOL_IMPORT_PATH=\"/dev/disk/by-vdev:\"\n\t\tfi\n\n",
                      "markdown": "`\n\t\tif [ -d \"/dev/disk/by-vdev\" ]\n\t\tthen\n\t\t\t# Add by-vdev at the beginning.\n\t\t\tZPOOL_IMPORT_PATH=\"/dev/disk/by-vdev:\"\n\t\tfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/etc/init.d/zfs-import"
                },
                "region": {
                  "startLine": 186,
                  "startColumn": 2,
                  "endLine": 186,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\t# Needs to be exported for \"zpool\" to catch it.\n\t[ -n \"$ZPOOL_IMPORT_PATH\" ] && export ZPOOL_IMPORT_PATH\n\n\t# Mount all available pools (except those set in ZFS_POOL_EXCEPTIONS.\n\t#\n\t# If not interactive (run from init - variable init='/sbin/init')\n\t# we get ONE line for all pools being imported, with just a dot\n",
                    "rendered": {
                      "text": "\t# Needs to be exported for \"zpool\" to catch it.\n\t[ -n \"$ZPOOL_IMPORT_PATH\" ] && export ZPOOL_IMPORT_PATH\n\n\t# Mount all available pools (except those set in ZFS_POOL_EXCEPTIONS.\n\t#\n\t# If not interactive (run from init - variable init='/sbin/init')\n\t# we get ONE line for all pools being imported, with just a dot\n",
                      "markdown": "`\t# Needs to be exported for \"zpool\" to catch it.\n\t[ -n \"$ZPOOL_IMPORT_PATH\" ] && export ZPOOL_IMPORT_PATH\n\n\t# Mount all available pools (except those set in ZFS_POOL_EXCEPTIONS.\n\t#\n\t# If not interactive (run from init - variable init='/sbin/init')\n\t# we get ONE line for all pools being imported, with just a dot\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/etc/init.d/zfs-import"
                },
                "region": {
                  "startLine": 162,
                  "startColumn": 8,
                  "endLine": 162,
                  "endColumn": 13,
                  "snippet": {
                    "text": "\t\t\t[ ! -d \"$dir\" ] && continue\n\n\t\t\tprintf \"%s\" \"$dir:\"\n\t\tdone | sed 's,:$,,g')\"\n\n\t\tif [ -d \"/dev/disk/by-vdev\" ]\n\t\tthen\n",
                    "rendered": {
                      "text": "\t\t\t[ ! -d \"$dir\" ] && continue\n\n\t\t\tprintf \"%s\" \"$dir:\"\n\t\tdone | sed 's,:$,,g')\"\n\n\t\tif [ -d \"/dev/disk/by-vdev\" ]\n\t\tthen\n",
                      "markdown": "`\t\t\t[ ! -d \"$dir\" ] && continue\n\n\t\t\tprintf \"%s\" \"$dir:\"\n\t\tdone | sed 's,:$,,g')\"\n\n\t\tif [ -d \"/dev/disk/by-vdev\" ]\n\t\tthen\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/etc/init.d/zfs-import"
                },
                "region": {
                  "startLine": 158,
                  "startColumn": 16,
                  "endLine": 158,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\t\tdirs=\"$(for dir in $(echo /dev/disk/by-*)\n\t\tdo\n\t\t\t# Ignore by-vdev here - we want it first!\n\t\t\techo \"$dir\" | grep -q /by-vdev && continue\n\t\t\t[ ! -d \"$dir\" ] && continue\n\n\t\t\tprintf \"%s\" \"$dir:\"\n",
                    "rendered": {
                      "text": "\t\tdirs=\"$(for dir in $(echo /dev/disk/by-*)\n\t\tdo\n\t\t\t# Ignore by-vdev here - we want it first!\n\t\t\techo \"$dir\" | grep -q /by-vdev && continue\n\t\t\t[ ! -d \"$dir\" ] && continue\n\n\t\t\tprintf \"%s\" \"$dir:\"\n",
                      "markdown": "`\t\tdirs=\"$(for dir in $(echo /dev/disk/by-*)\n\t\tdo\n\t\t\t# Ignore by-vdev here - we want it first!\n\t\t\techo \"$dir\" | grep -q /by-vdev && continue\n\t\t\t[ ! -d \"$dir\" ] && continue\n\n\t\t\tprintf \"%s\" \"$dir:\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/etc/init.d/zfs-import"
                },
                "region": {
                  "startLine": 150,
                  "startColumn": 15,
                  "endLine": 150,
                  "endColumn": 21,
                  "snippet": {
                    "text": "\n\t# For backwards compatibility, make sure that ZPOOL_IMPORT_PATH is set\n\t# to something we can use later with the real import(s). We want to\n\t# make sure we find all by* dirs, BUT by-vdev should be first (if it\n\t# exists).\n\tif [ -n \"$USE_DISK_BY_ID\" ] && [ -z \"$ZPOOL_IMPORT_PATH\" ]\n\tthen\n",
                    "rendered": {
                      "text": "\n\t# For backwards compatibility, make sure that ZPOOL_IMPORT_PATH is set\n\t# to something we can use later with the real import(s). We want to\n\t# make sure we find all by* dirs, BUT by-vdev should be first (if it\n\t# exists).\n\tif [ -n \"$USE_DISK_BY_ID\" ] && [ -z \"$ZPOOL_IMPORT_PATH\" ]\n\tthen\n",
                      "markdown": "`\n\t# For backwards compatibility, make sure that ZPOOL_IMPORT_PATH is set\n\t# to something we can use later with the real import(s). We want to\n\t# make sure we find all by* dirs, BUT by-vdev should be first (if it\n\t# exists).\n\tif [ -n \"$USE_DISK_BY_ID\" ] && [ -z \"$ZPOOL_IMPORT_PATH\" ]\n\tthen\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/etc/init.d/zfs-import"
                },
                "region": {
                  "startLine": 107,
                  "startColumn": 29,
                  "endLine": 107,
                  "endColumn": 34,
                  "snippet": {
                    "text": "\t\t\t\t# Filter out duplicates (pools found with the simpl\n\t\t\t\t# \"zpool import\" but which is also found with the\n\t\t\t\t# \"zpool import -d ...\").\n\t\t\t\tnpools=$(echo \"$npools\" | sed \"s,$available_pools,,\")\n\n\t\t\t\t# Add the list to the existing list of\n\t\t\t\t# available pools\n",
                    "rendered": {
                      "text": "\t\t\t\t# Filter out duplicates (pools found with the simpl\n\t\t\t\t# \"zpool import\" but which is also found with the\n\t\t\t\t# \"zpool import -d ...\").\n\t\t\t\tnpools=$(echo \"$npools\" | sed \"s,$available_pools,,\")\n\n\t\t\t\t# Add the list to the existing list of\n\t\t\t\t# available pools\n",
                      "markdown": "`\t\t\t\t# Filter out duplicates (pools found with the simpl\n\t\t\t\t# \"zpool import\" but which is also found with the\n\t\t\t\t# \"zpool import -d ...\").\n\t\t\t\tnpools=$(echo \"$npools\" | sed \"s,$available_pools,,\")\n\n\t\t\t\t# Add the list to the existing list of\n\t\t\t\t# available pools\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/etc/init.d/zfs-import"
                },
                "region": {
                  "startLine": 85,
                  "startColumn": 2,
                  "endLine": 85,
                  "endColumn": 8,
                  "snippet": {
                    "text": "\t\tunset USE_DISK_BY_ID\n\tfi\n\n\t# Find list of already imported pools.\n\talready_imported=$(find_pools \"$ZPOOL\" list -H -oname)\n\tavailable_pools=$(find_pools \"$ZPOOL\" import)\n\n",
                    "rendered": {
                      "text": "\t\tunset USE_DISK_BY_ID\n\tfi\n\n\t# Find list of already imported pools.\n\talready_imported=$(find_pools \"$ZPOOL\" list -H -oname)\n\tavailable_pools=$(find_pools \"$ZPOOL\" import)\n\n",
                      "markdown": "`\t\tunset USE_DISK_BY_ID\n\tfi\n\n\t# Find list of already imported pools.\n\talready_imported=$(find_pools \"$ZPOOL\" list -H -oname)\n\tavailable_pools=$(find_pools \"$ZPOOL\" import)\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/etc/init.d/zfs-import"
                },
                "region": {
                  "startLine": 68,
                  "startColumn": 1,
                  "endLine": 68,
                  "endColumn": 7,
                  "snippet": {
                    "text": "\techo \"${pools%%;}\" # Return without the last ';'.\n}\n\n# Find and import all visible pools, even exported ones\ndo_import_all_visible()\n{\n\tlocal already_imported available_pools pool npools\n",
                    "rendered": {
                      "text": "\techo \"${pools%%;}\" # Return without the last ';'.\n}\n\n# Find and import all visible pools, even exported ones\ndo_import_all_visible()\n{\n\tlocal already_imported available_pools pool npools\n",
                      "markdown": "`\techo \"${pools%%;}\" # Return without the last ';'.\n}\n\n# Find and import all visible pools, even exported ones\ndo_import_all_visible()\n{\n\tlocal already_imported available_pools pool npools\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/etc/init.d/zfs-import"
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 1,
                  "endLine": 62,
                  "endColumn": 7,
                  "snippet": {
                    "text": "\n\tpools=$(\"$@\" 2> /dev/null | \\\n\t\tsed -Ee '/pool:|^[a-zA-Z0-9]/!d' -e 's@.*: @@' | \\\n\t\tsort | \\\n\t\ttr '\\n' ';')\n\n\techo \"${pools%%;}\" # Return without the last ';'.\n",
                    "rendered": {
                      "text": "\n\tpools=$(\"$@\" 2> /dev/null | \\\n\t\tsed -Ee '/pool:|^[a-zA-Z0-9]/!d' -e 's@.*: @@' | \\\n\t\tsort | \\\n\t\ttr '\\n' ';')\n\n\techo \"${pools%%;}\" # Return without the last ';'.\n",
                      "markdown": "`\n\tpools=$(\"$@\" 2> /dev/null | \\\n\t\tsed -Ee '/pool:|^[a-zA-Z0-9]/!d' -e 's@.*: @@' | \\\n\t\tsort | \\\n\t\ttr '\\n' ';')\n\n\techo \"${pools%%;}\" # Return without the last ';'.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/etc/init.d/zfs-import"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 1,
                  "endLine": 61,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\tlocal pools\n\n\tpools=$(\"$@\" 2> /dev/null | \\\n\t\tsed -Ee '/pool:|^[a-zA-Z0-9]/!d' -e 's@.*: @@' | \\\n\t\tsort | \\\n\t\ttr '\\n' ';')\n\n",
                    "rendered": {
                      "text": "\tlocal pools\n\n\tpools=$(\"$@\" 2> /dev/null | \\\n\t\tsed -Ee '/pool:|^[a-zA-Z0-9]/!d' -e 's@.*: @@' | \\\n\t\tsort | \\\n\t\ttr '\\n' ';')\n\n",
                      "markdown": "`\tlocal pools\n\n\tpools=$(\"$@\" 2> /dev/null | \\\n\t\tsed -Ee '/pool:|^[a-zA-Z0-9]/!d' -e 's@.*: @@' | \\\n\t\tsort | \\\n\t\ttr '\\n' ';')\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/etc/init.d/zfs-import"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 24,
                  "endLine": 34,
                  "snippet": {
                    "text": "# This script is based on debian/zfsutils.zfs.init from the\n# Debian GNU/kFreeBSD zfsutils 8.1-3 package, written by Aurelien Jarno.\n\n# Source the common init script\n. /etc/zfs/zfs-functions\n\n# ----------------------------------------------------\n\n",
                    "rendered": {
                      "text": "# This script is based on debian/zfsutils.zfs.init from the\n# Debian GNU/kFreeBSD zfsutils 8.1-3 package, written by Aurelien Jarno.\n\n# Source the common init script\n. /etc/zfs/zfs-functions\n\n# ----------------------------------------------------\n\n",
                      "markdown": "`# This script is based on debian/zfsutils.zfs.init from the\n# Debian GNU/kFreeBSD zfsutils 8.1-3 package, written by Aurelien Jarno.\n\n# Source the common init script\n. /etc/zfs/zfs-functions\n\n# ----------------------------------------------------\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/etc/init.d/zfs-import"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 6,
                  "endLine": 30,
                  "endColumn": 14,
                  "snippet": {
                    "text": "#\n# Released under the 2-clause BSD license.\n#\n# This script is based on debian/zfsutils.zfs.init from the\n# Debian GNU/kFreeBSD zfsutils 8.1-3 package, written by Aurelien Jarno.\n\n# Source the common init script\n",
                    "rendered": {
                      "text": "#\n# Released under the 2-clause BSD license.\n#\n# This script is based on debian/zfsutils.zfs.init from the\n# Debian GNU/kFreeBSD zfsutils 8.1-3 package, written by Aurelien Jarno.\n\n# Source the common init script\n",
                      "markdown": "`#\n# Released under the 2-clause BSD license.\n#\n# This script is based on debian/zfsutils.zfs.init from the\n# Debian GNU/kFreeBSD zfsutils 8.1-3 package, written by Aurelien Jarno.\n\n# Source the common init script\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/etc/init.d/zfs-import"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 20,
                  "endLine": 7,
                  "endColumn": 28,
                  "snippet": {
                    "text": "# zfs-import    This script will import ZFS pools\n#\n# chkconfig:    2345 01 99\n# description:  This script will perform a verbatim import of ZFS pools\n#               during system boot.\n# probe: true\n#\n",
                    "rendered": {
                      "text": "# zfs-import    This script will import ZFS pools\n#\n# chkconfig:    2345 01 99\n# description:  This script will perform a verbatim import of ZFS pools\n#               during system boot.\n# probe: true\n#\n",
                      "markdown": "`# zfs-import    This script will import ZFS pools\n#\n# chkconfig:    2345 01 99\n# description:  This script will perform a verbatim import of ZFS pools\n#               during system boot.\n# probe: true\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/etc/init.d/zfs-import"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 20,
                  "endLine": 4,
                  "endColumn": 28,
                  "snippet": {
                    "text": "#!/bin/sh\n# shellcheck disable=SC2154\n#\n# zfs-import    This script will import ZFS pools\n#\n# chkconfig:    2345 01 99\n# description:  This script will perform a verbatim import of ZFS pools\n",
                    "rendered": {
                      "text": "#!/bin/sh\n# shellcheck disable=SC2154\n#\n# zfs-import    This script will import ZFS pools\n#\n# chkconfig:    2345 01 99\n# description:  This script will perform a verbatim import of ZFS pools\n",
                      "markdown": "`#!/bin/sh\n# shellcheck disable=SC2154\n#\n# zfs-import    This script will import ZFS pools\n#\n# chkconfig:    2345 01 99\n# description:  This script will perform a verbatim import of ZFS pools\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/test_type"
                },
                "region": {
                  "startLine": 244,
                  "startColumn": 47,
                  "endLine": 244,
                  "endColumn": 52,
                  "snippet": {
                    "text": "\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n\nif [ -n \"$without_vals\" ]; then\n",
                    "rendered": {
                      "text": "\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n\nif [ -n \"$without_vals\" ]; then\n",
                      "markdown": "`\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n\nif [ -n \"$without_vals\" ]; then\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/test_type"
                },
                "region": {
                  "startLine": 242,
                  "startColumn": 29,
                  "endLine": 242,
                  "endColumn": 34,
                  "snippet": {
                    "text": "\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n",
                    "rendered": {
                      "text": "\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n",
                      "markdown": "`\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/test_type"
                },
                "region": {
                  "startLine": 242,
                  "startColumn": 1,
                  "endLine": 242,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n",
                    "rendered": {
                      "text": "\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n",
                      "markdown": "`\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/test_type"
                },
                "region": {
                  "startLine": 241,
                  "startColumn": 1,
                  "endLine": 241,
                  "endColumn": 7,
                  "snippet": {
                    "text": "if [ -n \"$with_vals\" ]; then\n\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\n",
                    "rendered": {
                      "text": "if [ -n \"$with_vals\" ]; then\n\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\n",
                      "markdown": "`if [ -n \"$with_vals\" ]; then\n\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/test_type"
                },
                "region": {
                  "startLine": 237,
                  "startColumn": 25,
                  "endLine": 237,
                  "endColumn": 31,
                  "snippet": {
                    "text": "\tscripts=\"$script\"\nesac\n\nwith_vals=$(echo \"$out\" | grep -E \"$scripts\")\nif [ -n \"$with_vals\" ]; then\n\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n",
                    "rendered": {
                      "text": "\tscripts=\"$script\"\nesac\n\nwith_vals=$(echo \"$out\" | grep -E \"$scripts\")\nif [ -n \"$with_vals\" ]; then\n\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n",
                      "markdown": "`\tscripts=\"$script\"\nesac\n\nwith_vals=$(echo \"$out\" | grep -E \"$scripts\")\nif [ -n \"$with_vals\" ]; then\n\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/test_type"
                },
                "region": {
                  "startLine": 199,
                  "startColumn": 36,
                  "endLine": 199,
                  "endColumn": 41,
                  "snippet": {
                    "text": "END {print \"type=\"type; ORS=\"\\n\"; print \"\"}\n');\nfi\ntype=$(echo \"$out\" | grep '^type=' | cut -d '=' -f 2)\n\n# If type is not set by now, either we don't have a block device\n# or smartctl failed. Either way, default to ATA and set $out to\n",
                    "rendered": {
                      "text": "END {print \"type=\"type; ORS=\"\\n\"; print \"\"}\n');\nfi\ntype=$(echo \"$out\" | grep '^type=' | cut -d '=' -f 2)\n\n# If type is not set by now, either we don't have a block device\n# or smartctl failed. Either way, default to ATA and set $out to\n",
                      "markdown": "`END {print \"type=\"type; ORS=\"\\n\"; print \"\"}\n');\nfi\ntype=$(echo \"$out\" | grep '^type=' | cut -d '=' -f 2)\n\n# If type is not set by now, either we don't have a block device\n# or smartctl failed. Either way, default to ATA and set $out to\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/test_type"
                },
                "region": {
                  "startLine": 199,
                  "startColumn": 20,
                  "endLine": 199,
                  "endColumn": 26,
                  "snippet": {
                    "text": "END {print \"type=\"type; ORS=\"\\n\"; print \"\"}\n');\nfi\ntype=$(echo \"$out\" | grep '^type=' | cut -d '=' -f 2)\n\n# If type is not set by now, either we don't have a block device\n# or smartctl failed. Either way, default to ATA and set $out to\n",
                    "rendered": {
                      "text": "END {print \"type=\"type; ORS=\"\\n\"; print \"\"}\n');\nfi\ntype=$(echo \"$out\" | grep '^type=' | cut -d '=' -f 2)\n\n# If type is not set by now, either we don't have a block device\n# or smartctl failed. Either way, default to ATA and set $out to\n",
                      "markdown": "`END {print \"type=\"type; ORS=\"\\n\"; print \"\"}\n');\nfi\ntype=$(echo \"$out\" | grep '^type=' | cut -d '=' -f 2)\n\n# If type is not set by now, either we don't have a block device\n# or smartctl failed. Either way, default to ATA and set $out to\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/test_type"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 24,
                  "endLine": 103,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\t# NVMe:\n\t#       SMART/Health Information (NVMe Log 0xnn, NSID 0xnn)\n\t#\n\tout=$(echo \"$raw_out\" | awk '\n# SAS specific\n/read:/{print \"rrd=\"$4\"\\nr_cor=\"$5\"\\nr_proc=\"$7\"\\nr_ucor=\"$8}\n/write:/{print \"rwr=\"$4\"\\nw_cor=\"$5\"\\nw_proc=\"$7\"\\nw_ucor=\"$8}\n",
                    "rendered": {
                      "text": "\t# NVMe:\n\t#       SMART/Health Information (NVMe Log 0xnn, NSID 0xnn)\n\t#\n\tout=$(echo \"$raw_out\" | awk '\n# SAS specific\n/read:/{print \"rrd=\"$4\"\\nr_cor=\"$5\"\\nr_proc=\"$7\"\\nr_ucor=\"$8}\n/write:/{print \"rwr=\"$4\"\\nw_cor=\"$5\"\\nw_proc=\"$7\"\\nw_ucor=\"$8}\n",
                      "markdown": "`\t# NVMe:\n\t#       SMART/Health Information (NVMe Log 0xnn, NSID 0xnn)\n\t#\n\tout=$(echo \"$raw_out\" | awk '\n# SAS specific\n/read:/{print \"rrd=\"$4\"\\nr_cor=\"$5\"\\nr_proc=\"$7\"\\nr_ucor=\"$8}\n/write:/{print \"rwr=\"$4\"\\nw_cor=\"$5\"\\nw_proc=\"$7\"\\nw_ucor=\"$8}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/test_type"
                },
                "region": {
                  "startLine": 83,
                  "startColumn": 3,
                  "endLine": 83,
                  "endColumn": 8,
                  "snippet": {
                    "text": "\nif [ -b \"$somepath\" ] && PATH=\"/usr/sbin:$PATH\" command -v smartctl > /dev/null || [ -n \"$samples\" ] ; then\n\tif [ -n \"$samples\" ] ; then\n\t\t# cat a smartctl output text file instead of running smartctl\n\t\t# on a vdev (only used for developer testing).\n\t\tfile=$(get_filename_from_dir \"$samples\")\n\t\techo \"file=$file\"\n",
                    "rendered": {
                      "text": "\nif [ -b \"$somepath\" ] && PATH=\"/usr/sbin:$PATH\" command -v smartctl > /dev/null || [ -n \"$samples\" ] ; then\n\tif [ -n \"$samples\" ] ; then\n\t\t# cat a smartctl output text file instead of running smartctl\n\t\t# on a vdev (only used for developer testing).\n\t\tfile=$(get_filename_from_dir \"$samples\")\n\t\techo \"file=$file\"\n",
                      "markdown": "`\nif [ -b \"$somepath\" ] && PATH=\"/usr/sbin:$PATH\" command -v smartctl > /dev/null || [ -n \"$samples\" ] ; then\n\tif [ -n \"$samples\" ] ; then\n\t\t# cat a smartctl output text file instead of running smartctl\n\t\t# on a vdev (only used for developer testing).\n\t\tfile=$(get_filename_from_dir \"$samples\")\n\t\techo \"file=$file\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/test_type"
                },
                "region": {
                  "startLine": 68,
                  "startColumn": 56,
                  "endLine": 68,
                  "endColumn": 61,
                  "snippet": {
                    "text": "script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n",
                    "rendered": {
                      "text": "script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n",
                      "markdown": "`script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/test_type"
                },
                "region": {
                  "startLine": 68,
                  "startColumn": 25,
                  "endLine": 68,
                  "endColumn": 31,
                  "snippet": {
                    "text": "script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n",
                    "rendered": {
                      "text": "script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n",
                      "markdown": "`script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/test_type"
                },
                "region": {
                  "startLine": 56,
                  "endLine": 56,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\tnum_files=$(find \"$dir\" -maxdepth 1 -type f | wc -l)\n\tmod=$((pid % num_files))\n\ti=0\n\tfind \"$dir\" -type f -printf '%f\\n' | while read -r file ; do\n\t\tif [ \"$mod\" = \"$i\" ] ; then\n\t\t\techo \"$file\"\n\t\t\tbreak\n",
                    "rendered": {
                      "text": "\tnum_files=$(find \"$dir\" -maxdepth 1 -type f | wc -l)\n\tmod=$((pid % num_files))\n\ti=0\n\tfind \"$dir\" -type f -printf '%f\\n' | while read -r file ; do\n\t\tif [ \"$mod\" = \"$i\" ] ; then\n\t\t\techo \"$file\"\n\t\t\tbreak\n",
                      "markdown": "`\tnum_files=$(find \"$dir\" -maxdepth 1 -type f | wc -l)\n\tmod=$((pid % num_files))\n\ti=0\n\tfind \"$dir\" -type f -printf '%f\\n' | while read -r file ; do\n\t\tif [ \"$mod\" = \"$i\" ] ; then\n\t\t\techo \"$file\"\n\t\t\tbreak\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/test_type"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 38,
                  "endLine": 47,
                  "endColumn": 46,
                  "snippet": {
                    "text": "#\n# Look in directory DIR and return a filename from it.  The filename returned\n# is chosen quasi-sequentially (based off our PID).  This allows us to return\n# a different filename every time this script is invoked (which we do for each\n# vdev), without having to maintain state.\nget_filename_from_dir()\n{\n",
                    "rendered": {
                      "text": "#\n# Look in directory DIR and return a filename from it.  The filename returned\n# is chosen quasi-sequentially (based off our PID).  This allows us to return\n# a different filename every time this script is invoked (which we do for each\n# vdev), without having to maintain state.\nget_filename_from_dir()\n{\n",
                      "markdown": "`#\n# Look in directory DIR and return a filename from it.  The filename returned\n# is chosen quasi-sequentially (based off our PID).  This allows us to return\n# a different filename every time this script is invoked (which we do for each\n# vdev), without having to maintain state.\nget_filename_from_dir()\n{\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/test_type"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 28,
                  "endLine": 47,
                  "endColumn": 34,
                  "snippet": {
                    "text": "#\n# Look in directory DIR and return a filename from it.  The filename returned\n# is chosen quasi-sequentially (based off our PID).  This allows us to return\n# a different filename every time this script is invoked (which we do for each\n# vdev), without having to maintain state.\nget_filename_from_dir()\n{\n",
                    "rendered": {
                      "text": "#\n# Look in directory DIR and return a filename from it.  The filename returned\n# is chosen quasi-sequentially (based off our PID).  This allows us to return\n# a different filename every time this script is invoked (which we do for each\n# vdev), without having to maintain state.\nget_filename_from_dir()\n{\n",
                      "markdown": "`#\n# Look in directory DIR and return a filename from it.  The filename returned\n# is chosen quasi-sequentially (based off our PID).  This allows us to return\n# a different filename every time this script is invoked (which we do for each\n# vdev), without having to maintain state.\nget_filename_from_dir()\n{\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/test_type"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 27,
                  "endLine": 20,
                  "endColumn": 36,
                  "snippet": {
                    "text": "hours_on:\tShow number of hours drive powered on (all drives).\nrealloc:\tShow SMART reallocated sectors count (ATA).\nrep_ucor:\tShow SMART reported uncorrectable count (ATA).\ncmd_to:\t\tShow SMART command timeout count (ATA).\npend_sec:\tShow SMART current pending sector count (ATA).\noff_ucor:\tShow SMART offline uncorrectable errors (ATA).\nata_err:\tShow SMART ATA errors (ATA).\n",
                    "rendered": {
                      "text": "hours_on:\tShow number of hours drive powered on (all drives).\nrealloc:\tShow SMART reallocated sectors count (ATA).\nrep_ucor:\tShow SMART reported uncorrectable count (ATA).\ncmd_to:\t\tShow SMART command timeout count (ATA).\npend_sec:\tShow SMART current pending sector count (ATA).\noff_ucor:\tShow SMART offline uncorrectable errors (ATA).\nata_err:\tShow SMART ATA errors (ATA).\n",
                      "markdown": "`hours_on:\tShow number of hours drive powered on (all drives).\nrealloc:\tShow SMART reallocated sectors count (ATA).\nrep_ucor:\tShow SMART reported uncorrectable count (ATA).\ncmd_to:\t\tShow SMART command timeout count (ATA).\npend_sec:\tShow SMART current pending sector count (ATA).\noff_ucor:\tShow SMART offline uncorrectable errors (ATA).\nata_err:\tShow SMART ATA errors (ATA).\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/test_status"
                },
                "region": {
                  "startLine": 244,
                  "startColumn": 47,
                  "endLine": 244,
                  "endColumn": 52,
                  "snippet": {
                    "text": "\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n\nif [ -n \"$without_vals\" ]; then\n",
                    "rendered": {
                      "text": "\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n\nif [ -n \"$without_vals\" ]; then\n",
                      "markdown": "`\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n\nif [ -n \"$without_vals\" ]; then\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/test_status"
                },
                "region": {
                  "startLine": 242,
                  "startColumn": 29,
                  "endLine": 242,
                  "endColumn": 34,
                  "snippet": {
                    "text": "\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n",
                    "rendered": {
                      "text": "\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n",
                      "markdown": "`\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/test_status"
                },
                "region": {
                  "startLine": 242,
                  "startColumn": 1,
                  "endLine": 242,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n",
                    "rendered": {
                      "text": "\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n",
                      "markdown": "`\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/test_status"
                },
                "region": {
                  "startLine": 241,
                  "startColumn": 1,
                  "endLine": 241,
                  "endColumn": 7,
                  "snippet": {
                    "text": "if [ -n \"$with_vals\" ]; then\n\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\n",
                    "rendered": {
                      "text": "if [ -n \"$with_vals\" ]; then\n\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\n",
                      "markdown": "`if [ -n \"$with_vals\" ]; then\n\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/test_status"
                },
                "region": {
                  "startLine": 237,
                  "startColumn": 25,
                  "endLine": 237,
                  "endColumn": 31,
                  "snippet": {
                    "text": "\tscripts=\"$script\"\nesac\n\nwith_vals=$(echo \"$out\" | grep -E \"$scripts\")\nif [ -n \"$with_vals\" ]; then\n\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n",
                    "rendered": {
                      "text": "\tscripts=\"$script\"\nesac\n\nwith_vals=$(echo \"$out\" | grep -E \"$scripts\")\nif [ -n \"$with_vals\" ]; then\n\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n",
                      "markdown": "`\tscripts=\"$script\"\nesac\n\nwith_vals=$(echo \"$out\" | grep -E \"$scripts\")\nif [ -n \"$with_vals\" ]; then\n\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/test_status"
                },
                "region": {
                  "startLine": 199,
                  "startColumn": 36,
                  "endLine": 199,
                  "endColumn": 41,
                  "snippet": {
                    "text": "END {print \"type=\"type; ORS=\"\\n\"; print \"\"}\n');\nfi\ntype=$(echo \"$out\" | grep '^type=' | cut -d '=' -f 2)\n\n# If type is not set by now, either we don't have a block device\n# or smartctl failed. Either way, default to ATA and set $out to\n",
                    "rendered": {
                      "text": "END {print \"type=\"type; ORS=\"\\n\"; print \"\"}\n');\nfi\ntype=$(echo \"$out\" | grep '^type=' | cut -d '=' -f 2)\n\n# If type is not set by now, either we don't have a block device\n# or smartctl failed. Either way, default to ATA and set $out to\n",
                      "markdown": "`END {print \"type=\"type; ORS=\"\\n\"; print \"\"}\n');\nfi\ntype=$(echo \"$out\" | grep '^type=' | cut -d '=' -f 2)\n\n# If type is not set by now, either we don't have a block device\n# or smartctl failed. Either way, default to ATA and set $out to\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/test_status"
                },
                "region": {
                  "startLine": 199,
                  "startColumn": 20,
                  "endLine": 199,
                  "endColumn": 26,
                  "snippet": {
                    "text": "END {print \"type=\"type; ORS=\"\\n\"; print \"\"}\n');\nfi\ntype=$(echo \"$out\" | grep '^type=' | cut -d '=' -f 2)\n\n# If type is not set by now, either we don't have a block device\n# or smartctl failed. Either way, default to ATA and set $out to\n",
                    "rendered": {
                      "text": "END {print \"type=\"type; ORS=\"\\n\"; print \"\"}\n');\nfi\ntype=$(echo \"$out\" | grep '^type=' | cut -d '=' -f 2)\n\n# If type is not set by now, either we don't have a block device\n# or smartctl failed. Either way, default to ATA and set $out to\n",
                      "markdown": "`END {print \"type=\"type; ORS=\"\\n\"; print \"\"}\n');\nfi\ntype=$(echo \"$out\" | grep '^type=' | cut -d '=' -f 2)\n\n# If type is not set by now, either we don't have a block device\n# or smartctl failed. Either way, default to ATA and set $out to\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/test_status"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 24,
                  "endLine": 103,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\t# NVMe:\n\t#       SMART/Health Information (NVMe Log 0xnn, NSID 0xnn)\n\t#\n\tout=$(echo \"$raw_out\" | awk '\n# SAS specific\n/read:/{print \"rrd=\"$4\"\\nr_cor=\"$5\"\\nr_proc=\"$7\"\\nr_ucor=\"$8}\n/write:/{print \"rwr=\"$4\"\\nw_cor=\"$5\"\\nw_proc=\"$7\"\\nw_ucor=\"$8}\n",
                    "rendered": {
                      "text": "\t# NVMe:\n\t#       SMART/Health Information (NVMe Log 0xnn, NSID 0xnn)\n\t#\n\tout=$(echo \"$raw_out\" | awk '\n# SAS specific\n/read:/{print \"rrd=\"$4\"\\nr_cor=\"$5\"\\nr_proc=\"$7\"\\nr_ucor=\"$8}\n/write:/{print \"rwr=\"$4\"\\nw_cor=\"$5\"\\nw_proc=\"$7\"\\nw_ucor=\"$8}\n",
                      "markdown": "`\t# NVMe:\n\t#       SMART/Health Information (NVMe Log 0xnn, NSID 0xnn)\n\t#\n\tout=$(echo \"$raw_out\" | awk '\n# SAS specific\n/read:/{print \"rrd=\"$4\"\\nr_cor=\"$5\"\\nr_proc=\"$7\"\\nr_ucor=\"$8}\n/write:/{print \"rwr=\"$4\"\\nw_cor=\"$5\"\\nw_proc=\"$7\"\\nw_ucor=\"$8}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/test_status"
                },
                "region": {
                  "startLine": 83,
                  "startColumn": 3,
                  "endLine": 83,
                  "endColumn": 8,
                  "snippet": {
                    "text": "\nif [ -b \"$somepath\" ] && PATH=\"/usr/sbin:$PATH\" command -v smartctl > /dev/null || [ -n \"$samples\" ] ; then\n\tif [ -n \"$samples\" ] ; then\n\t\t# cat a smartctl output text file instead of running smartctl\n\t\t# on a vdev (only used for developer testing).\n\t\tfile=$(get_filename_from_dir \"$samples\")\n\t\techo \"file=$file\"\n",
                    "rendered": {
                      "text": "\nif [ -b \"$somepath\" ] && PATH=\"/usr/sbin:$PATH\" command -v smartctl > /dev/null || [ -n \"$samples\" ] ; then\n\tif [ -n \"$samples\" ] ; then\n\t\t# cat a smartctl output text file instead of running smartctl\n\t\t# on a vdev (only used for developer testing).\n\t\tfile=$(get_filename_from_dir \"$samples\")\n\t\techo \"file=$file\"\n",
                      "markdown": "`\nif [ -b \"$somepath\" ] && PATH=\"/usr/sbin:$PATH\" command -v smartctl > /dev/null || [ -n \"$samples\" ] ; then\n\tif [ -n \"$samples\" ] ; then\n\t\t# cat a smartctl output text file instead of running smartctl\n\t\t# on a vdev (only used for developer testing).\n\t\tfile=$(get_filename_from_dir \"$samples\")\n\t\techo \"file=$file\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/test_status"
                },
                "region": {
                  "startLine": 68,
                  "startColumn": 56,
                  "endLine": 68,
                  "endColumn": 61,
                  "snippet": {
                    "text": "script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n",
                    "rendered": {
                      "text": "script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n",
                      "markdown": "`script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/test_status"
                },
                "region": {
                  "startLine": 68,
                  "startColumn": 25,
                  "endLine": 68,
                  "endColumn": 31,
                  "snippet": {
                    "text": "script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n",
                    "rendered": {
                      "text": "script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n",
                      "markdown": "`script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/test_status"
                },
                "region": {
                  "startLine": 56,
                  "endLine": 56,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\tnum_files=$(find \"$dir\" -maxdepth 1 -type f | wc -l)\n\tmod=$((pid % num_files))\n\ti=0\n\tfind \"$dir\" -type f -printf '%f\\n' | while read -r file ; do\n\t\tif [ \"$mod\" = \"$i\" ] ; then\n\t\t\techo \"$file\"\n\t\t\tbreak\n",
                    "rendered": {
                      "text": "\tnum_files=$(find \"$dir\" -maxdepth 1 -type f | wc -l)\n\tmod=$((pid % num_files))\n\ti=0\n\tfind \"$dir\" -type f -printf '%f\\n' | while read -r file ; do\n\t\tif [ \"$mod\" = \"$i\" ] ; then\n\t\t\techo \"$file\"\n\t\t\tbreak\n",
                      "markdown": "`\tnum_files=$(find \"$dir\" -maxdepth 1 -type f | wc -l)\n\tmod=$((pid % num_files))\n\ti=0\n\tfind \"$dir\" -type f -printf '%f\\n' | while read -r file ; do\n\t\tif [ \"$mod\" = \"$i\" ] ; then\n\t\t\techo \"$file\"\n\t\t\tbreak\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/test_status"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 38,
                  "endLine": 47,
                  "endColumn": 46,
                  "snippet": {
                    "text": "#\n# Look in directory DIR and return a filename from it.  The filename returned\n# is chosen quasi-sequentially (based off our PID).  This allows us to return\n# a different filename every time this script is invoked (which we do for each\n# vdev), without having to maintain state.\nget_filename_from_dir()\n{\n",
                    "rendered": {
                      "text": "#\n# Look in directory DIR and return a filename from it.  The filename returned\n# is chosen quasi-sequentially (based off our PID).  This allows us to return\n# a different filename every time this script is invoked (which we do for each\n# vdev), without having to maintain state.\nget_filename_from_dir()\n{\n",
                      "markdown": "`#\n# Look in directory DIR and return a filename from it.  The filename returned\n# is chosen quasi-sequentially (based off our PID).  This allows us to return\n# a different filename every time this script is invoked (which we do for each\n# vdev), without having to maintain state.\nget_filename_from_dir()\n{\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/test_status"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 28,
                  "endLine": 47,
                  "endColumn": 34,
                  "snippet": {
                    "text": "#\n# Look in directory DIR and return a filename from it.  The filename returned\n# is chosen quasi-sequentially (based off our PID).  This allows us to return\n# a different filename every time this script is invoked (which we do for each\n# vdev), without having to maintain state.\nget_filename_from_dir()\n{\n",
                    "rendered": {
                      "text": "#\n# Look in directory DIR and return a filename from it.  The filename returned\n# is chosen quasi-sequentially (based off our PID).  This allows us to return\n# a different filename every time this script is invoked (which we do for each\n# vdev), without having to maintain state.\nget_filename_from_dir()\n{\n",
                      "markdown": "`#\n# Look in directory DIR and return a filename from it.  The filename returned\n# is chosen quasi-sequentially (based off our PID).  This allows us to return\n# a different filename every time this script is invoked (which we do for each\n# vdev), without having to maintain state.\nget_filename_from_dir()\n{\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/test_status"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 27,
                  "endLine": 20,
                  "endColumn": 36,
                  "snippet": {
                    "text": "hours_on:\tShow number of hours drive powered on (all drives).\nrealloc:\tShow SMART reallocated sectors count (ATA).\nrep_ucor:\tShow SMART reported uncorrectable count (ATA).\ncmd_to:\t\tShow SMART command timeout count (ATA).\npend_sec:\tShow SMART current pending sector count (ATA).\noff_ucor:\tShow SMART offline uncorrectable errors (ATA).\nata_err:\tShow SMART ATA errors (ATA).\n",
                    "rendered": {
                      "text": "hours_on:\tShow number of hours drive powered on (all drives).\nrealloc:\tShow SMART reallocated sectors count (ATA).\nrep_ucor:\tShow SMART reported uncorrectable count (ATA).\ncmd_to:\t\tShow SMART command timeout count (ATA).\npend_sec:\tShow SMART current pending sector count (ATA).\noff_ucor:\tShow SMART offline uncorrectable errors (ATA).\nata_err:\tShow SMART ATA errors (ATA).\n",
                      "markdown": "`hours_on:\tShow number of hours drive powered on (all drives).\nrealloc:\tShow SMART reallocated sectors count (ATA).\nrep_ucor:\tShow SMART reported uncorrectable count (ATA).\ncmd_to:\t\tShow SMART command timeout count (ATA).\npend_sec:\tShow SMART current pending sector count (ATA).\noff_ucor:\tShow SMART offline uncorrectable errors (ATA).\nata_err:\tShow SMART ATA errors (ATA).\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/test_progress"
                },
                "region": {
                  "startLine": 244,
                  "startColumn": 47,
                  "endLine": 244,
                  "endColumn": 52,
                  "snippet": {
                    "text": "\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n\nif [ -n \"$without_vals\" ]; then\n",
                    "rendered": {
                      "text": "\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n\nif [ -n \"$without_vals\" ]; then\n",
                      "markdown": "`\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n\nif [ -n \"$without_vals\" ]; then\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/test_progress"
                },
                "region": {
                  "startLine": 242,
                  "startColumn": 29,
                  "endLine": 242,
                  "endColumn": 34,
                  "snippet": {
                    "text": "\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n",
                    "rendered": {
                      "text": "\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n",
                      "markdown": "`\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/test_progress"
                },
                "region": {
                  "startLine": 242,
                  "startColumn": 1,
                  "endLine": 242,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n",
                    "rendered": {
                      "text": "\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n",
                      "markdown": "`\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/test_progress"
                },
                "region": {
                  "startLine": 241,
                  "startColumn": 1,
                  "endLine": 241,
                  "endColumn": 7,
                  "snippet": {
                    "text": "if [ -n \"$with_vals\" ]; then\n\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\n",
                    "rendered": {
                      "text": "if [ -n \"$with_vals\" ]; then\n\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\n",
                      "markdown": "`if [ -n \"$with_vals\" ]; then\n\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/test_progress"
                },
                "region": {
                  "startLine": 237,
                  "startColumn": 25,
                  "endLine": 237,
                  "endColumn": 31,
                  "snippet": {
                    "text": "\tscripts=\"$script\"\nesac\n\nwith_vals=$(echo \"$out\" | grep -E \"$scripts\")\nif [ -n \"$with_vals\" ]; then\n\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n",
                    "rendered": {
                      "text": "\tscripts=\"$script\"\nesac\n\nwith_vals=$(echo \"$out\" | grep -E \"$scripts\")\nif [ -n \"$with_vals\" ]; then\n\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n",
                      "markdown": "`\tscripts=\"$script\"\nesac\n\nwith_vals=$(echo \"$out\" | grep -E \"$scripts\")\nif [ -n \"$with_vals\" ]; then\n\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/test_progress"
                },
                "region": {
                  "startLine": 199,
                  "startColumn": 36,
                  "endLine": 199,
                  "endColumn": 41,
                  "snippet": {
                    "text": "END {print \"type=\"type; ORS=\"\\n\"; print \"\"}\n');\nfi\ntype=$(echo \"$out\" | grep '^type=' | cut -d '=' -f 2)\n\n# If type is not set by now, either we don't have a block device\n# or smartctl failed. Either way, default to ATA and set $out to\n",
                    "rendered": {
                      "text": "END {print \"type=\"type; ORS=\"\\n\"; print \"\"}\n');\nfi\ntype=$(echo \"$out\" | grep '^type=' | cut -d '=' -f 2)\n\n# If type is not set by now, either we don't have a block device\n# or smartctl failed. Either way, default to ATA and set $out to\n",
                      "markdown": "`END {print \"type=\"type; ORS=\"\\n\"; print \"\"}\n');\nfi\ntype=$(echo \"$out\" | grep '^type=' | cut -d '=' -f 2)\n\n# If type is not set by now, either we don't have a block device\n# or smartctl failed. Either way, default to ATA and set $out to\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/test_progress"
                },
                "region": {
                  "startLine": 199,
                  "startColumn": 20,
                  "endLine": 199,
                  "endColumn": 26,
                  "snippet": {
                    "text": "END {print \"type=\"type; ORS=\"\\n\"; print \"\"}\n');\nfi\ntype=$(echo \"$out\" | grep '^type=' | cut -d '=' -f 2)\n\n# If type is not set by now, either we don't have a block device\n# or smartctl failed. Either way, default to ATA and set $out to\n",
                    "rendered": {
                      "text": "END {print \"type=\"type; ORS=\"\\n\"; print \"\"}\n');\nfi\ntype=$(echo \"$out\" | grep '^type=' | cut -d '=' -f 2)\n\n# If type is not set by now, either we don't have a block device\n# or smartctl failed. Either way, default to ATA and set $out to\n",
                      "markdown": "`END {print \"type=\"type; ORS=\"\\n\"; print \"\"}\n');\nfi\ntype=$(echo \"$out\" | grep '^type=' | cut -d '=' -f 2)\n\n# If type is not set by now, either we don't have a block device\n# or smartctl failed. Either way, default to ATA and set $out to\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/test_progress"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 24,
                  "endLine": 103,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\t# NVMe:\n\t#       SMART/Health Information (NVMe Log 0xnn, NSID 0xnn)\n\t#\n\tout=$(echo \"$raw_out\" | awk '\n# SAS specific\n/read:/{print \"rrd=\"$4\"\\nr_cor=\"$5\"\\nr_proc=\"$7\"\\nr_ucor=\"$8}\n/write:/{print \"rwr=\"$4\"\\nw_cor=\"$5\"\\nw_proc=\"$7\"\\nw_ucor=\"$8}\n",
                    "rendered": {
                      "text": "\t# NVMe:\n\t#       SMART/Health Information (NVMe Log 0xnn, NSID 0xnn)\n\t#\n\tout=$(echo \"$raw_out\" | awk '\n# SAS specific\n/read:/{print \"rrd=\"$4\"\\nr_cor=\"$5\"\\nr_proc=\"$7\"\\nr_ucor=\"$8}\n/write:/{print \"rwr=\"$4\"\\nw_cor=\"$5\"\\nw_proc=\"$7\"\\nw_ucor=\"$8}\n",
                      "markdown": "`\t# NVMe:\n\t#       SMART/Health Information (NVMe Log 0xnn, NSID 0xnn)\n\t#\n\tout=$(echo \"$raw_out\" | awk '\n# SAS specific\n/read:/{print \"rrd=\"$4\"\\nr_cor=\"$5\"\\nr_proc=\"$7\"\\nr_ucor=\"$8}\n/write:/{print \"rwr=\"$4\"\\nw_cor=\"$5\"\\nw_proc=\"$7\"\\nw_ucor=\"$8}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/test_progress"
                },
                "region": {
                  "startLine": 83,
                  "startColumn": 3,
                  "endLine": 83,
                  "endColumn": 8,
                  "snippet": {
                    "text": "\nif [ -b \"$somepath\" ] && PATH=\"/usr/sbin:$PATH\" command -v smartctl > /dev/null || [ -n \"$samples\" ] ; then\n\tif [ -n \"$samples\" ] ; then\n\t\t# cat a smartctl output text file instead of running smartctl\n\t\t# on a vdev (only used for developer testing).\n\t\tfile=$(get_filename_from_dir \"$samples\")\n\t\techo \"file=$file\"\n",
                    "rendered": {
                      "text": "\nif [ -b \"$somepath\" ] && PATH=\"/usr/sbin:$PATH\" command -v smartctl > /dev/null || [ -n \"$samples\" ] ; then\n\tif [ -n \"$samples\" ] ; then\n\t\t# cat a smartctl output text file instead of running smartctl\n\t\t# on a vdev (only used for developer testing).\n\t\tfile=$(get_filename_from_dir \"$samples\")\n\t\techo \"file=$file\"\n",
                      "markdown": "`\nif [ -b \"$somepath\" ] && PATH=\"/usr/sbin:$PATH\" command -v smartctl > /dev/null || [ -n \"$samples\" ] ; then\n\tif [ -n \"$samples\" ] ; then\n\t\t# cat a smartctl output text file instead of running smartctl\n\t\t# on a vdev (only used for developer testing).\n\t\tfile=$(get_filename_from_dir \"$samples\")\n\t\techo \"file=$file\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/test_progress"
                },
                "region": {
                  "startLine": 68,
                  "startColumn": 56,
                  "endLine": 68,
                  "endColumn": 61,
                  "snippet": {
                    "text": "script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n",
                    "rendered": {
                      "text": "script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n",
                      "markdown": "`script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/test_progress"
                },
                "region": {
                  "startLine": 68,
                  "startColumn": 25,
                  "endLine": 68,
                  "endColumn": 31,
                  "snippet": {
                    "text": "script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n",
                    "rendered": {
                      "text": "script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n",
                      "markdown": "`script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/test_progress"
                },
                "region": {
                  "startLine": 56,
                  "endLine": 56,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\tnum_files=$(find \"$dir\" -maxdepth 1 -type f | wc -l)\n\tmod=$((pid % num_files))\n\ti=0\n\tfind \"$dir\" -type f -printf '%f\\n' | while read -r file ; do\n\t\tif [ \"$mod\" = \"$i\" ] ; then\n\t\t\techo \"$file\"\n\t\t\tbreak\n",
                    "rendered": {
                      "text": "\tnum_files=$(find \"$dir\" -maxdepth 1 -type f | wc -l)\n\tmod=$((pid % num_files))\n\ti=0\n\tfind \"$dir\" -type f -printf '%f\\n' | while read -r file ; do\n\t\tif [ \"$mod\" = \"$i\" ] ; then\n\t\t\techo \"$file\"\n\t\t\tbreak\n",
                      "markdown": "`\tnum_files=$(find \"$dir\" -maxdepth 1 -type f | wc -l)\n\tmod=$((pid % num_files))\n\ti=0\n\tfind \"$dir\" -type f -printf '%f\\n' | while read -r file ; do\n\t\tif [ \"$mod\" = \"$i\" ] ; then\n\t\t\techo \"$file\"\n\t\t\tbreak\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/test_progress"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 38,
                  "endLine": 47,
                  "endColumn": 46,
                  "snippet": {
                    "text": "#\n# Look in directory DIR and return a filename from it.  The filename returned\n# is chosen quasi-sequentially (based off our PID).  This allows us to return\n# a different filename every time this script is invoked (which we do for each\n# vdev), without having to maintain state.\nget_filename_from_dir()\n{\n",
                    "rendered": {
                      "text": "#\n# Look in directory DIR and return a filename from it.  The filename returned\n# is chosen quasi-sequentially (based off our PID).  This allows us to return\n# a different filename every time this script is invoked (which we do for each\n# vdev), without having to maintain state.\nget_filename_from_dir()\n{\n",
                      "markdown": "`#\n# Look in directory DIR and return a filename from it.  The filename returned\n# is chosen quasi-sequentially (based off our PID).  This allows us to return\n# a different filename every time this script is invoked (which we do for each\n# vdev), without having to maintain state.\nget_filename_from_dir()\n{\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/test_progress"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 28,
                  "endLine": 47,
                  "endColumn": 34,
                  "snippet": {
                    "text": "#\n# Look in directory DIR and return a filename from it.  The filename returned\n# is chosen quasi-sequentially (based off our PID).  This allows us to return\n# a different filename every time this script is invoked (which we do for each\n# vdev), without having to maintain state.\nget_filename_from_dir()\n{\n",
                    "rendered": {
                      "text": "#\n# Look in directory DIR and return a filename from it.  The filename returned\n# is chosen quasi-sequentially (based off our PID).  This allows us to return\n# a different filename every time this script is invoked (which we do for each\n# vdev), without having to maintain state.\nget_filename_from_dir()\n{\n",
                      "markdown": "`#\n# Look in directory DIR and return a filename from it.  The filename returned\n# is chosen quasi-sequentially (based off our PID).  This allows us to return\n# a different filename every time this script is invoked (which we do for each\n# vdev), without having to maintain state.\nget_filename_from_dir()\n{\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/test_progress"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 27,
                  "endLine": 20,
                  "endColumn": 36,
                  "snippet": {
                    "text": "hours_on:\tShow number of hours drive powered on (all drives).\nrealloc:\tShow SMART reallocated sectors count (ATA).\nrep_ucor:\tShow SMART reported uncorrectable count (ATA).\ncmd_to:\t\tShow SMART command timeout count (ATA).\npend_sec:\tShow SMART current pending sector count (ATA).\noff_ucor:\tShow SMART offline uncorrectable errors (ATA).\nata_err:\tShow SMART ATA errors (ATA).\n",
                    "rendered": {
                      "text": "hours_on:\tShow number of hours drive powered on (all drives).\nrealloc:\tShow SMART reallocated sectors count (ATA).\nrep_ucor:\tShow SMART reported uncorrectable count (ATA).\ncmd_to:\t\tShow SMART command timeout count (ATA).\npend_sec:\tShow SMART current pending sector count (ATA).\noff_ucor:\tShow SMART offline uncorrectable errors (ATA).\nata_err:\tShow SMART ATA errors (ATA).\n",
                      "markdown": "`hours_on:\tShow number of hours drive powered on (all drives).\nrealloc:\tShow SMART reallocated sectors count (ATA).\nrep_ucor:\tShow SMART reported uncorrectable count (ATA).\ncmd_to:\t\tShow SMART command timeout count (ATA).\npend_sec:\tShow SMART current pending sector count (ATA).\noff_ucor:\tShow SMART offline uncorrectable errors (ATA).\nata_err:\tShow SMART ATA errors (ATA).\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zed.d/vdev_clear-led.sh"
                },
                "region": {
                  "startLine": 73,
                  "startColumn": 6,
                  "endLine": 73,
                  "endColumn": 14,
                  "snippet": {
                    "text": "\tfi\n\n\t# If another process is accessing the LED when we attempt to update it,\n\t# the update will be lost so retry until the LED actually changes or we\n\t# timeout.\n\tfor _ in 1 2 3 4 5; do\n\t\t# We want to check the current state first, since writing to the\n",
                    "rendered": {
                      "text": "\tfi\n\n\t# If another process is accessing the LED when we attempt to update it,\n\t# the update will be lost so retry until the LED actually changes or we\n\t# timeout.\n\tfor _ in 1 2 3 4 5; do\n\t\t# We want to check the current state first, since writing to the\n",
                      "markdown": "`\tfi\n\n\t# If another process is accessing the LED when we attempt to update it,\n\t# the update will be lost so retry until the LED actually changes or we\n\t# timeout.\n\tfor _ in 1 2 3 4 5; do\n\t\t# We want to check the current state first, since writing to the\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zed.d/vdev_clear-led.sh"
                },
                "region": {
                  "startLine": 72,
                  "startColumn": 61,
                  "endLine": 72,
                  "endColumn": 69,
                  "snippet": {
                    "text": "\t\treturn 3\n\tfi\n\n\t# If another process is accessing the LED when we attempt to update it,\n\t# the update will be lost so retry until the LED actually changes or we\n\t# timeout.\n\tfor _ in 1 2 3 4 5; do\n",
                    "rendered": {
                      "text": "\t\treturn 3\n\tfi\n\n\t# If another process is accessing the LED when we attempt to update it,\n\t# the update will be lost so retry until the LED actually changes or we\n\t# timeout.\n\tfor _ in 1 2 3 4 5; do\n",
                      "markdown": "`\t\treturn 3\n\tfi\n\n\t# If another process is accessing the LED when we attempt to update it,\n\t# the update will be lost so retry until the LED actually changes or we\n\t# timeout.\n\tfor _ in 1 2 3 4 5; do\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zed.d/vdev_clear-led.sh"
                },
                "region": {
                  "startLine": 200,
                  "startColumn": 33,
                  "endLine": 200,
                  "endColumn": 38,
                  "snippet": {
                    "text": "\t\t\tvdev_enc_sysfs_path=$(nvme_dev_to_slot \"$dev\")\n\t\tfi\n\n\t\tcurrent_val=$(echo \"$therest\" | awk '{print $NF}')\n\n\t\tif [ \"$current_val\" != \"0\" ] ; then\n\t\t\tcurrent_val=1\n",
                    "rendered": {
                      "text": "\t\t\tvdev_enc_sysfs_path=$(nvme_dev_to_slot \"$dev\")\n\t\tfi\n\n\t\tcurrent_val=$(echo \"$therest\" | awk '{print $NF}')\n\n\t\tif [ \"$current_val\" != \"0\" ] ; then\n\t\t\tcurrent_val=1\n",
                      "markdown": "`\t\t\tvdev_enc_sysfs_path=$(nvme_dev_to_slot \"$dev\")\n\t\tfi\n\n\t\tcurrent_val=$(echo \"$therest\" | awk '{print $NF}')\n\n\t\tif [ \"$current_val\" != \"0\" ] ; then\n\t\t\tcurrent_val=1\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zed.d/vdev_clear-led.sh"
                },
                "region": {
                  "startLine": 193,
                  "startColumn": 37,
                  "endLine": 193,
                  "endColumn": 42,
                  "snippet": {
                    "text": "\twhile read -r vdev state _ _ _ therest; do\n\t\t# Read out current LED value and path\n\t\t# Get dev name (like 'sda')\n\t\tdev=$(basename \"$(echo \"$therest\" | awk '{print $(NF-1)}')\")\n\t\tvdev_enc_sysfs_path=$(realpath \"/sys/class/block/$dev/device/enclosure_device\"*)\n\t\tif [ ! -d \"$vdev_enc_sysfs_path\" ] ; then\n\t\t\t# This is not a JBOD disk, but it could be a PCI NVMe drive\n",
                    "rendered": {
                      "text": "\twhile read -r vdev state _ _ _ therest; do\n\t\t# Read out current LED value and path\n\t\t# Get dev name (like 'sda')\n\t\tdev=$(basename \"$(echo \"$therest\" | awk '{print $(NF-1)}')\")\n\t\tvdev_enc_sysfs_path=$(realpath \"/sys/class/block/$dev/device/enclosure_device\"*)\n\t\tif [ ! -d \"$vdev_enc_sysfs_path\" ] ; then\n\t\t\t# This is not a JBOD disk, but it could be a PCI NVMe drive\n",
                      "markdown": "`\twhile read -r vdev state _ _ _ therest; do\n\t\t# Read out current LED value and path\n\t\t# Get dev name (like 'sda')\n\t\tdev=$(basename \"$(echo \"$therest\" | awk '{print $(NF-1)}')\")\n\t\tvdev_enc_sysfs_path=$(realpath \"/sys/class/block/$dev/device/enclosure_device\"*)\n\t\tif [ ! -d \"$vdev_enc_sysfs_path\" ] ; then\n\t\t\t# This is not a JBOD disk, but it could be a PCI NVMe drive\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zed.d/vdev_clear-led.sh"
                },
                "region": {
                  "startLine": 188,
                  "startColumn": 67,
                  "endLine": 188,
                  "endColumn": 73,
                  "snippet": {
                    "text": "\t#    U47     ONLINE       0     0     0   /dev/sdn          0\n\t#    U50     ONLINE       0     0     0  /dev/sdbn          0\n\t#\n\tZPOOL_SCRIPTS_AS_ROOT=1 $ZPOOL status -c upath,fault_led \"$pool\" | grep '/dev/' | (\n\trc=0\n\twhile read -r vdev state _ _ _ therest; do\n\t\t# Read out current LED value and path\n",
                    "rendered": {
                      "text": "\t#    U47     ONLINE       0     0     0   /dev/sdn          0\n\t#    U50     ONLINE       0     0     0  /dev/sdbn          0\n\t#\n\tZPOOL_SCRIPTS_AS_ROOT=1 $ZPOOL status -c upath,fault_led \"$pool\" | grep '/dev/' | (\n\trc=0\n\twhile read -r vdev state _ _ _ therest; do\n\t\t# Read out current LED value and path\n",
                      "markdown": "`\t#    U47     ONLINE       0     0     0   /dev/sdn          0\n\t#    U50     ONLINE       0     0     0  /dev/sdbn          0\n\t#\n\tZPOOL_SCRIPTS_AS_ROOT=1 $ZPOOL status -c upath,fault_led \"$pool\" | grep '/dev/' | (\n\trc=0\n\twhile read -r vdev state _ _ _ therest; do\n\t\t# Read out current LED value and path\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zed.d/vdev_clear-led.sh"
                },
                "region": {
                  "startLine": 158,
                  "startColumn": 23,
                  "endLine": 158,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\t\t\t# address=           \"0000:01:00.0\"\n\t\t\t# this_address =     \"0000:01:00\"\n\t\t\t#\n\t\t\tif echo \"$address\" | grep -Eq ^\"$this_address\" ; then\n\t\t\t\techo \"${sys_addr%/*}\"\n\t\t\t\tbreak\n\t\t\tfi\n",
                    "rendered": {
                      "text": "\t\t\t# address=           \"0000:01:00.0\"\n\t\t\t# this_address =     \"0000:01:00\"\n\t\t\t#\n\t\t\tif echo \"$address\" | grep -Eq ^\"$this_address\" ; then\n\t\t\t\techo \"${sys_addr%/*}\"\n\t\t\t\tbreak\n\t\t\tfi\n",
                      "markdown": "`\t\t\t# address=           \"0000:01:00.0\"\n\t\t\t# this_address =     \"0000:01:00\"\n\t\t\t#\n\t\t\tif echo \"$address\" | grep -Eq ^\"$this_address\" ; then\n\t\t\t\techo \"${sys_addr%/*}\"\n\t\t\t\tbreak\n\t\t\tfi\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zed.d/vdev_clear-led.sh"
                },
                "region": {
                  "startLine": 147,
                  "endLine": 147,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\t# Get the address \"0000:01:00.0\"\n\tread -r address < \"/sys/class/block/$dev/device/address\"\n\n\tfind /sys/bus/pci/slots -regex '.*/[0-9]+/address$' | \\\n\t\twhile read -r sys_addr; do\n\t\t\tread -r this_address < \"$sys_addr\"\n\n",
                    "rendered": {
                      "text": "\t# Get the address \"0000:01:00.0\"\n\tread -r address < \"/sys/class/block/$dev/device/address\"\n\n\tfind /sys/bus/pci/slots -regex '.*/[0-9]+/address$' | \\\n\t\twhile read -r sys_addr; do\n\t\t\tread -r this_address < \"$sys_addr\"\n\n",
                      "markdown": "`\t# Get the address \"0000:01:00.0\"\n\tread -r address < \"/sys/class/block/$dev/device/address\"\n\n\tfind /sys/bus/pci/slots -regex '.*/[0-9]+/address$' | \\\n\t\twhile read -r sys_addr; do\n\t\t\tread -r this_address < \"$sys_addr\"\n\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zed.d/vdev_clear-led.sh"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 13,
                  "endLine": 43,
                  "endColumn": 18,
                  "snippet": {
                    "text": "fi\n\nzed_check_cmd \"$ZPOOL\" || exit 4\nzed_check_cmd awk || exit 5\n\n# Global used in set_led debug print\nvdev=\"\"\n",
                    "rendered": {
                      "text": "fi\n\nzed_check_cmd \"$ZPOOL\" || exit 4\nzed_check_cmd awk || exit 5\n\n# Global used in set_led debug print\nvdev=\"\"\n",
                      "markdown": "`fi\n\nzed_check_cmd \"$ZPOOL\" || exit 4\nzed_check_cmd awk || exit 5\n\n# Global used in set_led debug print\nvdev=\"\"\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zed.d/vdev_clear-led.sh"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 6,
                  "endLine": 28,
                  "endColumn": 11,
                  "snippet": {
                    "text": "#   2: enclosure leds administratively disabled\n#   3: The led sysfs path passed from ZFS does not exist\n#   4: $ZPOOL not set\n#   5: awk is not installed\n\n[ -f \"${ZED_ZEDLET_DIR}/zed.rc\" ] && . \"${ZED_ZEDLET_DIR}/zed.rc\"\n. \"${ZED_ZEDLET_DIR}/zed-functions.sh\"\n",
                    "rendered": {
                      "text": "#   2: enclosure leds administratively disabled\n#   3: The led sysfs path passed from ZFS does not exist\n#   4: $ZPOOL not set\n#   5: awk is not installed\n\n[ -f \"${ZED_ZEDLET_DIR}/zed.rc\" ] && . \"${ZED_ZEDLET_DIR}/zed.rc\"\n. \"${ZED_ZEDLET_DIR}/zed-functions.sh\"\n",
                      "markdown": "`#   2: enclosure leds administratively disabled\n#   3: The led sysfs path passed from ZFS does not exist\n#   4: $ZPOOL not set\n#   5: awk is not installed\n\n[ -f \"${ZED_ZEDLET_DIR}/zed.rc\" ] && . \"${ZED_ZEDLET_DIR}/zed.rc\"\n. \"${ZED_ZEDLET_DIR}/zed-functions.sh\"\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zed.d/vdev_clear-led.sh"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 50,
                  "endLine": 19,
                  "endColumn": 58,
                  "snippet": {
                    "text": "# and set the LEDs accordingly.  This is the case for pool_import events.\n#\n# Note that this script requires that your enclosure be supported by the\n# Linux SCSI Enclosure services (SES) driver.  The script will do nothing\n# if you have no enclosure, or if your enclosure isn't supported.\n#\n# Exit codes:\n",
                    "rendered": {
                      "text": "# and set the LEDs accordingly.  This is the case for pool_import events.\n#\n# Note that this script requires that your enclosure be supported by the\n# Linux SCSI Enclosure services (SES) driver.  The script will do nothing\n# if you have no enclosure, or if your enclosure isn't supported.\n#\n# Exit codes:\n",
                      "markdown": "`# and set the LEDs accordingly.  This is the case for pool_import events.\n#\n# Note that this script requires that your enclosure be supported by the\n# Linux SCSI Enclosure services (SES) driver.  The script will do nothing\n# if you have no enclosure, or if your enclosure isn't supported.\n#\n# Exit codes:\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zed.d/vdev_clear-led.sh"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 16,
                  "endLine": 18,
                  "endColumn": 24,
                  "snippet": {
                    "text": "# 2. If those vars are not set, then check the state of all vdevs in the pool\n# and set the LEDs accordingly.  This is the case for pool_import events.\n#\n# Note that this script requires that your enclosure be supported by the\n# Linux SCSI Enclosure services (SES) driver.  The script will do nothing\n# if you have no enclosure, or if your enclosure isn't supported.\n#\n",
                    "rendered": {
                      "text": "# 2. If those vars are not set, then check the state of all vdevs in the pool\n# and set the LEDs accordingly.  This is the case for pool_import events.\n#\n# Note that this script requires that your enclosure be supported by the\n# Linux SCSI Enclosure services (SES) driver.  The script will do nothing\n# if you have no enclosure, or if your enclosure isn't supported.\n#\n",
                      "markdown": "`# 2. If those vars are not set, then check the state of all vdevs in the pool\n# and set the LEDs accordingly.  This is the case for pool_import events.\n#\n# Note that this script requires that your enclosure be supported by the\n# Linux SCSI Enclosure services (SES) driver.  The script will do nothing\n# if you have no enclosure, or if your enclosure isn't supported.\n#\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zed.d/vdev_clear-led.sh"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 6,
                  "endLine": 9,
                  "endColumn": 14,
                  "snippet": {
                    "text": "# Turn a vdev's fault LED on if it becomes FAULTED, DEGRADED or UNAVAIL.\n# Turn its LED off when it's back ONLINE again.\n#\n# This script run in two basic modes:\n#\n# 1. If $ZEVENT_VDEV_ENC_SYSFS_PATH and $ZEVENT_VDEV_STATE_STR are set, then\n# only set the LED for that particular vdev. This is the case for statechange\n",
                    "rendered": {
                      "text": "# Turn a vdev's fault LED on if it becomes FAULTED, DEGRADED or UNAVAIL.\n# Turn its LED off when it's back ONLINE again.\n#\n# This script run in two basic modes:\n#\n# 1. If $ZEVENT_VDEV_ENC_SYSFS_PATH and $ZEVENT_VDEV_STATE_STR are set, then\n# only set the LED for that particular vdev. This is the case for statechange\n",
                      "markdown": "`# Turn a vdev's fault LED on if it becomes FAULTED, DEGRADED or UNAVAIL.\n# Turn its LED off when it's back ONLINE again.\n#\n# This script run in two basic modes:\n#\n# 1. If $ZEVENT_VDEV_ENC_SYSFS_PATH and $ZEVENT_VDEV_STATE_STR are set, then\n# only set the LED for that particular vdev. This is the case for statechange\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zed.d/vdev_attach-led.sh"
                },
                "region": {
                  "startLine": 73,
                  "startColumn": 6,
                  "endLine": 73,
                  "endColumn": 14,
                  "snippet": {
                    "text": "\tfi\n\n\t# If another process is accessing the LED when we attempt to update it,\n\t# the update will be lost so retry until the LED actually changes or we\n\t# timeout.\n\tfor _ in 1 2 3 4 5; do\n\t\t# We want to check the current state first, since writing to the\n",
                    "rendered": {
                      "text": "\tfi\n\n\t# If another process is accessing the LED when we attempt to update it,\n\t# the update will be lost so retry until the LED actually changes or we\n\t# timeout.\n\tfor _ in 1 2 3 4 5; do\n\t\t# We want to check the current state first, since writing to the\n",
                      "markdown": "`\tfi\n\n\t# If another process is accessing the LED when we attempt to update it,\n\t# the update will be lost so retry until the LED actually changes or we\n\t# timeout.\n\tfor _ in 1 2 3 4 5; do\n\t\t# We want to check the current state first, since writing to the\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zed.d/vdev_attach-led.sh"
                },
                "region": {
                  "startLine": 72,
                  "startColumn": 61,
                  "endLine": 72,
                  "endColumn": 69,
                  "snippet": {
                    "text": "\t\treturn 3\n\tfi\n\n\t# If another process is accessing the LED when we attempt to update it,\n\t# the update will be lost so retry until the LED actually changes or we\n\t# timeout.\n\tfor _ in 1 2 3 4 5; do\n",
                    "rendered": {
                      "text": "\t\treturn 3\n\tfi\n\n\t# If another process is accessing the LED when we attempt to update it,\n\t# the update will be lost so retry until the LED actually changes or we\n\t# timeout.\n\tfor _ in 1 2 3 4 5; do\n",
                      "markdown": "`\t\treturn 3\n\tfi\n\n\t# If another process is accessing the LED when we attempt to update it,\n\t# the update will be lost so retry until the LED actually changes or we\n\t# timeout.\n\tfor _ in 1 2 3 4 5; do\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zed.d/vdev_attach-led.sh"
                },
                "region": {
                  "startLine": 200,
                  "startColumn": 33,
                  "endLine": 200,
                  "endColumn": 38,
                  "snippet": {
                    "text": "\t\t\tvdev_enc_sysfs_path=$(nvme_dev_to_slot \"$dev\")\n\t\tfi\n\n\t\tcurrent_val=$(echo \"$therest\" | awk '{print $NF}')\n\n\t\tif [ \"$current_val\" != \"0\" ] ; then\n\t\t\tcurrent_val=1\n",
                    "rendered": {
                      "text": "\t\t\tvdev_enc_sysfs_path=$(nvme_dev_to_slot \"$dev\")\n\t\tfi\n\n\t\tcurrent_val=$(echo \"$therest\" | awk '{print $NF}')\n\n\t\tif [ \"$current_val\" != \"0\" ] ; then\n\t\t\tcurrent_val=1\n",
                      "markdown": "`\t\t\tvdev_enc_sysfs_path=$(nvme_dev_to_slot \"$dev\")\n\t\tfi\n\n\t\tcurrent_val=$(echo \"$therest\" | awk '{print $NF}')\n\n\t\tif [ \"$current_val\" != \"0\" ] ; then\n\t\t\tcurrent_val=1\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zed.d/vdev_attach-led.sh"
                },
                "region": {
                  "startLine": 193,
                  "startColumn": 37,
                  "endLine": 193,
                  "endColumn": 42,
                  "snippet": {
                    "text": "\twhile read -r vdev state _ _ _ therest; do\n\t\t# Read out current LED value and path\n\t\t# Get dev name (like 'sda')\n\t\tdev=$(basename \"$(echo \"$therest\" | awk '{print $(NF-1)}')\")\n\t\tvdev_enc_sysfs_path=$(realpath \"/sys/class/block/$dev/device/enclosure_device\"*)\n\t\tif [ ! -d \"$vdev_enc_sysfs_path\" ] ; then\n\t\t\t# This is not a JBOD disk, but it could be a PCI NVMe drive\n",
                    "rendered": {
                      "text": "\twhile read -r vdev state _ _ _ therest; do\n\t\t# Read out current LED value and path\n\t\t# Get dev name (like 'sda')\n\t\tdev=$(basename \"$(echo \"$therest\" | awk '{print $(NF-1)}')\")\n\t\tvdev_enc_sysfs_path=$(realpath \"/sys/class/block/$dev/device/enclosure_device\"*)\n\t\tif [ ! -d \"$vdev_enc_sysfs_path\" ] ; then\n\t\t\t# This is not a JBOD disk, but it could be a PCI NVMe drive\n",
                      "markdown": "`\twhile read -r vdev state _ _ _ therest; do\n\t\t# Read out current LED value and path\n\t\t# Get dev name (like 'sda')\n\t\tdev=$(basename \"$(echo \"$therest\" | awk '{print $(NF-1)}')\")\n\t\tvdev_enc_sysfs_path=$(realpath \"/sys/class/block/$dev/device/enclosure_device\"*)\n\t\tif [ ! -d \"$vdev_enc_sysfs_path\" ] ; then\n\t\t\t# This is not a JBOD disk, but it could be a PCI NVMe drive\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zed.d/vdev_attach-led.sh"
                },
                "region": {
                  "startLine": 188,
                  "startColumn": 67,
                  "endLine": 188,
                  "endColumn": 73,
                  "snippet": {
                    "text": "\t#    U47     ONLINE       0     0     0   /dev/sdn          0\n\t#    U50     ONLINE       0     0     0  /dev/sdbn          0\n\t#\n\tZPOOL_SCRIPTS_AS_ROOT=1 $ZPOOL status -c upath,fault_led \"$pool\" | grep '/dev/' | (\n\trc=0\n\twhile read -r vdev state _ _ _ therest; do\n\t\t# Read out current LED value and path\n",
                    "rendered": {
                      "text": "\t#    U47     ONLINE       0     0     0   /dev/sdn          0\n\t#    U50     ONLINE       0     0     0  /dev/sdbn          0\n\t#\n\tZPOOL_SCRIPTS_AS_ROOT=1 $ZPOOL status -c upath,fault_led \"$pool\" | grep '/dev/' | (\n\trc=0\n\twhile read -r vdev state _ _ _ therest; do\n\t\t# Read out current LED value and path\n",
                      "markdown": "`\t#    U47     ONLINE       0     0     0   /dev/sdn          0\n\t#    U50     ONLINE       0     0     0  /dev/sdbn          0\n\t#\n\tZPOOL_SCRIPTS_AS_ROOT=1 $ZPOOL status -c upath,fault_led \"$pool\" | grep '/dev/' | (\n\trc=0\n\twhile read -r vdev state _ _ _ therest; do\n\t\t# Read out current LED value and path\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zed.d/vdev_attach-led.sh"
                },
                "region": {
                  "startLine": 158,
                  "startColumn": 23,
                  "endLine": 158,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\t\t\t# address=           \"0000:01:00.0\"\n\t\t\t# this_address =     \"0000:01:00\"\n\t\t\t#\n\t\t\tif echo \"$address\" | grep -Eq ^\"$this_address\" ; then\n\t\t\t\techo \"${sys_addr%/*}\"\n\t\t\t\tbreak\n\t\t\tfi\n",
                    "rendered": {
                      "text": "\t\t\t# address=           \"0000:01:00.0\"\n\t\t\t# this_address =     \"0000:01:00\"\n\t\t\t#\n\t\t\tif echo \"$address\" | grep -Eq ^\"$this_address\" ; then\n\t\t\t\techo \"${sys_addr%/*}\"\n\t\t\t\tbreak\n\t\t\tfi\n",
                      "markdown": "`\t\t\t# address=           \"0000:01:00.0\"\n\t\t\t# this_address =     \"0000:01:00\"\n\t\t\t#\n\t\t\tif echo \"$address\" | grep -Eq ^\"$this_address\" ; then\n\t\t\t\techo \"${sys_addr%/*}\"\n\t\t\t\tbreak\n\t\t\tfi\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zed.d/vdev_attach-led.sh"
                },
                "region": {
                  "startLine": 147,
                  "endLine": 147,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\t# Get the address \"0000:01:00.0\"\n\tread -r address < \"/sys/class/block/$dev/device/address\"\n\n\tfind /sys/bus/pci/slots -regex '.*/[0-9]+/address$' | \\\n\t\twhile read -r sys_addr; do\n\t\t\tread -r this_address < \"$sys_addr\"\n\n",
                    "rendered": {
                      "text": "\t# Get the address \"0000:01:00.0\"\n\tread -r address < \"/sys/class/block/$dev/device/address\"\n\n\tfind /sys/bus/pci/slots -regex '.*/[0-9]+/address$' | \\\n\t\twhile read -r sys_addr; do\n\t\t\tread -r this_address < \"$sys_addr\"\n\n",
                      "markdown": "`\t# Get the address \"0000:01:00.0\"\n\tread -r address < \"/sys/class/block/$dev/device/address\"\n\n\tfind /sys/bus/pci/slots -regex '.*/[0-9]+/address$' | \\\n\t\twhile read -r sys_addr; do\n\t\t\tread -r this_address < \"$sys_addr\"\n\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zed.d/vdev_attach-led.sh"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 13,
                  "endLine": 43,
                  "endColumn": 18,
                  "snippet": {
                    "text": "fi\n\nzed_check_cmd \"$ZPOOL\" || exit 4\nzed_check_cmd awk || exit 5\n\n# Global used in set_led debug print\nvdev=\"\"\n",
                    "rendered": {
                      "text": "fi\n\nzed_check_cmd \"$ZPOOL\" || exit 4\nzed_check_cmd awk || exit 5\n\n# Global used in set_led debug print\nvdev=\"\"\n",
                      "markdown": "`fi\n\nzed_check_cmd \"$ZPOOL\" || exit 4\nzed_check_cmd awk || exit 5\n\n# Global used in set_led debug print\nvdev=\"\"\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zed.d/vdev_attach-led.sh"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 6,
                  "endLine": 28,
                  "endColumn": 11,
                  "snippet": {
                    "text": "#   2: enclosure leds administratively disabled\n#   3: The led sysfs path passed from ZFS does not exist\n#   4: $ZPOOL not set\n#   5: awk is not installed\n\n[ -f \"${ZED_ZEDLET_DIR}/zed.rc\" ] && . \"${ZED_ZEDLET_DIR}/zed.rc\"\n. \"${ZED_ZEDLET_DIR}/zed-functions.sh\"\n",
                    "rendered": {
                      "text": "#   2: enclosure leds administratively disabled\n#   3: The led sysfs path passed from ZFS does not exist\n#   4: $ZPOOL not set\n#   5: awk is not installed\n\n[ -f \"${ZED_ZEDLET_DIR}/zed.rc\" ] && . \"${ZED_ZEDLET_DIR}/zed.rc\"\n. \"${ZED_ZEDLET_DIR}/zed-functions.sh\"\n",
                      "markdown": "`#   2: enclosure leds administratively disabled\n#   3: The led sysfs path passed from ZFS does not exist\n#   4: $ZPOOL not set\n#   5: awk is not installed\n\n[ -f \"${ZED_ZEDLET_DIR}/zed.rc\" ] && . \"${ZED_ZEDLET_DIR}/zed.rc\"\n. \"${ZED_ZEDLET_DIR}/zed-functions.sh\"\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zed.d/vdev_attach-led.sh"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 50,
                  "endLine": 19,
                  "endColumn": 58,
                  "snippet": {
                    "text": "# and set the LEDs accordingly.  This is the case for pool_import events.\n#\n# Note that this script requires that your enclosure be supported by the\n# Linux SCSI Enclosure services (SES) driver.  The script will do nothing\n# if you have no enclosure, or if your enclosure isn't supported.\n#\n# Exit codes:\n",
                    "rendered": {
                      "text": "# and set the LEDs accordingly.  This is the case for pool_import events.\n#\n# Note that this script requires that your enclosure be supported by the\n# Linux SCSI Enclosure services (SES) driver.  The script will do nothing\n# if you have no enclosure, or if your enclosure isn't supported.\n#\n# Exit codes:\n",
                      "markdown": "`# and set the LEDs accordingly.  This is the case for pool_import events.\n#\n# Note that this script requires that your enclosure be supported by the\n# Linux SCSI Enclosure services (SES) driver.  The script will do nothing\n# if you have no enclosure, or if your enclosure isn't supported.\n#\n# Exit codes:\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zed.d/vdev_attach-led.sh"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 16,
                  "endLine": 18,
                  "endColumn": 24,
                  "snippet": {
                    "text": "# 2. If those vars are not set, then check the state of all vdevs in the pool\n# and set the LEDs accordingly.  This is the case for pool_import events.\n#\n# Note that this script requires that your enclosure be supported by the\n# Linux SCSI Enclosure services (SES) driver.  The script will do nothing\n# if you have no enclosure, or if your enclosure isn't supported.\n#\n",
                    "rendered": {
                      "text": "# 2. If those vars are not set, then check the state of all vdevs in the pool\n# and set the LEDs accordingly.  This is the case for pool_import events.\n#\n# Note that this script requires that your enclosure be supported by the\n# Linux SCSI Enclosure services (SES) driver.  The script will do nothing\n# if you have no enclosure, or if your enclosure isn't supported.\n#\n",
                      "markdown": "`# 2. If those vars are not set, then check the state of all vdevs in the pool\n# and set the LEDs accordingly.  This is the case for pool_import events.\n#\n# Note that this script requires that your enclosure be supported by the\n# Linux SCSI Enclosure services (SES) driver.  The script will do nothing\n# if you have no enclosure, or if your enclosure isn't supported.\n#\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zed.d/vdev_attach-led.sh"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 6,
                  "endLine": 9,
                  "endColumn": 14,
                  "snippet": {
                    "text": "# Turn a vdev's fault LED on if it becomes FAULTED, DEGRADED or UNAVAIL.\n# Turn its LED off when it's back ONLINE again.\n#\n# This script run in two basic modes:\n#\n# 1. If $ZEVENT_VDEV_ENC_SYSFS_PATH and $ZEVENT_VDEV_STATE_STR are set, then\n# only set the LED for that particular vdev. This is the case for statechange\n",
                    "rendered": {
                      "text": "# Turn a vdev's fault LED on if it becomes FAULTED, DEGRADED or UNAVAIL.\n# Turn its LED off when it's back ONLINE again.\n#\n# This script run in two basic modes:\n#\n# 1. If $ZEVENT_VDEV_ENC_SYSFS_PATH and $ZEVENT_VDEV_STATE_STR are set, then\n# only set the LED for that particular vdev. This is the case for statechange\n",
                      "markdown": "`# Turn a vdev's fault LED on if it becomes FAULTED, DEGRADED or UNAVAIL.\n# Turn its LED off when it's back ONLINE again.\n#\n# This script run in two basic modes:\n#\n# 1. If $ZEVENT_VDEV_ENC_SYSFS_PATH and $ZEVENT_VDEV_STATE_STR are set, then\n# only set the LED for that particular vdev. This is the case for statechange\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zed.d/trim_finish-notify.sh"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 20,
                  "endLine": 29,
                  "endColumn": 28,
                  "snippet": {
                    "text": "    echo\n    echo \"   eid: ${ZEVENT_EID}\"\n    echo \" class: ${ZEVENT_SUBCLASS}\"\n    echo \"  host: $(hostname)\"\n    echo \"  time: ${ZEVENT_TIME_STRING}\"\n\n    \"${ZPOOL}\" status -t \"${ZEVENT_POOL}\"\n",
                    "rendered": {
                      "text": "    echo\n    echo \"   eid: ${ZEVENT_EID}\"\n    echo \" class: ${ZEVENT_SUBCLASS}\"\n    echo \"  host: $(hostname)\"\n    echo \"  time: ${ZEVENT_TIME_STRING}\"\n\n    \"${ZPOOL}\" status -t \"${ZEVENT_POOL}\"\n",
                      "markdown": "`    echo\n    echo \"   eid: ${ZEVENT_EID}\"\n    echo \" class: ${ZEVENT_SUBCLASS}\"\n    echo \"  host: $(hostname)\"\n    echo \"  time: ${ZEVENT_TIME_STRING}\"\n\n    \"${ZPOOL}\" status -t \"${ZEVENT_POOL}\"\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zed.d/trim_finish-notify.sh"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 67,
                  "endLine": 22,
                  "endColumn": 75,
                  "snippet": {
                    "text": "zed_check_cmd \"${ZPOOL}\" || exit 9\n\numask 077\nnote_subject=\"ZFS ${ZEVENT_SUBCLASS} event for ${ZEVENT_POOL} on $(hostname)\"\nnote_pathname=\"$(mktemp)\"\n{\n    echo \"ZFS has finished a trim:\"\n",
                    "rendered": {
                      "text": "zed_check_cmd \"${ZPOOL}\" || exit 9\n\numask 077\nnote_subject=\"ZFS ${ZEVENT_SUBCLASS} event for ${ZEVENT_POOL} on $(hostname)\"\nnote_pathname=\"$(mktemp)\"\n{\n    echo \"ZFS has finished a trim:\"\n",
                      "markdown": "`zed_check_cmd \"${ZPOOL}\" || exit 9\n\numask 077\nnote_subject=\"ZFS ${ZEVENT_SUBCLASS} event for ${ZEVENT_POOL} on $(hostname)\"\nnote_pathname=\"$(mktemp)\"\n{\n    echo \"ZFS has finished a trim:\"\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zed.d/statechange-slot_off.sh"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 13,
                  "endLine": 50,
                  "endColumn": 18,
                  "snippet": {
                    "text": "# Turn off the slot and wait for sysfs to report that the slot is off.\n# It can take ~400ms on some enclosures and multiple retries may be needed.\nfor i in $(seq 1 20) ; do\n\techo \"off\" | tee \"$ZEVENT_VDEV_ENC_SYSFS_PATH/power_status\"\n\n\tfor j in $(seq 1 5) ; do\n\t\tif [ \"$(cat $ZEVENT_VDEV_ENC_SYSFS_PATH/power_status)\" == \"off\" ] ; then\n",
                    "rendered": {
                      "text": "# Turn off the slot and wait for sysfs to report that the slot is off.\n# It can take ~400ms on some enclosures and multiple retries may be needed.\nfor i in $(seq 1 20) ; do\n\techo \"off\" | tee \"$ZEVENT_VDEV_ENC_SYSFS_PATH/power_status\"\n\n\tfor j in $(seq 1 5) ; do\n\t\tif [ \"$(cat $ZEVENT_VDEV_ENC_SYSFS_PATH/power_status)\" == \"off\" ] ; then\n",
                      "markdown": "`# Turn off the slot and wait for sysfs to report that the slot is off.\n# It can take ~400ms on some enclosures and multiple retries may be needed.\nfor i in $(seq 1 20) ; do\n\techo \"off\" | tee \"$ZEVENT_VDEV_ENC_SYSFS_PATH/power_status\"\n\n\tfor j in $(seq 1 5) ; do\n\t\tif [ \"$(cat $ZEVENT_VDEV_ENC_SYSFS_PATH/power_status)\" == \"off\" ] ; then\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zed.d/statechange-slot_off.sh"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 50,
                  "endLine": 16,
                  "endColumn": 58,
                  "snippet": {
                    "text": "# We assume the user will be responsible for turning the slot back on again.\n#\n# Note that this script requires that your enclosure be supported by the\n# Linux SCSI Enclosure services (SES) driver.  The script will do nothing\n# if you have no enclosure, or if your enclosure isn't supported.\n#\n# Exit codes:\n",
                    "rendered": {
                      "text": "# We assume the user will be responsible for turning the slot back on again.\n#\n# Note that this script requires that your enclosure be supported by the\n# Linux SCSI Enclosure services (SES) driver.  The script will do nothing\n# if you have no enclosure, or if your enclosure isn't supported.\n#\n# Exit codes:\n",
                      "markdown": "`# We assume the user will be responsible for turning the slot back on again.\n#\n# Note that this script requires that your enclosure be supported by the\n# Linux SCSI Enclosure services (SES) driver.  The script will do nothing\n# if you have no enclosure, or if your enclosure isn't supported.\n#\n# Exit codes:\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zed.d/statechange-slot_off.sh"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 16,
                  "endLine": 15,
                  "endColumn": 24,
                  "snippet": {
                    "text": "#\n# We assume the user will be responsible for turning the slot back on again.\n#\n# Note that this script requires that your enclosure be supported by the\n# Linux SCSI Enclosure services (SES) driver.  The script will do nothing\n# if you have no enclosure, or if your enclosure isn't supported.\n#\n",
                    "rendered": {
                      "text": "#\n# We assume the user will be responsible for turning the slot back on again.\n#\n# Note that this script requires that your enclosure be supported by the\n# Linux SCSI Enclosure services (SES) driver.  The script will do nothing\n# if you have no enclosure, or if your enclosure isn't supported.\n#\n",
                      "markdown": "`#\n# We assume the user will be responsible for turning the slot back on again.\n#\n# Note that this script requires that your enclosure be supported by the\n# Linux SCSI Enclosure services (SES) driver.  The script will do nothing\n# if you have no enclosure, or if your enclosure isn't supported.\n#\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/lib/dracut/modules.d/02zfsexpandknowledge/module-setup.sh"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n\nget_devtype() {\n  local typ\n  typ=$(udevadm info --query=property --name=\"$1\" | sed -n 's|^ID_FS_TYPE=||p')\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n\nget_devtype() {\n  local typ\n  typ=$(udevadm info --query=property --name=\"$1\" | sed -n 's|^ID_FS_TYPE=||p')\n",
                      "markdown": "`#!/usr/bin/env bash\n\nget_devtype() {\n  local typ\n  typ=$(udevadm info --query=property --name=\"$1\" | sed -n 's|^ID_FS_TYPE=||p')\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/lib/dracut/modules.d/02zfsexpandknowledge/module-setup.sh"
                },
                "region": {
                  "startLine": 107,
                  "startColumn": 83,
                  "endLine": 107,
                  "endColumn": 88,
                  "snippet": {
                    "text": "                for _depdev in \"/sys/dev/block/$majmin/slaves\"/*; do\n                    [[ -f \"$_depdev/dev\" ]] || continue\n                    _depdev=\"/dev/${_depdev##*/}\"\n                    _depdevname=$(udevadm info --query=property --name=\"$_depdev\" | sed -n 's|^DEVNAME=||p')\n                    _depdevtype=$(get_devtype \"$_depdevname\")\n                    dinfo \"zfsexpandknowledge: underlying block device backing ZFS dataset $mp: ${_depdevname//$'\\n'/ }\"\n                    array_contains \"$_depdevname\" \"${host_devs[@]}\" || host_devs+=(\"$_depdevname\")\n",
                    "rendered": {
                      "text": "                for _depdev in \"/sys/dev/block/$majmin/slaves\"/*; do\n                    [[ -f \"$_depdev/dev\" ]] || continue\n                    _depdev=\"/dev/${_depdev##*/}\"\n                    _depdevname=$(udevadm info --query=property --name=\"$_depdev\" | sed -n 's|^DEVNAME=||p')\n                    _depdevtype=$(get_devtype \"$_depdevname\")\n                    dinfo \"zfsexpandknowledge: underlying block device backing ZFS dataset $mp: ${_depdevname//$'\\n'/ }\"\n                    array_contains \"$_depdevname\" \"${host_devs[@]}\" || host_devs+=(\"$_depdevname\")\n",
                      "markdown": "`                for _depdev in \"/sys/dev/block/$majmin/slaves\"/*; do\n                    [[ -f \"$_depdev/dev\" ]] || continue\n                    _depdev=\"/dev/${_depdev##*/}\"\n                    _depdevname=$(udevadm info --query=property --name=\"$_depdev\" | sed -n 's|^DEVNAME=||p')\n                    _depdevtype=$(get_devtype \"$_depdevname\")\n                    dinfo \"zfsexpandknowledge: underlying block device backing ZFS dataset $mp: ${_depdevname//$'\\n'/ }\"\n                    array_contains \"$_depdevname\" \"${host_devs[@]}\" || host_devs+=(\"$_depdevname\")\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/lib/dracut/modules.d/02zfsexpandknowledge/module-setup.sh"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 3,
                  "endLine": 23,
                  "endColumn": 8,
                  "snippet": {
                    "text": "    poolconfigoutput=\"$(cat \"$poolconfigtemp\")\"\n    dinfo \"zfsexpandknowledge: pool $1 cannot be listed: $poolconfigoutput\"\n  else\n    awk -F '\\t' '/\\t\\/dev/ { print $2 }' \"$poolconfigtemp\" | \\\n    while read -r pooldev ; do\n        if [[ -e \"$pooldev\" ]] ; then\n          resolved=\"$(readlink -f \"$pooldev\")\"\n",
                    "rendered": {
                      "text": "    poolconfigoutput=\"$(cat \"$poolconfigtemp\")\"\n    dinfo \"zfsexpandknowledge: pool $1 cannot be listed: $poolconfigoutput\"\n  else\n    awk -F '\\t' '/\\t\\/dev/ { print $2 }' \"$poolconfigtemp\" | \\\n    while read -r pooldev ; do\n        if [[ -e \"$pooldev\" ]] ; then\n          resolved=\"$(readlink -f \"$pooldev\")\"\n",
                      "markdown": "`    poolconfigoutput=\"$(cat \"$poolconfigtemp\")\"\n    dinfo \"zfsexpandknowledge: pool $1 cannot be listed: $poolconfigoutput\"\n  else\n    awk -F '\\t' '/\\t\\/dev/ { print $2 }' \"$poolconfigtemp\" | \\\n    while read -r pooldev ; do\n        if [[ -e \"$pooldev\" ]] ; then\n          resolved=\"$(readlink -f \"$pooldev\")\"\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/lib/dracut/modules.d/02zfsexpandknowledge/module-setup.sh"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 51,
                  "endLine": 5,
                  "endColumn": 56,
                  "snippet": {
                    "text": "\nget_devtype() {\n  local typ\n  typ=$(udevadm info --query=property --name=\"$1\" | sed -n 's|^ID_FS_TYPE=||p')\n  if [[ -z \"$typ\" ]] ; then\n     typ=$(blkid -c /dev/null \"$1\" -o value -s TYPE)\n  fi\n",
                    "rendered": {
                      "text": "\nget_devtype() {\n  local typ\n  typ=$(udevadm info --query=property --name=\"$1\" | sed -n 's|^ID_FS_TYPE=||p')\n  if [[ -z \"$typ\" ]] ; then\n     typ=$(blkid -c /dev/null \"$1\" -o value -s TYPE)\n  fi\n",
                      "markdown": "`\nget_devtype() {\n  local typ\n  typ=$(udevadm info --query=property --name=\"$1\" | sed -n 's|^ID_FS_TYPE=||p')\n  if [[ -z \"$typ\" ]] ; then\n     typ=$(blkid -c /dev/null \"$1\" -o value -s TYPE)\n  fi\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/lib/dracut/modules.d/02zfsexpandknowledge/module-setup.sh"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n\nget_devtype() {\n  local typ\n  typ=$(udevadm info --query=property --name=\"$1\" | sed -n 's|^ID_FS_TYPE=||p')\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n\nget_devtype() {\n  local typ\n  typ=$(udevadm info --query=property --name=\"$1\" | sed -n 's|^ID_FS_TYPE=||p')\n",
                      "markdown": "`#!/usr/bin/env bash\n\nget_devtype() {\n  local typ\n  typ=$(udevadm info --query=property --name=\"$1\" | sed -n 's|^ID_FS_TYPE=||p')\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/bin/zvol_wait"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 48,
                  "endLine": 89,
                  "endColumn": 52,
                  "snippet": {
                    "text": "\n\techo \"Still waiting on $zvols_count zvol links ...\"\n\t#\n\t# Although zvols should normally not be deleted at boot time,\n\t# if that is the case then their links will be missing and\n\t# we would stall.\n\t#\n",
                    "rendered": {
                      "text": "\n\techo \"Still waiting on $zvols_count zvol links ...\"\n\t#\n\t# Although zvols should normally not be deleted at boot time,\n\t# if that is the case then their links will be missing and\n\t# we would stall.\n\t#\n",
                      "markdown": "`\n\techo \"Still waiting on $zvols_count zvol links ...\"\n\t#\n\t# Although zvols should normally not be deleted at boot time,\n\t# if that is the case then their links will be missing and\n\t# we would stall.\n\t#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/bin/zvol_wait"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 16,
                  "endLine": 45,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\n\t\t# We also ignore partially received zvols if it is\n\t\t# not an incremental receive, as those won't even have a block\n\t\t# device minor node created yet.\n\t\tif [ \"$token\" != \"-\" ]; then\n\n\t\t\t# Incremental receives create an invisible clone that\n",
                    "rendered": {
                      "text": "\n\t\t# We also ignore partially received zvols if it is\n\t\t# not an incremental receive, as those won't even have a block\n\t\t# device minor node created yet.\n\t\tif [ \"$token\" != \"-\" ]; then\n\n\t\t\t# Incremental receives create an invisible clone that\n",
                      "markdown": "`\n\t\t# We also ignore partially received zvols if it is\n\t\t# not an incremental receive, as those won't even have a block\n\t\t# device minor node created yet.\n\t\tif [ \"$token\" != \"-\" ]; then\n\n\t\t\t# Incremental receives create an invisible clone that\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/etc/init.d/zfs-mount"
                },
                "region": {
                  "startLine": 100,
                  "startColumn": 1,
                  "endLine": 100,
                  "endColumn": 8,
                  "snippet": {
                    "text": "\t# This should be handled by rc.sysinit but lets be paranoid.\n\tif ! chkroot\n\tthen\n\t\tmount -f /\n\tfi\n\n\tdo_mount\n",
                    "rendered": {
                      "text": "\t# This should be handled by rc.sysinit but lets be paranoid.\n\tif ! chkroot\n\tthen\n\t\tmount -f /\n\tfi\n\n\tdo_mount\n",
                      "markdown": "`\t# This should be handled by rc.sysinit but lets be paranoid.\n\tif ! chkroot\n\tthen\n\t\tmount -f /\n\tfi\n\n\tdo_mount\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/etc/init.d/zfs-mount"
                },
                "region": {
                  "startLine": 73,
                  "startColumn": 11,
                  "endLine": 73,
                  "endColumn": 18,
                  "snippet": {
                    "text": "\tcheck_boolean \"$DO_OVERLAY_MOUNTS\" && overlay=O\n\n\tzfs_action \"Mounting ZFS filesystem(s)\" \\\n\t    \"$ZFS\" mount \"-a$verbose$overlay\" \"$MOUNT_EXTRA_OPTIONS\"\n\n\treturn 0\n}\n",
                    "rendered": {
                      "text": "\tcheck_boolean \"$DO_OVERLAY_MOUNTS\" && overlay=O\n\n\tzfs_action \"Mounting ZFS filesystem(s)\" \\\n\t    \"$ZFS\" mount \"-a$verbose$overlay\" \"$MOUNT_EXTRA_OPTIONS\"\n\n\treturn 0\n}\n",
                      "markdown": "`\tcheck_boolean \"$DO_OVERLAY_MOUNTS\" && overlay=O\n\n\tzfs_action \"Mounting ZFS filesystem(s)\" \\\n\t    \"$ZFS\" mount \"-a$verbose$overlay\" \"$MOUNT_EXTRA_OPTIONS\"\n\n\treturn 0\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/etc/init.d/zfs-mount"
                },
                "region": {
                  "startLine": 64,
                  "startColumn": 1,
                  "endLine": 64,
                  "endColumn": 8,
                  "snippet": {
                    "text": "\tkeyword -lxc -openvz -prefix -vserver\n}\n\n# Mount all datasets/filesystems\ndo_mount()\n{\n\tlocal verbose overlay\n",
                    "rendered": {
                      "text": "\tkeyword -lxc -openvz -prefix -vserver\n}\n\n# Mount all datasets/filesystems\ndo_mount()\n{\n\tlocal verbose overlay\n",
                      "markdown": "`\tkeyword -lxc -openvz -prefix -vserver\n}\n\n# Mount all datasets/filesystems\ndo_mount()\n{\n\tlocal verbose overlay\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/etc/init.d/zfs-mount"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 24,
                  "endLine": 32,
                  "snippet": {
                    "text": "# This script is based on debian/zfsutils.zfs.init from the\n# Debian GNU/kFreeBSD zfsutils 8.1-3 package, written by Aurelien Jarno.\n\n# Source the common init script\n. /etc/zfs/zfs-functions\n\n# ----------------------------------------------------\n\n",
                    "rendered": {
                      "text": "# This script is based on debian/zfsutils.zfs.init from the\n# Debian GNU/kFreeBSD zfsutils 8.1-3 package, written by Aurelien Jarno.\n\n# Source the common init script\n. /etc/zfs/zfs-functions\n\n# ----------------------------------------------------\n\n",
                      "markdown": "`# This script is based on debian/zfsutils.zfs.init from the\n# Debian GNU/kFreeBSD zfsutils 8.1-3 package, written by Aurelien Jarno.\n\n# Source the common init script\n. /etc/zfs/zfs-functions\n\n# ----------------------------------------------------\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/etc/init.d/zfs-mount"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 6,
                  "endLine": 28,
                  "endColumn": 14,
                  "snippet": {
                    "text": "#\n# Released under the 2-clause BSD license.\n#\n# This script is based on debian/zfsutils.zfs.init from the\n# Debian GNU/kFreeBSD zfsutils 8.1-3 package, written by Aurelien Jarno.\n\n# Source the common init script\n",
                    "rendered": {
                      "text": "#\n# Released under the 2-clause BSD license.\n#\n# This script is based on debian/zfsutils.zfs.init from the\n# Debian GNU/kFreeBSD zfsutils 8.1-3 package, written by Aurelien Jarno.\n\n# Source the common init script\n",
                      "markdown": "`#\n# Released under the 2-clause BSD license.\n#\n# This script is based on debian/zfsutils.zfs.init from the\n# Debian GNU/kFreeBSD zfsutils 8.1-3 package, written by Aurelien Jarno.\n\n# Source the common init script\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/etc/init.d/zfs-mount"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 27,
                  "endLine": 23,
                  "endColumn": 34,
                  "snippet": {
                    "text": "# X-Start-Before:    mountall\n# X-Stop-After:      zfs-zed\n# Short-Description: Mount ZFS filesystems and volumes\n# Description: Run the `zfs mount -a` or `zfs umount -a` commands.\n### END INIT INFO\n#\n# Released under the 2-clause BSD license.\n",
                    "rendered": {
                      "text": "# X-Start-Before:    mountall\n# X-Stop-After:      zfs-zed\n# Short-Description: Mount ZFS filesystems and volumes\n# Description: Run the `zfs mount -a` or `zfs umount -a` commands.\n### END INIT INFO\n#\n# Released under the 2-clause BSD license.\n",
                      "markdown": "`# X-Start-Before:    mountall\n# X-Stop-After:      zfs-zed\n# Short-Description: Mount ZFS filesystems and volumes\n# Description: Run the `zfs mount -a` or `zfs umount -a` commands.\n### END INIT INFO\n#\n# Released under the 2-clause BSD license.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/etc/init.d/zfs-mount"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 20,
                  "endLine": 22,
                  "endColumn": 27,
                  "snippet": {
                    "text": "# Default-Stop:      0 1 6\n# X-Start-Before:    mountall\n# X-Stop-After:      zfs-zed\n# Short-Description: Mount ZFS filesystems and volumes\n# Description: Run the `zfs mount -a` or `zfs umount -a` commands.\n### END INIT INFO\n#\n",
                    "rendered": {
                      "text": "# Default-Stop:      0 1 6\n# X-Start-Before:    mountall\n# X-Stop-After:      zfs-zed\n# Short-Description: Mount ZFS filesystems and volumes\n# Description: Run the `zfs mount -a` or `zfs umount -a` commands.\n### END INIT INFO\n#\n",
                      "markdown": "`# Default-Stop:      0 1 6\n# X-Start-Before:    mountall\n# X-Stop-After:      zfs-zed\n# Short-Description: Mount ZFS filesystems and volumes\n# Description: Run the `zfs mount -a` or `zfs umount -a` commands.\n### END INIT INFO\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/etc/init.d/zfs-mount"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 20,
                  "endLine": 7,
                  "endColumn": 28,
                  "snippet": {
                    "text": "# zfs-mount     This script will mount/umount the zfs filesystems.\n#\n# chkconfig:    2345 06 99\n# description:  This script will mount/umount the zfs filesystems during\n#               system boot/shutdown. Configuration of which filesystems\n#               should be mounted is handled by the zfs 'mountpoint' and\n#               'canmount' properties. See the zfs(8) man page for details.\n",
                    "rendered": {
                      "text": "# zfs-mount     This script will mount/umount the zfs filesystems.\n#\n# chkconfig:    2345 06 99\n# description:  This script will mount/umount the zfs filesystems during\n#               system boot/shutdown. Configuration of which filesystems\n#               should be mounted is handled by the zfs 'mountpoint' and\n#               'canmount' properties. See the zfs(8) man page for details.\n",
                      "markdown": "`# zfs-mount     This script will mount/umount the zfs filesystems.\n#\n# chkconfig:    2345 06 99\n# description:  This script will mount/umount the zfs filesystems during\n#               system boot/shutdown. Configuration of which filesystems\n#               should be mounted is handled by the zfs 'mountpoint' and\n#               'canmount' properties. See the zfs(8) man page for details.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/etc/init.d/zfs-mount"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 20,
                  "endLine": 4,
                  "endColumn": 28,
                  "snippet": {
                    "text": "#!/bin/sh\n# shellcheck disable=SC2154\n#\n# zfs-mount     This script will mount/umount the zfs filesystems.\n#\n# chkconfig:    2345 06 99\n# description:  This script will mount/umount the zfs filesystems during\n",
                    "rendered": {
                      "text": "#!/bin/sh\n# shellcheck disable=SC2154\n#\n# zfs-mount     This script will mount/umount the zfs filesystems.\n#\n# chkconfig:    2345 06 99\n# description:  This script will mount/umount the zfs filesystems during\n",
                      "markdown": "`#!/bin/sh\n# shellcheck disable=SC2154\n#\n# zfs-mount     This script will mount/umount the zfs filesystems.\n#\n# chkconfig:    2345 06 99\n# description:  This script will mount/umount the zfs filesystems during\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/serial"
                },
                "region": {
                  "startLine": 244,
                  "startColumn": 47,
                  "endLine": 244,
                  "endColumn": 52,
                  "snippet": {
                    "text": "\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n\nif [ -n \"$without_vals\" ]; then\n",
                    "rendered": {
                      "text": "\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n\nif [ -n \"$without_vals\" ]; then\n",
                      "markdown": "`\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n\nif [ -n \"$without_vals\" ]; then\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/serial"
                },
                "region": {
                  "startLine": 242,
                  "startColumn": 29,
                  "endLine": 242,
                  "endColumn": 34,
                  "snippet": {
                    "text": "\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n",
                    "rendered": {
                      "text": "\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n",
                      "markdown": "`\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/serial"
                },
                "region": {
                  "startLine": 242,
                  "startColumn": 1,
                  "endLine": 242,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n",
                    "rendered": {
                      "text": "\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n",
                      "markdown": "`\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/serial"
                },
                "region": {
                  "startLine": 241,
                  "startColumn": 1,
                  "endLine": 241,
                  "endColumn": 7,
                  "snippet": {
                    "text": "if [ -n \"$with_vals\" ]; then\n\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\n",
                    "rendered": {
                      "text": "if [ -n \"$with_vals\" ]; then\n\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\n",
                      "markdown": "`if [ -n \"$with_vals\" ]; then\n\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/serial"
                },
                "region": {
                  "startLine": 237,
                  "startColumn": 25,
                  "endLine": 237,
                  "endColumn": 31,
                  "snippet": {
                    "text": "\tscripts=\"$script\"\nesac\n\nwith_vals=$(echo \"$out\" | grep -E \"$scripts\")\nif [ -n \"$with_vals\" ]; then\n\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n",
                    "rendered": {
                      "text": "\tscripts=\"$script\"\nesac\n\nwith_vals=$(echo \"$out\" | grep -E \"$scripts\")\nif [ -n \"$with_vals\" ]; then\n\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n",
                      "markdown": "`\tscripts=\"$script\"\nesac\n\nwith_vals=$(echo \"$out\" | grep -E \"$scripts\")\nif [ -n \"$with_vals\" ]; then\n\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/serial"
                },
                "region": {
                  "startLine": 199,
                  "startColumn": 36,
                  "endLine": 199,
                  "endColumn": 41,
                  "snippet": {
                    "text": "END {print \"type=\"type; ORS=\"\\n\"; print \"\"}\n');\nfi\ntype=$(echo \"$out\" | grep '^type=' | cut -d '=' -f 2)\n\n# If type is not set by now, either we don't have a block device\n# or smartctl failed. Either way, default to ATA and set $out to\n",
                    "rendered": {
                      "text": "END {print \"type=\"type; ORS=\"\\n\"; print \"\"}\n');\nfi\ntype=$(echo \"$out\" | grep '^type=' | cut -d '=' -f 2)\n\n# If type is not set by now, either we don't have a block device\n# or smartctl failed. Either way, default to ATA and set $out to\n",
                      "markdown": "`END {print \"type=\"type; ORS=\"\\n\"; print \"\"}\n');\nfi\ntype=$(echo \"$out\" | grep '^type=' | cut -d '=' -f 2)\n\n# If type is not set by now, either we don't have a block device\n# or smartctl failed. Either way, default to ATA and set $out to\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/serial"
                },
                "region": {
                  "startLine": 199,
                  "startColumn": 20,
                  "endLine": 199,
                  "endColumn": 26,
                  "snippet": {
                    "text": "END {print \"type=\"type; ORS=\"\\n\"; print \"\"}\n');\nfi\ntype=$(echo \"$out\" | grep '^type=' | cut -d '=' -f 2)\n\n# If type is not set by now, either we don't have a block device\n# or smartctl failed. Either way, default to ATA and set $out to\n",
                    "rendered": {
                      "text": "END {print \"type=\"type; ORS=\"\\n\"; print \"\"}\n');\nfi\ntype=$(echo \"$out\" | grep '^type=' | cut -d '=' -f 2)\n\n# If type is not set by now, either we don't have a block device\n# or smartctl failed. Either way, default to ATA and set $out to\n",
                      "markdown": "`END {print \"type=\"type; ORS=\"\\n\"; print \"\"}\n');\nfi\ntype=$(echo \"$out\" | grep '^type=' | cut -d '=' -f 2)\n\n# If type is not set by now, either we don't have a block device\n# or smartctl failed. Either way, default to ATA and set $out to\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/serial"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 24,
                  "endLine": 103,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\t# NVMe:\n\t#       SMART/Health Information (NVMe Log 0xnn, NSID 0xnn)\n\t#\n\tout=$(echo \"$raw_out\" | awk '\n# SAS specific\n/read:/{print \"rrd=\"$4\"\\nr_cor=\"$5\"\\nr_proc=\"$7\"\\nr_ucor=\"$8}\n/write:/{print \"rwr=\"$4\"\\nw_cor=\"$5\"\\nw_proc=\"$7\"\\nw_ucor=\"$8}\n",
                    "rendered": {
                      "text": "\t# NVMe:\n\t#       SMART/Health Information (NVMe Log 0xnn, NSID 0xnn)\n\t#\n\tout=$(echo \"$raw_out\" | awk '\n# SAS specific\n/read:/{print \"rrd=\"$4\"\\nr_cor=\"$5\"\\nr_proc=\"$7\"\\nr_ucor=\"$8}\n/write:/{print \"rwr=\"$4\"\\nw_cor=\"$5\"\\nw_proc=\"$7\"\\nw_ucor=\"$8}\n",
                      "markdown": "`\t# NVMe:\n\t#       SMART/Health Information (NVMe Log 0xnn, NSID 0xnn)\n\t#\n\tout=$(echo \"$raw_out\" | awk '\n# SAS specific\n/read:/{print \"rrd=\"$4\"\\nr_cor=\"$5\"\\nr_proc=\"$7\"\\nr_ucor=\"$8}\n/write:/{print \"rwr=\"$4\"\\nw_cor=\"$5\"\\nw_proc=\"$7\"\\nw_ucor=\"$8}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/serial"
                },
                "region": {
                  "startLine": 83,
                  "startColumn": 3,
                  "endLine": 83,
                  "endColumn": 8,
                  "snippet": {
                    "text": "\nif [ -b \"$somepath\" ] && PATH=\"/usr/sbin:$PATH\" command -v smartctl > /dev/null || [ -n \"$samples\" ] ; then\n\tif [ -n \"$samples\" ] ; then\n\t\t# cat a smartctl output text file instead of running smartctl\n\t\t# on a vdev (only used for developer testing).\n\t\tfile=$(get_filename_from_dir \"$samples\")\n\t\techo \"file=$file\"\n",
                    "rendered": {
                      "text": "\nif [ -b \"$somepath\" ] && PATH=\"/usr/sbin:$PATH\" command -v smartctl > /dev/null || [ -n \"$samples\" ] ; then\n\tif [ -n \"$samples\" ] ; then\n\t\t# cat a smartctl output text file instead of running smartctl\n\t\t# on a vdev (only used for developer testing).\n\t\tfile=$(get_filename_from_dir \"$samples\")\n\t\techo \"file=$file\"\n",
                      "markdown": "`\nif [ -b \"$somepath\" ] && PATH=\"/usr/sbin:$PATH\" command -v smartctl > /dev/null || [ -n \"$samples\" ] ; then\n\tif [ -n \"$samples\" ] ; then\n\t\t# cat a smartctl output text file instead of running smartctl\n\t\t# on a vdev (only used for developer testing).\n\t\tfile=$(get_filename_from_dir \"$samples\")\n\t\techo \"file=$file\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/serial"
                },
                "region": {
                  "startLine": 68,
                  "startColumn": 56,
                  "endLine": 68,
                  "endColumn": 61,
                  "snippet": {
                    "text": "script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n",
                    "rendered": {
                      "text": "script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n",
                      "markdown": "`script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/serial"
                },
                "region": {
                  "startLine": 68,
                  "startColumn": 25,
                  "endLine": 68,
                  "endColumn": 31,
                  "snippet": {
                    "text": "script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n",
                    "rendered": {
                      "text": "script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n",
                      "markdown": "`script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/serial"
                },
                "region": {
                  "startLine": 56,
                  "endLine": 56,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\tnum_files=$(find \"$dir\" -maxdepth 1 -type f | wc -l)\n\tmod=$((pid % num_files))\n\ti=0\n\tfind \"$dir\" -type f -printf '%f\\n' | while read -r file ; do\n\t\tif [ \"$mod\" = \"$i\" ] ; then\n\t\t\techo \"$file\"\n\t\t\tbreak\n",
                    "rendered": {
                      "text": "\tnum_files=$(find \"$dir\" -maxdepth 1 -type f | wc -l)\n\tmod=$((pid % num_files))\n\ti=0\n\tfind \"$dir\" -type f -printf '%f\\n' | while read -r file ; do\n\t\tif [ \"$mod\" = \"$i\" ] ; then\n\t\t\techo \"$file\"\n\t\t\tbreak\n",
                      "markdown": "`\tnum_files=$(find \"$dir\" -maxdepth 1 -type f | wc -l)\n\tmod=$((pid % num_files))\n\ti=0\n\tfind \"$dir\" -type f -printf '%f\\n' | while read -r file ; do\n\t\tif [ \"$mod\" = \"$i\" ] ; then\n\t\t\techo \"$file\"\n\t\t\tbreak\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/serial"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 38,
                  "endLine": 47,
                  "endColumn": 46,
                  "snippet": {
                    "text": "#\n# Look in directory DIR and return a filename from it.  The filename returned\n# is chosen quasi-sequentially (based off our PID).  This allows us to return\n# a different filename every time this script is invoked (which we do for each\n# vdev), without having to maintain state.\nget_filename_from_dir()\n{\n",
                    "rendered": {
                      "text": "#\n# Look in directory DIR and return a filename from it.  The filename returned\n# is chosen quasi-sequentially (based off our PID).  This allows us to return\n# a different filename every time this script is invoked (which we do for each\n# vdev), without having to maintain state.\nget_filename_from_dir()\n{\n",
                      "markdown": "`#\n# Look in directory DIR and return a filename from it.  The filename returned\n# is chosen quasi-sequentially (based off our PID).  This allows us to return\n# a different filename every time this script is invoked (which we do for each\n# vdev), without having to maintain state.\nget_filename_from_dir()\n{\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/serial"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 28,
                  "endLine": 47,
                  "endColumn": 34,
                  "snippet": {
                    "text": "#\n# Look in directory DIR and return a filename from it.  The filename returned\n# is chosen quasi-sequentially (based off our PID).  This allows us to return\n# a different filename every time this script is invoked (which we do for each\n# vdev), without having to maintain state.\nget_filename_from_dir()\n{\n",
                    "rendered": {
                      "text": "#\n# Look in directory DIR and return a filename from it.  The filename returned\n# is chosen quasi-sequentially (based off our PID).  This allows us to return\n# a different filename every time this script is invoked (which we do for each\n# vdev), without having to maintain state.\nget_filename_from_dir()\n{\n",
                      "markdown": "`#\n# Look in directory DIR and return a filename from it.  The filename returned\n# is chosen quasi-sequentially (based off our PID).  This allows us to return\n# a different filename every time this script is invoked (which we do for each\n# vdev), without having to maintain state.\nget_filename_from_dir()\n{\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/serial"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 27,
                  "endLine": 20,
                  "endColumn": 36,
                  "snippet": {
                    "text": "hours_on:\tShow number of hours drive powered on (all drives).\nrealloc:\tShow SMART reallocated sectors count (ATA).\nrep_ucor:\tShow SMART reported uncorrectable count (ATA).\ncmd_to:\t\tShow SMART command timeout count (ATA).\npend_sec:\tShow SMART current pending sector count (ATA).\noff_ucor:\tShow SMART offline uncorrectable errors (ATA).\nata_err:\tShow SMART ATA errors (ATA).\n",
                    "rendered": {
                      "text": "hours_on:\tShow number of hours drive powered on (all drives).\nrealloc:\tShow SMART reallocated sectors count (ATA).\nrep_ucor:\tShow SMART reported uncorrectable count (ATA).\ncmd_to:\t\tShow SMART command timeout count (ATA).\npend_sec:\tShow SMART current pending sector count (ATA).\noff_ucor:\tShow SMART offline uncorrectable errors (ATA).\nata_err:\tShow SMART ATA errors (ATA).\n",
                      "markdown": "`hours_on:\tShow number of hours drive powered on (all drives).\nrealloc:\tShow SMART reallocated sectors count (ATA).\nrep_ucor:\tShow SMART reported uncorrectable count (ATA).\ncmd_to:\t\tShow SMART command timeout count (ATA).\npend_sec:\tShow SMART current pending sector count (ATA).\noff_ucor:\tShow SMART offline uncorrectable errors (ATA).\nata_err:\tShow SMART ATA errors (ATA).\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/rep_ucor"
                },
                "region": {
                  "startLine": 244,
                  "startColumn": 47,
                  "endLine": 244,
                  "endColumn": 52,
                  "snippet": {
                    "text": "\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n\nif [ -n \"$without_vals\" ]; then\n",
                    "rendered": {
                      "text": "\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n\nif [ -n \"$without_vals\" ]; then\n",
                      "markdown": "`\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n\nif [ -n \"$without_vals\" ]; then\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/rep_ucor"
                },
                "region": {
                  "startLine": 242,
                  "startColumn": 29,
                  "endLine": 242,
                  "endColumn": 34,
                  "snippet": {
                    "text": "\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n",
                    "rendered": {
                      "text": "\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n",
                      "markdown": "`\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/rep_ucor"
                },
                "region": {
                  "startLine": 242,
                  "startColumn": 1,
                  "endLine": 242,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n",
                    "rendered": {
                      "text": "\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n",
                      "markdown": "`\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/rep_ucor"
                },
                "region": {
                  "startLine": 241,
                  "startColumn": 1,
                  "endLine": 241,
                  "endColumn": 7,
                  "snippet": {
                    "text": "if [ -n \"$with_vals\" ]; then\n\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\n",
                    "rendered": {
                      "text": "if [ -n \"$with_vals\" ]; then\n\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\n",
                      "markdown": "`if [ -n \"$with_vals\" ]; then\n\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/rep_ucor"
                },
                "region": {
                  "startLine": 237,
                  "startColumn": 25,
                  "endLine": 237,
                  "endColumn": 31,
                  "snippet": {
                    "text": "\tscripts=\"$script\"\nesac\n\nwith_vals=$(echo \"$out\" | grep -E \"$scripts\")\nif [ -n \"$with_vals\" ]; then\n\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n",
                    "rendered": {
                      "text": "\tscripts=\"$script\"\nesac\n\nwith_vals=$(echo \"$out\" | grep -E \"$scripts\")\nif [ -n \"$with_vals\" ]; then\n\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n",
                      "markdown": "`\tscripts=\"$script\"\nesac\n\nwith_vals=$(echo \"$out\" | grep -E \"$scripts\")\nif [ -n \"$with_vals\" ]; then\n\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/rep_ucor"
                },
                "region": {
                  "startLine": 199,
                  "startColumn": 36,
                  "endLine": 199,
                  "endColumn": 41,
                  "snippet": {
                    "text": "END {print \"type=\"type; ORS=\"\\n\"; print \"\"}\n');\nfi\ntype=$(echo \"$out\" | grep '^type=' | cut -d '=' -f 2)\n\n# If type is not set by now, either we don't have a block device\n# or smartctl failed. Either way, default to ATA and set $out to\n",
                    "rendered": {
                      "text": "END {print \"type=\"type; ORS=\"\\n\"; print \"\"}\n');\nfi\ntype=$(echo \"$out\" | grep '^type=' | cut -d '=' -f 2)\n\n# If type is not set by now, either we don't have a block device\n# or smartctl failed. Either way, default to ATA and set $out to\n",
                      "markdown": "`END {print \"type=\"type; ORS=\"\\n\"; print \"\"}\n');\nfi\ntype=$(echo \"$out\" | grep '^type=' | cut -d '=' -f 2)\n\n# If type is not set by now, either we don't have a block device\n# or smartctl failed. Either way, default to ATA and set $out to\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/rep_ucor"
                },
                "region": {
                  "startLine": 199,
                  "startColumn": 20,
                  "endLine": 199,
                  "endColumn": 26,
                  "snippet": {
                    "text": "END {print \"type=\"type; ORS=\"\\n\"; print \"\"}\n');\nfi\ntype=$(echo \"$out\" | grep '^type=' | cut -d '=' -f 2)\n\n# If type is not set by now, either we don't have a block device\n# or smartctl failed. Either way, default to ATA and set $out to\n",
                    "rendered": {
                      "text": "END {print \"type=\"type; ORS=\"\\n\"; print \"\"}\n');\nfi\ntype=$(echo \"$out\" | grep '^type=' | cut -d '=' -f 2)\n\n# If type is not set by now, either we don't have a block device\n# or smartctl failed. Either way, default to ATA and set $out to\n",
                      "markdown": "`END {print \"type=\"type; ORS=\"\\n\"; print \"\"}\n');\nfi\ntype=$(echo \"$out\" | grep '^type=' | cut -d '=' -f 2)\n\n# If type is not set by now, either we don't have a block device\n# or smartctl failed. Either way, default to ATA and set $out to\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/rep_ucor"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 24,
                  "endLine": 103,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\t# NVMe:\n\t#       SMART/Health Information (NVMe Log 0xnn, NSID 0xnn)\n\t#\n\tout=$(echo \"$raw_out\" | awk '\n# SAS specific\n/read:/{print \"rrd=\"$4\"\\nr_cor=\"$5\"\\nr_proc=\"$7\"\\nr_ucor=\"$8}\n/write:/{print \"rwr=\"$4\"\\nw_cor=\"$5\"\\nw_proc=\"$7\"\\nw_ucor=\"$8}\n",
                    "rendered": {
                      "text": "\t# NVMe:\n\t#       SMART/Health Information (NVMe Log 0xnn, NSID 0xnn)\n\t#\n\tout=$(echo \"$raw_out\" | awk '\n# SAS specific\n/read:/{print \"rrd=\"$4\"\\nr_cor=\"$5\"\\nr_proc=\"$7\"\\nr_ucor=\"$8}\n/write:/{print \"rwr=\"$4\"\\nw_cor=\"$5\"\\nw_proc=\"$7\"\\nw_ucor=\"$8}\n",
                      "markdown": "`\t# NVMe:\n\t#       SMART/Health Information (NVMe Log 0xnn, NSID 0xnn)\n\t#\n\tout=$(echo \"$raw_out\" | awk '\n# SAS specific\n/read:/{print \"rrd=\"$4\"\\nr_cor=\"$5\"\\nr_proc=\"$7\"\\nr_ucor=\"$8}\n/write:/{print \"rwr=\"$4\"\\nw_cor=\"$5\"\\nw_proc=\"$7\"\\nw_ucor=\"$8}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/rep_ucor"
                },
                "region": {
                  "startLine": 83,
                  "startColumn": 3,
                  "endLine": 83,
                  "endColumn": 8,
                  "snippet": {
                    "text": "\nif [ -b \"$somepath\" ] && PATH=\"/usr/sbin:$PATH\" command -v smartctl > /dev/null || [ -n \"$samples\" ] ; then\n\tif [ -n \"$samples\" ] ; then\n\t\t# cat a smartctl output text file instead of running smartctl\n\t\t# on a vdev (only used for developer testing).\n\t\tfile=$(get_filename_from_dir \"$samples\")\n\t\techo \"file=$file\"\n",
                    "rendered": {
                      "text": "\nif [ -b \"$somepath\" ] && PATH=\"/usr/sbin:$PATH\" command -v smartctl > /dev/null || [ -n \"$samples\" ] ; then\n\tif [ -n \"$samples\" ] ; then\n\t\t# cat a smartctl output text file instead of running smartctl\n\t\t# on a vdev (only used for developer testing).\n\t\tfile=$(get_filename_from_dir \"$samples\")\n\t\techo \"file=$file\"\n",
                      "markdown": "`\nif [ -b \"$somepath\" ] && PATH=\"/usr/sbin:$PATH\" command -v smartctl > /dev/null || [ -n \"$samples\" ] ; then\n\tif [ -n \"$samples\" ] ; then\n\t\t# cat a smartctl output text file instead of running smartctl\n\t\t# on a vdev (only used for developer testing).\n\t\tfile=$(get_filename_from_dir \"$samples\")\n\t\techo \"file=$file\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/rep_ucor"
                },
                "region": {
                  "startLine": 68,
                  "startColumn": 56,
                  "endLine": 68,
                  "endColumn": 61,
                  "snippet": {
                    "text": "script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n",
                    "rendered": {
                      "text": "script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n",
                      "markdown": "`script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/rep_ucor"
                },
                "region": {
                  "startLine": 68,
                  "startColumn": 25,
                  "endLine": 68,
                  "endColumn": 31,
                  "snippet": {
                    "text": "script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n",
                    "rendered": {
                      "text": "script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n",
                      "markdown": "`script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/rep_ucor"
                },
                "region": {
                  "startLine": 56,
                  "endLine": 56,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\tnum_files=$(find \"$dir\" -maxdepth 1 -type f | wc -l)\n\tmod=$((pid % num_files))\n\ti=0\n\tfind \"$dir\" -type f -printf '%f\\n' | while read -r file ; do\n\t\tif [ \"$mod\" = \"$i\" ] ; then\n\t\t\techo \"$file\"\n\t\t\tbreak\n",
                    "rendered": {
                      "text": "\tnum_files=$(find \"$dir\" -maxdepth 1 -type f | wc -l)\n\tmod=$((pid % num_files))\n\ti=0\n\tfind \"$dir\" -type f -printf '%f\\n' | while read -r file ; do\n\t\tif [ \"$mod\" = \"$i\" ] ; then\n\t\t\techo \"$file\"\n\t\t\tbreak\n",
                      "markdown": "`\tnum_files=$(find \"$dir\" -maxdepth 1 -type f | wc -l)\n\tmod=$((pid % num_files))\n\ti=0\n\tfind \"$dir\" -type f -printf '%f\\n' | while read -r file ; do\n\t\tif [ \"$mod\" = \"$i\" ] ; then\n\t\t\techo \"$file\"\n\t\t\tbreak\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/rep_ucor"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 38,
                  "endLine": 47,
                  "endColumn": 46,
                  "snippet": {
                    "text": "#\n# Look in directory DIR and return a filename from it.  The filename returned\n# is chosen quasi-sequentially (based off our PID).  This allows us to return\n# a different filename every time this script is invoked (which we do for each\n# vdev), without having to maintain state.\nget_filename_from_dir()\n{\n",
                    "rendered": {
                      "text": "#\n# Look in directory DIR and return a filename from it.  The filename returned\n# is chosen quasi-sequentially (based off our PID).  This allows us to return\n# a different filename every time this script is invoked (which we do for each\n# vdev), without having to maintain state.\nget_filename_from_dir()\n{\n",
                      "markdown": "`#\n# Look in directory DIR and return a filename from it.  The filename returned\n# is chosen quasi-sequentially (based off our PID).  This allows us to return\n# a different filename every time this script is invoked (which we do for each\n# vdev), without having to maintain state.\nget_filename_from_dir()\n{\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/rep_ucor"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 28,
                  "endLine": 47,
                  "endColumn": 34,
                  "snippet": {
                    "text": "#\n# Look in directory DIR and return a filename from it.  The filename returned\n# is chosen quasi-sequentially (based off our PID).  This allows us to return\n# a different filename every time this script is invoked (which we do for each\n# vdev), without having to maintain state.\nget_filename_from_dir()\n{\n",
                    "rendered": {
                      "text": "#\n# Look in directory DIR and return a filename from it.  The filename returned\n# is chosen quasi-sequentially (based off our PID).  This allows us to return\n# a different filename every time this script is invoked (which we do for each\n# vdev), without having to maintain state.\nget_filename_from_dir()\n{\n",
                      "markdown": "`#\n# Look in directory DIR and return a filename from it.  The filename returned\n# is chosen quasi-sequentially (based off our PID).  This allows us to return\n# a different filename every time this script is invoked (which we do for each\n# vdev), without having to maintain state.\nget_filename_from_dir()\n{\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/rep_ucor"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 27,
                  "endLine": 20,
                  "endColumn": 36,
                  "snippet": {
                    "text": "hours_on:\tShow number of hours drive powered on (all drives).\nrealloc:\tShow SMART reallocated sectors count (ATA).\nrep_ucor:\tShow SMART reported uncorrectable count (ATA).\ncmd_to:\t\tShow SMART command timeout count (ATA).\npend_sec:\tShow SMART current pending sector count (ATA).\noff_ucor:\tShow SMART offline uncorrectable errors (ATA).\nata_err:\tShow SMART ATA errors (ATA).\n",
                    "rendered": {
                      "text": "hours_on:\tShow number of hours drive powered on (all drives).\nrealloc:\tShow SMART reallocated sectors count (ATA).\nrep_ucor:\tShow SMART reported uncorrectable count (ATA).\ncmd_to:\t\tShow SMART command timeout count (ATA).\npend_sec:\tShow SMART current pending sector count (ATA).\noff_ucor:\tShow SMART offline uncorrectable errors (ATA).\nata_err:\tShow SMART ATA errors (ATA).\n",
                      "markdown": "`hours_on:\tShow number of hours drive powered on (all drives).\nrealloc:\tShow SMART reallocated sectors count (ATA).\nrep_ucor:\tShow SMART reported uncorrectable count (ATA).\ncmd_to:\t\tShow SMART command timeout count (ATA).\npend_sec:\tShow SMART current pending sector count (ATA).\noff_ucor:\tShow SMART offline uncorrectable errors (ATA).\nata_err:\tShow SMART ATA errors (ATA).\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/realloc"
                },
                "region": {
                  "startLine": 244,
                  "startColumn": 47,
                  "endLine": 244,
                  "endColumn": 52,
                  "snippet": {
                    "text": "\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n\nif [ -n \"$without_vals\" ]; then\n",
                    "rendered": {
                      "text": "\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n\nif [ -n \"$without_vals\" ]; then\n",
                      "markdown": "`\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n\nif [ -n \"$without_vals\" ]; then\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/realloc"
                },
                "region": {
                  "startLine": 242,
                  "startColumn": 29,
                  "endLine": 242,
                  "endColumn": 34,
                  "snippet": {
                    "text": "\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n",
                    "rendered": {
                      "text": "\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n",
                      "markdown": "`\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/realloc"
                },
                "region": {
                  "startLine": 242,
                  "startColumn": 1,
                  "endLine": 242,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n",
                    "rendered": {
                      "text": "\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n",
                      "markdown": "`\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/realloc"
                },
                "region": {
                  "startLine": 241,
                  "startColumn": 1,
                  "endLine": 241,
                  "endColumn": 7,
                  "snippet": {
                    "text": "if [ -n \"$with_vals\" ]; then\n\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\n",
                    "rendered": {
                      "text": "if [ -n \"$with_vals\" ]; then\n\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\n",
                      "markdown": "`if [ -n \"$with_vals\" ]; then\n\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/realloc"
                },
                "region": {
                  "startLine": 237,
                  "startColumn": 25,
                  "endLine": 237,
                  "endColumn": 31,
                  "snippet": {
                    "text": "\tscripts=\"$script\"\nesac\n\nwith_vals=$(echo \"$out\" | grep -E \"$scripts\")\nif [ -n \"$with_vals\" ]; then\n\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n",
                    "rendered": {
                      "text": "\tscripts=\"$script\"\nesac\n\nwith_vals=$(echo \"$out\" | grep -E \"$scripts\")\nif [ -n \"$with_vals\" ]; then\n\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n",
                      "markdown": "`\tscripts=\"$script\"\nesac\n\nwith_vals=$(echo \"$out\" | grep -E \"$scripts\")\nif [ -n \"$with_vals\" ]; then\n\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/realloc"
                },
                "region": {
                  "startLine": 199,
                  "startColumn": 36,
                  "endLine": 199,
                  "endColumn": 41,
                  "snippet": {
                    "text": "END {print \"type=\"type; ORS=\"\\n\"; print \"\"}\n');\nfi\ntype=$(echo \"$out\" | grep '^type=' | cut -d '=' -f 2)\n\n# If type is not set by now, either we don't have a block device\n# or smartctl failed. Either way, default to ATA and set $out to\n",
                    "rendered": {
                      "text": "END {print \"type=\"type; ORS=\"\\n\"; print \"\"}\n');\nfi\ntype=$(echo \"$out\" | grep '^type=' | cut -d '=' -f 2)\n\n# If type is not set by now, either we don't have a block device\n# or smartctl failed. Either way, default to ATA and set $out to\n",
                      "markdown": "`END {print \"type=\"type; ORS=\"\\n\"; print \"\"}\n');\nfi\ntype=$(echo \"$out\" | grep '^type=' | cut -d '=' -f 2)\n\n# If type is not set by now, either we don't have a block device\n# or smartctl failed. Either way, default to ATA and set $out to\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/realloc"
                },
                "region": {
                  "startLine": 199,
                  "startColumn": 20,
                  "endLine": 199,
                  "endColumn": 26,
                  "snippet": {
                    "text": "END {print \"type=\"type; ORS=\"\\n\"; print \"\"}\n');\nfi\ntype=$(echo \"$out\" | grep '^type=' | cut -d '=' -f 2)\n\n# If type is not set by now, either we don't have a block device\n# or smartctl failed. Either way, default to ATA and set $out to\n",
                    "rendered": {
                      "text": "END {print \"type=\"type; ORS=\"\\n\"; print \"\"}\n');\nfi\ntype=$(echo \"$out\" | grep '^type=' | cut -d '=' -f 2)\n\n# If type is not set by now, either we don't have a block device\n# or smartctl failed. Either way, default to ATA and set $out to\n",
                      "markdown": "`END {print \"type=\"type; ORS=\"\\n\"; print \"\"}\n');\nfi\ntype=$(echo \"$out\" | grep '^type=' | cut -d '=' -f 2)\n\n# If type is not set by now, either we don't have a block device\n# or smartctl failed. Either way, default to ATA and set $out to\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/realloc"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 24,
                  "endLine": 103,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\t# NVMe:\n\t#       SMART/Health Information (NVMe Log 0xnn, NSID 0xnn)\n\t#\n\tout=$(echo \"$raw_out\" | awk '\n# SAS specific\n/read:/{print \"rrd=\"$4\"\\nr_cor=\"$5\"\\nr_proc=\"$7\"\\nr_ucor=\"$8}\n/write:/{print \"rwr=\"$4\"\\nw_cor=\"$5\"\\nw_proc=\"$7\"\\nw_ucor=\"$8}\n",
                    "rendered": {
                      "text": "\t# NVMe:\n\t#       SMART/Health Information (NVMe Log 0xnn, NSID 0xnn)\n\t#\n\tout=$(echo \"$raw_out\" | awk '\n# SAS specific\n/read:/{print \"rrd=\"$4\"\\nr_cor=\"$5\"\\nr_proc=\"$7\"\\nr_ucor=\"$8}\n/write:/{print \"rwr=\"$4\"\\nw_cor=\"$5\"\\nw_proc=\"$7\"\\nw_ucor=\"$8}\n",
                      "markdown": "`\t# NVMe:\n\t#       SMART/Health Information (NVMe Log 0xnn, NSID 0xnn)\n\t#\n\tout=$(echo \"$raw_out\" | awk '\n# SAS specific\n/read:/{print \"rrd=\"$4\"\\nr_cor=\"$5\"\\nr_proc=\"$7\"\\nr_ucor=\"$8}\n/write:/{print \"rwr=\"$4\"\\nw_cor=\"$5\"\\nw_proc=\"$7\"\\nw_ucor=\"$8}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/realloc"
                },
                "region": {
                  "startLine": 83,
                  "startColumn": 3,
                  "endLine": 83,
                  "endColumn": 8,
                  "snippet": {
                    "text": "\nif [ -b \"$somepath\" ] && PATH=\"/usr/sbin:$PATH\" command -v smartctl > /dev/null || [ -n \"$samples\" ] ; then\n\tif [ -n \"$samples\" ] ; then\n\t\t# cat a smartctl output text file instead of running smartctl\n\t\t# on a vdev (only used for developer testing).\n\t\tfile=$(get_filename_from_dir \"$samples\")\n\t\techo \"file=$file\"\n",
                    "rendered": {
                      "text": "\nif [ -b \"$somepath\" ] && PATH=\"/usr/sbin:$PATH\" command -v smartctl > /dev/null || [ -n \"$samples\" ] ; then\n\tif [ -n \"$samples\" ] ; then\n\t\t# cat a smartctl output text file instead of running smartctl\n\t\t# on a vdev (only used for developer testing).\n\t\tfile=$(get_filename_from_dir \"$samples\")\n\t\techo \"file=$file\"\n",
                      "markdown": "`\nif [ -b \"$somepath\" ] && PATH=\"/usr/sbin:$PATH\" command -v smartctl > /dev/null || [ -n \"$samples\" ] ; then\n\tif [ -n \"$samples\" ] ; then\n\t\t# cat a smartctl output text file instead of running smartctl\n\t\t# on a vdev (only used for developer testing).\n\t\tfile=$(get_filename_from_dir \"$samples\")\n\t\techo \"file=$file\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/realloc"
                },
                "region": {
                  "startLine": 68,
                  "startColumn": 56,
                  "endLine": 68,
                  "endColumn": 61,
                  "snippet": {
                    "text": "script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n",
                    "rendered": {
                      "text": "script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n",
                      "markdown": "`script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/realloc"
                },
                "region": {
                  "startLine": 68,
                  "startColumn": 25,
                  "endLine": 68,
                  "endColumn": 31,
                  "snippet": {
                    "text": "script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n",
                    "rendered": {
                      "text": "script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n",
                      "markdown": "`script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/realloc"
                },
                "region": {
                  "startLine": 56,
                  "endLine": 56,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\tnum_files=$(find \"$dir\" -maxdepth 1 -type f | wc -l)\n\tmod=$((pid % num_files))\n\ti=0\n\tfind \"$dir\" -type f -printf '%f\\n' | while read -r file ; do\n\t\tif [ \"$mod\" = \"$i\" ] ; then\n\t\t\techo \"$file\"\n\t\t\tbreak\n",
                    "rendered": {
                      "text": "\tnum_files=$(find \"$dir\" -maxdepth 1 -type f | wc -l)\n\tmod=$((pid % num_files))\n\ti=0\n\tfind \"$dir\" -type f -printf '%f\\n' | while read -r file ; do\n\t\tif [ \"$mod\" = \"$i\" ] ; then\n\t\t\techo \"$file\"\n\t\t\tbreak\n",
                      "markdown": "`\tnum_files=$(find \"$dir\" -maxdepth 1 -type f | wc -l)\n\tmod=$((pid % num_files))\n\ti=0\n\tfind \"$dir\" -type f -printf '%f\\n' | while read -r file ; do\n\t\tif [ \"$mod\" = \"$i\" ] ; then\n\t\t\techo \"$file\"\n\t\t\tbreak\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/realloc"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 38,
                  "endLine": 47,
                  "endColumn": 46,
                  "snippet": {
                    "text": "#\n# Look in directory DIR and return a filename from it.  The filename returned\n# is chosen quasi-sequentially (based off our PID).  This allows us to return\n# a different filename every time this script is invoked (which we do for each\n# vdev), without having to maintain state.\nget_filename_from_dir()\n{\n",
                    "rendered": {
                      "text": "#\n# Look in directory DIR and return a filename from it.  The filename returned\n# is chosen quasi-sequentially (based off our PID).  This allows us to return\n# a different filename every time this script is invoked (which we do for each\n# vdev), without having to maintain state.\nget_filename_from_dir()\n{\n",
                      "markdown": "`#\n# Look in directory DIR and return a filename from it.  The filename returned\n# is chosen quasi-sequentially (based off our PID).  This allows us to return\n# a different filename every time this script is invoked (which we do for each\n# vdev), without having to maintain state.\nget_filename_from_dir()\n{\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/realloc"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 28,
                  "endLine": 47,
                  "endColumn": 34,
                  "snippet": {
                    "text": "#\n# Look in directory DIR and return a filename from it.  The filename returned\n# is chosen quasi-sequentially (based off our PID).  This allows us to return\n# a different filename every time this script is invoked (which we do for each\n# vdev), without having to maintain state.\nget_filename_from_dir()\n{\n",
                    "rendered": {
                      "text": "#\n# Look in directory DIR and return a filename from it.  The filename returned\n# is chosen quasi-sequentially (based off our PID).  This allows us to return\n# a different filename every time this script is invoked (which we do for each\n# vdev), without having to maintain state.\nget_filename_from_dir()\n{\n",
                      "markdown": "`#\n# Look in directory DIR and return a filename from it.  The filename returned\n# is chosen quasi-sequentially (based off our PID).  This allows us to return\n# a different filename every time this script is invoked (which we do for each\n# vdev), without having to maintain state.\nget_filename_from_dir()\n{\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/realloc"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 27,
                  "endLine": 20,
                  "endColumn": 36,
                  "snippet": {
                    "text": "hours_on:\tShow number of hours drive powered on (all drives).\nrealloc:\tShow SMART reallocated sectors count (ATA).\nrep_ucor:\tShow SMART reported uncorrectable count (ATA).\ncmd_to:\t\tShow SMART command timeout count (ATA).\npend_sec:\tShow SMART current pending sector count (ATA).\noff_ucor:\tShow SMART offline uncorrectable errors (ATA).\nata_err:\tShow SMART ATA errors (ATA).\n",
                    "rendered": {
                      "text": "hours_on:\tShow number of hours drive powered on (all drives).\nrealloc:\tShow SMART reallocated sectors count (ATA).\nrep_ucor:\tShow SMART reported uncorrectable count (ATA).\ncmd_to:\t\tShow SMART command timeout count (ATA).\npend_sec:\tShow SMART current pending sector count (ATA).\noff_ucor:\tShow SMART offline uncorrectable errors (ATA).\nata_err:\tShow SMART ATA errors (ATA).\n",
                      "markdown": "`hours_on:\tShow number of hours drive powered on (all drives).\nrealloc:\tShow SMART reallocated sectors count (ATA).\nrep_ucor:\tShow SMART reported uncorrectable count (ATA).\ncmd_to:\t\tShow SMART command timeout count (ATA).\npend_sec:\tShow SMART current pending sector count (ATA).\noff_ucor:\tShow SMART offline uncorrectable errors (ATA).\nata_err:\tShow SMART ATA errors (ATA).\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/r_ucor"
                },
                "region": {
                  "startLine": 244,
                  "startColumn": 47,
                  "endLine": 244,
                  "endColumn": 52,
                  "snippet": {
                    "text": "\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n\nif [ -n \"$without_vals\" ]; then\n",
                    "rendered": {
                      "text": "\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n\nif [ -n \"$without_vals\" ]; then\n",
                      "markdown": "`\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n\nif [ -n \"$without_vals\" ]; then\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/r_ucor"
                },
                "region": {
                  "startLine": 242,
                  "startColumn": 29,
                  "endLine": 242,
                  "endColumn": 34,
                  "snippet": {
                    "text": "\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n",
                    "rendered": {
                      "text": "\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n",
                      "markdown": "`\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/r_ucor"
                },
                "region": {
                  "startLine": 242,
                  "startColumn": 1,
                  "endLine": 242,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n",
                    "rendered": {
                      "text": "\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n",
                      "markdown": "`\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/r_ucor"
                },
                "region": {
                  "startLine": 241,
                  "startColumn": 1,
                  "endLine": 241,
                  "endColumn": 7,
                  "snippet": {
                    "text": "if [ -n \"$with_vals\" ]; then\n\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\n",
                    "rendered": {
                      "text": "if [ -n \"$with_vals\" ]; then\n\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\n",
                      "markdown": "`if [ -n \"$with_vals\" ]; then\n\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n\t\tgrep -v -E \"$(echo \"$with_vals\" |\n\t\tawk -F \"=\" '{print $1}')\" | awk '{print $0\"=\"}')\nelse\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' | awk '{print $0\"=\"}')\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/r_ucor"
                },
                "region": {
                  "startLine": 237,
                  "startColumn": 25,
                  "endLine": 237,
                  "endColumn": 31,
                  "snippet": {
                    "text": "\tscripts=\"$script\"\nesac\n\nwith_vals=$(echo \"$out\" | grep -E \"$scripts\")\nif [ -n \"$with_vals\" ]; then\n\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n",
                    "rendered": {
                      "text": "\tscripts=\"$script\"\nesac\n\nwith_vals=$(echo \"$out\" | grep -E \"$scripts\")\nif [ -n \"$with_vals\" ]; then\n\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n",
                      "markdown": "`\tscripts=\"$script\"\nesac\n\nwith_vals=$(echo \"$out\" | grep -E \"$scripts\")\nif [ -n \"$with_vals\" ]; then\n\techo \"$with_vals\"\n\twithout_vals=$(echo \"$scripts\" | tr '|' '\\n' |\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/r_ucor"
                },
                "region": {
                  "startLine": 199,
                  "startColumn": 36,
                  "endLine": 199,
                  "endColumn": 41,
                  "snippet": {
                    "text": "END {print \"type=\"type; ORS=\"\\n\"; print \"\"}\n');\nfi\ntype=$(echo \"$out\" | grep '^type=' | cut -d '=' -f 2)\n\n# If type is not set by now, either we don't have a block device\n# or smartctl failed. Either way, default to ATA and set $out to\n",
                    "rendered": {
                      "text": "END {print \"type=\"type; ORS=\"\\n\"; print \"\"}\n');\nfi\ntype=$(echo \"$out\" | grep '^type=' | cut -d '=' -f 2)\n\n# If type is not set by now, either we don't have a block device\n# or smartctl failed. Either way, default to ATA and set $out to\n",
                      "markdown": "`END {print \"type=\"type; ORS=\"\\n\"; print \"\"}\n');\nfi\ntype=$(echo \"$out\" | grep '^type=' | cut -d '=' -f 2)\n\n# If type is not set by now, either we don't have a block device\n# or smartctl failed. Either way, default to ATA and set $out to\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/r_ucor"
                },
                "region": {
                  "startLine": 199,
                  "startColumn": 20,
                  "endLine": 199,
                  "endColumn": 26,
                  "snippet": {
                    "text": "END {print \"type=\"type; ORS=\"\\n\"; print \"\"}\n');\nfi\ntype=$(echo \"$out\" | grep '^type=' | cut -d '=' -f 2)\n\n# If type is not set by now, either we don't have a block device\n# or smartctl failed. Either way, default to ATA and set $out to\n",
                    "rendered": {
                      "text": "END {print \"type=\"type; ORS=\"\\n\"; print \"\"}\n');\nfi\ntype=$(echo \"$out\" | grep '^type=' | cut -d '=' -f 2)\n\n# If type is not set by now, either we don't have a block device\n# or smartctl failed. Either way, default to ATA and set $out to\n",
                      "markdown": "`END {print \"type=\"type; ORS=\"\\n\"; print \"\"}\n');\nfi\ntype=$(echo \"$out\" | grep '^type=' | cut -d '=' -f 2)\n\n# If type is not set by now, either we don't have a block device\n# or smartctl failed. Either way, default to ATA and set $out to\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/r_ucor"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 24,
                  "endLine": 103,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\t# NVMe:\n\t#       SMART/Health Information (NVMe Log 0xnn, NSID 0xnn)\n\t#\n\tout=$(echo \"$raw_out\" | awk '\n# SAS specific\n/read:/{print \"rrd=\"$4\"\\nr_cor=\"$5\"\\nr_proc=\"$7\"\\nr_ucor=\"$8}\n/write:/{print \"rwr=\"$4\"\\nw_cor=\"$5\"\\nw_proc=\"$7\"\\nw_ucor=\"$8}\n",
                    "rendered": {
                      "text": "\t# NVMe:\n\t#       SMART/Health Information (NVMe Log 0xnn, NSID 0xnn)\n\t#\n\tout=$(echo \"$raw_out\" | awk '\n# SAS specific\n/read:/{print \"rrd=\"$4\"\\nr_cor=\"$5\"\\nr_proc=\"$7\"\\nr_ucor=\"$8}\n/write:/{print \"rwr=\"$4\"\\nw_cor=\"$5\"\\nw_proc=\"$7\"\\nw_ucor=\"$8}\n",
                      "markdown": "`\t# NVMe:\n\t#       SMART/Health Information (NVMe Log 0xnn, NSID 0xnn)\n\t#\n\tout=$(echo \"$raw_out\" | awk '\n# SAS specific\n/read:/{print \"rrd=\"$4\"\\nr_cor=\"$5\"\\nr_proc=\"$7\"\\nr_ucor=\"$8}\n/write:/{print \"rwr=\"$4\"\\nw_cor=\"$5\"\\nw_proc=\"$7\"\\nw_ucor=\"$8}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/r_ucor"
                },
                "region": {
                  "startLine": 83,
                  "startColumn": 3,
                  "endLine": 83,
                  "endColumn": 8,
                  "snippet": {
                    "text": "\nif [ -b \"$somepath\" ] && PATH=\"/usr/sbin:$PATH\" command -v smartctl > /dev/null || [ -n \"$samples\" ] ; then\n\tif [ -n \"$samples\" ] ; then\n\t\t# cat a smartctl output text file instead of running smartctl\n\t\t# on a vdev (only used for developer testing).\n\t\tfile=$(get_filename_from_dir \"$samples\")\n\t\techo \"file=$file\"\n",
                    "rendered": {
                      "text": "\nif [ -b \"$somepath\" ] && PATH=\"/usr/sbin:$PATH\" command -v smartctl > /dev/null || [ -n \"$samples\" ] ; then\n\tif [ -n \"$samples\" ] ; then\n\t\t# cat a smartctl output text file instead of running smartctl\n\t\t# on a vdev (only used for developer testing).\n\t\tfile=$(get_filename_from_dir \"$samples\")\n\t\techo \"file=$file\"\n",
                      "markdown": "`\nif [ -b \"$somepath\" ] && PATH=\"/usr/sbin:$PATH\" command -v smartctl > /dev/null || [ -n \"$samples\" ] ; then\n\tif [ -n \"$samples\" ] ; then\n\t\t# cat a smartctl output text file instead of running smartctl\n\t\t# on a vdev (only used for developer testing).\n\t\tfile=$(get_filename_from_dir \"$samples\")\n\t\techo \"file=$file\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/r_ucor"
                },
                "region": {
                  "startLine": 68,
                  "startColumn": 56,
                  "endLine": 68,
                  "endColumn": 61,
                  "snippet": {
                    "text": "script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n",
                    "rendered": {
                      "text": "script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n",
                      "markdown": "`script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/r_ucor"
                },
                "region": {
                  "startLine": 68,
                  "startColumn": 25,
                  "endLine": 68,
                  "endColumn": 31,
                  "snippet": {
                    "text": "script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n",
                    "rendered": {
                      "text": "script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n",
                      "markdown": "`script=\"${0##*/}\"\n\nif [ \"$1\" = \"-h\" ] ; then\n        echo \"$helpstr\" | grep \"$script:\" | tr -s '\\t' | cut -f 2-\n        exit\nfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/r_ucor"
                },
                "region": {
                  "startLine": 56,
                  "endLine": 56,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\tnum_files=$(find \"$dir\" -maxdepth 1 -type f | wc -l)\n\tmod=$((pid % num_files))\n\ti=0\n\tfind \"$dir\" -type f -printf '%f\\n' | while read -r file ; do\n\t\tif [ \"$mod\" = \"$i\" ] ; then\n\t\t\techo \"$file\"\n\t\t\tbreak\n",
                    "rendered": {
                      "text": "\tnum_files=$(find \"$dir\" -maxdepth 1 -type f | wc -l)\n\tmod=$((pid % num_files))\n\ti=0\n\tfind \"$dir\" -type f -printf '%f\\n' | while read -r file ; do\n\t\tif [ \"$mod\" = \"$i\" ] ; then\n\t\t\techo \"$file\"\n\t\t\tbreak\n",
                      "markdown": "`\tnum_files=$(find \"$dir\" -maxdepth 1 -type f | wc -l)\n\tmod=$((pid % num_files))\n\ti=0\n\tfind \"$dir\" -type f -printf '%f\\n' | while read -r file ; do\n\t\tif [ \"$mod\" = \"$i\" ] ; then\n\t\t\techo \"$file\"\n\t\t\tbreak\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/r_ucor"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 38,
                  "endLine": 47,
                  "endColumn": 46,
                  "snippet": {
                    "text": "#\n# Look in directory DIR and return a filename from it.  The filename returned\n# is chosen quasi-sequentially (based off our PID).  This allows us to return\n# a different filename every time this script is invoked (which we do for each\n# vdev), without having to maintain state.\nget_filename_from_dir()\n{\n",
                    "rendered": {
                      "text": "#\n# Look in directory DIR and return a filename from it.  The filename returned\n# is chosen quasi-sequentially (based off our PID).  This allows us to return\n# a different filename every time this script is invoked (which we do for each\n# vdev), without having to maintain state.\nget_filename_from_dir()\n{\n",
                      "markdown": "`#\n# Look in directory DIR and return a filename from it.  The filename returned\n# is chosen quasi-sequentially (based off our PID).  This allows us to return\n# a different filename every time this script is invoked (which we do for each\n# vdev), without having to maintain state.\nget_filename_from_dir()\n{\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/r_ucor"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 28,
                  "endLine": 47,
                  "endColumn": 34,
                  "snippet": {
                    "text": "#\n# Look in directory DIR and return a filename from it.  The filename returned\n# is chosen quasi-sequentially (based off our PID).  This allows us to return\n# a different filename every time this script is invoked (which we do for each\n# vdev), without having to maintain state.\nget_filename_from_dir()\n{\n",
                    "rendered": {
                      "text": "#\n# Look in directory DIR and return a filename from it.  The filename returned\n# is chosen quasi-sequentially (based off our PID).  This allows us to return\n# a different filename every time this script is invoked (which we do for each\n# vdev), without having to maintain state.\nget_filename_from_dir()\n{\n",
                      "markdown": "`#\n# Look in directory DIR and return a filename from it.  The filename returned\n# is chosen quasi-sequentially (based off our PID).  This allows us to return\n# a different filename every time this script is invoked (which we do for each\n# vdev), without having to maintain state.\nget_filename_from_dir()\n{\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zpool.d/r_ucor"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 27,
                  "endLine": 20,
                  "endColumn": 36,
                  "snippet": {
                    "text": "hours_on:\tShow number of hours drive powered on (all drives).\nrealloc:\tShow SMART reallocated sectors count (ATA).\nrep_ucor:\tShow SMART reported uncorrectable count (ATA).\ncmd_to:\t\tShow SMART command timeout count (ATA).\npend_sec:\tShow SMART current pending sector count (ATA).\noff_ucor:\tShow SMART offline uncorrectable errors (ATA).\nata_err:\tShow SMART ATA errors (ATA).\n",
                    "rendered": {
                      "text": "hours_on:\tShow number of hours drive powered on (all drives).\nrealloc:\tShow SMART reallocated sectors count (ATA).\nrep_ucor:\tShow SMART reported uncorrectable count (ATA).\ncmd_to:\t\tShow SMART command timeout count (ATA).\npend_sec:\tShow SMART current pending sector count (ATA).\noff_ucor:\tShow SMART offline uncorrectable errors (ATA).\nata_err:\tShow SMART ATA errors (ATA).\n",
                      "markdown": "`hours_on:\tShow number of hours drive powered on (all drives).\nrealloc:\tShow SMART reallocated sectors count (ATA).\nrep_ucor:\tShow SMART reported uncorrectable count (ATA).\ncmd_to:\t\tShow SMART command timeout count (ATA).\npend_sec:\tShow SMART current pending sector count (ATA).\noff_ucor:\tShow SMART offline uncorrectable errors (ATA).\nata_err:\tShow SMART ATA errors (ATA).\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zed.d/history_event-zfs-list-cacher.sh"
                },
                "region": {
                  "startLine": 82,
                  "startColumn": 38,
                  "endLine": 82,
                  "endColumn": 43,
                  "snippet": {
                    "text": "sort \"${FSLIST_TMP}\" -o \"${FSLIST_TMP}\"\n\n# Don't modify the file if it hasn't changed\ndiff -q \"${FSLIST_TMP}\" \"${FSLIST}\" || cat \"${FSLIST_TMP}\" > \"${FSLIST}\"\nrm -f \"${FSLIST_TMP}\"\n\nfinished\n",
                    "rendered": {
                      "text": "sort \"${FSLIST_TMP}\" -o \"${FSLIST_TMP}\"\n\n# Don't modify the file if it hasn't changed\ndiff -q \"${FSLIST_TMP}\" \"${FSLIST}\" || cat \"${FSLIST_TMP}\" > \"${FSLIST}\"\nrm -f \"${FSLIST_TMP}\"\n\nfinished\n",
                      "markdown": "`sort \"${FSLIST_TMP}\" -o \"${FSLIST_TMP}\"\n\n# Don't modify the file if it hasn't changed\ndiff -q \"${FSLIST_TMP}\" \"${FSLIST}\" || cat \"${FSLIST_TMP}\" > \"${FSLIST}\"\nrm -f \"${FSLIST_TMP}\"\n\nfinished\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zed.d/history_event-zfs-list-cacher.sh"
                },
                "region": {
                  "startLine": 81,
                  "startColumn": 44,
                  "endLine": 82,
                  "endColumn": 5,
                  "snippet": {
                    "text": "# Sort the output so that it is stable\nsort \"${FSLIST_TMP}\" -o \"${FSLIST_TMP}\"\n\n# Don't modify the file if it hasn't changed\ndiff -q \"${FSLIST_TMP}\" \"${FSLIST}\" || cat \"${FSLIST_TMP}\" > \"${FSLIST}\"\nrm -f \"${FSLIST_TMP}\"\n\nfinished\n",
                    "rendered": {
                      "text": "# Sort the output so that it is stable\nsort \"${FSLIST_TMP}\" -o \"${FSLIST_TMP}\"\n\n# Don't modify the file if it hasn't changed\ndiff -q \"${FSLIST_TMP}\" \"${FSLIST}\" || cat \"${FSLIST_TMP}\" > \"${FSLIST}\"\nrm -f \"${FSLIST_TMP}\"\n\nfinished\n",
                      "markdown": "`# Sort the output so that it is stable\nsort \"${FSLIST_TMP}\" -o \"${FSLIST_TMP}\"\n\n# Don't modify the file if it hasn't changed\ndiff -q \"${FSLIST_TMP}\" \"${FSLIST}\" || cat \"${FSLIST_TMP}\" > \"${FSLIST}\"\nrm -f \"${FSLIST_TMP}\"\n\nfinished\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zed.d/history_event-zfs-list-cacher.sh"
                },
                "region": {
                  "startLine": 78,
                  "startColumn": 38,
                  "endLine": 79,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\n\"${ZFS}\" list -H -t filesystem -o \"${PROPS}\" -r \"${ZEVENT_POOL}\" > \"${FSLIST_TMP}\"\n\n# Sort the output so that it is stable\nsort \"${FSLIST_TMP}\" -o \"${FSLIST_TMP}\"\n\n# Don't modify the file if it hasn't changed\ndiff -q \"${FSLIST_TMP}\" \"${FSLIST}\" || cat \"${FSLIST_TMP}\" > \"${FSLIST}\"\n",
                    "rendered": {
                      "text": "\n\"${ZFS}\" list -H -t filesystem -o \"${PROPS}\" -r \"${ZEVENT_POOL}\" > \"${FSLIST_TMP}\"\n\n# Sort the output so that it is stable\nsort \"${FSLIST_TMP}\" -o \"${FSLIST_TMP}\"\n\n# Don't modify the file if it hasn't changed\ndiff -q \"${FSLIST_TMP}\" \"${FSLIST}\" || cat \"${FSLIST_TMP}\" > \"${FSLIST}\"\n",
                      "markdown": "`\n\"${ZFS}\" list -H -t filesystem -o \"${PROPS}\" -r \"${ZEVENT_POOL}\" > \"${FSLIST_TMP}\"\n\n# Sort the output so that it is stable\nsort \"${FSLIST_TMP}\" -o \"${FSLIST_TMP}\"\n\n# Don't modify the file if it hasn't changed\ndiff -q \"${FSLIST_TMP}\" \"${FSLIST}\" || cat \"${FSLIST_TMP}\" > \"${FSLIST}\"\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zed.d/history_event-zfs-list-cacher.sh"
                },
                "region": {
                  "startLine": 78,
                  "startColumn": 1,
                  "endLine": 78,
                  "endColumn": 7,
                  "snippet": {
                    "text": "\n\"${ZFS}\" list -H -t filesystem -o \"${PROPS}\" -r \"${ZEVENT_POOL}\" > \"${FSLIST_TMP}\"\n\n# Sort the output so that it is stable\nsort \"${FSLIST_TMP}\" -o \"${FSLIST_TMP}\"\n\n# Don't modify the file if it hasn't changed\n",
                    "rendered": {
                      "text": "\n\"${ZFS}\" list -H -t filesystem -o \"${PROPS}\" -r \"${ZEVENT_POOL}\" > \"${FSLIST_TMP}\"\n\n# Sort the output so that it is stable\nsort \"${FSLIST_TMP}\" -o \"${FSLIST_TMP}\"\n\n# Don't modify the file if it hasn't changed\n",
                      "markdown": "`\n\"${ZFS}\" list -H -t filesystem -o \"${PROPS}\" -r \"${ZEVENT_POOL}\" > \"${FSLIST_TMP}\"\n\n# Sort the output so that it is stable\nsort \"${FSLIST_TMP}\" -o \"${FSLIST_TMP}\"\n\n# Don't modify the file if it hasn't changed\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zed.d/history_event-zfs-list-cacher.sh"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 22,
                  "endLine": 17,
                  "endColumn": 28,
                  "snippet": {
                    "text": ". \"${ZED_ZEDLET_DIR}/zed-functions.sh\"\n\n[ \"$ZEVENT_SUBCLASS\" != \"history_event\" ] && exit 0\nzed_check_cmd \"${ZFS}\" sort diff\n\n# If we are acting on a snapshot, we have nothing to do\n[ \"${ZEVENT_HISTORY_DSNAME%@*}\" = \"${ZEVENT_HISTORY_DSNAME}\" ] || exit 0\n",
                    "rendered": {
                      "text": ". \"${ZED_ZEDLET_DIR}/zed-functions.sh\"\n\n[ \"$ZEVENT_SUBCLASS\" != \"history_event\" ] && exit 0\nzed_check_cmd \"${ZFS}\" sort diff\n\n# If we are acting on a snapshot, we have nothing to do\n[ \"${ZEVENT_HISTORY_DSNAME%@*}\" = \"${ZEVENT_HISTORY_DSNAME}\" ] || exit 0\n",
                      "markdown": "`. \"${ZED_ZEDLET_DIR}/zed-functions.sh\"\n\n[ \"$ZEVENT_SUBCLASS\" != \"history_event\" ] && exit 0\nzed_check_cmd \"${ZFS}\" sort diff\n\n# If we are acting on a snapshot, we have nothing to do\n[ \"${ZEVENT_HISTORY_DSNAME%@*}\" = \"${ZEVENT_HISTORY_DSNAME}\" ] || exit 0\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zed.d/generic-notify.sh"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 20,
                  "endLine": 41,
                  "endColumn": 28,
                  "snippet": {
                    "text": "    echo\n    echo \"   eid: ${ZEVENT_EID}\"\n    echo \" class: ${ZEVENT_SUBCLASS}\"\n    echo \"  host: $(hostname)\"\n    echo \"  time: ${ZEVENT_TIME_STRING}\"\n\n    [ -n \"${ZEVENT_VDEV_TYPE}\" ] && echo \" vtype: ${ZEVENT_VDEV_TYPE}\"\n",
                    "rendered": {
                      "text": "    echo\n    echo \"   eid: ${ZEVENT_EID}\"\n    echo \" class: ${ZEVENT_SUBCLASS}\"\n    echo \"  host: $(hostname)\"\n    echo \"  time: ${ZEVENT_TIME_STRING}\"\n\n    [ -n \"${ZEVENT_VDEV_TYPE}\" ] && echo \" vtype: ${ZEVENT_VDEV_TYPE}\"\n",
                      "markdown": "`    echo\n    echo \"   eid: ${ZEVENT_EID}\"\n    echo \" class: ${ZEVENT_SUBCLASS}\"\n    echo \"  host: $(hostname)\"\n    echo \"  time: ${ZEVENT_TIME_STRING}\"\n\n    [ -n \"${ZEVENT_VDEV_TYPE}\" ] && echo \" vtype: ${ZEVENT_VDEV_TYPE}\"\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zed.d/generic-notify.sh"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 16,
                  "endLine": 33,
                  "endColumn": 24,
                  "snippet": {
                    "text": "\numask 077\npool_str=\"${ZEVENT_POOL:+\" for ${ZEVENT_POOL}\"}\"\nhost_str=\" on $(hostname)\"\nnote_subject=\"ZFS ${ZEVENT_SUBCLASS} event${pool_str}${host_str}\"\nnote_pathname=\"$(mktemp)\"\n{\n",
                    "rendered": {
                      "text": "\numask 077\npool_str=\"${ZEVENT_POOL:+\" for ${ZEVENT_POOL}\"}\"\nhost_str=\" on $(hostname)\"\nnote_subject=\"ZFS ${ZEVENT_SUBCLASS} event${pool_str}${host_str}\"\nnote_pathname=\"$(mktemp)\"\n{\n",
                      "markdown": "`\numask 077\npool_str=\"${ZEVENT_POOL:+\" for ${ZEVENT_POOL}\"}\"\nhost_str=\" on $(hostname)\"\nnote_subject=\"ZFS ${ZEVENT_SUBCLASS} event${pool_str}${host_str}\"\nnote_pathname=\"$(mktemp)\"\n{\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zed.d/generic-notify.sh"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 42,
                  "endLine": 14,
                  "endColumn": 48,
                  "snippet": {
                    "text": "#\n# Only one notification per ZED_NOTIFY_INTERVAL_SECS will be sent for a given\n# class/pool combination.  This protects against spamming the recipient\n# should multiple events occur together in time for the same pool.\n#\n# Exit codes:\n#   0: notification sent\n",
                    "rendered": {
                      "text": "#\n# Only one notification per ZED_NOTIFY_INTERVAL_SECS will be sent for a given\n# class/pool combination.  This protects against spamming the recipient\n# should multiple events occur together in time for the same pool.\n#\n# Exit codes:\n#   0: notification sent\n",
                      "markdown": "`#\n# Only one notification per ZED_NOTIFY_INTERVAL_SECS will be sent for a given\n# class/pool combination.  This protects against spamming the recipient\n# should multiple events occur together in time for the same pool.\n#\n# Exit codes:\n#   0: notification sent\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zed.d/generic-notify.sh"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 19,
                  "endLine": 6,
                  "endColumn": 27,
                  "snippet": {
                    "text": "#\n# Send notification in response to a given zevent.\n#\n# This is a generic script than can be symlinked to a file in the\n# enabled-zedlets directory to have a notification sent when a particular\n# class of zevents occurs.  The symlink filename must begin with the zevent\n# (sub)class string (e.g., \"probe_failure-notify.sh\" for the \"probe_failure\"\n",
                    "rendered": {
                      "text": "#\n# Send notification in response to a given zevent.\n#\n# This is a generic script than can be symlinked to a file in the\n# enabled-zedlets directory to have a notification sent when a particular\n# class of zevents occurs.  The symlink filename must begin with the zevent\n# (sub)class string (e.g., \"probe_failure-notify.sh\" for the \"probe_failure\"\n",
                      "markdown": "`#\n# Send notification in response to a given zevent.\n#\n# This is a generic script than can be symlinked to a file in the\n# enabled-zedlets directory to have a notification sent when a particular\n# class of zevents occurs.  The symlink filename must begin with the zevent\n# (sub)class string (e.g., \"probe_failure-notify.sh\" for the \"probe_failure\"\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zed.d/data-notify.sh"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 20,
                  "endLine": 35,
                  "endColumn": 28,
                  "snippet": {
                    "text": "    echo\n    echo \"   eid: ${ZEVENT_EID}\"\n    echo \" class: ${ZEVENT_SUBCLASS}\"\n    echo \"  host: $(hostname)\"\n    echo \"  time: ${ZEVENT_TIME_STRING}\"\n    echo \" error: ${ZEVENT_ZIO_ERR}\"\n    echo \" objid: ${ZEVENT_ZIO_OBJSET}:${ZEVENT_ZIO_OBJECT}\"\n",
                    "rendered": {
                      "text": "    echo\n    echo \"   eid: ${ZEVENT_EID}\"\n    echo \" class: ${ZEVENT_SUBCLASS}\"\n    echo \"  host: $(hostname)\"\n    echo \"  time: ${ZEVENT_TIME_STRING}\"\n    echo \" error: ${ZEVENT_ZIO_ERR}\"\n    echo \" objid: ${ZEVENT_ZIO_OBJSET}:${ZEVENT_ZIO_OBJECT}\"\n",
                      "markdown": "`    echo\n    echo \"   eid: ${ZEVENT_EID}\"\n    echo \" class: ${ZEVENT_SUBCLASS}\"\n    echo \"  host: $(hostname)\"\n    echo \"  time: ${ZEVENT_TIME_STRING}\"\n    echo \" error: ${ZEVENT_ZIO_ERR}\"\n    echo \" objid: ${ZEVENT_ZIO_OBJSET}:${ZEVENT_ZIO_OBJECT}\"\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zed.d/data-notify.sh"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 67,
                  "endLine": 28,
                  "endColumn": 75,
                  "snippet": {
                    "text": "zed_rate_limit \"${rate_limit_tag}\" || exit 3\n\numask 077\nnote_subject=\"ZFS ${ZEVENT_SUBCLASS} error for ${ZEVENT_POOL} on $(hostname)\"\nnote_pathname=\"$(mktemp)\"\n{\n    echo \"ZFS has detected a data error:\"\n",
                    "rendered": {
                      "text": "zed_rate_limit \"${rate_limit_tag}\" || exit 3\n\numask 077\nnote_subject=\"ZFS ${ZEVENT_SUBCLASS} error for ${ZEVENT_POOL} on $(hostname)\"\nnote_pathname=\"$(mktemp)\"\n{\n    echo \"ZFS has detected a data error:\"\n",
                      "markdown": "`zed_rate_limit \"${rate_limit_tag}\" || exit 3\n\numask 077\nnote_subject=\"ZFS ${ZEVENT_SUBCLASS} error for ${ZEVENT_POOL} on $(hostname)\"\nnote_pathname=\"$(mktemp)\"\n{\n    echo \"ZFS has detected a data error:\"\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/libexec/zfs/zed.d/data-notify.sh"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 42,
                  "endLine": 8,
                  "endColumn": 48,
                  "snippet": {
                    "text": "#\n# Only one notification per ZED_NOTIFY_INTERVAL_SECS will be sent for a given\n# class/pool/[vdev] combination.  This protects against spamming the recipient\n# should multiple events occur together in time for the same pool/[vdev].\n#\n# Exit codes:\n#   0: notification sent\n",
                    "rendered": {
                      "text": "#\n# Only one notification per ZED_NOTIFY_INTERVAL_SECS will be sent for a given\n# class/pool/[vdev] combination.  This protects against spamming the recipient\n# should multiple events occur together in time for the same pool/[vdev].\n#\n# Exit codes:\n#   0: notification sent\n",
                      "markdown": "`#\n# Only one notification per ZED_NOTIFY_INTERVAL_SECS will be sent for a given\n# class/pool/[vdev] combination.  This protects against spamming the recipient\n# should multiple events occur together in time for the same pool/[vdev].\n#\n# Exit codes:\n#   0: notification sent\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/lib/dracut/modules.d/90zfs/mount-zfs.sh"
                },
                "region": {
                  "startLine": 107,
                  "startColumn": 19,
                  "endLine": 107,
                  "endColumn": 27,
                  "snippet": {
                    "text": "\t\t\t# decrypt them\n\t\t\task_for_password \\\n\t\t\t\t5 \\\n\t\t\t\t\"Encrypted ZFS password for ${ENCRYPTIONROOT}: \" \\\n\t\t\t\t\"zfs load-key '${ENCRYPTIONROOT}'\"\n\t\tfi\n\tfi\n",
                    "rendered": {
                      "text": "\t\t\t# decrypt them\n\t\t\task_for_password \\\n\t\t\t\t5 \\\n\t\t\t\t\"Encrypted ZFS password for ${ENCRYPTIONROOT}: \" \\\n\t\t\t\t\"zfs load-key '${ENCRYPTIONROOT}'\"\n\t\tfi\n\tfi\n",
                      "markdown": "`\t\t\t# decrypt them\n\t\t\task_for_password \\\n\t\t\t\t5 \\\n\t\t\t\t\"Encrypted ZFS password for ${ENCRYPTIONROOT}: \" \\\n\t\t\t\t\"zfs load-key '${ENCRYPTIONROOT}'\"\n\t\tfi\n\tfi\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/lib/dracut/modules.d/90zfs/mount-zfs.sh"
                },
                "region": {
                  "startLine": 105,
                  "startColumn": 11,
                  "endLine": 105,
                  "endColumn": 19,
                  "snippet": {
                    "text": "\t\t# if the key needs to be loaded\n\t\tif [ \"$KEYSTATUS\" = \"unavailable\" ]; then\n\t\t\t# decrypt them\n\t\t\task_for_password \\\n\t\t\t\t5 \\\n\t\t\t\t\"Encrypted ZFS password for ${ENCRYPTIONROOT}: \" \\\n\t\t\t\t\"zfs load-key '${ENCRYPTIONROOT}'\"\n",
                    "rendered": {
                      "text": "\t\t# if the key needs to be loaded\n\t\tif [ \"$KEYSTATUS\" = \"unavailable\" ]; then\n\t\t\t# decrypt them\n\t\t\task_for_password \\\n\t\t\t\t5 \\\n\t\t\t\t\"Encrypted ZFS password for ${ENCRYPTIONROOT}: \" \\\n\t\t\t\t\"zfs load-key '${ENCRYPTIONROOT}'\"\n",
                      "markdown": "`\t\t# if the key needs to be loaded\n\t\tif [ \"$KEYSTATUS\" = \"unavailable\" ]; then\n\t\t\t# decrypt them\n\t\t\task_for_password \\\n\t\t\t\t5 \\\n\t\t\t\t\"Encrypted ZFS password for ${ENCRYPTIONROOT}: \" \\\n\t\t\t\t\"zfs load-key '${ENCRYPTIONROOT}'\"\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/lib/dracut/modules.d/90zfs/mount-zfs.sh"
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 36,
                  "endLine": 54,
                  "endColumn": 44,
                  "snippet": {
                    "text": "        fi\n    } 9>/.console_lock\n\n    [ \"$ret\" -ne 0 ] && echo \"Wrong password\" >&2\n    return \"$ret\"\n}\n\n",
                    "rendered": {
                      "text": "        fi\n    } 9>/.console_lock\n\n    [ \"$ret\" -ne 0 ] && echo \"Wrong password\" >&2\n    return \"$ret\"\n}\n\n",
                      "markdown": "`        fi\n    } 9>/.console_lock\n\n    [ \"$ret\" -ne 0 ] && echo \"Wrong password\" >&2\n    return \"$ret\"\n}\n\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/lib/dracut/modules.d/90zfs/mount-zfs.sh"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 29,
                  "endLine": 37,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\n        # Prompt for password with plymouth, if installed and running.\n        if plymouth --ping 2>/dev/null; then\n            plymouth ask-for-password \\\n                --prompt \"$prompt\" --number-of-tries=\"$tries\" | \\\n                eval \"$cmd\"\n            ret=$?\n",
                    "rendered": {
                      "text": "\n        # Prompt for password with plymouth, if installed and running.\n        if plymouth --ping 2>/dev/null; then\n            plymouth ask-for-password \\\n                --prompt \"$prompt\" --number-of-tries=\"$tries\" | \\\n                eval \"$cmd\"\n            ret=$?\n",
                      "markdown": "`\n        # Prompt for password with plymouth, if installed and running.\n        if plymouth --ping 2>/dev/null; then\n            plymouth ask-for-password \\\n                --prompt \"$prompt\" --number-of-tries=\"$tries\" | \\\n                eval \"$cmd\"\n            ret=$?\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/lib/dracut/modules.d/90zfs/mount-zfs.sh"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 21,
                  "endLine": 35,
                  "endColumn": 29,
                  "snippet": {
                    "text": "    {\n        flock -s 9\n\n        # Prompt for password with plymouth, if installed and running.\n        if plymouth --ping 2>/dev/null; then\n            plymouth ask-for-password \\\n                --prompt \"$prompt\" --number-of-tries=\"$tries\" | \\\n",
                    "rendered": {
                      "text": "    {\n        flock -s 9\n\n        # Prompt for password with plymouth, if installed and running.\n        if plymouth --ping 2>/dev/null; then\n            plymouth ask-for-password \\\n                --prompt \"$prompt\" --number-of-tries=\"$tries\" | \\\n",
                      "markdown": "`    {\n        flock -s 9\n\n        # Prompt for password with plymouth, if installed and running.\n        if plymouth --ping 2>/dev/null; then\n            plymouth ask-for-password \\\n                --prompt \"$prompt\" --number-of-tries=\"$tries\" | \\\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/lib/dracut/modules.d/90zfs/mount-zfs.sh"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 8,
                  "endLine": 27,
                  "endColumn": 16,
                  "snippet": {
                    "text": "#\n# Wraps around plymouth ask-for-password and adds fallback to tty password ask\n# if plymouth is not present.\nask_for_password() {\n    tries=\"$1\"\n    prompt=\"$2\"\n    cmd=\"$3\"\n",
                    "rendered": {
                      "text": "#\n# Wraps around plymouth ask-for-password and adds fallback to tty password ask\n# if plymouth is not present.\nask_for_password() {\n    tries=\"$1\"\n    prompt=\"$2\"\n    cmd=\"$3\"\n",
                      "markdown": "`#\n# Wraps around plymouth ask-for-password and adds fallback to tty password ask\n# if plymouth is not present.\nask_for_password() {\n    tries=\"$1\"\n    prompt=\"$2\"\n    cmd=\"$3\"\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/lib/dracut/modules.d/90zfs/mount-zfs.sh"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 66,
                  "endLine": 25,
                  "endColumn": 74,
                  "snippet": {
                    "text": "\n# ask_for_password tries prompt cmd\n#\n# Wraps around plymouth ask-for-password and adds fallback to tty password ask\n# if plymouth is not present.\nask_for_password() {\n    tries=\"$1\"\n",
                    "rendered": {
                      "text": "\n# ask_for_password tries prompt cmd\n#\n# Wraps around plymouth ask-for-password and adds fallback to tty password ask\n# if plymouth is not present.\nask_for_password() {\n    tries=\"$1\"\n",
                      "markdown": "`\n# ask_for_password tries prompt cmd\n#\n# Wraps around plymouth ask-for-password and adds fallback to tty password ask\n# if plymouth is not present.\nask_for_password() {\n    tries=\"$1\"\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/lib/dracut/modules.d/90zfs/mount-zfs.sh"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 32,
                  "endLine": 25,
                  "endColumn": 40,
                  "snippet": {
                    "text": "\n# ask_for_password tries prompt cmd\n#\n# Wraps around plymouth ask-for-password and adds fallback to tty password ask\n# if plymouth is not present.\nask_for_password() {\n    tries=\"$1\"\n",
                    "rendered": {
                      "text": "\n# ask_for_password tries prompt cmd\n#\n# Wraps around plymouth ask-for-password and adds fallback to tty password ask\n# if plymouth is not present.\nask_for_password() {\n    tries=\"$1\"\n",
                      "markdown": "`\n# ask_for_password tries prompt cmd\n#\n# Wraps around plymouth ask-for-password and adds fallback to tty password ask\n# if plymouth is not present.\nask_for_password() {\n    tries=\"$1\"\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/lib/dracut/modules.d/90zfs/mount-zfs.sh"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 10,
                  "endLine": 23,
                  "endColumn": 18,
                  "snippet": {
                    "text": "info \"ZFS: No sysroot.mount exists or zfs-generator did not extend it.\"\ninfo \"ZFS: Mounting root with the traditional mount-zfs.sh instead.\"\n\n# ask_for_password tries prompt cmd\n#\n# Wraps around plymouth ask-for-password and adds fallback to tty password ask\n# if plymouth is not present.\n",
                    "rendered": {
                      "text": "info \"ZFS: No sysroot.mount exists or zfs-generator did not extend it.\"\ninfo \"ZFS: Mounting root with the traditional mount-zfs.sh instead.\"\n\n# ask_for_password tries prompt cmd\n#\n# Wraps around plymouth ask-for-password and adds fallback to tty password ask\n# if plymouth is not present.\n",
                      "markdown": "`info \"ZFS: No sysroot.mount exists or zfs-generator did not extend it.\"\ninfo \"ZFS: Mounting root with the traditional mount-zfs.sh instead.\"\n\n# ask_for_password tries prompt cmd\n#\n# Wraps around plymouth ask-for-password and adds fallback to tty password ask\n# if plymouth is not present.\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/lib/dracut/modules.d/90zfs/mount-zfs.sh"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 31,
                  "endLine": 24,
                  "snippet": {
                    "text": "info \"ZFS: No sysroot.mount exists or zfs-generator did not extend it.\"\ninfo \"ZFS: Mounting root with the traditional mount-zfs.sh instead.\"\n\n# ask_for_password tries prompt cmd\n#\n# Wraps around plymouth ask-for-password and adds fallback to tty password ask\n# if plymouth is not present.\nask_for_password() {\n",
                    "rendered": {
                      "text": "info \"ZFS: No sysroot.mount exists or zfs-generator did not extend it.\"\ninfo \"ZFS: Mounting root with the traditional mount-zfs.sh instead.\"\n\n# ask_for_password tries prompt cmd\n#\n# Wraps around plymouth ask-for-password and adds fallback to tty password ask\n# if plymouth is not present.\nask_for_password() {\n",
                      "markdown": "`info \"ZFS: No sysroot.mount exists or zfs-generator did not extend it.\"\ninfo \"ZFS: Mounting root with the traditional mount-zfs.sh instead.\"\n\n# ask_for_password tries prompt cmd\n#\n# Wraps around plymouth ask-for-password and adds fallback to tty password ask\n# if plymouth is not present.\nask_for_password() {\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/lib/dracut/modules.d/90zfs/mount-zfs.sh"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 50,
                  "endLine": 13,
                  "endColumn": 54,
                  "snippet": {
                    "text": "\nif [ -e \"$GENERATOR_FILE\" ] && [ -e \"$GENERATOR_EXTENSION\" ]; then\n\t# We're under systemd and dracut-zfs-generator ran to completion.\n\tinfo \"ZFS: Delegating root mount to sysroot.mount at al.\"\n\n\t# We now prevent Dracut from running this thing again.\n\trm -f \"$hookdir\"/mount/*zfs*\n",
                    "rendered": {
                      "text": "\nif [ -e \"$GENERATOR_FILE\" ] && [ -e \"$GENERATOR_EXTENSION\" ]; then\n\t# We're under systemd and dracut-zfs-generator ran to completion.\n\tinfo \"ZFS: Delegating root mount to sysroot.mount at al.\"\n\n\t# We now prevent Dracut from running this thing again.\n\trm -f \"$hookdir\"/mount/*zfs*\n",
                      "markdown": "`\nif [ -e \"$GENERATOR_FILE\" ] && [ -e \"$GENERATOR_EXTENSION\" ]; then\n\t# We're under systemd and dracut-zfs-generator ran to completion.\n\tinfo \"ZFS: Delegating root mount to sysroot.mount at al.\"\n\n\t# We now prevent Dracut from running this thing again.\n\trm -f \"$hookdir\"/mount/*zfs*\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/lib/dracut/modules.d/90zfs/mount-zfs.sh"
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 50,
                  "endLine": 70,
                  "endColumn": 56,
                  "snippet": {
                    "text": "\tif ! ZFS_DATASET=\"$(zpool get -Ho value bootfs | grep -m1 -vFx -)\"; then\n\t\t# shellcheck disable=SC2086\n\t\tzpool import -N -a ${ZPOOL_IMPORT_OPTS}\n\t\tif ! ZFS_DATASET=\"$(zpool get -Ho value bootfs | grep -m1 -vFx -)\"; then\n\t\t\twarn \"ZFS: No bootfs attribute found in importable pools.\"\n\t\t\tzpool export -aF\n\n",
                    "rendered": {
                      "text": "\tif ! ZFS_DATASET=\"$(zpool get -Ho value bootfs | grep -m1 -vFx -)\"; then\n\t\t# shellcheck disable=SC2086\n\t\tzpool import -N -a ${ZPOOL_IMPORT_OPTS}\n\t\tif ! ZFS_DATASET=\"$(zpool get -Ho value bootfs | grep -m1 -vFx -)\"; then\n\t\t\twarn \"ZFS: No bootfs attribute found in importable pools.\"\n\t\t\tzpool export -aF\n\n",
                      "markdown": "`\tif ! ZFS_DATASET=\"$(zpool get -Ho value bootfs | grep -m1 -vFx -)\"; then\n\t\t# shellcheck disable=SC2086\n\t\tzpool import -N -a ${ZPOOL_IMPORT_OPTS}\n\t\tif ! ZFS_DATASET=\"$(zpool get -Ho value bootfs | grep -m1 -vFx -)\"; then\n\t\t\twarn \"ZFS: No bootfs attribute found in importable pools.\"\n\t\t\tzpool export -aF\n\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/lib/dracut/modules.d/90zfs/mount-zfs.sh"
                },
                "region": {
                  "startLine": 67,
                  "startColumn": 49,
                  "endLine": 67,
                  "endColumn": 55,
                  "snippet": {
                    "text": "ZFS_POOL=\n\nif [ \"${root}\" = \"zfs:AUTO\" ] ; then\n\tif ! ZFS_DATASET=\"$(zpool get -Ho value bootfs | grep -m1 -vFx -)\"; then\n\t\t# shellcheck disable=SC2086\n\t\tzpool import -N -a ${ZPOOL_IMPORT_OPTS}\n\t\tif ! ZFS_DATASET=\"$(zpool get -Ho value bootfs | grep -m1 -vFx -)\"; then\n",
                    "rendered": {
                      "text": "ZFS_POOL=\n\nif [ \"${root}\" = \"zfs:AUTO\" ] ; then\n\tif ! ZFS_DATASET=\"$(zpool get -Ho value bootfs | grep -m1 -vFx -)\"; then\n\t\t# shellcheck disable=SC2086\n\t\tzpool import -N -a ${ZPOOL_IMPORT_OPTS}\n\t\tif ! ZFS_DATASET=\"$(zpool get -Ho value bootfs | grep -m1 -vFx -)\"; then\n",
                      "markdown": "`ZFS_POOL=\n\nif [ \"${root}\" = \"zfs:AUTO\" ] ; then\n\tif ! ZFS_DATASET=\"$(zpool get -Ho value bootfs | grep -m1 -vFx -)\"; then\n\t\t# shellcheck disable=SC2086\n\t\tzpool import -N -a ${ZPOOL_IMPORT_OPTS}\n\t\tif ! ZFS_DATASET=\"$(zpool get -Ho value bootfs | grep -m1 -vFx -)\"; then\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/lib/dracut/modules.d/90zfs/mount-zfs.sh"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 7,
                  "endLine": 33,
                  "endColumn": 14,
                  "snippet": {
                    "text": "    cmd=\"$3\"\n\n    {\n        flock -s 9\n\n        # Prompt for password with plymouth, if installed and running.\n        if plymouth --ping 2>/dev/null; then\n",
                    "rendered": {
                      "text": "    cmd=\"$3\"\n\n    {\n        flock -s 9\n\n        # Prompt for password with plymouth, if installed and running.\n        if plymouth --ping 2>/dev/null; then\n",
                      "markdown": "`    cmd=\"$3\"\n\n    {\n        flock -s 9\n\n        # Prompt for password with plymouth, if installed and running.\n        if plymouth --ping 2>/dev/null; then\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/lib/dracut/modules.d/90zfs/mount-zfs.sh"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 27,
                  "endLine": 13,
                  "endColumn": 34,
                  "snippet": {
                    "text": "\nif [ -e \"$GENERATOR_FILE\" ] && [ -e \"$GENERATOR_EXTENSION\" ]; then\n\t# We're under systemd and dracut-zfs-generator ran to completion.\n\tinfo \"ZFS: Delegating root mount to sysroot.mount at al.\"\n\n\t# We now prevent Dracut from running this thing again.\n\trm -f \"$hookdir\"/mount/*zfs*\n",
                    "rendered": {
                      "text": "\nif [ -e \"$GENERATOR_FILE\" ] && [ -e \"$GENERATOR_EXTENSION\" ]; then\n\t# We're under systemd and dracut-zfs-generator ran to completion.\n\tinfo \"ZFS: Delegating root mount to sysroot.mount at al.\"\n\n\t# We now prevent Dracut from running this thing again.\n\trm -f \"$hookdir\"/mount/*zfs*\n",
                      "markdown": "`\nif [ -e \"$GENERATOR_FILE\" ] && [ -e \"$GENERATOR_EXTENSION\" ]; then\n\t# We're under systemd and dracut-zfs-generator ran to completion.\n\tinfo \"ZFS: Delegating root mount to sysroot.mount at al.\"\n\n\t# We now prevent Dracut from running this thing again.\n\trm -f \"$hookdir\"/mount/*zfs*\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/lib/dracut/modules.d/90zfs/module-setup.sh"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n# shellcheck disable=SC2154\n\ncheck() {\n\t# We depend on udev-rules being loaded\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n# shellcheck disable=SC2154\n\ncheck() {\n\t# We depend on udev-rules being loaded\n",
                      "markdown": "`#!/usr/bin/env bash\n# shellcheck disable=SC2154\n\ncheck() {\n\t# We depend on udev-rules being loaded\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/lib/dracut/modules.d/90zfs/module-setup.sh"
                },
                "region": {
                  "startLine": 117,
                  "startColumn": 2,
                  "endLine": 117,
                  "endColumn": 13,
                  "snippet": {
                    "text": "\t\t\t\"zfs-snapshot-bootfs.service\" \\\n\t\t\t\"zfs-rollback-bootfs.service\"; do\n\t\t\tinst_simple \"${moddir}/${_service}\" \"${systemdsystemunitdir}/${_service}\"\n\t\t\tsystemctl -q --root \"${initdir}\" add-wants initrd.target \"${_service}\"\n\n\t\t\t# Add user-provided unit overrides:\n\t\t\t# - /etc/systemd/system/${_service}\n",
                    "rendered": {
                      "text": "\t\t\t\"zfs-snapshot-bootfs.service\" \\\n\t\t\t\"zfs-rollback-bootfs.service\"; do\n\t\t\tinst_simple \"${moddir}/${_service}\" \"${systemdsystemunitdir}/${_service}\"\n\t\t\tsystemctl -q --root \"${initdir}\" add-wants initrd.target \"${_service}\"\n\n\t\t\t# Add user-provided unit overrides:\n\t\t\t# - /etc/systemd/system/${_service}\n",
                      "markdown": "`\t\t\t\"zfs-snapshot-bootfs.service\" \\\n\t\t\t\"zfs-rollback-bootfs.service\"; do\n\t\t\tinst_simple \"${moddir}/${_service}\" \"${systemdsystemunitdir}/${_service}\"\n\t\t\tsystemctl -q --root \"${initdir}\" add-wants initrd.target \"${_service}\"\n\n\t\t\t# Add user-provided unit overrides:\n\t\t\t# - /etc/systemd/system/${_service}\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/lib/dracut/modules.d/90zfs/module-setup.sh"
                },
                "region": {
                  "startLine": 100,
                  "startColumn": 2,
                  "endLine": 100,
                  "endColumn": 13,
                  "snippet": {
                    "text": "\t\t\t\"zfs-import-scan.service\" \\\n\t\t\t\"zfs-import-cache.service\"; do\n\t\t\tinst_simple \"${systemdsystemunitdir}/${_service}\"\n\t\t\tsystemctl -q --root \"${initdir}\" add-wants zfs-import.target \"${_service}\"\n\n\t\t\t# Add user-provided unit overrides:\n\t\t\t# - /etc/systemd/system/${_service}\n",
                    "rendered": {
                      "text": "\t\t\t\"zfs-import-scan.service\" \\\n\t\t\t\"zfs-import-cache.service\"; do\n\t\t\tinst_simple \"${systemdsystemunitdir}/${_service}\"\n\t\t\tsystemctl -q --root \"${initdir}\" add-wants zfs-import.target \"${_service}\"\n\n\t\t\t# Add user-provided unit overrides:\n\t\t\t# - /etc/systemd/system/${_service}\n",
                      "markdown": "`\t\t\t\"zfs-import-scan.service\" \\\n\t\t\t\"zfs-import-cache.service\"; do\n\t\t\tinst_simple \"${systemdsystemunitdir}/${_service}\"\n\t\t\tsystemctl -q --root \"${initdir}\" add-wants zfs-import.target \"${_service}\"\n\n\t\t\t# Add user-provided unit overrides:\n\t\t\t# - /etc/systemd/system/${_service}\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/lib/dracut/modules.d/90zfs/module-setup.sh"
                },
                "region": {
                  "startLine": 85,
                  "startColumn": 1,
                  "endLine": 85,
                  "endColumn": 12,
                  "snippet": {
                    "text": "\t\tsystemctl -q --root \"${initdir}\" add-wants zfs-import.target zfs-env-bootfs.service\n\n\t\tinst_simple \"${moddir}/zfs-nonroot-necessities.service\" \"${systemdsystemunitdir}/zfs-nonroot-necessities.service\"\n\t\tsystemctl -q --root \"${initdir}\" add-requires initrd-root-fs.target zfs-nonroot-necessities.service\n\n\t\t# Add user-provided unit overrides:\n\t\t# - /etc/systemd/system/${_service}\n",
                    "rendered": {
                      "text": "\t\tsystemctl -q --root \"${initdir}\" add-wants zfs-import.target zfs-env-bootfs.service\n\n\t\tinst_simple \"${moddir}/zfs-nonroot-necessities.service\" \"${systemdsystemunitdir}/zfs-nonroot-necessities.service\"\n\t\tsystemctl -q --root \"${initdir}\" add-requires initrd-root-fs.target zfs-nonroot-necessities.service\n\n\t\t# Add user-provided unit overrides:\n\t\t# - /etc/systemd/system/${_service}\n",
                      "markdown": "`\t\tsystemctl -q --root \"${initdir}\" add-wants zfs-import.target zfs-env-bootfs.service\n\n\t\tinst_simple \"${moddir}/zfs-nonroot-necessities.service\" \"${systemdsystemunitdir}/zfs-nonroot-necessities.service\"\n\t\tsystemctl -q --root \"${initdir}\" add-requires initrd-root-fs.target zfs-nonroot-necessities.service\n\n\t\t# Add user-provided unit overrides:\n\t\t# - /etc/systemd/system/${_service}\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/lib/dracut/modules.d/90zfs/module-setup.sh"
                },
                "region": {
                  "startLine": 82,
                  "startColumn": 1,
                  "endLine": 82,
                  "endColumn": 12,
                  "snippet": {
                    "text": "\t\tsystemctl -q --root \"${initdir}\" add-wants initrd.target zfs-import.target\n\n\t\tinst_simple \"${moddir}/zfs-env-bootfs.service\" \"${systemdsystemunitdir}/zfs-env-bootfs.service\"\n\t\tsystemctl -q --root \"${initdir}\" add-wants zfs-import.target zfs-env-bootfs.service\n\n\t\tinst_simple \"${moddir}/zfs-nonroot-necessities.service\" \"${systemdsystemunitdir}/zfs-nonroot-necessities.service\"\n\t\tsystemctl -q --root \"${initdir}\" add-requires initrd-root-fs.target zfs-nonroot-necessities.service\n",
                    "rendered": {
                      "text": "\t\tsystemctl -q --root \"${initdir}\" add-wants initrd.target zfs-import.target\n\n\t\tinst_simple \"${moddir}/zfs-env-bootfs.service\" \"${systemdsystemunitdir}/zfs-env-bootfs.service\"\n\t\tsystemctl -q --root \"${initdir}\" add-wants zfs-import.target zfs-env-bootfs.service\n\n\t\tinst_simple \"${moddir}/zfs-nonroot-necessities.service\" \"${systemdsystemunitdir}/zfs-nonroot-necessities.service\"\n\t\tsystemctl -q --root \"${initdir}\" add-requires initrd-root-fs.target zfs-nonroot-necessities.service\n",
                      "markdown": "`\t\tsystemctl -q --root \"${initdir}\" add-wants initrd.target zfs-import.target\n\n\t\tinst_simple \"${moddir}/zfs-env-bootfs.service\" \"${systemdsystemunitdir}/zfs-env-bootfs.service\"\n\t\tsystemctl -q --root \"${initdir}\" add-wants zfs-import.target zfs-env-bootfs.service\n\n\t\tinst_simple \"${moddir}/zfs-nonroot-necessities.service\" \"${systemdsystemunitdir}/zfs-nonroot-necessities.service\"\n\t\tsystemctl -q --root \"${initdir}\" add-requires initrd-root-fs.target zfs-nonroot-necessities.service\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/lib/dracut/modules.d/90zfs/module-setup.sh"
                },
                "region": {
                  "startLine": 79,
                  "startColumn": 1,
                  "endLine": 79,
                  "endColumn": 12,
                  "snippet": {
                    "text": "\n\tif dracut_module_included \"systemd\"; then\n\t\tinst_simple \"${systemdsystemunitdir}/zfs-import.target\"\n\t\tsystemctl -q --root \"${initdir}\" add-wants initrd.target zfs-import.target\n\n\t\tinst_simple \"${moddir}/zfs-env-bootfs.service\" \"${systemdsystemunitdir}/zfs-env-bootfs.service\"\n\t\tsystemctl -q --root \"${initdir}\" add-wants zfs-import.target zfs-env-bootfs.service\n",
                    "rendered": {
                      "text": "\n\tif dracut_module_included \"systemd\"; then\n\t\tinst_simple \"${systemdsystemunitdir}/zfs-import.target\"\n\t\tsystemctl -q --root \"${initdir}\" add-wants initrd.target zfs-import.target\n\n\t\tinst_simple \"${moddir}/zfs-env-bootfs.service\" \"${systemdsystemunitdir}/zfs-env-bootfs.service\"\n\t\tsystemctl -q --root \"${initdir}\" add-wants zfs-import.target zfs-env-bootfs.service\n",
                      "markdown": "`\n\tif dracut_module_included \"systemd\"; then\n\t\tinst_simple \"${systemdsystemunitdir}/zfs-import.target\"\n\t\tsystemctl -q --root \"${initdir}\" add-wants initrd.target zfs-import.target\n\n\t\tinst_simple \"${moddir}/zfs-env-bootfs.service\" \"${systemdsystemunitdir}/zfs-env-bootfs.service\"\n\t\tsystemctl -q --root \"${initdir}\" add-wants zfs-import.target zfs-env-bootfs.service\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/lib/dracut/modules.d/90zfs/module-setup.sh"
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 10,
                  "endLine": 57,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\t\tinst_script \"${moddir}/zfs-generator.sh\" \"${systemdutildir}/system-generators/dracut-zfs-generator\"\n\tfi\n\tinst_hook pre-mount 90 \"${moddir}/zfs-load-key.sh\"\n\tinst_hook mount 98 \"${moddir}/mount-zfs.sh\"\n\tinst_hook cleanup 99 \"${moddir}/zfs-needshutdown.sh\"\n\tinst_hook shutdown 20 \"${moddir}/export-zfs.sh\"\n\n",
                    "rendered": {
                      "text": "\t\tinst_script \"${moddir}/zfs-generator.sh\" \"${systemdutildir}/system-generators/dracut-zfs-generator\"\n\tfi\n\tinst_hook pre-mount 90 \"${moddir}/zfs-load-key.sh\"\n\tinst_hook mount 98 \"${moddir}/mount-zfs.sh\"\n\tinst_hook cleanup 99 \"${moddir}/zfs-needshutdown.sh\"\n\tinst_hook shutdown 20 \"${moddir}/export-zfs.sh\"\n\n",
                      "markdown": "`\t\tinst_script \"${moddir}/zfs-generator.sh\" \"${systemdutildir}/system-generators/dracut-zfs-generator\"\n\tfi\n\tinst_hook pre-mount 90 \"${moddir}/zfs-load-key.sh\"\n\tinst_hook mount 98 \"${moddir}/mount-zfs.sh\"\n\tinst_hook cleanup 99 \"${moddir}/zfs-needshutdown.sh\"\n\tinst_hook shutdown 20 \"${moddir}/export-zfs.sh\"\n\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/lib/dracut/modules.d/90zfs/module-setup.sh"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 61,
                  "endLine": 44,
                  "endColumn": 67,
                  "snippet": {
                    "text": "\t\tif command -v gcc-config >/dev/null; then\n\t\t\tinst_simple \"/usr/lib/gcc/$(s=$(gcc-config -c); echo \"${s%-*}/${s##*-}\")/libgcc_s.so.1\" ||\n\t\t\t\t{ dfatal \"Unable to install libgcc_s.so\"; exit 1; }\n\t\t\t# Otherwise, use dracut's library installation function to find the right one\n\t\telif ! inst_libdir_file \"libgcc_s.so*\"; then\n\t\t\t# If all else fails, just try looking for some gcc arch directory\n\t\t\tinst_simple /usr/lib/gcc/*/*/libgcc_s.so* ||\n",
                    "rendered": {
                      "text": "\t\tif command -v gcc-config >/dev/null; then\n\t\t\tinst_simple \"/usr/lib/gcc/$(s=$(gcc-config -c); echo \"${s%-*}/${s##*-}\")/libgcc_s.so.1\" ||\n\t\t\t\t{ dfatal \"Unable to install libgcc_s.so\"; exit 1; }\n\t\t\t# Otherwise, use dracut's library installation function to find the right one\n\t\telif ! inst_libdir_file \"libgcc_s.so*\"; then\n\t\t\t# If all else fails, just try looking for some gcc arch directory\n\t\t\tinst_simple /usr/lib/gcc/*/*/libgcc_s.so* ||\n",
                      "markdown": "`\t\tif command -v gcc-config >/dev/null; then\n\t\t\tinst_simple \"/usr/lib/gcc/$(s=$(gcc-config -c); echo \"${s%-*}/${s##*-}\")/libgcc_s.so.1\" ||\n\t\t\t\t{ dfatal \"Unable to install libgcc_s.so\"; exit 1; }\n\t\t\t# Otherwise, use dracut's library installation function to find the right one\n\t\telif ! inst_libdir_file \"libgcc_s.so*\"; then\n\t\t\t# If all else fails, just try looking for some gcc arch directory\n\t\t\tinst_simple /usr/lib/gcc/*/*/libgcc_s.so* ||\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/lib/dracut/modules.d/90zfs/module-setup.sh"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 64,
                  "endLine": 40,
                  "endColumn": 70,
                  "snippet": {
                    "text": "\n\t# Adapted from https://github.com/zbm-dev/zfsbootmenu\n\tif ! ldd \"$(command -v zpool)\" | grep -qF 'libgcc_s.so' && ldconfig -p 2> /dev/null | grep -qF 'libc.so.6' ; then\n\t\t# On systems with gcc-config (Gentoo, Funtoo, etc.), use it to find libgcc_s\n\t\tif command -v gcc-config >/dev/null; then\n\t\t\tinst_simple \"/usr/lib/gcc/$(s=$(gcc-config -c); echo \"${s%-*}/${s##*-}\")/libgcc_s.so.1\" ||\n\t\t\t\t{ dfatal \"Unable to install libgcc_s.so\"; exit 1; }\n",
                    "rendered": {
                      "text": "\n\t# Adapted from https://github.com/zbm-dev/zfsbootmenu\n\tif ! ldd \"$(command -v zpool)\" | grep -qF 'libgcc_s.so' && ldconfig -p 2> /dev/null | grep -qF 'libc.so.6' ; then\n\t\t# On systems with gcc-config (Gentoo, Funtoo, etc.), use it to find libgcc_s\n\t\tif command -v gcc-config >/dev/null; then\n\t\t\tinst_simple \"/usr/lib/gcc/$(s=$(gcc-config -c); echo \"${s%-*}/${s##*-}\")/libgcc_s.so.1\" ||\n\t\t\t\t{ dfatal \"Unable to install libgcc_s.so\"; exit 1; }\n",
                      "markdown": "`\n\t# Adapted from https://github.com/zbm-dev/zfsbootmenu\n\tif ! ldd \"$(command -v zpool)\" | grep -qF 'libgcc_s.so' && ldconfig -p 2> /dev/null | grep -qF 'libc.so.6' ; then\n\t\t# On systems with gcc-config (Gentoo, Funtoo, etc.), use it to find libgcc_s\n\t\tif command -v gcc-config >/dev/null; then\n\t\t\tinst_simple \"/usr/lib/gcc/$(s=$(gcc-config -c); echo \"${s%-*}/${s##*-}\")/libgcc_s.so.1\" ||\n\t\t\t\t{ dfatal \"Unable to install libgcc_s.so\"; exit 1; }\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/lib/dracut/modules.d/90zfs/module-setup.sh"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 86,
                  "endLine": 39,
                  "endColumn": 92,
                  "snippet": {
                    "text": "\t\t{ dfatal \"Failed to install essential binaries\"; exit 1; }\n\n\t# Adapted from https://github.com/zbm-dev/zfsbootmenu\n\tif ! ldd \"$(command -v zpool)\" | grep -qF 'libgcc_s.so' && ldconfig -p 2> /dev/null | grep -qF 'libc.so.6' ; then\n\t\t# On systems with gcc-config (Gentoo, Funtoo, etc.), use it to find libgcc_s\n\t\tif command -v gcc-config >/dev/null; then\n\t\t\tinst_simple \"/usr/lib/gcc/$(s=$(gcc-config -c); echo \"${s%-*}/${s##*-}\")/libgcc_s.so.1\" ||\n",
                    "rendered": {
                      "text": "\t\t{ dfatal \"Failed to install essential binaries\"; exit 1; }\n\n\t# Adapted from https://github.com/zbm-dev/zfsbootmenu\n\tif ! ldd \"$(command -v zpool)\" | grep -qF 'libgcc_s.so' && ldconfig -p 2> /dev/null | grep -qF 'libc.so.6' ; then\n\t\t# On systems with gcc-config (Gentoo, Funtoo, etc.), use it to find libgcc_s\n\t\tif command -v gcc-config >/dev/null; then\n\t\t\tinst_simple \"/usr/lib/gcc/$(s=$(gcc-config -c); echo \"${s%-*}/${s##*-}\")/libgcc_s.so.1\" ||\n",
                      "markdown": "`\t\t{ dfatal \"Failed to install essential binaries\"; exit 1; }\n\n\t# Adapted from https://github.com/zbm-dev/zfsbootmenu\n\tif ! ldd \"$(command -v zpool)\" | grep -qF 'libgcc_s.so' && ldconfig -p 2> /dev/null | grep -qF 'libc.so.6' ; then\n\t\t# On systems with gcc-config (Gentoo, Funtoo, etc.), use it to find libgcc_s\n\t\tif command -v gcc-config >/dev/null; then\n\t\t\tinst_simple \"/usr/lib/gcc/$(s=$(gcc-config -c); echo \"${s%-*}/${s##*-}\")/libgcc_s.so.1\" ||\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/lib/dracut/modules.d/90zfs/module-setup.sh"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 59,
                  "endLine": 39,
                  "endColumn": 69,
                  "snippet": {
                    "text": "\t\t{ dfatal \"Failed to install essential binaries\"; exit 1; }\n\n\t# Adapted from https://github.com/zbm-dev/zfsbootmenu\n\tif ! ldd \"$(command -v zpool)\" | grep -qF 'libgcc_s.so' && ldconfig -p 2> /dev/null | grep -qF 'libc.so.6' ; then\n\t\t# On systems with gcc-config (Gentoo, Funtoo, etc.), use it to find libgcc_s\n\t\tif command -v gcc-config >/dev/null; then\n\t\t\tinst_simple \"/usr/lib/gcc/$(s=$(gcc-config -c); echo \"${s%-*}/${s##*-}\")/libgcc_s.so.1\" ||\n",
                    "rendered": {
                      "text": "\t\t{ dfatal \"Failed to install essential binaries\"; exit 1; }\n\n\t# Adapted from https://github.com/zbm-dev/zfsbootmenu\n\tif ! ldd \"$(command -v zpool)\" | grep -qF 'libgcc_s.so' && ldconfig -p 2> /dev/null | grep -qF 'libc.so.6' ; then\n\t\t# On systems with gcc-config (Gentoo, Funtoo, etc.), use it to find libgcc_s\n\t\tif command -v gcc-config >/dev/null; then\n\t\t\tinst_simple \"/usr/lib/gcc/$(s=$(gcc-config -c); echo \"${s%-*}/${s##*-}\")/libgcc_s.so.1\" ||\n",
                      "markdown": "`\t\t{ dfatal \"Failed to install essential binaries\"; exit 1; }\n\n\t# Adapted from https://github.com/zbm-dev/zfsbootmenu\n\tif ! ldd \"$(command -v zpool)\" | grep -qF 'libgcc_s.so' && ldconfig -p 2> /dev/null | grep -qF 'libc.so.6' ; then\n\t\t# On systems with gcc-config (Gentoo, Funtoo, etc.), use it to find libgcc_s\n\t\tif command -v gcc-config >/dev/null; then\n\t\t\tinst_simple \"/usr/lib/gcc/$(s=$(gcc-config -c); echo \"${s%-*}/${s##*-}\")/libgcc_s.so.1\" ||\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/lib/dracut/modules.d/90zfs/module-setup.sh"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 33,
                  "endLine": 39,
                  "endColumn": 39,
                  "snippet": {
                    "text": "\t\t{ dfatal \"Failed to install essential binaries\"; exit 1; }\n\n\t# Adapted from https://github.com/zbm-dev/zfsbootmenu\n\tif ! ldd \"$(command -v zpool)\" | grep -qF 'libgcc_s.so' && ldconfig -p 2> /dev/null | grep -qF 'libc.so.6' ; then\n\t\t# On systems with gcc-config (Gentoo, Funtoo, etc.), use it to find libgcc_s\n\t\tif command -v gcc-config >/dev/null; then\n\t\t\tinst_simple \"/usr/lib/gcc/$(s=$(gcc-config -c); echo \"${s%-*}/${s##*-}\")/libgcc_s.so.1\" ||\n",
                    "rendered": {
                      "text": "\t\t{ dfatal \"Failed to install essential binaries\"; exit 1; }\n\n\t# Adapted from https://github.com/zbm-dev/zfsbootmenu\n\tif ! ldd \"$(command -v zpool)\" | grep -qF 'libgcc_s.so' && ldconfig -p 2> /dev/null | grep -qF 'libc.so.6' ; then\n\t\t# On systems with gcc-config (Gentoo, Funtoo, etc.), use it to find libgcc_s\n\t\tif command -v gcc-config >/dev/null; then\n\t\t\tinst_simple \"/usr/lib/gcc/$(s=$(gcc-config -c); echo \"${s%-*}/${s##*-}\")/libgcc_s.so.1\" ||\n",
                      "markdown": "`\t\t{ dfatal \"Failed to install essential binaries\"; exit 1; }\n\n\t# Adapted from https://github.com/zbm-dev/zfsbootmenu\n\tif ! ldd \"$(command -v zpool)\" | grep -qF 'libgcc_s.so' && ldconfig -p 2> /dev/null | grep -qF 'libc.so.6' ; then\n\t\t# On systems with gcc-config (Gentoo, Funtoo, etc.), use it to find libgcc_s\n\t\tif command -v gcc-config >/dev/null; then\n\t\t\tinst_simple \"/usr/lib/gcc/$(s=$(gcc-config -c); echo \"${s%-*}/${s##*-}\")/libgcc_s.so.1\" ||\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/lib/dracut/modules.d/90zfs/module-setup.sh"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 1,
                  "endLine": 35,
                  "endColumn": 7,
                  "snippet": {
                    "text": "\t\tawk \\\n\t\ttr \\\n\t\tcut \\\n\t\thead ||\n\t\t{ dfatal \"Failed to install essential binaries\"; exit 1; }\n\n\t# Adapted from https://github.com/zbm-dev/zfsbootmenu\n",
                    "rendered": {
                      "text": "\t\tawk \\\n\t\ttr \\\n\t\tcut \\\n\t\thead ||\n\t\t{ dfatal \"Failed to install essential binaries\"; exit 1; }\n\n\t# Adapted from https://github.com/zbm-dev/zfsbootmenu\n",
                      "markdown": "`\t\tawk \\\n\t\ttr \\\n\t\tcut \\\n\t\thead ||\n\t\t{ dfatal \"Failed to install essential binaries\"; exit 1; }\n\n\t# Adapted from https://github.com/zbm-dev/zfsbootmenu\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/lib/dracut/modules.d/90zfs/module-setup.sh"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 1,
                  "endLine": 34,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\t\tgrep \\\n\t\tawk \\\n\t\ttr \\\n\t\tcut \\\n\t\thead ||\n\t\t{ dfatal \"Failed to install essential binaries\"; exit 1; }\n\n",
                    "rendered": {
                      "text": "\t\tgrep \\\n\t\tawk \\\n\t\ttr \\\n\t\tcut \\\n\t\thead ||\n\t\t{ dfatal \"Failed to install essential binaries\"; exit 1; }\n\n",
                      "markdown": "`\t\tgrep \\\n\t\tawk \\\n\t\ttr \\\n\t\tcut \\\n\t\thead ||\n\t\t{ dfatal \"Failed to install essential binaries\"; exit 1; }\n\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/lib/dracut/modules.d/90zfs/module-setup.sh"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 1,
                  "endLine": 32,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\t\tmount.zfs \\\n\t\thostid \\\n\t\tgrep \\\n\t\tawk \\\n\t\ttr \\\n\t\tcut \\\n\t\thead ||\n",
                    "rendered": {
                      "text": "\t\tmount.zfs \\\n\t\thostid \\\n\t\tgrep \\\n\t\tawk \\\n\t\ttr \\\n\t\tcut \\\n\t\thead ||\n",
                      "markdown": "`\t\tmount.zfs \\\n\t\thostid \\\n\t\tgrep \\\n\t\tawk \\\n\t\ttr \\\n\t\tcut \\\n\t\thead ||\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/lib/dracut/modules.d/90zfs/module-setup.sh"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 1,
                  "endLine": 31,
                  "endColumn": 7,
                  "snippet": {
                    "text": "\t\tzpool \\\n\t\tmount.zfs \\\n\t\thostid \\\n\t\tgrep \\\n\t\tawk \\\n\t\ttr \\\n\t\tcut \\\n",
                    "rendered": {
                      "text": "\t\tzpool \\\n\t\tmount.zfs \\\n\t\thostid \\\n\t\tgrep \\\n\t\tawk \\\n\t\ttr \\\n\t\tcut \\\n",
                      "markdown": "`\t\tzpool \\\n\t\tmount.zfs \\\n\t\thostid \\\n\t\tgrep \\\n\t\tawk \\\n\t\ttr \\\n\t\tcut \\\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/usr/lib/dracut/modules.d/90zfs/module-setup.sh"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n# shellcheck disable=SC2154\n\ncheck() {\n\t# We depend on udev-rules being loaded\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n# shellcheck disable=SC2154\n\ncheck() {\n\t# We depend on udev-rules being loaded\n",
                      "markdown": "`#!/usr/bin/env bash\n# shellcheck disable=SC2154\n\ncheck() {\n\t# We depend on udev-rules being loaded\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/etc/bash_completion.d/zpool"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 26,
                  "endLine": 27,
                  "endColumn": 34,
                  "snippet": {
                    "text": "__ZFS_CMD=\"/usr/sbin/zfs\"\n__ZPOOL_CMD=\"/usr/sbin/zpool\"\n\n# Disable bash's built-in hostname completion, as this makes it impossible to\n# provide completions containing an @-sign, which is necessary for completing\n# snapshot names. If bash_completion is in use, this will already be disabled\n# and replaced with better completions anyway.\n",
                    "rendered": {
                      "text": "__ZFS_CMD=\"/usr/sbin/zfs\"\n__ZPOOL_CMD=\"/usr/sbin/zpool\"\n\n# Disable bash's built-in hostname completion, as this makes it impossible to\n# provide completions containing an @-sign, which is necessary for completing\n# snapshot names. If bash_completion is in use, this will already be disabled\n# and replaced with better completions anyway.\n",
                      "markdown": "`__ZFS_CMD=\"/usr/sbin/zfs\"\n__ZPOOL_CMD=\"/usr/sbin/zpool\"\n\n# Disable bash's built-in hostname completion, as this makes it impossible to\n# provide completions containing an @-sign, which is necessary for completing\n# snapshot names. If bash_completion is in use, this will already be disabled\n# and replaced with better completions anyway.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/etc/bash_completion.d/zpool"
                },
                "region": {
                  "startLine": 432,
                  "startColumn": 18,
                  "endLine": 432,
                  "endColumn": 23,
                  "snippet": {
                    "text": "\n__zpool_complete()\n{\n    local cur prev cmd cmds pools\n    COMPREPLY=()\n    cur=\"${COMP_WORDS[COMP_CWORD]}\"\n    prev=\"${COMP_WORDS[COMP_CWORD-1]}\"\n",
                    "rendered": {
                      "text": "\n__zpool_complete()\n{\n    local cur prev cmd cmds pools\n    COMPREPLY=()\n    cur=\"${COMP_WORDS[COMP_CWORD]}\"\n    prev=\"${COMP_WORDS[COMP_CWORD-1]}\"\n",
                      "markdown": "`\n__zpool_complete()\n{\n    local cur prev cmd cmds pools\n    COMPREPLY=()\n    cur=\"${COMP_WORDS[COMP_CWORD]}\"\n    prev=\"${COMP_WORDS[COMP_CWORD-1]}\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/etc/bash_completion.d/zpool"
                },
                "region": {
                  "startLine": 232,
                  "startColumn": 18,
                  "endLine": 232,
                  "endColumn": 23,
                  "snippet": {
                    "text": "\n__zfs_complete()\n{\n    local cur prev cmd cmds\n    COMPREPLY=()\n    if type _get_comp_words_by_ref &> /dev/null\n    then\n",
                    "rendered": {
                      "text": "\n__zfs_complete()\n{\n    local cur prev cmd cmds\n    COMPREPLY=()\n    if type _get_comp_words_by_ref &> /dev/null\n    then\n",
                      "markdown": "`\n__zfs_complete()\n{\n    local cur prev cmd cmds\n    COMPREPLY=()\n    if type _get_comp_words_by_ref &> /dev/null\n    then\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/etc/bash_completion.d/zpool"
                },
                "region": {
                  "startLine": 222,
                  "startColumn": 46,
                  "endLine": 222,
                  "endColumn": 52,
                  "snippet": {
                    "text": "\n__zfs_complete_nospace()\n{\n    # Google indicates that there may still be bash versions out there that\n    # don't have compopt.\n    if type compopt &> /dev/null\n    then\n",
                    "rendered": {
                      "text": "\n__zfs_complete_nospace()\n{\n    # Google indicates that there may still be bash versions out there that\n    # don't have compopt.\n    if type compopt &> /dev/null\n    then\n",
                      "markdown": "`\n__zfs_complete_nospace()\n{\n    # Google indicates that there may still be bash versions out there that\n    # don't have compopt.\n    if type compopt &> /dev/null\n    then\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/etc/bash_completion.d/zpool"
                },
                "region": {
                  "startLine": 75,
                  "startColumn": 22,
                  "endLine": 75,
                  "endColumn": 28,
                  "snippet": {
                    "text": "            $__ZFS_CMD list -H -o name -s name -t filesystem,volume -r \"$cur\" | tail -n +2\n            # We output the base dataset name even though we might be\n            # completing a command that can only take a snapshot, because it\n            # prevents bash from considering the completion finished when it\n            # ends in the bare @.\n            echo \"$cur\"\n            echo \"$cur@\"\n",
                    "rendered": {
                      "text": "            $__ZFS_CMD list -H -o name -s name -t filesystem,volume -r \"$cur\" | tail -n +2\n            # We output the base dataset name even though we might be\n            # completing a command that can only take a snapshot, because it\n            # prevents bash from considering the completion finished when it\n            # ends in the bare @.\n            echo \"$cur\"\n            echo \"$cur@\"\n",
                      "markdown": "`            $__ZFS_CMD list -H -o name -s name -t filesystem,volume -r \"$cur\" | tail -n +2\n            # We output the base dataset name even though we might be\n            # completing a command that can only take a snapshot, because it\n            # prevents bash from considering the completion finished when it\n            # ends in the bare @.\n            echo \"$cur\"\n            echo \"$cur@\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/etc/bash_completion.d/zpool"
                },
                "region": {
                  "startLine": 422,
                  "startColumn": 27,
                  "endLine": 422,
                  "endColumn": 32,
                  "snippet": {
                    "text": "\n__zpool_get_editable_properties()\n{\n    $__ZPOOL_CMD get 2>&1 | awk '$2 == \"YES\" {print $1\"=\"}'\n}\n\n__zpool_list_pools()\n",
                    "rendered": {
                      "text": "\n__zpool_get_editable_properties()\n{\n    $__ZPOOL_CMD get 2>&1 | awk '$2 == \"YES\" {print $1\"=\"}'\n}\n\n__zpool_list_pools()\n",
                      "markdown": "`\n__zpool_get_editable_properties()\n{\n    $__ZPOOL_CMD get 2>&1 | awk '$2 == \"YES\" {print $1\"=\"}'\n}\n\n__zpool_list_pools()\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/etc/bash_completion.d/zpool"
                },
                "region": {
                  "startLine": 417,
                  "startColumn": 27,
                  "endLine": 417,
                  "endColumn": 32,
                  "snippet": {
                    "text": "\n__zpool_get_properties()\n{\n    $__ZPOOL_CMD get 2>&1 | awk '$2 == \"YES\" || $2 == \"NO\" {print $1}'; echo all\n}\n\n__zpool_get_editable_properties()\n",
                    "rendered": {
                      "text": "\n__zpool_get_properties()\n{\n    $__ZPOOL_CMD get 2>&1 | awk '$2 == \"YES\" || $2 == \"NO\" {print $1}'; echo all\n}\n\n__zpool_get_editable_properties()\n",
                      "markdown": "`\n__zpool_get_properties()\n{\n    $__ZPOOL_CMD get 2>&1 | awk '$2 == \"YES\" || $2 == \"NO\" {print $1}'; echo all\n}\n\n__zpool_get_editable_properties()\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/etc/bash_completion.d/zpool"
                },
                "region": {
                  "startLine": 412,
                  "startColumn": 53,
                  "endLine": 413,
                  "snippet": {
                    "text": "\n__zpool_get_commands()\n{\n    $__ZPOOL_CMD 2>&1 | awk '/^\\t[a-z]/ {print $1}' | uniq\n}\n\n__zpool_get_properties()\n{\n",
                    "rendered": {
                      "text": "\n__zpool_get_commands()\n{\n    $__ZPOOL_CMD 2>&1 | awk '/^\\t[a-z]/ {print $1}' | uniq\n}\n\n__zpool_get_properties()\n{\n",
                      "markdown": "`\n__zpool_get_commands()\n{\n    $__ZPOOL_CMD 2>&1 | awk '/^\\t[a-z]/ {print $1}' | uniq\n}\n\n__zpool_get_properties()\n{\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/etc/bash_completion.d/zpool"
                },
                "region": {
                  "startLine": 412,
                  "startColumn": 23,
                  "endLine": 412,
                  "endColumn": 28,
                  "snippet": {
                    "text": "\n__zpool_get_commands()\n{\n    $__ZPOOL_CMD 2>&1 | awk '/^\\t[a-z]/ {print $1}' | uniq\n}\n\n__zpool_get_properties()\n",
                    "rendered": {
                      "text": "\n__zpool_get_commands()\n{\n    $__ZPOOL_CMD 2>&1 | awk '/^\\t[a-z]/ {print $1}' | uniq\n}\n\n__zpool_get_properties()\n",
                      "markdown": "`\n__zpool_get_commands()\n{\n    $__ZPOOL_CMD 2>&1 | awk '/^\\t[a-z]/ {print $1}' | uniq\n}\n\n__zpool_get_properties()\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/etc/bash_completion.d/zpool"
                },
                "region": {
                  "startLine": 222,
                  "startColumn": 46,
                  "endLine": 222,
                  "endColumn": 52,
                  "snippet": {
                    "text": "\n__zfs_complete_nospace()\n{\n    # Google indicates that there may still be bash versions out there that\n    # don't have compopt.\n    if type compopt &> /dev/null\n    then\n",
                    "rendered": {
                      "text": "\n__zfs_complete_nospace()\n{\n    # Google indicates that there may still be bash versions out there that\n    # don't have compopt.\n    if type compopt &> /dev/null\n    then\n",
                      "markdown": "`\n__zfs_complete_nospace()\n{\n    # Google indicates that there may still be bash versions out there that\n    # don't have compopt.\n    if type compopt &> /dev/null\n    then\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/etc/bash_completion.d/zpool"
                },
                "region": {
                  "startLine": 143,
                  "startColumn": 81,
                  "endLine": 143,
                  "endColumn": 86,
                  "snippet": {
                    "text": "            local range_start\n            range_start=\"$(expr \"$cur\" : '\\(.*%\\)')\"\n            # shellcheck disable=SC2016\n            $__ZFS_CMD list -H -o name -s name -t snapshot -d 1 \"$base_dataset\" | sed 's$.*@$'\"$range_start\"'$g'\n        fi\n    else\n        __zfs_match_snapshot_or_bookmark\n",
                    "rendered": {
                      "text": "            local range_start\n            range_start=\"$(expr \"$cur\" : '\\(.*%\\)')\"\n            # shellcheck disable=SC2016\n            $__ZFS_CMD list -H -o name -s name -t snapshot -d 1 \"$base_dataset\" | sed 's$.*@$'\"$range_start\"'$g'\n        fi\n    else\n        __zfs_match_snapshot_or_bookmark\n",
                      "markdown": "`            local range_start\n            range_start=\"$(expr \"$cur\" : '\\(.*%\\)')\"\n            # shellcheck disable=SC2016\n            $__ZFS_CMD list -H -o name -s name -t snapshot -d 1 \"$base_dataset\" | sed 's$.*@$'\"$range_start\"'$g'\n        fi\n    else\n        __zfs_match_snapshot_or_bookmark\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/etc/bash_completion.d/zpool"
                },
                "region": {
                  "startLine": 99,
                  "startColumn": 30,
                  "endLine": 99,
                  "endColumn": 35,
                  "snippet": {
                    "text": "                    return 0\n                fi\n            fi\n            echo \"$datasets\" | awk '{print $1 \"@\"}'\n        fi\n    fi\n}\n",
                    "rendered": {
                      "text": "                    return 0\n                fi\n            fi\n            echo \"$datasets\" | awk '{print $1 \"@\"}'\n        fi\n    fi\n}\n",
                      "markdown": "`                    return 0\n                fi\n            fi\n            echo \"$datasets\" | awk '{print $1 \"@\"}'\n        fi\n    fi\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/etc/bash_completion.d/zpool"
                },
                "region": {
                  "startLine": 88,
                  "startColumn": 68,
                  "endLine": 88,
                  "endColumn": 74,
                  "snippet": {
                    "text": "            then\n                # If the current command ends with a slash, then the only way\n                # it can be completed with a single tab press (ie. in this pass)\n                # is if it has exactly one child, so that's the only time we\n                # need to offer a suggestion with an @ appended.\n                local num_children\n                # This is actually off by one as zfs list includes the named\n",
                    "rendered": {
                      "text": "            then\n                # If the current command ends with a slash, then the only way\n                # it can be completed with a single tab press (ie. in this pass)\n                # is if it has exactly one child, so that's the only time we\n                # need to offer a suggestion with an @ appended.\n                local num_children\n                # This is actually off by one as zfs list includes the named\n",
                      "markdown": "`            then\n                # If the current command ends with a slash, then the only way\n                # it can be completed with a single tab press (ie. in this pass)\n                # is if it has exactly one child, so that's the only time we\n                # need to offer a suggestion with an @ appended.\n                local num_children\n                # This is actually off by one as zfs list includes the named\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/etc/bash_completion.d/zpool"
                },
                "region": {
                  "startLine": 75,
                  "startColumn": 22,
                  "endLine": 75,
                  "endColumn": 28,
                  "snippet": {
                    "text": "            $__ZFS_CMD list -H -o name -s name -t filesystem,volume -r \"$cur\" | tail -n +2\n            # We output the base dataset name even though we might be\n            # completing a command that can only take a snapshot, because it\n            # prevents bash from considering the completion finished when it\n            # ends in the bare @.\n            echo \"$cur\"\n            echo \"$cur@\"\n",
                    "rendered": {
                      "text": "            $__ZFS_CMD list -H -o name -s name -t filesystem,volume -r \"$cur\" | tail -n +2\n            # We output the base dataset name even though we might be\n            # completing a command that can only take a snapshot, because it\n            # prevents bash from considering the completion finished when it\n            # ends in the bare @.\n            echo \"$cur\"\n            echo \"$cur@\"\n",
                      "markdown": "`            $__ZFS_CMD list -H -o name -s name -t filesystem,volume -r \"$cur\" | tail -n +2\n            # We output the base dataset name even though we might be\n            # completing a command that can only take a snapshot, because it\n            # prevents bash from considering the completion finished when it\n            # ends in the bare @.\n            echo \"$cur\"\n            echo \"$cur@\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/etc/bash_completion.d/zpool"
                },
                "region": {
                  "startLine": 72,
                  "startColumn": 79,
                  "endLine": 72,
                  "endColumn": 85,
                  "snippet": {
                    "text": "    else\n        if [[ \"$cur\" != \"\" ]] && __zfs_list_datasets \"$cur\" &> /dev/null\n        then\n            $__ZFS_CMD list -H -o name -s name -t filesystem,volume -r \"$cur\" | tail -n +2\n            # We output the base dataset name even though we might be\n            # completing a command that can only take a snapshot, because it\n            # prevents bash from considering the completion finished when it\n",
                    "rendered": {
                      "text": "    else\n        if [[ \"$cur\" != \"\" ]] && __zfs_list_datasets \"$cur\" &> /dev/null\n        then\n            $__ZFS_CMD list -H -o name -s name -t filesystem,volume -r \"$cur\" | tail -n +2\n            # We output the base dataset name even though we might be\n            # completing a command that can only take a snapshot, because it\n            # prevents bash from considering the completion finished when it\n",
                      "markdown": "`    else\n        if [[ \"$cur\" != \"\" ]] && __zfs_list_datasets \"$cur\" &> /dev/null\n        then\n            $__ZFS_CMD list -H -o name -s name -t filesystem,volume -r \"$cur\" | tail -n +2\n            # We output the base dataset name even though we might be\n            # completing a command that can only take a snapshot, because it\n            # prevents bash from considering the completion finished when it\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/etc/bash_completion.d/zpool"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 25,
                  "endLine": 50,
                  "endColumn": 30,
                  "snippet": {
                    "text": "\n__zfs_get_inheritable_properties()\n{\n    $__ZFS_CMD get 2>&1 | awk '$3 == \"YES\" {print $1}'\n}\n\n__zfs_list_datasets()\n",
                    "rendered": {
                      "text": "\n__zfs_get_inheritable_properties()\n{\n    $__ZFS_CMD get 2>&1 | awk '$3 == \"YES\" {print $1}'\n}\n\n__zfs_list_datasets()\n",
                      "markdown": "`\n__zfs_get_inheritable_properties()\n{\n    $__ZFS_CMD get 2>&1 | awk '$3 == \"YES\" {print $1}'\n}\n\n__zfs_list_datasets()\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/etc/bash_completion.d/zpool"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 25,
                  "endLine": 45,
                  "endColumn": 30,
                  "snippet": {
                    "text": "\n__zfs_get_editable_properties()\n{\n    $__ZFS_CMD get 2>&1 | awk '$2 == \"YES\" {print $1\"=\"}'\n}\n\n__zfs_get_inheritable_properties()\n",
                    "rendered": {
                      "text": "\n__zfs_get_editable_properties()\n{\n    $__ZFS_CMD get 2>&1 | awk '$2 == \"YES\" {print $1\"=\"}'\n}\n\n__zfs_get_inheritable_properties()\n",
                      "markdown": "`\n__zfs_get_editable_properties()\n{\n    $__ZFS_CMD get 2>&1 | awk '$2 == \"YES\" {print $1\"=\"}'\n}\n\n__zfs_get_inheritable_properties()\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/etc/bash_completion.d/zpool"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 25,
                  "endLine": 40,
                  "endColumn": 30,
                  "snippet": {
                    "text": "\n__zfs_get_properties()\n{\n    $__ZFS_CMD get 2>&1 | awk '$2 == \"YES\" || $2 == \"NO\" {print $1}'; echo all name space\n}\n\n__zfs_get_editable_properties()\n",
                    "rendered": {
                      "text": "\n__zfs_get_properties()\n{\n    $__ZFS_CMD get 2>&1 | awk '$2 == \"YES\" || $2 == \"NO\" {print $1}'; echo all name space\n}\n\n__zfs_get_editable_properties()\n",
                      "markdown": "`\n__zfs_get_properties()\n{\n    $__ZFS_CMD get 2>&1 | awk '$2 == \"YES\" || $2 == \"NO\" {print $1}'; echo all name space\n}\n\n__zfs_get_editable_properties()\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/etc/bash_completion.d/zpool"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 68,
                  "endLine": 36,
                  "snippet": {
                    "text": "\n__zfs_get_commands()\n{\n    $__ZFS_CMD 2>&1 | awk '/^\\t[a-z]/ {print $1}' | cut -f1 -d '|' | uniq\n}\n\n__zfs_get_properties()\n{\n",
                    "rendered": {
                      "text": "\n__zfs_get_commands()\n{\n    $__ZFS_CMD 2>&1 | awk '/^\\t[a-z]/ {print $1}' | cut -f1 -d '|' | uniq\n}\n\n__zfs_get_properties()\n{\n",
                      "markdown": "`\n__zfs_get_commands()\n{\n    $__ZFS_CMD 2>&1 | awk '/^\\t[a-z]/ {print $1}' | cut -f1 -d '|' | uniq\n}\n\n__zfs_get_properties()\n{\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/etc/bash_completion.d/zpool"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 51,
                  "endLine": 35,
                  "endColumn": 56,
                  "snippet": {
                    "text": "\n__zfs_get_commands()\n{\n    $__ZFS_CMD 2>&1 | awk '/^\\t[a-z]/ {print $1}' | cut -f1 -d '|' | uniq\n}\n\n__zfs_get_properties()\n",
                    "rendered": {
                      "text": "\n__zfs_get_commands()\n{\n    $__ZFS_CMD 2>&1 | awk '/^\\t[a-z]/ {print $1}' | cut -f1 -d '|' | uniq\n}\n\n__zfs_get_properties()\n",
                      "markdown": "`\n__zfs_get_commands()\n{\n    $__ZFS_CMD 2>&1 | awk '/^\\t[a-z]/ {print $1}' | cut -f1 -d '|' | uniq\n}\n\n__zfs_get_properties()\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/zfs-2.2.6-r1.apk/zfs-2.2.6-r1/etc/bash_completion.d/zpool"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 21,
                  "endLine": 35,
                  "endColumn": 26,
                  "snippet": {
                    "text": "\n__zfs_get_commands()\n{\n    $__ZFS_CMD 2>&1 | awk '/^\\t[a-z]/ {print $1}' | cut -f1 -d '|' | uniq\n}\n\n__zfs_get_properties()\n",
                    "rendered": {
                      "text": "\n__zfs_get_commands()\n{\n    $__ZFS_CMD 2>&1 | awk '/^\\t[a-z]/ {print $1}' | cut -f1 -d '|' | uniq\n}\n\n__zfs_get_properties()\n",
                      "markdown": "`\n__zfs_get_commands()\n{\n    $__ZFS_CMD 2>&1 | awk '/^\\t[a-z]/ {print $1}' | cut -f1 -d '|' | uniq\n}\n\n__zfs_get_properties()\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        }
      ],
      "columnKind": "utf16CodeUnits"
    }
  ]
}