{
  "$schema": "https://schemastore.azurewebsites.net/schemas/json/sarif-2.1.0-rtm.6.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "oss-detect-backdoor",
          "organization": "Microsoft Corporation",
          "product": "OSSGadget (https://github.com/Microsoft/OSSGadget)",
          "version": "0.0.0+ed0e2cfe6a"
        }
      },
      "results": [
        {
          "rule": {
            "id": "BD000300"
          },
          "message": {
            "text": "Backdoor: Reverse Shell",
            "id": "BD000300"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/falco-rules-3.2.0-r0.apk/falco-rules-3.2.0-r0/etc/falco/falco_rules.yaml"
                },
                "region": {
                  "startLine": 1022,
                  "startColumn": 42,
                  "endLine": 1022,
                  "endColumn": 55,
                  "snippet": {
                    "text": "- rule: Redirect STDOUT/STDIN to Network Connection in Container\n  desc: >\n    Detect redirection of stdout/stdin to a network connection within a container, achieved by utilizing a \n    variant of the dup syscall (potential reverse shell or remote code execution \n    https://github.com/swisskyrepo/PayloadsAllTheThings/). This detection is behavior-based and may generate \n    noise in the system, and can be adjusted using the user_known_stand_streams_redirect_activities template \n    macro. Tuning can be performed similarly to existing detections based on process lineage or container images, \n",
                    "rendered": {
                      "text": "- rule: Redirect STDOUT/STDIN to Network Connection in Container\n  desc: >\n    Detect redirection of stdout/stdin to a network connection within a container, achieved by utilizing a \n    variant of the dup syscall (potential reverse shell or remote code execution \n    https://github.com/swisskyrepo/PayloadsAllTheThings/). This detection is behavior-based and may generate \n    noise in the system, and can be adjusted using the user_known_stand_streams_redirect_activities template \n    macro. Tuning can be performed similarly to existing detections based on process lineage or container images, \n",
                      "markdown": "`- rule: Redirect STDOUT/STDIN to Network Connection in Container\n  desc: >\n    Detect redirection of stdout/stdin to a network connection within a container, achieved by utilizing a \n    variant of the dup syscall (potential reverse shell or remote code execution \n    https://github.com/swisskyrepo/PayloadsAllTheThings/). This detection is behavior-based and may generate \n    noise in the system, and can be adjusted using the user_known_stand_streams_redirect_activities template \n    macro. Tuning can be performed similarly to existing detections based on process lineage or container images, \n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000300"
          },
          "message": {
            "text": "Backdoor: Reverse Shell",
            "id": "BD000300"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/falco-rules-3.2.0-r0.apk/falco-rules-3.2.0-r0/etc/falco/falco_rules.yaml"
                },
                "region": {
                  "startLine": 841,
                  "startColumn": 30,
                  "endLine": 841,
                  "endColumn": 43,
                  "snippet": {
                    "text": "- rule: Netcat Remote Code Execution in Container\n  desc: > \n    Netcat Program runs inside container that allows remote code execution and may be utilized \n    as a part of a variety of reverse shell payload https://github.com/swisskyrepo/PayloadsAllTheThings/.\n    These programs are of higher relevance as they are commonly installed on UNIX-like operating systems.\n    Can fire in combination with the \"Redirect STDOUT/STDIN to Network Connection in Container\" \n    rule as it utilizes a different evt.type.\n",
                    "rendered": {
                      "text": "- rule: Netcat Remote Code Execution in Container\n  desc: > \n    Netcat Program runs inside container that allows remote code execution and may be utilized \n    as a part of a variety of reverse shell payload https://github.com/swisskyrepo/PayloadsAllTheThings/.\n    These programs are of higher relevance as they are commonly installed on UNIX-like operating systems.\n    Can fire in combination with the \"Redirect STDOUT/STDIN to Network Connection in Container\" \n    rule as it utilizes a different evt.type.\n",
                      "markdown": "`- rule: Netcat Remote Code Execution in Container\n  desc: > \n    Netcat Program runs inside container that allows remote code execution and may be utilized \n    as a part of a variety of reverse shell payload https://github.com/swisskyrepo/PayloadsAllTheThings/.\n    These programs are of higher relevance as they are commonly installed on UNIX-like operating systems.\n    Can fire in combination with the \"Redirect STDOUT/STDIN to Network Connection in Container\" \n    rule as it utilizes a different evt.type.\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/falco-rules-3.2.0-r0.apk/falco-rules-3.2.0-r0/etc/falco/falco_rules.yaml"
                },
                "region": {
                  "startLine": 1140,
                  "startColumn": 124,
                  "endLine": 1140,
                  "endColumn": 132,
                  "snippet": {
                    "text": "    Detect attempts to search for private keys or passwords using the grep or find command, particularly targeting standard \n    AWS credential locations. This is often seen with unsophisticated attackers, as there are many ways to access files \n    using bash built-ins that could go unnoticed. Regardless, this serves as a solid baseline detection that can be tailored \n    to cover these gaps while maintaining an acceptable noise level. This rule complements the rule \"Search Private Keys or Passwords\".\n  condition: >\n    spawned_process \n    and ((grep_commands and private_aws_credentials) or\n",
                    "rendered": {
                      "text": "    Detect attempts to search for private keys or passwords using the grep or find command, particularly targeting standard \n    AWS credential locations. This is often seen with unsophisticated attackers, as there are many ways to access files \n    using bash built-ins that could go unnoticed. Regardless, this serves as a solid baseline detection that can be tailored \n    to cover these gaps while maintaining an acceptable noise level. This rule complements the rule \"Search Private Keys or Passwords\".\n  condition: >\n    spawned_process \n    and ((grep_commands and private_aws_credentials) or\n",
                      "markdown": "`    Detect attempts to search for private keys or passwords using the grep or find command, particularly targeting standard \n    AWS credential locations. This is often seen with unsophisticated attackers, as there are many ways to access files \n    using bash built-ins that could go unnoticed. Regardless, this serves as a solid baseline detection that can be tailored \n    to cover these gaps while maintaining an acceptable noise level. This rule complements the rule \"Search Private Keys or Passwords\".\n  condition: >\n    spawned_process \n    and ((grep_commands and private_aws_credentials) or\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/falco-rules-3.2.0-r0.apk/falco-rules-3.2.0-r0/etc/falco/falco_rules.yaml"
                },
                "region": {
                  "startLine": 1137,
                  "startColumn": 50,
                  "endLine": 1137,
                  "endColumn": 58,
                  "snippet": {
                    "text": "\n- rule: Find AWS Credentials\n  desc: >\n    Detect attempts to search for private keys or passwords using the grep or find command, particularly targeting standard \n    AWS credential locations. This is often seen with unsophisticated attackers, as there are many ways to access files \n    using bash built-ins that could go unnoticed. Regardless, this serves as a solid baseline detection that can be tailored \n    to cover these gaps while maintaining an acceptable noise level. This rule complements the rule \"Search Private Keys or Passwords\".\n",
                    "rendered": {
                      "text": "\n- rule: Find AWS Credentials\n  desc: >\n    Detect attempts to search for private keys or passwords using the grep or find command, particularly targeting standard \n    AWS credential locations. This is often seen with unsophisticated attackers, as there are many ways to access files \n    using bash built-ins that could go unnoticed. Regardless, this serves as a solid baseline detection that can be tailored \n    to cover these gaps while maintaining an acceptable noise level. This rule complements the rule \"Search Private Keys or Passwords\".\n",
                      "markdown": "`\n- rule: Find AWS Credentials\n  desc: >\n    Detect attempts to search for private keys or passwords using the grep or find command, particularly targeting standard \n    AWS credential locations. This is often seen with unsophisticated attackers, as there are many ways to access files \n    using bash built-ins that could go unnoticed. Regardless, this serves as a solid baseline detection that can be tailored \n    to cover these gaps while maintaining an acceptable noise level. This rule complements the rule \"Search Private Keys or Passwords\".\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/falco-rules-3.2.0-r0.apk/falco-rules-3.2.0-r0/etc/falco/falco_rules.yaml"
                },
                "region": {
                  "startLine": 896,
                  "startColumn": 31,
                  "endLine": 896,
                  "endColumn": 39,
                  "snippet": {
                    "text": "                                  proc.args contains \"id_ecdsa\"\n          )\n        ))\n  output: Grep private keys or passwords activities found (evt_type=%evt.type user=%user.name user_uid=%user.uid user_loginuid=%user.loginuid process=%proc.name proc_exepath=%proc.exepath parent=%proc.pname command=%proc.cmdline terminal=%proc.tty exe_flags=%evt.arg.flags %container.info)\n  priority:\n    WARNING\n  tags: [maturity_stable, host, container, process, filesystem, mitre_credential_access, T1552.001]\n",
                    "rendered": {
                      "text": "                                  proc.args contains \"id_ecdsa\"\n          )\n        ))\n  output: Grep private keys or passwords activities found (evt_type=%evt.type user=%user.name user_uid=%user.uid user_loginuid=%user.loginuid process=%proc.name proc_exepath=%proc.exepath parent=%proc.pname command=%proc.cmdline terminal=%proc.tty exe_flags=%evt.arg.flags %container.info)\n  priority:\n    WARNING\n  tags: [maturity_stable, host, container, process, filesystem, mitre_credential_access, T1552.001]\n",
                      "markdown": "`                                  proc.args contains \"id_ecdsa\"\n          )\n        ))\n  output: Grep private keys or passwords activities found (evt_type=%evt.type user=%user.name user_uid=%user.uid user_loginuid=%user.loginuid process=%proc.name proc_exepath=%proc.exepath parent=%proc.pname command=%proc.cmdline terminal=%proc.tty exe_flags=%evt.arg.flags %container.info)\n  priority:\n    WARNING\n  tags: [maturity_stable, host, container, process, filesystem, mitre_credential_access, T1552.001]\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/falco-rules-3.2.0-r0.apk/falco-rules-3.2.0-r0/etc/falco/falco_rules.yaml"
                },
                "region": {
                  "startLine": 889,
                  "startColumn": 43,
                  "endLine": 889,
                  "endColumn": 51,
                  "snippet": {
                    "text": "    an acceptable noise level.\n  condition: >\n    spawned_process \n    and ((grep_commands and private_key_or_password) or\n         (proc.name = \"find\" and (proc.args contains \"id_rsa\" or \n                                  proc.args contains \"id_dsa\" or \n                                  proc.args contains \"id_ed25519\" or \n",
                    "rendered": {
                      "text": "    an acceptable noise level.\n  condition: >\n    spawned_process \n    and ((grep_commands and private_key_or_password) or\n         (proc.name = \"find\" and (proc.args contains \"id_rsa\" or \n                                  proc.args contains \"id_dsa\" or \n                                  proc.args contains \"id_ed25519\" or \n",
                      "markdown": "`    an acceptable noise level.\n  condition: >\n    spawned_process \n    and ((grep_commands and private_key_or_password) or\n         (proc.name = \"find\" and (proc.args contains \"id_rsa\" or \n                                  proc.args contains \"id_dsa\" or \n                                  proc.args contains \"id_ed25519\" or \n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/falco-rules-3.2.0-r0.apk/falco-rules-3.2.0-r0/etc/falco/falco_rules.yaml"
                },
                "region": {
                  "startLine": 889,
                  "startColumn": 28,
                  "endLine": 889,
                  "endColumn": 39,
                  "snippet": {
                    "text": "    an acceptable noise level.\n  condition: >\n    spawned_process \n    and ((grep_commands and private_key_or_password) or\n         (proc.name = \"find\" and (proc.args contains \"id_rsa\" or \n                                  proc.args contains \"id_dsa\" or \n                                  proc.args contains \"id_ed25519\" or \n",
                    "rendered": {
                      "text": "    an acceptable noise level.\n  condition: >\n    spawned_process \n    and ((grep_commands and private_key_or_password) or\n         (proc.name = \"find\" and (proc.args contains \"id_rsa\" or \n                                  proc.args contains \"id_dsa\" or \n                                  proc.args contains \"id_ed25519\" or \n",
                      "markdown": "`    an acceptable noise level.\n  condition: >\n    spawned_process \n    and ((grep_commands and private_key_or_password) or\n         (proc.name = \"find\" and (proc.args contains \"id_rsa\" or \n                                  proc.args contains \"id_dsa\" or \n                                  proc.args contains \"id_ed25519\" or \n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/falco-rules-3.2.0-r0.apk/falco-rules-3.2.0-r0/etc/falco/falco_rules.yaml"
                },
                "region": {
                  "startLine": 883,
                  "startColumn": 50,
                  "endLine": 883,
                  "endColumn": 58,
                  "snippet": {
                    "text": "\n- rule: Search Private Keys or Passwords\n  desc: >\n    Detect attempts to search for private keys or passwords using the grep or find command. This is often seen with \n    unsophisticated attackers, as there are many ways to access files using bash built-ins that could go unnoticed. \n    Regardless, this serves as a solid baseline detection that can be tailored to cover these gaps while maintaining \n    an acceptable noise level.\n",
                    "rendered": {
                      "text": "\n- rule: Search Private Keys or Passwords\n  desc: >\n    Detect attempts to search for private keys or passwords using the grep or find command. This is often seen with \n    unsophisticated attackers, as there are many ways to access files using bash built-ins that could go unnoticed. \n    Regardless, this serves as a solid baseline detection that can be tailored to cover these gaps while maintaining \n    an acceptable noise level.\n",
                      "markdown": "`\n- rule: Search Private Keys or Passwords\n  desc: >\n    Detect attempts to search for private keys or passwords using the grep or find command. This is often seen with \n    unsophisticated attackers, as there are many ways to access files using bash built-ins that could go unnoticed. \n    Regardless, this serves as a solid baseline detection that can be tailored to cover these gaps while maintaining \n    an acceptable noise level.\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/falco-rules-3.2.0-r0.apk/falco-rules-3.2.0-r0/etc/falco/falco_rules.yaml"
                },
                "region": {
                  "startLine": 881,
                  "startColumn": 31,
                  "endLine": 881,
                  "endColumn": 39,
                  "snippet": {
                    "text": "       proc.args icontains \" user \"))\n    )\n\n- rule: Search Private Keys or Passwords\n  desc: >\n    Detect attempts to search for private keys or passwords using the grep or find command. This is often seen with \n    unsophisticated attackers, as there are many ways to access files using bash built-ins that could go unnoticed. \n",
                    "rendered": {
                      "text": "       proc.args icontains \" user \"))\n    )\n\n- rule: Search Private Keys or Passwords\n  desc: >\n    Detect attempts to search for private keys or passwords using the grep or find command. This is often seen with \n    unsophisticated attackers, as there are many ways to access files using bash built-ins that could go unnoticed. \n",
                      "markdown": "`       proc.args icontains \" user \"))\n    )\n\n- rule: Search Private Keys or Passwords\n  desc: >\n    Detect attempts to search for private keys or passwords using the grep or find command. This is often seen with \n    unsophisticated attackers, as there are many ways to access files using bash built-ins that could go unnoticed. \n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/falco-rules-3.2.0-r0.apk/falco-rules-3.2.0-r0/etc/falco/falco_rules.yaml"
                },
                "region": {
                  "startLine": 868,
                  "startColumn": 24,
                  "endLine": 868,
                  "endColumn": 32,
                  "snippet": {
                    "text": "- macro: grep_more\n  condition: (never_true)\n\n- macro: private_key_or_password\n  condition: >\n    (proc.args icontains \"BEGIN PRIVATE\" or\n     proc.args icontains \"BEGIN OPENSSH PRIVATE\" or\n",
                    "rendered": {
                      "text": "- macro: grep_more\n  condition: (never_true)\n\n- macro: private_key_or_password\n  condition: >\n    (proc.args icontains \"BEGIN PRIVATE\" or\n     proc.args icontains \"BEGIN OPENSSH PRIVATE\" or\n",
                      "markdown": "`- macro: grep_more\n  condition: (never_true)\n\n- macro: private_key_or_password\n  condition: >\n    (proc.args icontains \"BEGIN PRIVATE\" or\n     proc.args icontains \"BEGIN OPENSSH PRIVATE\" or\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/falco-rules-3.2.0-r0.apk/falco-rules-3.2.0-r0/etc/falco/falco_rules.yaml"
                },
                "region": {
                  "startLine": 868,
                  "startColumn": 9,
                  "endLine": 868,
                  "endColumn": 20,
                  "snippet": {
                    "text": "- macro: grep_more\n  condition: (never_true)\n\n- macro: private_key_or_password\n  condition: >\n    (proc.args icontains \"BEGIN PRIVATE\" or\n     proc.args icontains \"BEGIN OPENSSH PRIVATE\" or\n",
                    "rendered": {
                      "text": "- macro: grep_more\n  condition: (never_true)\n\n- macro: private_key_or_password\n  condition: >\n    (proc.args icontains \"BEGIN PRIVATE\" or\n     proc.args icontains \"BEGIN OPENSSH PRIVATE\" or\n",
                      "markdown": "`- macro: grep_more\n  condition: (never_true)\n\n- macro: private_key_or_password\n  condition: >\n    (proc.args icontains \"BEGIN PRIVATE\" or\n     proc.args icontains \"BEGIN OPENSSH PRIVATE\" or\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/falco-rules-3.2.0-r0.apk/falco-rules-3.2.0-r0/etc/falco/falco_rules.yaml"
                },
                "region": {
                  "startLine": 864,
                  "startColumn": 53,
                  "endLine": 864,
                  "endColumn": 61,
                  "snippet": {
                    "text": "- macro: grep_commands\n  condition: (proc.name in (grep_binaries))\n\n# a less restrictive search for things that might be passwords/ssh/user etc.\n- macro: grep_more\n  condition: (never_true)\n\n",
                    "rendered": {
                      "text": "- macro: grep_commands\n  condition: (proc.name in (grep_binaries))\n\n# a less restrictive search for things that might be passwords/ssh/user etc.\n- macro: grep_more\n  condition: (never_true)\n\n",
                      "markdown": "`- macro: grep_commands\n  condition: (proc.name in (grep_binaries))\n\n# a less restrictive search for things that might be passwords/ssh/user etc.\n- macro: grep_more\n  condition: (never_true)\n\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/falco-rules-3.2.0-r0.apk/falco-rules-3.2.0-r0/etc/falco/falco_rules.yaml"
                },
                "region": {
                  "startLine": 400,
                  "startColumn": 70,
                  "endLine": 400,
                  "endColumn": 78,
                  "snippet": {
                    "text": "\n- rule: Read sensitive file untrusted\n  desc: >\n    An attempt to read any sensitive file (e.g. files containing user/password/authentication\n    information). Exceptions are made for known trusted programs. Can be customized as needed.\n    In modern containerized cloud infrastructures, accessing traditional Linux sensitive files \n    might be less relevant, yet it remains valuable for baseline detections. While we provide additional \n",
                    "rendered": {
                      "text": "\n- rule: Read sensitive file untrusted\n  desc: >\n    An attempt to read any sensitive file (e.g. files containing user/password/authentication\n    information). Exceptions are made for known trusted programs. Can be customized as needed.\n    In modern containerized cloud infrastructures, accessing traditional Linux sensitive files \n    might be less relevant, yet it remains valuable for baseline detections. While we provide additional \n",
                      "markdown": "`\n- rule: Read sensitive file untrusted\n  desc: >\n    An attempt to read any sensitive file (e.g. files containing user/password/authentication\n    information). Exceptions are made for known trusted programs. Can be customized as needed.\n    In modern containerized cloud infrastructures, accessing traditional Linux sensitive files \n    might be less relevant, yet it remains valuable for baseline detections. While we provide additional \n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/falco-rules-3.2.0-r0.apk/falco-rules-3.2.0-r0/etc/falco/falco_rules.yaml"
                },
                "region": {
                  "startLine": 345,
                  "startColumn": 70,
                  "endLine": 345,
                  "endColumn": 78,
                  "snippet": {
                    "text": "\n- rule: Read sensitive file trusted after startup\n  desc: >\n    An attempt to read any sensitive file (e.g. files containing user/password/authentication\n    information) by a trusted program after startup. Trusted programs might read these files\n    at startup to load initial state, but not afterwards. Can be customized as needed.\n    In modern containerized cloud infrastructures, accessing traditional Linux sensitive files \n",
                    "rendered": {
                      "text": "\n- rule: Read sensitive file trusted after startup\n  desc: >\n    An attempt to read any sensitive file (e.g. files containing user/password/authentication\n    information) by a trusted program after startup. Trusted programs might read these files\n    at startup to load initial state, but not afterwards. Can be customized as needed.\n    In modern containerized cloud infrastructures, accessing traditional Linux sensitive files \n",
                      "markdown": "`\n- rule: Read sensitive file trusted after startup\n  desc: >\n    An attempt to read any sensitive file (e.g. files containing user/password/authentication\n    information) by a trusted program after startup. Trusted programs might read these files\n    at startup to load initial state, but not afterwards. Can be customized as needed.\n    In modern containerized cloud infrastructures, accessing traditional Linux sensitive files \n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/falco-rules-3.2.0-r0.apk/falco-rules-3.2.0-r0/etc/falco/falco_rules.yaml"
                },
                "region": {
                  "startLine": 328,
                  "startColumn": 34,
                  "endLine": 328,
                  "endColumn": 38,
                  "snippet": {
                    "text": "  condition: > \n    (open_read or open_file_failed) \n    and (etc_dir or user_ssh_directory or \n         fd.name startswith /root/.ssh or \n         fd.name contains \"id_rsa\") \n    and directory_traversal \n    and not proc.pname in (shell_binaries)\n",
                    "rendered": {
                      "text": "  condition: > \n    (open_read or open_file_failed) \n    and (etc_dir or user_ssh_directory or \n         fd.name startswith /root/.ssh or \n         fd.name contains \"id_rsa\") \n    and directory_traversal \n    and not proc.pname in (shell_binaries)\n",
                      "markdown": "`  condition: > \n    (open_read or open_file_failed) \n    and (etc_dir or user_ssh_directory or \n         fd.name startswith /root/.ssh or \n         fd.name contains \"id_rsa\") \n    and directory_traversal \n    and not proc.pname in (shell_binaries)\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/falco-rules-3.2.0-r0.apk/falco-rules-3.2.0-r0/etc/falco/falco_rules.yaml"
                },
                "region": {
                  "startLine": 312,
                  "startColumn": 66,
                  "endLine": 312,
                  "endColumn": 70,
                  "snippet": {
                    "text": "  condition: (proc.cmdline startswith \"perl /opt/VRTSsfmh/bin/mh_driver.pl\")\n\n- macro: user_ssh_directory\n  condition: (fd.name contains '/.ssh/' and fd.name glob '/home/*/.ssh/*')\n\n- macro: directory_traversal\n  condition: (fd.nameraw contains '../' and fd.nameraw glob '*../*../*')\n",
                    "rendered": {
                      "text": "  condition: (proc.cmdline startswith \"perl /opt/VRTSsfmh/bin/mh_driver.pl\")\n\n- macro: user_ssh_directory\n  condition: (fd.name contains '/.ssh/' and fd.name glob '/home/*/.ssh/*')\n\n- macro: directory_traversal\n  condition: (fd.nameraw contains '../' and fd.nameraw glob '*../*../*')\n",
                      "markdown": "`  condition: (proc.cmdline startswith \"perl /opt/VRTSsfmh/bin/mh_driver.pl\")\n\n- macro: user_ssh_directory\n  condition: (fd.name contains '/.ssh/' and fd.name glob '/home/*/.ssh/*')\n\n- macro: directory_traversal\n  condition: (fd.nameraw contains '../' and fd.nameraw glob '*../*../*')\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/falco-rules-3.2.0-r0.apk/falco-rules-3.2.0-r0/etc/falco/falco_rules.yaml"
                },
                "region": {
                  "startLine": 312,
                  "startColumn": 33,
                  "endLine": 312,
                  "endColumn": 37,
                  "snippet": {
                    "text": "  condition: (proc.cmdline startswith \"perl /opt/VRTSsfmh/bin/mh_driver.pl\")\n\n- macro: user_ssh_directory\n  condition: (fd.name contains '/.ssh/' and fd.name glob '/home/*/.ssh/*')\n\n- macro: directory_traversal\n  condition: (fd.nameraw contains '../' and fd.nameraw glob '*../*../*')\n",
                    "rendered": {
                      "text": "  condition: (proc.cmdline startswith \"perl /opt/VRTSsfmh/bin/mh_driver.pl\")\n\n- macro: user_ssh_directory\n  condition: (fd.name contains '/.ssh/' and fd.name glob '/home/*/.ssh/*')\n\n- macro: directory_traversal\n  condition: (fd.nameraw contains '../' and fd.nameraw glob '*../*../*')\n",
                      "markdown": "`  condition: (proc.cmdline startswith \"perl /opt/VRTSsfmh/bin/mh_driver.pl\")\n\n- macro: user_ssh_directory\n  condition: (fd.name contains '/.ssh/' and fd.name glob '/home/*/.ssh/*')\n\n- macro: directory_traversal\n  condition: (fd.nameraw contains '../' and fd.nameraw glob '*../*../*')\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000703"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Username)",
            "id": "BD000703"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/falco-rules-3.2.0-r0.apk/falco-rules-3.2.0-r0/etc/falco/falco_rules.yaml"
                },
                "region": {
                  "startLine": 758,
                  "startColumn": 12,
                  "endLine": 758,
                  "endColumn": 18,
                  "snippet": {
                    "text": "    '\"sh -c crontab -l 2\"',\n    '\"sh -c lsb_release -a\"',\n    '\"sh -c lsb_release -is 2>/dev/null\"',\n    '\"sh -c whoami\"',\n    '\"sh -c node_modules/.bin/bower-installer\"',\n    '\"sh -c /bin/hostname -f 2> /dev/null\"',\n    '\"sh -c locale -a\"',\n",
                    "rendered": {
                      "text": "    '\"sh -c crontab -l 2\"',\n    '\"sh -c lsb_release -a\"',\n    '\"sh -c lsb_release -is 2>/dev/null\"',\n    '\"sh -c whoami\"',\n    '\"sh -c node_modules/.bin/bower-installer\"',\n    '\"sh -c /bin/hostname -f 2> /dev/null\"',\n    '\"sh -c locale -a\"',\n",
                      "markdown": "`    '\"sh -c crontab -l 2\"',\n    '\"sh -c lsb_release -a\"',\n    '\"sh -c lsb_release -is 2>/dev/null\"',\n    '\"sh -c whoami\"',\n    '\"sh -c node_modules/.bin/bower-installer\"',\n    '\"sh -c /bin/hostname -f 2> /dev/null\"',\n    '\"sh -c locale -a\"',\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/falco-rules-3.2.0-r0.apk/falco-rules-3.2.0-r0/etc/falco/falco_rules.yaml"
                },
                "region": {
                  "startLine": 760,
                  "startColumn": 17,
                  "endLine": 760,
                  "endColumn": 25,
                  "snippet": {
                    "text": "    '\"sh -c lsb_release -is 2>/dev/null\"',\n    '\"sh -c whoami\"',\n    '\"sh -c node_modules/.bin/bower-installer\"',\n    '\"sh -c /bin/hostname -f 2> /dev/null\"',\n    '\"sh -c locale -a\"',\n    '\"sh -c  -t -i\"',\n    '\"sh -c openssl version\"',\n",
                    "rendered": {
                      "text": "    '\"sh -c lsb_release -is 2>/dev/null\"',\n    '\"sh -c whoami\"',\n    '\"sh -c node_modules/.bin/bower-installer\"',\n    '\"sh -c /bin/hostname -f 2> /dev/null\"',\n    '\"sh -c locale -a\"',\n    '\"sh -c  -t -i\"',\n    '\"sh -c openssl version\"',\n",
                      "markdown": "`    '\"sh -c lsb_release -is 2>/dev/null\"',\n    '\"sh -c whoami\"',\n    '\"sh -c node_modules/.bin/bower-installer\"',\n    '\"sh -c /bin/hostname -f 2> /dev/null\"',\n    '\"sh -c locale -a\"',\n    '\"sh -c  -t -i\"',\n    '\"sh -c openssl version\"',\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/falco-rules-3.2.0-r0.apk/falco-rules-3.2.0-r0/etc/falco/falco_rules.yaml"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 20,
                  "endLine": 58,
                  "endColumn": 28,
                  "snippet": {
                    "text": "# to true and does nothing, the perfect empty template for `logical` cases as opposed to list templates.\n# When tuning the rule you can override the macro with something useful, e.g.\n# - macro: allowed_ssh_hosts\n#   condition: (evt.hostname contains xyz)\n- macro: never_true\n  condition: (evt.num=0)\n\n",
                    "rendered": {
                      "text": "# to true and does nothing, the perfect empty template for `logical` cases as opposed to list templates.\n# When tuning the rule you can override the macro with something useful, e.g.\n# - macro: allowed_ssh_hosts\n#   condition: (evt.hostname contains xyz)\n- macro: never_true\n  condition: (evt.num=0)\n\n",
                      "markdown": "`# to true and does nothing, the perfect empty template for `logical` cases as opposed to list templates.\n# When tuning the rule you can override the macro with something useful, e.g.\n# - macro: allowed_ssh_hosts\n#   condition: (evt.hostname contains xyz)\n- macro: never_true\n  condition: (evt.num=0)\n\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/falco-rules-3.2.0-r0.apk/falco-rules-3.2.0-r0/etc/falco/falco_rules.yaml"
                },
                "region": {
                  "startLine": 1139,
                  "startColumn": 9,
                  "endLine": 1139,
                  "endColumn": 15,
                  "snippet": {
                    "text": "  desc: >\n    Detect attempts to search for private keys or passwords using the grep or find command, particularly targeting standard \n    AWS credential locations. This is often seen with unsophisticated attackers, as there are many ways to access files \n    using bash built-ins that could go unnoticed. Regardless, this serves as a solid baseline detection that can be tailored \n    to cover these gaps while maintaining an acceptable noise level. This rule complements the rule \"Search Private Keys or Passwords\".\n  condition: >\n    spawned_process \n",
                    "rendered": {
                      "text": "  desc: >\n    Detect attempts to search for private keys or passwords using the grep or find command, particularly targeting standard \n    AWS credential locations. This is often seen with unsophisticated attackers, as there are many ways to access files \n    using bash built-ins that could go unnoticed. Regardless, this serves as a solid baseline detection that can be tailored \n    to cover these gaps while maintaining an acceptable noise level. This rule complements the rule \"Search Private Keys or Passwords\".\n  condition: >\n    spawned_process \n",
                      "markdown": "`  desc: >\n    Detect attempts to search for private keys or passwords using the grep or find command, particularly targeting standard \n    AWS credential locations. This is often seen with unsophisticated attackers, as there are many ways to access files \n    using bash built-ins that could go unnoticed. Regardless, this serves as a solid baseline detection that can be tailored \n    to cover these gaps while maintaining an acceptable noise level. This rule complements the rule \"Search Private Keys or Passwords\".\n  condition: >\n    spawned_process \n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/falco-rules-3.2.0-r0.apk/falco-rules-3.2.0-r0/etc/falco/falco_rules.yaml"
                },
                "region": {
                  "startLine": 1105,
                  "startColumn": 55,
                  "endLine": 1105,
                  "endColumn": 59,
                  "snippet": {
                    "text": "    Detect an attempt to inject potentially malicious code into a process using PTRACE in order to evade \n    process-based defenses or elevate privileges. Common anti-patterns are debuggers. Additionally, profiling \n    your environment via the known_ptrace_procs template macro can reduce noise. \n    A successful ptrace syscall generates multiple logs at once.\n  condition: > \n    ptrace_attach_or_injection \n    and proc_name_exists \n",
                    "rendered": {
                      "text": "    Detect an attempt to inject potentially malicious code into a process using PTRACE in order to evade \n    process-based defenses or elevate privileges. Common anti-patterns are debuggers. Additionally, profiling \n    your environment via the known_ptrace_procs template macro can reduce noise. \n    A successful ptrace syscall generates multiple logs at once.\n  condition: > \n    ptrace_attach_or_injection \n    and proc_name_exists \n",
                      "markdown": "`    Detect an attempt to inject potentially malicious code into a process using PTRACE in order to evade \n    process-based defenses or elevate privileges. Common anti-patterns are debuggers. Additionally, profiling \n    your environment via the known_ptrace_procs template macro can reduce noise. \n    A successful ptrace syscall generates multiple logs at once.\n  condition: > \n    ptrace_attach_or_injection \n    and proc_name_exists \n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/falco-rules-3.2.0-r0.apk/falco-rules-3.2.0-r0/etc/falco/falco_rules.yaml"
                },
                "region": {
                  "startLine": 992,
                  "startColumn": 28,
                  "endLine": 992,
                  "endColumn": 32,
                  "snippet": {
                    "text": "\n- rule: Packet socket created in container\n  desc: > \n    Detect new packet socket at the device driver (OSI Layer 2) level in a container. Packet socket could be used for ARP Spoofing \n    and privilege escalation (CVE-2020-14386) by an attacker. Noise can be reduced by using the user_known_packet_socket_binaries\n    template list.\n  condition: > \n",
                    "rendered": {
                      "text": "\n- rule: Packet socket created in container\n  desc: > \n    Detect new packet socket at the device driver (OSI Layer 2) level in a container. Packet socket could be used for ARP Spoofing \n    and privilege escalation (CVE-2020-14386) by an attacker. Noise can be reduced by using the user_known_packet_socket_binaries\n    template list.\n  condition: > \n",
                      "markdown": "`\n- rule: Packet socket created in container\n  desc: > \n    Detect new packet socket at the device driver (OSI Layer 2) level in a container. Packet socket could be used for ARP Spoofing \n    and privilege escalation (CVE-2020-14386) by an attacker. Noise can be reduced by using the user_known_packet_socket_binaries\n    template list.\n  condition: > \n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/falco-rules-3.2.0-r0.apk/falco-rules-3.2.0-r0/etc/falco/falco_rules.yaml"
                },
                "region": {
                  "startLine": 884,
                  "startColumn": 75,
                  "endLine": 884,
                  "endColumn": 81,
                  "snippet": {
                    "text": "- rule: Search Private Keys or Passwords\n  desc: >\n    Detect attempts to search for private keys or passwords using the grep or find command. This is often seen with \n    unsophisticated attackers, as there are many ways to access files using bash built-ins that could go unnoticed. \n    Regardless, this serves as a solid baseline detection that can be tailored to cover these gaps while maintaining \n    an acceptable noise level.\n  condition: >\n",
                    "rendered": {
                      "text": "- rule: Search Private Keys or Passwords\n  desc: >\n    Detect attempts to search for private keys or passwords using the grep or find command. This is often seen with \n    unsophisticated attackers, as there are many ways to access files using bash built-ins that could go unnoticed. \n    Regardless, this serves as a solid baseline detection that can be tailored to cover these gaps while maintaining \n    an acceptable noise level.\n  condition: >\n",
                      "markdown": "`- rule: Search Private Keys or Passwords\n  desc: >\n    Detect attempts to search for private keys or passwords using the grep or find command. This is often seen with \n    unsophisticated attackers, as there are many ways to access files using bash built-ins that could go unnoticed. \n    Regardless, this serves as a solid baseline detection that can be tailored to cover these gaps while maintaining \n    an acceptable noise level.\n  condition: >\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/falco-rules-3.2.0-r0.apk/falco-rules-3.2.0-r0/etc/falco/falco_rules.yaml"
                },
                "region": {
                  "startLine": 826,
                  "startColumn": 36,
                  "endLine": 826,
                  "endColumn": 45,
                  "snippet": {
                    "text": "    is of utmost importance. Audit your complete infrastructure and pinpoint any potential machines from which the API server \n    might be accessible based on your network layout. If Falco can't operate on all these machines, consider analyzing the \n    Kubernetes audit logs (typically drained from control nodes, and Falco offers a k8saudit plugin) as an additional data \n    source for detections within the control plane.\n  condition: >\n    evt.type=connect and evt.dir=< \n    and (fd.typechar=4 or fd.typechar=6) \n",
                    "rendered": {
                      "text": "    is of utmost importance. Audit your complete infrastructure and pinpoint any potential machines from which the API server \n    might be accessible based on your network layout. If Falco can't operate on all these machines, consider analyzing the \n    Kubernetes audit logs (typically drained from control nodes, and Falco offers a k8saudit plugin) as an additional data \n    source for detections within the control plane.\n  condition: >\n    evt.type=connect and evt.dir=< \n    and (fd.typechar=4 or fd.typechar=6) \n",
                      "markdown": "`    is of utmost importance. Audit your complete infrastructure and pinpoint any potential machines from which the API server \n    might be accessible based on your network layout. If Falco can't operate on all these machines, consider analyzing the \n    Kubernetes audit logs (typically drained from control nodes, and Falco offers a k8saudit plugin) as an additional data \n    source for detections within the control plane.\n  condition: >\n    evt.type=connect and evt.dir=< \n    and (fd.typechar=4 or fd.typechar=6) \n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/falco-rules-3.2.0-r0.apk/falco-rules-3.2.0-r0/etc/falco/falco_rules.yaml"
                },
                "region": {
                  "startLine": 825,
                  "startColumn": 49,
                  "endLine": 825,
                  "endColumn": 58,
                  "snippet": {
                    "text": "    pivotal role in configuring the cluster management lifecycle. Detecting potential unauthorized access to the API server \n    is of utmost importance. Audit your complete infrastructure and pinpoint any potential machines from which the API server \n    might be accessible based on your network layout. If Falco can't operate on all these machines, consider analyzing the \n    Kubernetes audit logs (typically drained from control nodes, and Falco offers a k8saudit plugin) as an additional data \n    source for detections within the control plane.\n  condition: >\n    evt.type=connect and evt.dir=< \n",
                    "rendered": {
                      "text": "    pivotal role in configuring the cluster management lifecycle. Detecting potential unauthorized access to the API server \n    is of utmost importance. Audit your complete infrastructure and pinpoint any potential machines from which the API server \n    might be accessible based on your network layout. If Falco can't operate on all these machines, consider analyzing the \n    Kubernetes audit logs (typically drained from control nodes, and Falco offers a k8saudit plugin) as an additional data \n    source for detections within the control plane.\n  condition: >\n    evt.type=connect and evt.dir=< \n",
                      "markdown": "`    pivotal role in configuring the cluster management lifecycle. Detecting potential unauthorized access to the API server \n    is of utmost importance. Audit your complete infrastructure and pinpoint any potential machines from which the API server \n    might be accessible based on your network layout. If Falco can't operate on all these machines, consider analyzing the \n    Kubernetes audit logs (typically drained from control nodes, and Falco offers a k8saudit plugin) as an additional data \n    source for detections within the control plane.\n  condition: >\n    evt.type=connect and evt.dir=< \n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/falco-rules-3.2.0-r0.apk/falco-rules-3.2.0-r0/etc/falco/falco_rules.yaml"
                },
                "region": {
                  "startLine": 690,
                  "startColumn": 19,
                  "endLine": 690,
                  "endColumn": 23,
                  "snippet": {
                    "text": "ING\n- rule: System user interactive\n  desc: > \n    System (e.g. non-login) users spawning new processes. Can add custom service users (e.g. apache or mysqld).\n    'Interactive' is defined as new processes as descendants of an ssh session or login process. Consider further tuning \n    by only looking at processes in a terminal / tty (proc.tty != 0). A newer field proc.is_vpgid_leader could be of help \n    to distinguish if the process was \"directly\" executed, for instance, in a tty, or executed as a descendant process in the \n    same process group, which, for example, is the case when subprocesses",
                    "rendered": {
                      "text": "ING\n- rule: System user interactive\n  desc: > \n    System (e.g. non-login) users spawning new processes. Can add custom service users (e.g. apache or mysqld).\n    'Interactive' is defined as new processes as descendants of an ssh session or login process. Consider further tuning \n    by only looking at processes in a terminal / tty (proc.tty != 0). A newer field proc.is_vpgid_leader could be of help \n    to distinguish if the process was \"directly\" executed, for instance, in a tty, or executed as a descendant process in the \n    same process group, which, for example, is the case when subprocesses",
                      "markdown": "`ING\n- rule: System user interactive\n  desc: > \n    System (e.g. non-login) users spawning new processes. Can add custom service users (e.g. apache or mysqld).\n    'Interactive' is defined as new processes as descendants of an ssh session or login process. Consider further tuning \n    by only looking at processes in a terminal / tty (proc.tty != 0). A newer field proc.is_vpgid_leader could be of help \n    to distinguish if the process was \"directly\" executed, for instance, in a tty, or executed as a descendant process in the \n    same process group, which, for example, is the case when subprocesses`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/falco-rules-3.2.0-r0.apk/falco-rules-3.2.0-r0/etc/falco/falco_rules.yaml"
                },
                "region": {
                  "startLine": 672,
                  "startColumn": 9,
                  "endLine": 672,
                  "endColumn": 13,
                  "snippet": {
                    "text": "# - clone a second program runc:[2:INIT] + exec to the root program.\n#   The parent of runc:[2:INIT] is runc:0:PARENT]\n# As soon as 1:CHILD is created, 0:PARENT exits, so there's a race\n#   where at the time 2:INIT execs the root program, 0:PARENT might have\n#   already exited, or might still be around. So we handle both.\n# We also let runc:[1:CHILD] count as the parent process, which can occur\n# when we lose events and lose track of state.\n",
                    "rendered": {
                      "text": "# - clone a second program runc:[2:INIT] + exec to the root program.\n#   The parent of runc:[2:INIT] is runc:0:PARENT]\n# As soon as 1:CHILD is created, 0:PARENT exits, so there's a race\n#   where at the time 2:INIT execs the root program, 0:PARENT might have\n#   already exited, or might still be around. So we handle both.\n# We also let runc:[1:CHILD] count as the parent process, which can occur\n# when we lose events and lose track of state.\n",
                      "markdown": "`# - clone a second program runc:[2:INIT] + exec to the root program.\n#   The parent of runc:[2:INIT] is runc:0:PARENT]\n# As soon as 1:CHILD is created, 0:PARENT exits, so there's a race\n#   where at the time 2:INIT execs the root program, 0:PARENT might have\n#   already exited, or might still be around. So we handle both.\n# We also let runc:[1:CHILD] count as the parent process, which can occur\n# when we lose events and lose track of state.\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/falco-rules-3.2.0-r0.apk/falco-rules-3.2.0-r0/etc/falco/falco_rules.yaml"
                },
                "region": {
                  "startLine": 570,
                  "startColumn": 38,
                  "endLine": 570,
                  "endColumn": 42,
                  "snippet": {
                    "text": "sier, as you can see in the exhaustive \n    existing tuning. However, given it is very behavior-driven and broad, it is universally relevant to catch \n    general Remote Code Execution (RCE). Allocate time to tune this rule for your use cases and reduce noise. \n    Tuning suggestions include looking at the duration of the parent process (proc.ppid.duration) to define your \n    long-running app processes. Checking for newer fields such as proc.vpgid.name and proc.vpgid.exe instead of the \n    direct parent process being a non-shell application could make the rule more robust.\n  condition: >\n    spa",
                    "rendered": {
                      "text": "sier, as you can see in the exhaustive \n    existing tuning. However, given it is very behavior-driven and broad, it is universally relevant to catch \n    general Remote Code Execution (RCE). Allocate time to tune this rule for your use cases and reduce noise. \n    Tuning suggestions include looking at the duration of the parent process (proc.ppid.duration) to define your \n    long-running app processes. Checking for newer fields such as proc.vpgid.name and proc.vpgid.exe instead of the \n    direct parent process being a non-shell application could make the rule more robust.\n  condition: >\n    spa",
                      "markdown": "`sier, as you can see in the exhaustive \n    existing tuning. However, given it is very behavior-driven and broad, it is universally relevant to catch \n    general Remote Code Execution (RCE). Allocate time to tune this rule for your use cases and reduce noise. \n    Tuning suggestions include looking at the duration of the parent process (proc.ppid.duration) to define your \n    long-running app processes. Checking for newer fields such as proc.vpgid.name and proc.vpgid.exe instead of the \n    direct parent process being a non-shell application could make the rule more robust.\n  condition: >\n    spa`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/falco-rules-3.2.0-r0.apk/falco-rules-3.2.0-r0/etc/falco/falco_rules.yaml"
                },
                "region": {
                  "startLine": 347,
                  "startColumn": 3,
                  "endLine": 347,
                  "endColumn": 7,
                  "snippet": {
                    "text": "  desc: >\n    An attempt to read any sensitive file (e.g. files containing user/password/authentication\n    information) by a trusted program after startup. Trusted programs might read these files\n    at startup to load initial state, but not afterwards. Can be customized as needed.\n    In modern containerized cloud infrastructures, accessing traditional Linux sensitive files \n    might be less relevant, yet it remains valuable for baseline detections. While we provide additional \n    rules for SSH or cloud vendor-specific credentials, you can significantly enhance your security \n",
                    "rendered": {
                      "text": "  desc: >\n    An attempt to read any sensitive file (e.g. files containing user/password/authentication\n    information) by a trusted program after startup. Trusted programs might read these files\n    at startup to load initial state, but not afterwards. Can be customized as needed.\n    In modern containerized cloud infrastructures, accessing traditional Linux sensitive files \n    might be less relevant, yet it remains valuable for baseline detections. While we provide additional \n    rules for SSH or cloud vendor-specific credentials, you can significantly enhance your security \n",
                      "markdown": "`  desc: >\n    An attempt to read any sensitive file (e.g. files containing user/password/authentication\n    information) by a trusted program after startup. Trusted programs might read these files\n    at startup to load initial state, but not afterwards. Can be customized as needed.\n    In modern containerized cloud infrastructures, accessing traditional Linux sensitive files \n    might be less relevant, yet it remains valuable for baseline detections. While we provide additional \n    rules for SSH or cloud vendor-specific credentials, you can significantly enhance your security \n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/falco-rules-3.2.0-r0.apk/falco-rules-3.2.0-r0/etc/falco/falco_rules.yaml"
                },
                "region": {
                  "startLine": 254,
                  "startColumn": 21,
                  "endLine": 254,
                  "endColumn": 25,
                  "snippet": {
                    "text": "  condition: (proc.name in (python, pypy, python3) and proc.cmdline contains ansible)\n\n# Qualys seems to run a variety of shell subprocesses, at various\n# levels. This checks at a few levels without the cost of a full\n# proc.aname, which traverses the full parent hierarchy.\n- macro: run_by_qualys\n  condition: >\n",
                    "rendered": {
                      "text": "  condition: (proc.name in (python, pypy, python3) and proc.cmdline contains ansible)\n\n# Qualys seems to run a variety of shell subprocesses, at various\n# levels. This checks at a few levels without the cost of a full\n# proc.aname, which traverses the full parent hierarchy.\n- macro: run_by_qualys\n  condition: >\n",
                      "markdown": "`  condition: (proc.name in (python, pypy, python3) and proc.cmdline contains ansible)\n\n# Qualys seems to run a variety of shell subprocesses, at various\n# levels. This checks at a few levels without the cost of a full\n# proc.aname, which traverses the full parent hierarchy.\n- macro: run_by_qualys\n  condition: >\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/falco-rules-3.2.0-r0.apk/falco-rules-3.2.0-r0/etc/falco/falco_rules.yaml"
                },
                "region": {
                  "startLine": 253,
                  "startColumn": 54,
                  "endLine": 253,
                  "endColumn": 58,
                  "snippet": {
                    "text": "- macro: ansible_running_python\n  condition: (proc.name in (python, pypy, python3) and proc.cmdline contains ansible)\n\n# Qualys seems to run a variety of shell subprocesses, at various\n# levels. This checks at a few levels without the cost of a full\n# proc.aname, which traverses the full parent hierarchy.\n- macro: run_by_qualys\n",
                    "rendered": {
                      "text": "- macro: ansible_running_python\n  condition: (proc.name in (python, pypy, python3) and proc.cmdline contains ansible)\n\n# Qualys seems to run a variety of shell subprocesses, at various\n# levels. This checks at a few levels without the cost of a full\n# proc.aname, which traverses the full parent hierarchy.\n- macro: run_by_qualys\n",
                      "markdown": "`- macro: ansible_running_python\n  condition: (proc.name in (python, pypy, python3) and proc.cmdline contains ansible)\n\n# Qualys seems to run a variety of shell subprocesses, at various\n# levels. This checks at a few levels without the cost of a full\n# proc.aname, which traverses the full parent hierarchy.\n- macro: run_by_qualys\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/falco-rules-3.2.0-r0.apk/falco-rules-3.2.0-r0/etc/falco/falco_rules.yaml"
                },
                "region": {
                  "startLine": 165,
                  "startColumn": 11,
                  "endLine": 165,
                  "endColumn": 15,
                  "snippet": {
                    "text": "  items: [pip, pip3, conda]\n\n# The truncated dpkg-preconfigu is intentional, process names are\n# truncated at the falcosecurity-libs level.\n- list: package_mgmt_binaries\n  items: [rpm_binaries, deb_binaries, update-alternat, gem, npm, python_package_managers, sane-utils.post, alternatives, chef-client, apk, snapd]\n\n",
                    "rendered": {
                      "text": "  items: [pip, pip3, conda]\n\n# The truncated dpkg-preconfigu is intentional, process names are\n# truncated at the falcosecurity-libs level.\n- list: package_mgmt_binaries\n  items: [rpm_binaries, deb_binaries, update-alternat, gem, npm, python_package_managers, sane-utils.post, alternatives, chef-client, apk, snapd]\n\n",
                      "markdown": "`  items: [pip, pip3, conda]\n\n# The truncated dpkg-preconfigu is intentional, process names are\n# truncated at the falcosecurity-libs level.\n- list: package_mgmt_binaries\n  items: [rpm_binaries, deb_binaries, update-alternat, gem, npm, python_package_managers, sane-utils.post, alternatives, chef-client, apk, snapd]\n\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/falco-rules-3.2.0-r0.apk/falco-rules-3.2.0-r0/etc/falco/falco_rules.yaml"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 7,
                  "endLine": 77,
                  "endColumn": 11,
                  "snippet": {
                    "text": "# the process name may be missing. For some rules that really depend\n# on the identity of the process performing an action such as opening\n# a file, etc., we require that the process name be known.\n# TODO: At the moment we keep the `N/A` variant for compatibility with old scap-files\n- macro: proc_name_exists\n  condition: (not proc.name in (\"<NA>\",\"N/A\"))\n\n",
                    "rendered": {
                      "text": "# the process name may be missing. For some rules that really depend\n# on the identity of the process performing an action such as opening\n# a file, etc., we require that the process name be known.\n# TODO: At the moment we keep the `N/A` variant for compatibility with old scap-files\n- macro: proc_name_exists\n  condition: (not proc.name in (\"<NA>\",\"N/A\"))\n\n",
                      "markdown": "`# the process name may be missing. For some rules that really depend\n# on the identity of the process performing an action such as opening\n# a file, etc., we require that the process name be known.\n# TODO: At the moment we keep the `N/A` variant for compatibility with old scap-files\n- macro: proc_name_exists\n  condition: (not proc.name in (\"<NA>\",\"N/A\"))\n\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/falco-rules-3.2.0-r0.apk/falco-rules-3.2.0-r0/etc/falco/falco_rules.yaml"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 38,
                  "endLine": 9,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/falco-rules-3.2.0-r0.apk/falco-rules-3.2.0-r0/etc/falco/falco_rules.yaml"
                },
                "region": {
                  "startLine": 1228,
                  "startColumn": 20,
                  "endLine": 1228,
                  "endColumn": 25,
                  "snippet": {
                    "text": "    and proc.exe endswith ssh \n    and fd.l4proto=tcp \n    and ssh_non_standard_ports_network\n  output: Disallowed SSH Connection (connection=%fd.name lport=%fd.lport rport=%fd.rport fd_type=%fd.type fd_proto=%fd.l4proto evt_type=%evt.type user=%user.name user_uid=%user.uid user_loginuid=%user.loginuid process=%proc.name proc_exepath=%proc.exepath parent=%proc.pname command=%proc.cmdline terminal=%proc.tty %container.info)\n  priority: NOTICE\n  tags: [maturity_stable, host, container, network, process, mitre_execution, T1059]\n\n",
                    "rendered": {
                      "text": "    and proc.exe endswith ssh \n    and fd.l4proto=tcp \n    and ssh_non_standard_ports_network\n  output: Disallowed SSH Connection (connection=%fd.name lport=%fd.lport rport=%fd.rport fd_type=%fd.type fd_proto=%fd.l4proto evt_type=%evt.type user=%user.name user_uid=%user.uid user_loginuid=%user.loginuid process=%proc.name proc_exepath=%proc.exepath parent=%proc.pname command=%proc.cmdline terminal=%proc.tty %container.info)\n  priority: NOTICE\n  tags: [maturity_stable, host, container, network, process, mitre_execution, T1059]\n\n",
                      "markdown": "`    and proc.exe endswith ssh \n    and fd.l4proto=tcp \n    and ssh_non_standard_ports_network\n  output: Disallowed SSH Connection (connection=%fd.name lport=%fd.lport rport=%fd.rport fd_type=%fd.type fd_proto=%fd.l4proto evt_type=%evt.type user=%user.name user_uid=%user.uid user_loginuid=%user.loginuid process=%proc.name proc_exepath=%proc.exepath parent=%proc.pname command=%proc.cmdline terminal=%proc.tty %container.info)\n  priority: NOTICE\n  tags: [maturity_stable, host, container, network, process, mitre_execution, T1059]\n\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/falco-rules-3.2.0-r0.apk/falco-rules-3.2.0-r0/etc/falco/falco_rules.yaml"
                },
                "region": {
                  "startLine": 1225,
                  "startColumn": 25,
                  "endLine": 1225,
                  "endColumn": 30,
                  "snippet": {
                    "text": "    \"Disallowed SSH Connection\" rule.\n  condition: > \n    outbound \n    and proc.exe endswith ssh \n    and fd.l4proto=tcp \n    and ssh_non_standard_ports_network\n  output: Disallowed SSH Connection (connection=%fd.name lport=%fd.lport rport=%fd.rport fd_type=%fd.type fd_proto=%fd.l4proto evt_type=%evt.type user=%user.name user_uid=%user.uid user_loginuid=%user.loginuid process=%proc.name proc_exepath=%proc.exepath parent=%proc.pname command=%proc.cmdline terminal=%proc.tty %container.info)\n",
                    "rendered": {
                      "text": "    \"Disallowed SSH Connection\" rule.\n  condition: > \n    outbound \n    and proc.exe endswith ssh \n    and fd.l4proto=tcp \n    and ssh_non_standard_ports_network\n  output: Disallowed SSH Connection (connection=%fd.name lport=%fd.lport rport=%fd.rport fd_type=%fd.type fd_proto=%fd.l4proto evt_type=%evt.type user=%user.name user_uid=%user.uid user_loginuid=%user.loginuid process=%proc.name proc_exepath=%proc.exepath parent=%proc.pname command=%proc.cmdline terminal=%proc.tty %container.info)\n",
                      "markdown": "`    \"Disallowed SSH Connection\" rule.\n  condition: > \n    outbound \n    and proc.exe endswith ssh \n    and fd.l4proto=tcp \n    and ssh_non_standard_ports_network\n  output: Disallowed SSH Connection (connection=%fd.name lport=%fd.lport rport=%fd.rport fd_type=%fd.type fd_proto=%fd.l4proto evt_type=%evt.type user=%user.name user_uid=%user.uid user_loginuid=%user.loginuid process=%proc.name proc_exepath=%proc.exepath parent=%proc.pname command=%proc.cmdline terminal=%proc.tty %container.info)\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/falco-rules-3.2.0-r0.apk/falco-rules-3.2.0-r0/etc/falco/falco_rules.yaml"
                },
                "region": {
                  "startLine": 1222,
                  "startColumn": 15,
                  "endLine": 1222,
                  "endColumn": 20,
                  "snippet": {
                    "text": "    any app that is vulnerable to command injection. The upstream rule only covers a limited selection of non-standard ports. \n    We suggest adding more ports, potentially incorporating ranges based on your environment's knowledge and custom SSH port \n    configurations. This rule can complement the \"Redirect STDOUT/STDIN to Network Connection in Container\" or \n    \"Disallowed SSH Connection\" rule.\n  condition: > \n    outbound \n    and proc.exe endswith ssh \n",
                    "rendered": {
                      "text": "    any app that is vulnerable to command injection. The upstream rule only covers a limited selection of non-standard ports. \n    We suggest adding more ports, potentially incorporating ranges based on your environment's knowledge and custom SSH port \n    configurations. This rule can complement the \"Redirect STDOUT/STDIN to Network Connection in Container\" or \n    \"Disallowed SSH Connection\" rule.\n  condition: > \n    outbound \n    and proc.exe endswith ssh \n",
                      "markdown": "`    any app that is vulnerable to command injection. The upstream rule only covers a limited selection of non-standard ports. \n    We suggest adding more ports, potentially incorporating ranges based on your environment's knowledge and custom SSH port \n    configurations. This rule can complement the \"Redirect STDOUT/STDIN to Network Connection in Container\" or \n    \"Disallowed SSH Connection\" rule.\n  condition: > \n    outbound \n    and proc.exe endswith ssh \n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/falco-rules-3.2.0-r0.apk/falco-rules-3.2.0-r0/etc/falco/falco_rules.yaml"
                },
                "region": {
                  "startLine": 1220,
                  "startColumn": 115,
                  "endLine": 1220,
                  "endColumn": 120,
                  "snippet": {
                    "text": "ed back over SSH. Such an attack can be launched against \n    any app that is vulnerable to command injection. The upstream rule only covers a limited selection of non-standard ports. \n    We suggest adding more ports, potentially incorporating ranges based on your environment's knowledge and custom SSH port \n    configurations. This rule can complement the \"Redirect STDOUT/STDIN to Network Connection in Container\" or \n    \"Disallowed SSH Connection\" rule.\n  condition: > \n    outbound \n    and proc.exe endswith ssh \n    and fd.l4proto=tcp \n    and ssh_non_standard_ports_network\n  output: Disallowed",
                    "rendered": {
                      "text": "ed back over SSH. Such an attack can be launched against \n    any app that is vulnerable to command injection. The upstream rule only covers a limited selection of non-standard ports. \n    We suggest adding more ports, potentially incorporating ranges based on your environment's knowledge and custom SSH port \n    configurations. This rule can complement the \"Redirect STDOUT/STDIN to Network Connection in Container\" or \n    \"Disallowed SSH Connection\" rule.\n  condition: > \n    outbound \n    and proc.exe endswith ssh \n    and fd.l4proto=tcp \n    and ssh_non_standard_ports_network\n  output: Disallowed",
                      "markdown": "`ed back over SSH. Such an attack can be launched against \n    any app that is vulnerable to command injection. The upstream rule only covers a limited selection of non-standard ports. \n    We suggest adding more ports, potentially incorporating ranges based on your environment's knowledge and custom SSH port \n    configurations. This rule can complement the \"Redirect STDOUT/STDIN to Network Connection in Container\" or \n    \"Disallowed SSH Connection\" rule.\n  condition: > \n    outbound \n    and proc.exe endswith ssh \n    and fd.l4proto=tcp \n    and ssh_non_standard_ports_network\n  output: Disallowed`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/falco-rules-3.2.0-r0.apk/falco-rules-3.2.0-r0/etc/falco/falco_rules.yaml"
                },
                "region": {
                  "startLine": 1218,
                  "startColumn": 7,
                  "endLine": 1218,
                  "endColumn": 12,
                  "snippet": {
                    "text": " Connection Non Standard Port\n  desc: > \n    Detect any new outbound SSH connection from the host or container using a non-standard port. This rule holds the potential \n    to detect a family of reverse shells that cause the victim machine to connect back out over SSH, with STDIN piped from \n    the SSH connection to a shell's STDIN, and STDOUT of the shell piped back over SSH. Such an attack can be launched against \n    any app that is vulnerable to command injection. The upstream rule only covers a limited selection of non-standard ports. \n    We suggest adding more ports, potentially incorporati",
                    "rendered": {
                      "text": " Connection Non Standard Port\n  desc: > \n    Detect any new outbound SSH connection from the host or container using a non-standard port. This rule holds the potential \n    to detect a family of reverse shells that cause the victim machine to connect back out over SSH, with STDIN piped from \n    the SSH connection to a shell's STDIN, and STDOUT of the shell piped back over SSH. Such an attack can be launched against \n    any app that is vulnerable to command injection. The upstream rule only covers a limited selection of non-standard ports. \n    We suggest adding more ports, potentially incorporati",
                      "markdown": "` Connection Non Standard Port\n  desc: > \n    Detect any new outbound SSH connection from the host or container using a non-standard port. This rule holds the potential \n    to detect a family of reverse shells that cause the victim machine to connect back out over SSH, with STDIN piped from \n    the SSH connection to a shell's STDIN, and STDOUT of the shell piped back over SSH. Such an attack can be launched against \n    any app that is vulnerable to command injection. The upstream rule only covers a limited selection of non-standard ports. \n    We suggest adding more ports, potentially incorporati`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/falco-rules-3.2.0-r0.apk/falco-rules-3.2.0-r0/etc/falco/falco_rules.yaml"
                },
                "region": {
                  "startLine": 1216,
                  "startColumn": 27,
                  "endLine": 1216,
                  "endColumn": 32,
                  "snippet": {
                    "text": "\n- rule: Disallowed SSH Connection Non Standard Port\n  desc: > \n    Detect any new outbound SSH connection from the host or container using a non-standard port. This rule holds the potential \n    to detect a family of reverse shells that cause the victim machine to connect back out over SSH, with STDIN piped from \n    the SSH connection to a shell's STDIN, and STDOUT of the shell piped back over SSH. Such an attack can be launched against \n    any app that is vulnerable to command injection. The upstream rule only covers a limited selection of non-standard ports. \n",
                    "rendered": {
                      "text": "\n- rule: Disallowed SSH Connection Non Standard Port\n  desc: > \n    Detect any new outbound SSH connection from the host or container using a non-standard port. This rule holds the potential \n    to detect a family of reverse shells that cause the victim machine to connect back out over SSH, with STDIN piped from \n    the SSH connection to a shell's STDIN, and STDOUT of the shell piped back over SSH. Such an attack can be launched against \n    any app that is vulnerable to command injection. The upstream rule only covers a limited selection of non-standard ports. \n",
                      "markdown": "`\n- rule: Disallowed SSH Connection Non Standard Port\n  desc: > \n    Detect any new outbound SSH connection from the host or container using a non-standard port. This rule holds the potential \n    to detect a family of reverse shells that cause the victim machine to connect back out over SSH, with STDIN piped from \n    the SSH connection to a shell's STDIN, and STDOUT of the shell piped back over SSH. Such an attack can be launched against \n    any app that is vulnerable to command injection. The upstream rule only covers a limited selection of non-standard ports. \n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/falco-rules-3.2.0-r0.apk/falco-rules-3.2.0-r0/etc/falco/falco_rules.yaml"
                },
                "region": {
                  "startLine": 1214,
                  "startColumn": 18,
                  "endLine": 1214,
                  "endColumn": 23,
                  "snippet": {
                    "text": "- macro: ssh_non_standard_ports_network\n  condition: (fd.sport in (ssh_non_standard_ports))\n\n- rule: Disallowed SSH Connection Non Standard Port\n  desc: > \n    Detect any new outbound SSH connection from the host or container using a non-standard port. This rule holds the potential \n    to detect a family of reverse shells that cause the victim machine to connect back out over SSH, with STDIN piped from \n",
                    "rendered": {
                      "text": "- macro: ssh_non_standard_ports_network\n  condition: (fd.sport in (ssh_non_standard_ports))\n\n- rule: Disallowed SSH Connection Non Standard Port\n  desc: > \n    Detect any new outbound SSH connection from the host or container using a non-standard port. This rule holds the potential \n    to detect a family of reverse shells that cause the victim machine to connect back out over SSH, with STDIN piped from \n",
                      "markdown": "`- macro: ssh_non_standard_ports_network\n  condition: (fd.sport in (ssh_non_standard_ports))\n\n- rule: Disallowed SSH Connection Non Standard Port\n  desc: > \n    Detect any new outbound SSH connection from the host or container using a non-standard port. This rule holds the potential \n    to detect a family of reverse shells that cause the victim machine to connect back out over SSH, with STDIN piped from \n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/falco-rules-3.2.0-r0.apk/falco-rules-3.2.0-r0/etc/falco/falco_rules.yaml"
                },
                "region": {
                  "startLine": 1179,
                  "startColumn": 99,
                  "endLine": 1179,
                  "endColumn": 106,
                  "snippet": {
                    "text": "\n    Detect if an executable not belonging to the base image of a container is being executed.\n    The drop and execute pattern can be observed very often after an attacker gained an initial foothold.\n    is_exe_upper_layer filter field only applies for container runtimes that use overlayfs as union mount filesystem.\n    Adopters can utilize the provided template list known_drop_and_execute_containers containing allowed container \n    images known to execute binaries not included in their base image. Alternatively, you could exclude non-production\n    namespaces in Kubernetes settings by adjusting th",
                    "rendered": {
                      "text": "\n    Detect if an executable not belonging to the base image of a container is being executed.\n    The drop and execute pattern can be observed very often after an attacker gained an initial foothold.\n    is_exe_upper_layer filter field only applies for container runtimes that use overlayfs as union mount filesystem.\n    Adopters can utilize the provided template list known_drop_and_execute_containers containing allowed container \n    images known to execute binaries not included in their base image. Alternatively, you could exclude non-production\n    namespaces in Kubernetes settings by adjusting th",
                      "markdown": "`\n    Detect if an executable not belonging to the base image of a container is being executed.\n    The drop and execute pattern can be observed very often after an attacker gained an initial foothold.\n    is_exe_upper_layer filter field only applies for container runtimes that use overlayfs as union mount filesystem.\n    Adopters can utilize the provided template list known_drop_and_execute_containers containing allowed container \n    images known to execute binaries not included in their base image. Alternatively, you could exclude non-production\n    namespaces in Kubernetes settings by adjusting th`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/falco-rules-3.2.0-r0.apk/falco-rules-3.2.0-r0/etc/falco/falco_rules.yaml"
                },
                "region": {
                  "startLine": 1139,
                  "startColumn": 9,
                  "endLine": 1139,
                  "endColumn": 15,
                  "snippet": {
                    "text": "  desc: >\n    Detect attempts to search for private keys or passwords using the grep or find command, particularly targeting standard \n    AWS credential locations. This is often seen with unsophisticated attackers, as there are many ways to access files \n    using bash built-ins that could go unnoticed. Regardless, this serves as a solid baseline detection that can be tailored \n    to cover these gaps while maintaining an acceptable noise level. This rule complements the rule \"Search Private Keys or Passwords\".\n  condition: >\n    spawned_process \n",
                    "rendered": {
                      "text": "  desc: >\n    Detect attempts to search for private keys or passwords using the grep or find command, particularly targeting standard \n    AWS credential locations. This is often seen with unsophisticated attackers, as there are many ways to access files \n    using bash built-ins that could go unnoticed. Regardless, this serves as a solid baseline detection that can be tailored \n    to cover these gaps while maintaining an acceptable noise level. This rule complements the rule \"Search Private Keys or Passwords\".\n  condition: >\n    spawned_process \n",
                      "markdown": "`  desc: >\n    Detect attempts to search for private keys or passwords using the grep or find command, particularly targeting standard \n    AWS credential locations. This is often seen with unsophisticated attackers, as there are many ways to access files \n    using bash built-ins that could go unnoticed. Regardless, this serves as a solid baseline detection that can be tailored \n    to cover these gaps while maintaining an acceptable noise level. This rule complements the rule \"Search Private Keys or Passwords\".\n  condition: >\n    spawned_process \n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/falco-rules-3.2.0-r0.apk/falco-rules-3.2.0-r0/etc/falco/falco_rules.yaml"
                },
                "region": {
                  "startLine": 1137,
                  "startColumn": 77,
                  "endLine": 1137,
                  "endColumn": 83,
                  "snippet": {
                    "text": "\n- rule: Find AWS Credentials\n  desc: >\n    Detect attempts to search for private keys or passwords using the grep or find command, particularly targeting standard \n    AWS credential locations. This is often seen with unsophisticated attackers, as there are many ways to access files \n    using bash built-ins that could go unnoticed. Regardless, this serves as a solid baseline detection that can be tailored \n    to cover these gaps while maintaining an acceptable noise level. This rule complements the rule \"Search Private Keys or Passwords\".\n",
                    "rendered": {
                      "text": "\n- rule: Find AWS Credentials\n  desc: >\n    Detect attempts to search for private keys or passwords using the grep or find command, particularly targeting standard \n    AWS credential locations. This is often seen with unsophisticated attackers, as there are many ways to access files \n    using bash built-ins that could go unnoticed. Regardless, this serves as a solid baseline detection that can be tailored \n    to cover these gaps while maintaining an acceptable noise level. This rule complements the rule \"Search Private Keys or Passwords\".\n",
                      "markdown": "`\n- rule: Find AWS Credentials\n  desc: >\n    Detect attempts to search for private keys or passwords using the grep or find command, particularly targeting standard \n    AWS credential locations. This is often seen with unsophisticated attackers, as there are many ways to access files \n    using bash built-ins that could go unnoticed. Regardless, this serves as a solid baseline detection that can be tailored \n    to cover these gaps while maintaining an acceptable noise level. This rule complements the rule \"Search Private Keys or Passwords\".\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/falco-rules-3.2.0-r0.apk/falco-rules-3.2.0-r0/etc/falco/falco_rules.yaml"
                },
                "region": {
                  "startLine": 1137,
                  "startColumn": 69,
                  "endLine": 1137,
                  "endColumn": 75,
                  "snippet": {
                    "text": "\n- rule: Find AWS Credentials\n  desc: >\n    Detect attempts to search for private keys or passwords using the grep or find command, particularly targeting standard \n    AWS credential locations. This is often seen with unsophisticated attackers, as there are many ways to access files \n    using bash built-ins that could go unnoticed. Regardless, this serves as a solid baseline detection that can be tailored \n    to cover these gaps while maintaining an acceptable noise level. This rule complements the rule \"Search Private Keys or Passwords\".\n",
                    "rendered": {
                      "text": "\n- rule: Find AWS Credentials\n  desc: >\n    Detect attempts to search for private keys or passwords using the grep or find command, particularly targeting standard \n    AWS credential locations. This is often seen with unsophisticated attackers, as there are many ways to access files \n    using bash built-ins that could go unnoticed. Regardless, this serves as a solid baseline detection that can be tailored \n    to cover these gaps while maintaining an acceptable noise level. This rule complements the rule \"Search Private Keys or Passwords\".\n",
                      "markdown": "`\n- rule: Find AWS Credentials\n  desc: >\n    Detect attempts to search for private keys or passwords using the grep or find command, particularly targeting standard \n    AWS credential locations. This is often seen with unsophisticated attackers, as there are many ways to access files \n    using bash built-ins that could go unnoticed. Regardless, this serves as a solid baseline detection that can be tailored \n    to cover these gaps while maintaining an acceptable noise level. This rule complements the rule \"Search Private Keys or Passwords\".\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/falco-rules-3.2.0-r0.apk/falco-rules-3.2.0-r0/etc/falco/falco_rules.yaml"
                },
                "region": {
                  "startLine": 1135,
                  "startColumn": 7,
                  "endLine": 1135,
                  "endColumn": 13,
                  "snippet": {
                    "text": "    proc.args icontains \"accesskeyid\" or\n    proc.args icontains \"secretaccesskey\")\n\n- rule: Find AWS Credentials\n  desc: >\n    Detect attempts to search for private keys or passwords using the grep or find command, particularly targeting standard \n    AWS credential locations. This is often seen with unsophisticated attackers, as there are many ways to access files \n",
                    "rendered": {
                      "text": "    proc.args icontains \"accesskeyid\" or\n    proc.args icontains \"secretaccesskey\")\n\n- rule: Find AWS Credentials\n  desc: >\n    Detect attempts to search for private keys or passwords using the grep or find command, particularly targeting standard \n    AWS credential locations. This is often seen with unsophisticated attackers, as there are many ways to access files \n",
                      "markdown": "`    proc.args icontains \"accesskeyid\" or\n    proc.args icontains \"secretaccesskey\")\n\n- rule: Find AWS Credentials\n  desc: >\n    Detect attempts to search for private keys or passwords using the grep or find command, particularly targeting standard \n    AWS credential locations. This is often seen with unsophisticated attackers, as there are many ways to access files \n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/falco-rules-3.2.0-r0.apk/falco-rules-3.2.0-r0/etc/falco/falco_rules.yaml"
                },
                "region": {
                  "startLine": 992,
                  "startColumn": 117,
                  "endLine": 992,
                  "endColumn": 122,
                  "snippet": {
                    "text": "\n- rule: Packet socket created in container\n  desc: > \n    Detect new packet socket at the device driver (OSI Layer 2) level in a container. Packet socket could be used for ARP Spoofing \n    and privilege escalation (CVE-2020-14386) by an attacker. Noise can be reduced by using the user_known_packet_socket_binaries\n    template list.\n  condition: > \n",
                    "rendered": {
                      "text": "\n- rule: Packet socket created in container\n  desc: > \n    Detect new packet socket at the device driver (OSI Layer 2) level in a container. Packet socket could be used for ARP Spoofing \n    and privilege escalation (CVE-2020-14386) by an attacker. Noise can be reduced by using the user_known_packet_socket_binaries\n    template list.\n  condition: > \n",
                      "markdown": "`\n- rule: Packet socket created in container\n  desc: > \n    Detect new packet socket at the device driver (OSI Layer 2) level in a container. Packet socket could be used for ARP Spoofing \n    and privilege escalation (CVE-2020-14386) by an attacker. Noise can be reduced by using the user_known_packet_socket_binaries\n    template list.\n  condition: > \n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/falco-rules-3.2.0-r0.apk/falco-rules-3.2.0-r0/etc/falco/falco_rules.yaml"
                },
                "region": {
                  "startLine": 928,
                  "startColumn": 72,
                  "endLine": 928,
                  "endColumn": 78,
                  "snippet": {
                    "text": "  desc: > \n    Detect clearing of critical access log files, typically done to erase evidence that could be attributed to an adversary's \n    actions. To effectively customize and operationalize this detection, check for potentially missing log file destinations \n    relevant to your environment, and adjust the profiled containers you wish not to be alerted on.\n  condition: >\n    open_write \n    and access_log_files \n",
                    "rendered": {
                      "text": "  desc: > \n    Detect clearing of critical access log files, typically done to erase evidence that could be attributed to an adversary's \n    actions. To effectively customize and operationalize this detection, check for potentially missing log file destinations \n    relevant to your environment, and adjust the profiled containers you wish not to be alerted on.\n  condition: >\n    open_write \n    and access_log_files \n",
                      "markdown": "`  desc: > \n    Detect clearing of critical access log files, typically done to erase evidence that could be attributed to an adversary's \n    actions. To effectively customize and operationalize this detection, check for potentially missing log file destinations \n    relevant to your environment, and adjust the profiled containers you wish not to be alerted on.\n  condition: >\n    open_write \n    and access_log_files \n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/falco-rules-3.2.0-r0.apk/falco-rules-3.2.0-r0/etc/falco/falco_rules.yaml"
                },
                "region": {
                  "startLine": 896,
                  "startColumn": 9,
                  "endLine": 896,
                  "endColumn": 15,
                  "snippet": {
                    "text": "                                  proc.args contains \"id_ecdsa\"\n          )\n        ))\n  output: Grep private keys or passwords activities found (evt_type=%evt.type user=%user.name user_uid=%user.uid user_loginuid=%user.loginuid process=%proc.name proc_exepath=%proc.exepath parent=%proc.pname command=%proc.cmdline terminal=%proc.tty exe_flags=%evt.arg.flags %container.info)\n  priority:\n    WARNING\n  tags: [maturity_stable, host, container, process, filesystem, mitre_credential_access, T1552.001]\n",
                    "rendered": {
                      "text": "                                  proc.args contains \"id_ecdsa\"\n          )\n        ))\n  output: Grep private keys or passwords activities found (evt_type=%evt.type user=%user.name user_uid=%user.uid user_loginuid=%user.loginuid process=%proc.name proc_exepath=%proc.exepath parent=%proc.pname command=%proc.cmdline terminal=%proc.tty exe_flags=%evt.arg.flags %container.info)\n  priority:\n    WARNING\n  tags: [maturity_stable, host, container, process, filesystem, mitre_credential_access, T1552.001]\n",
                      "markdown": "`                                  proc.args contains \"id_ecdsa\"\n          )\n        ))\n  output: Grep private keys or passwords activities found (evt_type=%evt.type user=%user.name user_uid=%user.uid user_loginuid=%user.loginuid process=%proc.name proc_exepath=%proc.exepath parent=%proc.pname command=%proc.cmdline terminal=%proc.tty exe_flags=%evt.arg.flags %container.info)\n  priority:\n    WARNING\n  tags: [maturity_stable, host, container, process, filesystem, mitre_credential_access, T1552.001]\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/falco-rules-3.2.0-r0.apk/falco-rules-3.2.0-r0/etc/falco/falco_rules.yaml"
                },
                "region": {
                  "startLine": 884,
                  "startColumn": 75,
                  "endLine": 884,
                  "endColumn": 81,
                  "snippet": {
                    "text": "- rule: Search Private Keys or Passwords\n  desc: >\n    Detect attempts to search for private keys or passwords using the grep or find command. This is often seen with \n    unsophisticated attackers, as there are many ways to access files using bash built-ins that could go unnoticed. \n    Regardless, this serves as a solid baseline detection that can be tailored to cover these gaps while maintaining \n    an acceptable noise level.\n  condition: >\n",
                    "rendered": {
                      "text": "- rule: Search Private Keys or Passwords\n  desc: >\n    Detect attempts to search for private keys or passwords using the grep or find command. This is often seen with \n    unsophisticated attackers, as there are many ways to access files using bash built-ins that could go unnoticed. \n    Regardless, this serves as a solid baseline detection that can be tailored to cover these gaps while maintaining \n    an acceptable noise level.\n  condition: >\n",
                      "markdown": "`- rule: Search Private Keys or Passwords\n  desc: >\n    Detect attempts to search for private keys or passwords using the grep or find command. This is often seen with \n    unsophisticated attackers, as there are many ways to access files using bash built-ins that could go unnoticed. \n    Regardless, this serves as a solid baseline detection that can be tailored to cover these gaps while maintaining \n    an acceptable noise level.\n  condition: >\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/falco-rules-3.2.0-r0.apk/falco-rules-3.2.0-r0/etc/falco/falco_rules.yaml"
                },
                "region": {
                  "startLine": 883,
                  "startColumn": 77,
                  "endLine": 883,
                  "endColumn": 83,
                  "snippet": {
                    "text": "\n- rule: Search Private Keys or Passwords\n  desc: >\n    Detect attempts to search for private keys or passwords using the grep or find command. This is often seen with \n    unsophisticated attackers, as there are many ways to access files using bash built-ins that could go unnoticed. \n    Regardless, this serves as a solid baseline detection that can be tailored to cover these gaps while maintaining \n    an acceptable noise level.\n",
                    "rendered": {
                      "text": "\n- rule: Search Private Keys or Passwords\n  desc: >\n    Detect attempts to search for private keys or passwords using the grep or find command. This is often seen with \n    unsophisticated attackers, as there are many ways to access files using bash built-ins that could go unnoticed. \n    Regardless, this serves as a solid baseline detection that can be tailored to cover these gaps while maintaining \n    an acceptable noise level.\n",
                      "markdown": "`\n- rule: Search Private Keys or Passwords\n  desc: >\n    Detect attempts to search for private keys or passwords using the grep or find command. This is often seen with \n    unsophisticated attackers, as there are many ways to access files using bash built-ins that could go unnoticed. \n    Regardless, this serves as a solid baseline detection that can be tailored to cover these gaps while maintaining \n    an acceptable noise level.\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/falco-rules-3.2.0-r0.apk/falco-rules-3.2.0-r0/etc/falco/falco_rules.yaml"
                },
                "region": {
                  "startLine": 883,
                  "startColumn": 69,
                  "endLine": 883,
                  "endColumn": 75,
                  "snippet": {
                    "text": "\n- rule: Search Private Keys or Passwords\n  desc: >\n    Detect attempts to search for private keys or passwords using the grep or find command. This is often seen with \n    unsophisticated attackers, as there are many ways to access files using bash built-ins that could go unnoticed. \n    Regardless, this serves as a solid baseline detection that can be tailored to cover these gaps while maintaining \n    an acceptable noise level.\n",
                    "rendered": {
                      "text": "\n- rule: Search Private Keys or Passwords\n  desc: >\n    Detect attempts to search for private keys or passwords using the grep or find command. This is often seen with \n    unsophisticated attackers, as there are many ways to access files using bash built-ins that could go unnoticed. \n    Regardless, this serves as a solid baseline detection that can be tailored to cover these gaps while maintaining \n    an acceptable noise level.\n",
                      "markdown": "`\n- rule: Search Private Keys or Passwords\n  desc: >\n    Detect attempts to search for private keys or passwords using the grep or find command. This is often seen with \n    unsophisticated attackers, as there are many ways to access files using bash built-ins that could go unnoticed. \n    Regardless, this serves as a solid baseline detection that can be tailored to cover these gaps while maintaining \n    an acceptable noise level.\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/falco-rules-3.2.0-r0.apk/falco-rules-3.2.0-r0/etc/falco/falco_rules.yaml"
                },
                "region": {
                  "startLine": 877,
                  "startColumn": 28,
                  "endLine": 877,
                  "endColumn": 33,
                  "snippet": {
                    "text": "     proc.args icontains \"BEGIN EC PRIVATE\" or\n     (grep_more and\n      (proc.args icontains \" pass \" or\n       proc.args icontains \" ssh \" or\n       proc.args icontains \" user \"))\n    )\n\n",
                    "rendered": {
                      "text": "     proc.args icontains \"BEGIN EC PRIVATE\" or\n     (grep_more and\n      (proc.args icontains \" pass \" or\n       proc.args icontains \" ssh \" or\n       proc.args icontains \" user \"))\n    )\n\n",
                      "markdown": "`     proc.args icontains \"BEGIN EC PRIVATE\" or\n     (grep_more and\n      (proc.args icontains \" pass \" or\n       proc.args icontains \" ssh \" or\n       proc.args icontains \" user \"))\n    )\n\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/falco-rules-3.2.0-r0.apk/falco-rules-3.2.0-r0/etc/falco/falco_rules.yaml"
                },
                "region": {
                  "startLine": 763,
                  "startColumn": 11,
                  "endLine": 763,
                  "endColumn": 20,
                  "snippet": {
                    "text": "    '\"sh -c /bin/hostname -f 2> /dev/null\"',\n    '\"sh -c locale -a\"',\n    '\"sh -c  -t -i\"',\n    '\"sh -c openssl version\"',\n    '\"bash -c id -Gn kafadmin\"',\n    '\"sh -c /bin/sh -c ''date +%%s''\"',\n    '\"sh -c /usr/share/lighttpd/create-mime.conf.pl\"'\n",
                    "rendered": {
                      "text": "    '\"sh -c /bin/hostname -f 2> /dev/null\"',\n    '\"sh -c locale -a\"',\n    '\"sh -c  -t -i\"',\n    '\"sh -c openssl version\"',\n    '\"bash -c id -Gn kafadmin\"',\n    '\"sh -c /bin/sh -c ''date +%%s''\"',\n    '\"sh -c /usr/share/lighttpd/create-mime.conf.pl\"'\n",
                      "markdown": "`    '\"sh -c /bin/hostname -f 2> /dev/null\"',\n    '\"sh -c locale -a\"',\n    '\"sh -c  -t -i\"',\n    '\"sh -c openssl version\"',\n    '\"bash -c id -Gn kafadmin\"',\n    '\"sh -c /bin/sh -c ''date +%%s''\"',\n    '\"sh -c /usr/share/lighttpd/create-mime.conf.pl\"'\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/falco-rules-3.2.0-r0.apk/falco-rules-3.2.0-r0/etc/falco/falco_rules.yaml"
                },
                "region": {
                  "startLine": 755,
                  "startColumn": 11,
                  "endLine": 755,
                  "endColumn": 20,
                  "snippet": {
                    "text": "    '\"sh -c node -e \\\"require(''nan'')\\\"\"',\n    '\"sh -c node -e \\\"require(''nan'')\\\")\"',\n    '\"sh -c node $NODE_DEBUG_OPTION index.js \"',\n    '\"sh -c crontab -l 2\"',\n    '\"sh -c lsb_release -a\"',\n    '\"sh -c lsb_release -is 2>/dev/null\"',\n    '\"sh -c whoami\"',\n",
                    "rendered": {
                      "text": "    '\"sh -c node -e \\\"require(''nan'')\\\"\"',\n    '\"sh -c node -e \\\"require(''nan'')\\\")\"',\n    '\"sh -c node $NODE_DEBUG_OPTION index.js \"',\n    '\"sh -c crontab -l 2\"',\n    '\"sh -c lsb_release -a\"',\n    '\"sh -c lsb_release -is 2>/dev/null\"',\n    '\"sh -c whoami\"',\n",
                      "markdown": "`    '\"sh -c node -e \\\"require(''nan'')\\\"\"',\n    '\"sh -c node -e \\\"require(''nan'')\\\")\"',\n    '\"sh -c node $NODE_DEBUG_OPTION index.js \"',\n    '\"sh -c crontab -l 2\"',\n    '\"sh -c lsb_release -a\"',\n    '\"sh -c lsb_release -is 2>/dev/null\"',\n    '\"sh -c whoami\"',\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/falco-rules-3.2.0-r0.apk/falco-rules-3.2.0-r0/etc/falco/falco_rules.yaml"
                },
                "region": {
                  "startLine": 754,
                  "startColumn": 11,
                  "endLine": 754,
                  "endColumn": 17,
                  "snippet": {
                    "text": "    '\"sh -c node app.js\"',\n    '\"sh -c node -e \\\"require(''nan'')\\\"\"',\n    '\"sh -c node -e \\\"require(''nan'')\\\")\"',\n    '\"sh -c node $NODE_DEBUG_OPTION index.js \"',\n    '\"sh -c crontab -l 2\"',\n    '\"sh -c lsb_release -a\"',\n    '\"sh -c lsb_release -is 2>/dev/null\"',\n",
                    "rendered": {
                      "text": "    '\"sh -c node app.js\"',\n    '\"sh -c node -e \\\"require(''nan'')\\\"\"',\n    '\"sh -c node -e \\\"require(''nan'')\\\")\"',\n    '\"sh -c node $NODE_DEBUG_OPTION index.js \"',\n    '\"sh -c crontab -l 2\"',\n    '\"sh -c lsb_release -a\"',\n    '\"sh -c lsb_release -is 2>/dev/null\"',\n",
                      "markdown": "`    '\"sh -c node app.js\"',\n    '\"sh -c node -e \\\"require(''nan'')\\\"\"',\n    '\"sh -c node -e \\\"require(''nan'')\\\")\"',\n    '\"sh -c node $NODE_DEBUG_OPTION index.js \"',\n    '\"sh -c crontab -l 2\"',\n    '\"sh -c lsb_release -a\"',\n    '\"sh -c lsb_release -is 2>/dev/null\"',\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/falco-rules-3.2.0-r0.apk/falco-rules-3.2.0-r0/etc/falco/falco_rules.yaml"
                },
                "region": {
                  "startLine": 753,
                  "startColumn": 11,
                  "endLine": 753,
                  "endColumn": 17,
                  "snippet": {
                    "text": "    '\"sh -c node ./src/start.js\"',\n    '\"sh -c node app.js\"',\n    '\"sh -c node -e \\\"require(''nan'')\\\"\"',\n    '\"sh -c node -e \\\"require(''nan'')\\\")\"',\n    '\"sh -c node $NODE_DEBUG_OPTION index.js \"',\n    '\"sh -c crontab -l 2\"',\n    '\"sh -c lsb_release -a\"',\n",
                    "rendered": {
                      "text": "    '\"sh -c node ./src/start.js\"',\n    '\"sh -c node app.js\"',\n    '\"sh -c node -e \\\"require(''nan'')\\\"\"',\n    '\"sh -c node -e \\\"require(''nan'')\\\")\"',\n    '\"sh -c node $NODE_DEBUG_OPTION index.js \"',\n    '\"sh -c crontab -l 2\"',\n    '\"sh -c lsb_release -a\"',\n",
                      "markdown": "`    '\"sh -c node ./src/start.js\"',\n    '\"sh -c node app.js\"',\n    '\"sh -c node -e \\\"require(''nan'')\\\"\"',\n    '\"sh -c node -e \\\"require(''nan'')\\\")\"',\n    '\"sh -c node $NODE_DEBUG_OPTION index.js \"',\n    '\"sh -c crontab -l 2\"',\n    '\"sh -c lsb_release -a\"',\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/falco-rules-3.2.0-r0.apk/falco-rules-3.2.0-r0/etc/falco/falco_rules.yaml"
                },
                "region": {
                  "startLine": 752,
                  "startColumn": 11,
                  "endLine": 752,
                  "endColumn": 17,
                  "snippet": {
                    "text": "    '\"sh -c node index\"',\n    '\"sh -c node ./src/start.js\"',\n    '\"sh -c node app.js\"',\n    '\"sh -c node -e \\\"require(''nan'')\\\"\"',\n    '\"sh -c node -e \\\"require(''nan'')\\\")\"',\n    '\"sh -c node $NODE_DEBUG_OPTION index.js \"',\n    '\"sh -c crontab -l 2\"',\n",
                    "rendered": {
                      "text": "    '\"sh -c node index\"',\n    '\"sh -c node ./src/start.js\"',\n    '\"sh -c node app.js\"',\n    '\"sh -c node -e \\\"require(''nan'')\\\"\"',\n    '\"sh -c node -e \\\"require(''nan'')\\\")\"',\n    '\"sh -c node $NODE_DEBUG_OPTION index.js \"',\n    '\"sh -c crontab -l 2\"',\n",
                      "markdown": "`    '\"sh -c node index\"',\n    '\"sh -c node ./src/start.js\"',\n    '\"sh -c node app.js\"',\n    '\"sh -c node -e \\\"require(''nan'')\\\"\"',\n    '\"sh -c node -e \\\"require(''nan'')\\\")\"',\n    '\"sh -c node $NODE_DEBUG_OPTION index.js \"',\n    '\"sh -c crontab -l 2\"',\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/falco-rules-3.2.0-r0.apk/falco-rules-3.2.0-r0/etc/falco/falco_rules.yaml"
                },
                "region": {
                  "startLine": 751,
                  "startColumn": 11,
                  "endLine": 751,
                  "endColumn": 17,
                  "snippet": {
                    "text": "    '\"sh -c node index.js\"',\n    '\"sh -c node index\"',\n    '\"sh -c node ./src/start.js\"',\n    '\"sh -c node app.js\"',\n    '\"sh -c node -e \\\"require(''nan'')\\\"\"',\n    '\"sh -c node -e \\\"require(''nan'')\\\")\"',\n    '\"sh -c node $NODE_DEBUG_OPTION index.js \"',\n",
                    "rendered": {
                      "text": "    '\"sh -c node index.js\"',\n    '\"sh -c node index\"',\n    '\"sh -c node ./src/start.js\"',\n    '\"sh -c node app.js\"',\n    '\"sh -c node -e \\\"require(''nan'')\\\"\"',\n    '\"sh -c node -e \\\"require(''nan'')\\\")\"',\n    '\"sh -c node $NODE_DEBUG_OPTION index.js \"',\n",
                      "markdown": "`    '\"sh -c node index.js\"',\n    '\"sh -c node index\"',\n    '\"sh -c node ./src/start.js\"',\n    '\"sh -c node app.js\"',\n    '\"sh -c node -e \\\"require(''nan'')\\\"\"',\n    '\"sh -c node -e \\\"require(''nan'')\\\")\"',\n    '\"sh -c node $NODE_DEBUG_OPTION index.js \"',\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/falco-rules-3.2.0-r0.apk/falco-rules-3.2.0-r0/etc/falco/falco_rules.yaml"
                },
                "region": {
                  "startLine": 750,
                  "startColumn": 11,
                  "endLine": 750,
                  "endColumn": 17,
                  "snippet": {
                    "text": "    '\"sh -c stty -g < /dev/tty\"',\n    '\"sh -c node index.js\"',\n    '\"sh -c node index\"',\n    '\"sh -c node ./src/start.js\"',\n    '\"sh -c node app.js\"',\n    '\"sh -c node -e \\\"require(''nan'')\\\"\"',\n    '\"sh -c node -e \\\"require(''nan'')\\\")\"',\n",
                    "rendered": {
                      "text": "    '\"sh -c stty -g < /dev/tty\"',\n    '\"sh -c node index.js\"',\n    '\"sh -c node index\"',\n    '\"sh -c node ./src/start.js\"',\n    '\"sh -c node app.js\"',\n    '\"sh -c node -e \\\"require(''nan'')\\\"\"',\n    '\"sh -c node -e \\\"require(''nan'')\\\")\"',\n",
                      "markdown": "`    '\"sh -c stty -g < /dev/tty\"',\n    '\"sh -c node index.js\"',\n    '\"sh -c node index\"',\n    '\"sh -c node ./src/start.js\"',\n    '\"sh -c node app.js\"',\n    '\"sh -c node -e \\\"require(''nan'')\\\"\"',\n    '\"sh -c node -e \\\"require(''nan'')\\\")\"',\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/falco-rules-3.2.0-r0.apk/falco-rules-3.2.0-r0/etc/falco/falco_rules.yaml"
                },
                "region": {
                  "startLine": 749,
                  "startColumn": 11,
                  "endLine": 749,
                  "endColumn": 17,
                  "snippet": {
                    "text": "    '\"sh -c stty -a < /dev/tty\"',\n    '\"sh -c stty -g < /dev/tty\"',\n    '\"sh -c node index.js\"',\n    '\"sh -c node index\"',\n    '\"sh -c node ./src/start.js\"',\n    '\"sh -c node app.js\"',\n    '\"sh -c node -e \\\"require(''nan'')\\\"\"',\n",
                    "rendered": {
                      "text": "    '\"sh -c stty -a < /dev/tty\"',\n    '\"sh -c stty -g < /dev/tty\"',\n    '\"sh -c node index.js\"',\n    '\"sh -c node index\"',\n    '\"sh -c node ./src/start.js\"',\n    '\"sh -c node app.js\"',\n    '\"sh -c node -e \\\"require(''nan'')\\\"\"',\n",
                      "markdown": "`    '\"sh -c stty -a < /dev/tty\"',\n    '\"sh -c stty -g < /dev/tty\"',\n    '\"sh -c node index.js\"',\n    '\"sh -c node index\"',\n    '\"sh -c node ./src/start.js\"',\n    '\"sh -c node app.js\"',\n    '\"sh -c node -e \\\"require(''nan'')\\\"\"',\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/falco-rules-3.2.0-r0.apk/falco-rules-3.2.0-r0/etc/falco/falco_rules.yaml"
                },
                "region": {
                  "startLine": 748,
                  "startColumn": 11,
                  "endLine": 748,
                  "endColumn": 17,
                  "snippet": {
                    "text": "    '\"sh -c stty -a 2>/dev/null\"',\n    '\"sh -c stty -a < /dev/tty\"',\n    '\"sh -c stty -g < /dev/tty\"',\n    '\"sh -c node index.js\"',\n    '\"sh -c node index\"',\n    '\"sh -c node ./src/start.js\"',\n    '\"sh -c node app.js\"',\n",
                    "rendered": {
                      "text": "    '\"sh -c stty -a 2>/dev/null\"',\n    '\"sh -c stty -a < /dev/tty\"',\n    '\"sh -c stty -g < /dev/tty\"',\n    '\"sh -c node index.js\"',\n    '\"sh -c node index\"',\n    '\"sh -c node ./src/start.js\"',\n    '\"sh -c node app.js\"',\n",
                      "markdown": "`    '\"sh -c stty -a 2>/dev/null\"',\n    '\"sh -c stty -a < /dev/tty\"',\n    '\"sh -c stty -g < /dev/tty\"',\n    '\"sh -c node index.js\"',\n    '\"sh -c node index\"',\n    '\"sh -c node ./src/start.js\"',\n    '\"sh -c node app.js\"',\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/falco-rules-3.2.0-r0.apk/falco-rules-3.2.0-r0/etc/falco/falco_rules.yaml"
                },
                "region": {
                  "startLine": 739,
                  "startColumn": 11,
                  "endLine": 739,
                  "endColumn": 17,
                  "snippet": {
                    "text": "    '\"sh -c uname -r 2>&1\"',\n    '\"sh -c uname -v 2>&1\"',\n    '\"sh -c uname -a 2>&1\"',\n    '\"sh -c ruby -v 2>&1\"',\n    '\"sh -c getconf CLK_TCK\"',\n    '\"sh -c getconf PAGESIZE\"',\n    '\"sh -c LC_ALL=C LANG=C /sbin/ldconfig -p 2>/dev/null\"',\n",
                    "rendered": {
                      "text": "    '\"sh -c uname -r 2>&1\"',\n    '\"sh -c uname -v 2>&1\"',\n    '\"sh -c uname -a 2>&1\"',\n    '\"sh -c ruby -v 2>&1\"',\n    '\"sh -c getconf CLK_TCK\"',\n    '\"sh -c getconf PAGESIZE\"',\n    '\"sh -c LC_ALL=C LANG=C /sbin/ldconfig -p 2>/dev/null\"',\n",
                      "markdown": "`    '\"sh -c uname -r 2>&1\"',\n    '\"sh -c uname -v 2>&1\"',\n    '\"sh -c uname -a 2>&1\"',\n    '\"sh -c ruby -v 2>&1\"',\n    '\"sh -c getconf CLK_TCK\"',\n    '\"sh -c getconf PAGESIZE\"',\n    '\"sh -c LC_ALL=C LANG=C /sbin/ldconfig -p 2>/dev/null\"',\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/falco-rules-3.2.0-r0.apk/falco-rules-3.2.0-r0/etc/falco/falco_rules.yaml"
                },
                "region": {
                  "startLine": 714,
                  "startColumn": 52,
                  "endLine": 714,
                  "endColumn": 58,
                  "snippet": {
                    "text": "  desc: >\n    A shell was used as the entrypoint/exec point into a container with an attached terminal. Parent process may have \n    legitimately already exited and be null (read container_entrypoint macro). Common when using \"kubectl exec\" in Kubernetes. \n    Correlate with k8saudit exec logs if possible to find user or serviceaccount token used (fuzzy correlation by namespace and pod name). \n    Rather than considering it a standalone rule, it may be best used as generic auditing rule while examining other triggered \n    rules in this container/tty.\n  condition: >\n",
                    "rendered": {
                      "text": "  desc: >\n    A shell was used as the entrypoint/exec point into a container with an attached terminal. Parent process may have \n    legitimately already exited and be null (read container_entrypoint macro). Common when using \"kubectl exec\" in Kubernetes. \n    Correlate with k8saudit exec logs if possible to find user or serviceaccount token used (fuzzy correlation by namespace and pod name). \n    Rather than considering it a standalone rule, it may be best used as generic auditing rule while examining other triggered \n    rules in this container/tty.\n  condition: >\n",
                      "markdown": "`  desc: >\n    A shell was used as the entrypoint/exec point into a container with an attached terminal. Parent process may have \n    legitimately already exited and be null (read container_entrypoint macro). Common when using \"kubectl exec\" in Kubernetes. \n    Correlate with k8saudit exec logs if possible to find user or serviceaccount token used (fuzzy correlation by namespace and pod name). \n    Rather than considering it a standalone rule, it may be best used as generic auditing rule while examining other triggered \n    rules in this container/tty.\n  condition: >\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/falco-rules-3.2.0-r0.apk/falco-rules-3.2.0-r0/etc/falco/falco_rules.yaml"
                },
                "region": {
                  "startLine": 689,
                  "startColumn": 66,
                  "endLine": 689,
                  "endColumn": 71,
                  "snippet": {
                    "text": "r.name %proc.name %evt.dir %evt.type %evt.args %fd.name)\"\n#  priority: WARNING\n- rule: System user interactive\n  desc: > \n    System (e.g. non-login) users spawning new processes. Can add custom service users (e.g. apache or mysqld).\n    'Interactive' is defined as new processes as descendants of an ssh session or login process. Consider further tuning \n    by only looking at processes in a terminal / tty (proc.tty != 0). A newer field proc.is_vpgid_leader could be of help \n    to distinguish if the process was \"directly\" executed, for instance, in a tty, or executed as a descendant process in the ",
                    "rendered": {
                      "text": "r.name %proc.name %evt.dir %evt.type %evt.args %fd.name)\"\n#  priority: WARNING\n- rule: System user interactive\n  desc: > \n    System (e.g. non-login) users spawning new processes. Can add custom service users (e.g. apache or mysqld).\n    'Interactive' is defined as new processes as descendants of an ssh session or login process. Consider further tuning \n    by only looking at processes in a terminal / tty (proc.tty != 0). A newer field proc.is_vpgid_leader could be of help \n    to distinguish if the process was \"directly\" executed, for instance, in a tty, or executed as a descendant process in the ",
                      "markdown": "`r.name %proc.name %evt.dir %evt.type %evt.args %fd.name)\"\n#  priority: WARNING\n- rule: System user interactive\n  desc: > \n    System (e.g. non-login) users spawning new processes. Can add custom service users (e.g. apache or mysqld).\n    'Interactive' is defined as new processes as descendants of an ssh session or login process. Consider further tuning \n    by only looking at processes in a terminal / tty (proc.tty != 0). A newer field proc.is_vpgid_leader could be of help \n    to distinguish if the process was \"directly\" executed, for instance, in a tty, or executed as a descendant process in the `"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/falco-rules-3.2.0-r0.apk/falco-rules-3.2.0-r0/etc/falco/falco_rules.yaml"
                },
                "region": {
                  "startLine": 688,
                  "startColumn": 72,
                  "endLine": 688,
                  "endColumn": 81,
                  "snippet": {
                    "text": "#  priority: WARNING\n- rule: System user interactive\n  desc: > \n    System (e.g. non-login) users spawning new processes. Can add custom service users (e.g. apache or mysqld).\n    'Interactive' is defined as new processes as descendants of an ssh session or login process. Consider further tuning \n    by only looking at processes in a terminal / tty (proc.tty != 0). A newer field proc.is_vpgid_leader could be of help \n    to distinguish if the process was \"directly\" executed, for instance, in a tty, or executed as a descendant process in the \n",
                    "rendered": {
                      "text": "#  priority: WARNING\n- rule: System user interactive\n  desc: > \n    System (e.g. non-login) users spawning new processes. Can add custom service users (e.g. apache or mysqld).\n    'Interactive' is defined as new processes as descendants of an ssh session or login process. Consider further tuning \n    by only looking at processes in a terminal / tty (proc.tty != 0). A newer field proc.is_vpgid_leader could be of help \n    to distinguish if the process was \"directly\" executed, for instance, in a tty, or executed as a descendant process in the \n",
                      "markdown": "`#  priority: WARNING\n- rule: System user interactive\n  desc: > \n    System (e.g. non-login) users spawning new processes. Can add custom service users (e.g. apache or mysqld).\n    'Interactive' is defined as new processes as descendants of an ssh session or login process. Consider further tuning \n    by only looking at processes in a terminal / tty (proc.tty != 0). A newer field proc.is_vpgid_leader could be of help \n    to distinguish if the process was \"directly\" executed, for instance, in a tty, or executed as a descendant process in the \n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/falco-rules-3.2.0-r0.apk/falco-rules-3.2.0-r0/etc/falco/falco_rules.yaml"
                },
                "region": {
                  "startLine": 672,
                  "startColumn": 16,
                  "endLine": 672,
                  "endColumn": 22,
                  "snippet": {
                    "text": "# - clone a second program runc:[2:INIT] + exec to the root program.\n#   The parent of runc:[2:INIT] is runc:0:PARENT]\n# As soon as 1:CHILD is created, 0:PARENT exits, so there's a race\n#   where at the time 2:INIT execs the root program, 0:PARENT might have\n#   already exited, or might still be around. So we handle both.\n# We also let runc:[1:CHILD] count as the parent process, which can occur\n# when we lose events and lose track of state.\n",
                    "rendered": {
                      "text": "# - clone a second program runc:[2:INIT] + exec to the root program.\n#   The parent of runc:[2:INIT] is runc:0:PARENT]\n# As soon as 1:CHILD is created, 0:PARENT exits, so there's a race\n#   where at the time 2:INIT execs the root program, 0:PARENT might have\n#   already exited, or might still be around. So we handle both.\n# We also let runc:[1:CHILD] count as the parent process, which can occur\n# when we lose events and lose track of state.\n",
                      "markdown": "`# - clone a second program runc:[2:INIT] + exec to the root program.\n#   The parent of runc:[2:INIT] is runc:0:PARENT]\n# As soon as 1:CHILD is created, 0:PARENT exits, so there's a race\n#   where at the time 2:INIT execs the root program, 0:PARENT might have\n#   already exited, or might still be around. So we handle both.\n# We also let runc:[1:CHILD] count as the parent process, which can occur\n# when we lose events and lose track of state.\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/falco-rules-3.2.0-r0.apk/falco-rules-3.2.0-r0/etc/falco/falco_rules.yaml"
                },
                "region": {
                  "startLine": 607,
                  "startColumn": 63,
                  "endLine": 608,
                  "snippet": {
                    "text": "  priority: NOTICE\n  tags: [maturity_stable, host, container, process, shell, mitre_execution, T1059.004]\n\n# These images are allowed both to run with --privileged and to mount\n# sensitive paths from the host filesystem.\n#\n# NOTE: This list is only provided for backwards compatibility with\n# older local falco rules files that may have been appending to\n",
                    "rendered": {
                      "text": "  priority: NOTICE\n  tags: [maturity_stable, host, container, process, shell, mitre_execution, T1059.004]\n\n# These images are allowed both to run with --privileged and to mount\n# sensitive paths from the host filesystem.\n#\n# NOTE: This list is only provided for backwards compatibility with\n# older local falco rules files that may have been appending to\n",
                      "markdown": "`  priority: NOTICE\n  tags: [maturity_stable, host, container, process, shell, mitre_execution, T1059.004]\n\n# These images are allowed both to run with --privileged and to mount\n# sensitive paths from the host filesystem.\n#\n# NOTE: This list is only provided for backwards compatibility with\n# older local falco rules files that may have been appending to\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/falco-rules-3.2.0-r0.apk/falco-rules-3.2.0-r0/etc/falco/falco_rules.yaml"
                },
                "region": {
                  "startLine": 569,
                  "startColumn": 49,
                  "endLine": 569,
                  "endColumn": 55,
                  "snippet": {
                    "text": "rocess name. Therefore, \n    rely more on proc.exe to define Java applications. This rule can be noisier, as you can see in the exhaustive \n    existing tuning. However, given it is very behavior-driven and broad, it is universally relevant to catch \n    general Remote Code Execution (RCE). Allocate time to tune this rule for your use cases and reduce noise. \n    Tuning suggestions include looking at the duration of the parent process (proc.ppid.duration) to define your \n    long-running app processes. Checking for newer fields such as proc.vpgid.name and proc.vpgid.exe instead of the \n    direct pa",
                    "rendered": {
                      "text": "rocess name. Therefore, \n    rely more on proc.exe to define Java applications. This rule can be noisier, as you can see in the exhaustive \n    existing tuning. However, given it is very behavior-driven and broad, it is universally relevant to catch \n    general Remote Code Execution (RCE). Allocate time to tune this rule for your use cases and reduce noise. \n    Tuning suggestions include looking at the duration of the parent process (proc.ppid.duration) to define your \n    long-running app processes. Checking for newer fields such as proc.vpgid.name and proc.vpgid.exe instead of the \n    direct pa",
                      "markdown": "`rocess name. Therefore, \n    rely more on proc.exe to define Java applications. This rule can be noisier, as you can see in the exhaustive \n    existing tuning. However, given it is very behavior-driven and broad, it is universally relevant to catch \n    general Remote Code Execution (RCE). Allocate time to tune this rule for your use cases and reduce noise. \n    Tuning suggestions include looking at the duration of the parent process (proc.ppid.duration) to define your \n    long-running app processes. Checking for newer fields such as proc.vpgid.name and proc.vpgid.exe instead of the \n    direct pa`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/falco-rules-3.2.0-r0.apk/falco-rules-3.2.0-r0/etc/falco/falco_rules.yaml"
                },
                "region": {
                  "startLine": 523,
                  "startColumn": 56,
                  "endLine": 523,
                  "endColumn": 62,
                  "snippet": {
                    "text": "# don't want to consider node processes protected shell spawners.\n#\n# We have to choose one of these cases, so we consider node processes\n# as unprotected by default. If you want to consider any node process\n# run in a container as a protected shell spawner, override the below\n# macro to remove the \"never_true\" clause, which allows it to take effect.\n- macro: possibly_node_in_container\n",
                    "rendered": {
                      "text": "# don't want to consider node processes protected shell spawners.\n#\n# We have to choose one of these cases, so we consider node processes\n# as unprotected by default. If you want to consider any node process\n# run in a container as a protected shell spawner, override the below\n# macro to remove the \"never_true\" clause, which allows it to take effect.\n- macro: possibly_node_in_container\n",
                      "markdown": "`# don't want to consider node processes protected shell spawners.\n#\n# We have to choose one of these cases, so we consider node processes\n# as unprotected by default. If you want to consider any node process\n# run in a container as a protected shell spawner, override the below\n# macro to remove the \"never_true\" clause, which allows it to take effect.\n- macro: possibly_node_in_container\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/falco-rules-3.2.0-r0.apk/falco-rules-3.2.0-r0/etc/falco/falco_rules.yaml"
                },
                "region": {
                  "startLine": 522,
                  "startColumn": 54,
                  "endLine": 522,
                  "endColumn": 60,
                  "snippet": {
                    "text": "# tool. In these cases, shells are very likely and in these cases you\n# don't want to consider node processes protected shell spawners.\n#\n# We have to choose one of these cases, so we consider node processes\n# as unprotected by default. If you want to consider any node process\n# run in a container as a protected shell spawner, override the below\n# macro to remove the \"never_true\" clause, which allows it to take effect.\n",
                    "rendered": {
                      "text": "# tool. In these cases, shells are very likely and in these cases you\n# don't want to consider node processes protected shell spawners.\n#\n# We have to choose one of these cases, so we consider node processes\n# as unprotected by default. If you want to consider any node process\n# run in a container as a protected shell spawner, override the below\n# macro to remove the \"never_true\" clause, which allows it to take effect.\n",
                      "markdown": "`# tool. In these cases, shells are very likely and in these cases you\n# don't want to consider node processes protected shell spawners.\n#\n# We have to choose one of these cases, so we consider node processes\n# as unprotected by default. If you want to consider any node process\n# run in a container as a protected shell spawner, override the below\n# macro to remove the \"never_true\" clause, which allows it to take effect.\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/falco-rules-3.2.0-r0.apk/falco-rules-3.2.0-r0/etc/falco/falco_rules.yaml"
                },
                "region": {
                  "startLine": 520,
                  "startColumn": 24,
                  "endLine": 520,
                  "endColumn": 30,
                  "snippet": {
                    "text": "# However, there are other uses of node related to build pipelines for\n# which node is not really a server but instead a general scripting\n# tool. In these cases, shells are very likely and in these cases you\n# don't want to consider node processes protected shell spawners.\n#\n# We have to choose one of these cases, so we consider node processes\n# as unprotected by default. If you want to consider any node process\n",
                    "rendered": {
                      "text": "# However, there are other uses of node related to build pipelines for\n# which node is not really a server but instead a general scripting\n# tool. In these cases, shells are very likely and in these cases you\n# don't want to consider node processes protected shell spawners.\n#\n# We have to choose one of these cases, so we consider node processes\n# as unprotected by default. If you want to consider any node process\n",
                      "markdown": "`# However, there are other uses of node related to build pipelines for\n# which node is not really a server but instead a general scripting\n# tool. In these cases, shells are very likely and in these cases you\n# don't want to consider node processes protected shell spawners.\n#\n# We have to choose one of these cases, so we consider node processes\n# as unprotected by default. If you want to consider any node process\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/falco-rules-3.2.0-r0.apk/falco-rules-3.2.0-r0/etc/falco/falco_rules.yaml"
                },
                "region": {
                  "startLine": 518,
                  "startColumn": 7,
                  "endLine": 518,
                  "endColumn": 13,
                  "snippet": {
                    "text": "# server using something like express.\n#\n# However, there are other uses of node related to build pipelines for\n# which node is not really a server but instead a general scripting\n# tool. In these cases, shells are very likely and in these cases you\n# don't want to consider node processes protected shell spawners.\n#\n",
                    "rendered": {
                      "text": "# server using something like express.\n#\n# However, there are other uses of node related to build pipelines for\n# which node is not really a server but instead a general scripting\n# tool. In these cases, shells are very likely and in these cases you\n# don't want to consider node processes protected shell spawners.\n#\n",
                      "markdown": "`# server using something like express.\n#\n# However, there are other uses of node related to build pipelines for\n# which node is not really a server but instead a general scripting\n# tool. In these cases, shells are very likely and in these cases you\n# don't want to consider node processes protected shell spawners.\n#\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/falco-rules-3.2.0-r0.apk/falco-rules-3.2.0-r0/etc/falco/falco_rules.yaml"
                },
                "region": {
                  "startLine": 517,
                  "startColumn": 34,
                  "endLine": 517,
                  "endColumn": 40,
                  "snippet": {
                    "text": "# entrypoint of the container, and when the node app is a long-lived\n# server using something like express.\n#\n# However, there are other uses of node related to build pipelines for\n# which node is not really a server but instead a general scripting\n# tool. In these cases, shells are very likely and in these cases you\n# don't want to consider node processes protected shell spawners.\n",
                    "rendered": {
                      "text": "# entrypoint of the container, and when the node app is a long-lived\n# server using something like express.\n#\n# However, there are other uses of node related to build pipelines for\n# which node is not really a server but instead a general scripting\n# tool. In these cases, shells are very likely and in these cases you\n# don't want to consider node processes protected shell spawners.\n",
                      "markdown": "`# entrypoint of the container, and when the node app is a long-lived\n# server using something like express.\n#\n# However, there are other uses of node related to build pipelines for\n# which node is not really a server but instead a general scripting\n# tool. In these cases, shells are very likely and in these cases you\n# don't want to consider node processes protected shell spawners.\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/falco-rules-3.2.0-r0.apk/falco-rules-3.2.0-r0/etc/falco/falco_rules.yaml"
                },
                "region": {
                  "startLine": 514,
                  "startColumn": 43,
                  "endLine": 514,
                  "endColumn": 49,
                  "snippet": {
                    "text": "# In some cases, you may want to consider node processes run directly\n# in containers as protected shell spawners. Examples include using\n# pm2-docker or pm2 start some-app.js --no-daemon-mode as the direct\n# entrypoint of the container, and when the node app is a long-lived\n# server using something like express.\n#\n# However, there are other uses of node related to build pipelines for\n",
                    "rendered": {
                      "text": "# In some cases, you may want to consider node processes run directly\n# in containers as protected shell spawners. Examples include using\n# pm2-docker or pm2 start some-app.js --no-daemon-mode as the direct\n# entrypoint of the container, and when the node app is a long-lived\n# server using something like express.\n#\n# However, there are other uses of node related to build pipelines for\n",
                      "markdown": "`# In some cases, you may want to consider node processes run directly\n# in containers as protected shell spawners. Examples include using\n# pm2-docker or pm2 start some-app.js --no-daemon-mode as the direct\n# entrypoint of the container, and when the node app is a long-lived\n# server using something like express.\n#\n# However, there are other uses of node related to build pipelines for\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/falco-rules-3.2.0-r0.apk/falco-rules-3.2.0-r0/etc/falco/falco_rules.yaml"
                },
                "region": {
                  "startLine": 511,
                  "startColumn": 41,
                  "endLine": 511,
                  "endColumn": 47,
                  "snippet": {
                    "text": "- macro: check_process_status\n  condition: (proc.cmdline startswith \"sh -c kill -0 \")\n\n# In some cases, you may want to consider node processes run directly\n# in containers as protected shell spawners. Examples include using\n# pm2-docker or pm2 start some-app.js --no-daemon-mode as the direct\n# entrypoint of the container, and when the node app is a long-lived\n",
                    "rendered": {
                      "text": "- macro: check_process_status\n  condition: (proc.cmdline startswith \"sh -c kill -0 \")\n\n# In some cases, you may want to consider node processes run directly\n# in containers as protected shell spawners. Examples include using\n# pm2-docker or pm2 start some-app.js --no-daemon-mode as the direct\n# entrypoint of the container, and when the node app is a long-lived\n",
                      "markdown": "`- macro: check_process_status\n  condition: (proc.cmdline startswith \"sh -c kill -0 \")\n\n# In some cases, you may want to consider node processes run directly\n# in containers as protected shell spawners. Examples include using\n# pm2-docker or pm2 start some-app.js --no-daemon-mode as the direct\n# entrypoint of the container, and when the node app is a long-lived\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/falco-rules-3.2.0-r0.apk/falco-rules-3.2.0-r0/etc/falco/falco_rules.yaml"
                },
                "region": {
                  "startLine": 404,
                  "startColumn": 13,
                  "endLine": 404,
                  "endColumn": 18,
                  "snippet": {
                    "text": "    information). Exceptions are made for known trusted programs. Can be customized as needed.\n    In modern containerized cloud infrastructures, accessing traditional Linux sensitive files \n    might be less relevant, yet it remains valuable for baseline detections. While we provide additional \n    rules for SSH or cloud vendor-specific credentials, you can significantly enhance your security \n    program by crafting custom rules for critical application credentials unique to your environment.\n  condition: >\n    open_read\n",
                    "rendered": {
                      "text": "    information). Exceptions are made for known trusted programs. Can be customized as needed.\n    In modern containerized cloud infrastructures, accessing traditional Linux sensitive files \n    might be less relevant, yet it remains valuable for baseline detections. While we provide additional \n    rules for SSH or cloud vendor-specific credentials, you can significantly enhance your security \n    program by crafting custom rules for critical application credentials unique to your environment.\n  condition: >\n    open_read\n",
                      "markdown": "`    information). Exceptions are made for known trusted programs. Can be customized as needed.\n    In modern containerized cloud infrastructures, accessing traditional Linux sensitive files \n    might be less relevant, yet it remains valuable for baseline detections. While we provide additional \n    rules for SSH or cloud vendor-specific credentials, you can significantly enhance your security \n    program by crafting custom rules for critical application credentials unique to your environment.\n  condition: >\n    open_read\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/falco-rules-3.2.0-r0.apk/falco-rules-3.2.0-r0/etc/falco/falco_rules.yaml"
                },
                "region": {
                  "startLine": 350,
                  "startColumn": 13,
                  "endLine": 350,
                  "endColumn": 18,
                  "snippet": {
                    "text": "    at startup to load initial state, but not afterwards. Can be customized as needed.\n    In modern containerized cloud infrastructures, accessing traditional Linux sensitive files \n    might be less relevant, yet it remains valuable for baseline detections. While we provide additional \n    rules for SSH or cloud vendor-specific credentials, you can significantly enhance your security \n    program by crafting custom rules for critical application credentials unique to your environment.\n  condition: > \n    open_read \n",
                    "rendered": {
                      "text": "    at startup to load initial state, but not afterwards. Can be customized as needed.\n    In modern containerized cloud infrastructures, accessing traditional Linux sensitive files \n    might be less relevant, yet it remains valuable for baseline detections. While we provide additional \n    rules for SSH or cloud vendor-specific credentials, you can significantly enhance your security \n    program by crafting custom rules for critical application credentials unique to your environment.\n  condition: > \n    open_read \n",
                      "markdown": "`    at startup to load initial state, but not afterwards. Can be customized as needed.\n    In modern containerized cloud infrastructures, accessing traditional Linux sensitive files \n    might be less relevant, yet it remains valuable for baseline detections. While we provide additional \n    rules for SSH or cloud vendor-specific credentials, you can significantly enhance your security \n    program by crafting custom rules for critical application credentials unique to your environment.\n  condition: > \n    open_read \n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/falco-rules-3.2.0-r0.apk/falco-rules-3.2.0-r0/etc/falco/falco_rules.yaml"
                },
                "region": {
                  "startLine": 246,
                  "startColumn": 1,
                  "endLine": 246,
                  "endColumn": 10,
                  "snippet": {
                    "text": "  items: [10_etc_sudoers., 10_passwd_group]\n\n# System users that should never log into a system. Consider adding your own\n# service users (e.g. 'apache' or 'mysqld') here.\n- macro: system_users\n  condition: (user.name in (bin, daemon, games, lp, mail, nobody, sshd, sync, uucp, www-data))\n\n",
                    "rendered": {
                      "text": "  items: [10_etc_sudoers., 10_passwd_group]\n\n# System users that should never log into a system. Consider adding your own\n# service users (e.g. 'apache' or 'mysqld') here.\n- macro: system_users\n  condition: (user.name in (bin, daemon, games, lp, mail, nobody, sshd, sync, uucp, www-data))\n\n",
                      "markdown": "`  items: [10_etc_sudoers., 10_passwd_group]\n\n# System users that should never log into a system. Consider adding your own\n# service users (e.g. 'apache' or 'mysqld') here.\n- macro: system_users\n  condition: (user.name in (bin, daemon, games, lp, mail, nobody, sshd, sync, uucp, www-data))\n\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/falco-rules-3.2.0-r0.apk/falco-rules-3.2.0-r0/etc/falco/falco_rules.yaml"
                },
                "region": {
                  "startLine": 214,
                  "startColumn": 61,
                  "endLine": 215,
                  "snippet": {
                    "text": "    (fd.name in (sensitive_file_names) or\n      fd.directory in (/etc/sudoers.d, /etc/pam.d))\n\n# Indicates that the process is new. Currently detected using time\n# since process was started, using a threshold of 5 seconds.\n- macro: proc_is_new\n  condition: (proc.duration <= 5000000000)\n\n",
                    "rendered": {
                      "text": "    (fd.name in (sensitive_file_names) or\n      fd.directory in (/etc/sudoers.d, /etc/pam.d))\n\n# Indicates that the process is new. Currently detected using time\n# since process was started, using a threshold of 5 seconds.\n- macro: proc_is_new\n  condition: (proc.duration <= 5000000000)\n\n",
                      "markdown": "`    (fd.name in (sensitive_file_names) or\n      fd.directory in (/etc/sudoers.d, /etc/pam.d))\n\n# Indicates that the process is new. Currently detected using time\n# since process was started, using a threshold of 5 seconds.\n- macro: proc_is_new\n  condition: (proc.duration <= 5000000000)\n\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/falco-rules-3.2.0-r0.apk/falco-rules-3.2.0-r0/etc/falco/falco_rules.yaml"
                },
                "region": {
                  "startLine": 123,
                  "startColumn": 24,
                  "endLine": 123,
                  "endColumn": 31,
                  "snippet": {
                    "text": "    ]\n\n# repoquery -l shadow-utils | grep bin | xargs ls -ld | grep -v '^d' |\n#     awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: shadowutils_binaries\n  items: [\n    chage, gpasswd, lastlog, newgrp, sg, adduser, deluser, chpasswd,\n",
                    "rendered": {
                      "text": "    ]\n\n# repoquery -l shadow-utils | grep bin | xargs ls -ld | grep -v '^d' |\n#     awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: shadowutils_binaries\n  items: [\n    chage, gpasswd, lastlog, newgrp, sg, adduser, deluser, chpasswd,\n",
                      "markdown": "`    ]\n\n# repoquery -l shadow-utils | grep bin | xargs ls -ld | grep -v '^d' |\n#     awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: shadowutils_binaries\n  items: [\n    chage, gpasswd, lastlog, newgrp, sg, adduser, deluser, chpasswd,\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/falco-rules-3.2.0-r0.apk/falco-rules-3.2.0-r0/etc/falco/falco_rules.yaml"
                },
                "region": {
                  "startLine": 123,
                  "startColumn": 5,
                  "endLine": 123,
                  "endColumn": 10,
                  "snippet": {
                    "text": "    ]\n\n# repoquery -l shadow-utils | grep bin | xargs ls -ld | grep -v '^d' |\n#     awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: shadowutils_binaries\n  items: [\n    chage, gpasswd, lastlog, newgrp, sg, adduser, deluser, chpasswd,\n",
                    "rendered": {
                      "text": "    ]\n\n# repoquery -l shadow-utils | grep bin | xargs ls -ld | grep -v '^d' |\n#     awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: shadowutils_binaries\n  items: [\n    chage, gpasswd, lastlog, newgrp, sg, adduser, deluser, chpasswd,\n",
                      "markdown": "`    ]\n\n# repoquery -l shadow-utils | grep bin | xargs ls -ld | grep -v '^d' |\n#     awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: shadowutils_binaries\n  items: [\n    chage, gpasswd, lastlog, newgrp, sg, adduser, deluser, chpasswd,\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/falco-rules-3.2.0-r0.apk/falco-rules-3.2.0-r0/etc/falco/falco_rules.yaml"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 55,
                  "endLine": 122,
                  "endColumn": 61,
                  "snippet": {
                    "text": "    gpasswd, chfn, expiry, passwd, vigr, cpgr, adduser, addgroup, deluser, delgroup\n    ]\n\n# repoquery -l shadow-utils | grep bin | xargs ls -ld | grep -v '^d' |\n#     awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: shadowutils_binaries\n  items: [\n",
                    "rendered": {
                      "text": "    gpasswd, chfn, expiry, passwd, vigr, cpgr, adduser, addgroup, deluser, delgroup\n    ]\n\n# repoquery -l shadow-utils | grep bin | xargs ls -ld | grep -v '^d' |\n#     awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: shadowutils_binaries\n  items: [\n",
                      "markdown": "`    gpasswd, chfn, expiry, passwd, vigr, cpgr, adduser, addgroup, deluser, delgroup\n    ]\n\n# repoquery -l shadow-utils | grep bin | xargs ls -ld | grep -v '^d' |\n#     awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: shadowutils_binaries\n  items: [\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/falco-rules-3.2.0-r0.apk/falco-rules-3.2.0-r0/etc/falco/falco_rules.yaml"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 40,
                  "endLine": 122,
                  "endColumn": 47,
                  "snippet": {
                    "text": "    gpasswd, chfn, expiry, passwd, vigr, cpgr, adduser, addgroup, deluser, delgroup\n    ]\n\n# repoquery -l shadow-utils | grep bin | xargs ls -ld | grep -v '^d' |\n#     awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: shadowutils_binaries\n  items: [\n",
                    "rendered": {
                      "text": "    gpasswd, chfn, expiry, passwd, vigr, cpgr, adduser, addgroup, deluser, delgroup\n    ]\n\n# repoquery -l shadow-utils | grep bin | xargs ls -ld | grep -v '^d' |\n#     awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: shadowutils_binaries\n  items: [\n",
                      "markdown": "`    gpasswd, chfn, expiry, passwd, vigr, cpgr, adduser, addgroup, deluser, delgroup\n    ]\n\n# repoquery -l shadow-utils | grep bin | xargs ls -ld | grep -v '^d' |\n#     awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: shadowutils_binaries\n  items: [\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/falco-rules-3.2.0-r0.apk/falco-rules-3.2.0-r0/etc/falco/falco_rules.yaml"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 29,
                  "endLine": 122,
                  "endColumn": 35,
                  "snippet": {
                    "text": "    gpasswd, chfn, expiry, passwd, vigr, cpgr, adduser, addgroup, deluser, delgroup\n    ]\n\n# repoquery -l shadow-utils | grep bin | xargs ls -ld | grep -v '^d' |\n#     awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: shadowutils_binaries\n  items: [\n",
                    "rendered": {
                      "text": "    gpasswd, chfn, expiry, passwd, vigr, cpgr, adduser, addgroup, deluser, delgroup\n    ]\n\n# repoquery -l shadow-utils | grep bin | xargs ls -ld | grep -v '^d' |\n#     awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: shadowutils_binaries\n  items: [\n",
                      "markdown": "`    gpasswd, chfn, expiry, passwd, vigr, cpgr, adduser, addgroup, deluser, delgroup\n    ]\n\n# repoquery -l shadow-utils | grep bin | xargs ls -ld | grep -v '^d' |\n#     awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: shadowutils_binaries\n  items: [\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/falco-rules-3.2.0-r0.apk/falco-rules-3.2.0-r0/etc/falco/falco_rules.yaml"
                },
                "region": {
                  "startLine": 113,
                  "startColumn": 78,
                  "endLine": 113,
                  "endColumn": 85,
                  "snippet": {
                    "text": "    nologin, faillog, lastlog, newgrp, sg\n    ]\n\n# dpkg -L passwd | grep bin | xargs ls -ld | grep -v '^d' | awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: passwd_binaries\n  items: [\n    shadowconfig, grpck, pwunconv, grpconv, pwck,\n",
                    "rendered": {
                      "text": "    nologin, faillog, lastlog, newgrp, sg\n    ]\n\n# dpkg -L passwd | grep bin | xargs ls -ld | grep -v '^d' | awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: passwd_binaries\n  items: [\n    shadowconfig, grpck, pwunconv, grpconv, pwck,\n",
                      "markdown": "`    nologin, faillog, lastlog, newgrp, sg\n    ]\n\n# dpkg -L passwd | grep bin | xargs ls -ld | grep -v '^d' | awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: passwd_binaries\n  items: [\n    shadowconfig, grpck, pwunconv, grpconv, pwck,\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/falco-rules-3.2.0-r0.apk/falco-rules-3.2.0-r0/etc/falco/falco_rules.yaml"
                },
                "region": {
                  "startLine": 113,
                  "startColumn": 59,
                  "endLine": 113,
                  "endColumn": 64,
                  "snippet": {
                    "text": "    nologin, faillog, lastlog, newgrp, sg\n    ]\n\n# dpkg -L passwd | grep bin | xargs ls -ld | grep -v '^d' | awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: passwd_binaries\n  items: [\n    shadowconfig, grpck, pwunconv, grpconv, pwck,\n",
                    "rendered": {
                      "text": "    nologin, faillog, lastlog, newgrp, sg\n    ]\n\n# dpkg -L passwd | grep bin | xargs ls -ld | grep -v '^d' | awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: passwd_binaries\n  items: [\n    shadowconfig, grpck, pwunconv, grpconv, pwck,\n",
                      "markdown": "`    nologin, faillog, lastlog, newgrp, sg\n    ]\n\n# dpkg -L passwd | grep bin | xargs ls -ld | grep -v '^d' | awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: passwd_binaries\n  items: [\n    shadowconfig, grpck, pwunconv, grpconv, pwck,\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/falco-rules-3.2.0-r0.apk/falco-rules-3.2.0-r0/etc/falco/falco_rules.yaml"
                },
                "region": {
                  "startLine": 113,
                  "startColumn": 44,
                  "endLine": 113,
                  "endColumn": 50,
                  "snippet": {
                    "text": "    nologin, faillog, lastlog, newgrp, sg\n    ]\n\n# dpkg -L passwd | grep bin | xargs ls -ld | grep -v '^d' | awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: passwd_binaries\n  items: [\n    shadowconfig, grpck, pwunconv, grpconv, pwck,\n",
                    "rendered": {
                      "text": "    nologin, faillog, lastlog, newgrp, sg\n    ]\n\n# dpkg -L passwd | grep bin | xargs ls -ld | grep -v '^d' | awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: passwd_binaries\n  items: [\n    shadowconfig, grpck, pwunconv, grpconv, pwck,\n",
                      "markdown": "`    nologin, faillog, lastlog, newgrp, sg\n    ]\n\n# dpkg -L passwd | grep bin | xargs ls -ld | grep -v '^d' | awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: passwd_binaries\n  items: [\n    shadowconfig, grpck, pwunconv, grpconv, pwck,\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/falco-rules-3.2.0-r0.apk/falco-rules-3.2.0-r0/etc/falco/falco_rules.yaml"
                },
                "region": {
                  "startLine": 113,
                  "startColumn": 29,
                  "endLine": 113,
                  "endColumn": 36,
                  "snippet": {
                    "text": "    nologin, faillog, lastlog, newgrp, sg\n    ]\n\n# dpkg -L passwd | grep bin | xargs ls -ld | grep -v '^d' | awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: passwd_binaries\n  items: [\n    shadowconfig, grpck, pwunconv, grpconv, pwck,\n",
                    "rendered": {
                      "text": "    nologin, faillog, lastlog, newgrp, sg\n    ]\n\n# dpkg -L passwd | grep bin | xargs ls -ld | grep -v '^d' | awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: passwd_binaries\n  items: [\n    shadowconfig, grpck, pwunconv, grpconv, pwck,\n",
                      "markdown": "`    nologin, faillog, lastlog, newgrp, sg\n    ]\n\n# dpkg -L passwd | grep bin | xargs ls -ld | grep -v '^d' | awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: passwd_binaries\n  items: [\n    shadowconfig, grpck, pwunconv, grpconv, pwck,\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/falco-rules-3.2.0-r0.apk/falco-rules-3.2.0-r0/etc/falco/falco_rules.yaml"
                },
                "region": {
                  "startLine": 113,
                  "startColumn": 18,
                  "endLine": 113,
                  "endColumn": 24,
                  "snippet": {
                    "text": "    nologin, faillog, lastlog, newgrp, sg\n    ]\n\n# dpkg -L passwd | grep bin | xargs ls -ld | grep -v '^d' | awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: passwd_binaries\n  items: [\n    shadowconfig, grpck, pwunconv, grpconv, pwck,\n",
                    "rendered": {
                      "text": "    nologin, faillog, lastlog, newgrp, sg\n    ]\n\n# dpkg -L passwd | grep bin | xargs ls -ld | grep -v '^d' | awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: passwd_binaries\n  items: [\n    shadowconfig, grpck, pwunconv, grpconv, pwck,\n",
                      "markdown": "`    nologin, faillog, lastlog, newgrp, sg\n    ]\n\n# dpkg -L passwd | grep bin | xargs ls -ld | grep -v '^d' | awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: passwd_binaries\n  items: [\n    shadowconfig, grpck, pwunconv, grpconv, pwck,\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/falco-rules-3.2.0-r0.apk/falco-rules-3.2.0-r0/etc/falco/falco_rules.yaml"
                },
                "region": {
                  "startLine": 113,
                  "startColumn": 1,
                  "endLine": 113,
                  "endColumn": 7,
                  "snippet": {
                    "text": "    nologin, faillog, lastlog, newgrp, sg\n    ]\n\n# dpkg -L passwd | grep bin | xargs ls -ld | grep -v '^d' | awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: passwd_binaries\n  items: [\n    shadowconfig, grpck, pwunconv, grpconv, pwck,\n",
                    "rendered": {
                      "text": "    nologin, faillog, lastlog, newgrp, sg\n    ]\n\n# dpkg -L passwd | grep bin | xargs ls -ld | grep -v '^d' | awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: passwd_binaries\n  items: [\n    shadowconfig, grpck, pwunconv, grpconv, pwck,\n",
                      "markdown": "`    nologin, faillog, lastlog, newgrp, sg\n    ]\n\n# dpkg -L passwd | grep bin | xargs ls -ld | grep -v '^d' | awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: passwd_binaries\n  items: [\n    shadowconfig, grpck, pwunconv, grpconv, pwck,\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/falco-rules-3.2.0-r0.apk/falco-rules-3.2.0-r0/etc/falco/falco_rules.yaml"
                },
                "region": {
                  "startLine": 106,
                  "startColumn": 77,
                  "endLine": 106,
                  "endColumn": 84,
                  "snippet": {
                    "text": "- macro: shell_procs\n  condition: (proc.name in (shell_binaries))\n\n# dpkg -L login | grep bin | xargs ls -ld | grep -v '^d' | awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: login_binaries\n  items: [\n    login, systemd, '\"(systemd)\"', systemd-logind, su,\n",
                    "rendered": {
                      "text": "- macro: shell_procs\n  condition: (proc.name in (shell_binaries))\n\n# dpkg -L login | grep bin | xargs ls -ld | grep -v '^d' | awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: login_binaries\n  items: [\n    login, systemd, '\"(systemd)\"', systemd-logind, su,\n",
                      "markdown": "`- macro: shell_procs\n  condition: (proc.name in (shell_binaries))\n\n# dpkg -L login | grep bin | xargs ls -ld | grep -v '^d' | awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: login_binaries\n  items: [\n    login, systemd, '\"(systemd)\"', systemd-logind, su,\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/falco-rules-3.2.0-r0.apk/falco-rules-3.2.0-r0/etc/falco/falco_rules.yaml"
                },
                "region": {
                  "startLine": 106,
                  "startColumn": 58,
                  "endLine": 106,
                  "endColumn": 63,
                  "snippet": {
                    "text": "- macro: shell_procs\n  condition: (proc.name in (shell_binaries))\n\n# dpkg -L login | grep bin | xargs ls -ld | grep -v '^d' | awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: login_binaries\n  items: [\n    login, systemd, '\"(systemd)\"', systemd-logind, su,\n",
                    "rendered": {
                      "text": "- macro: shell_procs\n  condition: (proc.name in (shell_binaries))\n\n# dpkg -L login | grep bin | xargs ls -ld | grep -v '^d' | awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: login_binaries\n  items: [\n    login, systemd, '\"(systemd)\"', systemd-logind, su,\n",
                      "markdown": "`- macro: shell_procs\n  condition: (proc.name in (shell_binaries))\n\n# dpkg -L login | grep bin | xargs ls -ld | grep -v '^d' | awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: login_binaries\n  items: [\n    login, systemd, '\"(systemd)\"', systemd-logind, su,\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/falco-rules-3.2.0-r0.apk/falco-rules-3.2.0-r0/etc/falco/falco_rules.yaml"
                },
                "region": {
                  "startLine": 106,
                  "startColumn": 43,
                  "endLine": 106,
                  "endColumn": 49,
                  "snippet": {
                    "text": "- macro: shell_procs\n  condition: (proc.name in (shell_binaries))\n\n# dpkg -L login | grep bin | xargs ls -ld | grep -v '^d' | awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: login_binaries\n  items: [\n    login, systemd, '\"(systemd)\"', systemd-logind, su,\n",
                    "rendered": {
                      "text": "- macro: shell_procs\n  condition: (proc.name in (shell_binaries))\n\n# dpkg -L login | grep bin | xargs ls -ld | grep -v '^d' | awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: login_binaries\n  items: [\n    login, systemd, '\"(systemd)\"', systemd-logind, su,\n",
                      "markdown": "`- macro: shell_procs\n  condition: (proc.name in (shell_binaries))\n\n# dpkg -L login | grep bin | xargs ls -ld | grep -v '^d' | awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: login_binaries\n  items: [\n    login, systemd, '\"(systemd)\"', systemd-logind, su,\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/falco-rules-3.2.0-r0.apk/falco-rules-3.2.0-r0/etc/falco/falco_rules.yaml"
                },
                "region": {
                  "startLine": 106,
                  "startColumn": 28,
                  "endLine": 106,
                  "endColumn": 35,
                  "snippet": {
                    "text": "- macro: shell_procs\n  condition: (proc.name in (shell_binaries))\n\n# dpkg -L login | grep bin | xargs ls -ld | grep -v '^d' | awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: login_binaries\n  items: [\n    login, systemd, '\"(systemd)\"', systemd-logind, su,\n",
                    "rendered": {
                      "text": "- macro: shell_procs\n  condition: (proc.name in (shell_binaries))\n\n# dpkg -L login | grep bin | xargs ls -ld | grep -v '^d' | awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: login_binaries\n  items: [\n    login, systemd, '\"(systemd)\"', systemd-logind, su,\n",
                      "markdown": "`- macro: shell_procs\n  condition: (proc.name in (shell_binaries))\n\n# dpkg -L login | grep bin | xargs ls -ld | grep -v '^d' | awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: login_binaries\n  items: [\n    login, systemd, '\"(systemd)\"', systemd-logind, su,\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/falco-rules-3.2.0-r0.apk/falco-rules-3.2.0-r0/etc/falco/falco_rules.yaml"
                },
                "region": {
                  "startLine": 106,
                  "startColumn": 17,
                  "endLine": 106,
                  "endColumn": 23,
                  "snippet": {
                    "text": "- macro: shell_procs\n  condition: (proc.name in (shell_binaries))\n\n# dpkg -L login | grep bin | xargs ls -ld | grep -v '^d' | awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: login_binaries\n  items: [\n    login, systemd, '\"(systemd)\"', systemd-logind, su,\n",
                    "rendered": {
                      "text": "- macro: shell_procs\n  condition: (proc.name in (shell_binaries))\n\n# dpkg -L login | grep bin | xargs ls -ld | grep -v '^d' | awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: login_binaries\n  items: [\n    login, systemd, '\"(systemd)\"', systemd-logind, su,\n",
                      "markdown": "`- macro: shell_procs\n  condition: (proc.name in (shell_binaries))\n\n# dpkg -L login | grep bin | xargs ls -ld | grep -v '^d' | awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: login_binaries\n  items: [\n    login, systemd, '\"(systemd)\"', systemd-logind, su,\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/falco-rules-3.2.0-r0.apk/falco-rules-3.2.0-r0/etc/falco/falco_rules.yaml"
                },
                "region": {
                  "startLine": 106,
                  "startColumn": 1,
                  "endLine": 106,
                  "endColumn": 7,
                  "snippet": {
                    "text": "- macro: shell_procs\n  condition: (proc.name in (shell_binaries))\n\n# dpkg -L login | grep bin | xargs ls -ld | grep -v '^d' | awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: login_binaries\n  items: [\n    login, systemd, '\"(systemd)\"', systemd-logind, su,\n",
                    "rendered": {
                      "text": "- macro: shell_procs\n  condition: (proc.name in (shell_binaries))\n\n# dpkg -L login | grep bin | xargs ls -ld | grep -v '^d' | awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: login_binaries\n  items: [\n    login, systemd, '\"(systemd)\"', systemd-logind, su,\n",
                      "markdown": "`- macro: shell_procs\n  condition: (proc.name in (shell_binaries))\n\n# dpkg -L login | grep bin | xargs ls -ld | grep -v '^d' | awk '{print $9}' | xargs -L 1 basename | tr \"\\\\n\" \",\"\n- list: login_binaries\n  items: [\n    login, systemd, '\"(systemd)\"', systemd-logind, su,\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        }
      ],
      "columnKind": "utf16CodeUnits"
    }
  ]
}