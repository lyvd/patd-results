{
  "$schema": "https://schemastore.azurewebsites.net/schemas/json/sarif-2.1.0-rtm.6.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "oss-detect-backdoor",
          "organization": "Microsoft Corporation",
          "product": "OSSGadget (https://github.com/Microsoft/OSSGadget)",
          "version": "0.0.0+ed0e2cfe6a"
        }
      },
      "results": [
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-rack-oauth2-2.2.1-r2.apk/ruby3.2-rack-oauth2-2.2.1-r2/usr/lib/ruby/gems/3.2.0/specifications/rack-oauth2-2.2.1.gemspec"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 25,
                  "endLine": 2,
                  "endColumn": 31,
                  "snippet": {
                    "text": "# -*- encoding: utf-8 -*-\n# stub: rack-oauth2 2.2.1 ruby lib\n\nGem::Specification.new do |s|\n  s.name = \"rack-oauth2\".freeze\n",
                    "rendered": {
                      "text": "# -*- encoding: utf-8 -*-\n# stub: rack-oauth2 2.2.1 ruby lib\n\nGem::Specification.new do |s|\n  s.name = \"rack-oauth2\".freeze\n",
                      "markdown": "`# -*- encoding: utf-8 -*-\n# stub: rack-oauth2 2.2.1 ruby lib\n\nGem::Specification.new do |s|\n  s.name = \"rack-oauth2\".freeze\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-rack-oauth2-2.2.1-r2.apk/ruby3.2-rack-oauth2-2.2.1-r2/usr/lib/ruby/gems/3.2.0/gems/rack-oauth2-2.2.1/spec/rack/oauth2/server/authorize/error_spec.rb"
                },
                "region": {
                  "startLine": 105,
                  "startColumn": 7,
                  "endLine": 105,
                  "endColumn": 15,
                  "snippet": {
                    "text": "    describe method do\n      it \"should raise #{klass} with error = :#{error_code}\" do\n        klass =\n        expect { request.send method }.to raise_error(klass) { |error|\n          error.error.should       == error_code\n          error.description.should == default_description[error_code]\n        }\n",
                    "rendered": {
                      "text": "    describe method do\n      it \"should raise #{klass} with error = :#{error_code}\" do\n        klass =\n        expect { request.send method }.to raise_error(klass) { |error|\n          error.error.should       == error_code\n          error.description.should == default_description[error_code]\n        }\n",
                      "markdown": "`    describe method do\n      it \"should raise #{klass} with error = :#{error_code}\" do\n        klass =\n        expect { request.send method }.to raise_error(klass) { |error|\n          error.error.should       == error_code\n          error.description.should == default_description[error_code]\n        }\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-rack-oauth2-2.2.1-r2.apk/ruby3.2-rack-oauth2-2.2.1-r2/usr/lib/ruby/gems/3.2.0/gems/rack-oauth2-2.2.1/spec/rack/oauth2/server/authorize/error_spec.rb"
                },
                "region": {
                  "startLine": 85,
                  "startColumn": 7,
                  "endLine": 85,
                  "endColumn": 15,
                  "snippet": {
                    "text": "\n    context 'when response_type = :token' do\n      it 'should set protocol_params_location = :fragment' do\n        expect { request_for_token.bad_request! }.to raise_error(klass) { |e|\n          e.protocol_params_location.should == :fragment\n        }\n      end\n",
                    "rendered": {
                      "text": "\n    context 'when response_type = :token' do\n      it 'should set protocol_params_location = :fragment' do\n        expect { request_for_token.bad_request! }.to raise_error(klass) { |e|\n          e.protocol_params_location.should == :fragment\n        }\n      end\n",
                      "markdown": "`\n    context 'when response_type = :token' do\n      it 'should set protocol_params_location = :fragment' do\n        expect { request_for_token.bad_request! }.to raise_error(klass) { |e|\n          e.protocol_params_location.should == :fragment\n        }\n      end\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-rack-oauth2-2.2.1-r2.apk/ruby3.2-rack-oauth2-2.2.1-r2/usr/lib/ruby/gems/3.2.0/gems/rack-oauth2-2.2.1/spec/rack/oauth2/server/authorize/error_spec.rb"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 7,
                  "endLine": 77,
                  "endColumn": 15,
                  "snippet": {
                    "text": "\n    context 'when response_type = :code' do\n      it 'should set protocol_params_location = :query' do\n        expect { request_for_code.bad_request! }.to raise_error(klass) { |e|\n          e.protocol_params_location.should == :query\n        }\n      end\n",
                    "rendered": {
                      "text": "\n    context 'when response_type = :code' do\n      it 'should set protocol_params_location = :query' do\n        expect { request_for_code.bad_request! }.to raise_error(klass) { |e|\n          e.protocol_params_location.should == :query\n        }\n      end\n",
                      "markdown": "`\n    context 'when response_type = :code' do\n      it 'should set protocol_params_location = :query' do\n        expect { request_for_code.bad_request! }.to raise_error(klass) { |e|\n          e.protocol_params_location.should == :query\n        }\n      end\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-rack-oauth2-2.2.1-r2.apk/ruby3.2-rack-oauth2-2.2.1-r2/usr/lib/ruby/gems/3.2.0/gems/rack-oauth2-2.2.1/spec/rack/oauth2/server/authorize/error_spec.rb"
                },
                "region": {
                  "startLine": 72,
                  "startColumn": 5,
                  "endLine": 72,
                  "endColumn": 13,
                  "snippet": {
                    "text": "\n  describe 'bad_request!' do\n    it do\n      expect { request.bad_request! }.to raise_error klass\n    end\n\n    context 'when response_type = :code' do\n",
                    "rendered": {
                      "text": "\n  describe 'bad_request!' do\n    it do\n      expect { request.bad_request! }.to raise_error klass\n    end\n\n    context 'when response_type = :code' do\n",
                      "markdown": "`\n  describe 'bad_request!' do\n    it do\n      expect { request.bad_request! }.to raise_error klass\n    end\n\n    context 'when response_type = :code' do\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-rack-oauth2-2.2.1-r2.apk/ruby3.2-rack-oauth2-2.2.1-r2/usr/lib/ruby/gems/3.2.0/gems/rack-oauth2-2.2.1/spec/rack/oauth2/server/authorize/error_spec.rb"
                },
                "region": {
                  "startLine": 68,
                  "startColumn": 81,
                  "endLine": 68,
                  "endColumn": 86,
                  "snippet": {
                    "text": "  let(:env)                 { Rack::MockRequest.env_for(\"/authorize?client_id=client_id\") }\n  let(:request)             { Rack::OAuth2::Server::Authorize::Request.new env }\n  let(:request_for_code)    { Rack::OAuth2::Server::Authorize::Code::Request.new env }\n  let(:request_for_token)   { Rack::OAuth2::Server::Authorize::Token::Request.new env }\n\n  describe 'bad_request!' do\n    it do\n",
                    "rendered": {
                      "text": "  let(:env)                 { Rack::MockRequest.env_for(\"/authorize?client_id=client_id\") }\n  let(:request)             { Rack::OAuth2::Server::Authorize::Request.new env }\n  let(:request_for_code)    { Rack::OAuth2::Server::Authorize::Code::Request.new env }\n  let(:request_for_token)   { Rack::OAuth2::Server::Authorize::Token::Request.new env }\n\n  describe 'bad_request!' do\n    it do\n",
                      "markdown": "`  let(:env)                 { Rack::MockRequest.env_for(\"/authorize?client_id=client_id\") }\n  let(:request)             { Rack::OAuth2::Server::Authorize::Request.new env }\n  let(:request_for_code)    { Rack::OAuth2::Server::Authorize::Code::Request.new env }\n  let(:request_for_token)   { Rack::OAuth2::Server::Authorize::Token::Request.new env }\n\n  describe 'bad_request!' do\n    it do\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-rack-oauth2-2.2.1-r2.apk/ruby3.2-rack-oauth2-2.2.1-r2/usr/lib/ruby/gems/3.2.0/gems/rack-oauth2-2.2.1/spec/rack/oauth2/server/authorize/error_spec.rb"
                },
                "region": {
                  "startLine": 67,
                  "startColumn": 80,
                  "endLine": 67,
                  "endColumn": 85,
                  "snippet": {
                    "text": "  let(:default_description) { Rack::OAuth2::Server::Authorize::ErrorMethods::DEFAULT_DESCRIPTION }\n  let(:env)                 { Rack::MockRequest.env_for(\"/authorize?client_id=client_id\") }\n  let(:request)             { Rack::OAuth2::Server::Authorize::Request.new env }\n  let(:request_for_code)    { Rack::OAuth2::Server::Authorize::Code::Request.new env }\n  let(:request_for_token)   { Rack::OAuth2::Server::Authorize::Token::Request.new env }\n\n  describe 'bad_request!' do\n",
                    "rendered": {
                      "text": "  let(:default_description) { Rack::OAuth2::Server::Authorize::ErrorMethods::DEFAULT_DESCRIPTION }\n  let(:env)                 { Rack::MockRequest.env_for(\"/authorize?client_id=client_id\") }\n  let(:request)             { Rack::OAuth2::Server::Authorize::Request.new env }\n  let(:request_for_code)    { Rack::OAuth2::Server::Authorize::Code::Request.new env }\n  let(:request_for_token)   { Rack::OAuth2::Server::Authorize::Token::Request.new env }\n\n  describe 'bad_request!' do\n",
                      "markdown": "`  let(:default_description) { Rack::OAuth2::Server::Authorize::ErrorMethods::DEFAULT_DESCRIPTION }\n  let(:env)                 { Rack::MockRequest.env_for(\"/authorize?client_id=client_id\") }\n  let(:request)             { Rack::OAuth2::Server::Authorize::Request.new env }\n  let(:request_for_code)    { Rack::OAuth2::Server::Authorize::Code::Request.new env }\n  let(:request_for_token)   { Rack::OAuth2::Server::Authorize::Token::Request.new env }\n\n  describe 'bad_request!' do\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-rack-oauth2-2.2.1-r2.apk/ruby3.2-rack-oauth2-2.2.1-r2/usr/lib/ruby/gems/3.2.0/gems/rack-oauth2-2.2.1/spec/rack/oauth2/server/authorize/error_spec.rb"
                },
                "region": {
                  "startLine": 66,
                  "startColumn": 74,
                  "endLine": 66,
                  "endColumn": 79,
                  "snippet": {
                    "text": "  let(:redirect_uri)        { 'http://client.example.com/callback' }\n  let(:default_description) { Rack::OAuth2::Server::Authorize::ErrorMethods::DEFAULT_DESCRIPTION }\n  let(:env)                 { Rack::MockRequest.env_for(\"/authorize?client_id=client_id\") }\n  let(:request)             { Rack::OAuth2::Server::Authorize::Request.new env }\n  let(:request_for_code)    { Rack::OAuth2::Server::Authorize::Code::Request.new env }\n  let(:request_for_token)   { Rack::OAuth2::Server::Authorize::Token::Request.new env }\n\n",
                    "rendered": {
                      "text": "  let(:redirect_uri)        { 'http://client.example.com/callback' }\n  let(:default_description) { Rack::OAuth2::Server::Authorize::ErrorMethods::DEFAULT_DESCRIPTION }\n  let(:env)                 { Rack::MockRequest.env_for(\"/authorize?client_id=client_id\") }\n  let(:request)             { Rack::OAuth2::Server::Authorize::Request.new env }\n  let(:request_for_code)    { Rack::OAuth2::Server::Authorize::Code::Request.new env }\n  let(:request_for_token)   { Rack::OAuth2::Server::Authorize::Token::Request.new env }\n\n",
                      "markdown": "`  let(:redirect_uri)        { 'http://client.example.com/callback' }\n  let(:default_description) { Rack::OAuth2::Server::Authorize::ErrorMethods::DEFAULT_DESCRIPTION }\n  let(:env)                 { Rack::MockRequest.env_for(\"/authorize?client_id=client_id\") }\n  let(:request)             { Rack::OAuth2::Server::Authorize::Request.new env }\n  let(:request_for_code)    { Rack::OAuth2::Server::Authorize::Code::Request.new env }\n  let(:request_for_token)   { Rack::OAuth2::Server::Authorize::Token::Request.new env }\n\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-rack-oauth2-2.2.1-r2.apk/ruby3.2-rack-oauth2-2.2.1-r2/usr/lib/ruby/gems/3.2.0/gems/rack-oauth2-2.2.1/spec/rack/oauth2/server/authorize/error_spec.rb"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 7,
                  "endLine": 53,
                  "endColumn": 15,
                  "snippet": {
                    "text": "\n    context 'otherwise' do\n      it 'should raise itself' do\n        expect { error.finish }.to raise_error(klass) { |e|\n          e.should == error\n        }\n      end\n",
                    "rendered": {
                      "text": "\n    context 'otherwise' do\n      it 'should raise itself' do\n        expect { error.finish }.to raise_error(klass) { |e|\n          e.should == error\n        }\n      end\n",
                      "markdown": "`\n    context 'otherwise' do\n      it 'should raise itself' do\n        expect { error.finish }.to raise_error(klass) { |e|\n          e.should == error\n        }\n      end\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-rack-oauth2-2.2.1-r2.apk/ruby3.2-rack-oauth2-2.2.1-r2/usr/lib/ruby/gems/3.2.0/gems/rack-oauth2-2.2.1/spec/rack/oauth2/server/authorize/code_spec.rb"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 7,
                  "endLine": 36,
                  "endColumn": 15,
                  "snippet": {
                    "text": "    context 'when code is missing' do\n      let(:authorization_code) { nil }\n      it do\n        expect { response }.to raise_error AttrRequired::AttrMissing\n      end\n    end\n  end\n",
                    "rendered": {
                      "text": "    context 'when code is missing' do\n      let(:authorization_code) { nil }\n      it do\n        expect { response }.to raise_error AttrRequired::AttrMissing\n      end\n    end\n  end\n",
                      "markdown": "`    context 'when code is missing' do\n      let(:authorization_code) { nil }\n      it do\n        expect { response }.to raise_error AttrRequired::AttrMissing\n      end\n    end\n  end\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-rack-oauth2-2.2.1-r2.apk/ruby3.2-rack-oauth2-2.2.1-r2/usr/lib/ruby/gems/3.2.0/gems/rack-oauth2-2.2.1/spec/rack/oauth2/server/authorize/code_spec.rb"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 7,
                  "endLine": 29,
                  "endColumn": 15,
                  "snippet": {
                    "text": "    context 'when redirect_uri is missing' do\n      let(:redirect_uri) { nil }\n      it do\n        expect { response }.to raise_error AttrRequired::AttrMissing\n      end\n    end\n\n",
                    "rendered": {
                      "text": "    context 'when redirect_uri is missing' do\n      let(:redirect_uri) { nil }\n      it do\n        expect { response }.to raise_error AttrRequired::AttrMissing\n      end\n    end\n\n",
                      "markdown": "`    context 'when redirect_uri is missing' do\n      let(:redirect_uri) { nil }\n      it do\n        expect { response }.to raise_error AttrRequired::AttrMissing\n      end\n    end\n\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-rack-oauth2-2.2.1-r2.apk/ruby3.2-rack-oauth2-2.2.1-r2/usr/lib/ruby/gems/3.2.0/gems/rack-oauth2-2.2.1/spec/rack/oauth2/client_spec.rb"
                },
                "region": {
                  "startLine": 191,
                  "startColumn": 18,
                  "endLine": 191,
                  "endColumn": 29,
                  "snippet": {
                    "text": "              let :client do\n                Rack::OAuth2::Client.new(\n                  identifier: 'client_id',\n                  private_key: OpenSSL::PKey::EC.generate('prime256v1'),\n                  host: 'server.example.com',\n                  redirect_uri: 'https://client.example.com/callback'\n                )\n",
                    "rendered": {
                      "text": "              let :client do\n                Rack::OAuth2::Client.new(\n                  identifier: 'client_id',\n                  private_key: OpenSSL::PKey::EC.generate('prime256v1'),\n                  host: 'server.example.com',\n                  redirect_uri: 'https://client.example.com/callback'\n                )\n",
                      "markdown": "`              let :client do\n                Rack::OAuth2::Client.new(\n                  identifier: 'client_id',\n                  private_key: OpenSSL::PKey::EC.generate('prime256v1'),\n                  host: 'server.example.com',\n                  redirect_uri: 'https://client.example.com/callback'\n                )\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-rack-oauth2-2.2.1-r2.apk/ruby3.2-rack-oauth2-2.2.1-r2/usr/lib/ruby/gems/3.2.0/gems/rack-oauth2-2.2.1/spec/rack/oauth2/client_spec.rb"
                },
                "region": {
                  "startLine": 164,
                  "startColumn": 18,
                  "endLine": 164,
                  "endColumn": 29,
                  "snippet": {
                    "text": "              let :client do\n                Rack::OAuth2::Client.new(\n                  identifier: 'client_id',\n                  private_key: OpenSSL::PKey::RSA.generate(2048),\n                  host: 'server.example.com',\n                  redirect_uri: 'https://client.example.com/callback'\n                )\n",
                    "rendered": {
                      "text": "              let :client do\n                Rack::OAuth2::Client.new(\n                  identifier: 'client_id',\n                  private_key: OpenSSL::PKey::RSA.generate(2048),\n                  host: 'server.example.com',\n                  redirect_uri: 'https://client.example.com/callback'\n                )\n",
                      "markdown": "`              let :client do\n                Rack::OAuth2::Client.new(\n                  identifier: 'client_id',\n                  private_key: OpenSSL::PKey::RSA.generate(2048),\n                  host: 'server.example.com',\n                  redirect_uri: 'https://client.example.com/callback'\n                )\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-rack-oauth2-2.2.1-r2.apk/ruby3.2-rack-oauth2-2.2.1-r2/usr/lib/ruby/gems/3.2.0/gems/rack-oauth2-2.2.1/spec/rack/oauth2/client_spec.rb"
                },
                "region": {
                  "startLine": 159,
                  "startColumn": 24,
                  "endLine": 159,
                  "endColumn": 35,
                  "snippet": {
                    "text": "            end\n          end\n\n          context 'when private_key is given' do\n            context 'when RSA key' do\n              let :client do\n                Rack::OAuth2::Client.new(\n",
                    "rendered": {
                      "text": "            end\n          end\n\n          context 'when private_key is given' do\n            context 'when RSA key' do\n              let :client do\n                Rack::OAuth2::Client.new(\n",
                      "markdown": "`            end\n          end\n\n          context 'when private_key is given' do\n            context 'when RSA key' do\n              let :client do\n                Rack::OAuth2::Client.new(\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-rack-oauth2-2.2.1-r2.apk/ruby3.2-rack-oauth2-2.2.1-r2/usr/lib/ruby/gems/3.2.0/gems/rack-oauth2-2.2.1/spec/rack/oauth2/client_spec.rb"
                },
                "region": {
                  "startLine": 74,
                  "startColumn": 60,
                  "endLine": 74,
                  "endColumn": 68,
                  "snippet": {
                    "text": "  describe '#resource_owner_credentials=' do\n    before  { client.resource_owner_credentials = 'username', 'password' }\n    subject { client.instance_variable_get('@grant') }\n    it { should be_instance_of Rack::OAuth2::Client::Grant::Password }\n  end\n\n  describe '#refresh_token=' do\n",
                    "rendered": {
                      "text": "  describe '#resource_owner_credentials=' do\n    before  { client.resource_owner_credentials = 'username', 'password' }\n    subject { client.instance_variable_get('@grant') }\n    it { should be_instance_of Rack::OAuth2::Client::Grant::Password }\n  end\n\n  describe '#refresh_token=' do\n",
                      "markdown": "`  describe '#resource_owner_credentials=' do\n    before  { client.resource_owner_credentials = 'username', 'password' }\n    subject { client.instance_variable_get('@grant') }\n    it { should be_instance_of Rack::OAuth2::Client::Grant::Password }\n  end\n\n  describe '#refresh_token=' do\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-rack-oauth2-2.2.1-r2.apk/ruby3.2-rack-oauth2-2.2.1-r2/usr/lib/ruby/gems/3.2.0/gems/rack-oauth2-2.2.1/spec/rack/oauth2/client_spec.rb"
                },
                "region": {
                  "startLine": 72,
                  "startColumn": 63,
                  "endLine": 72,
                  "endColumn": 71,
                  "snippet": {
                    "text": "  end\n\n  describe '#resource_owner_credentials=' do\n    before  { client.resource_owner_credentials = 'username', 'password' }\n    subject { client.instance_variable_get('@grant') }\n    it { should be_instance_of Rack::OAuth2::Client::Grant::Password }\n  end\n",
                    "rendered": {
                      "text": "  end\n\n  describe '#resource_owner_credentials=' do\n    before  { client.resource_owner_credentials = 'username', 'password' }\n    subject { client.instance_variable_get('@grant') }\n    it { should be_instance_of Rack::OAuth2::Client::Grant::Password }\n  end\n",
                      "markdown": "`  end\n\n  describe '#resource_owner_credentials=' do\n    before  { client.resource_owner_credentials = 'username', 'password' }\n    subject { client.instance_variable_get('@grant') }\n    it { should be_instance_of Rack::OAuth2::Client::Grant::Password }\n  end\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-rack-oauth2-2.2.1-r2.apk/ruby3.2-rack-oauth2-2.2.1-r2/usr/lib/ruby/gems/3.2.0/gems/rack-oauth2-2.2.1/spec/rack/oauth2/client_spec.rb"
                },
                "region": {
                  "startLine": 526,
                  "startColumn": 7,
                  "endLine": 526,
                  "endColumn": 15,
                  "snippet": {
                    "text": "\n    describe '#revoke!' do\n      it do\n        expect { client.revoke! access_token: 'access_token' }.to raise_error 'No Host Info'\n      end\n    end\n  end\n",
                    "rendered": {
                      "text": "\n    describe '#revoke!' do\n      it do\n        expect { client.revoke! access_token: 'access_token' }.to raise_error 'No Host Info'\n      end\n    end\n  end\n",
                      "markdown": "`\n    describe '#revoke!' do\n      it do\n        expect { client.revoke! access_token: 'access_token' }.to raise_error 'No Host Info'\n      end\n    end\n  end\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-rack-oauth2-2.2.1-r2.apk/ruby3.2-rack-oauth2-2.2.1-r2/usr/lib/ruby/gems/3.2.0/gems/rack-oauth2-2.2.1/spec/rack/oauth2/client_spec.rb"
                },
                "region": {
                  "startLine": 520,
                  "startColumn": 7,
                  "endLine": 520,
                  "endColumn": 15,
                  "snippet": {
                    "text": "\n    describe '#access_token!' do\n      it do\n        expect { client.access_token! }.to raise_error 'No Host Info'\n      end\n    end\n\n",
                    "rendered": {
                      "text": "\n    describe '#access_token!' do\n      it do\n        expect { client.access_token! }.to raise_error 'No Host Info'\n      end\n    end\n\n",
                      "markdown": "`\n    describe '#access_token!' do\n      it do\n        expect { client.access_token! }.to raise_error 'No Host Info'\n      end\n    end\n\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-rack-oauth2-2.2.1-r2.apk/ruby3.2-rack-oauth2-2.2.1-r2/usr/lib/ruby/gems/3.2.0/gems/rack-oauth2-2.2.1/spec/rack/oauth2/client_spec.rb"
                },
                "region": {
                  "startLine": 514,
                  "startColumn": 7,
                  "endLine": 514,
                  "endColumn": 15,
                  "snippet": {
                    "text": "\n    describe '#authorization_uri' do\n      it do\n        expect { client.authorization_uri }.to raise_error 'No Host Info'\n      end\n    end\n\n",
                    "rendered": {
                      "text": "\n    describe '#authorization_uri' do\n      it do\n        expect { client.authorization_uri }.to raise_error 'No Host Info'\n      end\n    end\n\n",
                      "markdown": "`\n    describe '#authorization_uri' do\n      it do\n        expect { client.authorization_uri }.to raise_error 'No Host Info'\n      end\n    end\n\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-rack-oauth2-2.2.1-r2.apk/ruby3.2-rack-oauth2-2.2.1-r2/usr/lib/ruby/gems/3.2.0/gems/rack-oauth2-2.2.1/spec/rack/oauth2/client_spec.rb"
                },
                "region": {
                  "startLine": 495,
                  "startColumn": 7,
                  "endLine": 495,
                  "endColumn": 15,
                  "snippet": {
                    "text": "\n    context 'when no token given' do\n      it do\n        expect do\n          client.revoke!\n        end.to raise_error ArgumentError\n      end\n",
                    "rendered": {
                      "text": "\n    context 'when no token given' do\n      it do\n        expect do\n          client.revoke!\n        end.to raise_error ArgumentError\n      end\n",
                      "markdown": "`\n    context 'when no token given' do\n      it do\n        expect do\n          client.revoke!\n        end.to raise_error ArgumentError\n      end\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-rack-oauth2-2.2.1-r2.apk/ruby3.2-rack-oauth2-2.2.1-r2/usr/lib/ruby/gems/3.2.0/gems/rack-oauth2-2.2.1/spec/rack/oauth2/client_spec.rb"
                },
                "region": {
                  "startLine": 487,
                  "startColumn": 7,
                  "endLine": 487,
                  "endColumn": 15,
                  "snippet": {
                    "text": "      end\n\n      it do\n        expect do\n          client.revoke! access_token: 'access_token'\n        end.to raise_error Rack::OAuth2::Client::Error\n      end\n",
                    "rendered": {
                      "text": "      end\n\n      it do\n        expect do\n          client.revoke! access_token: 'access_token'\n        end.to raise_error Rack::OAuth2::Client::Error\n      end\n",
                      "markdown": "`      end\n\n      it do\n        expect do\n          client.revoke! access_token: 'access_token'\n        end.to raise_error Rack::OAuth2::Client::Error\n      end\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-rack-oauth2-2.2.1-r2.apk/ruby3.2-rack-oauth2-2.2.1-r2/usr/lib/ruby/gems/3.2.0/gems/rack-oauth2-2.2.1/spec/rack/oauth2/client_spec.rb"
                },
                "region": {
                  "startLine": 398,
                  "startColumn": 9,
                  "endLine": 398,
                  "endColumn": 17,
                  "snippet": {
                    "text": "          )\n        end\n        it do\n          expect { client.access_token! }.to raise_error Rack::OAuth2::Client::Error\n        end\n      end\n    end\n",
                    "rendered": {
                      "text": "          )\n        end\n        it do\n          expect { client.access_token! }.to raise_error Rack::OAuth2::Client::Error\n        end\n      end\n    end\n",
                      "markdown": "`          )\n        end\n        it do\n          expect { client.access_token! }.to raise_error Rack::OAuth2::Client::Error\n        end\n      end\n    end\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-rack-oauth2-2.2.1-r2.apk/ruby3.2-rack-oauth2-2.2.1-r2/usr/lib/ruby/gems/3.2.0/gems/rack-oauth2-2.2.1/spec/rack/oauth2/client_spec.rb"
                },
                "region": {
                  "startLine": 382,
                  "startColumn": 7,
                  "endLine": 382,
                  "endColumn": 15,
                  "snippet": {
                    "text": "        )\n      end\n      it do\n        expect { client.access_token! }.to raise_error Rack::OAuth2::Client::Error\n      end\n    end\n\n",
                    "rendered": {
                      "text": "        )\n      end\n      it do\n        expect { client.access_token! }.to raise_error Rack::OAuth2::Client::Error\n      end\n    end\n\n",
                      "markdown": "`        )\n      end\n      it do\n        expect { client.access_token! }.to raise_error Rack::OAuth2::Client::Error\n      end\n    end\n\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-rack-oauth2-2.2.1-r2.apk/ruby3.2-rack-oauth2-2.2.1-r2/usr/lib/ruby/gems/3.2.0/gems/rack-oauth2-2.2.1/spec/rack/oauth2/client_spec.rb"
                },
                "region": {
                  "startLine": 368,
                  "startColumn": 7,
                  "endLine": 368,
                  "endColumn": 15,
                  "snippet": {
                    "text": "        )\n      end\n      it do\n        expect { client.access_token! }.to raise_error(StandardError, 'Unknown Token Type')\n      end\n    end\n\n",
                    "rendered": {
                      "text": "        )\n      end\n      it do\n        expect { client.access_token! }.to raise_error(StandardError, 'Unknown Token Type')\n      end\n    end\n\n",
                      "markdown": "`        )\n      end\n      it do\n        expect { client.access_token! }.to raise_error(StandardError, 'Unknown Token Type')\n      end\n    end\n\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-rack-oauth2-2.2.1-r2.apk/ruby3.2-rack-oauth2-2.2.1-r2/usr/lib/ruby/gems/3.2.0/gems/rack-oauth2-2.2.1/spec/rack/oauth2/client_spec.rb"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 5,
                  "endLine": 25,
                  "endColumn": 13,
                  "snippet": {
                    "text": "\n  context 'when identifier is missing' do\n    it do\n      expect { Rack::OAuth2::Client.new }.to raise_error AttrRequired::AttrMissing\n    end\n  end\n\n",
                    "rendered": {
                      "text": "\n  context 'when identifier is missing' do\n    it do\n      expect { Rack::OAuth2::Client.new }.to raise_error AttrRequired::AttrMissing\n    end\n  end\n\n",
                      "markdown": "`\n  context 'when identifier is missing' do\n    it do\n      expect { Rack::OAuth2::Client.new }.to raise_error AttrRequired::AttrMissing\n    end\n  end\n\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-rack-oauth2-2.2.1-r2.apk/ruby3.2-rack-oauth2-2.2.1-r2/usr/lib/ruby/gems/3.2.0/gems/rack-oauth2-2.2.1/spec/rack/oauth2/client/grant/saml2_bearer_spec.rb"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 5,
                  "endLine": 18,
                  "endColumn": 13,
                  "snippet": {
                    "text": "\n  context 'otherwise' do\n    it do\n      expect { grant.new }.to raise_error AttrRequired::AttrMissing\n    end\n  end\nend\n",
                    "rendered": {
                      "text": "\n  context 'otherwise' do\n    it do\n      expect { grant.new }.to raise_error AttrRequired::AttrMissing\n    end\n  end\nend\n",
                      "markdown": "`\n  context 'otherwise' do\n    it do\n      expect { grant.new }.to raise_error AttrRequired::AttrMissing\n    end\n  end\nend\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-rack-oauth2-2.2.1-r2.apk/ruby3.2-rack-oauth2-2.2.1-r2/usr/lib/ruby/gems/3.2.0/gems/rack-oauth2-2.2.1/spec/rack/oauth2/client/grant/refresh_token_spec.rb"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 5,
                  "endLine": 18,
                  "endColumn": 13,
                  "snippet": {
                    "text": "\n  context 'otherwise' do\n    it do\n      expect { grant.new }.to raise_error AttrRequired::AttrMissing\n    end\n  end\nend\n",
                    "rendered": {
                      "text": "\n  context 'otherwise' do\n    it do\n      expect { grant.new }.to raise_error AttrRequired::AttrMissing\n    end\n  end\nend\n",
                      "markdown": "`\n  context 'otherwise' do\n    it do\n      expect { grant.new }.to raise_error AttrRequired::AttrMissing\n    end\n  end\nend\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-rack-oauth2-2.2.1-r2.apk/ruby3.2-rack-oauth2-2.2.1-r2/usr/lib/ruby/gems/3.2.0/gems/rack-oauth2-2.2.1/spec/rack/oauth2/client/grant/password_spec.rb"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 75,
                  "endLine": 17,
                  "endColumn": 83,
                  "snippet": {
                    "text": "      end\n      subject { grant.new attributes }\n      its(:as_json) do\n        should == {grant_type: :password, username: 'username', password: 'password'}\n      end\n    end\n\n",
                    "rendered": {
                      "text": "      end\n      subject { grant.new attributes }\n      its(:as_json) do\n        should == {grant_type: :password, username: 'username', password: 'password'}\n      end\n    end\n\n",
                      "markdown": "`      end\n      subject { grant.new attributes }\n      its(:as_json) do\n        should == {grant_type: :password, username: 'username', password: 'password'}\n      end\n    end\n\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-rack-oauth2-2.2.1-r2.apk/ruby3.2-rack-oauth2-2.2.1-r2/usr/lib/ruby/gems/3.2.0/gems/rack-oauth2-2.2.1/spec/rack/oauth2/client/grant/password_spec.rb"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 64,
                  "endLine": 17,
                  "endColumn": 72,
                  "snippet": {
                    "text": "      end\n      subject { grant.new attributes }\n      its(:as_json) do\n        should == {grant_type: :password, username: 'username', password: 'password'}\n      end\n    end\n\n",
                    "rendered": {
                      "text": "      end\n      subject { grant.new attributes }\n      its(:as_json) do\n        should == {grant_type: :password, username: 'username', password: 'password'}\n      end\n    end\n\n",
                      "markdown": "`      end\n      subject { grant.new attributes }\n      its(:as_json) do\n        should == {grant_type: :password, username: 'username', password: 'password'}\n      end\n    end\n\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-rack-oauth2-2.2.1-r2.apk/ruby3.2-rack-oauth2-2.2.1-r2/usr/lib/ruby/gems/3.2.0/gems/rack-oauth2-2.2.1/spec/rack/oauth2/client/grant/password_spec.rb"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 32,
                  "endLine": 17,
                  "endColumn": 40,
                  "snippet": {
                    "text": "      end\n      subject { grant.new attributes }\n      its(:as_json) do\n        should == {grant_type: :password, username: 'username', password: 'password'}\n      end\n    end\n\n",
                    "rendered": {
                      "text": "      end\n      subject { grant.new attributes }\n      its(:as_json) do\n        should == {grant_type: :password, username: 'username', password: 'password'}\n      end\n    end\n\n",
                      "markdown": "`      end\n      subject { grant.new attributes }\n      its(:as_json) do\n        should == {grant_type: :password, username: 'username', password: 'password'}\n      end\n    end\n\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-rack-oauth2-2.2.1-r2.apk/ruby3.2-rack-oauth2-2.2.1-r2/usr/lib/ruby/gems/3.2.0/gems/rack-oauth2-2.2.1/spec/rack/oauth2/client/grant/password_spec.rb"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 42,
                  "endLine": 13,
                  "endColumn": 50,
                  "snippet": {
                    "text": "\n    context 'when password is given' do\n      let :attributes do\n        {username: 'username', password: 'password'}\n      end\n      subject { grant.new attributes }\n      its(:as_json) do\n",
                    "rendered": {
                      "text": "\n    context 'when password is given' do\n      let :attributes do\n        {username: 'username', password: 'password'}\n      end\n      subject { grant.new attributes }\n      its(:as_json) do\n",
                      "markdown": "`\n    context 'when password is given' do\n      let :attributes do\n        {username: 'username', password: 'password'}\n      end\n      subject { grant.new attributes }\n      its(:as_json) do\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-rack-oauth2-2.2.1-r2.apk/ruby3.2-rack-oauth2-2.2.1-r2/usr/lib/ruby/gems/3.2.0/gems/rack-oauth2-2.2.1/spec/rack/oauth2/client/grant/password_spec.rb"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 31,
                  "endLine": 13,
                  "endColumn": 39,
                  "snippet": {
                    "text": "\n    context 'when password is given' do\n      let :attributes do\n        {username: 'username', password: 'password'}\n      end\n      subject { grant.new attributes }\n      its(:as_json) do\n",
                    "rendered": {
                      "text": "\n    context 'when password is given' do\n      let :attributes do\n        {username: 'username', password: 'password'}\n      end\n      subject { grant.new attributes }\n      its(:as_json) do\n",
                      "markdown": "`\n    context 'when password is given' do\n      let :attributes do\n        {username: 'username', password: 'password'}\n      end\n      subject { grant.new attributes }\n      its(:as_json) do\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-rack-oauth2-2.2.1-r2.apk/ruby3.2-rack-oauth2-2.2.1-r2/usr/lib/ruby/gems/3.2.0/gems/rack-oauth2-2.2.1/spec/rack/oauth2/client/grant/password_spec.rb"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 18,
                  "endLine": 11,
                  "endColumn": 26,
                  "snippet": {
                    "text": "      {username: 'username'}\n    end\n\n    context 'when password is given' do\n      let :attributes do\n        {username: 'username', password: 'password'}\n      end\n",
                    "rendered": {
                      "text": "      {username: 'username'}\n    end\n\n    context 'when password is given' do\n      let :attributes do\n        {username: 'username', password: 'password'}\n      end\n",
                      "markdown": "`      {username: 'username'}\n    end\n\n    context 'when password is given' do\n      let :attributes do\n        {username: 'username', password: 'password'}\n      end\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-rack-oauth2-2.2.1-r2.apk/ruby3.2-rack-oauth2-2.2.1-r2/usr/lib/ruby/gems/3.2.0/gems/rack-oauth2-2.2.1/spec/rack/oauth2/client/grant/password_spec.rb"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 45,
                  "endLine": 4,
                  "endColumn": 53,
                  "snippet": {
                    "text": "require 'spec_helper.rb'\n\ndescribe Rack::OAuth2::Client::Grant::Password do\n  let(:grant) { Rack::OAuth2::Client::Grant::Password }\n\n  context 'when username is given' do\n    let :attributes do\n",
                    "rendered": {
                      "text": "require 'spec_helper.rb'\n\ndescribe Rack::OAuth2::Client::Grant::Password do\n  let(:grant) { Rack::OAuth2::Client::Grant::Password }\n\n  context 'when username is given' do\n    let :attributes do\n",
                      "markdown": "`require 'spec_helper.rb'\n\ndescribe Rack::OAuth2::Client::Grant::Password do\n  let(:grant) { Rack::OAuth2::Client::Grant::Password }\n\n  context 'when username is given' do\n    let :attributes do\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-rack-oauth2-2.2.1-r2.apk/ruby3.2-rack-oauth2-2.2.1-r2/usr/lib/ruby/gems/3.2.0/gems/rack-oauth2-2.2.1/spec/rack/oauth2/client/grant/password_spec.rb"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 38,
                  "endLine": 3,
                  "endColumn": 46,
                  "snippet": {
                    "text": "require 'spec_helper.rb'\n\ndescribe Rack::OAuth2::Client::Grant::Password do\n  let(:grant) { Rack::OAuth2::Client::Grant::Password }\n\n  context 'when username is given' do\n",
                    "rendered": {
                      "text": "require 'spec_helper.rb'\n\ndescribe Rack::OAuth2::Client::Grant::Password do\n  let(:grant) { Rack::OAuth2::Client::Grant::Password }\n\n  context 'when username is given' do\n",
                      "markdown": "`require 'spec_helper.rb'\n\ndescribe Rack::OAuth2::Client::Grant::Password do\n  let(:grant) { Rack::OAuth2::Client::Grant::Password }\n\n  context 'when username is given' do\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-rack-oauth2-2.2.1-r2.apk/ruby3.2-rack-oauth2-2.2.1-r2/usr/lib/ruby/gems/3.2.0/gems/rack-oauth2-2.2.1/spec/rack/oauth2/client/grant/password_spec.rb"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 5,
                  "endLine": 30,
                  "endColumn": 13,
                  "snippet": {
                    "text": "\n  context 'otherwise' do\n    it do\n      expect { grant.new }.to raise_error AttrRequired::AttrMissing\n    end\n  end\nend\n",
                    "rendered": {
                      "text": "\n  context 'otherwise' do\n    it do\n      expect { grant.new }.to raise_error AttrRequired::AttrMissing\n    end\n  end\nend\n",
                      "markdown": "`\n  context 'otherwise' do\n    it do\n      expect { grant.new }.to raise_error AttrRequired::AttrMissing\n    end\n  end\nend\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-rack-oauth2-2.2.1-r2.apk/ruby3.2-rack-oauth2-2.2.1-r2/usr/lib/ruby/gems/3.2.0/gems/rack-oauth2-2.2.1/spec/rack/oauth2/client/grant/password_spec.rb"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 7,
                  "endLine": 23,
                  "endColumn": 15,
                  "snippet": {
                    "text": "\n    context 'otherwise' do\n      it do\n        expect { grant.new attributes }.to raise_error AttrRequired::AttrMissing\n      end\n    end\n  end\n",
                    "rendered": {
                      "text": "\n    context 'otherwise' do\n      it do\n        expect { grant.new attributes }.to raise_error AttrRequired::AttrMissing\n      end\n    end\n  end\n",
                      "markdown": "`\n    context 'otherwise' do\n      it do\n        expect { grant.new attributes }.to raise_error AttrRequired::AttrMissing\n      end\n    end\n  end\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-rack-oauth2-2.2.1-r2.apk/ruby3.2-rack-oauth2-2.2.1-r2/usr/lib/ruby/gems/3.2.0/gems/rack-oauth2-2.2.1/spec/helpers/time.rb"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 19,
                  "endLine": 16,
                  "snippet": {
                    "text": "    prepend NowWithFixedTime\n\n    def fix(time = Time.now)\n      @fixed_time = time\n      yield\n    ensure\n      @fixed_time = nil\n    end\n",
                    "rendered": {
                      "text": "    prepend NowWithFixedTime\n\n    def fix(time = Time.now)\n      @fixed_time = time\n      yield\n    ensure\n      @fixed_time = nil\n    end\n",
                      "markdown": "`    prepend NowWithFixedTime\n\n    def fix(time = Time.now)\n      @fixed_time = time\n      yield\n    ensure\n      @fixed_time = nil\n    end\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-rack-oauth2-2.2.1-r2.apk/ruby3.2-rack-oauth2-2.2.1-r2/usr/lib/ruby/gems/3.2.0/gems/rack-oauth2-2.2.1/spec/helpers/time.rb"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 5,
                  "endLine": 2,
                  "snippet": {
                    "text": "class Time\n  class << self\n    module NowWithFixedTime\n      def now\n        if @fixed_time\n",
                    "rendered": {
                      "text": "class Time\n  class << self\n    module NowWithFixedTime\n      def now\n        if @fixed_time\n",
                      "markdown": "`class Time\n  class << self\n    module NowWithFixedTime\n      def now\n        if @fixed_time\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-rack-oauth2-2.2.1-r2.apk/ruby3.2-rack-oauth2-2.2.1-r2/usr/lib/ruby/gems/3.2.0/gems/rack-oauth2-2.2.1/lib/rack/oauth2/server/token/jwt_bearer.rb"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 35,
                  "endLine": 8,
                  "snippet": {
                    "text": "      class Token\n        class JWTBearer < Abstract::Handler\n          def _call(env)\n            @request  = Request.new env\n            @response = Response.new request\n            super\n          end\n\n",
                    "rendered": {
                      "text": "      class Token\n        class JWTBearer < Abstract::Handler\n          def _call(env)\n            @request  = Request.new env\n            @response = Response.new request\n            super\n          end\n\n",
                      "markdown": "`      class Token\n        class JWTBearer < Abstract::Handler\n          def _call(env)\n            @request  = Request.new env\n            @response = Response.new request\n            super\n          end\n\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-rack-oauth2-2.2.1-r2.apk/ruby3.2-rack-oauth2-2.2.1-r2/usr/lib/ruby/gems/3.2.0/gems/rack-oauth2-2.2.1/lib/rack/oauth2/server/token/extension/example.rb"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 37,
                  "endLine": 17,
                  "snippet": {
                    "text": "            end\n\n            def _call(env)\n              @request  = Request.new env\n              @response = Response.new request\n              super\n            end\n\n",
                    "rendered": {
                      "text": "            end\n\n            def _call(env)\n              @request  = Request.new env\n              @response = Response.new request\n              super\n            end\n\n",
                      "markdown": "`            end\n\n            def _call(env)\n              @request  = Request.new env\n              @response = Response.new request\n              super\n            end\n\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-rack-oauth2-2.2.1-r2.apk/ruby3.2-rack-oauth2-2.2.1-r2/usr/lib/ruby/gems/3.2.0/gems/rack-oauth2-2.2.1/lib/rack/oauth2/server/token/error.rb"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 153,
                  "endLine": 22,
                  "endColumn": 161,
                  "snippet": {
                    "text": " failed to authenticate, the client did not include its credentials, provided multiple client credentials, or used unsupported credentials type.\",\n            invalid_grant: \"The provided access grant is invalid, expired, or revoked (e.g. invalid assertion, expired authorization token, bad end-user password credentials, or mismatching authorization code and redirection URI).\",\n            unauthorized_client: \"The authenticated client is not authorized to use the access grant type provided.\",\n            unsupported_grant_type: \"The access grant included - its type or another attribute - is not suppor",
                    "rendered": {
                      "text": " failed to authenticate, the client did not include its credentials, provided multiple client credentials, or used unsupported credentials type.\",\n            invalid_grant: \"The provided access grant is invalid, expired, or revoked (e.g. invalid assertion, expired authorization token, bad end-user password credentials, or mismatching authorization code and redirection URI).\",\n            unauthorized_client: \"The authenticated client is not authorized to use the access grant type provided.\",\n            unsupported_grant_type: \"The access grant included - its type or another attribute - is not suppor",
                      "markdown": "` failed to authenticate, the client did not include its credentials, provided multiple client credentials, or used unsupported credentials type.\",\n            invalid_grant: \"The provided access grant is invalid, expired, or revoked (e.g. invalid assertion, expired authorization token, bad end-user password credentials, or mismatching authorization code and redirection URI).\",\n            unauthorized_client: \"The authenticated client is not authorized to use the access grant type provided.\",\n            unsupported_grant_type: \"The access grant included - its type or another attribute - is not suppor`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-rack-oauth2-2.2.1-r2.apk/ruby3.2-rack-oauth2-2.2.1-r2/usr/lib/ruby/gems/3.2.0/gems/rack-oauth2-2.2.1/lib/rack/oauth2/server/authorize/token.rb"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 35,
                  "endLine": 8,
                  "snippet": {
                    "text": "      class Authorize\n        class Token < Abstract::Handler\n          def _call(env)\n            @request  = Request.new env\n            @response = Response.new request\n            super\n          end\n\n",
                    "rendered": {
                      "text": "      class Authorize\n        class Token < Abstract::Handler\n          def _call(env)\n            @request  = Request.new env\n            @response = Response.new request\n            super\n          end\n\n",
                      "markdown": "`      class Authorize\n        class Token < Abstract::Handler\n          def _call(env)\n            @request  = Request.new env\n            @response = Response.new request\n            super\n          end\n\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-rack-oauth2-2.2.1-r2.apk/ruby3.2-rack-oauth2-2.2.1-r2/usr/lib/ruby/gems/3.2.0/gems/rack-oauth2-2.2.1/lib/rack/oauth2/server/authorize/extension/code_and_t"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 37,
                  "endLine": 15,
                  "snippet": {
                    "text": "            end\n\n            def _call(env)\n              @request  = Request.new env\n              @response = Response.new request\n              super\n            end\n\n",
                    "rendered": {
                      "text": "            end\n\n            def _call(env)\n              @request  = Request.new env\n              @response = Response.new request\n              super\n            end\n\n",
                      "markdown": "`            end\n\n            def _call(env)\n              @request  = Request.new env\n              @response = Response.new request\n              super\n            end\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-rack-oauth2-2.2.1-r2.apk/ruby3.2-rack-oauth2-2.2.1-r2/usr/lib/ruby/gems/3.2.0/gems/rack-oauth2-2.2.1/spec/rack/oauth2/server/token/saml2_bearer_spec.rb"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 19,
                  "endLine": 17,
                  "endColumn": 25,
                  "snippet": {
                    "text": "      assertion: '<xml>...</xml>'\n    }\n  end\n  subject { request.post('/', params: params) }\n\n  its(:status)       { should == 200 }\n  its(:content_type) { should == 'application/json' }\n",
                    "rendered": {
                      "text": "      assertion: '<xml>...</xml>'\n    }\n  end\n  subject { request.post('/', params: params) }\n\n  its(:status)       { should == 200 }\n  its(:content_type) { should == 'application/json' }\n",
                      "markdown": "`      assertion: '<xml>...</xml>'\n    }\n  end\n  subject { request.post('/', params: params) }\n\n  its(:status)       { should == 200 }\n  its(:content_type) { should == 'application/json' }\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-rack-oauth2-2.2.1-r2.apk/ruby3.2-rack-oauth2-2.2.1-r2/usr/lib/ruby/gems/3.2.0/gems/rack-oauth2-2.2.1/spec/rack/oauth2/server/token/refresh_token_spec.rb"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 19,
                  "endLine": 17,
                  "endColumn": 25,
                  "snippet": {
                    "text": "      refresh_token: \"refresh_token\"\n    }\n  end\n  subject { request.post('/', params: params) }\n\n  its(:status)       { should == 200 }\n  its(:content_type) { should == 'application/json' }\n",
                    "rendered": {
                      "text": "      refresh_token: \"refresh_token\"\n    }\n  end\n  subject { request.post('/', params: params) }\n\n  its(:status)       { should == 200 }\n  its(:content_type) { should == 'application/json' }\n",
                      "markdown": "`      refresh_token: \"refresh_token\"\n    }\n  end\n  subject { request.post('/', params: params) }\n\n  its(:status)       { should == 200 }\n  its(:content_type) { should == 'application/json' }\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-rack-oauth2-2.2.1-r2.apk/ruby3.2-rack-oauth2-2.2.1-r2/usr/lib/ruby/gems/3.2.0/gems/rack-oauth2-2.2.1/spec/rack/oauth2/server/token/password_spec.rb"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 19,
                  "endLine": 18,
                  "endColumn": 25,
                  "snippet": {
                    "text": "      password: 'secret'\n    }\n  end\n  subject { request.post('/', params: params) }\n\n  its(:status)       { should == 200 }\n  its(:content_type) { should == 'application/json' }\n",
                    "rendered": {
                      "text": "      password: 'secret'\n    }\n  end\n  subject { request.post('/', params: params) }\n\n  its(:status)       { should == 200 }\n  its(:content_type) { should == 'application/json' }\n",
                      "markdown": "`      password: 'secret'\n    }\n  end\n  subject { request.post('/', params: params) }\n\n  its(:status)       { should == 200 }\n  its(:content_type) { should == 'application/json' }\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-rack-oauth2-2.2.1-r2.apk/ruby3.2-rack-oauth2-2.2.1-r2/usr/lib/ruby/gems/3.2.0/gems/rack-oauth2-2.2.1/spec/rack/oauth2/server/token/password_spec.rb"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 15,
                  "endLine": 25,
                  "endColumn": 23,
                  "snippet": {
                    "text": "  its(:body)         { should include '\"access_token\":\"access_token\"' }\n  its(:body)         { should include '\"token_type\":\"bearer\"' }\n\n  [:username, :password].each do |required|\n    context \"when #{required} is missing\" do\n      before do\n        params.delete_if do |key, value|\n",
                    "rendered": {
                      "text": "  its(:body)         { should include '\"access_token\":\"access_token\"' }\n  its(:body)         { should include '\"token_type\":\"bearer\"' }\n\n  [:username, :password].each do |required|\n    context \"when #{required} is missing\" do\n      before do\n        params.delete_if do |key, value|\n",
                      "markdown": "`  its(:body)         { should include '\"access_token\":\"access_token\"' }\n  its(:body)         { should include '\"token_type\":\"bearer\"' }\n\n  [:username, :password].each do |required|\n    context \"when #{required} is missing\" do\n      before do\n        params.delete_if do |key, value|\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-rack-oauth2-2.2.1-r2.apk/ruby3.2-rack-oauth2-2.2.1-r2/usr/lib/ruby/gems/3.2.0/gems/rack-oauth2-2.2.1/spec/rack/oauth2/server/token/password_spec.rb"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 6,
                  "endLine": 15,
                  "endColumn": 14,
                  "snippet": {
                    "text": "      grant_type: 'password',\n      client_id: 'client_id',\n      username: 'nov',\n      password: 'secret'\n    }\n  end\n  subject { request.post('/', params: params) }\n",
                    "rendered": {
                      "text": "      grant_type: 'password',\n      client_id: 'client_id',\n      username: 'nov',\n      password: 'secret'\n    }\n  end\n  subject { request.post('/', params: params) }\n",
                      "markdown": "`      grant_type: 'password',\n      client_id: 'client_id',\n      username: 'nov',\n      password: 'secret'\n    }\n  end\n  subject { request.post('/', params: params) }\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-rack-oauth2-2.2.1-r2.apk/ruby3.2-rack-oauth2-2.2.1-r2/usr/lib/ruby/gems/3.2.0/gems/rack-oauth2-2.2.1/spec/rack/oauth2/server/token/password_spec.rb"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 19,
                  "endLine": 12,
                  "endColumn": 27,
                  "snippet": {
                    "text": "  end\n  let(:params) do\n    {\n      grant_type: 'password',\n      client_id: 'client_id',\n      username: 'nov',\n      password: 'secret'\n",
                    "rendered": {
                      "text": "  end\n  let(:params) do\n    {\n      grant_type: 'password',\n      client_id: 'client_id',\n      username: 'nov',\n      password: 'secret'\n",
                      "markdown": "`  end\n  let(:params) do\n    {\n      grant_type: 'password',\n      client_id: 'client_id',\n      username: 'nov',\n      password: 'secret'\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-rack-oauth2-2.2.1-r2.apk/ruby3.2-rack-oauth2-2.2.1-r2/usr/lib/ruby/gems/3.2.0/gems/rack-oauth2-2.2.1/spec/rack/oauth2/server/token/password_spec.rb"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 38,
                  "endLine": 3,
                  "endColumn": 46,
                  "snippet": {
                    "text": "require 'spec_helper.rb'\n\ndescribe Rack::OAuth2::Server::Token::Password do\n  let(:request) { Rack::MockRequest.new app }\n  let(:app) do\n    Rack::OAuth2::Server::Token.new do |request, response|\n",
                    "rendered": {
                      "text": "require 'spec_helper.rb'\n\ndescribe Rack::OAuth2::Server::Token::Password do\n  let(:request) { Rack::MockRequest.new app }\n  let(:app) do\n    Rack::OAuth2::Server::Token.new do |request, response|\n",
                      "markdown": "`require 'spec_helper.rb'\n\ndescribe Rack::OAuth2::Server::Token::Password do\n  let(:request) { Rack::MockRequest.new app }\n  let(:app) do\n    Rack::OAuth2::Server::Token.new do |request, response|\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-rack-oauth2-2.2.1-r2.apk/ruby3.2-rack-oauth2-2.2.1-r2/usr/lib/ruby/gems/3.2.0/gems/rack-oauth2-2.2.1/spec/rack/oauth2/server/token/jwt_bearer_spec.rb"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 19,
                  "endLine": 17,
                  "endColumn": 25,
                  "snippet": {
                    "text": "      assertion: 'header.payload.signature'\n    }\n  end\n  subject { request.post('/', params: params) }\n\n  its(:status)       { should == 200 }\n  its(:content_type) { should == 'application/json' }\n",
                    "rendered": {
                      "text": "      assertion: 'header.payload.signature'\n    }\n  end\n  subject { request.post('/', params: params) }\n\n  its(:status)       { should == 200 }\n  its(:content_type) { should == 'application/json' }\n",
                      "markdown": "`      assertion: 'header.payload.signature'\n    }\n  end\n  subject { request.post('/', params: params) }\n\n  its(:status)       { should == 200 }\n  its(:content_type) { should == 'application/json' }\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-rack-oauth2-2.2.1-r2.apk/ruby3.2-rack-oauth2-2.2.1-r2/usr/lib/ruby/gems/3.2.0/gems/rack-oauth2-2.2.1/lib/rack/oauth2/server/resource.rb"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 18,
                  "endLine": 37,
                  "snippet": {
                    "text": "          attr_reader :access_token\n\n          def initialize(env)\n            @env = env\n            @auth_header = Rack::Auth::AbstractRequest.new(env)\n          end\n\n          def setup!\n",
                    "rendered": {
                      "text": "          attr_reader :access_token\n\n          def initialize(env)\n            @env = env\n            @auth_header = Rack::Auth::AbstractRequest.new(env)\n          end\n\n          def setup!\n",
                      "markdown": "`          attr_reader :access_token\n\n          def initialize(env)\n            @env = env\n            @auth_header = Rack::Auth::AbstractRequest.new(env)\n          end\n\n          def setup!\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-rack-oauth2-2.2.1-r2.apk/ruby3.2-rack-oauth2-2.2.1-r2/usr/lib/ruby/gems/3.2.0/gems/rack-oauth2-2.2.1/lib/rack/oauth2/server/rails/authorize.rb"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 21,
                  "endLine": 14,
                  "snippet": {
                    "text": "\n          def _call(env)\n            prepare_oauth_env env\n            @app.call env\n          rescue Rack::OAuth2::Server::Abstract::Error => e\n            e.finish\n          end\n\n",
                    "rendered": {
                      "text": "\n          def _call(env)\n            prepare_oauth_env env\n            @app.call env\n          rescue Rack::OAuth2::Server::Abstract::Error => e\n            e.finish\n          end\n\n",
                      "markdown": "`\n          def _call(env)\n            prepare_oauth_env env\n            @app.call env\n          rescue Rack::OAuth2::Server::Abstract::Error => e\n            e.finish\n          end\n\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-rack-oauth2-2.2.1-r2.apk/ruby3.2-rack-oauth2-2.2.1-r2/usr/lib/ruby/gems/3.2.0/gems/rack-oauth2-2.2.1/lib/rack/oauth2/server/rails/authorize.rb"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 29,
                  "endLine": 13,
                  "snippet": {
                    "text": "          end\n\n          def _call(env)\n            prepare_oauth_env env\n            @app.call env\n          rescue Rack::OAuth2::Server::Abstract::Error => e\n            e.finish\n          end\n",
                    "rendered": {
                      "text": "          end\n\n          def _call(env)\n            prepare_oauth_env env\n            @app.call env\n          rescue Rack::OAuth2::Server::Abstract::Error => e\n            e.finish\n          end\n",
                      "markdown": "`          end\n\n          def _call(env)\n            prepare_oauth_env env\n            @app.call env\n          rescue Rack::OAuth2::Server::Abstract::Error => e\n            e.finish\n          end\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-rack-oauth2-2.2.1-r2.apk/ruby3.2-rack-oauth2-2.2.1-r2/usr/lib/ruby/gems/3.2.0/gems/rack-oauth2-2.2.1/lib/rack/oauth2/server/authorize/code.rb"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 35,
                  "endLine": 8,
                  "snippet": {
                    "text": "      class Authorize\n        class Code < Abstract::Handler\n          def _call(env)\n            @request  = Request.new env\n            @response = Response.new request\n            super\n          end\n\n",
                    "rendered": {
                      "text": "      class Authorize\n        class Code < Abstract::Handler\n          def _call(env)\n            @request  = Request.new env\n            @response = Response.new request\n            super\n          end\n\n",
                      "markdown": "`      class Authorize\n        class Code < Abstract::Handler\n          def _call(env)\n            @request  = Request.new env\n            @response = Response.new request\n            super\n          end\n\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-rack-oauth2-2.2.1-r2.apk/ruby3.2-rack-oauth2-2.2.1-r2/usr/lib/ruby/gems/3.2.0/gems/rack-oauth2-2.2.1/lib/rack/oauth2/access_token/mtls.rb"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 39,
                  "endLine": 10,
                  "endColumn": 50,
                  "snippet": {
                    "text": "        def initialize(attributes = {})\n          super\n          self.token_type = :bearer\n          http_client.ssl.client_key = private_key\n          http_client.ssl.client_cert = certificate\n        end\n      end\n",
                    "rendered": {
                      "text": "        def initialize(attributes = {})\n          super\n          self.token_type = :bearer\n          http_client.ssl.client_key = private_key\n          http_client.ssl.client_cert = certificate\n        end\n      end\n",
                      "markdown": "`        def initialize(attributes = {})\n          super\n          self.token_type = :bearer\n          http_client.ssl.client_key = private_key\n          http_client.ssl.client_cert = certificate\n        end\n      end\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-rack-oauth2-2.2.1-r2.apk/ruby3.2-rack-oauth2-2.2.1-r2/usr/lib/ruby/gems/3.2.0/gems/rack-oauth2-2.2.1/lib/rack/oauth2/access_token/mtls.rb"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 23,
                  "endLine": 5,
                  "endColumn": 34,
                  "snippet": {
                    "text": "  module OAuth2\n    class AccessToken\n      class MTLS < Bearer\n        attr_required :private_key, :certificate\n\n        def initialize(attributes = {})\n          super\n",
                    "rendered": {
                      "text": "  module OAuth2\n    class AccessToken\n      class MTLS < Bearer\n        attr_required :private_key, :certificate\n\n        def initialize(attributes = {})\n          super\n",
                      "markdown": "`  module OAuth2\n    class AccessToken\n      class MTLS < Bearer\n        attr_required :private_key, :certificate\n\n        def initialize(attributes = {})\n          super\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-rack-oauth2-2.2.1-r2.apk/ruby3.2-rack-oauth2-2.2.1-r2/usr/lib/ruby/gems/3.2.0/gems/rack-oauth2-2.2.1/.github/workflows/spec.yml"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 18,
                  "endLine": 26,
                  "snippet": {
                    "text": "\n    steps:\n    - uses: actions/checkout@v3\n    - name: Set up Ruby\n      uses: ruby/setup-ruby@v1\n      with:\n        ruby-version: ${{ matrix.ruby-version }}\n        bundler-cache: true\n",
                    "rendered": {
                      "text": "\n    steps:\n    - uses: actions/checkout@v3\n    - name: Set up Ruby\n      uses: ruby/setup-ruby@v1\n      with:\n        ruby-version: ${{ matrix.ruby-version }}\n        bundler-cache: true\n",
                      "markdown": "`\n    steps:\n    - uses: actions/checkout@v3\n    - name: Set up Ruby\n      uses: ruby/setup-ruby@v1\n      with:\n        ruby-version: ${{ matrix.ruby-version }}\n        bundler-cache: true\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-rack-oauth2-2.2.1-r2.apk/ruby3.2-rack-oauth2-2.2.1-r2/usr/lib/ruby/gems/3.2.0/gems/rack-oauth2-2.2.1/spec/rack/oauth2/util_spec.rb"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 7,
                  "endLine": 55,
                  "endColumn": 15,
                  "snippet": {
                    "text": "    context 'otherwise' do\n      it do\n        expect { util.parse_uri nil }.to raise_error StandardError\n        expect { util.parse_uri 123 }.to raise_error StandardError\n      end\n    end\n  end\n",
                    "rendered": {
                      "text": "    context 'otherwise' do\n      it do\n        expect { util.parse_uri nil }.to raise_error StandardError\n        expect { util.parse_uri 123 }.to raise_error StandardError\n      end\n    end\n  end\n",
                      "markdown": "`    context 'otherwise' do\n      it do\n        expect { util.parse_uri nil }.to raise_error StandardError\n        expect { util.parse_uri 123 }.to raise_error StandardError\n      end\n    end\n  end\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-rack-oauth2-2.2.1-r2.apk/ruby3.2-rack-oauth2-2.2.1-r2/usr/lib/ruby/gems/3.2.0/gems/rack-oauth2-2.2.1/spec/rack/oauth2/util_spec.rb"
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 7,
                  "endLine": 54,
                  "endColumn": 15,
                  "snippet": {
                    "text": "\n    context 'otherwise' do\n      it do\n        expect { util.parse_uri nil }.to raise_error StandardError\n        expect { util.parse_uri 123 }.to raise_error StandardError\n      end\n    end\n",
                    "rendered": {
                      "text": "\n    context 'otherwise' do\n      it do\n        expect { util.parse_uri nil }.to raise_error StandardError\n        expect { util.parse_uri 123 }.to raise_error StandardError\n      end\n    end\n",
                      "markdown": "`\n    context 'otherwise' do\n      it do\n        expect { util.parse_uri nil }.to raise_error StandardError\n        expect { util.parse_uri 123 }.to raise_error StandardError\n      end\n    end\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-rack-oauth2-2.2.1-r2.apk/ruby3.2-rack-oauth2-2.2.1-r2/usr/lib/ruby/gems/3.2.0/gems/rack-oauth2-2.2.1/spec/rack/oauth2/util_spec.rb"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 7,
                  "endLine": 46,
                  "endColumn": 15,
                  "snippet": {
                    "text": "\n    context 'when invalid URI is given' do\n      it do\n        expect do\n          util.parse_uri '::'\n        end.to raise_error URI::InvalidURIError\n      end\n",
                    "rendered": {
                      "text": "\n    context 'when invalid URI is given' do\n      it do\n        expect do\n          util.parse_uri '::'\n        end.to raise_error URI::InvalidURIError\n      end\n",
                      "markdown": "`\n    context 'when invalid URI is given' do\n      it do\n        expect do\n          util.parse_uri '::'\n        end.to raise_error URI::InvalidURIError\n      end\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-rack-oauth2-2.2.1-r2.apk/ruby3.2-rack-oauth2-2.2.1-r2/usr/lib/ruby/gems/3.2.0/gems/rack-oauth2-2.2.1/spec/rack/oauth2/server/token_spec.rb"
                },
                "region": {
                  "startLine": 168,
                  "startColumn": 24,
                  "endLine": 168,
                  "endColumn": 30,
                  "snippet": {
                    "text": "        Rack::OAuth2::Server::Token.new\n      end\n      it do\n        expect { request.post('/', params: params) }.to raise_error AttrRequired::AttrMissing\n      end\n    end\n  end\n",
                    "rendered": {
                      "text": "        Rack::OAuth2::Server::Token.new\n      end\n      it do\n        expect { request.post('/', params: params) }.to raise_error AttrRequired::AttrMissing\n      end\n    end\n  end\n",
                      "markdown": "`        Rack::OAuth2::Server::Token.new\n      end\n      it do\n        expect { request.post('/', params: params) }.to raise_error AttrRequired::AttrMissing\n      end\n    end\n  end\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-rack-oauth2-2.2.1-r2.apk/ruby3.2-rack-oauth2-2.2.1-r2/usr/lib/ruby/gems/3.2.0/gems/rack-oauth2-2.2.1/spec/rack/oauth2/server/token_spec.rb"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 19,
                  "endLine": 19,
                  "endColumn": 25,
                  "snippet": {
                    "text": "      redirect_uri: 'http://client.example.com/callback'\n    }\n  end\n  subject { request.post('/token', params: params) }\n\n  context 'when multiple client credentials are given' do\n    context 'when different credentials are given' do\n",
                    "rendered": {
                      "text": "      redirect_uri: 'http://client.example.com/callback'\n    }\n  end\n  subject { request.post('/token', params: params) }\n\n  context 'when multiple client credentials are given' do\n    context 'when different credentials are given' do\n",
                      "markdown": "`      redirect_uri: 'http://client.example.com/callback'\n    }\n  end\n  subject { request.post('/token', params: params) }\n\n  context 'when multiple client credentials are given' do\n    context 'when different credentials are given' do\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-rack-oauth2-2.2.1-r2.apk/ruby3.2-rack-oauth2-2.2.1-r2/usr/lib/ruby/gems/3.2.0/gems/rack-oauth2-2.2.1/spec/rack/oauth2/server/token_spec.rb"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 43,
                  "endLine": 41,
                  "endColumn": 49,
                  "snippet": {
                    "text": "      let(:env) do\n        Rack::MockRequest.env_for(\n          '/token',\n          'HTTP_AUTHORIZATION' => \"Basic #{Base64.encode64('client_id:client_secret')}\",\n          params: params\n        )\n      end\n",
                    "rendered": {
                      "text": "      let(:env) do\n        Rack::MockRequest.env_for(\n          '/token',\n          'HTTP_AUTHORIZATION' => \"Basic #{Base64.encode64('client_id:client_secret')}\",\n          params: params\n        )\n      end\n",
                      "markdown": "`      let(:env) do\n        Rack::MockRequest.env_for(\n          '/token',\n          'HTTP_AUTHORIZATION' => \"Basic #{Base64.encode64('client_id:client_secret')}\",\n          params: params\n        )\n      end\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-rack-oauth2-2.2.1-r2.apk/ruby3.2-rack-oauth2-2.2.1-r2/usr/lib/ruby/gems/3.2.0/gems/rack-oauth2-2.2.1/spec/rack/oauth2/server/token_spec.rb"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 43,
                  "endLine": 26,
                  "endColumn": 49,
                  "snippet": {
                    "text": "      let(:env) do\n        Rack::MockRequest.env_for(\n          '/token',\n          'HTTP_AUTHORIZATION' => \"Basic #{Base64.encode64('client_id2:client_secret')}\",\n          params: params\n        )\n      end\n",
                    "rendered": {
                      "text": "      let(:env) do\n        Rack::MockRequest.env_for(\n          '/token',\n          'HTTP_AUTHORIZATION' => \"Basic #{Base64.encode64('client_id2:client_secret')}\",\n          params: params\n        )\n      end\n",
                      "markdown": "`      let(:env) do\n        Rack::MockRequest.env_for(\n          '/token',\n          'HTTP_AUTHORIZATION' => \"Basic #{Base64.encode64('client_id2:client_secret')}\",\n          params: params\n        )\n      end\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-rack-oauth2-2.2.1-r2.apk/ruby3.2-rack-oauth2-2.2.1-r2/usr/lib/ruby/gems/3.2.0/gems/rack-oauth2-2.2.1/spec/rack/oauth2/server/token_spec.rb"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 9,
                  "endLine": 2,
                  "endColumn": 15,
                  "snippet": {
                    "text": "require 'spec_helper.rb'\nrequire 'base64'\n\ndescribe Rack::OAuth2::Server::Token do\n  let(:request) { Rack::MockRequest.new app }\n",
                    "rendered": {
                      "text": "require 'spec_helper.rb'\nrequire 'base64'\n\ndescribe Rack::OAuth2::Server::Token do\n  let(:request) { Rack::MockRequest.new app }\n",
                      "markdown": "`require 'spec_helper.rb'\nrequire 'base64'\n\ndescribe Rack::OAuth2::Server::Token do\n  let(:request) { Rack::MockRequest.new app }\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-rack-oauth2-2.2.1-r2.apk/ruby3.2-rack-oauth2-2.2.1-r2/usr/lib/ruby/gems/3.2.0/gems/rack-oauth2-2.2.1/spec/rack/oauth2/server/token_spec.rb"
                },
                "region": {
                  "startLine": 185,
                  "startColumn": 60,
                  "endLine": 185,
                  "endColumn": 65,
                  "snippet": {
                    "text": "        params: params\n      )\n    end\n    let(:request) { Rack::OAuth2::Server::Token::Request.new env }\n    its(:extensions) { should == [Rack::OAuth2::Server::Token::Extension::Example] }\n\n    describe 'JWT assertion' do\n",
                    "rendered": {
                      "text": "        params: params\n      )\n    end\n    let(:request) { Rack::OAuth2::Server::Token::Request.new env }\n    its(:extensions) { should == [Rack::OAuth2::Server::Token::Extension::Example] }\n\n    describe 'JWT assertion' do\n",
                      "markdown": "`        params: params\n      )\n    end\n    let(:request) { Rack::OAuth2::Server::Token::Request.new env }\n    its(:extensions) { should == [Rack::OAuth2::Server::Token::Extension::Example] }\n\n    describe 'JWT assertion' do\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-rack-oauth2-2.2.1-r2.apk/ruby3.2-rack-oauth2-2.2.1-r2/usr/lib/ruby/gems/3.2.0/gems/rack-oauth2-2.2.1/spec/rack/oauth2/server/token_spec.rb"
                },
                "region": {
                  "startLine": 168,
                  "startColumn": 7,
                  "endLine": 168,
                  "endColumn": 15,
                  "snippet": {
                    "text": "        Rack::OAuth2::Server::Token.new\n      end\n      it do\n        expect { request.post('/', params: params) }.to raise_error AttrRequired::AttrMissing\n      end\n    end\n  end\n",
                    "rendered": {
                      "text": "        Rack::OAuth2::Server::Token.new\n      end\n      it do\n        expect { request.post('/', params: params) }.to raise_error AttrRequired::AttrMissing\n      end\n    end\n  end\n",
                      "markdown": "`        Rack::OAuth2::Server::Token.new\n      end\n      it do\n        expect { request.post('/', params: params) }.to raise_error AttrRequired::AttrMissing\n      end\n    end\n  end\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-rack-oauth2-2.2.1-r2.apk/ruby3.2-rack-oauth2-2.2.1-r2/usr/lib/ruby/gems/3.2.0/gems/rack-oauth2-2.2.1/spec/rack/oauth2/server/extension/pkce_spec.rb"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 25,
                  "endLine": 7,
                  "endColumn": 31,
                  "snippet": {
                    "text": "  let(:request) { Rack::MockRequest.new app }\n  let(:redirect_uri)   { 'http://client.example.com/callback' }\n  let(:code_verifier)  { SecureRandom.hex(16) }\n  let(:code_challenge) { Base64.urlsafe_encode64(OpenSSL::Digest::SHA256.digest(code_verifier)).delete('=') }\n  let(:code_challenge_method) { :S256 }\n  subject { @request }\n\n",
                    "rendered": {
                      "text": "  let(:request) { Rack::MockRequest.new app }\n  let(:redirect_uri)   { 'http://client.example.com/callback' }\n  let(:code_verifier)  { SecureRandom.hex(16) }\n  let(:code_challenge) { Base64.urlsafe_encode64(OpenSSL::Digest::SHA256.digest(code_verifier)).delete('=') }\n  let(:code_challenge_method) { :S256 }\n  subject { @request }\n\n",
                      "markdown": "`  let(:request) { Rack::MockRequest.new app }\n  let(:redirect_uri)   { 'http://client.example.com/callback' }\n  let(:code_verifier)  { SecureRandom.hex(16) }\n  let(:code_challenge) { Base64.urlsafe_encode64(OpenSSL::Digest::SHA256.digest(code_verifier)).delete('=') }\n  let(:code_challenge_method) { :S256 }\n  subject { @request }\n\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-rack-oauth2-2.2.1-r2.apk/ruby3.2-rack-oauth2-2.2.1-r2/usr/lib/ruby/gems/3.2.0/gems/rack-oauth2-2.2.1/spec/rack/oauth2/server/extension/pkce_spec.rb"
                },
                "region": {
                  "startLine": 154,
                  "startColumn": 11,
                  "endLine": 154,
                  "endColumn": 19,
                  "snippet": {
                    "text": "\n        context 'when unknown code_challenge_method is given' do\n          it do\n            expect do\n              subject.verify_code_verifier! code_challenge, :unknown\n            end.to raise_error Rack::OAuth2::Server::Token::BadRequest, /invalid_grant/\n          end\n",
                    "rendered": {
                      "text": "\n        context 'when unknown code_challenge_method is given' do\n          it do\n            expect do\n              subject.verify_code_verifier! code_challenge, :unknown\n            end.to raise_error Rack::OAuth2::Server::Token::BadRequest, /invalid_grant/\n          end\n",
                      "markdown": "`\n        context 'when unknown code_challenge_method is given' do\n          it do\n            expect do\n              subject.verify_code_verifier! code_challenge, :unknown\n            end.to raise_error Rack::OAuth2::Server::Token::BadRequest, /invalid_grant/\n          end\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-rack-oauth2-2.2.1-r2.apk/ruby3.2-rack-oauth2-2.2.1-r2/usr/lib/ruby/gems/3.2.0/gems/rack-oauth2-2.2.1/spec/rack/oauth2/server/extension/pkce_spec.rb"
                },
                "region": {
                  "startLine": 146,
                  "startColumn": 11,
                  "endLine": 146,
                  "endColumn": 19,
                  "snippet": {
                    "text": "\n        context 'when code_challenge is nil' do\n          it do\n            expect do\n              subject.verify_code_verifier! nil\n            end.not_to raise_error\n          end\n",
                    "rendered": {
                      "text": "\n        context 'when code_challenge is nil' do\n          it do\n            expect do\n              subject.verify_code_verifier! nil\n            end.not_to raise_error\n          end\n",
                      "markdown": "`\n        context 'when code_challenge is nil' do\n          it do\n            expect do\n              subject.verify_code_verifier! nil\n            end.not_to raise_error\n          end\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-rack-oauth2-2.2.1-r2.apk/ruby3.2-rack-oauth2-2.2.1-r2/usr/lib/ruby/gems/3.2.0/gems/rack-oauth2-2.2.1/spec/rack/oauth2/server/extension/pkce_spec.rb"
                },
                "region": {
                  "startLine": 138,
                  "startColumn": 11,
                  "endLine": 138,
                  "endColumn": 19,
                  "snippet": {
                    "text": "\n        context 'when wrong code_challenge is blank' do\n          it do\n            expect do\n              subject.verify_code_verifier! 'wrong'\n            end.to raise_error Rack::OAuth2::Server::Token::BadRequest, /invalid_grant/\n          end\n",
                    "rendered": {
                      "text": "\n        context 'when wrong code_challenge is blank' do\n          it do\n            expect do\n              subject.verify_code_verifier! 'wrong'\n            end.to raise_error Rack::OAuth2::Server::Token::BadRequest, /invalid_grant/\n          end\n",
                      "markdown": "`\n        context 'when wrong code_challenge is blank' do\n          it do\n            expect do\n              subject.verify_code_verifier! 'wrong'\n            end.to raise_error Rack::OAuth2::Server::Token::BadRequest, /invalid_grant/\n          end\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-rack-oauth2-2.2.1-r2.apk/ruby3.2-rack-oauth2-2.2.1-r2/usr/lib/ruby/gems/3.2.0/gems/rack-oauth2-2.2.1/spec/rack/oauth2/server/extension/pkce_spec.rb"
                },
                "region": {
                  "startLine": 130,
                  "startColumn": 11,
                  "endLine": 130,
                  "endColumn": 19,
                  "snippet": {
                    "text": "\n        context 'when collect code_challenge is given' do\n          it do\n            expect do\n              subject.verify_code_verifier! code_challenge\n            end.to raise_error Rack::OAuth2::Server::Token::BadRequest, /invalid_grant/\n          end\n",
                    "rendered": {
                      "text": "\n        context 'when collect code_challenge is given' do\n          it do\n            expect do\n              subject.verify_code_verifier! code_challenge\n            end.to raise_error Rack::OAuth2::Server::Token::BadRequest, /invalid_grant/\n          end\n",
                      "markdown": "`\n        context 'when collect code_challenge is given' do\n          it do\n            expect do\n              subject.verify_code_verifier! code_challenge\n            end.to raise_error Rack::OAuth2::Server::Token::BadRequest, /invalid_grant/\n          end\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-rack-oauth2-2.2.1-r2.apk/ruby3.2-rack-oauth2-2.2.1-r2/usr/lib/ruby/gems/3.2.0/gems/rack-oauth2-2.2.1/spec/rack/oauth2/server/extension/pkce_spec.rb"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 11,
                  "endLine": 122,
                  "endColumn": 19,
                  "snippet": {
                    "text": "      describe '#verify_code_verifier!' do\n        context 'when code_verifier is given with code_challenge_method=plain' do\n          it do\n            expect do\n              subject.verify_code_verifier! code_verifier, :plain\n            end.to raise_error Rack::OAuth2::Server::Token::BadRequest, /invalid_grant/\n          end\n",
                    "rendered": {
                      "text": "      describe '#verify_code_verifier!' do\n        context 'when code_verifier is given with code_challenge_method=plain' do\n          it do\n            expect do\n              subject.verify_code_verifier! code_verifier, :plain\n            end.to raise_error Rack::OAuth2::Server::Token::BadRequest, /invalid_grant/\n          end\n",
                      "markdown": "`      describe '#verify_code_verifier!' do\n        context 'when code_verifier is given with code_challenge_method=plain' do\n          it do\n            expect do\n              subject.verify_code_verifier! code_verifier, :plain\n            end.to raise_error Rack::OAuth2::Server::Token::BadRequest, /invalid_grant/\n          end\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-rack-oauth2-2.2.1-r2.apk/ruby3.2-rack-oauth2-2.2.1-r2/usr/lib/ruby/gems/3.2.0/gems/rack-oauth2-2.2.1/spec/rack/oauth2/server/extension/pkce_spec.rb"
                },
                "region": {
                  "startLine": 105,
                  "startColumn": 11,
                  "endLine": 105,
                  "endColumn": 19,
                  "snippet": {
                    "text": "\n        context 'when unknown code_challenge_method is given' do\n          it do\n            expect do\n              subject.verify_code_verifier! code_challenge, :unknown\n            end.to raise_error Rack::OAuth2::Server::Token::BadRequest, /invalid_grant/\n          end\n",
                    "rendered": {
                      "text": "\n        context 'when unknown code_challenge_method is given' do\n          it do\n            expect do\n              subject.verify_code_verifier! code_challenge, :unknown\n            end.to raise_error Rack::OAuth2::Server::Token::BadRequest, /invalid_grant/\n          end\n",
                      "markdown": "`\n        context 'when unknown code_challenge_method is given' do\n          it do\n            expect do\n              subject.verify_code_verifier! code_challenge, :unknown\n            end.to raise_error Rack::OAuth2::Server::Token::BadRequest, /invalid_grant/\n          end\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-rack-oauth2-2.2.1-r2.apk/ruby3.2-rack-oauth2-2.2.1-r2/usr/lib/ruby/gems/3.2.0/gems/rack-oauth2-2.2.1/spec/rack/oauth2/server/extension/pkce_spec.rb"
                },
                "region": {
                  "startLine": 97,
                  "startColumn": 11,
                  "endLine": 97,
                  "endColumn": 19,
                  "snippet": {
                    "text": "\n        context 'when code_challenge is nil' do\n          it do\n            expect do\n              subject.verify_code_verifier! nil\n            end.to raise_error Rack::OAuth2::Server::Token::BadRequest, /invalid_grant/\n          end\n",
                    "rendered": {
                      "text": "\n        context 'when code_challenge is nil' do\n          it do\n            expect do\n              subject.verify_code_verifier! nil\n            end.to raise_error Rack::OAuth2::Server::Token::BadRequest, /invalid_grant/\n          end\n",
                      "markdown": "`\n        context 'when code_challenge is nil' do\n          it do\n            expect do\n              subject.verify_code_verifier! nil\n            end.to raise_error Rack::OAuth2::Server::Token::BadRequest, /invalid_grant/\n          end\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-rack-oauth2-2.2.1-r2.apk/ruby3.2-rack-oauth2-2.2.1-r2/usr/lib/ruby/gems/3.2.0/gems/rack-oauth2-2.2.1/spec/rack/oauth2/server/extension/pkce_spec.rb"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 11,
                  "endLine": 89,
                  "endColumn": 19,
                  "snippet": {
                    "text": "\n        context 'when wrong code_challenge is blank' do\n          it do\n            expect do\n              subject.verify_code_verifier! 'wrong'\n            end.to raise_error Rack::OAuth2::Server::Token::BadRequest, /invalid_grant/\n          end\n",
                    "rendered": {
                      "text": "\n        context 'when wrong code_challenge is blank' do\n          it do\n            expect do\n              subject.verify_code_verifier! 'wrong'\n            end.to raise_error Rack::OAuth2::Server::Token::BadRequest, /invalid_grant/\n          end\n",
                      "markdown": "`\n        context 'when wrong code_challenge is blank' do\n          it do\n            expect do\n              subject.verify_code_verifier! 'wrong'\n            end.to raise_error Rack::OAuth2::Server::Token::BadRequest, /invalid_grant/\n          end\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-rack-oauth2-2.2.1-r2.apk/ruby3.2-rack-oauth2-2.2.1-r2/usr/lib/ruby/gems/3.2.0/gems/rack-oauth2-2.2.1/spec/rack/oauth2/server/extension/pkce_spec.rb"
                },
                "region": {
                  "startLine": 81,
                  "startColumn": 11,
                  "endLine": 81,
                  "endColumn": 19,
                  "snippet": {
                    "text": "\n        context 'when collect code_challenge is given' do\n          it do\n            expect do\n              subject.verify_code_verifier! code_challenge\n            end.not_to raise_error\n          end\n",
                    "rendered": {
                      "text": "\n        context 'when collect code_challenge is given' do\n          it do\n            expect do\n              subject.verify_code_verifier! code_challenge\n            end.not_to raise_error\n          end\n",
                      "markdown": "`\n        context 'when collect code_challenge is given' do\n          it do\n            expect do\n              subject.verify_code_verifier! code_challenge\n            end.not_to raise_error\n          end\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-rack-oauth2-2.2.1-r2.apk/ruby3.2-rack-oauth2-2.2.1-r2/usr/lib/ruby/gems/3.2.0/gems/rack-oauth2-2.2.1/spec/rack/oauth2/server/extension/pkce_spec.rb"
                },
                "region": {
                  "startLine": 73,
                  "startColumn": 11,
                  "endLine": 73,
                  "endColumn": 19,
                  "snippet": {
                    "text": "      describe '#verify_code_verifier!' do\n        context 'when code_verifier is given with code_challenge_method=plain' do\n          it do\n            expect do\n              subject.verify_code_verifier! code_verifier, :plain\n            end.not_to raise_error\n          end\n",
                    "rendered": {
                      "text": "      describe '#verify_code_verifier!' do\n        context 'when code_verifier is given with code_challenge_method=plain' do\n          it do\n            expect do\n              subject.verify_code_verifier! code_verifier, :plain\n            end.not_to raise_error\n          end\n",
                      "markdown": "`      describe '#verify_code_verifier!' do\n        context 'when code_verifier is given with code_challenge_method=plain' do\n          it do\n            expect do\n              subject.verify_code_verifier! code_verifier, :plain\n            end.not_to raise_error\n          end\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-rack-oauth2-2.2.1-r2.apk/ruby3.2-rack-oauth2-2.2.1-r2/usr/lib/ruby/gems/3.2.0/gems/rack-oauth2-2.2.1/spec/rack/oauth2/server/authorize_spec.rb"
                },
                "region": {
                  "startLine": 184,
                  "startColumn": 7,
                  "endLine": 184,
                  "endColumn": 15,
                  "snippet": {
                    "text": "    describe 'token code id_token' do\n      let(:response_type) { 'token%20code%20id_token' }\n      it do\n        expect do\n          app.send(:response_type_for, request)\n        end.to raise_error bad_request\n      end\n",
                    "rendered": {
                      "text": "    describe 'token code id_token' do\n      let(:response_type) { 'token%20code%20id_token' }\n      it do\n        expect do\n          app.send(:response_type_for, request)\n        end.to raise_error bad_request\n      end\n",
                      "markdown": "`    describe 'token code id_token' do\n      let(:response_type) { 'token%20code%20id_token' }\n      it do\n        expect do\n          app.send(:response_type_for, request)\n        end.to raise_error bad_request\n      end\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-rack-oauth2-2.2.1-r2.apk/ruby3.2-rack-oauth2-2.2.1-r2/usr/lib/ruby/gems/3.2.0/gems/rack-oauth2-2.2.1/spec/rack/oauth2/server/authorize_spec.rb"
                },
                "region": {
                  "startLine": 160,
                  "startColumn": 64,
                  "endLine": 160,
                  "endColumn": 69,
                  "snippet": {
                    "text": "    let(:env) do\n      Rack::MockRequest.env_for(\"/authorize?response_type=#{response_type}&client_id=client\")\n    end\n    let(:request) { Rack::OAuth2::Server::Authorize::Request.new env }\n    its(:extensions) { should == [Rack::OAuth2::Server::Authorize::Extension::CodeAndToken] }\n\n    describe 'code token' do\n",
                    "rendered": {
                      "text": "    let(:env) do\n      Rack::MockRequest.env_for(\"/authorize?response_type=#{response_type}&client_id=client\")\n    end\n    let(:request) { Rack::OAuth2::Server::Authorize::Request.new env }\n    its(:extensions) { should == [Rack::OAuth2::Server::Authorize::Extension::CodeAndToken] }\n\n    describe 'code token' do\n",
                      "markdown": "`    let(:env) do\n      Rack::MockRequest.env_for(\"/authorize?response_type=#{response_type}&client_id=client\")\n    end\n    let(:request) { Rack::OAuth2::Server::Authorize::Request.new env }\n    its(:extensions) { should == [Rack::OAuth2::Server::Authorize::Extension::CodeAndToken] }\n\n    describe 'code token' do\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-rack-oauth2-2.2.1-r2.apk/ruby3.2-rack-oauth2-2.2.1-r2/usr/lib/ruby/gems/3.2.0/gems/rack-oauth2-2.2.1/spec/rack/oauth2/server/authorize_spec.rb"
                },
                "region": {
                  "startLine": 142,
                  "startColumn": 13,
                  "endLine": 142,
                  "endColumn": 21,
                  "snippet": {
                    "text": "          context 'when more than 2' do\n            let(:pre_registered) { [redirect_uri, 'http://client.example.com/callback2'] }\n            it do\n              expect do\n                request.verify_redirect_uri!(pre_registered)\n              end.to raise_error bad_request\n            end\n",
                    "rendered": {
                      "text": "          context 'when more than 2' do\n            let(:pre_registered) { [redirect_uri, 'http://client.example.com/callback2'] }\n            it do\n              expect do\n                request.verify_redirect_uri!(pre_registered)\n              end.to raise_error bad_request\n            end\n",
                      "markdown": "`          context 'when more than 2' do\n            let(:pre_registered) { [redirect_uri, 'http://client.example.com/callback2'] }\n            it do\n              expect do\n                request.verify_redirect_uri!(pre_registered)\n              end.to raise_error bad_request\n            end\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-rack-oauth2-2.2.1-r2.apk/ruby3.2-rack-oauth2-2.2.1-r2/usr/lib/ruby/gems/3.2.0/gems/rack-oauth2-2.2.1/spec/rack/oauth2/server/authorize_spec.rb"
                },
                "region": {
                  "startLine": 126,
                  "startColumn": 15,
                  "endLine": 126,
                  "endColumn": 23,
                  "snippet": {
                    "text": "\n            context 'when partial match allowed' do\n              it do\n                expect do\n                  request.verify_redirect_uri!(pre_registered, :allow_partial_match)\n                end.to raise_error bad_request\n              end\n",
                    "rendered": {
                      "text": "\n            context 'when partial match allowed' do\n              it do\n                expect do\n                  request.verify_redirect_uri!(pre_registered, :allow_partial_match)\n                end.to raise_error bad_request\n              end\n",
                      "markdown": "`\n            context 'when partial match allowed' do\n              it do\n                expect do\n                  request.verify_redirect_uri!(pre_registered, :allow_partial_match)\n                end.to raise_error bad_request\n              end\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-rack-oauth2-2.2.1-r2.apk/ruby3.2-rack-oauth2-2.2.1-r2/usr/lib/ruby/gems/3.2.0/gems/rack-oauth2-2.2.1/spec/rack/oauth2/server/authorize_spec.rb"
                },
                "region": {
                  "startLine": 104,
                  "startColumn": 9,
                  "endLine": 104,
                  "endColumn": 17,
                  "snippet": {
                    "text": "      context 'when invalid redirect_uri is given' do\n        let(:pre_registered) { 'http://client2.example.com' }\n        it do\n          expect do\n            request.verify_redirect_uri!(pre_registered)\n          end.to raise_error bad_request\n        end\n",
                    "rendered": {
                      "text": "      context 'when invalid redirect_uri is given' do\n        let(:pre_registered) { 'http://client2.example.com' }\n        it do\n          expect do\n            request.verify_redirect_uri!(pre_registered)\n          end.to raise_error bad_request\n        end\n",
                      "markdown": "`      context 'when invalid redirect_uri is given' do\n        let(:pre_registered) { 'http://client2.example.com' }\n        it do\n          expect do\n            request.verify_redirect_uri!(pre_registered)\n          end.to raise_error bad_request\n        end\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-rack-oauth2-2.2.1-r2.apk/ruby3.2-rack-oauth2-2.2.1-r2/usr/lib/ruby/gems/3.2.0/gems/rack-oauth2-2.2.1/spec/rack/oauth2/server/authorize_spec.rb"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 11,
                  "endLine": 94,
                  "endColumn": 19,
                  "snippet": {
                    "text": "\n        context 'otherwise' do\n          it do\n            expect do\n              request.verify_redirect_uri!(pre_registered)\n            end.to raise_error bad_request\n          end\n",
                    "rendered": {
                      "text": "\n        context 'otherwise' do\n          it do\n            expect do\n              request.verify_redirect_uri!(pre_registered)\n            end.to raise_error bad_request\n          end\n",
                      "markdown": "`\n        context 'otherwise' do\n          it do\n            expect do\n              request.verify_redirect_uri!(pre_registered)\n            end.to raise_error bad_request\n          end\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-rack-oauth2-2.2.1-r2.apk/ruby3.2-rack-oauth2-2.2.1-r2/usr/lib/ruby/gems/3.2.0/gems/rack-oauth2-2.2.1/spec/rack/oauth2/server/authorize_spec.rb"
                },
                "region": {
                  "startLine": 69,
                  "startColumn": 11,
                  "endLine": 69,
                  "endColumn": 19,
                  "snippet": {
                    "text": "            ]\n          end\n          it do\n            expect do\n              request.verify_redirect_uri!(pre_registered)\n            end.to raise_error bad_request\n          end\n",
                    "rendered": {
                      "text": "            ]\n          end\n          it do\n            expect do\n              request.verify_redirect_uri!(pre_registered)\n            end.to raise_error bad_request\n          end\n",
                      "markdown": "`            ]\n          end\n          it do\n            expect do\n              request.verify_redirect_uri!(pre_registered)\n            end.to raise_error bad_request\n          end\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-rack-oauth2-2.2.1-r2.apk/ruby3.2-rack-oauth2-2.2.1-r2/usr/lib/ruby/gems/3.2.0/gems/rack-oauth2-2.2.1/spec/rack/oauth2/server/authorize_spec.rb"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 64,
                  "endLine": 44,
                  "endColumn": 69,
                  "snippet": {
                    "text": "\n  describe Rack::OAuth2::Server::Authorize::Request do\n    let(:env)     { Rack::MockRequest.env_for(\"/authorize?client_id=client&redirect_uri=#{redirect_uri}\") }\n    let(:request) { Rack::OAuth2::Server::Authorize::Request.new env }\n\n    describe '#varified_redirect_uri' do\n      context 'when an Array of pre-registered URIs are given' do\n",
                    "rendered": {
                      "text": "\n  describe Rack::OAuth2::Server::Authorize::Request do\n    let(:env)     { Rack::MockRequest.env_for(\"/authorize?client_id=client&redirect_uri=#{redirect_uri}\") }\n    let(:request) { Rack::OAuth2::Server::Authorize::Request.new env }\n\n    describe '#varified_redirect_uri' do\n      context 'when an Array of pre-registered URIs are given' do\n",
                      "markdown": "`\n  describe Rack::OAuth2::Server::Authorize::Request do\n    let(:env)     { Rack::MockRequest.env_for(\"/authorize?client_id=client&redirect_uri=#{redirect_uri}\") }\n    let(:request) { Rack::OAuth2::Server::Authorize::Request.new env }\n\n    describe '#varified_redirect_uri' do\n      context 'when an Array of pre-registered URIs are given' do\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-rack-oauth2-2.2.1-r2.apk/ruby3.2-rack-oauth2-2.2.1-r2/usr/lib/ruby/gems/3.2.0/gems/rack-oauth2-2.2.1/spec/rack/oauth2/server/authorize_spec.rb"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 5,
                  "endLine": 29,
                  "endColumn": 13,
                  "snippet": {
                    "text": "\n  context 'when unknown response_type is given' do\n    it do\n      expect { request.get \"/?response_type=unknown&client_id=client&redirect_uri=#{redirect_uri}\" }.to raise_error bad_request\n    end\n  end\n\n",
                    "rendered": {
                      "text": "\n  context 'when unknown response_type is given' do\n    it do\n      expect { request.get \"/?response_type=unknown&client_id=client&redirect_uri=#{redirect_uri}\" }.to raise_error bad_request\n    end\n  end\n\n",
                      "markdown": "`\n  context 'when unknown response_type is given' do\n    it do\n      expect { request.get \"/?response_type=unknown&client_id=client&redirect_uri=#{redirect_uri}\" }.to raise_error bad_request\n    end\n  end\n\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-rack-oauth2-2.2.1-r2.apk/ruby3.2-rack-oauth2-2.2.1-r2/usr/lib/ruby/gems/3.2.0/gems/rack-oauth2-2.2.1/spec/rack/oauth2/server/authorize_spec.rb"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 5,
                  "endLine": 23,
                  "endColumn": 13,
                  "snippet": {
                    "text": "\n  context 'when client_id is missing' do\n    it do\n      expect { request.get \"/?response_type=code&redirect_uri=#{redirect_uri}\" }.to raise_error bad_request\n    end\n  end\n\n",
                    "rendered": {
                      "text": "\n  context 'when client_id is missing' do\n    it do\n      expect { request.get \"/?response_type=code&redirect_uri=#{redirect_uri}\" }.to raise_error bad_request\n    end\n  end\n\n",
                      "markdown": "`\n  context 'when client_id is missing' do\n    it do\n      expect { request.get \"/?response_type=code&redirect_uri=#{redirect_uri}\" }.to raise_error bad_request\n    end\n  end\n\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-rack-oauth2-2.2.1-r2.apk/ruby3.2-rack-oauth2-2.2.1-r2/usr/lib/ruby/gems/3.2.0/gems/rack-oauth2-2.2.1/spec/rack/oauth2/server/authorize_spec.rb"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 5,
                  "endLine": 17,
                  "endColumn": 13,
                  "snippet": {
                    "text": "\n  context 'when redirect_uri is missing' do\n    it do\n      expect { request.get \"/?response_type=code&client_id=client\" }.not_to raise_error\n    end\n  end\n\n",
                    "rendered": {
                      "text": "\n  context 'when redirect_uri is missing' do\n    it do\n      expect { request.get \"/?response_type=code&client_id=client\" }.not_to raise_error\n    end\n  end\n\n",
                      "markdown": "`\n  context 'when redirect_uri is missing' do\n    it do\n      expect { request.get \"/?response_type=code&client_id=client\" }.not_to raise_error\n    end\n  end\n\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-rack-oauth2-2.2.1-r2.apk/ruby3.2-rack-oauth2-2.2.1-r2/usr/lib/ruby/gems/3.2.0/gems/rack-oauth2-2.2.1/spec/rack/oauth2/server/authorize_spec.rb"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 5,
                  "endLine": 11,
                  "endColumn": 13,
                  "snippet": {
                    "text": "\n  context 'when response_type is missing' do\n    it do\n      expect { request.get \"/?client_id=client&redirect_uri=#{redirect_uri}\" }.to raise_error bad_request\n    end\n  end\n\n",
                    "rendered": {
                      "text": "\n  context 'when response_type is missing' do\n    it do\n      expect { request.get \"/?client_id=client&redirect_uri=#{redirect_uri}\" }.to raise_error bad_request\n    end\n  end\n\n",
                      "markdown": "`\n  context 'when response_type is missing' do\n    it do\n      expect { request.get \"/?client_id=client&redirect_uri=#{redirect_uri}\" }.to raise_error bad_request\n    end\n  end\n\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-rack-oauth2-2.2.1-r2.apk/ruby3.2-rack-oauth2-2.2.1-r2/usr/lib/ruby/gems/3.2.0/gems/rack-oauth2-2.2.1/spec/rack/oauth2/server/authorize/token_spec.rb"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 30,
                  "endLine": 7,
                  "endColumn": 35,
                  "snippet": {
                    "text": "  let(:request)      { Rack::MockRequest.new app }\n  let(:redirect_uri) { 'http://client.example.com/callback' }\n  let(:access_token) { 'access_token' }\n  let(:response)     { request.get(\"/?response_type=token&client_id=client&redirect_uri=#{redirect_uri}&state=state\") }\n\n  context \"when approved\" do\n    subject { response }\n",
                    "rendered": {
                      "text": "  let(:request)      { Rack::MockRequest.new app }\n  let(:redirect_uri) { 'http://client.example.com/callback' }\n  let(:access_token) { 'access_token' }\n  let(:response)     { request.get(\"/?response_type=token&client_id=client&redirect_uri=#{redirect_uri}&state=state\") }\n\n  context \"when approved\" do\n    subject { response }\n",
                      "markdown": "`  let(:request)      { Rack::MockRequest.new app }\n  let(:redirect_uri) { 'http://client.example.com/callback' }\n  let(:access_token) { 'access_token' }\n  let(:response)     { request.get(\"/?response_type=token&client_id=client&redirect_uri=#{redirect_uri}&state=state\") }\n\n  context \"when approved\" do\n    subject { response }\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-rack-oauth2-2.2.1-r2.apk/ruby3.2-rack-oauth2-2.2.1-r2/usr/lib/ruby/gems/3.2.0/gems/rack-oauth2-2.2.1/spec/rack/oauth2/server/authorize/token_spec.rb"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 7,
                  "endLine": 52,
                  "endColumn": 15,
                  "snippet": {
                    "text": "        end\n      end\n      it do\n        expect { response }.to raise_error AttrRequired::AttrMissing\n      end\n    end\n  end\n",
                    "rendered": {
                      "text": "        end\n      end\n      it do\n        expect { response }.to raise_error AttrRequired::AttrMissing\n      end\n    end\n  end\n",
                      "markdown": "`        end\n      end\n      it do\n        expect { response }.to raise_error AttrRequired::AttrMissing\n      end\n    end\n  end\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-rack-oauth2-2.2.1-r2.apk/ruby3.2-rack-oauth2-2.2.1-r2/usr/lib/ruby/gems/3.2.0/gems/rack-oauth2-2.2.1/spec/rack/oauth2/server/authorize/token_spec.rb"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 7,
                  "endLine": 40,
                  "endColumn": 15,
                  "snippet": {
                    "text": "        end\n      end\n      it do\n        expect { response }.to raise_error AttrRequired::AttrMissing\n      end\n    end\n\n",
                    "rendered": {
                      "text": "        end\n      end\n      it do\n        expect { response }.to raise_error AttrRequired::AttrMissing\n      end\n    end\n\n",
                      "markdown": "`        end\n      end\n      it do\n        expect { response }.to raise_error AttrRequired::AttrMissing\n      end\n    end\n\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-rack-oauth2-2.2.1-r2.apk/ruby3.2-rack-oauth2-2.2.1-r2/usr/lib/ruby/gems/3.2.0/gems/rack-oauth2-2.2.1/spec/rack/oauth2/server/authorize/extensions/code_and"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 11,
                  "endLine": 10,
                  "endColumn": 16,
                  "snippet": {
                    "text": "  let(:access_token)       { 'access_token' }\n  let(:authorization_code) { 'authorization_code' }\n  let(:response) do\n    request.get(\"/?response_type=code%20token&client_id=client&redirect_uri=#{redirect_uri}\")\n  end\n\n  context \"when approved\" do\n",
                    "rendered": {
                      "text": "  let(:access_token)       { 'access_token' }\n  let(:authorization_code) { 'authorization_code' }\n  let(:response) do\n    request.get(\"/?response_type=code%20token&client_id=client&redirect_uri=#{redirect_uri}\")\n  end\n\n  context \"when approved\" do\n",
                      "markdown": "`  let(:access_token)       { 'access_token' }\n  let(:authorization_code) { 'authorization_code' }\n  let(:response) do\n    request.get(\"/?response_type=code%20token&client_id=client&redirect_uri=#{redirect_uri}\")\n  end\n\n  context \"when approved\" do\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-rack-oauth2-2.2.1-r2.apk/ruby3.2-rack-oauth2-2.2.1-r2/usr/lib/ruby/gems/3.2.0/gems/rack-oauth2-2.2.1/spec/rack/oauth2/access_token_spec.rb"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 5,
                  "endLine": 42,
                  "endColumn": 13,
                  "snippet": {
                    "text": "\n  context 'otherwise' do\n    it do\n      expect do\n        Rack::OAuth2::AccessToken::Bearer.new(\n          access_token: 'access_token'\n        )\n",
                    "rendered": {
                      "text": "\n  context 'otherwise' do\n    it do\n      expect do\n        Rack::OAuth2::AccessToken::Bearer.new(\n          access_token: 'access_token'\n        )\n",
                      "markdown": "`\n  context 'otherwise' do\n    it do\n      expect do\n        Rack::OAuth2::AccessToken::Bearer.new(\n          access_token: 'access_token'\n        )\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-rack-oauth2-2.2.1-r2.apk/ruby3.2-rack-oauth2-2.2.1-r2/usr/lib/ruby/gems/3.2.0/gems/rack-oauth2-2.2.1/spec/rack/oauth2/access_token_spec.rb"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 5,
                  "endLine": 30,
                  "endColumn": 13,
                  "snippet": {
                    "text": "\n  context 'when access_token is missing' do\n    it do\n      expect do\n        Rack::OAuth2::AccessToken::Bearer.new(\n          refresh_token: 'refresh_token',\n          expires_in: 3600,\n",
                    "rendered": {
                      "text": "\n  context 'when access_token is missing' do\n    it do\n      expect do\n        Rack::OAuth2::AccessToken::Bearer.new(\n          refresh_token: 'refresh_token',\n          expires_in: 3600,\n",
                      "markdown": "`\n  context 'when access_token is missing' do\n    it do\n      expect do\n        Rack::OAuth2::AccessToken::Bearer.new(\n          refresh_token: 'refresh_token',\n          expires_in: 3600,\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-rack-oauth2-2.2.1-r2.apk/ruby3.2-rack-oauth2-2.2.1-r2/usr/lib/ruby/gems/3.2.0/gems/rack-oauth2-2.2.1/lib/rack/oauth2/util.rb"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 10,
                  "endLine": 20,
                  "endColumn": 16,
                  "snippet": {
                    "text": "        end\n\n        def urlsafe_base64_encode(text)\n          Base64.urlsafe_encode64(text, padding: false)\n        end\n\n        def compact_hash(hash)\n",
                    "rendered": {
                      "text": "        end\n\n        def urlsafe_base64_encode(text)\n          Base64.urlsafe_encode64(text, padding: false)\n        end\n\n        def compact_hash(hash)\n",
                      "markdown": "`        end\n\n        def urlsafe_base64_encode(text)\n          Base64.urlsafe_encode64(text, padding: false)\n        end\n\n        def compact_hash(hash)\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-rack-oauth2-2.2.1-r2.apk/ruby3.2-rack-oauth2-2.2.1-r2/usr/lib/ruby/gems/3.2.0/gems/rack-oauth2-2.2.1/lib/rack/oauth2/util.rb"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 10,
                  "endLine": 16,
                  "endColumn": 16,
                  "snippet": {
                    "text": "        end\n\n        def base64_encode(text)\n          Base64.encode64(text).delete(\"\\n\")\n        end\n\n        def urlsafe_base64_encode(text)\n",
                    "rendered": {
                      "text": "        end\n\n        def base64_encode(text)\n          Base64.encode64(text).delete(\"\\n\")\n        end\n\n        def urlsafe_base64_encode(text)\n",
                      "markdown": "`        end\n\n        def base64_encode(text)\n          Base64.encode64(text).delete(\"\\n\")\n        end\n\n        def urlsafe_base64_encode(text)\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-rack-oauth2-2.2.1-r2.apk/ruby3.2-rack-oauth2-2.2.1-r2/usr/lib/ruby/gems/3.2.0/gems/rack-oauth2-2.2.1/lib/rack/oauth2/util.rb"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 9,
                  "endLine": 1,
                  "endColumn": 15,
                  "snippet": {
                    "text": "require 'base64'\n\nmodule Rack\n  module OAuth2\n",
                    "rendered": {
                      "text": "require 'base64'\n\nmodule Rack\n  module OAuth2\n",
                      "markdown": "`require 'base64'\n\nmodule Rack\n  module OAuth2\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-rack-oauth2-2.2.1-r2.apk/ruby3.2-rack-oauth2-2.2.1-r2/usr/lib/ruby/gems/3.2.0/gems/rack-oauth2-2.2.1/lib/rack/oauth2/client.rb"
                },
                "region": {
                  "startLine": 112,
                  "startColumn": 21,
                  "endLine": 112,
                  "endColumn": 27,
                  "snippet": {
                    "text": "        params.merge! options\n\n        handle_revocation_response do\n          http_client.post(\n            absolute_uri_for(revocation_endpoint),\n            Util.compact_hash(params),\n            headers\n",
                    "rendered": {
                      "text": "        params.merge! options\n\n        handle_revocation_response do\n          http_client.post(\n            absolute_uri_for(revocation_endpoint),\n            Util.compact_hash(params),\n            headers\n",
                      "markdown": "`        params.merge! options\n\n        handle_revocation_response do\n          http_client.post(\n            absolute_uri_for(revocation_endpoint),\n            Util.compact_hash(params),\n            headers\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-rack-oauth2-2.2.1-r2.apk/ruby3.2-rack-oauth2-2.2.1-r2/usr/lib/ruby/gems/3.2.0/gems/rack-oauth2-2.2.1/lib/rack/oauth2/client.rb"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 21,
                  "endLine": 77,
                  "endColumn": 27,
                  "snippet": {
                    "text": "        params.merge! @grant.as_json\n        params.merge! options\n        handle_response do\n          http_client.post(\n            absolute_uri_for(token_endpoint),\n            Util.compact_hash(params),\n            headers\n",
                    "rendered": {
                      "text": "        params.merge! @grant.as_json\n        params.merge! options\n        handle_response do\n          http_client.post(\n            absolute_uri_for(token_endpoint),\n            Util.compact_hash(params),\n            headers\n",
                      "markdown": "`        params.merge! @grant.as_json\n        params.merge! options\n        handle_response do\n          http_client.post(\n            absolute_uri_for(token_endpoint),\n            Util.compact_hash(params),\n            headers\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-rack-oauth2-2.2.1-r2.apk/ruby3.2-rack-oauth2-2.2.1-r2/usr/lib/ruby/gems/3.2.0/gems/rack-oauth2-2.2.1/lib/rack/oauth2/client.rb"
                },
                "region": {
                  "startLine": 183,
                  "startColumn": 39,
                  "endLine": 183,
                  "endColumn": 50,
                  "snippet": {
                    "text": "          params.merge!(\n            client_id: identifier\n          )\n          http_client.ssl.client_key = private_key\n          http_client.ssl.client_cert = certificate\n        else\n          params.merge!(\n",
                    "rendered": {
                      "text": "          params.merge!(\n            client_id: identifier\n          )\n          http_client.ssl.client_key = private_key\n          http_client.ssl.client_cert = certificate\n        else\n          params.merge!(\n",
                      "markdown": "`          params.merge!(\n            client_id: identifier\n          )\n          http_client.ssl.client_key = private_key\n          http_client.ssl.client_cert = certificate\n        else\n          params.merge!(\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-rack-oauth2-2.2.1-r2.apk/ruby3.2-rack-oauth2-2.2.1-r2/usr/lib/ruby/gems/3.2.0/gems/rack-oauth2-2.2.1/lib/rack/oauth2/client.rb"
                },
                "region": {
                  "startLine": 173,
                  "startColumn": 19,
                  "endLine": 173,
                  "endColumn": 30,
                  "snippet": {
                    "text": "              jti: SecureRandom.hex(16),\n              iat: Time.now,\n              exp: 3.minutes.from_now\n            ).sign(private_key || secret).to_s\n          end\n        when :saml2_bearer\n          params.merge!(\n",
                    "rendered": {
                      "text": "              jti: SecureRandom.hex(16),\n              iat: Time.now,\n              exp: 3.minutes.from_now\n            ).sign(private_key || secret).to_s\n          end\n        when :saml2_bearer\n          params.merge!(\n",
                      "markdown": "`              jti: SecureRandom.hex(16),\n              iat: Time.now,\n              exp: 3.minutes.from_now\n            ).sign(private_key || secret).to_s\n          end\n        when :saml2_bearer\n          params.merge!(\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-rack-oauth2-2.2.1-r2.apk/ruby3.2-rack-oauth2-2.2.1-r2/usr/lib/ruby/gems/3.2.0/gems/rack-oauth2-2.2.1/lib/rack/oauth2/client.rb"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 10,
                  "endLine": 38,
                  "endColumn": 18,
                  "snippet": {
                    "text": "      def resource_owner_credentials=(credentials)\n        @grant = Grant::Password.new(\n          username: credentials.first,\n          password: credentials.last\n        )\n      end\n\n",
                    "rendered": {
                      "text": "      def resource_owner_credentials=(credentials)\n        @grant = Grant::Password.new(\n          username: credentials.first,\n          password: credentials.last\n        )\n      end\n\n",
                      "markdown": "`      def resource_owner_credentials=(credentials)\n        @grant = Grant::Password.new(\n          username: credentials.first,\n          password: credentials.last\n        )\n      end\n\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-rack-oauth2-2.2.1-r2.apk/ruby3.2-rack-oauth2-2.2.1-r2/usr/lib/ruby/gems/3.2.0/gems/rack-oauth2-2.2.1/lib/rack/oauth2/client.rb"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 24,
                  "endLine": 36,
                  "endColumn": 32,
                  "snippet": {
                    "text": "      end\n\n      def resource_owner_credentials=(credentials)\n        @grant = Grant::Password.new(\n          username: credentials.first,\n          password: credentials.last\n        )\n",
                    "rendered": {
                      "text": "      end\n\n      def resource_owner_credentials=(credentials)\n        @grant = Grant::Password.new(\n          username: credentials.first,\n          password: credentials.last\n        )\n",
                      "markdown": "`      end\n\n      def resource_owner_credentials=(credentials)\n        @grant = Grant::Password.new(\n          username: credentials.first,\n          password: credentials.last\n        )\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-rack-oauth2-2.2.1-r2.apk/ruby3.2-rack-oauth2-2.2.1-r2/usr/lib/ruby/gems/3.2.0/gems/rack-oauth2-2.2.1/lib/rack/oauth2/client.rb"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 30,
                  "endLine": 6,
                  "endColumn": 41,
                  "snippet": {
                    "text": "    class Client\n      include AttrRequired, AttrOptional\n      attr_required :identifier\n      attr_optional :secret, :private_key, :certificate, :redirect_uri, :scheme, :host, :port, :authorization_endpoint, :token_endpoint, :revocation_endpoint\n\n      def initialize(attributes = {})\n        (required_attributes + optional_attributes).each do |key|\n",
                    "rendered": {
                      "text": "    class Client\n      include AttrRequired, AttrOptional\n      attr_required :identifier\n      attr_optional :secret, :private_key, :certificate, :redirect_uri, :scheme, :host, :port, :authorization_endpoint, :token_endpoint, :revocation_endpoint\n\n      def initialize(attributes = {})\n        (required_attributes + optional_attributes).each do |key|\n",
                      "markdown": "`    class Client\n      include AttrRequired, AttrOptional\n      attr_required :identifier\n      attr_optional :secret, :private_key, :certificate, :redirect_uri, :scheme, :host, :port, :authorization_endpoint, :token_endpoint, :revocation_endpoint\n\n      def initialize(attributes = {})\n        (required_attributes + optional_attributes).each do |key|\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-rack-oauth2-2.2.1-r2.apk/ruby3.2-rack-oauth2-2.2.1-r2/usr/lib/ruby/gems/3.2.0/gems/rack-oauth2-2.2.1/lib/rack/oauth2/client.rb"
                },
                "region": {
                  "startLine": 145,
                  "startColumn": 17,
                  "endLine": 145,
                  "endColumn": 23,
                  "snippet": {
                    "text": "\n        case client_auth_method\n        when :basic\n          cred = Base64.strict_encode64 [\n            Util.www_form_url_encode(identifier),\n            Util.www_form_url_encode(secret)\n          ].join(':')\n",
                    "rendered": {
                      "text": "\n        case client_auth_method\n        when :basic\n          cred = Base64.strict_encode64 [\n            Util.www_form_url_encode(identifier),\n            Util.www_form_url_encode(secret)\n          ].join(':')\n",
                      "markdown": "`\n        case client_auth_method\n        when :basic\n          cred = Base64.strict_encode64 [\n            Util.www_form_url_encode(identifier),\n            Util.www_form_url_encode(secret)\n          ].join(':')\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-rack-oauth2-2.2.1-r2.apk/ruby3.2-rack-oauth2-2.2.1-r2/usr/lib/ruby/gems/3.2.0/gems/rack-oauth2-2.2.1/lib/rack/oauth2/client/grant.rb"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 34,
                  "endLine": 31,
                  "endColumn": 42,
                  "snippet": {
                    "text": "end\n\nrequire 'rack/oauth2/client/grant/authorization_code'\nrequire 'rack/oauth2/client/grant/password'\nrequire 'rack/oauth2/client/grant/client_credentials'\nrequire 'rack/oauth2/client/grant/refresh_token'\nrequire 'rack/oauth2/client/grant/jwt_bearer'\n",
                    "rendered": {
                      "text": "end\n\nrequire 'rack/oauth2/client/grant/authorization_code'\nrequire 'rack/oauth2/client/grant/password'\nrequire 'rack/oauth2/client/grant/client_credentials'\nrequire 'rack/oauth2/client/grant/refresh_token'\nrequire 'rack/oauth2/client/grant/jwt_bearer'\n",
                      "markdown": "`end\n\nrequire 'rack/oauth2/client/grant/authorization_code'\nrequire 'rack/oauth2/client/grant/password'\nrequire 'rack/oauth2/client/grant/client_credentials'\nrequire 'rack/oauth2/client/grant/refresh_token'\nrequire 'rack/oauth2/client/grant/jwt_bearer'\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-rack-oauth2-2.2.1-r2.apk/ruby3.2-rack-oauth2-2.2.1-r2/usr/lib/ruby/gems/3.2.0/gems/rack-oauth2-2.2.1/README.rdoc"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 50,
                  "endLine": 34,
                  "endColumn": 58,
                  "snippet": {
                    "text": "Authorization Request (request_type: 'code' and 'token')\nhttps://gist.github.com/862393\n\nToken Request (grant_type: 'client_credentials', 'password', 'authorization_code' and 'refresh_token')\nhttps://gist.github.com/883541\n\nResource Request (request both for resource owner resource and for client resource)\n",
                    "rendered": {
                      "text": "Authorization Request (request_type: 'code' and 'token')\nhttps://gist.github.com/862393\n\nToken Request (grant_type: 'client_credentials', 'password', 'authorization_code' and 'refresh_token')\nhttps://gist.github.com/883541\n\nResource Request (request both for resource owner resource and for client resource)\n",
                      "markdown": "`Authorization Request (request_type: 'code' and 'token')\nhttps://gist.github.com/862393\n\nToken Request (grant_type: 'client_credentials', 'password', 'authorization_code' and 'refresh_token')\nhttps://gist.github.com/883541\n\nResource Request (request both for resource owner resource and for client resource)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-rack-oauth2-2.2.1-r2.apk/ruby3.2-rack-oauth2-2.2.1-r2/usr/lib/ruby/gems/3.2.0/gems/rack-oauth2-2.2.1/spec/rack/oauth2/server/token/error_spec.rb"
                },
                "region": {
                  "startLine": 69,
                  "startColumn": 9,
                  "endLine": 69,
                  "endColumn": 17,
                  "snippet": {
                    "text": "    else\n      describe method do\n        it \"should raise Rack::OAuth2::Server::Token::BadRequest with error = :#{error_code}\" do\n          expect { request.send method }.to raise_error(bad_request) { |error|\n            error.error.should       == error_code\n            error.description.should == default_description[error_code]\n          }\n",
                    "rendered": {
                      "text": "    else\n      describe method do\n        it \"should raise Rack::OAuth2::Server::Token::BadRequest with error = :#{error_code}\" do\n          expect { request.send method }.to raise_error(bad_request) { |error|\n            error.error.should       == error_code\n            error.description.should == default_description[error_code]\n          }\n",
                      "markdown": "`    else\n      describe method do\n        it \"should raise Rack::OAuth2::Server::Token::BadRequest with error = :#{error_code}\" do\n          expect { request.send method }.to raise_error(bad_request) { |error|\n            error.error.should       == error_code\n            error.description.should == default_description[error_code]\n          }\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-rack-oauth2-2.2.1-r2.apk/ruby3.2-rack-oauth2-2.2.1-r2/usr/lib/ruby/gems/3.2.0/gems/rack-oauth2-2.2.1/spec/rack/oauth2/server/token/error_spec.rb"
                },
                "region": {
                  "startLine": 60,
                  "startColumn": 9,
                  "endLine": 60,
                  "endColumn": 17,
                  "snippet": {
                    "text": "    when :invalid_client\n      describe method do\n        it \"should raise Rack::OAuth2::Server::Token::Unauthorized with error = :#{error_code}\" do\n          expect { request.send method }.to raise_error(unauthorized) { |error|\n            error.error.should       == error_code\n            error.description.should == default_description[error_code]\n          }\n",
                    "rendered": {
                      "text": "    when :invalid_client\n      describe method do\n        it \"should raise Rack::OAuth2::Server::Token::Unauthorized with error = :#{error_code}\" do\n          expect { request.send method }.to raise_error(unauthorized) { |error|\n            error.error.should       == error_code\n            error.description.should == default_description[error_code]\n          }\n",
                      "markdown": "`    when :invalid_client\n      describe method do\n        it \"should raise Rack::OAuth2::Server::Token::Unauthorized with error = :#{error_code}\" do\n          expect { request.send method }.to raise_error(unauthorized) { |error|\n            error.error.should       == error_code\n            error.description.should == default_description[error_code]\n          }\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-rack-oauth2-2.2.1-r2.apk/ruby3.2-rack-oauth2-2.2.1-r2/usr/lib/ruby/gems/3.2.0/gems/rack-oauth2-2.2.1/spec/rack/oauth2/server/token/error_spec.rb"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 5,
                  "endLine": 50,
                  "endColumn": 13,
                  "snippet": {
                    "text": "\n  describe 'unauthorized!' do\n    it do\n      expect { request.unauthorized! :invalid_client }.to raise_error unauthorized\n    end\n  end\n\n",
                    "rendered": {
                      "text": "\n  describe 'unauthorized!' do\n    it do\n      expect { request.unauthorized! :invalid_client }.to raise_error unauthorized\n    end\n  end\n\n",
                      "markdown": "`\n  describe 'unauthorized!' do\n    it do\n      expect { request.unauthorized! :invalid_client }.to raise_error unauthorized\n    end\n  end\n\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-rack-oauth2-2.2.1-r2.apk/ruby3.2-rack-oauth2-2.2.1-r2/usr/lib/ruby/gems/3.2.0/gems/rack-oauth2-2.2.1/spec/rack/oauth2/server/token/error_spec.rb"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 5,
                  "endLine": 44,
                  "endColumn": 13,
                  "snippet": {
                    "text": "\n  describe 'bad_request!' do\n    it do\n      expect { request.bad_request! :invalid_request }.to raise_error bad_request\n    end\n  end\n\n",
                    "rendered": {
                      "text": "\n  describe 'bad_request!' do\n    it do\n      expect { request.bad_request! :invalid_request }.to raise_error bad_request\n    end\n  end\n\n",
                      "markdown": "`\n  describe 'bad_request!' do\n    it do\n      expect { request.bad_request! :invalid_request }.to raise_error bad_request\n    end\n  end\n\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-rack-oauth2-2.2.1-r2.apk/ruby3.2-rack-oauth2-2.2.1-r2/usr/lib/ruby/gems/3.2.0/gems/rack-oauth2-2.2.1/spec/rack/oauth2/server/token/error_spec.rb"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 70,
                  "endLine": 40,
                  "endColumn": 75,
                  "snippet": {
                    "text": "  let(:redirect_uri)        { 'http://client.example.com/callback' }\n  let(:default_description) { Rack::OAuth2::Server::Token::ErrorMethods::DEFAULT_DESCRIPTION }\n  let(:env)                 { Rack::MockRequest.env_for(\"/authorize?client_id=client_id\") }\n  let(:request)             { Rack::OAuth2::Server::Token::Request.new env }\n\n  describe 'bad_request!' do\n    it do\n",
                    "rendered": {
                      "text": "  let(:redirect_uri)        { 'http://client.example.com/callback' }\n  let(:default_description) { Rack::OAuth2::Server::Token::ErrorMethods::DEFAULT_DESCRIPTION }\n  let(:env)                 { Rack::MockRequest.env_for(\"/authorize?client_id=client_id\") }\n  let(:request)             { Rack::OAuth2::Server::Token::Request.new env }\n\n  describe 'bad_request!' do\n    it do\n",
                      "markdown": "`  let(:redirect_uri)        { 'http://client.example.com/callback' }\n  let(:default_description) { Rack::OAuth2::Server::Token::ErrorMethods::DEFAULT_DESCRIPTION }\n  let(:env)                 { Rack::MockRequest.env_for(\"/authorize?client_id=client_id\") }\n  let(:request)             { Rack::OAuth2::Server::Token::Request.new env }\n\n  describe 'bad_request!' do\n    it do\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-rack-oauth2-2.2.1-r2.apk/ruby3.2-rack-oauth2-2.2.1-r2/usr/lib/ruby/gems/3.2.0/gems/rack-oauth2-2.2.1/spec/rack/oauth2/server/token/client_credentials_spec"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 13,
                  "endLine": 40,
                  "endColumn": 19,
                  "snippet": {
                    "text": "      ].join(':'))\n    end\n    subject do\n      request.post('/',\n        {params: params, 'HTTP_AUTHORIZATION' => \"Basic #{encoded_creds}\"})\n    end\n\n",
                    "rendered": {
                      "text": "      ].join(':'))\n    end\n    subject do\n      request.post('/',\n        {params: params, 'HTTP_AUTHORIZATION' => \"Basic #{encoded_creds}\"})\n    end\n\n",
                      "markdown": "`      ].join(':'))\n    end\n    subject do\n      request.post('/',\n        {params: params, 'HTTP_AUTHORIZATION' => \"Basic #{encoded_creds}\"})\n    end\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-rack-oauth2-2.2.1-r2.apk/ruby3.2-rack-oauth2-2.2.1-r2/usr/lib/ruby/gems/3.2.0/gems/rack-oauth2-2.2.1/spec/rack/oauth2/server/token/client_credentials_spec"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 19,
                  "endLine": 22,
                  "endColumn": 25,
                  "snippet": {
                    "text": "      client_secret: client_secret\n    }\n  end\n  subject { request.post('/', params: params) }\n\n  its(:status)       { should == 200 }\n  its(:content_type) { should == 'application/json' }\n",
                    "rendered": {
                      "text": "      client_secret: client_secret\n    }\n  end\n  subject { request.post('/', params: params) }\n\n  its(:status)       { should == 200 }\n  its(:content_type) { should == 'application/json' }\n",
                      "markdown": "`      client_secret: client_secret\n    }\n  end\n  subject { request.post('/', params: params) }\n\n  its(:status)       { should == 200 }\n  its(:content_type) { should == 'application/json' }\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-rack-oauth2-2.2.1-r2.apk/ruby3.2-rack-oauth2-2.2.1-r2/usr/lib/ruby/gems/3.2.0/gems/rack-oauth2-2.2.1/spec/rack/oauth2/server/token/client_credentials_spec"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 6,
                  "endLine": 34,
                  "endColumn": 12,
                  "snippet": {
                    "text": "      { grant_type: 'client_credentials' }\n    end\n    let(:encoded_creds) do\n      Base64.strict_encode64([\n        Rack::OAuth2::Util.www_form_url_encode(client_id),\n        Rack::OAuth2::Util.www_form_url_encode(client_secret)\n      ].join(':'))\n",
                    "rendered": {
                      "text": "      { grant_type: 'client_credentials' }\n    end\n    let(:encoded_creds) do\n      Base64.strict_encode64([\n        Rack::OAuth2::Util.www_form_url_encode(client_id),\n        Rack::OAuth2::Util.www_form_url_encode(client_secret)\n      ].join(':'))\n",
                      "markdown": "`      { grant_type: 'client_credentials' }\n    end\n    let(:encoded_creds) do\n      Base64.strict_encode64([\n        Rack::OAuth2::Util.www_form_url_encode(client_id),\n        Rack::OAuth2::Util.www_form_url_encode(client_secret)\n      ].join(':'))\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-rack-oauth2-2.2.1-r2.apk/ruby3.2-rack-oauth2-2.2.1-r2/usr/lib/ruby/gems/3.2.0/gems/rack-oauth2-2.2.1/spec/rack/oauth2/server/token/authorization_code_spec"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 26,
                  "endLine": 18,
                  "endColumn": 32,
                  "snippet": {
                    "text": "      redirect_uri: 'http://client.example.com/callback'\n    }\n  end\n  let(:response) { request.post('/', params: params) }\n  subject { response }\n\n  its(:status)       { should == 200 }\n",
                    "rendered": {
                      "text": "      redirect_uri: 'http://client.example.com/callback'\n    }\n  end\n  let(:response) { request.post('/', params: params) }\n  subject { response }\n\n  its(:status)       { should == 200 }\n",
                      "markdown": "`      redirect_uri: 'http://client.example.com/callback'\n    }\n  end\n  let(:response) { request.post('/', params: params) }\n  subject { response }\n\n  its(:status)       { should == 200 }\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-rack-oauth2-2.2.1-r2.apk/ruby3.2-rack-oauth2-2.2.1-r2/usr/lib/ruby/gems/3.2.0/gems/rack-oauth2-2.2.1/spec/rack/oauth2/server/resource_spec.rb"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 5,
                  "endLine": 20,
                  "endColumn": 13,
                  "snippet": {
                    "text": "\n  describe '#oauth2?' do\n    it do\n      expect { request.oauth2? }.to raise_error(RuntimeError, 'Define me!')\n    end\n  end\nend",
                    "rendered": {
                      "text": "\n  describe '#oauth2?' do\n    it do\n      expect { request.oauth2? }.to raise_error(RuntimeError, 'Define me!')\n    end\n  end\nend",
                      "markdown": "`\n  describe '#oauth2?' do\n    it do\n      expect { request.oauth2? }.to raise_error(RuntimeError, 'Define me!')\n    end\n  end\nend`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-rack-oauth2-2.2.1-r2.apk/ruby3.2-rack-oauth2-2.2.1-r2/usr/lib/ruby/gems/3.2.0/gems/rack-oauth2-2.2.1/spec/rack/oauth2/server/resource_spec.rb"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 5,
                  "endLine": 14,
                  "endColumn": 13,
                  "snippet": {
                    "text": "\n  describe '#setup!' do\n    it do\n      expect { request.setup! }.to raise_error(RuntimeError, 'Define me!')\n    end\n  end\n\n",
                    "rendered": {
                      "text": "\n  describe '#setup!' do\n    it do\n      expect { request.setup! }.to raise_error(RuntimeError, 'Define me!')\n    end\n  end\n\n",
                      "markdown": "`\n  describe '#setup!' do\n    it do\n      expect { request.setup! }.to raise_error(RuntimeError, 'Define me!')\n    end\n  end\n\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-rack-oauth2-2.2.1-r2.apk/ruby3.2-rack-oauth2-2.2.1-r2/usr/lib/ruby/gems/3.2.0/gems/rack-oauth2-2.2.1/spec/rack/oauth2/server/resource/error_spec.rb"
                },
                "region": {
                  "startLine": 152,
                  "startColumn": 9,
                  "endLine": 152,
                  "endColumn": 17,
                  "snippet": {
                    "text": "    else\n      describe method do\n        it do\n          expect { request.send method }.to raise_error(RuntimeError, 'Define me!')\n        end\n      end\n    end\n",
                    "rendered": {
                      "text": "    else\n      describe method do\n        it do\n          expect { request.send method }.to raise_error(RuntimeError, 'Define me!')\n        end\n      end\n    end\n",
                      "markdown": "`    else\n      describe method do\n        it do\n          expect { request.send method }.to raise_error(RuntimeError, 'Define me!')\n        end\n      end\n    end\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-rack-oauth2-2.2.1-r2.apk/ruby3.2-rack-oauth2-2.2.1-r2/usr/lib/ruby/gems/3.2.0/gems/rack-oauth2-2.2.1/spec/rack/oauth2/server/resource/error_spec.rb"
                },
                "region": {
                  "startLine": 143,
                  "startColumn": 9,
                  "endLine": 143,
                  "endColumn": 17,
                  "snippet": {
                    "text": "    when :insufficient_scope\n      describe method do\n        it \"should raise Rack::OAuth2::Server::Resource::Forbidden with error = :#{error_code}\" do\n          expect { request.send method }.to raise_error(forbidden) { |error|\n            error.error.should       == error_code\n            error.description.should == default_description[error_code]\n          }\n",
                    "rendered": {
                      "text": "    when :insufficient_scope\n      describe method do\n        it \"should raise Rack::OAuth2::Server::Resource::Forbidden with error = :#{error_code}\" do\n          expect { request.send method }.to raise_error(forbidden) { |error|\n            error.error.should       == error_code\n            error.description.should == default_description[error_code]\n          }\n",
                      "markdown": "`    when :insufficient_scope\n      describe method do\n        it \"should raise Rack::OAuth2::Server::Resource::Forbidden with error = :#{error_code}\" do\n          expect { request.send method }.to raise_error(forbidden) { |error|\n            error.error.should       == error_code\n            error.description.should == default_description[error_code]\n          }\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-rack-oauth2-2.2.1-r2.apk/ruby3.2-rack-oauth2-2.2.1-r2/usr/lib/ruby/gems/3.2.0/gems/rack-oauth2-2.2.1/spec/rack/oauth2/server/resource/error_spec.rb"
                },
                "region": {
                  "startLine": 134,
                  "startColumn": 9,
                  "endLine": 134,
                  "endColumn": 17,
                  "snippet": {
                    "text": "    when :invalid_request\n      describe method do\n        it \"should raise Rack::OAuth2::Server::Resource::BadRequest with error = :#{error_code}\" do\n          expect { request.send method }.to raise_error(bad_request) { |error|\n            error.error.should       == error_code\n            error.description.should == default_description[error_code]\n          }\n",
                    "rendered": {
                      "text": "    when :invalid_request\n      describe method do\n        it \"should raise Rack::OAuth2::Server::Resource::BadRequest with error = :#{error_code}\" do\n          expect { request.send method }.to raise_error(bad_request) { |error|\n            error.error.should       == error_code\n            error.description.should == default_description[error_code]\n          }\n",
                      "markdown": "`    when :invalid_request\n      describe method do\n        it \"should raise Rack::OAuth2::Server::Resource::BadRequest with error = :#{error_code}\" do\n          expect { request.send method }.to raise_error(bad_request) { |error|\n            error.error.should       == error_code\n            error.description.should == default_description[error_code]\n          }\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-rack-oauth2-2.2.1-r2.apk/ruby3.2-rack-oauth2-2.2.1-r2/usr/lib/ruby/gems/3.2.0/gems/rack-oauth2-2.2.1/spec/rack/oauth2/server/resource/error_spec.rb"
                },
                "region": {
                  "startLine": 124,
                  "startColumn": 5,
                  "endLine": 124,
                  "endColumn": 13,
                  "snippet": {
                    "text": "\n  describe 'unauthorized!' do\n    it do\n      expect { request.unauthorized! :invalid_client }.to raise_error(RuntimeError, 'Define me!')\n    end\n  end\n\n",
                    "rendered": {
                      "text": "\n  describe 'unauthorized!' do\n    it do\n      expect { request.unauthorized! :invalid_client }.to raise_error(RuntimeError, 'Define me!')\n    end\n  end\n\n",
                      "markdown": "`\n  describe 'unauthorized!' do\n    it do\n      expect { request.unauthorized! :invalid_client }.to raise_error(RuntimeError, 'Define me!')\n    end\n  end\n\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-rack-oauth2-2.2.1-r2.apk/ruby3.2-rack-oauth2-2.2.1-r2/usr/lib/ruby/gems/3.2.0/gems/rack-oauth2-2.2.1/spec/rack/oauth2/server/resource/error_spec.rb"
                },
                "region": {
                  "startLine": 118,
                  "startColumn": 5,
                  "endLine": 118,
                  "endColumn": 13,
                  "snippet": {
                    "text": "\n  describe 'bad_request!' do\n    it do\n      expect { request.bad_request! :invalid_request }.to raise_error bad_request\n    end\n  end\n\n",
                    "rendered": {
                      "text": "\n  describe 'bad_request!' do\n    it do\n      expect { request.bad_request! :invalid_request }.to raise_error bad_request\n    end\n  end\n\n",
                      "markdown": "`\n  describe 'bad_request!' do\n    it do\n      expect { request.bad_request! :invalid_request }.to raise_error bad_request\n    end\n  end\n\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-rack-oauth2-2.2.1-r2.apk/ruby3.2-rack-oauth2-2.2.1-r2/usr/lib/ruby/gems/3.2.0/gems/rack-oauth2-2.2.1/spec/rack/oauth2/server/resource/error_spec.rb"
                },
                "region": {
                  "startLine": 114,
                  "startColumn": 73,
                  "endLine": 114,
                  "endColumn": 78,
                  "snippet": {
                    "text": "  let(:redirect_uri)        { 'http://client.example.com/callback' }\n  let(:default_description) { Rack::OAuth2::Server::Resource::ErrorMethods::DEFAULT_DESCRIPTION }\n  let(:env)                 { Rack::MockRequest.env_for(\"/authorize?client_id=client_id\") }\n  let(:request)             { Rack::OAuth2::Server::Resource::Request.new env }\n\n  describe 'bad_request!' do\n    it do\n",
                    "rendered": {
                      "text": "  let(:redirect_uri)        { 'http://client.example.com/callback' }\n  let(:default_description) { Rack::OAuth2::Server::Resource::ErrorMethods::DEFAULT_DESCRIPTION }\n  let(:env)                 { Rack::MockRequest.env_for(\"/authorize?client_id=client_id\") }\n  let(:request)             { Rack::OAuth2::Server::Resource::Request.new env }\n\n  describe 'bad_request!' do\n    it do\n",
                      "markdown": "`  let(:redirect_uri)        { 'http://client.example.com/callback' }\n  let(:default_description) { Rack::OAuth2::Server::Resource::ErrorMethods::DEFAULT_DESCRIPTION }\n  let(:env)                 { Rack::MockRequest.env_for(\"/authorize?client_id=client_id\") }\n  let(:request)             { Rack::OAuth2::Server::Resource::Request.new env }\n\n  describe 'bad_request!' do\n    it do\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-rack-oauth2-2.2.1-r2.apk/ruby3.2-rack-oauth2-2.2.1-r2/usr/lib/ruby/gems/3.2.0/gems/rack-oauth2-2.2.1/spec/rack/oauth2/server/resource/error_spec.rb"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 5,
                  "endLine": 26,
                  "endColumn": 13,
                  "snippet": {
                    "text": "\n  describe '#scheme' do\n    it do\n      expect { error.scheme }.to raise_error(RuntimeError, 'Define me!')\n    end\n  end\n\n",
                    "rendered": {
                      "text": "\n  describe '#scheme' do\n    it do\n      expect { error.scheme }.to raise_error(RuntimeError, 'Define me!')\n    end\n  end\n\n",
                      "markdown": "`\n  describe '#scheme' do\n    it do\n      expect { error.scheme }.to raise_error(RuntimeError, 'Define me!')\n    end\n  end\n\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-rack-oauth2-2.2.1-r2.apk/ruby3.2-rack-oauth2-2.2.1-r2/usr/lib/ruby/gems/3.2.0/gems/rack-oauth2-2.2.1/spec/rack/oauth2/server/resource/bearer/error_spec.rb"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 9,
                  "endLine": 44,
                  "endColumn": 17,
                  "snippet": {
                    "text": "    else\n      describe method do\n        it \"should raise Rack::OAuth2::Server::Resource::Bearer::Unauthorized with error = :#{error_code}\" do\n          expect { request.send method }.to raise_error(unauthorized) { |error|\n            error.error.should       == error_code\n            error.description.should == default_description[error_code]\n          }\n",
                    "rendered": {
                      "text": "    else\n      describe method do\n        it \"should raise Rack::OAuth2::Server::Resource::Bearer::Unauthorized with error = :#{error_code}\" do\n          expect { request.send method }.to raise_error(unauthorized) { |error|\n            error.error.should       == error_code\n            error.description.should == default_description[error_code]\n          }\n",
                      "markdown": "`    else\n      describe method do\n        it \"should raise Rack::OAuth2::Server::Resource::Bearer::Unauthorized with error = :#{error_code}\" do\n          expect { request.send method }.to raise_error(unauthorized) { |error|\n            error.error.should       == error_code\n            error.description.should == default_description[error_code]\n          }\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-rack-oauth2-2.2.1-r2.apk/ruby3.2-rack-oauth2-2.2.1-r2/usr/lib/ruby/gems/3.2.0/gems/rack-oauth2-2.2.1/spec/rack/oauth2/server/resource/bearer/error_spec.rb"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 5,
                  "endLine": 30,
                  "endColumn": 13,
                  "snippet": {
                    "text": "\n  describe 'unauthorized!' do\n    it do\n      expect { request.unauthorized! :invalid_client }.to raise_error unauthorized\n    end\n  end\n\n",
                    "rendered": {
                      "text": "\n  describe 'unauthorized!' do\n    it do\n      expect { request.unauthorized! :invalid_client }.to raise_error unauthorized\n    end\n  end\n\n",
                      "markdown": "`\n  describe 'unauthorized!' do\n    it do\n      expect { request.unauthorized! :invalid_client }.to raise_error unauthorized\n    end\n  end\n\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-rack-oauth2-2.2.1-r2.apk/ruby3.2-rack-oauth2-2.2.1-r2/usr/lib/ruby/gems/3.2.0/gems/rack-oauth2-2.2.1/spec/rack/oauth2/server/resource/bearer/error_spec.rb"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 81,
                  "endLine": 26,
                  "endColumn": 86,
                  "snippet": {
                    "text": "  let(:redirect_uri)        { 'http://client.example.com/callback' }\n  let(:default_description) { Rack::OAuth2::Server::Resource::ErrorMethods::DEFAULT_DESCRIPTION }\n  let(:env)                 { Rack::MockRequest.env_for(\"/authorize?client_id=client_id\") }\n  let(:request)             { Rack::OAuth2::Server::Resource::Bearer::Request.new env }\n\n  describe 'unauthorized!' do\n    it do\n",
                    "rendered": {
                      "text": "  let(:redirect_uri)        { 'http://client.example.com/callback' }\n  let(:default_description) { Rack::OAuth2::Server::Resource::ErrorMethods::DEFAULT_DESCRIPTION }\n  let(:env)                 { Rack::MockRequest.env_for(\"/authorize?client_id=client_id\") }\n  let(:request)             { Rack::OAuth2::Server::Resource::Bearer::Request.new env }\n\n  describe 'unauthorized!' do\n    it do\n",
                      "markdown": "`  let(:redirect_uri)        { 'http://client.example.com/callback' }\n  let(:default_description) { Rack::OAuth2::Server::Resource::ErrorMethods::DEFAULT_DESCRIPTION }\n  let(:env)                 { Rack::MockRequest.env_for(\"/authorize?client_id=client_id\") }\n  let(:request)             { Rack::OAuth2::Server::Resource::Bearer::Request.new env }\n\n  describe 'unauthorized!' do\n    it do\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-rack-oauth2-2.2.1-r2.apk/ruby3.2-rack-oauth2-2.2.1-r2/usr/lib/ruby/gems/3.2.0/gems/rack-oauth2-2.2.1/spec/rack/oauth2/client/grant/jwt_bearer_spec.rb"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 5,
                  "endLine": 18,
                  "endColumn": 13,
                  "snippet": {
                    "text": "\n  context 'otherwise' do\n    it do\n      expect { grant.new }.to raise_error AttrRequired::AttrMissing\n    end\n  end\nend\n",
                    "rendered": {
                      "text": "\n  context 'otherwise' do\n    it do\n      expect { grant.new }.to raise_error AttrRequired::AttrMissing\n    end\n  end\nend\n",
                      "markdown": "`\n  context 'otherwise' do\n    it do\n      expect { grant.new }.to raise_error AttrRequired::AttrMissing\n    end\n  end\nend\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-rack-oauth2-2.2.1-r2.apk/ruby3.2-rack-oauth2-2.2.1-r2/usr/lib/ruby/gems/3.2.0/gems/rack-oauth2-2.2.1/spec/rack/oauth2/client/grant/authorization_code_spec"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 5,
                  "endLine": 34,
                  "endColumn": 13,
                  "snippet": {
                    "text": "\n  context 'otherwise' do\n    it do\n      expect { grant.new }.to raise_error AttrRequired::AttrMissing\n    end\n  end\nend\n",
                    "rendered": {
                      "text": "\n  context 'otherwise' do\n    it do\n      expect { grant.new }.to raise_error AttrRequired::AttrMissing\n    end\n  end\nend\n",
                      "markdown": "`\n  context 'otherwise' do\n    it do\n      expect { grant.new }.to raise_error AttrRequired::AttrMissing\n    end\n  end\nend\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-rack-oauth2-2.2.1-r2.apk/ruby3.2-rack-oauth2-2.2.1-r2/usr/lib/ruby/gems/3.2.0/gems/rack-oauth2-2.2.1/lib/rack/oauth2/server/token.rb"
                },
                "region": {
                  "startLine": 95,
                  "startColumn": 34,
                  "endLine": 95,
                  "endColumn": 42,
                  "snippet": {
                    "text": "end\n\nrequire 'rack/oauth2/server/token/authorization_code'\nrequire 'rack/oauth2/server/token/password'\nrequire 'rack/oauth2/server/token/client_credentials'\nrequire 'rack/oauth2/server/token/refresh_token'\nrequire 'rack/oauth2/server/token/jwt_bearer'\n",
                    "rendered": {
                      "text": "end\n\nrequire 'rack/oauth2/server/token/authorization_code'\nrequire 'rack/oauth2/server/token/password'\nrequire 'rack/oauth2/server/token/client_credentials'\nrequire 'rack/oauth2/server/token/refresh_token'\nrequire 'rack/oauth2/server/token/jwt_bearer'\n",
                      "markdown": "`end\n\nrequire 'rack/oauth2/server/token/authorization_code'\nrequire 'rack/oauth2/server/token/password'\nrequire 'rack/oauth2/server/token/client_credentials'\nrequire 'rack/oauth2/server/token/refresh_token'\nrequire 'rack/oauth2/server/token/jwt_bearer'\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-rack-oauth2-2.2.1-r2.apk/ruby3.2-rack-oauth2-2.2.1-r2/usr/lib/ruby/gems/3.2.0/gems/rack-oauth2-2.2.1/lib/rack/oauth2/server/token.rb"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 12,
                  "endLine": 21,
                  "endColumn": 20,
                  "snippet": {
                    "text": "          when 'authorization_code'\n            AuthorizationCode\n          when 'password'\n            Password\n          when 'client_credentials'\n            ClientCredentials\n          when 'refresh_token'\n",
                    "rendered": {
                      "text": "          when 'authorization_code'\n            AuthorizationCode\n          when 'password'\n            Password\n          when 'client_credentials'\n            ClientCredentials\n          when 'refresh_token'\n",
                      "markdown": "`          when 'authorization_code'\n            AuthorizationCode\n          when 'password'\n            Password\n          when 'client_credentials'\n            ClientCredentials\n          when 'refresh_token'\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-rack-oauth2-2.2.1-r2.apk/ruby3.2-rack-oauth2-2.2.1-r2/usr/lib/ruby/gems/3.2.0/gems/rack-oauth2-2.2.1/lib/rack/oauth2/server/token.rb"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 16,
                  "endLine": 20,
                  "endColumn": 24,
                  "snippet": {
                    "text": "          case request.grant_type\n          when 'authorization_code'\n            AuthorizationCode\n          when 'password'\n            Password\n          when 'client_credentials'\n            ClientCredentials\n",
                    "rendered": {
                      "text": "          case request.grant_type\n          when 'authorization_code'\n            AuthorizationCode\n          when 'password'\n            Password\n          when 'client_credentials'\n            ClientCredentials\n",
                      "markdown": "`          case request.grant_type\n          when 'authorization_code'\n            AuthorizationCode\n          when 'password'\n            Password\n          when 'client_credentials'\n            ClientCredentials\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-rack-oauth2-2.2.1-r2.apk/ruby3.2-rack-oauth2-2.2.1-r2/usr/lib/ruby/gems/3.2.0/gems/rack-oauth2-2.2.1/lib/rack/oauth2/server/token/saml2_bearer.rb"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 35,
                  "endLine": 8,
                  "snippet": {
                    "text": "      class Token\n        class SAML2Bearer < Abstract::Handler\n          def _call(env)\n            @request  = Request.new env\n            @response = Response.new request\n            super\n          end\n\n",
                    "rendered": {
                      "text": "      class Token\n        class SAML2Bearer < Abstract::Handler\n          def _call(env)\n            @request  = Request.new env\n            @response = Response.new request\n            super\n          end\n\n",
                      "markdown": "`      class Token\n        class SAML2Bearer < Abstract::Handler\n          def _call(env)\n            @request  = Request.new env\n            @response = Response.new request\n            super\n          end\n\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-rack-oauth2-2.2.1-r2.apk/ruby3.2-rack-oauth2-2.2.1-r2/usr/lib/ruby/gems/3.2.0/gems/rack-oauth2-2.2.1/lib/rack/oauth2/server/token/password.rb"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 36,
                  "endLine": 19,
                  "endColumn": 44,
                  "snippet": {
                    "text": "              super\n              @grant_type = :password\n              @username   = params['username']\n              @password   = params['password']\n              attr_missing!\n            end\n          end\n",
                    "rendered": {
                      "text": "              super\n              @grant_type = :password\n              @username   = params['username']\n              @password   = params['password']\n              attr_missing!\n            end\n          end\n",
                      "markdown": "`              super\n              @grant_type = :password\n              @username   = params['username']\n              @password   = params['password']\n              attr_missing!\n            end\n          end\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-rack-oauth2-2.2.1-r2.apk/ruby3.2-rack-oauth2-2.2.1-r2/usr/lib/ruby/gems/3.2.0/gems/rack-oauth2-2.2.1/lib/rack/oauth2/server/token/password.rb"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 15,
                  "endLine": 19,
                  "endColumn": 23,
                  "snippet": {
                    "text": "              super\n              @grant_type = :password\n              @username   = params['username']\n              @password   = params['password']\n              attr_missing!\n            end\n          end\n",
                    "rendered": {
                      "text": "              super\n              @grant_type = :password\n              @username   = params['username']\n              @password   = params['password']\n              attr_missing!\n            end\n          end\n",
                      "markdown": "`              super\n              @grant_type = :password\n              @username   = params['username']\n              @password   = params['password']\n              attr_missing!\n            end\n          end\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-rack-oauth2-2.2.1-r2.apk/ruby3.2-rack-oauth2-2.2.1-r2/usr/lib/ruby/gems/3.2.0/gems/rack-oauth2-2.2.1/lib/rack/oauth2/server/token/password.rb"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 29,
                  "endLine": 17,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\n            def initialize(env)\n              super\n              @grant_type = :password\n              @username   = params['username']\n              @password   = params['password']\n              attr_missing!\n",
                    "rendered": {
                      "text": "\n            def initialize(env)\n              super\n              @grant_type = :password\n              @username   = params['username']\n              @password   = params['password']\n              attr_missing!\n",
                      "markdown": "`\n            def initialize(env)\n              super\n              @grant_type = :password\n              @username   = params['username']\n              @password   = params['password']\n              attr_missing!\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-rack-oauth2-2.2.1-r2.apk/ruby3.2-rack-oauth2-2.2.1-r2/usr/lib/ruby/gems/3.2.0/gems/rack-oauth2-2.2.1/lib/rack/oauth2/server/token/password.rb"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 38,
                  "endLine": 13,
                  "endColumn": 46,
                  "snippet": {
                    "text": "          end\n\n          class Request < Token::Request\n            attr_required :username, :password\n\n            def initialize(env)\n              super\n",
                    "rendered": {
                      "text": "          end\n\n          class Request < Token::Request\n            attr_required :username, :password\n\n            def initialize(env)\n              super\n",
                      "markdown": "`          end\n\n          class Request < Token::Request\n            attr_required :username, :password\n\n            def initialize(env)\n              super\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-rack-oauth2-2.2.1-r2.apk/ruby3.2-rack-oauth2-2.2.1-r2/usr/lib/ruby/gems/3.2.0/gems/rack-oauth2-2.2.1/lib/rack/oauth2/server/token/password.rb"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 14,
                  "endLine": 5,
                  "endColumn": 22,
                  "snippet": {
                    "text": "  module OAuth2\n    module Server\n      class Token\n        class Password < Abstract::Handler\n          def _call(env)\n            @request  = Request.new(env)\n            @response = Response.new(request)\n",
                    "rendered": {
                      "text": "  module OAuth2\n    module Server\n      class Token\n        class Password < Abstract::Handler\n          def _call(env)\n            @request  = Request.new(env)\n            @response = Response.new(request)\n",
                      "markdown": "`  module OAuth2\n    module Server\n      class Token\n        class Password < Abstract::Handler\n          def _call(env)\n            @request  = Request.new(env)\n            @response = Response.new(request)\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-rack-oauth2-2.2.1-r2.apk/ruby3.2-rack-oauth2-2.2.1-r2/usr/lib/ruby/gems/3.2.0/gems/rack-oauth2-2.2.1/lib/rack/oauth2/client/grant/password.rb"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 36,
                  "endLine": 6,
                  "endColumn": 44,
                  "snippet": {
                    "text": "    class Client\n      class Grant\n        class Password < Grant\n          attr_required :username, :password\n        end\n      end\n    end\n",
                    "rendered": {
                      "text": "    class Client\n      class Grant\n        class Password < Grant\n          attr_required :username, :password\n        end\n      end\n    end\n",
                      "markdown": "`    class Client\n      class Grant\n        class Password < Grant\n          attr_required :username, :password\n        end\n      end\n    end\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-rack-oauth2-2.2.1-r2.apk/ruby3.2-rack-oauth2-2.2.1-r2/usr/lib/ruby/gems/3.2.0/gems/rack-oauth2-2.2.1/lib/rack/oauth2/client/grant/password.rb"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 14,
                  "endLine": 5,
                  "endColumn": 22,
                  "snippet": {
                    "text": "  module OAuth2\n    class Client\n      class Grant\n        class Password < Grant\n          attr_required :username, :password\n        end\n      end\n",
                    "rendered": {
                      "text": "  module OAuth2\n    class Client\n      class Grant\n        class Password < Grant\n          attr_required :username, :password\n        end\n      end\n",
                      "markdown": "`  module OAuth2\n    class Client\n      class Grant\n        class Password < Grant\n          attr_required :username, :password\n        end\n      end\n`"
                    }
                  },
                  "sourceLanguage": "ruby"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-rack-oauth2-2.2.1-r2.apk/ruby3.2-rack-oauth2-2.2.1-r2/usr/lib/ruby/gems/3.2.0/gems/rack-oauth2-2.2.1/.gitignore"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 2,
                  "endLine": 14,
                  "snippet": {
                    "text": "\\#*\n.\\#*\n\n## VIM\n*.swp\n\n## PROJECT::GENERAL\ncoverage*\n",
                    "rendered": {
                      "text": "\\#*\n.\\#*\n\n## VIM\n*.swp\n\n## PROJECT::GENERAL\ncoverage*\n",
                      "markdown": "`\\#*\n.\\#*\n\n## VIM\n*.swp\n\n## PROJECT::GENERAL\ncoverage*\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-rack-oauth2-2.2.1-r2.apk/ruby3.2-rack-oauth2-2.2.1-r2/usr/lib/ruby/gems/3.2.0/gems/rack-oauth2-2.2.1/.gitignore"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 2,
                  "endLine": 9,
                  "snippet": {
                    "text": "*.tmproj\ntmtags\n\n## EMACS\n*~\n\\#*\n.\\#*\n\n",
                    "rendered": {
                      "text": "*.tmproj\ntmtags\n\n## EMACS\n*~\n\\#*\n.\\#*\n\n",
                      "markdown": "`*.tmproj\ntmtags\n\n## EMACS\n*~\n\\#*\n.\\#*\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        }
      ],
      "columnKind": "utf16CodeUnits"
    }
  ]
}