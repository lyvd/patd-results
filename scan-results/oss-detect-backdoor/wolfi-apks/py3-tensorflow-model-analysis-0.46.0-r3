{
  "$schema": "https://schemastore.azurewebsites.net/schemas/json/sarif-2.1.0-rtm.6.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "oss-detect-backdoor",
          "organization": "Microsoft Corporation",
          "product": "OSSGadget (https://github.com/Microsoft/OSSGadget)",
          "version": "0.0.0+ed0e2cfe6a"
        }
      },
      "results": [
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/multi_class_confusion_matrix_metr"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 49,
                  "endLine": 14,
                  "endColumn": 53,
                  "snippet": {
                    "text": "# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\"\"\"Tests for multi-class confusion matrix metrics at thresholds.\"\"\"\n\nfrom absl.testing import parameterized\nimport apache_beam as beam\n",
                    "rendered": {
                      "text": "# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\"\"\"Tests for multi-class confusion matrix metrics at thresholds.\"\"\"\n\nfrom absl.testing import parameterized\nimport apache_beam as beam\n",
                      "markdown": "`# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\"\"\"Tests for multi-class confusion matrix metrics at thresholds.\"\"\"\n\nfrom absl.testing import parameterized\nimport apache_beam as beam\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/multi_class_confusion_matrix_metr"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/object_detection_metrics.py"
                },
                "region": {
                  "startLine": 264,
                  "startColumn": 33,
                  "endLine": 264,
                  "endColumn": 37,
                  "snippet": {
                    "text": "        metrics.\n      max_num_detections: (Optional) The maximum number of detections for a\n        single image.\n      recalls: (Optional) recalls at which precisions will be calculated.\n      num_recalls: (Optional) Used for objecth detection, the number of recalls\n        for calculating average precision, it equally generates points bewteen 0\n        and 1. (Only one of recalls and num_recalls should be used).\n",
                    "rendered": {
                      "text": "        metrics.\n      max_num_detections: (Optional) The maximum number of detections for a\n        single image.\n      recalls: (Optional) recalls at which precisions will be calculated.\n      num_recalls: (Optional) Used for objecth detection, the number of recalls\n        for calculating average precision, it equally generates points bewteen 0\n        and 1. (Only one of recalls and num_recalls should be used).\n",
                      "markdown": "`        metrics.\n      max_num_detections: (Optional) The maximum number of detections for a\n        single image.\n      recalls: (Optional) recalls at which precisions will be calculated.\n      num_recalls: (Optional) Used for objecth detection, the number of recalls\n        for calculating average precision, it equally generates points bewteen 0\n        and 1. (Only one of recalls and num_recalls should be used).\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/object_detection_metrics.py"
                },
                "region": {
                  "startLine": 254,
                  "startColumn": 42,
                  "endLine": 254,
                  "endColumn": 46,
                  "snippet": {
                    "text": "\n    Args:\n      num_thresholds: (Optional) Number of thresholds to use for calculating the\n        matrices and finding the precision at given recall.\n      iou_thresholds: (Optional) Threholds for a detection and ground truth pair\n        with specific iou to be considered as a match.\n      class_ids: (Optional) The class ids for calculating metrics.\n",
                    "rendered": {
                      "text": "\n    Args:\n      num_thresholds: (Optional) Number of thresholds to use for calculating the\n        matrices and finding the precision at given recall.\n      iou_thresholds: (Optional) Threholds for a detection and ground truth pair\n        with specific iou to be considered as a match.\n      class_ids: (Optional) The class ids for calculating metrics.\n",
                      "markdown": "`\n    Args:\n      num_thresholds: (Optional) Number of thresholds to use for calculating the\n        matrices and finding the precision at given recall.\n      iou_thresholds: (Optional) Threholds for a detection and ground truth pair\n        with specific iou to be considered as a match.\n      class_ids: (Optional) The class ids for calculating metrics.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/object_detection_metrics.py"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 33,
                  "endLine": 77,
                  "endColumn": 37,
                  "snippet": {
                    "text": "        metrics.\n      max_num_detections: (Optional) The maximum number of detections for a\n        single image.\n      recalls: (Optional) recalls at which precisions will be calculated.\n      num_recalls: (Optional) Used for objecth detection, the number of recalls\n        for calculating average precision, it equally generates points bewteen 0\n        and 1. (Only one of recalls and num_recalls should be used).\n",
                    "rendered": {
                      "text": "        metrics.\n      max_num_detections: (Optional) The maximum number of detections for a\n        single image.\n      recalls: (Optional) recalls at which precisions will be calculated.\n      num_recalls: (Optional) Used for objecth detection, the number of recalls\n        for calculating average precision, it equally generates points bewteen 0\n        and 1. (Only one of recalls and num_recalls should be used).\n",
                      "markdown": "`        metrics.\n      max_num_detections: (Optional) The maximum number of detections for a\n        single image.\n      recalls: (Optional) recalls at which precisions will be calculated.\n      num_recalls: (Optional) Used for objecth detection, the number of recalls\n        for calculating average precision, it equally generates points bewteen 0\n        and 1. (Only one of recalls and num_recalls should be used).\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/object_detection_metrics.py"
                },
                "region": {
                  "startLine": 68,
                  "startColumn": 42,
                  "endLine": 68,
                  "endColumn": 46,
                  "snippet": {
                    "text": "\n    Args:\n      num_thresholds: (Optional) Number of thresholds to use for calculating the\n        matrices and finding the precision at given recall.\n      iou_threshold: (Optional) Threholds for a detection and ground truth pair\n        with specific iou to be considered as a match.\n      class_id: (Optional) The class id for calculating metrics.\n",
                    "rendered": {
                      "text": "\n    Args:\n      num_thresholds: (Optional) Number of thresholds to use for calculating the\n        matrices and finding the precision at given recall.\n      iou_threshold: (Optional) Threholds for a detection and ground truth pair\n        with specific iou to be considered as a match.\n      class_id: (Optional) The class id for calculating metrics.\n",
                      "markdown": "`\n    Args:\n      num_thresholds: (Optional) Number of thresholds to use for calculating the\n        matrices and finding the precision at given recall.\n      iou_threshold: (Optional) Threholds for a detection and ground truth pair\n        with specific iou to be considered as a match.\n      class_id: (Optional) The class id for calculating metrics.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/object_detection_metrics.py"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 21,
                  "endLine": 33,
                  "endColumn": 25,
                  "snippet": {
                    "text": "\n\nclass COCOAveragePrecision(metric_types.Metric):\n  \"\"\"Confusion matrix at thresholds.\n\n  It computes the average precision of object detections for a single class and\n  a single iou_threshold.\n",
                    "rendered": {
                      "text": "\n\nclass COCOAveragePrecision(metric_types.Metric):\n  \"\"\"Confusion matrix at thresholds.\n\n  It computes the average precision of object detections for a single class and\n  a single iou_threshold.\n",
                      "markdown": "`\n\nclass COCOAveragePrecision(metric_types.Metric):\n  \"\"\"Confusion matrix at thresholds.\n\n  It computes the average precision of object detections for a single class and\n  a single iou_threshold.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/object_detection_metrics.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/object_detection_metrics.py"
                },
                "region": {
                  "startLine": 623,
                  "startColumn": 63,
                  "endLine": 623,
                  "endColumn": 69,
                  "snippet": {
                    "text": "        names. The desired format is [left bounadary, top boudnary, right\n        boundary, bottom boundary, class id, confidence score]. e.g. ['xmin',\n        'ymin', 'xmax', 'ymax', 'class_id', 'scores']\n      num_detections_key: (Optional) An output name in which to find the number\n        of detections to use for evaluation for a given example. It does nothing\n        if predictions_to_stack is not set. The value for this output should be\n        a scalar value or a single-value tensor. The stacked predicitions will\n",
                    "rendered": {
                      "text": "        names. The desired format is [left bounadary, top boudnary, right\n        boundary, bottom boundary, class id, confidence score]. e.g. ['xmin',\n        'ymin', 'xmax', 'ymax', 'class_id', 'scores']\n      num_detections_key: (Optional) An output name in which to find the number\n        of detections to use for evaluation for a given example. It does nothing\n        if predictions_to_stack is not set. The value for this output should be\n        a scalar value or a single-value tensor. The stacked predicitions will\n",
                      "markdown": "`        names. The desired format is [left bounadary, top boudnary, right\n        boundary, bottom boundary, class id, confidence score]. e.g. ['xmin',\n        'ymin', 'xmax', 'ymax', 'class_id', 'scores']\n      num_detections_key: (Optional) An output name in which to find the number\n        of detections to use for evaluation for a given example. It does nothing\n        if predictions_to_stack is not set. The value for this output should be\n        a scalar value or a single-value tensor. The stacked predicitions will\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/object_detection_metrics.py"
                },
                "region": {
                  "startLine": 620,
                  "startColumn": 53,
                  "endLine": 620,
                  "endColumn": 58,
                  "snippet": {
                    "text": "        'ymin', 'xmax', 'ymax', 'class_id']\n      predictions_to_stack: (Optional) Output names for columns to be stacked as\n        a single numpy array as the prediction. It should be the model's output\n        names. The desired format is [left bounadary, top boudnary, right\n        boundary, bottom boundary, class id, confidence score]. e.g. ['xmin',\n        'ymin', 'xmax', 'ymax', 'class_id', 'scores']\n      num_detections_key: (Optional) An output name in which to find the number\n",
                    "rendered": {
                      "text": "        'ymin', 'xmax', 'ymax', 'class_id']\n      predictions_to_stack: (Optional) Output names for columns to be stacked as\n        a single numpy array as the prediction. It should be the model's output\n        names. The desired format is [left bounadary, top boudnary, right\n        boundary, bottom boundary, class id, confidence score]. e.g. ['xmin',\n        'ymin', 'xmax', 'ymax', 'class_id', 'scores']\n      num_detections_key: (Optional) An output name in which to find the number\n",
                      "markdown": "`        'ymin', 'xmax', 'ymax', 'class_id']\n      predictions_to_stack: (Optional) Output names for columns to be stacked as\n        a single numpy array as the prediction. It should be the model's output\n        names. The desired format is [left bounadary, top boudnary, right\n        boundary, bottom boundary, class id, confidence score]. e.g. ['xmin',\n        'ymin', 'xmax', 'ymax', 'class_id', 'scores']\n      num_detections_key: (Optional) An output name in which to find the number\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/object_detection_metrics.py"
                },
                "region": {
                  "startLine": 615,
                  "startColumn": 72,
                  "endLine": 616,
                  "snippet": {
                    "text": "      name: (Optional) Metric name.\n      labels_to_stack: (Optional) Keys for columns to be stacked as a single\n        numpy array as the labels. It is searched under the key labels, features\n        and transformed features. The desired format is [left bounadary, top\n        boudnary, right boundary, bottom boundary, class id]. e.g. ['xmin',\n        'ymin', 'xmax', 'ymax', 'class_id']\n      predictions_to_stack: (Optional) Output names for columns to be stacked as\n        a single numpy array as the prediction. It should be the model's output\n",
                    "rendered": {
                      "text": "      name: (Optional) Metric name.\n      labels_to_stack: (Optional) Keys for columns to be stacked as a single\n        numpy array as the labels. It is searched under the key labels, features\n        and transformed features. The desired format is [left bounadary, top\n        boudnary, right boundary, bottom boundary, class id]. e.g. ['xmin',\n        'ymin', 'xmax', 'ymax', 'class_id']\n      predictions_to_stack: (Optional) Output names for columns to be stacked as\n        a single numpy array as the prediction. It should be the model's output\n",
                      "markdown": "`      name: (Optional) Metric name.\n      labels_to_stack: (Optional) Keys for columns to be stacked as a single\n        numpy array as the labels. It is searched under the key labels, features\n        and transformed features. The desired format is [left bounadary, top\n        boudnary, right boundary, bottom boundary, class id]. e.g. ['xmin',\n        'ymin', 'xmax', 'ymax', 'class_id']\n      predictions_to_stack: (Optional) Output names for columns to be stacked as\n        a single numpy array as the prediction. It should be the model's output\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/object_detection_metrics.py"
                },
                "region": {
                  "startLine": 457,
                  "startColumn": 63,
                  "endLine": 457,
                  "endColumn": 69,
                  "snippet": {
                    "text": "        names. The desired format is [left bounadary, top boudnary, right\n        boundary, bottom boundary, class id, confidence score]. e.g. ['xmin',\n        'ymin', 'xmax', 'ymax', 'class_id', 'scores']\n      num_detections_key: (Optional) An output name in which to find the number\n        of detections to use for evaluation for a given example. It does nothing\n        if predictions_to_stack is not set. The value for this output should be\n        a scalar value or a single-value tensor. The stacked predicitions will\n",
                    "rendered": {
                      "text": "        names. The desired format is [left bounadary, top boudnary, right\n        boundary, bottom boundary, class id, confidence score]. e.g. ['xmin',\n        'ymin', 'xmax', 'ymax', 'class_id', 'scores']\n      num_detections_key: (Optional) An output name in which to find the number\n        of detections to use for evaluation for a given example. It does nothing\n        if predictions_to_stack is not set. The value for this output should be\n        a scalar value or a single-value tensor. The stacked predicitions will\n",
                      "markdown": "`        names. The desired format is [left bounadary, top boudnary, right\n        boundary, bottom boundary, class id, confidence score]. e.g. ['xmin',\n        'ymin', 'xmax', 'ymax', 'class_id', 'scores']\n      num_detections_key: (Optional) An output name in which to find the number\n        of detections to use for evaluation for a given example. It does nothing\n        if predictions_to_stack is not set. The value for this output should be\n        a scalar value or a single-value tensor. The stacked predicitions will\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/object_detection_metrics.py"
                },
                "region": {
                  "startLine": 454,
                  "startColumn": 53,
                  "endLine": 454,
                  "endColumn": 58,
                  "snippet": {
                    "text": "        'ymin', 'xmax', 'ymax', 'class_id']\n      predictions_to_stack: (Optional) Output names for columns to be stacked as\n        a single numpy array as the prediction. It should be the model's output\n        names. The desired format is [left bounadary, top boudnary, right\n        boundary, bottom boundary, class id, confidence score]. e.g. ['xmin',\n        'ymin', 'xmax', 'ymax', 'class_id', 'scores']\n      num_detections_key: (Optional) An output name in which to find the number\n",
                    "rendered": {
                      "text": "        'ymin', 'xmax', 'ymax', 'class_id']\n      predictions_to_stack: (Optional) Output names for columns to be stacked as\n        a single numpy array as the prediction. It should be the model's output\n        names. The desired format is [left bounadary, top boudnary, right\n        boundary, bottom boundary, class id, confidence score]. e.g. ['xmin',\n        'ymin', 'xmax', 'ymax', 'class_id', 'scores']\n      num_detections_key: (Optional) An output name in which to find the number\n",
                      "markdown": "`        'ymin', 'xmax', 'ymax', 'class_id']\n      predictions_to_stack: (Optional) Output names for columns to be stacked as\n        a single numpy array as the prediction. It should be the model's output\n        names. The desired format is [left bounadary, top boudnary, right\n        boundary, bottom boundary, class id, confidence score]. e.g. ['xmin',\n        'ymin', 'xmax', 'ymax', 'class_id', 'scores']\n      num_detections_key: (Optional) An output name in which to find the number\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/object_detection_metrics.py"
                },
                "region": {
                  "startLine": 449,
                  "startColumn": 72,
                  "endLine": 450,
                  "snippet": {
                    "text": "      name: (Optional) Metric name.\n      labels_to_stack: (Optional) Keys for columns to be stacked as a single\n        numpy array as the labels. It is searched under the key labels, features\n        and transformed features. The desired format is [left bounadary, top\n        boudnary, right boundary, bottom boundary, class id]. e.g. ['xmin',\n        'ymin', 'xmax', 'ymax', 'class_id']\n      predictions_to_stack: (Optional) Output names for columns to be stacked as\n        a single numpy array as the prediction. It should be the model's output\n",
                    "rendered": {
                      "text": "      name: (Optional) Metric name.\n      labels_to_stack: (Optional) Keys for columns to be stacked as a single\n        numpy array as the labels. It is searched under the key labels, features\n        and transformed features. The desired format is [left bounadary, top\n        boudnary, right boundary, bottom boundary, class id]. e.g. ['xmin',\n        'ymin', 'xmax', 'ymax', 'class_id']\n      predictions_to_stack: (Optional) Output names for columns to be stacked as\n        a single numpy array as the prediction. It should be the model's output\n",
                      "markdown": "`      name: (Optional) Metric name.\n      labels_to_stack: (Optional) Keys for columns to be stacked as a single\n        numpy array as the labels. It is searched under the key labels, features\n        and transformed features. The desired format is [left bounadary, top\n        boudnary, right boundary, bottom boundary, class id]. e.g. ['xmin',\n        'ymin', 'xmax', 'ymax', 'class_id']\n      predictions_to_stack: (Optional) Output names for columns to be stacked as\n        a single numpy array as the prediction. It should be the model's output\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/object_detection_metrics.py"
                },
                "region": {
                  "startLine": 279,
                  "startColumn": 63,
                  "endLine": 279,
                  "endColumn": 69,
                  "snippet": {
                    "text": "        names. The desired format is [left bounadary, top boudnary, right\n        boundary, bottom boundary, class id, confidence score]. e.g. ['xmin',\n        'ymin', 'xmax', 'ymax', 'class_id', 'scores']\n      num_detections_key: (Optional) An output name in which to find the number\n        of detections to use for evaluation for a given example. It does nothing\n        if predictions_to_stack is not set. The value for this output should be\n        a scalar value or a single-value tensor. The stacked predicitions will\n",
                    "rendered": {
                      "text": "        names. The desired format is [left bounadary, top boudnary, right\n        boundary, bottom boundary, class id, confidence score]. e.g. ['xmin',\n        'ymin', 'xmax', 'ymax', 'class_id', 'scores']\n      num_detections_key: (Optional) An output name in which to find the number\n        of detections to use for evaluation for a given example. It does nothing\n        if predictions_to_stack is not set. The value for this output should be\n        a scalar value or a single-value tensor. The stacked predicitions will\n",
                      "markdown": "`        names. The desired format is [left bounadary, top boudnary, right\n        boundary, bottom boundary, class id, confidence score]. e.g. ['xmin',\n        'ymin', 'xmax', 'ymax', 'class_id', 'scores']\n      num_detections_key: (Optional) An output name in which to find the number\n        of detections to use for evaluation for a given example. It does nothing\n        if predictions_to_stack is not set. The value for this output should be\n        a scalar value or a single-value tensor. The stacked predicitions will\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/object_detection_metrics.py"
                },
                "region": {
                  "startLine": 276,
                  "startColumn": 53,
                  "endLine": 276,
                  "endColumn": 58,
                  "snippet": {
                    "text": "        'ymin', 'xmax', 'ymax', 'class_id']\n      predictions_to_stack: (Optional) Output names for columns to be stacked as\n        a single numpy array as the prediction. It should be the model's output\n        names. The desired format is [left bounadary, top boudnary, right\n        boundary, bottom boundary, class id, confidence score]. e.g. ['xmin',\n        'ymin', 'xmax', 'ymax', 'class_id', 'scores']\n      num_detections_key: (Optional) An output name in which to find the number\n",
                    "rendered": {
                      "text": "        'ymin', 'xmax', 'ymax', 'class_id']\n      predictions_to_stack: (Optional) Output names for columns to be stacked as\n        a single numpy array as the prediction. It should be the model's output\n        names. The desired format is [left bounadary, top boudnary, right\n        boundary, bottom boundary, class id, confidence score]. e.g. ['xmin',\n        'ymin', 'xmax', 'ymax', 'class_id', 'scores']\n      num_detections_key: (Optional) An output name in which to find the number\n",
                      "markdown": "`        'ymin', 'xmax', 'ymax', 'class_id']\n      predictions_to_stack: (Optional) Output names for columns to be stacked as\n        a single numpy array as the prediction. It should be the model's output\n        names. The desired format is [left bounadary, top boudnary, right\n        boundary, bottom boundary, class id, confidence score]. e.g. ['xmin',\n        'ymin', 'xmax', 'ymax', 'class_id', 'scores']\n      num_detections_key: (Optional) An output name in which to find the number\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/object_detection_metrics.py"
                },
                "region": {
                  "startLine": 271,
                  "startColumn": 72,
                  "endLine": 272,
                  "snippet": {
                    "text": "      name: (Optional) Metric name.\n      labels_to_stack: (Optional) Keys for columns to be stacked as a single\n        numpy array as the labels. It is searched under the key labels, features\n        and transformed features. The desired format is [left bounadary, top\n        boudnary, right boundary, bottom boundary, class id]. e.g. ['xmin',\n        'ymin', 'xmax', 'ymax', 'class_id']\n      predictions_to_stack: (Optional) Output names for columns to be stacked as\n        a single numpy array as the prediction. It should be the model's output\n",
                    "rendered": {
                      "text": "      name: (Optional) Metric name.\n      labels_to_stack: (Optional) Keys for columns to be stacked as a single\n        numpy array as the labels. It is searched under the key labels, features\n        and transformed features. The desired format is [left bounadary, top\n        boudnary, right boundary, bottom boundary, class id]. e.g. ['xmin',\n        'ymin', 'xmax', 'ymax', 'class_id']\n      predictions_to_stack: (Optional) Output names for columns to be stacked as\n        a single numpy array as the prediction. It should be the model's output\n",
                      "markdown": "`      name: (Optional) Metric name.\n      labels_to_stack: (Optional) Keys for columns to be stacked as a single\n        numpy array as the labels. It is searched under the key labels, features\n        and transformed features. The desired format is [left bounadary, top\n        boudnary, right boundary, bottom boundary, class id]. e.g. ['xmin',\n        'ymin', 'xmax', 'ymax', 'class_id']\n      predictions_to_stack: (Optional) Output names for columns to be stacked as\n        a single numpy array as the prediction. It should be the model's output\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/object_detection_metrics.py"
                },
                "region": {
                  "startLine": 92,
                  "startColumn": 63,
                  "endLine": 92,
                  "endColumn": 69,
                  "snippet": {
                    "text": "        names. The desired format is [left bounadary, top boudnary, right\n        boundary, bottom boundary, class id, confidence score]. e.g. ['xmin',\n        'ymin', 'xmax', 'ymax', 'class_id', 'scores']\n      num_detections_key: (Optional) An output name in which to find the number\n        of detections to use for evaluation for a given example. It does nothing\n        if predictions_to_stack is not set. The value for this output should be\n        a scalar value or a single-value tensor. The stacked predicitions will\n",
                    "rendered": {
                      "text": "        names. The desired format is [left bounadary, top boudnary, right\n        boundary, bottom boundary, class id, confidence score]. e.g. ['xmin',\n        'ymin', 'xmax', 'ymax', 'class_id', 'scores']\n      num_detections_key: (Optional) An output name in which to find the number\n        of detections to use for evaluation for a given example. It does nothing\n        if predictions_to_stack is not set. The value for this output should be\n        a scalar value or a single-value tensor. The stacked predicitions will\n",
                      "markdown": "`        names. The desired format is [left bounadary, top boudnary, right\n        boundary, bottom boundary, class id, confidence score]. e.g. ['xmin',\n        'ymin', 'xmax', 'ymax', 'class_id', 'scores']\n      num_detections_key: (Optional) An output name in which to find the number\n        of detections to use for evaluation for a given example. It does nothing\n        if predictions_to_stack is not set. The value for this output should be\n        a scalar value or a single-value tensor. The stacked predicitions will\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/object_detection_metrics.py"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 53,
                  "endLine": 89,
                  "endColumn": 58,
                  "snippet": {
                    "text": "        'ymin', 'xmax', 'ymax', 'class_id']\n      predictions_to_stack: (Optional) Output names for columns to be stacked as\n        a single numpy array as the prediction. It should be the model's output\n        names. The desired format is [left bounadary, top boudnary, right\n        boundary, bottom boundary, class id, confidence score]. e.g. ['xmin',\n        'ymin', 'xmax', 'ymax', 'class_id', 'scores']\n      num_detections_key: (Optional) An output name in which to find the number\n",
                    "rendered": {
                      "text": "        'ymin', 'xmax', 'ymax', 'class_id']\n      predictions_to_stack: (Optional) Output names for columns to be stacked as\n        a single numpy array as the prediction. It should be the model's output\n        names. The desired format is [left bounadary, top boudnary, right\n        boundary, bottom boundary, class id, confidence score]. e.g. ['xmin',\n        'ymin', 'xmax', 'ymax', 'class_id', 'scores']\n      num_detections_key: (Optional) An output name in which to find the number\n",
                      "markdown": "`        'ymin', 'xmax', 'ymax', 'class_id']\n      predictions_to_stack: (Optional) Output names for columns to be stacked as\n        a single numpy array as the prediction. It should be the model's output\n        names. The desired format is [left bounadary, top boudnary, right\n        boundary, bottom boundary, class id, confidence score]. e.g. ['xmin',\n        'ymin', 'xmax', 'ymax', 'class_id', 'scores']\n      num_detections_key: (Optional) An output name in which to find the number\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/object_detection_metrics.py"
                },
                "region": {
                  "startLine": 84,
                  "startColumn": 72,
                  "endLine": 85,
                  "snippet": {
                    "text": "      name: (Optional) string name of the metric instance.\n      labels_to_stack: (Optional) Keys for columns to be stacked as a single\n        numpy array as the labels. It is searched under the key labels, features\n        and transformed features. The desired format is [left bounadary, top\n        boudnary, right boundary, bottom boundary, class id]. e.g. ['xmin',\n        'ymin', 'xmax', 'ymax', 'class_id']\n      predictions_to_stack: (Optional) Output names for columns to be stacked as\n        a single numpy array as the prediction. It should be the model's output\n",
                    "rendered": {
                      "text": "      name: (Optional) string name of the metric instance.\n      labels_to_stack: (Optional) Keys for columns to be stacked as a single\n        numpy array as the labels. It is searched under the key labels, features\n        and transformed features. The desired format is [left bounadary, top\n        boudnary, right boundary, bottom boundary, class id]. e.g. ['xmin',\n        'ymin', 'xmax', 'ymax', 'class_id']\n      predictions_to_stack: (Optional) Output names for columns to be stacked as\n        a single numpy array as the prediction. It should be the model's output\n",
                      "markdown": "`      name: (Optional) string name of the metric instance.\n      labels_to_stack: (Optional) Keys for columns to be stacked as a single\n        numpy array as the labels. It is searched under the key labels, features\n        and transformed features. The desired format is [left bounadary, top\n        boudnary, right boundary, bottom boundary, class id]. e.g. ['xmin',\n        'ymin', 'xmax', 'ymax', 'class_id']\n      predictions_to_stack: (Optional) Output names for columns to be stacked as\n        a single numpy array as the prediction. It should be the model's output\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/object_detection_confusion_matrix"
                },
                "region": {
                  "startLine": 67,
                  "startColumn": 19,
                  "endLine": 67,
                  "endColumn": 23,
                  "snippet": {
                    "text": "        },\n        # This is a binary classification case, the iou matrix should be:\n        # [[0., 2/3], [0., 4/11]]\n        # The match at iou_threshold = 0.5 is\n        # gt_matches: [[-1, 0]] dt_matches: [[1, -1]]\n        # Results after preprocess:\n        #   'labels': np.asarray([1., 1., 0.]),\n",
                    "rendered": {
                      "text": "        },\n        # This is a binary classification case, the iou matrix should be:\n        # [[0., 2/3], [0., 4/11]]\n        # The match at iou_threshold = 0.5 is\n        # gt_matches: [[-1, 0]] dt_matches: [[1, -1]]\n        # Results after preprocess:\n        #   'labels': np.asarray([1., 1., 0.]),\n",
                      "markdown": "`        },\n        # This is a binary classification case, the iou matrix should be:\n        # [[0., 2/3], [0., 4/11]]\n        # The match at iou_threshold = 0.5 is\n        # gt_matches: [[-1, 0]] dt_matches: [[1, -1]]\n        # Results after preprocess:\n        #   'labels': np.asarray([1., 1., 0.]),\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/object_detection_confusion_matrix"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 19,
                  "endLine": 49,
                  "endColumn": 23,
                  "snippet": {
                    "text": "        }\n        \"\"\", tfma.EvalConfig())\n    extracts = [\n        # The match at iou_threshold = 0.5 is\n        # gt_matches: [[0]] dt_matches: [[0, -1]]\n        # Results after preprocess:\n        #   'labels': np.asarray([1., 0.]),\n",
                    "rendered": {
                      "text": "        }\n        \"\"\", tfma.EvalConfig())\n    extracts = [\n        # The match at iou_threshold = 0.5 is\n        # gt_matches: [[0]] dt_matches: [[0, -1]]\n        # Results after preprocess:\n        #   'labels': np.asarray([1., 0.]),\n",
                      "markdown": "`        }\n        \"\"\", tfma.EvalConfig())\n    extracts = [\n        # The match at iou_threshold = 0.5 is\n        # gt_matches: [[0]] dt_matches: [[0, -1]]\n        # Results after preprocess:\n        #   'labels': np.asarray([1., 0.]),\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/object_detection_confusion_matrix"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/object_detection_confusion_matrix"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/object_detection_confusion_matrix"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 63,
                  "endLine": 77,
                  "endColumn": 69,
                  "snippet": {
                    "text": "        names. The desired format is [left bounadary, top boudnary, right\n        boundary, bottom boundary, class id, confidence score]. e.g. ['xmin',\n        'ymin', 'xmax', 'ymax', 'class_id', 'scores']\n      num_detections_key: (Optional) An output name in which to find the number\n        of detections to use for evaluation for a given example. It does nothing\n        if predictions_to_stack is not set. The value for this output should be\n        a scalar value or a single-value tensor. The stacked predicitions will\n",
                    "rendered": {
                      "text": "        names. The desired format is [left bounadary, top boudnary, right\n        boundary, bottom boundary, class id, confidence score]. e.g. ['xmin',\n        'ymin', 'xmax', 'ymax', 'class_id', 'scores']\n      num_detections_key: (Optional) An output name in which to find the number\n        of detections to use for evaluation for a given example. It does nothing\n        if predictions_to_stack is not set. The value for this output should be\n        a scalar value or a single-value tensor. The stacked predicitions will\n",
                      "markdown": "`        names. The desired format is [left bounadary, top boudnary, right\n        boundary, bottom boundary, class id, confidence score]. e.g. ['xmin',\n        'ymin', 'xmax', 'ymax', 'class_id', 'scores']\n      num_detections_key: (Optional) An output name in which to find the number\n        of detections to use for evaluation for a given example. It does nothing\n        if predictions_to_stack is not set. The value for this output should be\n        a scalar value or a single-value tensor. The stacked predicitions will\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/object_detection_confusion_matrix"
                },
                "region": {
                  "startLine": 74,
                  "startColumn": 53,
                  "endLine": 74,
                  "endColumn": 58,
                  "snippet": {
                    "text": "        'ymin', 'xmax', 'ymax', 'class_id']\n      predictions_to_stack: (Optional) Output names for columns to be stacked as\n        a single numpy array as the prediction. It should be the model's output\n        names. The desired format is [left bounadary, top boudnary, right\n        boundary, bottom boundary, class id, confidence score]. e.g. ['xmin',\n        'ymin', 'xmax', 'ymax', 'class_id', 'scores']\n      num_detections_key: (Optional) An output name in which to find the number\n",
                    "rendered": {
                      "text": "        'ymin', 'xmax', 'ymax', 'class_id']\n      predictions_to_stack: (Optional) Output names for columns to be stacked as\n        a single numpy array as the prediction. It should be the model's output\n        names. The desired format is [left bounadary, top boudnary, right\n        boundary, bottom boundary, class id, confidence score]. e.g. ['xmin',\n        'ymin', 'xmax', 'ymax', 'class_id', 'scores']\n      num_detections_key: (Optional) An output name in which to find the number\n",
                      "markdown": "`        'ymin', 'xmax', 'ymax', 'class_id']\n      predictions_to_stack: (Optional) Output names for columns to be stacked as\n        a single numpy array as the prediction. It should be the model's output\n        names. The desired format is [left bounadary, top boudnary, right\n        boundary, bottom boundary, class id, confidence score]. e.g. ['xmin',\n        'ymin', 'xmax', 'ymax', 'class_id', 'scores']\n      num_detections_key: (Optional) An output name in which to find the number\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/object_detection_confusion_matrix"
                },
                "region": {
                  "startLine": 69,
                  "startColumn": 72,
                  "endLine": 70,
                  "snippet": {
                    "text": "        single image. Default to None.\n      labels_to_stack: (Optional) Keys for columns to be stacked as a single\n        numpy array as the labels. It is searched under the key labels, features\n        and transformed features. The desired format is [left bounadary, top\n        boudnary, right boundary, bottom boundary, class id]. e.g. ['xmin',\n        'ymin', 'xmax', 'ymax', 'class_id']\n      predictions_to_stack: (Optional) Output names for columns to be stacked as\n        a single numpy array as the prediction. It should be the model's output\n",
                    "rendered": {
                      "text": "        single image. Default to None.\n      labels_to_stack: (Optional) Keys for columns to be stacked as a single\n        numpy array as the labels. It is searched under the key labels, features\n        and transformed features. The desired format is [left bounadary, top\n        boudnary, right boundary, bottom boundary, class id]. e.g. ['xmin',\n        'ymin', 'xmax', 'ymax', 'class_id']\n      predictions_to_stack: (Optional) Output names for columns to be stacked as\n        a single numpy array as the prediction. It should be the model's output\n",
                      "markdown": "`        single image. Default to None.\n      labels_to_stack: (Optional) Keys for columns to be stacked as a single\n        numpy array as the labels. It is searched under the key labels, features\n        and transformed features. The desired format is [left bounadary, top\n        boudnary, right boundary, bottom boundary, class id]. e.g. ['xmin',\n        'ymin', 'xmax', 'ymax', 'class_id']\n      predictions_to_stack: (Optional) Output names for columns to be stacked as\n        a single numpy array as the prediction. It should be the model's output\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/object_detection_confusion_matrix"
                },
                "region": {
                  "startLine": 137,
                  "startColumn": 19,
                  "endLine": 137,
                  "endColumn": 23,
                  "snippet": {
                    "text": "        },\n        # This is a binary classification case, the iou matrix should be:\n        # [[0., 2/3], [0., 4/11]]\n        # The match at iou_threshold = 0.5 is\n        # gt_matches: [[-1, 0]] dt_matches: [[1, -1]]\n        # Results after preprocess:\n        #   'labels': np.asarray([1., 1., 0.]),\n",
                    "rendered": {
                      "text": "        },\n        # This is a binary classification case, the iou matrix should be:\n        # [[0., 2/3], [0., 4/11]]\n        # The match at iou_threshold = 0.5 is\n        # gt_matches: [[-1, 0]] dt_matches: [[1, -1]]\n        # Results after preprocess:\n        #   'labels': np.asarray([1., 1., 0.]),\n",
                      "markdown": "`        },\n        # This is a binary classification case, the iou matrix should be:\n        # [[0., 2/3], [0., 4/11]]\n        # The match at iou_threshold = 0.5 is\n        # gt_matches: [[-1, 0]] dt_matches: [[1, -1]]\n        # Results after preprocess:\n        #   'labels': np.asarray([1., 1., 0.]),\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/object_detection_confusion_matrix"
                },
                "region": {
                  "startLine": 120,
                  "startColumn": 23,
                  "endLine": 120,
                  "endColumn": 27,
                  "snippet": {
                    "text": "\n    extracts = [\n        {\n            # The match at iou_threshold = 0.5 is\n            # gt_matches: [[0]] dt_matches: [[0, -1]]\n            # Results after preprocess:\n            #   'labels': np.asarray([1., 0.]),\n",
                    "rendered": {
                      "text": "\n    extracts = [\n        {\n            # The match at iou_threshold = 0.5 is\n            # gt_matches: [[0]] dt_matches: [[0, -1]]\n            # Results after preprocess:\n            #   'labels': np.asarray([1., 0.]),\n",
                      "markdown": "`\n    extracts = [\n        {\n            # The match at iou_threshold = 0.5 is\n            # gt_matches: [[0]] dt_matches: [[0, -1]]\n            # Results after preprocess:\n            #   'labels': np.asarray([1., 0.]),\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/object_detection_confusion_matrix"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/slicer/__init__.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/notebook/jupyter/tfma_widget/__init__.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/score_distribution_plot.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 166,
                  "startColumn": 180,
                  "endLine": 166,
                  "endColumn": 186,
                  "snippet": {
                    "text": ";r||(r=document.implementation.createHTMLDocument(\"temp\"),R.Eb=r,r.Pa=r.createElement(\"base\"),r.head.appendChild(r.Pa),\nr.Oa=r.createElement(\"a\"));r.Pa.href=q;r.Oa.href=m;return r.Oa.href||m}},na={async:!0,load:function(m,q,r){if(m)if(m.match(/^data:/)){m=m.split(\",\");var v=m[1];v=-1<m[0].indexOf(\";base64\")?atob(v):decodeURIComponent(v);q(v)}else{var C=new XMLHttpRequest;C.open(\"GET\",m,na.async);C.onload=function(){var y,E=null!=(y=C.responseURL||C.getResponseHeader(\"Location\"))?y:void 0;E&&0===E.indexOf(\"/\")&&(E=(location.origin||location.protocol+\"//\"+location.host)+E);y=C.response||C.responseText",
                    "rendered": {
                      "text": ";r||(r=document.implementation.createHTMLDocument(\"temp\"),R.Eb=r,r.Pa=r.createElement(\"base\"),r.head.appendChild(r.Pa),\nr.Oa=r.createElement(\"a\"));r.Pa.href=q;r.Oa.href=m;return r.Oa.href||m}},na={async:!0,load:function(m,q,r){if(m)if(m.match(/^data:/)){m=m.split(\",\");var v=m[1];v=-1<m[0].indexOf(\";base64\")?atob(v):decodeURIComponent(v);q(v)}else{var C=new XMLHttpRequest;C.open(\"GET\",m,na.async);C.onload=function(){var y,E=null!=(y=C.responseURL||C.getResponseHeader(\"Location\"))?y:void 0;E&&0===E.indexOf(\"/\")&&(E=(location.origin||location.protocol+\"//\"+location.host)+E);y=C.response||C.responseText",
                      "markdown": "`;r||(r=document.implementation.createHTMLDocument(\"temp\"),R.Eb=r,r.Pa=r.createElement(\"base\"),r.head.appendChild(r.Pa),\nr.Oa=r.createElement(\"a\"));r.Pa.href=q;r.Oa.href=m;return r.Oa.href||m}},na={async:!0,load:function(m,q,r){if(m)if(m.match(/^data:/)){m=m.split(\",\");var v=m[1];v=-1<m[0].indexOf(\";base64\")?atob(v):decodeURIComponent(v);q(v)}else{var C=new XMLHttpRequest;C.open(\"GET\",m,na.async);C.onload=function(){var y,E=null!=(y=C.responseURL||C.getResponseHeader(\"Location\"))?y:void 0;E&&0===E.indexOf(\"/\")&&(E=(location.origin||location.protocol+\"//\"+location.host)+E);y=C.response||C.responseText`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 812,
                  "startColumn": 9,
                  "endLine": 812,
                  "endColumn": 1547,
                  "snippet": {
                    "text": "ac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4\")),\nUu=bf(ka(\"0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921\")),\nsn=Math.abs,Ia=Math.atan2,ec=Math.cos,us=Math.max,Yh=Math.min,pb=Math.sin,Dc=Math.sqrt,Kb=Math.PI,cf=Kb/2,Lb=2*Kb;Dl.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){(this._line||0!==this._line&&1===this._poin",
                    "rendered": {
                      "text": "ac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4\")),\nUu=bf(ka(\"0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921\")),\nsn=Math.abs,Ia=Math.atan2,ec=Math.cos,us=Math.max,Yh=Math.min,pb=Math.sin,Dc=Math.sqrt,Kb=Math.PI,cf=Kb/2,Lb=2*Kb;Dl.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){(this._line||0!==this._line&&1===this._poin",
                      "markdown": "`ac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4\")),\nUu=bf(ka(\"0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921\")),\nsn=Math.abs,Ia=Math.atan2,ec=Math.cos,us=Math.max,Yh=Math.min,pb=Math.sin,Dc=Math.sqrt,Kb=Math.PI,cf=Kb/2,Lb=2*Kb;Dl.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){(this._line||0!==this._line&&1===this._poin`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 811,
                  "startColumn": 9,
                  "endLine": 811,
                  "endColumn": 1547,
                  "snippet": {
                    "text": "a772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf\")),\nTu=bf(ka(\"00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4\")),\nUu=bf(ka(\"0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400",
                    "rendered": {
                      "text": "a772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf\")),\nTu=bf(ka(\"00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4\")),\nUu=bf(ka(\"0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400",
                      "markdown": "`a772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf\")),\nTu=bf(ka(\"00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4\")),\nUu=bf(ka(\"0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 810,
                  "startColumn": 9,
                  "endLine": 810,
                  "endColumn": 1547,
                  "snippet": {
                    "text": "d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725\")),\nSu=bf(ka(\"00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf\")),\nTu=bf(ka(\"00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09",
                    "rendered": {
                      "text": "d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725\")),\nSu=bf(ka(\"00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf\")),\nTu=bf(ka(\"00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09",
                      "markdown": "`d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725\")),\nSu=bf(ka(\"00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf\")),\nTu=bf(ka(\"00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 809,
                  "startColumn": 99,
                  "endLine": 809,
                  "endColumn": 1637,
                  "snippet": {
                    "text": "018c2d04\",\"fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d948018c2d04\",\"fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d94801a636037f2704\").map(ka),Lu=ua(rn),Mu=rf(db(300,.5,0),db(-240,.5,1)),Nu=rf(db(-100,.75,.35),db(80,\n1.5,.8)),Ou=rf(db(260,.75,.35),db(80,1.5,.8)),zf=db(),Af=hc(),Pu=Math.PI/3,Qu=2*Math.PI/3,Ru=bf(ka(\"44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725\")),\nSu=bf(ka(\"00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f11633111653310673410",
                    "rendered": {
                      "text": "018c2d04\",\"fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d948018c2d04\",\"fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d94801a636037f2704\").map(ka),Lu=ua(rn),Mu=rf(db(300,.5,0),db(-240,.5,1)),Nu=rf(db(-100,.75,.35),db(80,\n1.5,.8)),Ou=rf(db(260,.75,.35),db(80,1.5,.8)),zf=db(),Af=hc(),Pu=Math.PI/3,Qu=2*Math.PI/3,Ru=bf(ka(\"44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725\")),\nSu=bf(ka(\"00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f11633111653310673410",
                      "markdown": "`018c2d04\",\"fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d948018c2d04\",\"fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d94801a636037f2704\").map(ka),Lu=ua(rn),Mu=rf(db(300,.5,0),db(-240,.5,1)),Nu=rf(db(-100,.75,.35),db(80,\n1.5,.8)),Ou=rf(db(260,.75,.35),db(80,1.5,.8)),zf=db(),Af=hc(),Pu=Math.PI/3,Qu=2*Math.PI/3,Ru=bf(ka(\"44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725\")),\nSu=bf(ka(\"00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f11633111653310673410`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 808,
                  "startColumn": 362,
                  "endLine": 808,
                  "endColumn": 418,
                  "snippet": {
                    "text": "d2fcbba1fc9272fb6a4aef3b2ccb181da50f1567000d\").map(ka),Ku=ua(qn),rn=Array(3).concat(\"fee6cefdae6be6550d\",\"feeddefdbe85fd8d3cd94701\",\"feeddefdbe85fd8d3ce6550da63603\",\"feeddefdd0a2fdae6bfd8d3ce6550da63603\",\"feeddefdd0a2fdae6bfd8d3cf16913d948018c2d04\",\"fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d948018c2d04\",\"fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d94801a636037f2704\").map(ka),Lu=ua(rn),Mu=rf(db(300,.5,0),db(-240,.5,1)),Nu=rf(db(-100,.75,.35),db(80,\n1.5,.8)),Ou=rf(db(260,.75,.35),db(80,1.5,.8)),zf=db(),Af=hc(),Pu=Math.PI/3,Qu=2*Math.PI/3,Ru=bf(ka(\"44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d48",
                    "rendered": {
                      "text": "d2fcbba1fc9272fb6a4aef3b2ccb181da50f1567000d\").map(ka),Ku=ua(qn),rn=Array(3).concat(\"fee6cefdae6be6550d\",\"feeddefdbe85fd8d3cd94701\",\"feeddefdbe85fd8d3ce6550da63603\",\"feeddefdd0a2fdae6bfd8d3ce6550da63603\",\"feeddefdd0a2fdae6bfd8d3cf16913d948018c2d04\",\"fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d948018c2d04\",\"fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d94801a636037f2704\").map(ka),Lu=ua(rn),Mu=rf(db(300,.5,0),db(-240,.5,1)),Nu=rf(db(-100,.75,.35),db(80,\n1.5,.8)),Ou=rf(db(260,.75,.35),db(80,1.5,.8)),zf=db(),Af=hc(),Pu=Math.PI/3,Qu=2*Math.PI/3,Ru=bf(ka(\"44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d48",
                      "markdown": "`d2fcbba1fc9272fb6a4aef3b2ccb181da50f1567000d\").map(ka),Ku=ua(qn),rn=Array(3).concat(\"fee6cefdae6be6550d\",\"feeddefdbe85fd8d3cd94701\",\"feeddefdbe85fd8d3ce6550da63603\",\"feeddefdd0a2fdae6bfd8d3ce6550da63603\",\"feeddefdd0a2fdae6bfd8d3cf16913d948018c2d04\",\"fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d948018c2d04\",\"fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d94801a636037f2704\").map(ka),Lu=ua(rn),Mu=rf(db(300,.5,0),db(-240,.5,1)),Nu=rf(db(-100,.75,.35),db(80,\n1.5,.8)),Ou=rf(db(260,.75,.35),db(80,1.5,.8)),zf=db(),Af=hc(),Pu=Math.PI/3,Qu=2*Math.PI/3,Ru=bf(ka(\"44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d48`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 808,
                  "startColumn": 311,
                  "endLine": 808,
                  "endColumn": 361,
                  "snippet": {
                    "text": "d2fcbba1fc9272fb6a4aef3b2ccb181d99000d\",\"fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181da50f1567000d\").map(ka),Ku=ua(qn),rn=Array(3).concat(\"fee6cefdae6be6550d\",\"feeddefdbe85fd8d3cd94701\",\"feeddefdbe85fd8d3ce6550da63603\",\"feeddefdd0a2fdae6bfd8d3ce6550da63603\",\"feeddefdd0a2fdae6bfd8d3cf16913d948018c2d04\",\"fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d948018c2d04\",\"fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d94801a636037f2704\").map(ka),Lu=ua(rn),Mu=rf(db(300,.5,0),db(-240,.5,1)),Nu=rf(db(-100,.75,.35),db(80,\n1.5,.8)),Ou=rf(db(260,.75,.35),db(80,1.5,.8)),zf=db(),Af=hc(),Pu=Math.PI/3,Qu=2*Math.PI/3,Ru=bf(ka(\"44015444025645045745055946075a46085c460a5d460b5e470d60470e6",
                    "rendered": {
                      "text": "d2fcbba1fc9272fb6a4aef3b2ccb181d99000d\",\"fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181da50f1567000d\").map(ka),Ku=ua(qn),rn=Array(3).concat(\"fee6cefdae6be6550d\",\"feeddefdbe85fd8d3cd94701\",\"feeddefdbe85fd8d3ce6550da63603\",\"feeddefdd0a2fdae6bfd8d3ce6550da63603\",\"feeddefdd0a2fdae6bfd8d3cf16913d948018c2d04\",\"fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d948018c2d04\",\"fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d94801a636037f2704\").map(ka),Lu=ua(rn),Mu=rf(db(300,.5,0),db(-240,.5,1)),Nu=rf(db(-100,.75,.35),db(80,\n1.5,.8)),Ou=rf(db(260,.75,.35),db(80,1.5,.8)),zf=db(),Af=hc(),Pu=Math.PI/3,Qu=2*Math.PI/3,Ru=bf(ka(\"44015444025645045745055946075a46085c460a5d460b5e470d60470e6",
                      "markdown": "`d2fcbba1fc9272fb6a4aef3b2ccb181d99000d\",\"fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181da50f1567000d\").map(ka),Ku=ua(qn),rn=Array(3).concat(\"fee6cefdae6be6550d\",\"feeddefdbe85fd8d3cd94701\",\"feeddefdbe85fd8d3ce6550da63603\",\"feeddefdd0a2fdae6bfd8d3ce6550da63603\",\"feeddefdd0a2fdae6bfd8d3cf16913d948018c2d04\",\"fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d948018c2d04\",\"fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d94801a636037f2704\").map(ka),Lu=ua(rn),Mu=rf(db(300,.5,0),db(-240,.5,1)),Nu=rf(db(-100,.75,.35),db(80,\n1.5,.8)),Ou=rf(db(260,.75,.35),db(80,1.5,.8)),zf=db(),Af=hc(),Pu=Math.PI/3,Qu=2*Math.PI/3,Ru=bf(ka(\"44015444025645045745055946075a46085c460a5d460b5e470d60470e6`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 808,
                  "startColumn": 266,
                  "endLine": 808,
                  "endColumn": 310,
                  "snippet": {
                    "text": "1fc9272fb6a4aef3b2ccb181d99000d\",\n\"fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181d99000d\",\"fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181da50f1567000d\").map(ka),Ku=ua(qn),rn=Array(3).concat(\"fee6cefdae6be6550d\",\"feeddefdbe85fd8d3cd94701\",\"feeddefdbe85fd8d3ce6550da63603\",\"feeddefdd0a2fdae6bfd8d3ce6550da63603\",\"feeddefdd0a2fdae6bfd8d3cf16913d948018c2d04\",\"fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d948018c2d04\",\"fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d94801a636037f2704\").map(ka),Lu=ua(rn),Mu=rf(db(300,.5,0),db(-240,.5,1)),Nu=rf(db(-100,.75,.35),db(80,\n1.5,.8)),Ou=rf(db(260,.75,.35),db(80,1.5,.8)),zf=db(),Af=hc(),Pu=Math.PI/3,Qu=2*Math.PI/3,Ru=bf(ka(\"44015444",
                    "rendered": {
                      "text": "1fc9272fb6a4aef3b2ccb181d99000d\",\n\"fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181d99000d\",\"fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181da50f1567000d\").map(ka),Ku=ua(qn),rn=Array(3).concat(\"fee6cefdae6be6550d\",\"feeddefdbe85fd8d3cd94701\",\"feeddefdbe85fd8d3ce6550da63603\",\"feeddefdd0a2fdae6bfd8d3ce6550da63603\",\"feeddefdd0a2fdae6bfd8d3cf16913d948018c2d04\",\"fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d948018c2d04\",\"fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d94801a636037f2704\").map(ka),Lu=ua(rn),Mu=rf(db(300,.5,0),db(-240,.5,1)),Nu=rf(db(-100,.75,.35),db(80,\n1.5,.8)),Ou=rf(db(260,.75,.35),db(80,1.5,.8)),zf=db(),Af=hc(),Pu=Math.PI/3,Qu=2*Math.PI/3,Ru=bf(ka(\"44015444",
                      "markdown": "`1fc9272fb6a4aef3b2ccb181d99000d\",\n\"fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181d99000d\",\"fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181da50f1567000d\").map(ka),Ku=ua(qn),rn=Array(3).concat(\"fee6cefdae6be6550d\",\"feeddefdbe85fd8d3cd94701\",\"feeddefdbe85fd8d3ce6550da63603\",\"feeddefdd0a2fdae6bfd8d3ce6550da63603\",\"feeddefdd0a2fdae6bfd8d3cf16913d948018c2d04\",\"fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d948018c2d04\",\"fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d94801a636037f2704\").map(ka),Lu=ua(rn),Mu=rf(db(300,.5,0),db(-240,.5,1)),Nu=rf(db(-100,.75,.35),db(80,\n1.5,.8)),Ou=rf(db(260,.75,.35),db(80,1.5,.8)),zf=db(),Af=hc(),Pu=Math.PI/3,Qu=2*Math.PI/3,Ru=bf(ka(\"44015444`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 808,
                  "startColumn": 51,
                  "endLine": 808,
                  "endColumn": 107,
                  "snippet": {
                    "text": "5dadaebbcbddc9e9ac8807dba6a51a354278f3f007d\").map(ka),Ju=ua(pn),qn=Array(3).concat(\"fee0d2fc9272de2d26\",\"fee5d9fcae91fb6a4acb181d\",\"fee5d9fcae91fb6a4ade2d26a50f15\",\"fee5d9fcbba1fc9272fb6a4ade2d26a50f15\",\"fee5d9fcbba1fc9272fb6a4aef3b2ccb181d99000d\",\n\"fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181d99000d\",\"fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181da50f1567000d\").map(ka),Ku=ua(qn),rn=Array(3).concat(\"fee6cefdae6be6550d\",\"feeddefdbe85fd8d3cd94701\",\"feeddefdbe85fd8d3ce6550da63603\",\"feeddefdd0a2fdae6bfd8d3ce6550da63603\",\"feeddefdd0a2fdae6bfd8d3cf16913d948018c2d04\",\"fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d948018c2d04\",\"fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d94801a6",
                    "rendered": {
                      "text": "5dadaebbcbddc9e9ac8807dba6a51a354278f3f007d\").map(ka),Ju=ua(pn),qn=Array(3).concat(\"fee0d2fc9272de2d26\",\"fee5d9fcae91fb6a4acb181d\",\"fee5d9fcae91fb6a4ade2d26a50f15\",\"fee5d9fcbba1fc9272fb6a4ade2d26a50f15\",\"fee5d9fcbba1fc9272fb6a4aef3b2ccb181d99000d\",\n\"fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181d99000d\",\"fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181da50f1567000d\").map(ka),Ku=ua(qn),rn=Array(3).concat(\"fee6cefdae6be6550d\",\"feeddefdbe85fd8d3cd94701\",\"feeddefdbe85fd8d3ce6550da63603\",\"feeddefdd0a2fdae6bfd8d3ce6550da63603\",\"feeddefdd0a2fdae6bfd8d3cf16913d948018c2d04\",\"fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d948018c2d04\",\"fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d94801a6",
                      "markdown": "`5dadaebbcbddc9e9ac8807dba6a51a354278f3f007d\").map(ka),Ju=ua(pn),qn=Array(3).concat(\"fee0d2fc9272de2d26\",\"fee5d9fcae91fb6a4acb181d\",\"fee5d9fcae91fb6a4ade2d26a50f15\",\"fee5d9fcbba1fc9272fb6a4ade2d26a50f15\",\"fee5d9fcbba1fc9272fb6a4aef3b2ccb181d99000d\",\n\"fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181d99000d\",\"fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181da50f1567000d\").map(ka),Ku=ua(qn),rn=Array(3).concat(\"fee6cefdae6be6550d\",\"feeddefdbe85fd8d3cd94701\",\"feeddefdbe85fd8d3ce6550da63603\",\"feeddefdd0a2fdae6bfd8d3ce6550da63603\",\"feeddefdd0a2fdae6bfd8d3cf16913d948018c2d04\",\"fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d948018c2d04\",\"fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d94801a6`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 808,
                  "endLine": 808,
                  "endColumn": 50,
                  "snippet": {
                    "text": "5dadaebbcbddc9e9ac8807dba6a51a34a1486\",\"fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a354278f3f007d\").map(ka),Ju=ua(pn),qn=Array(3).concat(\"fee0d2fc9272de2d26\",\"fee5d9fcae91fb6a4acb181d\",\"fee5d9fcae91fb6a4ade2d26a50f15\",\"fee5d9fcbba1fc9272fb6a4ade2d26a50f15\",\"fee5d9fcbba1fc9272fb6a4aef3b2ccb181d99000d\",\n\"fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181d99000d\",\"fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181da50f1567000d\").map(ka),Ku=ua(qn),rn=Array(3).concat(\"fee6cefdae6be6550d\",\"feeddefdbe85fd8d3cd94701\",\"feeddefdbe85fd8d3ce6550da63603\",\"feeddefdd0a2fdae6bfd8d3ce6550da63603\",\"feeddefdd0a2fdae6bfd8d3cf16913d948018c2d04\",\"fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d9",
                    "rendered": {
                      "text": "5dadaebbcbddc9e9ac8807dba6a51a34a1486\",\"fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a354278f3f007d\").map(ka),Ju=ua(pn),qn=Array(3).concat(\"fee0d2fc9272de2d26\",\"fee5d9fcae91fb6a4acb181d\",\"fee5d9fcae91fb6a4ade2d26a50f15\",\"fee5d9fcbba1fc9272fb6a4ade2d26a50f15\",\"fee5d9fcbba1fc9272fb6a4aef3b2ccb181d99000d\",\n\"fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181d99000d\",\"fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181da50f1567000d\").map(ka),Ku=ua(qn),rn=Array(3).concat(\"fee6cefdae6be6550d\",\"feeddefdbe85fd8d3cd94701\",\"feeddefdbe85fd8d3ce6550da63603\",\"feeddefdd0a2fdae6bfd8d3ce6550da63603\",\"feeddefdd0a2fdae6bfd8d3cf16913d948018c2d04\",\"fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d9",
                      "markdown": "`5dadaebbcbddc9e9ac8807dba6a51a34a1486\",\"fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a354278f3f007d\").map(ka),Ju=ua(pn),qn=Array(3).concat(\"fee0d2fc9272de2d26\",\"fee5d9fcae91fb6a4acb181d\",\"fee5d9fcae91fb6a4ade2d26a50f15\",\"fee5d9fcbba1fc9272fb6a4ade2d26a50f15\",\"fee5d9fcbba1fc9272fb6a4aef3b2ccb181d99000d\",\n\"fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181d99000d\",\"fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181da50f1567000d\").map(ka),Ku=ua(qn),rn=Array(3).concat(\"fee6cefdae6be6550d\",\"feeddefdbe85fd8d3cd94701\",\"feeddefdbe85fd8d3ce6550da63603\",\"feeddefdd0a2fdae6bfd8d3ce6550da63603\",\"feeddefdd0a2fdae6bfd8d3cf16913d948018c2d04\",\"fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d9`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 807,
                  "startColumn": 460,
                  "endLine": 807,
                  "endColumn": 504,
                  "snippet": {
                    "text": "ebbcbddc9e9ac8807dba6a51a34a1486\",\"fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a34a1486\",\"fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a354278f3f007d\").map(ka),Ju=ua(pn),qn=Array(3).concat(\"fee0d2fc9272de2d26\",\"fee5d9fcae91fb6a4acb181d\",\"fee5d9fcae91fb6a4ade2d26a50f15\",\"fee5d9fcbba1fc9272fb6a4ade2d26a50f15\",\"fee5d9fcbba1fc9272fb6a4aef3b2ccb181d99000d\",\n\"fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181d99000d\",\"fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181da50f1567000d\").map(ka),Ku=ua(qn),rn=Array(3).concat(\"fee6cefdae6be6550d\",\"feeddefdbe85fd8d3cd94701\",\"feeddefdbe85fd8d3ce6550da63603\",\"feeddefdd0a2fdae6bfd8d3ce6550da63603\",\"feeddefdd0a2fdae6bfd8d3cf16913d",
                    "rendered": {
                      "text": "ebbcbddc9e9ac8807dba6a51a34a1486\",\"fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a34a1486\",\"fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a354278f3f007d\").map(ka),Ju=ua(pn),qn=Array(3).concat(\"fee0d2fc9272de2d26\",\"fee5d9fcae91fb6a4acb181d\",\"fee5d9fcae91fb6a4ade2d26a50f15\",\"fee5d9fcbba1fc9272fb6a4ade2d26a50f15\",\"fee5d9fcbba1fc9272fb6a4aef3b2ccb181d99000d\",\n\"fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181d99000d\",\"fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181da50f1567000d\").map(ka),Ku=ua(qn),rn=Array(3).concat(\"fee6cefdae6be6550d\",\"feeddefdbe85fd8d3cd94701\",\"feeddefdbe85fd8d3ce6550da63603\",\"feeddefdd0a2fdae6bfd8d3ce6550da63603\",\"feeddefdd0a2fdae6bfd8d3cf16913d",
                      "markdown": "`ebbcbddc9e9ac8807dba6a51a34a1486\",\"fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a34a1486\",\"fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a354278f3f007d\").map(ka),Ju=ua(pn),qn=Array(3).concat(\"fee0d2fc9272de2d26\",\"fee5d9fcae91fb6a4acb181d\",\"fee5d9fcae91fb6a4ade2d26a50f15\",\"fee5d9fcbba1fc9272fb6a4ade2d26a50f15\",\"fee5d9fcbba1fc9272fb6a4aef3b2ccb181d99000d\",\n\"fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181d99000d\",\"fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181da50f1567000d\").map(ka),Ku=ua(qn),rn=Array(3).concat(\"fee6cefdae6be6550d\",\"feeddefdbe85fd8d3cd94701\",\"feeddefdbe85fd8d3ce6550da63603\",\"feeddefdd0a2fdae6bfd8d3ce6550da63603\",\"feeddefdd0a2fdae6bfd8d3cf16913d`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 807,
                  "startColumn": 245,
                  "endLine": 807,
                  "endColumn": 301,
                  "snippet": {
                    "text": "0d9d9d9bdbdbd969696737373525252252525000000\").map(ka),\nIu=ua(on),pn=Array(3).concat(\"efedf5bcbddc756bb1\",\"f2f0f7cbc9e29e9ac86a51a3\",\"f2f0f7cbc9e29e9ac8756bb154278f\",\"f2f0f7dadaebbcbddc9e9ac8756bb154278f\",\"f2f0f7dadaebbcbddc9e9ac8807dba6a51a34a1486\",\"fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a34a1486\",\"fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a354278f3f007d\").map(ka),Ju=ua(pn),qn=Array(3).concat(\"fee0d2fc9272de2d26\",\"fee5d9fcae91fb6a4acb181d\",\"fee5d9fcae91fb6a4ade2d26a50f15\",\"fee5d9fcbba1fc9272fb6a4ade2d26a50f15\",\"fee5d9fcbba1fc9272fb6a4aef3b2ccb181d99000d\",\n\"fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181d99000d\",\"fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181da",
                    "rendered": {
                      "text": "0d9d9d9bdbdbd969696737373525252252525000000\").map(ka),\nIu=ua(on),pn=Array(3).concat(\"efedf5bcbddc756bb1\",\"f2f0f7cbc9e29e9ac86a51a3\",\"f2f0f7cbc9e29e9ac8756bb154278f\",\"f2f0f7dadaebbcbddc9e9ac8756bb154278f\",\"f2f0f7dadaebbcbddc9e9ac8807dba6a51a34a1486\",\"fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a34a1486\",\"fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a354278f3f007d\").map(ka),Ju=ua(pn),qn=Array(3).concat(\"fee0d2fc9272de2d26\",\"fee5d9fcae91fb6a4acb181d\",\"fee5d9fcae91fb6a4ade2d26a50f15\",\"fee5d9fcbba1fc9272fb6a4ade2d26a50f15\",\"fee5d9fcbba1fc9272fb6a4aef3b2ccb181d99000d\",\n\"fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181d99000d\",\"fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181da",
                      "markdown": "`0d9d9d9bdbdbd969696737373525252252525000000\").map(ka),\nIu=ua(on),pn=Array(3).concat(\"efedf5bcbddc756bb1\",\"f2f0f7cbc9e29e9ac86a51a3\",\"f2f0f7cbc9e29e9ac8756bb154278f\",\"f2f0f7dadaebbcbddc9e9ac8756bb154278f\",\"f2f0f7dadaebbcbddc9e9ac8807dba6a51a34a1486\",\"fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a34a1486\",\"fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a354278f3f007d\").map(ka),Ju=ua(pn),qn=Array(3).concat(\"fee0d2fc9272de2d26\",\"fee5d9fcae91fb6a4acb181d\",\"fee5d9fcae91fb6a4ade2d26a50f15\",\"fee5d9fcbba1fc9272fb6a4ade2d26a50f15\",\"fee5d9fcbba1fc9272fb6a4aef3b2ccb181d99000d\",\n\"fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181d99000d\",\"fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181da`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 807,
                  "startColumn": 194,
                  "endLine": 807,
                  "endColumn": 244,
                  "snippet": {
                    "text": "0d9d9d9bdbdbd969696737373525252252525\",\"fffffff0f0f0d9d9d9bdbdbd969696737373525252252525000000\").map(ka),\nIu=ua(on),pn=Array(3).concat(\"efedf5bcbddc756bb1\",\"f2f0f7cbc9e29e9ac86a51a3\",\"f2f0f7cbc9e29e9ac8756bb154278f\",\"f2f0f7dadaebbcbddc9e9ac8756bb154278f\",\"f2f0f7dadaebbcbddc9e9ac8807dba6a51a34a1486\",\"fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a34a1486\",\"fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a354278f3f007d\").map(ka),Ju=ua(pn),qn=Array(3).concat(\"fee0d2fc9272de2d26\",\"fee5d9fcae91fb6a4acb181d\",\"fee5d9fcae91fb6a4ade2d26a50f15\",\"fee5d9fcbba1fc9272fb6a4ade2d26a50f15\",\"fee5d9fcbba1fc9272fb6a4aef3b2ccb181d99000d\",\n\"fff5f0fee0d2fcbba1fc9272fb6a4aef3b2cc",
                    "rendered": {
                      "text": "0d9d9d9bdbdbd969696737373525252252525\",\"fffffff0f0f0d9d9d9bdbdbd969696737373525252252525000000\").map(ka),\nIu=ua(on),pn=Array(3).concat(\"efedf5bcbddc756bb1\",\"f2f0f7cbc9e29e9ac86a51a3\",\"f2f0f7cbc9e29e9ac8756bb154278f\",\"f2f0f7dadaebbcbddc9e9ac8756bb154278f\",\"f2f0f7dadaebbcbddc9e9ac8807dba6a51a34a1486\",\"fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a34a1486\",\"fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a354278f3f007d\").map(ka),Ju=ua(pn),qn=Array(3).concat(\"fee0d2fc9272de2d26\",\"fee5d9fcae91fb6a4acb181d\",\"fee5d9fcae91fb6a4ade2d26a50f15\",\"fee5d9fcbba1fc9272fb6a4ade2d26a50f15\",\"fee5d9fcbba1fc9272fb6a4aef3b2ccb181d99000d\",\n\"fff5f0fee0d2fcbba1fc9272fb6a4aef3b2cc",
                      "markdown": "`0d9d9d9bdbdbd969696737373525252252525\",\"fffffff0f0f0d9d9d9bdbdbd969696737373525252252525000000\").map(ka),\nIu=ua(on),pn=Array(3).concat(\"efedf5bcbddc756bb1\",\"f2f0f7cbc9e29e9ac86a51a3\",\"f2f0f7cbc9e29e9ac8756bb154278f\",\"f2f0f7dadaebbcbddc9e9ac8756bb154278f\",\"f2f0f7dadaebbcbddc9e9ac8807dba6a51a34a1486\",\"fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a34a1486\",\"fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a354278f3f007d\").map(ka),Ju=ua(pn),qn=Array(3).concat(\"fee0d2fc9272de2d26\",\"fee5d9fcae91fb6a4acb181d\",\"fee5d9fcae91fb6a4ade2d26a50f15\",\"fee5d9fcbba1fc9272fb6a4ade2d26a50f15\",\"fee5d9fcbba1fc9272fb6a4aef3b2ccb181d99000d\",\n\"fff5f0fee0d2fcbba1fc9272fb6a4aef3b2cc`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 807,
                  "startColumn": 149,
                  "endLine": 807,
                  "endColumn": 193,
                  "snippet": {
                    "text": "9bdbdbd969696737373525252252525\",\"fffffff0f0f0d9d9d9bdbdbd969696737373525252252525\",\"fffffff0f0f0d9d9d9bdbdbd969696737373525252252525000000\").map(ka),\nIu=ua(on),pn=Array(3).concat(\"efedf5bcbddc756bb1\",\"f2f0f7cbc9e29e9ac86a51a3\",\"f2f0f7cbc9e29e9ac8756bb154278f\",\"f2f0f7dadaebbcbddc9e9ac8756bb154278f\",\"f2f0f7dadaebbcbddc9e9ac8807dba6a51a34a1486\",\"fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a34a1486\",\"fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a354278f3f007d\").map(ka),Ju=ua(pn),qn=Array(3).concat(\"fee0d2fc9272de2d26\",\"fee5d9fcae91fb6a4acb181d\",\"fee5d9fcae91fb6a4ade2d26a50f15\",\"fee5d9fcbba1fc9272fb6a4ade2d26a50f15\",\"fee5d9fcbba1fc9272fb6a4aef3b2ccb",
                    "rendered": {
                      "text": "9bdbdbd969696737373525252252525\",\"fffffff0f0f0d9d9d9bdbdbd969696737373525252252525\",\"fffffff0f0f0d9d9d9bdbdbd969696737373525252252525000000\").map(ka),\nIu=ua(on),pn=Array(3).concat(\"efedf5bcbddc756bb1\",\"f2f0f7cbc9e29e9ac86a51a3\",\"f2f0f7cbc9e29e9ac8756bb154278f\",\"f2f0f7dadaebbcbddc9e9ac8756bb154278f\",\"f2f0f7dadaebbcbddc9e9ac8807dba6a51a34a1486\",\"fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a34a1486\",\"fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a354278f3f007d\").map(ka),Ju=ua(pn),qn=Array(3).concat(\"fee0d2fc9272de2d26\",\"fee5d9fcae91fb6a4acb181d\",\"fee5d9fcae91fb6a4ade2d26a50f15\",\"fee5d9fcbba1fc9272fb6a4ade2d26a50f15\",\"fee5d9fcbba1fc9272fb6a4aef3b2ccb",
                      "markdown": "`9bdbdbd969696737373525252252525\",\"fffffff0f0f0d9d9d9bdbdbd969696737373525252252525\",\"fffffff0f0f0d9d9d9bdbdbd969696737373525252252525000000\").map(ka),\nIu=ua(on),pn=Array(3).concat(\"efedf5bcbddc756bb1\",\"f2f0f7cbc9e29e9ac86a51a3\",\"f2f0f7cbc9e29e9ac8756bb154278f\",\"f2f0f7dadaebbcbddc9e9ac8756bb154278f\",\"f2f0f7dadaebbcbddc9e9ac8807dba6a51a34a1486\",\"fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a34a1486\",\"fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a354278f3f007d\").map(ka),Ju=ua(pn),qn=Array(3).concat(\"fee0d2fc9272de2d26\",\"fee5d9fcae91fb6a4acb181d\",\"fee5d9fcae91fb6a4ade2d26a50f15\",\"fee5d9fcbba1fc9272fb6a4ade2d26a50f15\",\"fee5d9fcbba1fc9272fb6a4aef3b2ccb`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 806,
                  "startColumn": 479,
                  "endLine": 806,
                  "endColumn": 535,
                  "snippet": {
                    "text": "e0c7e9c0a1d99b74c47641ab5d238b45006d2c00441b\").map(ka),Hu=ua(nn),on=Array(3).concat(\"f0f0f0bdbdbd636363\",\"f7f7f7cccccc969696525252\",\"f7f7f7cccccc969696636363252525\",\"f7f7f7d9d9d9bdbdbd969696636363252525\",\"f7f7f7d9d9d9bdbdbd969696737373525252252525\",\"fffffff0f0f0d9d9d9bdbdbd969696737373525252252525\",\"fffffff0f0f0d9d9d9bdbdbd969696737373525252252525000000\").map(ka),\nIu=ua(on),pn=Array(3).concat(\"efedf5bcbddc756bb1\",\"f2f0f7cbc9e29e9ac86a51a3\",\"f2f0f7cbc9e29e9ac8756bb154278f\",\"f2f0f7dadaebbcbddc9e9ac8756bb154278f\",\"f2f0f7dadaebbcbddc9e9ac8807dba6a51a34a1486\",\"fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a34a1486\",\"fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a35",
                    "rendered": {
                      "text": "e0c7e9c0a1d99b74c47641ab5d238b45006d2c00441b\").map(ka),Hu=ua(nn),on=Array(3).concat(\"f0f0f0bdbdbd636363\",\"f7f7f7cccccc969696525252\",\"f7f7f7cccccc969696636363252525\",\"f7f7f7d9d9d9bdbdbd969696636363252525\",\"f7f7f7d9d9d9bdbdbd969696737373525252252525\",\"fffffff0f0f0d9d9d9bdbdbd969696737373525252252525\",\"fffffff0f0f0d9d9d9bdbdbd969696737373525252252525000000\").map(ka),\nIu=ua(on),pn=Array(3).concat(\"efedf5bcbddc756bb1\",\"f2f0f7cbc9e29e9ac86a51a3\",\"f2f0f7cbc9e29e9ac8756bb154278f\",\"f2f0f7dadaebbcbddc9e9ac8756bb154278f\",\"f2f0f7dadaebbcbddc9e9ac8807dba6a51a34a1486\",\"fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a34a1486\",\"fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a35",
                      "markdown": "`e0c7e9c0a1d99b74c47641ab5d238b45006d2c00441b\").map(ka),Hu=ua(nn),on=Array(3).concat(\"f0f0f0bdbdbd636363\",\"f7f7f7cccccc969696525252\",\"f7f7f7cccccc969696636363252525\",\"f7f7f7d9d9d9bdbdbd969696636363252525\",\"f7f7f7d9d9d9bdbdbd969696737373525252252525\",\"fffffff0f0f0d9d9d9bdbdbd969696737373525252252525\",\"fffffff0f0f0d9d9d9bdbdbd969696737373525252252525000000\").map(ka),\nIu=ua(on),pn=Array(3).concat(\"efedf5bcbddc756bb1\",\"f2f0f7cbc9e29e9ac86a51a3\",\"f2f0f7cbc9e29e9ac8756bb154278f\",\"f2f0f7dadaebbcbddc9e9ac8756bb154278f\",\"f2f0f7dadaebbcbddc9e9ac8807dba6a51a34a1486\",\"fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a34a1486\",\"fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a35`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 806,
                  "startColumn": 428,
                  "endLine": 806,
                  "endColumn": 478,
                  "snippet": {
                    "text": "e0c7e9c0a1d99b74c47641ab5d238b45005a32\",\"f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45006d2c00441b\").map(ka),Hu=ua(nn),on=Array(3).concat(\"f0f0f0bdbdbd636363\",\"f7f7f7cccccc969696525252\",\"f7f7f7cccccc969696636363252525\",\"f7f7f7d9d9d9bdbdbd969696636363252525\",\"f7f7f7d9d9d9bdbdbd969696737373525252252525\",\"fffffff0f0f0d9d9d9bdbdbd969696737373525252252525\",\"fffffff0f0f0d9d9d9bdbdbd969696737373525252252525000000\").map(ka),\nIu=ua(on),pn=Array(3).concat(\"efedf5bcbddc756bb1\",\"f2f0f7cbc9e29e9ac86a51a3\",\"f2f0f7cbc9e29e9ac8756bb154278f\",\"f2f0f7dadaebbcbddc9e9ac8756bb154278f\",\"f2f0f7dadaebbcbddc9e9ac8807dba6a51a34a1486\",\"fcfbfdefedf5dadaebbcbddc9e9ac8807dba6",
                    "rendered": {
                      "text": "e0c7e9c0a1d99b74c47641ab5d238b45005a32\",\"f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45006d2c00441b\").map(ka),Hu=ua(nn),on=Array(3).concat(\"f0f0f0bdbdbd636363\",\"f7f7f7cccccc969696525252\",\"f7f7f7cccccc969696636363252525\",\"f7f7f7d9d9d9bdbdbd969696636363252525\",\"f7f7f7d9d9d9bdbdbd969696737373525252252525\",\"fffffff0f0f0d9d9d9bdbdbd969696737373525252252525\",\"fffffff0f0f0d9d9d9bdbdbd969696737373525252252525000000\").map(ka),\nIu=ua(on),pn=Array(3).concat(\"efedf5bcbddc756bb1\",\"f2f0f7cbc9e29e9ac86a51a3\",\"f2f0f7cbc9e29e9ac8756bb154278f\",\"f2f0f7dadaebbcbddc9e9ac8756bb154278f\",\"f2f0f7dadaebbcbddc9e9ac8807dba6a51a34a1486\",\"fcfbfdefedf5dadaebbcbddc9e9ac8807dba6",
                      "markdown": "`e0c7e9c0a1d99b74c47641ab5d238b45005a32\",\"f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45006d2c00441b\").map(ka),Hu=ua(nn),on=Array(3).concat(\"f0f0f0bdbdbd636363\",\"f7f7f7cccccc969696525252\",\"f7f7f7cccccc969696636363252525\",\"f7f7f7d9d9d9bdbdbd969696636363252525\",\"f7f7f7d9d9d9bdbdbd969696737373525252252525\",\"fffffff0f0f0d9d9d9bdbdbd969696737373525252252525\",\"fffffff0f0f0d9d9d9bdbdbd969696737373525252252525000000\").map(ka),\nIu=ua(on),pn=Array(3).concat(\"efedf5bcbddc756bb1\",\"f2f0f7cbc9e29e9ac86a51a3\",\"f2f0f7cbc9e29e9ac8756bb154278f\",\"f2f0f7dadaebbcbddc9e9ac8756bb154278f\",\"f2f0f7dadaebbcbddc9e9ac8807dba6a51a34a1486\",\"fcfbfdefedf5dadaebbcbddc9e9ac8807dba6`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 806,
                  "startColumn": 383,
                  "endLine": 806,
                  "endColumn": 427,
                  "snippet": {
                    "text": "c0a1d99b74c47641ab5d238b45005a32\",\"f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45005a32\",\"f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45006d2c00441b\").map(ka),Hu=ua(nn),on=Array(3).concat(\"f0f0f0bdbdbd636363\",\"f7f7f7cccccc969696525252\",\"f7f7f7cccccc969696636363252525\",\"f7f7f7d9d9d9bdbdbd969696636363252525\",\"f7f7f7d9d9d9bdbdbd969696737373525252252525\",\"fffffff0f0f0d9d9d9bdbdbd969696737373525252252525\",\"fffffff0f0f0d9d9d9bdbdbd969696737373525252252525000000\").map(ka),\nIu=ua(on),pn=Array(3).concat(\"efedf5bcbddc756bb1\",\"f2f0f7cbc9e29e9ac86a51a3\",\"f2f0f7cbc9e29e9ac8756bb154278f\",\"f2f0f7dadaebbcbddc9e9ac8756bb154278f\",\"f2f0f7dadaebbcbddc9e9ac8807dba6",
                    "rendered": {
                      "text": "c0a1d99b74c47641ab5d238b45005a32\",\"f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45005a32\",\"f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45006d2c00441b\").map(ka),Hu=ua(nn),on=Array(3).concat(\"f0f0f0bdbdbd636363\",\"f7f7f7cccccc969696525252\",\"f7f7f7cccccc969696636363252525\",\"f7f7f7d9d9d9bdbdbd969696636363252525\",\"f7f7f7d9d9d9bdbdbd969696737373525252252525\",\"fffffff0f0f0d9d9d9bdbdbd969696737373525252252525\",\"fffffff0f0f0d9d9d9bdbdbd969696737373525252252525000000\").map(ka),\nIu=ua(on),pn=Array(3).concat(\"efedf5bcbddc756bb1\",\"f2f0f7cbc9e29e9ac86a51a3\",\"f2f0f7cbc9e29e9ac8756bb154278f\",\"f2f0f7dadaebbcbddc9e9ac8756bb154278f\",\"f2f0f7dadaebbcbddc9e9ac8807dba6",
                      "markdown": "`c0a1d99b74c47641ab5d238b45005a32\",\"f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45005a32\",\"f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45006d2c00441b\").map(ka),Hu=ua(nn),on=Array(3).concat(\"f0f0f0bdbdbd636363\",\"f7f7f7cccccc969696525252\",\"f7f7f7cccccc969696636363252525\",\"f7f7f7d9d9d9bdbdbd969696636363252525\",\"f7f7f7d9d9d9bdbdbd969696737373525252252525\",\"fffffff0f0f0d9d9d9bdbdbd969696737373525252252525\",\"fffffff0f0f0d9d9d9bdbdbd969696737373525252252525000000\").map(ka),\nIu=ua(on),pn=Array(3).concat(\"efedf5bcbddc756bb1\",\"f2f0f7cbc9e29e9ac86a51a3\",\"f2f0f7cbc9e29e9ac8756bb154278f\",\"f2f0f7dadaebbcbddc9e9ac8756bb154278f\",\"f2f0f7dadaebbcbddc9e9ac8807dba6`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 806,
                  "startColumn": 168,
                  "endLine": 806,
                  "endColumn": 224,
                  "snippet": {
                    "text": "7c6dbef9ecae16baed64292c62171b508519c08306b\").map(ka),Gu=ua(mn),nn=Array(3).concat(\"e5f5e0a1d99b31a354\",\"edf8e9bae4b374c476238b45\",\n\"edf8e9bae4b374c47631a354006d2c\",\"edf8e9c7e9c0a1d99b74c47631a354006d2c\",\"edf8e9c7e9c0a1d99b74c47641ab5d238b45005a32\",\"f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45005a32\",\"f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45006d2c00441b\").map(ka),Hu=ua(nn),on=Array(3).concat(\"f0f0f0bdbdbd636363\",\"f7f7f7cccccc969696525252\",\"f7f7f7cccccc969696636363252525\",\"f7f7f7d9d9d9bdbdbd969696636363252525\",\"f7f7f7d9d9d9bdbdbd969696737373525252252525\",\"fffffff0f0f0d9d9d9bdbdbd969696737373525252252525\",\"fffffff0f0f0d9d9d9bdbdbd96969673737352525225",
                    "rendered": {
                      "text": "7c6dbef9ecae16baed64292c62171b508519c08306b\").map(ka),Gu=ua(mn),nn=Array(3).concat(\"e5f5e0a1d99b31a354\",\"edf8e9bae4b374c476238b45\",\n\"edf8e9bae4b374c47631a354006d2c\",\"edf8e9c7e9c0a1d99b74c47631a354006d2c\",\"edf8e9c7e9c0a1d99b74c47641ab5d238b45005a32\",\"f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45005a32\",\"f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45006d2c00441b\").map(ka),Hu=ua(nn),on=Array(3).concat(\"f0f0f0bdbdbd636363\",\"f7f7f7cccccc969696525252\",\"f7f7f7cccccc969696636363252525\",\"f7f7f7d9d9d9bdbdbd969696636363252525\",\"f7f7f7d9d9d9bdbdbd969696737373525252252525\",\"fffffff0f0f0d9d9d9bdbdbd969696737373525252252525\",\"fffffff0f0f0d9d9d9bdbdbd96969673737352525225",
                      "markdown": "`7c6dbef9ecae16baed64292c62171b508519c08306b\").map(ka),Gu=ua(mn),nn=Array(3).concat(\"e5f5e0a1d99b31a354\",\"edf8e9bae4b374c476238b45\",\n\"edf8e9bae4b374c47631a354006d2c\",\"edf8e9c7e9c0a1d99b74c47631a354006d2c\",\"edf8e9c7e9c0a1d99b74c47641ab5d238b45005a32\",\"f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45005a32\",\"f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45006d2c00441b\").map(ka),Hu=ua(nn),on=Array(3).concat(\"f0f0f0bdbdbd636363\",\"f7f7f7cccccc969696525252\",\"f7f7f7cccccc969696636363252525\",\"f7f7f7d9d9d9bdbdbd969696636363252525\",\"f7f7f7d9d9d9bdbdbd969696737373525252252525\",\"fffffff0f0f0d9d9d9bdbdbd969696737373525252252525\",\"fffffff0f0f0d9d9d9bdbdbd96969673737352525225`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 806,
                  "startColumn": 117,
                  "endLine": 806,
                  "endColumn": 167,
                  "snippet": {
                    "text": "7c6dbef9ecae16baed64292c62171b5084594\",\"f7fbffdeebf7c6dbef9ecae16baed64292c62171b508519c08306b\").map(ka),Gu=ua(mn),nn=Array(3).concat(\"e5f5e0a1d99b31a354\",\"edf8e9bae4b374c476238b45\",\n\"edf8e9bae4b374c47631a354006d2c\",\"edf8e9c7e9c0a1d99b74c47631a354006d2c\",\"edf8e9c7e9c0a1d99b74c47641ab5d238b45005a32\",\"f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45005a32\",\"f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45006d2c00441b\").map(ka),Hu=ua(nn),on=Array(3).concat(\"f0f0f0bdbdbd636363\",\"f7f7f7cccccc969696525252\",\"f7f7f7cccccc969696636363252525\",\"f7f7f7d9d9d9bdbdbd969696636363252525\",\"f7f7f7d9d9d9bdbdbd969696737373525252252525\",\"fffffff0f0f0d9d9d9bdbdbd96969673737352",
                    "rendered": {
                      "text": "7c6dbef9ecae16baed64292c62171b5084594\",\"f7fbffdeebf7c6dbef9ecae16baed64292c62171b508519c08306b\").map(ka),Gu=ua(mn),nn=Array(3).concat(\"e5f5e0a1d99b31a354\",\"edf8e9bae4b374c476238b45\",\n\"edf8e9bae4b374c47631a354006d2c\",\"edf8e9c7e9c0a1d99b74c47631a354006d2c\",\"edf8e9c7e9c0a1d99b74c47641ab5d238b45005a32\",\"f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45005a32\",\"f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45006d2c00441b\").map(ka),Hu=ua(nn),on=Array(3).concat(\"f0f0f0bdbdbd636363\",\"f7f7f7cccccc969696525252\",\"f7f7f7cccccc969696636363252525\",\"f7f7f7d9d9d9bdbdbd969696636363252525\",\"f7f7f7d9d9d9bdbdbd969696737373525252252525\",\"fffffff0f0f0d9d9d9bdbdbd96969673737352",
                      "markdown": "`7c6dbef9ecae16baed64292c62171b5084594\",\"f7fbffdeebf7c6dbef9ecae16baed64292c62171b508519c08306b\").map(ka),Gu=ua(mn),nn=Array(3).concat(\"e5f5e0a1d99b31a354\",\"edf8e9bae4b374c476238b45\",\n\"edf8e9bae4b374c47631a354006d2c\",\"edf8e9c7e9c0a1d99b74c47631a354006d2c\",\"edf8e9c7e9c0a1d99b74c47641ab5d238b45005a32\",\"f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45005a32\",\"f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45006d2c00441b\").map(ka),Hu=ua(nn),on=Array(3).concat(\"f0f0f0bdbdbd636363\",\"f7f7f7cccccc969696525252\",\"f7f7f7cccccc969696636363252525\",\"f7f7f7d9d9d9bdbdbd969696636363252525\",\"f7f7f7d9d9d9bdbdbd969696737373525252252525\",\"fffffff0f0f0d9d9d9bdbdbd96969673737352`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 806,
                  "startColumn": 72,
                  "endLine": 806,
                  "endColumn": 116,
                  "snippet": {
                    "text": "f9ecae16baed64292c62171b5084594\",\"f7fbffdeebf7c6dbef9ecae16baed64292c62171b5084594\",\"f7fbffdeebf7c6dbef9ecae16baed64292c62171b508519c08306b\").map(ka),Gu=ua(mn),nn=Array(3).concat(\"e5f5e0a1d99b31a354\",\"edf8e9bae4b374c476238b45\",\n\"edf8e9bae4b374c47631a354006d2c\",\"edf8e9c7e9c0a1d99b74c47631a354006d2c\",\"edf8e9c7e9c0a1d99b74c47641ab5d238b45005a32\",\"f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45005a32\",\"f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45006d2c00441b\").map(ka),Hu=ua(nn),on=Array(3).concat(\"f0f0f0bdbdbd636363\",\"f7f7f7cccccc969696525252\",\"f7f7f7cccccc969696636363252525\",\"f7f7f7d9d9d9bdbdbd969696636363252525\",\"f7f7f7d9d9d9bdbdbd96969673737352",
                    "rendered": {
                      "text": "f9ecae16baed64292c62171b5084594\",\"f7fbffdeebf7c6dbef9ecae16baed64292c62171b5084594\",\"f7fbffdeebf7c6dbef9ecae16baed64292c62171b508519c08306b\").map(ka),Gu=ua(mn),nn=Array(3).concat(\"e5f5e0a1d99b31a354\",\"edf8e9bae4b374c476238b45\",\n\"edf8e9bae4b374c47631a354006d2c\",\"edf8e9c7e9c0a1d99b74c47631a354006d2c\",\"edf8e9c7e9c0a1d99b74c47641ab5d238b45005a32\",\"f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45005a32\",\"f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45006d2c00441b\").map(ka),Hu=ua(nn),on=Array(3).concat(\"f0f0f0bdbdbd636363\",\"f7f7f7cccccc969696525252\",\"f7f7f7cccccc969696636363252525\",\"f7f7f7d9d9d9bdbdbd969696636363252525\",\"f7f7f7d9d9d9bdbdbd96969673737352",
                      "markdown": "`f9ecae16baed64292c62171b5084594\",\"f7fbffdeebf7c6dbef9ecae16baed64292c62171b5084594\",\"f7fbffdeebf7c6dbef9ecae16baed64292c62171b508519c08306b\").map(ka),Gu=ua(mn),nn=Array(3).concat(\"e5f5e0a1d99b31a354\",\"edf8e9bae4b374c476238b45\",\n\"edf8e9bae4b374c47631a354006d2c\",\"edf8e9c7e9c0a1d99b74c47631a354006d2c\",\"edf8e9c7e9c0a1d99b74c47641ab5d238b45005a32\",\"f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45005a32\",\"f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45006d2c00441b\").map(ka),Hu=ua(nn),on=Array(3).concat(\"f0f0f0bdbdbd636363\",\"f7f7f7cccccc969696525252\",\"f7f7f7cccccc969696636363252525\",\"f7f7f7d9d9d9bdbdbd969696636363252525\",\"f7f7f7d9d9d9bdbdbd96969673737352`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 805,
                  "startColumn": 362,
                  "endLine": 805,
                  "endColumn": 418,
                  "snippet": {
                    "text": "a0fed976feb24cfd8d3cfc4e2ae31a1cbd0026800026\").map(ka),Fu=ua(ln),mn=Array(3).concat(\"deebf79ecae13182bd\",\"eff3ffbdd7e76baed62171b5\",\"eff3ffbdd7e76baed63182bd08519c\",\"eff3ffc6dbef9ecae16baed63182bd08519c\",\"eff3ffc6dbef9ecae16baed64292c62171b5084594\",\"f7fbffdeebf7c6dbef9ecae16baed64292c62171b5084594\",\"f7fbffdeebf7c6dbef9ecae16baed64292c62171b508519c08306b\").map(ka),Gu=ua(mn),nn=Array(3).concat(\"e5f5e0a1d99b31a354\",\"edf8e9bae4b374c476238b45\",\n\"edf8e9bae4b374c47631a354006d2c\",\"edf8e9c7e9c0a1d99b74c47631a354006d2c\",\"edf8e9c7e9c0a1d99b74c47641ab5d238b45005a32\",\"f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45005a32\",\"f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b450",
                    "rendered": {
                      "text": "a0fed976feb24cfd8d3cfc4e2ae31a1cbd0026800026\").map(ka),Fu=ua(ln),mn=Array(3).concat(\"deebf79ecae13182bd\",\"eff3ffbdd7e76baed62171b5\",\"eff3ffbdd7e76baed63182bd08519c\",\"eff3ffc6dbef9ecae16baed63182bd08519c\",\"eff3ffc6dbef9ecae16baed64292c62171b5084594\",\"f7fbffdeebf7c6dbef9ecae16baed64292c62171b5084594\",\"f7fbffdeebf7c6dbef9ecae16baed64292c62171b508519c08306b\").map(ka),Gu=ua(mn),nn=Array(3).concat(\"e5f5e0a1d99b31a354\",\"edf8e9bae4b374c476238b45\",\n\"edf8e9bae4b374c47631a354006d2c\",\"edf8e9c7e9c0a1d99b74c47631a354006d2c\",\"edf8e9c7e9c0a1d99b74c47641ab5d238b45005a32\",\"f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45005a32\",\"f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b450",
                      "markdown": "`a0fed976feb24cfd8d3cfc4e2ae31a1cbd0026800026\").map(ka),Fu=ua(ln),mn=Array(3).concat(\"deebf79ecae13182bd\",\"eff3ffbdd7e76baed62171b5\",\"eff3ffbdd7e76baed63182bd08519c\",\"eff3ffc6dbef9ecae16baed63182bd08519c\",\"eff3ffc6dbef9ecae16baed64292c62171b5084594\",\"f7fbffdeebf7c6dbef9ecae16baed64292c62171b5084594\",\"f7fbffdeebf7c6dbef9ecae16baed64292c62171b508519c08306b\").map(ka),Gu=ua(mn),nn=Array(3).concat(\"e5f5e0a1d99b31a354\",\"edf8e9bae4b374c476238b45\",\n\"edf8e9bae4b374c47631a354006d2c\",\"edf8e9c7e9c0a1d99b74c47631a354006d2c\",\"edf8e9c7e9c0a1d99b74c47641ab5d238b45005a32\",\"f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45005a32\",\"f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b450`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 805,
                  "startColumn": 311,
                  "endLine": 805,
                  "endColumn": 361,
                  "snippet": {
                    "text": "a0fed976feb24cfd8d3cfc4e2ae31a1cb10026\",\"ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cbd0026800026\").map(ka),Fu=ua(ln),mn=Array(3).concat(\"deebf79ecae13182bd\",\"eff3ffbdd7e76baed62171b5\",\"eff3ffbdd7e76baed63182bd08519c\",\"eff3ffc6dbef9ecae16baed63182bd08519c\",\"eff3ffc6dbef9ecae16baed64292c62171b5084594\",\"f7fbffdeebf7c6dbef9ecae16baed64292c62171b5084594\",\"f7fbffdeebf7c6dbef9ecae16baed64292c62171b508519c08306b\").map(ka),Gu=ua(mn),nn=Array(3).concat(\"e5f5e0a1d99b31a354\",\"edf8e9bae4b374c476238b45\",\n\"edf8e9bae4b374c47631a354006d2c\",\"edf8e9c7e9c0a1d99b74c47631a354006d2c\",\"edf8e9c7e9c0a1d99b74c47641ab5d238b45005a32\",\"f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d2",
                    "rendered": {
                      "text": "a0fed976feb24cfd8d3cfc4e2ae31a1cb10026\",\"ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cbd0026800026\").map(ka),Fu=ua(ln),mn=Array(3).concat(\"deebf79ecae13182bd\",\"eff3ffbdd7e76baed62171b5\",\"eff3ffbdd7e76baed63182bd08519c\",\"eff3ffc6dbef9ecae16baed63182bd08519c\",\"eff3ffc6dbef9ecae16baed64292c62171b5084594\",\"f7fbffdeebf7c6dbef9ecae16baed64292c62171b5084594\",\"f7fbffdeebf7c6dbef9ecae16baed64292c62171b508519c08306b\").map(ka),Gu=ua(mn),nn=Array(3).concat(\"e5f5e0a1d99b31a354\",\"edf8e9bae4b374c476238b45\",\n\"edf8e9bae4b374c47631a354006d2c\",\"edf8e9c7e9c0a1d99b74c47631a354006d2c\",\"edf8e9c7e9c0a1d99b74c47641ab5d238b45005a32\",\"f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d2",
                      "markdown": "`a0fed976feb24cfd8d3cfc4e2ae31a1cb10026\",\"ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cbd0026800026\").map(ka),Fu=ua(ln),mn=Array(3).concat(\"deebf79ecae13182bd\",\"eff3ffbdd7e76baed62171b5\",\"eff3ffbdd7e76baed63182bd08519c\",\"eff3ffc6dbef9ecae16baed63182bd08519c\",\"eff3ffc6dbef9ecae16baed64292c62171b5084594\",\"f7fbffdeebf7c6dbef9ecae16baed64292c62171b5084594\",\"f7fbffdeebf7c6dbef9ecae16baed64292c62171b508519c08306b\").map(ka),Gu=ua(mn),nn=Array(3).concat(\"e5f5e0a1d99b31a354\",\"edf8e9bae4b374c476238b45\",\n\"edf8e9bae4b374c47631a354006d2c\",\"edf8e9c7e9c0a1d99b74c47631a354006d2c\",\"edf8e9c7e9c0a1d99b74c47641ab5d238b45005a32\",\"f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d2`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 805,
                  "startColumn": 266,
                  "endLine": 805,
                  "endColumn": 310,
                  "snippet": {
                    "text": "6feb24cfd8d3cfc4e2ae31a1cb10026\",\n\"ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cb10026\",\"ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cbd0026800026\").map(ka),Fu=ua(ln),mn=Array(3).concat(\"deebf79ecae13182bd\",\"eff3ffbdd7e76baed62171b5\",\"eff3ffbdd7e76baed63182bd08519c\",\"eff3ffc6dbef9ecae16baed63182bd08519c\",\"eff3ffc6dbef9ecae16baed64292c62171b5084594\",\"f7fbffdeebf7c6dbef9ecae16baed64292c62171b5084594\",\"f7fbffdeebf7c6dbef9ecae16baed64292c62171b508519c08306b\").map(ka),Gu=ua(mn),nn=Array(3).concat(\"e5f5e0a1d99b31a354\",\"edf8e9bae4b374c476238b45\",\n\"edf8e9bae4b374c47631a354006d2c\",\"edf8e9c7e9c0a1d99b74c47631a354006d2c\",\"edf8e9c7e9c0a1d99b74c47641ab5d2",
                    "rendered": {
                      "text": "6feb24cfd8d3cfc4e2ae31a1cb10026\",\n\"ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cb10026\",\"ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cbd0026800026\").map(ka),Fu=ua(ln),mn=Array(3).concat(\"deebf79ecae13182bd\",\"eff3ffbdd7e76baed62171b5\",\"eff3ffbdd7e76baed63182bd08519c\",\"eff3ffc6dbef9ecae16baed63182bd08519c\",\"eff3ffc6dbef9ecae16baed64292c62171b5084594\",\"f7fbffdeebf7c6dbef9ecae16baed64292c62171b5084594\",\"f7fbffdeebf7c6dbef9ecae16baed64292c62171b508519c08306b\").map(ka),Gu=ua(mn),nn=Array(3).concat(\"e5f5e0a1d99b31a354\",\"edf8e9bae4b374c476238b45\",\n\"edf8e9bae4b374c47631a354006d2c\",\"edf8e9c7e9c0a1d99b74c47631a354006d2c\",\"edf8e9c7e9c0a1d99b74c47641ab5d2",
                      "markdown": "`6feb24cfd8d3cfc4e2ae31a1cb10026\",\n\"ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cb10026\",\"ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cbd0026800026\").map(ka),Fu=ua(ln),mn=Array(3).concat(\"deebf79ecae13182bd\",\"eff3ffbdd7e76baed62171b5\",\"eff3ffbdd7e76baed63182bd08519c\",\"eff3ffc6dbef9ecae16baed63182bd08519c\",\"eff3ffc6dbef9ecae16baed64292c62171b5084594\",\"f7fbffdeebf7c6dbef9ecae16baed64292c62171b5084594\",\"f7fbffdeebf7c6dbef9ecae16baed64292c62171b508519c08306b\").map(ka),Gu=ua(mn),nn=Array(3).concat(\"e5f5e0a1d99b31a354\",\"edf8e9bae4b374c476238b45\",\n\"edf8e9bae4b374c47631a354006d2c\",\"edf8e9c7e9c0a1d99b74c47631a354006d2c\",\"edf8e9c7e9c0a1d99b74c47641ab5d2`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 805,
                  "startColumn": 51,
                  "endLine": 805,
                  "endColumn": 107,
                  "snippet": {
                    "text": "cfee391fec44ffe9929ec7014cc4c02993404662506\").map(ka),Eu=ua(kn),ln=Array(3).concat(\"ffeda0feb24cf03b20\",\"ffffb2fecc5cfd8d3ce31a1c\",\"ffffb2fecc5cfd8d3cf03b20bd0026\",\"ffffb2fed976feb24cfd8d3cf03b20bd0026\",\"ffffb2fed976feb24cfd8d3cfc4e2ae31a1cb10026\",\n\"ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cb10026\",\"ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cbd0026800026\").map(ka),Fu=ua(ln),mn=Array(3).concat(\"deebf79ecae13182bd\",\"eff3ffbdd7e76baed62171b5\",\"eff3ffbdd7e76baed63182bd08519c\",\"eff3ffc6dbef9ecae16baed63182bd08519c\",\"eff3ffc6dbef9ecae16baed64292c62171b5084594\",\"f7fbffdeebf7c6dbef9ecae16baed64292c62171b5084594\",\"f7fbffdeebf7c6dbef9ecae16baed64292c62171b508",
                    "rendered": {
                      "text": "cfee391fec44ffe9929ec7014cc4c02993404662506\").map(ka),Eu=ua(kn),ln=Array(3).concat(\"ffeda0feb24cf03b20\",\"ffffb2fecc5cfd8d3ce31a1c\",\"ffffb2fecc5cfd8d3cf03b20bd0026\",\"ffffb2fed976feb24cfd8d3cf03b20bd0026\",\"ffffb2fed976feb24cfd8d3cfc4e2ae31a1cb10026\",\n\"ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cb10026\",\"ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cbd0026800026\").map(ka),Fu=ua(ln),mn=Array(3).concat(\"deebf79ecae13182bd\",\"eff3ffbdd7e76baed62171b5\",\"eff3ffbdd7e76baed63182bd08519c\",\"eff3ffc6dbef9ecae16baed63182bd08519c\",\"eff3ffc6dbef9ecae16baed64292c62171b5084594\",\"f7fbffdeebf7c6dbef9ecae16baed64292c62171b5084594\",\"f7fbffdeebf7c6dbef9ecae16baed64292c62171b508",
                      "markdown": "`cfee391fec44ffe9929ec7014cc4c02993404662506\").map(ka),Eu=ua(kn),ln=Array(3).concat(\"ffeda0feb24cf03b20\",\"ffffb2fecc5cfd8d3ce31a1c\",\"ffffb2fecc5cfd8d3cf03b20bd0026\",\"ffffb2fed976feb24cfd8d3cf03b20bd0026\",\"ffffb2fed976feb24cfd8d3cfc4e2ae31a1cb10026\",\n\"ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cb10026\",\"ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cbd0026800026\").map(ka),Fu=ua(ln),mn=Array(3).concat(\"deebf79ecae13182bd\",\"eff3ffbdd7e76baed62171b5\",\"eff3ffbdd7e76baed63182bd08519c\",\"eff3ffc6dbef9ecae16baed63182bd08519c\",\"eff3ffc6dbef9ecae16baed64292c62171b5084594\",\"f7fbffdeebf7c6dbef9ecae16baed64292c62171b5084594\",\"f7fbffdeebf7c6dbef9ecae16baed64292c62171b508`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 805,
                  "endLine": 805,
                  "endColumn": 50,
                  "snippet": {
                    "text": "cfee391fec44ffe9929ec7014cc4c028c2d04\",\"ffffe5fff7bcfee391fec44ffe9929ec7014cc4c02993404662506\").map(ka),Eu=ua(kn),ln=Array(3).concat(\"ffeda0feb24cf03b20\",\"ffffb2fecc5cfd8d3ce31a1c\",\"ffffb2fecc5cfd8d3cf03b20bd0026\",\"ffffb2fed976feb24cfd8d3cf03b20bd0026\",\"ffffb2fed976feb24cfd8d3cfc4e2ae31a1cb10026\",\n\"ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cb10026\",\"ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cbd0026800026\").map(ka),Fu=ua(ln),mn=Array(3).concat(\"deebf79ecae13182bd\",\"eff3ffbdd7e76baed62171b5\",\"eff3ffbdd7e76baed63182bd08519c\",\"eff3ffc6dbef9ecae16baed63182bd08519c\",\"eff3ffc6dbef9ecae16baed64292c62171b5084594\",\"f7fbffdeebf7c6dbef9ecae16baed64292c621",
                    "rendered": {
                      "text": "cfee391fec44ffe9929ec7014cc4c028c2d04\",\"ffffe5fff7bcfee391fec44ffe9929ec7014cc4c02993404662506\").map(ka),Eu=ua(kn),ln=Array(3).concat(\"ffeda0feb24cf03b20\",\"ffffb2fecc5cfd8d3ce31a1c\",\"ffffb2fecc5cfd8d3cf03b20bd0026\",\"ffffb2fed976feb24cfd8d3cf03b20bd0026\",\"ffffb2fed976feb24cfd8d3cfc4e2ae31a1cb10026\",\n\"ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cb10026\",\"ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cbd0026800026\").map(ka),Fu=ua(ln),mn=Array(3).concat(\"deebf79ecae13182bd\",\"eff3ffbdd7e76baed62171b5\",\"eff3ffbdd7e76baed63182bd08519c\",\"eff3ffc6dbef9ecae16baed63182bd08519c\",\"eff3ffc6dbef9ecae16baed64292c62171b5084594\",\"f7fbffdeebf7c6dbef9ecae16baed64292c621",
                      "markdown": "`cfee391fec44ffe9929ec7014cc4c028c2d04\",\"ffffe5fff7bcfee391fec44ffe9929ec7014cc4c02993404662506\").map(ka),Eu=ua(kn),ln=Array(3).concat(\"ffeda0feb24cf03b20\",\"ffffb2fecc5cfd8d3ce31a1c\",\"ffffb2fecc5cfd8d3cf03b20bd0026\",\"ffffb2fed976feb24cfd8d3cf03b20bd0026\",\"ffffb2fed976feb24cfd8d3cfc4e2ae31a1cb10026\",\n\"ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cb10026\",\"ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cbd0026800026\").map(ka),Fu=ua(ln),mn=Array(3).concat(\"deebf79ecae13182bd\",\"eff3ffbdd7e76baed62171b5\",\"eff3ffbdd7e76baed63182bd08519c\",\"eff3ffc6dbef9ecae16baed63182bd08519c\",\"eff3ffc6dbef9ecae16baed64292c62171b5084594\",\"f7fbffdeebf7c6dbef9ecae16baed64292c621`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 804,
                  "startColumn": 460,
                  "endLine": 804,
                  "endColumn": 504,
                  "snippet": {
                    "text": "91fec44ffe9929ec7014cc4c028c2d04\",\"ffffe5fff7bcfee391fec44ffe9929ec7014cc4c028c2d04\",\"ffffe5fff7bcfee391fec44ffe9929ec7014cc4c02993404662506\").map(ka),Eu=ua(kn),ln=Array(3).concat(\"ffeda0feb24cf03b20\",\"ffffb2fecc5cfd8d3ce31a1c\",\"ffffb2fecc5cfd8d3cf03b20bd0026\",\"ffffb2fed976feb24cfd8d3cf03b20bd0026\",\"ffffb2fed976feb24cfd8d3cfc4e2ae31a1cb10026\",\n\"ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cb10026\",\"ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cbd0026800026\").map(ka),Fu=ua(ln),mn=Array(3).concat(\"deebf79ecae13182bd\",\"eff3ffbdd7e76baed62171b5\",\"eff3ffbdd7e76baed63182bd08519c\",\"eff3ffc6dbef9ecae16baed63182bd08519c\",\"eff3ffc6dbef9ecae16baed64292c62",
                    "rendered": {
                      "text": "91fec44ffe9929ec7014cc4c028c2d04\",\"ffffe5fff7bcfee391fec44ffe9929ec7014cc4c028c2d04\",\"ffffe5fff7bcfee391fec44ffe9929ec7014cc4c02993404662506\").map(ka),Eu=ua(kn),ln=Array(3).concat(\"ffeda0feb24cf03b20\",\"ffffb2fecc5cfd8d3ce31a1c\",\"ffffb2fecc5cfd8d3cf03b20bd0026\",\"ffffb2fed976feb24cfd8d3cf03b20bd0026\",\"ffffb2fed976feb24cfd8d3cfc4e2ae31a1cb10026\",\n\"ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cb10026\",\"ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cbd0026800026\").map(ka),Fu=ua(ln),mn=Array(3).concat(\"deebf79ecae13182bd\",\"eff3ffbdd7e76baed62171b5\",\"eff3ffbdd7e76baed63182bd08519c\",\"eff3ffc6dbef9ecae16baed63182bd08519c\",\"eff3ffc6dbef9ecae16baed64292c62",
                      "markdown": "`91fec44ffe9929ec7014cc4c028c2d04\",\"ffffe5fff7bcfee391fec44ffe9929ec7014cc4c028c2d04\",\"ffffe5fff7bcfee391fec44ffe9929ec7014cc4c02993404662506\").map(ka),Eu=ua(kn),ln=Array(3).concat(\"ffeda0feb24cf03b20\",\"ffffb2fecc5cfd8d3ce31a1c\",\"ffffb2fecc5cfd8d3cf03b20bd0026\",\"ffffb2fed976feb24cfd8d3cf03b20bd0026\",\"ffffb2fed976feb24cfd8d3cfc4e2ae31a1cb10026\",\n\"ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cb10026\",\"ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cbd0026800026\").map(ka),Fu=ua(ln),mn=Array(3).concat(\"deebf79ecae13182bd\",\"eff3ffbdd7e76baed62171b5\",\"eff3ffbdd7e76baed63182bd08519c\",\"eff3ffc6dbef9ecae16baed63182bd08519c\",\"eff3ffc6dbef9ecae16baed64292c62`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 804,
                  "startColumn": 245,
                  "endLine": 804,
                  "endColumn": 301,
                  "snippet": {
                    "text": "9d9f0a3addd8e78c67941ab5d238443006837004529\").map(ka),\nDu=ua(jn),kn=Array(3).concat(\"fff7bcfec44fd95f0e\",\"ffffd4fed98efe9929cc4c02\",\"ffffd4fed98efe9929d95f0e993404\",\"ffffd4fee391fec44ffe9929d95f0e993404\",\"ffffd4fee391fec44ffe9929ec7014cc4c028c2d04\",\"ffffe5fff7bcfee391fec44ffe9929ec7014cc4c028c2d04\",\"ffffe5fff7bcfee391fec44ffe9929ec7014cc4c02993404662506\").map(ka),Eu=ua(kn),ln=Array(3).concat(\"ffeda0feb24cf03b20\",\"ffffb2fecc5cfd8d3ce31a1c\",\"ffffb2fecc5cfd8d3cf03b20bd0026\",\"ffffb2fed976feb24cfd8d3cf03b20bd0026\",\"ffffb2fed976feb24cfd8d3cfc4e2ae31a1cb10026\",\n\"ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cb10026\",\"ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cb",
                    "rendered": {
                      "text": "9d9f0a3addd8e78c67941ab5d238443006837004529\").map(ka),\nDu=ua(jn),kn=Array(3).concat(\"fff7bcfec44fd95f0e\",\"ffffd4fed98efe9929cc4c02\",\"ffffd4fed98efe9929d95f0e993404\",\"ffffd4fee391fec44ffe9929d95f0e993404\",\"ffffd4fee391fec44ffe9929ec7014cc4c028c2d04\",\"ffffe5fff7bcfee391fec44ffe9929ec7014cc4c028c2d04\",\"ffffe5fff7bcfee391fec44ffe9929ec7014cc4c02993404662506\").map(ka),Eu=ua(kn),ln=Array(3).concat(\"ffeda0feb24cf03b20\",\"ffffb2fecc5cfd8d3ce31a1c\",\"ffffb2fecc5cfd8d3cf03b20bd0026\",\"ffffb2fed976feb24cfd8d3cf03b20bd0026\",\"ffffb2fed976feb24cfd8d3cfc4e2ae31a1cb10026\",\n\"ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cb10026\",\"ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cb",
                      "markdown": "`9d9f0a3addd8e78c67941ab5d238443006837004529\").map(ka),\nDu=ua(jn),kn=Array(3).concat(\"fff7bcfec44fd95f0e\",\"ffffd4fed98efe9929cc4c02\",\"ffffd4fed98efe9929d95f0e993404\",\"ffffd4fee391fec44ffe9929d95f0e993404\",\"ffffd4fee391fec44ffe9929ec7014cc4c028c2d04\",\"ffffe5fff7bcfee391fec44ffe9929ec7014cc4c028c2d04\",\"ffffe5fff7bcfee391fec44ffe9929ec7014cc4c02993404662506\").map(ka),Eu=ua(kn),ln=Array(3).concat(\"ffeda0feb24cf03b20\",\"ffffb2fecc5cfd8d3ce31a1c\",\"ffffb2fecc5cfd8d3cf03b20bd0026\",\"ffffb2fed976feb24cfd8d3cf03b20bd0026\",\"ffffb2fed976feb24cfd8d3cfc4e2ae31a1cb10026\",\n\"ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cb10026\",\"ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cb`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 804,
                  "startColumn": 194,
                  "endLine": 804,
                  "endColumn": 244,
                  "snippet": {
                    "text": "9d9f0a3addd8e78c67941ab5d238443005a32\",\"ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443006837004529\").map(ka),\nDu=ua(jn),kn=Array(3).concat(\"fff7bcfec44fd95f0e\",\"ffffd4fed98efe9929cc4c02\",\"ffffd4fed98efe9929d95f0e993404\",\"ffffd4fee391fec44ffe9929d95f0e993404\",\"ffffd4fee391fec44ffe9929ec7014cc4c028c2d04\",\"ffffe5fff7bcfee391fec44ffe9929ec7014cc4c028c2d04\",\"ffffe5fff7bcfee391fec44ffe9929ec7014cc4c02993404662506\").map(ka),Eu=ua(kn),ln=Array(3).concat(\"ffeda0feb24cf03b20\",\"ffffb2fecc5cfd8d3ce31a1c\",\"ffffb2fecc5cfd8d3cf03b20bd0026\",\"ffffb2fed976feb24cfd8d3cf03b20bd0026\",\"ffffb2fed976feb24cfd8d3cfc4e2ae31a1cb10026\",\n\"ffffccffeda0fed976feb24cfd8d3cfc4e2ae",
                    "rendered": {
                      "text": "9d9f0a3addd8e78c67941ab5d238443005a32\",\"ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443006837004529\").map(ka),\nDu=ua(jn),kn=Array(3).concat(\"fff7bcfec44fd95f0e\",\"ffffd4fed98efe9929cc4c02\",\"ffffd4fed98efe9929d95f0e993404\",\"ffffd4fee391fec44ffe9929d95f0e993404\",\"ffffd4fee391fec44ffe9929ec7014cc4c028c2d04\",\"ffffe5fff7bcfee391fec44ffe9929ec7014cc4c028c2d04\",\"ffffe5fff7bcfee391fec44ffe9929ec7014cc4c02993404662506\").map(ka),Eu=ua(kn),ln=Array(3).concat(\"ffeda0feb24cf03b20\",\"ffffb2fecc5cfd8d3ce31a1c\",\"ffffb2fecc5cfd8d3cf03b20bd0026\",\"ffffb2fed976feb24cfd8d3cf03b20bd0026\",\"ffffb2fed976feb24cfd8d3cfc4e2ae31a1cb10026\",\n\"ffffccffeda0fed976feb24cfd8d3cfc4e2ae",
                      "markdown": "`9d9f0a3addd8e78c67941ab5d238443005a32\",\"ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443006837004529\").map(ka),\nDu=ua(jn),kn=Array(3).concat(\"fff7bcfec44fd95f0e\",\"ffffd4fed98efe9929cc4c02\",\"ffffd4fed98efe9929d95f0e993404\",\"ffffd4fee391fec44ffe9929d95f0e993404\",\"ffffd4fee391fec44ffe9929ec7014cc4c028c2d04\",\"ffffe5fff7bcfee391fec44ffe9929ec7014cc4c028c2d04\",\"ffffe5fff7bcfee391fec44ffe9929ec7014cc4c02993404662506\").map(ka),Eu=ua(kn),ln=Array(3).concat(\"ffeda0feb24cf03b20\",\"ffffb2fecc5cfd8d3ce31a1c\",\"ffffb2fecc5cfd8d3cf03b20bd0026\",\"ffffb2fed976feb24cfd8d3cf03b20bd0026\",\"ffffb2fed976feb24cfd8d3cfc4e2ae31a1cb10026\",\n\"ffffccffeda0fed976feb24cfd8d3cfc4e2ae`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 804,
                  "startColumn": 149,
                  "endLine": 804,
                  "endColumn": 193,
                  "snippet": {
                    "text": "3addd8e78c67941ab5d238443005a32\",\"ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443005a32\",\"ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443006837004529\").map(ka),\nDu=ua(jn),kn=Array(3).concat(\"fff7bcfec44fd95f0e\",\"ffffd4fed98efe9929cc4c02\",\"ffffd4fed98efe9929d95f0e993404\",\"ffffd4fee391fec44ffe9929d95f0e993404\",\"ffffd4fee391fec44ffe9929ec7014cc4c028c2d04\",\"ffffe5fff7bcfee391fec44ffe9929ec7014cc4c028c2d04\",\"ffffe5fff7bcfee391fec44ffe9929ec7014cc4c02993404662506\").map(ka),Eu=ua(kn),ln=Array(3).concat(\"ffeda0feb24cf03b20\",\"ffffb2fecc5cfd8d3ce31a1c\",\"ffffb2fecc5cfd8d3cf03b20bd0026\",\"ffffb2fed976feb24cfd8d3cf03b20bd0026\",\"ffffb2fed976feb24cfd8d3cfc4e2ae3",
                    "rendered": {
                      "text": "3addd8e78c67941ab5d238443005a32\",\"ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443005a32\",\"ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443006837004529\").map(ka),\nDu=ua(jn),kn=Array(3).concat(\"fff7bcfec44fd95f0e\",\"ffffd4fed98efe9929cc4c02\",\"ffffd4fed98efe9929d95f0e993404\",\"ffffd4fee391fec44ffe9929d95f0e993404\",\"ffffd4fee391fec44ffe9929ec7014cc4c028c2d04\",\"ffffe5fff7bcfee391fec44ffe9929ec7014cc4c028c2d04\",\"ffffe5fff7bcfee391fec44ffe9929ec7014cc4c02993404662506\").map(ka),Eu=ua(kn),ln=Array(3).concat(\"ffeda0feb24cf03b20\",\"ffffb2fecc5cfd8d3ce31a1c\",\"ffffb2fecc5cfd8d3cf03b20bd0026\",\"ffffb2fed976feb24cfd8d3cf03b20bd0026\",\"ffffb2fed976feb24cfd8d3cfc4e2ae3",
                      "markdown": "`3addd8e78c67941ab5d238443005a32\",\"ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443005a32\",\"ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443006837004529\").map(ka),\nDu=ua(jn),kn=Array(3).concat(\"fff7bcfec44fd95f0e\",\"ffffd4fed98efe9929cc4c02\",\"ffffd4fed98efe9929d95f0e993404\",\"ffffd4fee391fec44ffe9929d95f0e993404\",\"ffffd4fee391fec44ffe9929ec7014cc4c028c2d04\",\"ffffe5fff7bcfee391fec44ffe9929ec7014cc4c028c2d04\",\"ffffe5fff7bcfee391fec44ffe9929ec7014cc4c02993404662506\").map(ka),Eu=ua(kn),ln=Array(3).concat(\"ffeda0feb24cf03b20\",\"ffffb2fecc5cfd8d3ce31a1c\",\"ffffb2fecc5cfd8d3cf03b20bd0026\",\"ffffb2fed976feb24cfd8d3cf03b20bd0026\",\"ffffb2fed976feb24cfd8d3cfc4e2ae3`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 803,
                  "startColumn": 479,
                  "endLine": 803,
                  "endColumn": 535,
                  "snippet": {
                    "text": "b1c7e9b47fcdbb41b6c41d91c0225ea8253494081d58\").map(ka),Cu=ua(hn),jn=Array(3).concat(\"f7fcb9addd8e31a354\",\"ffffccc2e69978c679238443\",\"ffffccc2e69978c67931a354006837\",\"ffffccd9f0a3addd8e78c67931a354006837\",\"ffffccd9f0a3addd8e78c67941ab5d238443005a32\",\"ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443005a32\",\"ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443006837004529\").map(ka),\nDu=ua(jn),kn=Array(3).concat(\"fff7bcfec44fd95f0e\",\"ffffd4fed98efe9929cc4c02\",\"ffffd4fed98efe9929d95f0e993404\",\"ffffd4fee391fec44ffe9929d95f0e993404\",\"ffffd4fee391fec44ffe9929ec7014cc4c028c2d04\",\"ffffe5fff7bcfee391fec44ffe9929ec7014cc4c028c2d04\",\"ffffe5fff7bcfee391fec44ffe9929ec7014cc4c029",
                    "rendered": {
                      "text": "b1c7e9b47fcdbb41b6c41d91c0225ea8253494081d58\").map(ka),Cu=ua(hn),jn=Array(3).concat(\"f7fcb9addd8e31a354\",\"ffffccc2e69978c679238443\",\"ffffccc2e69978c67931a354006837\",\"ffffccd9f0a3addd8e78c67931a354006837\",\"ffffccd9f0a3addd8e78c67941ab5d238443005a32\",\"ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443005a32\",\"ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443006837004529\").map(ka),\nDu=ua(jn),kn=Array(3).concat(\"fff7bcfec44fd95f0e\",\"ffffd4fed98efe9929cc4c02\",\"ffffd4fed98efe9929d95f0e993404\",\"ffffd4fee391fec44ffe9929d95f0e993404\",\"ffffd4fee391fec44ffe9929ec7014cc4c028c2d04\",\"ffffe5fff7bcfee391fec44ffe9929ec7014cc4c028c2d04\",\"ffffe5fff7bcfee391fec44ffe9929ec7014cc4c029",
                      "markdown": "`b1c7e9b47fcdbb41b6c41d91c0225ea8253494081d58\").map(ka),Cu=ua(hn),jn=Array(3).concat(\"f7fcb9addd8e31a354\",\"ffffccc2e69978c679238443\",\"ffffccc2e69978c67931a354006837\",\"ffffccd9f0a3addd8e78c67931a354006837\",\"ffffccd9f0a3addd8e78c67941ab5d238443005a32\",\"ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443005a32\",\"ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443006837004529\").map(ka),\nDu=ua(jn),kn=Array(3).concat(\"fff7bcfec44fd95f0e\",\"ffffd4fed98efe9929cc4c02\",\"ffffd4fed98efe9929d95f0e993404\",\"ffffd4fee391fec44ffe9929d95f0e993404\",\"ffffd4fee391fec44ffe9929ec7014cc4c028c2d04\",\"ffffe5fff7bcfee391fec44ffe9929ec7014cc4c028c2d04\",\"ffffe5fff7bcfee391fec44ffe9929ec7014cc4c029`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 803,
                  "startColumn": 428,
                  "endLine": 803,
                  "endColumn": 478,
                  "snippet": {
                    "text": "b1c7e9b47fcdbb41b6c41d91c0225ea80c2c84\",\"ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea8253494081d58\").map(ka),Cu=ua(hn),jn=Array(3).concat(\"f7fcb9addd8e31a354\",\"ffffccc2e69978c679238443\",\"ffffccc2e69978c67931a354006837\",\"ffffccd9f0a3addd8e78c67931a354006837\",\"ffffccd9f0a3addd8e78c67941ab5d238443005a32\",\"ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443005a32\",\"ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443006837004529\").map(ka),\nDu=ua(jn),kn=Array(3).concat(\"fff7bcfec44fd95f0e\",\"ffffd4fed98efe9929cc4c02\",\"ffffd4fed98efe9929d95f0e993404\",\"ffffd4fee391fec44ffe9929d95f0e993404\",\"ffffd4fee391fec44ffe9929ec7014cc4c028c2d04\",\"ffffe5fff7bcfee391fec44ffe9929ec7014c",
                    "rendered": {
                      "text": "b1c7e9b47fcdbb41b6c41d91c0225ea80c2c84\",\"ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea8253494081d58\").map(ka),Cu=ua(hn),jn=Array(3).concat(\"f7fcb9addd8e31a354\",\"ffffccc2e69978c679238443\",\"ffffccc2e69978c67931a354006837\",\"ffffccd9f0a3addd8e78c67931a354006837\",\"ffffccd9f0a3addd8e78c67941ab5d238443005a32\",\"ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443005a32\",\"ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443006837004529\").map(ka),\nDu=ua(jn),kn=Array(3).concat(\"fff7bcfec44fd95f0e\",\"ffffd4fed98efe9929cc4c02\",\"ffffd4fed98efe9929d95f0e993404\",\"ffffd4fee391fec44ffe9929d95f0e993404\",\"ffffd4fee391fec44ffe9929ec7014cc4c028c2d04\",\"ffffe5fff7bcfee391fec44ffe9929ec7014c",
                      "markdown": "`b1c7e9b47fcdbb41b6c41d91c0225ea80c2c84\",\"ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea8253494081d58\").map(ka),Cu=ua(hn),jn=Array(3).concat(\"f7fcb9addd8e31a354\",\"ffffccc2e69978c679238443\",\"ffffccc2e69978c67931a354006837\",\"ffffccd9f0a3addd8e78c67931a354006837\",\"ffffccd9f0a3addd8e78c67941ab5d238443005a32\",\"ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443005a32\",\"ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443006837004529\").map(ka),\nDu=ua(jn),kn=Array(3).concat(\"fff7bcfec44fd95f0e\",\"ffffd4fed98efe9929cc4c02\",\"ffffd4fed98efe9929d95f0e993404\",\"ffffd4fee391fec44ffe9929d95f0e993404\",\"ffffd4fee391fec44ffe9929ec7014cc4c028c2d04\",\"ffffe5fff7bcfee391fec44ffe9929ec7014c`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 803,
                  "startColumn": 383,
                  "endLine": 803,
                  "endColumn": 427,
                  "snippet": {
                    "text": "b47fcdbb41b6c41d91c0225ea80c2c84\",\"ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea80c2c84\",\"ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea8253494081d58\").map(ka),Cu=ua(hn),jn=Array(3).concat(\"f7fcb9addd8e31a354\",\"ffffccc2e69978c679238443\",\"ffffccc2e69978c67931a354006837\",\"ffffccd9f0a3addd8e78c67931a354006837\",\"ffffccd9f0a3addd8e78c67941ab5d238443005a32\",\"ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443005a32\",\"ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443006837004529\").map(ka),\nDu=ua(jn),kn=Array(3).concat(\"fff7bcfec44fd95f0e\",\"ffffd4fed98efe9929cc4c02\",\"ffffd4fed98efe9929d95f0e993404\",\"ffffd4fee391fec44ffe9929d95f0e993404\",\"ffffd4fee391fec44ffe9929ec7014c",
                    "rendered": {
                      "text": "b47fcdbb41b6c41d91c0225ea80c2c84\",\"ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea80c2c84\",\"ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea8253494081d58\").map(ka),Cu=ua(hn),jn=Array(3).concat(\"f7fcb9addd8e31a354\",\"ffffccc2e69978c679238443\",\"ffffccc2e69978c67931a354006837\",\"ffffccd9f0a3addd8e78c67931a354006837\",\"ffffccd9f0a3addd8e78c67941ab5d238443005a32\",\"ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443005a32\",\"ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443006837004529\").map(ka),\nDu=ua(jn),kn=Array(3).concat(\"fff7bcfec44fd95f0e\",\"ffffd4fed98efe9929cc4c02\",\"ffffd4fed98efe9929d95f0e993404\",\"ffffd4fee391fec44ffe9929d95f0e993404\",\"ffffd4fee391fec44ffe9929ec7014c",
                      "markdown": "`b47fcdbb41b6c41d91c0225ea80c2c84\",\"ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea80c2c84\",\"ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea8253494081d58\").map(ka),Cu=ua(hn),jn=Array(3).concat(\"f7fcb9addd8e31a354\",\"ffffccc2e69978c679238443\",\"ffffccc2e69978c67931a354006837\",\"ffffccd9f0a3addd8e78c67931a354006837\",\"ffffccd9f0a3addd8e78c67941ab5d238443005a32\",\"ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443005a32\",\"ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443006837004529\").map(ka),\nDu=ua(jn),kn=Array(3).concat(\"fff7bcfec44fd95f0e\",\"ffffd4fed98efe9929cc4c02\",\"ffffd4fed98efe9929d95f0e993404\",\"ffffd4fee391fec44ffe9929d95f0e993404\",\"ffffd4fee391fec44ffe9929ec7014c`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 803,
                  "startColumn": 168,
                  "endLine": 803,
                  "endColumn": 224,
                  "snippet": {
                    "text": "dfcc5c0fa9fb5f768a1dd3497ae017e7a017749006a\").map(ka),Bu=ua(gn),hn=Array(3).concat(\"edf8b17fcdbb2c7fb8\",\"ffffcca1dab441b6c4225ea8\",\n\"ffffcca1dab441b6c42c7fb8253494\",\"ffffccc7e9b47fcdbb41b6c42c7fb8253494\",\"ffffccc7e9b47fcdbb41b6c41d91c0225ea80c2c84\",\"ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea80c2c84\",\"ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea8253494081d58\").map(ka),Cu=ua(hn),jn=Array(3).concat(\"f7fcb9addd8e31a354\",\"ffffccc2e69978c679238443\",\"ffffccc2e69978c67931a354006837\",\"ffffccd9f0a3addd8e78c67931a354006837\",\"ffffccd9f0a3addd8e78c67941ab5d238443005a32\",\"ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443005a32\",\"ffffe5f7fcb9d9f0a3addd8e78c67941ab5d23844300",
                    "rendered": {
                      "text": "dfcc5c0fa9fb5f768a1dd3497ae017e7a017749006a\").map(ka),Bu=ua(gn),hn=Array(3).concat(\"edf8b17fcdbb2c7fb8\",\"ffffcca1dab441b6c4225ea8\",\n\"ffffcca1dab441b6c42c7fb8253494\",\"ffffccc7e9b47fcdbb41b6c42c7fb8253494\",\"ffffccc7e9b47fcdbb41b6c41d91c0225ea80c2c84\",\"ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea80c2c84\",\"ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea8253494081d58\").map(ka),Cu=ua(hn),jn=Array(3).concat(\"f7fcb9addd8e31a354\",\"ffffccc2e69978c679238443\",\"ffffccc2e69978c67931a354006837\",\"ffffccd9f0a3addd8e78c67931a354006837\",\"ffffccd9f0a3addd8e78c67941ab5d238443005a32\",\"ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443005a32\",\"ffffe5f7fcb9d9f0a3addd8e78c67941ab5d23844300",
                      "markdown": "`dfcc5c0fa9fb5f768a1dd3497ae017e7a017749006a\").map(ka),Bu=ua(gn),hn=Array(3).concat(\"edf8b17fcdbb2c7fb8\",\"ffffcca1dab441b6c4225ea8\",\n\"ffffcca1dab441b6c42c7fb8253494\",\"ffffccc7e9b47fcdbb41b6c42c7fb8253494\",\"ffffccc7e9b47fcdbb41b6c41d91c0225ea80c2c84\",\"ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea80c2c84\",\"ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea8253494081d58\").map(ka),Cu=ua(hn),jn=Array(3).concat(\"f7fcb9addd8e31a354\",\"ffffccc2e69978c679238443\",\"ffffccc2e69978c67931a354006837\",\"ffffccd9f0a3addd8e78c67931a354006837\",\"ffffccd9f0a3addd8e78c67941ab5d238443005a32\",\"ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443005a32\",\"ffffe5f7fcb9d9f0a3addd8e78c67941ab5d23844300`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 803,
                  "startColumn": 117,
                  "endLine": 803,
                  "endColumn": 167,
                  "snippet": {
                    "text": "dfcc5c0fa9fb5f768a1dd3497ae017e7a0177\",\"fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a017749006a\").map(ka),Bu=ua(gn),hn=Array(3).concat(\"edf8b17fcdbb2c7fb8\",\"ffffcca1dab441b6c4225ea8\",\n\"ffffcca1dab441b6c42c7fb8253494\",\"ffffccc7e9b47fcdbb41b6c42c7fb8253494\",\"ffffccc7e9b47fcdbb41b6c41d91c0225ea80c2c84\",\"ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea80c2c84\",\"ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea8253494081d58\").map(ka),Cu=ua(hn),jn=Array(3).concat(\"f7fcb9addd8e31a354\",\"ffffccc2e69978c679238443\",\"ffffccc2e69978c67931a354006837\",\"ffffccd9f0a3addd8e78c67931a354006837\",\"ffffccd9f0a3addd8e78c67941ab5d238443005a32\",\"ffffe5f7fcb9d9f0a3addd8e78c67941ab5d23",
                    "rendered": {
                      "text": "dfcc5c0fa9fb5f768a1dd3497ae017e7a0177\",\"fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a017749006a\").map(ka),Bu=ua(gn),hn=Array(3).concat(\"edf8b17fcdbb2c7fb8\",\"ffffcca1dab441b6c4225ea8\",\n\"ffffcca1dab441b6c42c7fb8253494\",\"ffffccc7e9b47fcdbb41b6c42c7fb8253494\",\"ffffccc7e9b47fcdbb41b6c41d91c0225ea80c2c84\",\"ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea80c2c84\",\"ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea8253494081d58\").map(ka),Cu=ua(hn),jn=Array(3).concat(\"f7fcb9addd8e31a354\",\"ffffccc2e69978c679238443\",\"ffffccc2e69978c67931a354006837\",\"ffffccd9f0a3addd8e78c67931a354006837\",\"ffffccd9f0a3addd8e78c67941ab5d238443005a32\",\"ffffe5f7fcb9d9f0a3addd8e78c67941ab5d23",
                      "markdown": "`dfcc5c0fa9fb5f768a1dd3497ae017e7a0177\",\"fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a017749006a\").map(ka),Bu=ua(gn),hn=Array(3).concat(\"edf8b17fcdbb2c7fb8\",\"ffffcca1dab441b6c4225ea8\",\n\"ffffcca1dab441b6c42c7fb8253494\",\"ffffccc7e9b47fcdbb41b6c42c7fb8253494\",\"ffffccc7e9b47fcdbb41b6c41d91c0225ea80c2c84\",\"ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea80c2c84\",\"ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea8253494081d58\").map(ka),Cu=ua(hn),jn=Array(3).concat(\"f7fcb9addd8e31a354\",\"ffffccc2e69978c679238443\",\"ffffccc2e69978c67931a354006837\",\"ffffccd9f0a3addd8e78c67931a354006837\",\"ffffccd9f0a3addd8e78c67941ab5d238443005a32\",\"ffffe5f7fcb9d9f0a3addd8e78c67941ab5d23`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 803,
                  "startColumn": 72,
                  "endLine": 803,
                  "endColumn": 116,
                  "snippet": {
                    "text": "0fa9fb5f768a1dd3497ae017e7a0177\",\"fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a0177\",\"fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a017749006a\").map(ka),Bu=ua(gn),hn=Array(3).concat(\"edf8b17fcdbb2c7fb8\",\"ffffcca1dab441b6c4225ea8\",\n\"ffffcca1dab441b6c42c7fb8253494\",\"ffffccc7e9b47fcdbb41b6c42c7fb8253494\",\"ffffccc7e9b47fcdbb41b6c41d91c0225ea80c2c84\",\"ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea80c2c84\",\"ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea8253494081d58\").map(ka),Cu=ua(hn),jn=Array(3).concat(\"f7fcb9addd8e31a354\",\"ffffccc2e69978c679238443\",\"ffffccc2e69978c67931a354006837\",\"ffffccd9f0a3addd8e78c67931a354006837\",\"ffffccd9f0a3addd8e78c67941ab5d23",
                    "rendered": {
                      "text": "0fa9fb5f768a1dd3497ae017e7a0177\",\"fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a0177\",\"fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a017749006a\").map(ka),Bu=ua(gn),hn=Array(3).concat(\"edf8b17fcdbb2c7fb8\",\"ffffcca1dab441b6c4225ea8\",\n\"ffffcca1dab441b6c42c7fb8253494\",\"ffffccc7e9b47fcdbb41b6c42c7fb8253494\",\"ffffccc7e9b47fcdbb41b6c41d91c0225ea80c2c84\",\"ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea80c2c84\",\"ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea8253494081d58\").map(ka),Cu=ua(hn),jn=Array(3).concat(\"f7fcb9addd8e31a354\",\"ffffccc2e69978c679238443\",\"ffffccc2e69978c67931a354006837\",\"ffffccd9f0a3addd8e78c67931a354006837\",\"ffffccd9f0a3addd8e78c67941ab5d23",
                      "markdown": "`0fa9fb5f768a1dd3497ae017e7a0177\",\"fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a0177\",\"fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a017749006a\").map(ka),Bu=ua(gn),hn=Array(3).concat(\"edf8b17fcdbb2c7fb8\",\"ffffcca1dab441b6c4225ea8\",\n\"ffffcca1dab441b6c42c7fb8253494\",\"ffffccc7e9b47fcdbb41b6c42c7fb8253494\",\"ffffccc7e9b47fcdbb41b6c41d91c0225ea80c2c84\",\"ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea80c2c84\",\"ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea8253494081d58\").map(ka),Cu=ua(hn),jn=Array(3).concat(\"f7fcb9addd8e31a354\",\"ffffccc2e69978c679238443\",\"ffffccc2e69978c67931a354006837\",\"ffffccd9f0a3addd8e78c67931a354006837\",\"ffffccd9f0a3addd8e78c67941ab5d23`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 802,
                  "startColumn": 362,
                  "endLine": 802,
                  "endColumn": 418,
                  "snippet": {
                    "text": "efd4b9dac994c7df65b0e7298ace125698004367001f\").map(ka),Au=ua(fn),gn=Array(3).concat(\"fde0ddfa9fb5c51b8a\",\"feebe2fbb4b9f768a1ae017e\",\"feebe2fbb4b9f768a1c51b8a7a0177\",\"feebe2fcc5c0fa9fb5f768a1c51b8a7a0177\",\"feebe2fcc5c0fa9fb5f768a1dd3497ae017e7a0177\",\"fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a0177\",\"fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a017749006a\").map(ka),Bu=ua(gn),hn=Array(3).concat(\"edf8b17fcdbb2c7fb8\",\"ffffcca1dab441b6c4225ea8\",\n\"ffffcca1dab441b6c42c7fb8253494\",\"ffffccc7e9b47fcdbb41b6c42c7fb8253494\",\"ffffccc7e9b47fcdbb41b6c41d91c0225ea80c2c84\",\"ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea80c2c84\",\"ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea82",
                    "rendered": {
                      "text": "efd4b9dac994c7df65b0e7298ace125698004367001f\").map(ka),Au=ua(fn),gn=Array(3).concat(\"fde0ddfa9fb5c51b8a\",\"feebe2fbb4b9f768a1ae017e\",\"feebe2fbb4b9f768a1c51b8a7a0177\",\"feebe2fcc5c0fa9fb5f768a1c51b8a7a0177\",\"feebe2fcc5c0fa9fb5f768a1dd3497ae017e7a0177\",\"fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a0177\",\"fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a017749006a\").map(ka),Bu=ua(gn),hn=Array(3).concat(\"edf8b17fcdbb2c7fb8\",\"ffffcca1dab441b6c4225ea8\",\n\"ffffcca1dab441b6c42c7fb8253494\",\"ffffccc7e9b47fcdbb41b6c42c7fb8253494\",\"ffffccc7e9b47fcdbb41b6c41d91c0225ea80c2c84\",\"ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea80c2c84\",\"ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea82",
                      "markdown": "`efd4b9dac994c7df65b0e7298ace125698004367001f\").map(ka),Au=ua(fn),gn=Array(3).concat(\"fde0ddfa9fb5c51b8a\",\"feebe2fbb4b9f768a1ae017e\",\"feebe2fbb4b9f768a1c51b8a7a0177\",\"feebe2fcc5c0fa9fb5f768a1c51b8a7a0177\",\"feebe2fcc5c0fa9fb5f768a1dd3497ae017e7a0177\",\"fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a0177\",\"fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a017749006a\").map(ka),Bu=ua(gn),hn=Array(3).concat(\"edf8b17fcdbb2c7fb8\",\"ffffcca1dab441b6c4225ea8\",\n\"ffffcca1dab441b6c42c7fb8253494\",\"ffffccc7e9b47fcdbb41b6c42c7fb8253494\",\"ffffccc7e9b47fcdbb41b6c41d91c0225ea80c2c84\",\"ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea80c2c84\",\"ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea82`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 802,
                  "startColumn": 311,
                  "endLine": 802,
                  "endColumn": 361,
                  "snippet": {
                    "text": "efd4b9dac994c7df65b0e7298ace125691003f\",\"f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125698004367001f\").map(ka),Au=ua(fn),gn=Array(3).concat(\"fde0ddfa9fb5c51b8a\",\"feebe2fbb4b9f768a1ae017e\",\"feebe2fbb4b9f768a1c51b8a7a0177\",\"feebe2fcc5c0fa9fb5f768a1c51b8a7a0177\",\"feebe2fcc5c0fa9fb5f768a1dd3497ae017e7a0177\",\"fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a0177\",\"fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a017749006a\").map(ka),Bu=ua(gn),hn=Array(3).concat(\"edf8b17fcdbb2c7fb8\",\"ffffcca1dab441b6c4225ea8\",\n\"ffffcca1dab441b6c42c7fb8253494\",\"ffffccc7e9b47fcdbb41b6c42c7fb8253494\",\"ffffccc7e9b47fcdbb41b6c41d91c0225ea80c2c84\",\"ffffd9edf8b1c7e9b47fcdbb41b6c41d91c02",
                    "rendered": {
                      "text": "efd4b9dac994c7df65b0e7298ace125691003f\",\"f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125698004367001f\").map(ka),Au=ua(fn),gn=Array(3).concat(\"fde0ddfa9fb5c51b8a\",\"feebe2fbb4b9f768a1ae017e\",\"feebe2fbb4b9f768a1c51b8a7a0177\",\"feebe2fcc5c0fa9fb5f768a1c51b8a7a0177\",\"feebe2fcc5c0fa9fb5f768a1dd3497ae017e7a0177\",\"fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a0177\",\"fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a017749006a\").map(ka),Bu=ua(gn),hn=Array(3).concat(\"edf8b17fcdbb2c7fb8\",\"ffffcca1dab441b6c4225ea8\",\n\"ffffcca1dab441b6c42c7fb8253494\",\"ffffccc7e9b47fcdbb41b6c42c7fb8253494\",\"ffffccc7e9b47fcdbb41b6c41d91c0225ea80c2c84\",\"ffffd9edf8b1c7e9b47fcdbb41b6c41d91c02",
                      "markdown": "`efd4b9dac994c7df65b0e7298ace125691003f\",\"f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125698004367001f\").map(ka),Au=ua(fn),gn=Array(3).concat(\"fde0ddfa9fb5c51b8a\",\"feebe2fbb4b9f768a1ae017e\",\"feebe2fbb4b9f768a1c51b8a7a0177\",\"feebe2fcc5c0fa9fb5f768a1c51b8a7a0177\",\"feebe2fcc5c0fa9fb5f768a1dd3497ae017e7a0177\",\"fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a0177\",\"fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a017749006a\").map(ka),Bu=ua(gn),hn=Array(3).concat(\"edf8b17fcdbb2c7fb8\",\"ffffcca1dab441b6c4225ea8\",\n\"ffffcca1dab441b6c42c7fb8253494\",\"ffffccc7e9b47fcdbb41b6c42c7fb8253494\",\"ffffccc7e9b47fcdbb41b6c41d91c0225ea80c2c84\",\"ffffd9edf8b1c7e9b47fcdbb41b6c41d91c02`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 802,
                  "startColumn": 266,
                  "endLine": 802,
                  "endColumn": 310,
                  "snippet": {
                    "text": "ac994c7df65b0e7298ace125691003f\",\n\"f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125691003f\",\"f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125698004367001f\").map(ka),Au=ua(fn),gn=Array(3).concat(\"fde0ddfa9fb5c51b8a\",\"feebe2fbb4b9f768a1ae017e\",\"feebe2fbb4b9f768a1c51b8a7a0177\",\"feebe2fcc5c0fa9fb5f768a1c51b8a7a0177\",\"feebe2fcc5c0fa9fb5f768a1dd3497ae017e7a0177\",\"fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a0177\",\"fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a017749006a\").map(ka),Bu=ua(gn),hn=Array(3).concat(\"edf8b17fcdbb2c7fb8\",\"ffffcca1dab441b6c4225ea8\",\n\"ffffcca1dab441b6c42c7fb8253494\",\"ffffccc7e9b47fcdbb41b6c42c7fb8253494\",\"ffffccc7e9b47fcdbb41b6c41d91c02",
                    "rendered": {
                      "text": "ac994c7df65b0e7298ace125691003f\",\n\"f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125691003f\",\"f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125698004367001f\").map(ka),Au=ua(fn),gn=Array(3).concat(\"fde0ddfa9fb5c51b8a\",\"feebe2fbb4b9f768a1ae017e\",\"feebe2fbb4b9f768a1c51b8a7a0177\",\"feebe2fcc5c0fa9fb5f768a1c51b8a7a0177\",\"feebe2fcc5c0fa9fb5f768a1dd3497ae017e7a0177\",\"fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a0177\",\"fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a017749006a\").map(ka),Bu=ua(gn),hn=Array(3).concat(\"edf8b17fcdbb2c7fb8\",\"ffffcca1dab441b6c4225ea8\",\n\"ffffcca1dab441b6c42c7fb8253494\",\"ffffccc7e9b47fcdbb41b6c42c7fb8253494\",\"ffffccc7e9b47fcdbb41b6c41d91c02",
                      "markdown": "`ac994c7df65b0e7298ace125691003f\",\n\"f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125691003f\",\"f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125698004367001f\").map(ka),Au=ua(fn),gn=Array(3).concat(\"fde0ddfa9fb5c51b8a\",\"feebe2fbb4b9f768a1ae017e\",\"feebe2fbb4b9f768a1c51b8a7a0177\",\"feebe2fcc5c0fa9fb5f768a1c51b8a7a0177\",\"feebe2fcc5c0fa9fb5f768a1dd3497ae017e7a0177\",\"fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a0177\",\"fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a017749006a\").map(ka),Bu=ua(gn),hn=Array(3).concat(\"edf8b17fcdbb2c7fb8\",\"ffffcca1dab441b6c4225ea8\",\n\"ffffcca1dab441b6c42c7fb8253494\",\"ffffccc7e9b47fcdbb41b6c42c7fb8253494\",\"ffffccc7e9b47fcdbb41b6c41d91c02`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 802,
                  "startColumn": 51,
                  "endLine": 802,
                  "endColumn": 107,
                  "snippet": {
                    "text": "2d0d1e6a6bddb74a9cf3690c00570b0045a8d023858\").map(ka),zu=ua(en),fn=Array(3).concat(\"e7e1efc994c7dd1c77\",\"f1eef6d7b5d8df65b0ce1256\",\"f1eef6d7b5d8df65b0dd1c77980043\",\"f1eef6d4b9dac994c7df65b0dd1c77980043\",\"f1eef6d4b9dac994c7df65b0e7298ace125691003f\",\n\"f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125691003f\",\"f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125698004367001f\").map(ka),Au=ua(fn),gn=Array(3).concat(\"fde0ddfa9fb5c51b8a\",\"feebe2fbb4b9f768a1ae017e\",\"feebe2fbb4b9f768a1c51b8a7a0177\",\"feebe2fcc5c0fa9fb5f768a1c51b8a7a0177\",\"feebe2fcc5c0fa9fb5f768a1dd3497ae017e7a0177\",\"fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a0177\",\"fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a",
                    "rendered": {
                      "text": "2d0d1e6a6bddb74a9cf3690c00570b0045a8d023858\").map(ka),zu=ua(en),fn=Array(3).concat(\"e7e1efc994c7dd1c77\",\"f1eef6d7b5d8df65b0ce1256\",\"f1eef6d7b5d8df65b0dd1c77980043\",\"f1eef6d4b9dac994c7df65b0dd1c77980043\",\"f1eef6d4b9dac994c7df65b0e7298ace125691003f\",\n\"f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125691003f\",\"f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125698004367001f\").map(ka),Au=ua(fn),gn=Array(3).concat(\"fde0ddfa9fb5c51b8a\",\"feebe2fbb4b9f768a1ae017e\",\"feebe2fbb4b9f768a1c51b8a7a0177\",\"feebe2fcc5c0fa9fb5f768a1c51b8a7a0177\",\"feebe2fcc5c0fa9fb5f768a1dd3497ae017e7a0177\",\"fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a0177\",\"fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a",
                      "markdown": "`2d0d1e6a6bddb74a9cf3690c00570b0045a8d023858\").map(ka),zu=ua(en),fn=Array(3).concat(\"e7e1efc994c7dd1c77\",\"f1eef6d7b5d8df65b0ce1256\",\"f1eef6d7b5d8df65b0dd1c77980043\",\"f1eef6d4b9dac994c7df65b0dd1c77980043\",\"f1eef6d4b9dac994c7df65b0e7298ace125691003f\",\n\"f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125691003f\",\"f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125698004367001f\").map(ka),Au=ua(fn),gn=Array(3).concat(\"fde0ddfa9fb5c51b8a\",\"feebe2fbb4b9f768a1ae017e\",\"feebe2fbb4b9f768a1c51b8a7a0177\",\"feebe2fcc5c0fa9fb5f768a1c51b8a7a0177\",\"feebe2fcc5c0fa9fb5f768a1dd3497ae017e7a0177\",\"fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a0177\",\"fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 802,
                  "endLine": 802,
                  "endColumn": 50,
                  "snippet": {
                    "text": "2d0d1e6a6bddb74a9cf3690c00570b0034e7b\",\"fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0045a8d023858\").map(ka),zu=ua(en),fn=Array(3).concat(\"e7e1efc994c7dd1c77\",\"f1eef6d7b5d8df65b0ce1256\",\"f1eef6d7b5d8df65b0dd1c77980043\",\"f1eef6d4b9dac994c7df65b0dd1c77980043\",\"f1eef6d4b9dac994c7df65b0e7298ace125691003f\",\n\"f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125691003f\",\"f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125698004367001f\").map(ka),Au=ua(fn),gn=Array(3).concat(\"fde0ddfa9fb5c51b8a\",\"feebe2fbb4b9f768a1ae017e\",\"feebe2fbb4b9f768a1c51b8a7a0177\",\"feebe2fcc5c0fa9fb5f768a1c51b8a7a0177\",\"feebe2fcc5c0fa9fb5f768a1dd3497ae017e7a0177\",\"fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae",
                    "rendered": {
                      "text": "2d0d1e6a6bddb74a9cf3690c00570b0034e7b\",\"fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0045a8d023858\").map(ka),zu=ua(en),fn=Array(3).concat(\"e7e1efc994c7dd1c77\",\"f1eef6d7b5d8df65b0ce1256\",\"f1eef6d7b5d8df65b0dd1c77980043\",\"f1eef6d4b9dac994c7df65b0dd1c77980043\",\"f1eef6d4b9dac994c7df65b0e7298ace125691003f\",\n\"f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125691003f\",\"f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125698004367001f\").map(ka),Au=ua(fn),gn=Array(3).concat(\"fde0ddfa9fb5c51b8a\",\"feebe2fbb4b9f768a1ae017e\",\"feebe2fbb4b9f768a1c51b8a7a0177\",\"feebe2fcc5c0fa9fb5f768a1c51b8a7a0177\",\"feebe2fcc5c0fa9fb5f768a1dd3497ae017e7a0177\",\"fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae",
                      "markdown": "`2d0d1e6a6bddb74a9cf3690c00570b0034e7b\",\"fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0045a8d023858\").map(ka),zu=ua(en),fn=Array(3).concat(\"e7e1efc994c7dd1c77\",\"f1eef6d7b5d8df65b0ce1256\",\"f1eef6d7b5d8df65b0dd1c77980043\",\"f1eef6d4b9dac994c7df65b0dd1c77980043\",\"f1eef6d4b9dac994c7df65b0e7298ace125691003f\",\n\"f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125691003f\",\"f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125698004367001f\").map(ka),Au=ua(fn),gn=Array(3).concat(\"fde0ddfa9fb5c51b8a\",\"feebe2fbb4b9f768a1ae017e\",\"feebe2fbb4b9f768a1c51b8a7a0177\",\"feebe2fcc5c0fa9fb5f768a1c51b8a7a0177\",\"feebe2fcc5c0fa9fb5f768a1dd3497ae017e7a0177\",\"fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 801,
                  "startColumn": 460,
                  "endLine": 801,
                  "endColumn": 504,
                  "snippet": {
                    "text": "e6a6bddb74a9cf3690c00570b0034e7b\",\"fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0034e7b\",\"fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0045a8d023858\").map(ka),zu=ua(en),fn=Array(3).concat(\"e7e1efc994c7dd1c77\",\"f1eef6d7b5d8df65b0ce1256\",\"f1eef6d7b5d8df65b0dd1c77980043\",\"f1eef6d4b9dac994c7df65b0dd1c77980043\",\"f1eef6d4b9dac994c7df65b0e7298ace125691003f\",\n\"f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125691003f\",\"f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125698004367001f\").map(ka),Au=ua(fn),gn=Array(3).concat(\"fde0ddfa9fb5c51b8a\",\"feebe2fbb4b9f768a1ae017e\",\"feebe2fbb4b9f768a1c51b8a7a0177\",\"feebe2fcc5c0fa9fb5f768a1c51b8a7a0177\",\"feebe2fcc5c0fa9fb5f768a1dd3497a",
                    "rendered": {
                      "text": "e6a6bddb74a9cf3690c00570b0034e7b\",\"fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0034e7b\",\"fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0045a8d023858\").map(ka),zu=ua(en),fn=Array(3).concat(\"e7e1efc994c7dd1c77\",\"f1eef6d7b5d8df65b0ce1256\",\"f1eef6d7b5d8df65b0dd1c77980043\",\"f1eef6d4b9dac994c7df65b0dd1c77980043\",\"f1eef6d4b9dac994c7df65b0e7298ace125691003f\",\n\"f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125691003f\",\"f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125698004367001f\").map(ka),Au=ua(fn),gn=Array(3).concat(\"fde0ddfa9fb5c51b8a\",\"feebe2fbb4b9f768a1ae017e\",\"feebe2fbb4b9f768a1c51b8a7a0177\",\"feebe2fcc5c0fa9fb5f768a1c51b8a7a0177\",\"feebe2fcc5c0fa9fb5f768a1dd3497a",
                      "markdown": "`e6a6bddb74a9cf3690c00570b0034e7b\",\"fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0034e7b\",\"fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0045a8d023858\").map(ka),zu=ua(en),fn=Array(3).concat(\"e7e1efc994c7dd1c77\",\"f1eef6d7b5d8df65b0ce1256\",\"f1eef6d7b5d8df65b0dd1c77980043\",\"f1eef6d4b9dac994c7df65b0dd1c77980043\",\"f1eef6d4b9dac994c7df65b0e7298ace125691003f\",\n\"f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125691003f\",\"f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125698004367001f\").map(ka),Au=ua(fn),gn=Array(3).concat(\"fde0ddfa9fb5c51b8a\",\"feebe2fbb4b9f768a1ae017e\",\"feebe2fbb4b9f768a1c51b8a7a0177\",\"feebe2fcc5c0fa9fb5f768a1c51b8a7a0177\",\"feebe2fcc5c0fa9fb5f768a1dd3497a`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 801,
                  "startColumn": 245,
                  "endLine": 801,
                  "endColumn": 301,
                  "snippet": {
                    "text": "0d0d1e6a6bddb67a9cf3690c002818a016c59014636\").map(ka),\nyu=ua(dn),en=Array(3).concat(\"ece7f2a6bddb2b8cbe\",\"f1eef6bdc9e174a9cf0570b0\",\"f1eef6bdc9e174a9cf2b8cbe045a8d\",\"f1eef6d0d1e6a6bddb74a9cf2b8cbe045a8d\",\"f1eef6d0d1e6a6bddb74a9cf3690c00570b0034e7b\",\"fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0034e7b\",\"fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0045a8d023858\").map(ka),zu=ua(en),fn=Array(3).concat(\"e7e1efc994c7dd1c77\",\"f1eef6d7b5d8df65b0ce1256\",\"f1eef6d7b5d8df65b0dd1c77980043\",\"f1eef6d4b9dac994c7df65b0dd1c77980043\",\"f1eef6d4b9dac994c7df65b0e7298ace125691003f\",\n\"f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125691003f\",\"f7f4f9e7e1efd4b9dac994c7df65b0e7298ace12569",
                    "rendered": {
                      "text": "0d0d1e6a6bddb67a9cf3690c002818a016c59014636\").map(ka),\nyu=ua(dn),en=Array(3).concat(\"ece7f2a6bddb2b8cbe\",\"f1eef6bdc9e174a9cf0570b0\",\"f1eef6bdc9e174a9cf2b8cbe045a8d\",\"f1eef6d0d1e6a6bddb74a9cf2b8cbe045a8d\",\"f1eef6d0d1e6a6bddb74a9cf3690c00570b0034e7b\",\"fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0034e7b\",\"fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0045a8d023858\").map(ka),zu=ua(en),fn=Array(3).concat(\"e7e1efc994c7dd1c77\",\"f1eef6d7b5d8df65b0ce1256\",\"f1eef6d7b5d8df65b0dd1c77980043\",\"f1eef6d4b9dac994c7df65b0dd1c77980043\",\"f1eef6d4b9dac994c7df65b0e7298ace125691003f\",\n\"f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125691003f\",\"f7f4f9e7e1efd4b9dac994c7df65b0e7298ace12569",
                      "markdown": "`0d0d1e6a6bddb67a9cf3690c002818a016c59014636\").map(ka),\nyu=ua(dn),en=Array(3).concat(\"ece7f2a6bddb2b8cbe\",\"f1eef6bdc9e174a9cf0570b0\",\"f1eef6bdc9e174a9cf2b8cbe045a8d\",\"f1eef6d0d1e6a6bddb74a9cf2b8cbe045a8d\",\"f1eef6d0d1e6a6bddb74a9cf3690c00570b0034e7b\",\"fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0034e7b\",\"fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0045a8d023858\").map(ka),zu=ua(en),fn=Array(3).concat(\"e7e1efc994c7dd1c77\",\"f1eef6d7b5d8df65b0ce1256\",\"f1eef6d7b5d8df65b0dd1c77980043\",\"f1eef6d4b9dac994c7df65b0dd1c77980043\",\"f1eef6d4b9dac994c7df65b0e7298ace125691003f\",\n\"f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125691003f\",\"f7f4f9e7e1efd4b9dac994c7df65b0e7298ace12569`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 801,
                  "startColumn": 194,
                  "endLine": 801,
                  "endColumn": 244,
                  "snippet": {
                    "text": "0d0d1e6a6bddb67a9cf3690c002818a016450\",\"fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016c59014636\").map(ka),\nyu=ua(dn),en=Array(3).concat(\"ece7f2a6bddb2b8cbe\",\"f1eef6bdc9e174a9cf0570b0\",\"f1eef6bdc9e174a9cf2b8cbe045a8d\",\"f1eef6d0d1e6a6bddb74a9cf2b8cbe045a8d\",\"f1eef6d0d1e6a6bddb74a9cf3690c00570b0034e7b\",\"fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0034e7b\",\"fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0045a8d023858\").map(ka),zu=ua(en),fn=Array(3).concat(\"e7e1efc994c7dd1c77\",\"f1eef6d7b5d8df65b0ce1256\",\"f1eef6d7b5d8df65b0dd1c77980043\",\"f1eef6d4b9dac994c7df65b0dd1c77980043\",\"f1eef6d4b9dac994c7df65b0e7298ace125691003f\",\n\"f7f4f9e7e1efd4b9dac994c7df65b0e7298ac",
                    "rendered": {
                      "text": "0d0d1e6a6bddb67a9cf3690c002818a016450\",\"fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016c59014636\").map(ka),\nyu=ua(dn),en=Array(3).concat(\"ece7f2a6bddb2b8cbe\",\"f1eef6bdc9e174a9cf0570b0\",\"f1eef6bdc9e174a9cf2b8cbe045a8d\",\"f1eef6d0d1e6a6bddb74a9cf2b8cbe045a8d\",\"f1eef6d0d1e6a6bddb74a9cf3690c00570b0034e7b\",\"fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0034e7b\",\"fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0045a8d023858\").map(ka),zu=ua(en),fn=Array(3).concat(\"e7e1efc994c7dd1c77\",\"f1eef6d7b5d8df65b0ce1256\",\"f1eef6d7b5d8df65b0dd1c77980043\",\"f1eef6d4b9dac994c7df65b0dd1c77980043\",\"f1eef6d4b9dac994c7df65b0e7298ace125691003f\",\n\"f7f4f9e7e1efd4b9dac994c7df65b0e7298ac",
                      "markdown": "`0d0d1e6a6bddb67a9cf3690c002818a016450\",\"fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016c59014636\").map(ka),\nyu=ua(dn),en=Array(3).concat(\"ece7f2a6bddb2b8cbe\",\"f1eef6bdc9e174a9cf0570b0\",\"f1eef6bdc9e174a9cf2b8cbe045a8d\",\"f1eef6d0d1e6a6bddb74a9cf2b8cbe045a8d\",\"f1eef6d0d1e6a6bddb74a9cf3690c00570b0034e7b\",\"fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0034e7b\",\"fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0045a8d023858\").map(ka),zu=ua(en),fn=Array(3).concat(\"e7e1efc994c7dd1c77\",\"f1eef6d7b5d8df65b0ce1256\",\"f1eef6d7b5d8df65b0dd1c77980043\",\"f1eef6d4b9dac994c7df65b0dd1c77980043\",\"f1eef6d4b9dac994c7df65b0e7298ace125691003f\",\n\"f7f4f9e7e1efd4b9dac994c7df65b0e7298ac`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 801,
                  "startColumn": 149,
                  "endLine": 801,
                  "endColumn": 193,
                  "snippet": {
                    "text": "6a6bddb67a9cf3690c002818a016450\",\"fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016450\",\"fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016c59014636\").map(ka),\nyu=ua(dn),en=Array(3).concat(\"ece7f2a6bddb2b8cbe\",\"f1eef6bdc9e174a9cf0570b0\",\"f1eef6bdc9e174a9cf2b8cbe045a8d\",\"f1eef6d0d1e6a6bddb74a9cf2b8cbe045a8d\",\"f1eef6d0d1e6a6bddb74a9cf3690c00570b0034e7b\",\"fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0034e7b\",\"fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0045a8d023858\").map(ka),zu=ua(en),fn=Array(3).concat(\"e7e1efc994c7dd1c77\",\"f1eef6d7b5d8df65b0ce1256\",\"f1eef6d7b5d8df65b0dd1c77980043\",\"f1eef6d4b9dac994c7df65b0dd1c77980043\",\"f1eef6d4b9dac994c7df65b0e7298ace",
                    "rendered": {
                      "text": "6a6bddb67a9cf3690c002818a016450\",\"fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016450\",\"fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016c59014636\").map(ka),\nyu=ua(dn),en=Array(3).concat(\"ece7f2a6bddb2b8cbe\",\"f1eef6bdc9e174a9cf0570b0\",\"f1eef6bdc9e174a9cf2b8cbe045a8d\",\"f1eef6d0d1e6a6bddb74a9cf2b8cbe045a8d\",\"f1eef6d0d1e6a6bddb74a9cf3690c00570b0034e7b\",\"fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0034e7b\",\"fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0045a8d023858\").map(ka),zu=ua(en),fn=Array(3).concat(\"e7e1efc994c7dd1c77\",\"f1eef6d7b5d8df65b0ce1256\",\"f1eef6d7b5d8df65b0dd1c77980043\",\"f1eef6d4b9dac994c7df65b0dd1c77980043\",\"f1eef6d4b9dac994c7df65b0e7298ace",
                      "markdown": "`6a6bddb67a9cf3690c002818a016450\",\"fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016450\",\"fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016c59014636\").map(ka),\nyu=ua(dn),en=Array(3).concat(\"ece7f2a6bddb2b8cbe\",\"f1eef6bdc9e174a9cf0570b0\",\"f1eef6bdc9e174a9cf2b8cbe045a8d\",\"f1eef6d0d1e6a6bddb74a9cf2b8cbe045a8d\",\"f1eef6d0d1e6a6bddb74a9cf3690c00570b0034e7b\",\"fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0034e7b\",\"fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0045a8d023858\").map(ka),zu=ua(en),fn=Array(3).concat(\"e7e1efc994c7dd1c77\",\"f1eef6d7b5d8df65b0ce1256\",\"f1eef6d7b5d8df65b0dd1c77980043\",\"f1eef6d4b9dac994c7df65b0dd1c77980043\",\"f1eef6d4b9dac994c7df65b0e7298ace`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 800,
                  "startColumn": 479,
                  "endLine": 800,
                  "endColumn": 535,
                  "snippet": {
                    "text": "c8fdd49efdbb84fc8d59ef6548d7301fb300007f0000\").map(ka),xu=ua(cn),dn=Array(3).concat(\"ece2f0a6bddb1c9099\",\"f6eff7bdc9e167a9cf02818a\",\"f6eff7bdc9e167a9cf1c9099016c59\",\"f6eff7d0d1e6a6bddb67a9cf1c9099016c59\",\"f6eff7d0d1e6a6bddb67a9cf3690c002818a016450\",\"fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016450\",\"fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016c59014636\").map(ka),\nyu=ua(dn),en=Array(3).concat(\"ece7f2a6bddb2b8cbe\",\"f1eef6bdc9e174a9cf0570b0\",\"f1eef6bdc9e174a9cf2b8cbe045a8d\",\"f1eef6d0d1e6a6bddb74a9cf2b8cbe045a8d\",\"f1eef6d0d1e6a6bddb74a9cf3690c00570b0034e7b\",\"fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0034e7b\",\"fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b00",
                    "rendered": {
                      "text": "c8fdd49efdbb84fc8d59ef6548d7301fb300007f0000\").map(ka),xu=ua(cn),dn=Array(3).concat(\"ece2f0a6bddb1c9099\",\"f6eff7bdc9e167a9cf02818a\",\"f6eff7bdc9e167a9cf1c9099016c59\",\"f6eff7d0d1e6a6bddb67a9cf1c9099016c59\",\"f6eff7d0d1e6a6bddb67a9cf3690c002818a016450\",\"fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016450\",\"fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016c59014636\").map(ka),\nyu=ua(dn),en=Array(3).concat(\"ece7f2a6bddb2b8cbe\",\"f1eef6bdc9e174a9cf0570b0\",\"f1eef6bdc9e174a9cf2b8cbe045a8d\",\"f1eef6d0d1e6a6bddb74a9cf2b8cbe045a8d\",\"f1eef6d0d1e6a6bddb74a9cf3690c00570b0034e7b\",\"fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0034e7b\",\"fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b00",
                      "markdown": "`c8fdd49efdbb84fc8d59ef6548d7301fb300007f0000\").map(ka),xu=ua(cn),dn=Array(3).concat(\"ece2f0a6bddb1c9099\",\"f6eff7bdc9e167a9cf02818a\",\"f6eff7bdc9e167a9cf1c9099016c59\",\"f6eff7d0d1e6a6bddb67a9cf1c9099016c59\",\"f6eff7d0d1e6a6bddb67a9cf3690c002818a016450\",\"fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016450\",\"fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016c59014636\").map(ka),\nyu=ua(dn),en=Array(3).concat(\"ece7f2a6bddb2b8cbe\",\"f1eef6bdc9e174a9cf0570b0\",\"f1eef6bdc9e174a9cf2b8cbe045a8d\",\"f1eef6d0d1e6a6bddb74a9cf2b8cbe045a8d\",\"f1eef6d0d1e6a6bddb74a9cf3690c00570b0034e7b\",\"fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0034e7b\",\"fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b00`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 800,
                  "startColumn": 428,
                  "endLine": 800,
                  "endColumn": 478,
                  "snippet": {
                    "text": "c8fdd49efdbb84fc8d59ef6548d7301f990000\",\"fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301fb300007f0000\").map(ka),xu=ua(cn),dn=Array(3).concat(\"ece2f0a6bddb1c9099\",\"f6eff7bdc9e167a9cf02818a\",\"f6eff7bdc9e167a9cf1c9099016c59\",\"f6eff7d0d1e6a6bddb67a9cf1c9099016c59\",\"f6eff7d0d1e6a6bddb67a9cf3690c002818a016450\",\"fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016450\",\"fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016c59014636\").map(ka),\nyu=ua(dn),en=Array(3).concat(\"ece7f2a6bddb2b8cbe\",\"f1eef6bdc9e174a9cf0570b0\",\"f1eef6bdc9e174a9cf2b8cbe045a8d\",\"f1eef6d0d1e6a6bddb74a9cf2b8cbe045a8d\",\"f1eef6d0d1e6a6bddb74a9cf3690c00570b0034e7b\",\"fff7fbece7f2d0d1e6a6bddb74a9cf3690c00",
                    "rendered": {
                      "text": "c8fdd49efdbb84fc8d59ef6548d7301f990000\",\"fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301fb300007f0000\").map(ka),xu=ua(cn),dn=Array(3).concat(\"ece2f0a6bddb1c9099\",\"f6eff7bdc9e167a9cf02818a\",\"f6eff7bdc9e167a9cf1c9099016c59\",\"f6eff7d0d1e6a6bddb67a9cf1c9099016c59\",\"f6eff7d0d1e6a6bddb67a9cf3690c002818a016450\",\"fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016450\",\"fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016c59014636\").map(ka),\nyu=ua(dn),en=Array(3).concat(\"ece7f2a6bddb2b8cbe\",\"f1eef6bdc9e174a9cf0570b0\",\"f1eef6bdc9e174a9cf2b8cbe045a8d\",\"f1eef6d0d1e6a6bddb74a9cf2b8cbe045a8d\",\"f1eef6d0d1e6a6bddb74a9cf3690c00570b0034e7b\",\"fff7fbece7f2d0d1e6a6bddb74a9cf3690c00",
                      "markdown": "`c8fdd49efdbb84fc8d59ef6548d7301f990000\",\"fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301fb300007f0000\").map(ka),xu=ua(cn),dn=Array(3).concat(\"ece2f0a6bddb1c9099\",\"f6eff7bdc9e167a9cf02818a\",\"f6eff7bdc9e167a9cf1c9099016c59\",\"f6eff7d0d1e6a6bddb67a9cf1c9099016c59\",\"f6eff7d0d1e6a6bddb67a9cf3690c002818a016450\",\"fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016450\",\"fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016c59014636\").map(ka),\nyu=ua(dn),en=Array(3).concat(\"ece7f2a6bddb2b8cbe\",\"f1eef6bdc9e174a9cf0570b0\",\"f1eef6bdc9e174a9cf2b8cbe045a8d\",\"f1eef6d0d1e6a6bddb74a9cf2b8cbe045a8d\",\"f1eef6d0d1e6a6bddb74a9cf3690c00570b0034e7b\",\"fff7fbece7f2d0d1e6a6bddb74a9cf3690c00`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 800,
                  "startColumn": 383,
                  "endLine": 800,
                  "endColumn": 427,
                  "snippet": {
                    "text": "9efdbb84fc8d59ef6548d7301f990000\",\"fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301f990000\",\"fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301fb300007f0000\").map(ka),xu=ua(cn),dn=Array(3).concat(\"ece2f0a6bddb1c9099\",\"f6eff7bdc9e167a9cf02818a\",\"f6eff7bdc9e167a9cf1c9099016c59\",\"f6eff7d0d1e6a6bddb67a9cf1c9099016c59\",\"f6eff7d0d1e6a6bddb67a9cf3690c002818a016450\",\"fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016450\",\"fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016c59014636\").map(ka),\nyu=ua(dn),en=Array(3).concat(\"ece7f2a6bddb2b8cbe\",\"f1eef6bdc9e174a9cf0570b0\",\"f1eef6bdc9e174a9cf2b8cbe045a8d\",\"f1eef6d0d1e6a6bddb74a9cf2b8cbe045a8d\",\"f1eef6d0d1e6a6bddb74a9cf3690c00",
                    "rendered": {
                      "text": "9efdbb84fc8d59ef6548d7301f990000\",\"fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301f990000\",\"fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301fb300007f0000\").map(ka),xu=ua(cn),dn=Array(3).concat(\"ece2f0a6bddb1c9099\",\"f6eff7bdc9e167a9cf02818a\",\"f6eff7bdc9e167a9cf1c9099016c59\",\"f6eff7d0d1e6a6bddb67a9cf1c9099016c59\",\"f6eff7d0d1e6a6bddb67a9cf3690c002818a016450\",\"fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016450\",\"fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016c59014636\").map(ka),\nyu=ua(dn),en=Array(3).concat(\"ece7f2a6bddb2b8cbe\",\"f1eef6bdc9e174a9cf0570b0\",\"f1eef6bdc9e174a9cf2b8cbe045a8d\",\"f1eef6d0d1e6a6bddb74a9cf2b8cbe045a8d\",\"f1eef6d0d1e6a6bddb74a9cf3690c00",
                      "markdown": "`9efdbb84fc8d59ef6548d7301f990000\",\"fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301f990000\",\"fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301fb300007f0000\").map(ka),xu=ua(cn),dn=Array(3).concat(\"ece2f0a6bddb1c9099\",\"f6eff7bdc9e167a9cf02818a\",\"f6eff7bdc9e167a9cf1c9099016c59\",\"f6eff7d0d1e6a6bddb67a9cf1c9099016c59\",\"f6eff7d0d1e6a6bddb67a9cf3690c002818a016450\",\"fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016450\",\"fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016c59014636\").map(ka),\nyu=ua(dn),en=Array(3).concat(\"ece7f2a6bddb2b8cbe\",\"f1eef6bdc9e174a9cf0570b0\",\"f1eef6bdc9e174a9cf2b8cbe045a8d\",\"f1eef6d0d1e6a6bddb74a9cf2b8cbe045a8d\",\"f1eef6d0d1e6a6bddb74a9cf3690c00`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 800,
                  "startColumn": 168,
                  "endLine": 800,
                  "endColumn": 224,
                  "snippet": {
                    "text": "bccebc5a8ddb57bccc44eb3d32b8cbe0868ac084081\").map(ka),wu=ua(bn),cn=Array(3).concat(\"fee8c8fdbb84e34a33\",\"fef0d9fdcc8afc8d59d7301f\",\n\"fef0d9fdcc8afc8d59e34a33b30000\",\"fef0d9fdd49efdbb84fc8d59e34a33b30000\",\"fef0d9fdd49efdbb84fc8d59ef6548d7301f990000\",\"fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301f990000\",\"fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301fb300007f0000\").map(ka),xu=ua(cn),dn=Array(3).concat(\"ece2f0a6bddb1c9099\",\"f6eff7bdc9e167a9cf02818a\",\"f6eff7bdc9e167a9cf1c9099016c59\",\"f6eff7d0d1e6a6bddb67a9cf1c9099016c59\",\"f6eff7d0d1e6a6bddb67a9cf3690c002818a016450\",\"fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016450\",\"fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a01",
                    "rendered": {
                      "text": "bccebc5a8ddb57bccc44eb3d32b8cbe0868ac084081\").map(ka),wu=ua(bn),cn=Array(3).concat(\"fee8c8fdbb84e34a33\",\"fef0d9fdcc8afc8d59d7301f\",\n\"fef0d9fdcc8afc8d59e34a33b30000\",\"fef0d9fdd49efdbb84fc8d59e34a33b30000\",\"fef0d9fdd49efdbb84fc8d59ef6548d7301f990000\",\"fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301f990000\",\"fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301fb300007f0000\").map(ka),xu=ua(cn),dn=Array(3).concat(\"ece2f0a6bddb1c9099\",\"f6eff7bdc9e167a9cf02818a\",\"f6eff7bdc9e167a9cf1c9099016c59\",\"f6eff7d0d1e6a6bddb67a9cf1c9099016c59\",\"f6eff7d0d1e6a6bddb67a9cf3690c002818a016450\",\"fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016450\",\"fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a01",
                      "markdown": "`bccebc5a8ddb57bccc44eb3d32b8cbe0868ac084081\").map(ka),wu=ua(bn),cn=Array(3).concat(\"fee8c8fdbb84e34a33\",\"fef0d9fdcc8afc8d59d7301f\",\n\"fef0d9fdcc8afc8d59e34a33b30000\",\"fef0d9fdd49efdbb84fc8d59e34a33b30000\",\"fef0d9fdd49efdbb84fc8d59ef6548d7301f990000\",\"fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301f990000\",\"fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301fb300007f0000\").map(ka),xu=ua(cn),dn=Array(3).concat(\"ece2f0a6bddb1c9099\",\"f6eff7bdc9e167a9cf02818a\",\"f6eff7bdc9e167a9cf1c9099016c59\",\"f6eff7d0d1e6a6bddb67a9cf1c9099016c59\",\"f6eff7d0d1e6a6bddb67a9cf3690c002818a016450\",\"fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016450\",\"fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a01`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 800,
                  "startColumn": 117,
                  "endLine": 800,
                  "endColumn": 167,
                  "snippet": {
                    "text": "bccebc5a8ddb57bccc44eb3d32b8cbe08589e\",\"f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe0868ac084081\").map(ka),wu=ua(bn),cn=Array(3).concat(\"fee8c8fdbb84e34a33\",\"fef0d9fdcc8afc8d59d7301f\",\n\"fef0d9fdcc8afc8d59e34a33b30000\",\"fef0d9fdd49efdbb84fc8d59e34a33b30000\",\"fef0d9fdd49efdbb84fc8d59ef6548d7301f990000\",\"fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301f990000\",\"fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301fb300007f0000\").map(ka),xu=ua(cn),dn=Array(3).concat(\"ece2f0a6bddb1c9099\",\"f6eff7bdc9e167a9cf02818a\",\"f6eff7bdc9e167a9cf1c9099016c59\",\"f6eff7d0d1e6a6bddb67a9cf1c9099016c59\",\"f6eff7d0d1e6a6bddb67a9cf3690c002818a016450\",\"fff7fbece2f0d0d1e6a6bddb67a9cf3690c002",
                    "rendered": {
                      "text": "bccebc5a8ddb57bccc44eb3d32b8cbe08589e\",\"f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe0868ac084081\").map(ka),wu=ua(bn),cn=Array(3).concat(\"fee8c8fdbb84e34a33\",\"fef0d9fdcc8afc8d59d7301f\",\n\"fef0d9fdcc8afc8d59e34a33b30000\",\"fef0d9fdd49efdbb84fc8d59e34a33b30000\",\"fef0d9fdd49efdbb84fc8d59ef6548d7301f990000\",\"fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301f990000\",\"fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301fb300007f0000\").map(ka),xu=ua(cn),dn=Array(3).concat(\"ece2f0a6bddb1c9099\",\"f6eff7bdc9e167a9cf02818a\",\"f6eff7bdc9e167a9cf1c9099016c59\",\"f6eff7d0d1e6a6bddb67a9cf1c9099016c59\",\"f6eff7d0d1e6a6bddb67a9cf3690c002818a016450\",\"fff7fbece2f0d0d1e6a6bddb67a9cf3690c002",
                      "markdown": "`bccebc5a8ddb57bccc44eb3d32b8cbe08589e\",\"f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe0868ac084081\").map(ka),wu=ua(bn),cn=Array(3).concat(\"fee8c8fdbb84e34a33\",\"fef0d9fdcc8afc8d59d7301f\",\n\"fef0d9fdcc8afc8d59e34a33b30000\",\"fef0d9fdd49efdbb84fc8d59e34a33b30000\",\"fef0d9fdd49efdbb84fc8d59ef6548d7301f990000\",\"fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301f990000\",\"fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301fb300007f0000\").map(ka),xu=ua(cn),dn=Array(3).concat(\"ece2f0a6bddb1c9099\",\"f6eff7bdc9e167a9cf02818a\",\"f6eff7bdc9e167a9cf1c9099016c59\",\"f6eff7d0d1e6a6bddb67a9cf1c9099016c59\",\"f6eff7d0d1e6a6bddb67a9cf3690c002818a016450\",\"fff7fbece2f0d0d1e6a6bddb67a9cf3690c002`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 800,
                  "startColumn": 72,
                  "endLine": 800,
                  "endColumn": 116,
                  "snippet": {
                    "text": "5a8ddb57bccc44eb3d32b8cbe08589e\",\"f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe08589e\",\"f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe0868ac084081\").map(ka),wu=ua(bn),cn=Array(3).concat(\"fee8c8fdbb84e34a33\",\"fef0d9fdcc8afc8d59d7301f\",\n\"fef0d9fdcc8afc8d59e34a33b30000\",\"fef0d9fdd49efdbb84fc8d59e34a33b30000\",\"fef0d9fdd49efdbb84fc8d59ef6548d7301f990000\",\"fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301f990000\",\"fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301fb300007f0000\").map(ka),xu=ua(cn),dn=Array(3).concat(\"ece2f0a6bddb1c9099\",\"f6eff7bdc9e167a9cf02818a\",\"f6eff7bdc9e167a9cf1c9099016c59\",\"f6eff7d0d1e6a6bddb67a9cf1c9099016c59\",\"f6eff7d0d1e6a6bddb67a9cf3690c002",
                    "rendered": {
                      "text": "5a8ddb57bccc44eb3d32b8cbe08589e\",\"f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe08589e\",\"f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe0868ac084081\").map(ka),wu=ua(bn),cn=Array(3).concat(\"fee8c8fdbb84e34a33\",\"fef0d9fdcc8afc8d59d7301f\",\n\"fef0d9fdcc8afc8d59e34a33b30000\",\"fef0d9fdd49efdbb84fc8d59e34a33b30000\",\"fef0d9fdd49efdbb84fc8d59ef6548d7301f990000\",\"fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301f990000\",\"fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301fb300007f0000\").map(ka),xu=ua(cn),dn=Array(3).concat(\"ece2f0a6bddb1c9099\",\"f6eff7bdc9e167a9cf02818a\",\"f6eff7bdc9e167a9cf1c9099016c59\",\"f6eff7d0d1e6a6bddb67a9cf1c9099016c59\",\"f6eff7d0d1e6a6bddb67a9cf3690c002",
                      "markdown": "`5a8ddb57bccc44eb3d32b8cbe08589e\",\"f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe08589e\",\"f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe0868ac084081\").map(ka),wu=ua(bn),cn=Array(3).concat(\"fee8c8fdbb84e34a33\",\"fef0d9fdcc8afc8d59d7301f\",\n\"fef0d9fdcc8afc8d59e34a33b30000\",\"fef0d9fdd49efdbb84fc8d59e34a33b30000\",\"fef0d9fdd49efdbb84fc8d59ef6548d7301f990000\",\"fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301f990000\",\"fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301fb300007f0000\").map(ka),xu=ua(cn),dn=Array(3).concat(\"ece2f0a6bddb1c9099\",\"f6eff7bdc9e167a9cf02818a\",\"f6eff7bdc9e167a9cf1c9099016c59\",\"f6eff7d0d1e6a6bddb67a9cf1c9099016c59\",\"f6eff7d0d1e6a6bddb67a9cf3690c002`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 799,
                  "startColumn": 362,
                  "endLine": 799,
                  "endColumn": 418,
                  "snippet": {
                    "text": "f4bfd3e69ebcda8c96c68c6bb188419d810f7c4d004b\").map(ka),vu=ua(an),bn=Array(3).concat(\"e0f3dba8ddb543a2ca\",\"f0f9e8bae4bc7bccc42b8cbe\",\"f0f9e8bae4bc7bccc443a2ca0868ac\",\"f0f9e8ccebc5a8ddb57bccc443a2ca0868ac\",\"f0f9e8ccebc5a8ddb57bccc44eb3d32b8cbe08589e\",\"f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe08589e\",\"f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe0868ac084081\").map(ka),wu=ua(bn),cn=Array(3).concat(\"fee8c8fdbb84e34a33\",\"fef0d9fdcc8afc8d59d7301f\",\n\"fef0d9fdcc8afc8d59e34a33b30000\",\"fef0d9fdd49efdbb84fc8d59e34a33b30000\",\"fef0d9fdd49efdbb84fc8d59ef6548d7301f990000\",\"fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301f990000\",\"fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301fb",
                    "rendered": {
                      "text": "f4bfd3e69ebcda8c96c68c6bb188419d810f7c4d004b\").map(ka),vu=ua(an),bn=Array(3).concat(\"e0f3dba8ddb543a2ca\",\"f0f9e8bae4bc7bccc42b8cbe\",\"f0f9e8bae4bc7bccc443a2ca0868ac\",\"f0f9e8ccebc5a8ddb57bccc443a2ca0868ac\",\"f0f9e8ccebc5a8ddb57bccc44eb3d32b8cbe08589e\",\"f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe08589e\",\"f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe0868ac084081\").map(ka),wu=ua(bn),cn=Array(3).concat(\"fee8c8fdbb84e34a33\",\"fef0d9fdcc8afc8d59d7301f\",\n\"fef0d9fdcc8afc8d59e34a33b30000\",\"fef0d9fdd49efdbb84fc8d59e34a33b30000\",\"fef0d9fdd49efdbb84fc8d59ef6548d7301f990000\",\"fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301f990000\",\"fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301fb",
                      "markdown": "`f4bfd3e69ebcda8c96c68c6bb188419d810f7c4d004b\").map(ka),vu=ua(an),bn=Array(3).concat(\"e0f3dba8ddb543a2ca\",\"f0f9e8bae4bc7bccc42b8cbe\",\"f0f9e8bae4bc7bccc443a2ca0868ac\",\"f0f9e8ccebc5a8ddb57bccc443a2ca0868ac\",\"f0f9e8ccebc5a8ddb57bccc44eb3d32b8cbe08589e\",\"f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe08589e\",\"f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe0868ac084081\").map(ka),wu=ua(bn),cn=Array(3).concat(\"fee8c8fdbb84e34a33\",\"fef0d9fdcc8afc8d59d7301f\",\n\"fef0d9fdcc8afc8d59e34a33b30000\",\"fef0d9fdd49efdbb84fc8d59e34a33b30000\",\"fef0d9fdd49efdbb84fc8d59ef6548d7301f990000\",\"fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301f990000\",\"fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301fb`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 799,
                  "startColumn": 311,
                  "endLine": 799,
                  "endColumn": 361,
                  "snippet": {
                    "text": "f4bfd3e69ebcda8c96c68c6bb188419d6e016b\",\"f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d810f7c4d004b\").map(ka),vu=ua(an),bn=Array(3).concat(\"e0f3dba8ddb543a2ca\",\"f0f9e8bae4bc7bccc42b8cbe\",\"f0f9e8bae4bc7bccc443a2ca0868ac\",\"f0f9e8ccebc5a8ddb57bccc443a2ca0868ac\",\"f0f9e8ccebc5a8ddb57bccc44eb3d32b8cbe08589e\",\"f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe08589e\",\"f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe0868ac084081\").map(ka),wu=ua(bn),cn=Array(3).concat(\"fee8c8fdbb84e34a33\",\"fef0d9fdcc8afc8d59d7301f\",\n\"fef0d9fdcc8afc8d59e34a33b30000\",\"fef0d9fdd49efdbb84fc8d59e34a33b30000\",\"fef0d9fdd49efdbb84fc8d59ef6548d7301f990000\",\"fff7ecfee8c8fdd49efdbb84fc8d59ef6548d",
                    "rendered": {
                      "text": "f4bfd3e69ebcda8c96c68c6bb188419d6e016b\",\"f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d810f7c4d004b\").map(ka),vu=ua(an),bn=Array(3).concat(\"e0f3dba8ddb543a2ca\",\"f0f9e8bae4bc7bccc42b8cbe\",\"f0f9e8bae4bc7bccc443a2ca0868ac\",\"f0f9e8ccebc5a8ddb57bccc443a2ca0868ac\",\"f0f9e8ccebc5a8ddb57bccc44eb3d32b8cbe08589e\",\"f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe08589e\",\"f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe0868ac084081\").map(ka),wu=ua(bn),cn=Array(3).concat(\"fee8c8fdbb84e34a33\",\"fef0d9fdcc8afc8d59d7301f\",\n\"fef0d9fdcc8afc8d59e34a33b30000\",\"fef0d9fdd49efdbb84fc8d59e34a33b30000\",\"fef0d9fdd49efdbb84fc8d59ef6548d7301f990000\",\"fff7ecfee8c8fdd49efdbb84fc8d59ef6548d",
                      "markdown": "`f4bfd3e69ebcda8c96c68c6bb188419d6e016b\",\"f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d810f7c4d004b\").map(ka),vu=ua(an),bn=Array(3).concat(\"e0f3dba8ddb543a2ca\",\"f0f9e8bae4bc7bccc42b8cbe\",\"f0f9e8bae4bc7bccc443a2ca0868ac\",\"f0f9e8ccebc5a8ddb57bccc443a2ca0868ac\",\"f0f9e8ccebc5a8ddb57bccc44eb3d32b8cbe08589e\",\"f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe08589e\",\"f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe0868ac084081\").map(ka),wu=ua(bn),cn=Array(3).concat(\"fee8c8fdbb84e34a33\",\"fef0d9fdcc8afc8d59d7301f\",\n\"fef0d9fdcc8afc8d59e34a33b30000\",\"fef0d9fdd49efdbb84fc8d59e34a33b30000\",\"fef0d9fdd49efdbb84fc8d59ef6548d7301f990000\",\"fff7ecfee8c8fdd49efdbb84fc8d59ef6548d`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 799,
                  "startColumn": 266,
                  "endLine": 799,
                  "endColumn": 310,
                  "snippet": {
                    "text": "69ebcda8c96c68c6bb188419d6e016b\",\n\"f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d6e016b\",\"f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d810f7c4d004b\").map(ka),vu=ua(an),bn=Array(3).concat(\"e0f3dba8ddb543a2ca\",\"f0f9e8bae4bc7bccc42b8cbe\",\"f0f9e8bae4bc7bccc443a2ca0868ac\",\"f0f9e8ccebc5a8ddb57bccc443a2ca0868ac\",\"f0f9e8ccebc5a8ddb57bccc44eb3d32b8cbe08589e\",\"f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe08589e\",\"f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe0868ac084081\").map(ka),wu=ua(bn),cn=Array(3).concat(\"fee8c8fdbb84e34a33\",\"fef0d9fdcc8afc8d59d7301f\",\n\"fef0d9fdcc8afc8d59e34a33b30000\",\"fef0d9fdd49efdbb84fc8d59e34a33b30000\",\"fef0d9fdd49efdbb84fc8d59ef6548d",
                    "rendered": {
                      "text": "69ebcda8c96c68c6bb188419d6e016b\",\n\"f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d6e016b\",\"f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d810f7c4d004b\").map(ka),vu=ua(an),bn=Array(3).concat(\"e0f3dba8ddb543a2ca\",\"f0f9e8bae4bc7bccc42b8cbe\",\"f0f9e8bae4bc7bccc443a2ca0868ac\",\"f0f9e8ccebc5a8ddb57bccc443a2ca0868ac\",\"f0f9e8ccebc5a8ddb57bccc44eb3d32b8cbe08589e\",\"f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe08589e\",\"f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe0868ac084081\").map(ka),wu=ua(bn),cn=Array(3).concat(\"fee8c8fdbb84e34a33\",\"fef0d9fdcc8afc8d59d7301f\",\n\"fef0d9fdcc8afc8d59e34a33b30000\",\"fef0d9fdd49efdbb84fc8d59e34a33b30000\",\"fef0d9fdd49efdbb84fc8d59ef6548d",
                      "markdown": "`69ebcda8c96c68c6bb188419d6e016b\",\n\"f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d6e016b\",\"f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d810f7c4d004b\").map(ka),vu=ua(an),bn=Array(3).concat(\"e0f3dba8ddb543a2ca\",\"f0f9e8bae4bc7bccc42b8cbe\",\"f0f9e8bae4bc7bccc443a2ca0868ac\",\"f0f9e8ccebc5a8ddb57bccc443a2ca0868ac\",\"f0f9e8ccebc5a8ddb57bccc44eb3d32b8cbe08589e\",\"f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe08589e\",\"f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe0868ac084081\").map(ka),wu=ua(bn),cn=Array(3).concat(\"fee8c8fdbb84e34a33\",\"fef0d9fdcc8afc8d59d7301f\",\n\"fef0d9fdcc8afc8d59e34a33b30000\",\"fef0d9fdd49efdbb84fc8d59e34a33b30000\",\"fef0d9fdd49efdbb84fc8d59ef6548d`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 799,
                  "startColumn": 51,
                  "endLine": 799,
                  "endColumn": 107,
                  "snippet": {
                    "text": "9ccece699d8c966c2a441ae76238b45006d2c00441b\").map(ka),uu=ua($m),an=Array(3).concat(\"e0ecf49ebcda8856a7\",\"edf8fbb3cde38c96c688419d\",\"edf8fbb3cde38c96c68856a7810f7c\",\"edf8fbbfd3e69ebcda8c96c68856a7810f7c\",\"edf8fbbfd3e69ebcda8c96c68c6bb188419d6e016b\",\n\"f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d6e016b\",\"f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d810f7c4d004b\").map(ka),vu=ua(an),bn=Array(3).concat(\"e0f3dba8ddb543a2ca\",\"f0f9e8bae4bc7bccc42b8cbe\",\"f0f9e8bae4bc7bccc443a2ca0868ac\",\"f0f9e8ccebc5a8ddb57bccc443a2ca0868ac\",\"f0f9e8ccebc5a8ddb57bccc44eb3d32b8cbe08589e\",\"f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe08589e\",\"f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe08",
                    "rendered": {
                      "text": "9ccece699d8c966c2a441ae76238b45006d2c00441b\").map(ka),uu=ua($m),an=Array(3).concat(\"e0ecf49ebcda8856a7\",\"edf8fbb3cde38c96c688419d\",\"edf8fbb3cde38c96c68856a7810f7c\",\"edf8fbbfd3e69ebcda8c96c68856a7810f7c\",\"edf8fbbfd3e69ebcda8c96c68c6bb188419d6e016b\",\n\"f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d6e016b\",\"f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d810f7c4d004b\").map(ka),vu=ua(an),bn=Array(3).concat(\"e0f3dba8ddb543a2ca\",\"f0f9e8bae4bc7bccc42b8cbe\",\"f0f9e8bae4bc7bccc443a2ca0868ac\",\"f0f9e8ccebc5a8ddb57bccc443a2ca0868ac\",\"f0f9e8ccebc5a8ddb57bccc44eb3d32b8cbe08589e\",\"f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe08589e\",\"f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe08",
                      "markdown": "`9ccece699d8c966c2a441ae76238b45006d2c00441b\").map(ka),uu=ua($m),an=Array(3).concat(\"e0ecf49ebcda8856a7\",\"edf8fbb3cde38c96c688419d\",\"edf8fbb3cde38c96c68856a7810f7c\",\"edf8fbbfd3e69ebcda8c96c68856a7810f7c\",\"edf8fbbfd3e69ebcda8c96c68c6bb188419d6e016b\",\n\"f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d6e016b\",\"f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d810f7c4d004b\").map(ka),vu=ua(an),bn=Array(3).concat(\"e0f3dba8ddb543a2ca\",\"f0f9e8bae4bc7bccc42b8cbe\",\"f0f9e8bae4bc7bccc443a2ca0868ac\",\"f0f9e8ccebc5a8ddb57bccc443a2ca0868ac\",\"f0f9e8ccebc5a8ddb57bccc44eb3d32b8cbe08589e\",\"f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe08589e\",\"f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe08`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 799,
                  "endLine": 799,
                  "endColumn": 50,
                  "snippet": {
                    "text": "9ccece699d8c966c2a441ae76238b45005824\",\"f7fcfde5f5f9ccece699d8c966c2a441ae76238b45006d2c00441b\").map(ka),uu=ua($m),an=Array(3).concat(\"e0ecf49ebcda8856a7\",\"edf8fbb3cde38c96c688419d\",\"edf8fbb3cde38c96c68856a7810f7c\",\"edf8fbbfd3e69ebcda8c96c68856a7810f7c\",\"edf8fbbfd3e69ebcda8c96c68c6bb188419d6e016b\",\n\"f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d6e016b\",\"f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d810f7c4d004b\").map(ka),vu=ua(an),bn=Array(3).concat(\"e0f3dba8ddb543a2ca\",\"f0f9e8bae4bc7bccc42b8cbe\",\"f0f9e8bae4bc7bccc443a2ca0868ac\",\"f0f9e8ccebc5a8ddb57bccc443a2ca0868ac\",\"f0f9e8ccebc5a8ddb57bccc44eb3d32b8cbe08589e\",\"f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b",
                    "rendered": {
                      "text": "9ccece699d8c966c2a441ae76238b45005824\",\"f7fcfde5f5f9ccece699d8c966c2a441ae76238b45006d2c00441b\").map(ka),uu=ua($m),an=Array(3).concat(\"e0ecf49ebcda8856a7\",\"edf8fbb3cde38c96c688419d\",\"edf8fbb3cde38c96c68856a7810f7c\",\"edf8fbbfd3e69ebcda8c96c68856a7810f7c\",\"edf8fbbfd3e69ebcda8c96c68c6bb188419d6e016b\",\n\"f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d6e016b\",\"f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d810f7c4d004b\").map(ka),vu=ua(an),bn=Array(3).concat(\"e0f3dba8ddb543a2ca\",\"f0f9e8bae4bc7bccc42b8cbe\",\"f0f9e8bae4bc7bccc443a2ca0868ac\",\"f0f9e8ccebc5a8ddb57bccc443a2ca0868ac\",\"f0f9e8ccebc5a8ddb57bccc44eb3d32b8cbe08589e\",\"f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b",
                      "markdown": "`9ccece699d8c966c2a441ae76238b45005824\",\"f7fcfde5f5f9ccece699d8c966c2a441ae76238b45006d2c00441b\").map(ka),uu=ua($m),an=Array(3).concat(\"e0ecf49ebcda8856a7\",\"edf8fbb3cde38c96c688419d\",\"edf8fbb3cde38c96c68856a7810f7c\",\"edf8fbbfd3e69ebcda8c96c68856a7810f7c\",\"edf8fbbfd3e69ebcda8c96c68c6bb188419d6e016b\",\n\"f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d6e016b\",\"f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d810f7c4d004b\").map(ka),vu=ua(an),bn=Array(3).concat(\"e0f3dba8ddb543a2ca\",\"f0f9e8bae4bc7bccc42b8cbe\",\"f0f9e8bae4bc7bccc443a2ca0868ac\",\"f0f9e8ccebc5a8ddb57bccc443a2ca0868ac\",\"f0f9e8ccebc5a8ddb57bccc44eb3d32b8cbe08589e\",\"f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 798,
                  "startColumn": 460,
                  "endLine": 798,
                  "endColumn": 504,
                  "snippet": {
                    "text": "e699d8c966c2a441ae76238b45005824\",\"f7fcfde5f5f9ccece699d8c966c2a441ae76238b45005824\",\"f7fcfde5f5f9ccece699d8c966c2a441ae76238b45006d2c00441b\").map(ka),uu=ua($m),an=Array(3).concat(\"e0ecf49ebcda8856a7\",\"edf8fbb3cde38c96c688419d\",\"edf8fbb3cde38c96c68856a7810f7c\",\"edf8fbbfd3e69ebcda8c96c68856a7810f7c\",\"edf8fbbfd3e69ebcda8c96c68c6bb188419d6e016b\",\n\"f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d6e016b\",\"f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d810f7c4d004b\").map(ka),vu=ua(an),bn=Array(3).concat(\"e0f3dba8ddb543a2ca\",\"f0f9e8bae4bc7bccc42b8cbe\",\"f0f9e8bae4bc7bccc443a2ca0868ac\",\"f0f9e8ccebc5a8ddb57bccc443a2ca0868ac\",\"f0f9e8ccebc5a8ddb57bccc44eb3d32",
                    "rendered": {
                      "text": "e699d8c966c2a441ae76238b45005824\",\"f7fcfde5f5f9ccece699d8c966c2a441ae76238b45005824\",\"f7fcfde5f5f9ccece699d8c966c2a441ae76238b45006d2c00441b\").map(ka),uu=ua($m),an=Array(3).concat(\"e0ecf49ebcda8856a7\",\"edf8fbb3cde38c96c688419d\",\"edf8fbb3cde38c96c68856a7810f7c\",\"edf8fbbfd3e69ebcda8c96c68856a7810f7c\",\"edf8fbbfd3e69ebcda8c96c68c6bb188419d6e016b\",\n\"f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d6e016b\",\"f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d810f7c4d004b\").map(ka),vu=ua(an),bn=Array(3).concat(\"e0f3dba8ddb543a2ca\",\"f0f9e8bae4bc7bccc42b8cbe\",\"f0f9e8bae4bc7bccc443a2ca0868ac\",\"f0f9e8ccebc5a8ddb57bccc443a2ca0868ac\",\"f0f9e8ccebc5a8ddb57bccc44eb3d32",
                      "markdown": "`e699d8c966c2a441ae76238b45005824\",\"f7fcfde5f5f9ccece699d8c966c2a441ae76238b45005824\",\"f7fcfde5f5f9ccece699d8c966c2a441ae76238b45006d2c00441b\").map(ka),uu=ua($m),an=Array(3).concat(\"e0ecf49ebcda8856a7\",\"edf8fbb3cde38c96c688419d\",\"edf8fbb3cde38c96c68856a7810f7c\",\"edf8fbbfd3e69ebcda8c96c68856a7810f7c\",\"edf8fbbfd3e69ebcda8c96c68c6bb188419d6e016b\",\n\"f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d6e016b\",\"f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d810f7c4d004b\").map(ka),vu=ua(an),bn=Array(3).concat(\"e0f3dba8ddb543a2ca\",\"f0f9e8bae4bc7bccc42b8cbe\",\"f0f9e8bae4bc7bccc443a2ca0868ac\",\"f0f9e8ccebc5a8ddb57bccc443a2ca0868ac\",\"f0f9e8ccebc5a8ddb57bccc44eb3d32`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 798,
                  "startColumn": 245,
                  "endLine": 798,
                  "endColumn": 301,
                  "snippet": {
                    "text": "1fee08bffffbfe6f598abdda466c2a53288bd5e4fa2\").map(ka),\ntu=ua(Zm),$m=Array(3).concat(\"e5f5f999d8c92ca25f\",\"edf8fbb2e2e266c2a4238b45\",\"edf8fbb2e2e266c2a42ca25f006d2c\",\"edf8fbccece699d8c966c2a42ca25f006d2c\",\"edf8fbccece699d8c966c2a441ae76238b45005824\",\"f7fcfde5f5f9ccece699d8c966c2a441ae76238b45005824\",\"f7fcfde5f5f9ccece699d8c966c2a441ae76238b45006d2c00441b\").map(ka),uu=ua($m),an=Array(3).concat(\"e0ecf49ebcda8856a7\",\"edf8fbb3cde38c96c688419d\",\"edf8fbb3cde38c96c68856a7810f7c\",\"edf8fbbfd3e69ebcda8c96c68856a7810f7c\",\"edf8fbbfd3e69ebcda8c96c68c6bb188419d6e016b\",\n\"f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d6e016b\",\"f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d8",
                    "rendered": {
                      "text": "1fee08bffffbfe6f598abdda466c2a53288bd5e4fa2\").map(ka),\ntu=ua(Zm),$m=Array(3).concat(\"e5f5f999d8c92ca25f\",\"edf8fbb2e2e266c2a4238b45\",\"edf8fbb2e2e266c2a42ca25f006d2c\",\"edf8fbccece699d8c966c2a42ca25f006d2c\",\"edf8fbccece699d8c966c2a441ae76238b45005824\",\"f7fcfde5f5f9ccece699d8c966c2a441ae76238b45005824\",\"f7fcfde5f5f9ccece699d8c966c2a441ae76238b45006d2c00441b\").map(ka),uu=ua($m),an=Array(3).concat(\"e0ecf49ebcda8856a7\",\"edf8fbb3cde38c96c688419d\",\"edf8fbb3cde38c96c68856a7810f7c\",\"edf8fbbfd3e69ebcda8c96c68856a7810f7c\",\"edf8fbbfd3e69ebcda8c96c68c6bb188419d6e016b\",\n\"f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d6e016b\",\"f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d8",
                      "markdown": "`1fee08bffffbfe6f598abdda466c2a53288bd5e4fa2\").map(ka),\ntu=ua(Zm),$m=Array(3).concat(\"e5f5f999d8c92ca25f\",\"edf8fbb2e2e266c2a4238b45\",\"edf8fbb2e2e266c2a42ca25f006d2c\",\"edf8fbccece699d8c966c2a42ca25f006d2c\",\"edf8fbccece699d8c966c2a441ae76238b45005824\",\"f7fcfde5f5f9ccece699d8c966c2a441ae76238b45005824\",\"f7fcfde5f5f9ccece699d8c966c2a441ae76238b45006d2c00441b\").map(ka),uu=ua($m),an=Array(3).concat(\"e0ecf49ebcda8856a7\",\"edf8fbb3cde38c96c688419d\",\"edf8fbb3cde38c96c68856a7810f7c\",\"edf8fbbfd3e69ebcda8c96c68856a7810f7c\",\"edf8fbbfd3e69ebcda8c96c68c6bb188419d6e016b\",\n\"f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d6e016b\",\"f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d8`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 798,
                  "startColumn": 194,
                  "endLine": 798,
                  "endColumn": 244,
                  "snippet": {
                    "text": "8abdda466c2a53288bd5e4fa2\",\"9e0142d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd5e4fa2\").map(ka),\ntu=ua(Zm),$m=Array(3).concat(\"e5f5f999d8c92ca25f\",\"edf8fbb2e2e266c2a4238b45\",\"edf8fbb2e2e266c2a42ca25f006d2c\",\"edf8fbccece699d8c966c2a42ca25f006d2c\",\"edf8fbccece699d8c966c2a441ae76238b45005824\",\"f7fcfde5f5f9ccece699d8c966c2a441ae76238b45005824\",\"f7fcfde5f5f9ccece699d8c966c2a441ae76238b45006d2c00441b\").map(ka),uu=ua($m),an=Array(3).concat(\"e0ecf49ebcda8856a7\",\"edf8fbb3cde38c96c688419d\",\"edf8fbb3cde38c96c68856a7810f7c\",\"edf8fbbfd3e69ebcda8c96c68856a7810f7c\",\"edf8fbbfd3e69ebcda8c96c68c6bb188419d6e016b\",\n\"f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb18",
                    "rendered": {
                      "text": "8abdda466c2a53288bd5e4fa2\",\"9e0142d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd5e4fa2\").map(ka),\ntu=ua(Zm),$m=Array(3).concat(\"e5f5f999d8c92ca25f\",\"edf8fbb2e2e266c2a4238b45\",\"edf8fbb2e2e266c2a42ca25f006d2c\",\"edf8fbccece699d8c966c2a42ca25f006d2c\",\"edf8fbccece699d8c966c2a441ae76238b45005824\",\"f7fcfde5f5f9ccece699d8c966c2a441ae76238b45005824\",\"f7fcfde5f5f9ccece699d8c966c2a441ae76238b45006d2c00441b\").map(ka),uu=ua($m),an=Array(3).concat(\"e0ecf49ebcda8856a7\",\"edf8fbb3cde38c96c688419d\",\"edf8fbb3cde38c96c68856a7810f7c\",\"edf8fbbfd3e69ebcda8c96c68856a7810f7c\",\"edf8fbbfd3e69ebcda8c96c68c6bb188419d6e016b\",\n\"f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb18",
                      "markdown": "`8abdda466c2a53288bd5e4fa2\",\"9e0142d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd5e4fa2\").map(ka),\ntu=ua(Zm),$m=Array(3).concat(\"e5f5f999d8c92ca25f\",\"edf8fbb2e2e266c2a4238b45\",\"edf8fbb2e2e266c2a42ca25f006d2c\",\"edf8fbccece699d8c966c2a42ca25f006d2c\",\"edf8fbccece699d8c966c2a441ae76238b45005824\",\"f7fcfde5f5f9ccece699d8c966c2a441ae76238b45005824\",\"f7fcfde5f5f9ccece699d8c966c2a441ae76238b45006d2c00441b\").map(ka),uu=ua($m),an=Array(3).concat(\"e0ecf49ebcda8856a7\",\"edf8fbb3cde38c96c688419d\",\"edf8fbb3cde38c96c68856a7810f7c\",\"edf8fbbfd3e69ebcda8c96c68856a7810f7c\",\"edf8fbbfd3e69ebcda8c96c68c6bb188419d6e016b\",\n\"f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb18`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 798,
                  "startColumn": 149,
                  "endLine": 798,
                  "endColumn": 193,
                  "snippet": {
                    "text": "53288bd\",\"9e0142d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd5e4fa2\",\"9e0142d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd5e4fa2\").map(ka),\ntu=ua(Zm),$m=Array(3).concat(\"e5f5f999d8c92ca25f\",\"edf8fbb2e2e266c2a4238b45\",\"edf8fbb2e2e266c2a42ca25f006d2c\",\"edf8fbccece699d8c966c2a42ca25f006d2c\",\"edf8fbccece699d8c966c2a441ae76238b45005824\",\"f7fcfde5f5f9ccece699d8c966c2a441ae76238b45005824\",\"f7fcfde5f5f9ccece699d8c966c2a441ae76238b45006d2c00441b\").map(ka),uu=ua($m),an=Array(3).concat(\"e0ecf49ebcda8856a7\",\"edf8fbb3cde38c96c688419d\",\"edf8fbb3cde38c96c68856a7810f7c\",\"edf8fbbfd3e69ebcda8c96c68856a7810f7c\",\"edf8fbbfd3e69ebcda8c96c68c6bb188",
                    "rendered": {
                      "text": "53288bd\",\"9e0142d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd5e4fa2\",\"9e0142d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd5e4fa2\").map(ka),\ntu=ua(Zm),$m=Array(3).concat(\"e5f5f999d8c92ca25f\",\"edf8fbb2e2e266c2a4238b45\",\"edf8fbb2e2e266c2a42ca25f006d2c\",\"edf8fbccece699d8c966c2a42ca25f006d2c\",\"edf8fbccece699d8c966c2a441ae76238b45005824\",\"f7fcfde5f5f9ccece699d8c966c2a441ae76238b45005824\",\"f7fcfde5f5f9ccece699d8c966c2a441ae76238b45006d2c00441b\").map(ka),uu=ua($m),an=Array(3).concat(\"e0ecf49ebcda8856a7\",\"edf8fbb3cde38c96c688419d\",\"edf8fbb3cde38c96c68856a7810f7c\",\"edf8fbbfd3e69ebcda8c96c68856a7810f7c\",\"edf8fbbfd3e69ebcda8c96c68c6bb188",
                      "markdown": "`53288bd\",\"9e0142d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd5e4fa2\",\"9e0142d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd5e4fa2\").map(ka),\ntu=ua(Zm),$m=Array(3).concat(\"e5f5f999d8c92ca25f\",\"edf8fbb2e2e266c2a4238b45\",\"edf8fbb2e2e266c2a42ca25f006d2c\",\"edf8fbccece699d8c966c2a42ca25f006d2c\",\"edf8fbccece699d8c966c2a441ae76238b45005824\",\"f7fcfde5f5f9ccece699d8c966c2a441ae76238b45005824\",\"f7fcfde5f5f9ccece699d8c966c2a441ae76238b45006d2c00441b\").map(ka),uu=ua($m),an=Array(3).concat(\"e0ecf49ebcda8856a7\",\"edf8fbb3cde38c96c688419d\",\"edf8fbb3cde38c96c68856a7810f7c\",\"edf8fbbfd3e69ebcda8c96c68856a7810f7c\",\"edf8fbbfd3e69ebcda8c96c68c6bb188`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 797,
                  "startColumn": 443,
                  "endLine": 797,
                  "endColumn": 511,
                  "snippet": {
                    "text": "dda42b83ba\",\"d7191cfdae61ffffbfabdda42b83ba\",\"d53e4ffc8d59fee08be6f59899d5943288bd\",\"d53e4ffc8d59fee08bffffbfe6f59899d5943288bd\",\"d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd\",\"d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd\",\"9e0142d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd5e4fa2\",\"9e0142d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd5e4fa2\").map(ka),\ntu=ua(Zm),$m=Array(3).concat(\"e5f5f999d8c92ca25f\",\"edf8fbb2e2e266c2a4238b45\",\"edf8fbb2e2e266c2a42ca25f006d2c\",\"edf8fbccece699d8c966c2a42ca25f006d2c\",\"edf8fbccece699d8c966c2a441ae76238b45005824\",\"f7fcfde5f5f9ccece699d8c966c2a441ae76238b45005824\",\"f7fcfde5f5f9ccece699d8c966c2a441ae76238b450",
                    "rendered": {
                      "text": "dda42b83ba\",\"d7191cfdae61ffffbfabdda42b83ba\",\"d53e4ffc8d59fee08be6f59899d5943288bd\",\"d53e4ffc8d59fee08bffffbfe6f59899d5943288bd\",\"d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd\",\"d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd\",\"9e0142d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd5e4fa2\",\"9e0142d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd5e4fa2\").map(ka),\ntu=ua(Zm),$m=Array(3).concat(\"e5f5f999d8c92ca25f\",\"edf8fbb2e2e266c2a4238b45\",\"edf8fbb2e2e266c2a42ca25f006d2c\",\"edf8fbccece699d8c966c2a42ca25f006d2c\",\"edf8fbccece699d8c966c2a441ae76238b45005824\",\"f7fcfde5f5f9ccece699d8c966c2a441ae76238b45005824\",\"f7fcfde5f5f9ccece699d8c966c2a441ae76238b450",
                      "markdown": "`dda42b83ba\",\"d7191cfdae61ffffbfabdda42b83ba\",\"d53e4ffc8d59fee08be6f59899d5943288bd\",\"d53e4ffc8d59fee08bffffbfe6f59899d5943288bd\",\"d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd\",\"d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd\",\"9e0142d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd5e4fa2\",\"9e0142d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd5e4fa2\").map(ka),\ntu=ua(Zm),$m=Array(3).concat(\"e5f5f999d8c92ca25f\",\"edf8fbb2e2e266c2a4238b45\",\"edf8fbb2e2e266c2a42ca25f006d2c\",\"edf8fbccece699d8c966c2a42ca25f006d2c\",\"edf8fbccece699d8c966c2a441ae76238b45005824\",\"f7fcfde5f5f9ccece699d8c966c2a441ae76238b45005824\",\"f7fcfde5f5f9ccece699d8c966c2a441ae76238b450`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 797,
                  "startColumn": 380,
                  "endLine": 797,
                  "endColumn": 442,
                  "snippet": {
                    "text": "=ua(Ym),Zm=Array(3).concat(\"fc8d59ffffbf99d594\",\"d7191cfdae61abdda42b83ba\",\"d7191cfdae61ffffbfabdda42b83ba\",\"d53e4ffc8d59fee08be6f59899d5943288bd\",\"d53e4ffc8d59fee08bffffbfe6f59899d5943288bd\",\"d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd\",\"d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd\",\"9e0142d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd5e4fa2\",\"9e0142d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd5e4fa2\").map(ka),\ntu=ua(Zm),$m=Array(3).concat(\"e5f5f999d8c92ca25f\",\"edf8fbb2e2e266c2a4238b45\",\"edf8fbb2e2e266c2a42ca25f006d2c\",\"edf8fbccece699d8c966c2a42ca25f006d2c\",\"edf8fbccece699d8c966c2a441ae76238b45005824\",\"f7fcfde5f5f9ccece699d8c96",
                    "rendered": {
                      "text": "=ua(Ym),Zm=Array(3).concat(\"fc8d59ffffbf99d594\",\"d7191cfdae61abdda42b83ba\",\"d7191cfdae61ffffbfabdda42b83ba\",\"d53e4ffc8d59fee08be6f59899d5943288bd\",\"d53e4ffc8d59fee08bffffbfe6f59899d5943288bd\",\"d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd\",\"d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd\",\"9e0142d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd5e4fa2\",\"9e0142d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd5e4fa2\").map(ka),\ntu=ua(Zm),$m=Array(3).concat(\"e5f5f999d8c92ca25f\",\"edf8fbb2e2e266c2a4238b45\",\"edf8fbb2e2e266c2a42ca25f006d2c\",\"edf8fbccece699d8c966c2a42ca25f006d2c\",\"edf8fbccece699d8c966c2a441ae76238b45005824\",\"f7fcfde5f5f9ccece699d8c96",
                      "markdown": "`=ua(Ym),Zm=Array(3).concat(\"fc8d59ffffbf99d594\",\"d7191cfdae61abdda42b83ba\",\"d7191cfdae61ffffbfabdda42b83ba\",\"d53e4ffc8d59fee08be6f59899d5943288bd\",\"d53e4ffc8d59fee08bffffbfe6f59899d5943288bd\",\"d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd\",\"d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd\",\"9e0142d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd5e4fa2\",\"9e0142d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd5e4fa2\").map(ka),\ntu=ua(Zm),$m=Array(3).concat(\"e5f5f999d8c92ca25f\",\"edf8fbb2e2e266c2a4238b45\",\"edf8fbb2e2e266c2a42ca25f006d2c\",\"edf8fbccece699d8c966c2a42ca25f006d2c\",\"edf8fbccece699d8c966c2a441ae76238b45005824\",\"f7fcfde5f5f9ccece699d8c96`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 797,
                  "startColumn": 323,
                  "endLine": 797,
                  "endColumn": 379,
                  "snippet": {
                    "text": "61fee08bffffbfd9ef8ba6d96a66bd631a9850006837\").map(ka),su=ua(Ym),Zm=Array(3).concat(\"fc8d59ffffbf99d594\",\"d7191cfdae61abdda42b83ba\",\"d7191cfdae61ffffbfabdda42b83ba\",\"d53e4ffc8d59fee08be6f59899d5943288bd\",\"d53e4ffc8d59fee08bffffbfe6f59899d5943288bd\",\"d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd\",\"d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd\",\"9e0142d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd5e4fa2\",\"9e0142d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd5e4fa2\").map(ka),\ntu=ua(Zm),$m=Array(3).concat(\"e5f5f999d8c92ca25f\",\"edf8fbb2e2e266c2a4238b45\",\"edf8fbb2e2e266c2a42ca25f006d2c\",\"edf8fbccece699d8c966c2a42ca25f006d2c\",\"edf8fbc",
                    "rendered": {
                      "text": "61fee08bffffbfd9ef8ba6d96a66bd631a9850006837\").map(ka),su=ua(Ym),Zm=Array(3).concat(\"fc8d59ffffbf99d594\",\"d7191cfdae61abdda42b83ba\",\"d7191cfdae61ffffbfabdda42b83ba\",\"d53e4ffc8d59fee08be6f59899d5943288bd\",\"d53e4ffc8d59fee08bffffbfe6f59899d5943288bd\",\"d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd\",\"d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd\",\"9e0142d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd5e4fa2\",\"9e0142d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd5e4fa2\").map(ka),\ntu=ua(Zm),$m=Array(3).concat(\"e5f5f999d8c92ca25f\",\"edf8fbb2e2e266c2a4238b45\",\"edf8fbb2e2e266c2a42ca25f006d2c\",\"edf8fbccece699d8c966c2a42ca25f006d2c\",\"edf8fbc",
                      "markdown": "`61fee08bffffbfd9ef8ba6d96a66bd631a9850006837\").map(ka),su=ua(Ym),Zm=Array(3).concat(\"fc8d59ffffbf99d594\",\"d7191cfdae61abdda42b83ba\",\"d7191cfdae61ffffbfabdda42b83ba\",\"d53e4ffc8d59fee08be6f59899d5943288bd\",\"d53e4ffc8d59fee08bffffbfe6f59899d5943288bd\",\"d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd\",\"d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd\",\"9e0142d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd5e4fa2\",\"9e0142d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd5e4fa2\").map(ka),\ntu=ua(Zm),$m=Array(3).concat(\"e5f5f999d8c92ca25f\",\"edf8fbb2e2e266c2a4238b45\",\"edf8fbb2e2e266c2a42ca25f006d2c\",\"edf8fbccece699d8c966c2a42ca25f006d2c\",\"edf8fbc`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 797,
                  "startColumn": 272,
                  "endLine": 797,
                  "endColumn": 322,
                  "snippet": {
                    "text": "ba6d96a66bd631a9850006837\",\n\"a50026d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850006837\").map(ka),su=ua(Ym),Zm=Array(3).concat(\"fc8d59ffffbf99d594\",\"d7191cfdae61abdda42b83ba\",\"d7191cfdae61ffffbfabdda42b83ba\",\"d53e4ffc8d59fee08be6f59899d5943288bd\",\"d53e4ffc8d59fee08bffffbfe6f59899d5943288bd\",\"d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd\",\"d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd\",\"9e0142d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd5e4fa2\",\"9e0142d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd5e4fa2\").map(ka),\ntu=ua(Zm),$m=Array(3).concat(\"e5f5f999d8c92ca25f\",\"edf8fbb2e2e266c2a4238b45\",\"edf8fbb2e2e266c2a42ca2",
                    "rendered": {
                      "text": "ba6d96a66bd631a9850006837\",\n\"a50026d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850006837\").map(ka),su=ua(Ym),Zm=Array(3).concat(\"fc8d59ffffbf99d594\",\"d7191cfdae61abdda42b83ba\",\"d7191cfdae61ffffbfabdda42b83ba\",\"d53e4ffc8d59fee08be6f59899d5943288bd\",\"d53e4ffc8d59fee08bffffbfe6f59899d5943288bd\",\"d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd\",\"d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd\",\"9e0142d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd5e4fa2\",\"9e0142d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd5e4fa2\").map(ka),\ntu=ua(Zm),$m=Array(3).concat(\"e5f5f999d8c92ca25f\",\"edf8fbb2e2e266c2a4238b45\",\"edf8fbb2e2e266c2a42ca2",
                      "markdown": "`ba6d96a66bd631a9850006837\",\n\"a50026d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850006837\").map(ka),su=ua(Ym),Zm=Array(3).concat(\"fc8d59ffffbf99d594\",\"d7191cfdae61abdda42b83ba\",\"d7191cfdae61ffffbfabdda42b83ba\",\"d53e4ffc8d59fee08be6f59899d5943288bd\",\"d53e4ffc8d59fee08bffffbfe6f59899d5943288bd\",\"d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd\",\"d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd\",\"9e0142d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd5e4fa2\",\"9e0142d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd5e4fa2\").map(ka),\ntu=ua(Zm),$m=Array(3).concat(\"e5f5f999d8c92ca25f\",\"edf8fbb2e2e266c2a4238b45\",\"edf8fbb2e2e266c2a42ca2`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 797,
                  "startColumn": 227,
                  "endLine": 797,
                  "endColumn": 271,
                  "snippet": {
                    "text": "31a9850\",\"a50026d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850006837\",\n\"a50026d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850006837\").map(ka),su=ua(Ym),Zm=Array(3).concat(\"fc8d59ffffbf99d594\",\"d7191cfdae61abdda42b83ba\",\"d7191cfdae61ffffbfabdda42b83ba\",\"d53e4ffc8d59fee08be6f59899d5943288bd\",\"d53e4ffc8d59fee08bffffbfe6f59899d5943288bd\",\"d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd\",\"d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd\",\"9e0142d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd5e4fa2\",\"9e0142d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd5e4fa2\").map(ka),\ntu=ua(Zm),$m=Array(3).concat(\"e5f5f999d8c92ca25f\"",
                    "rendered": {
                      "text": "31a9850\",\"a50026d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850006837\",\n\"a50026d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850006837\").map(ka),su=ua(Ym),Zm=Array(3).concat(\"fc8d59ffffbf99d594\",\"d7191cfdae61abdda42b83ba\",\"d7191cfdae61ffffbfabdda42b83ba\",\"d53e4ffc8d59fee08be6f59899d5943288bd\",\"d53e4ffc8d59fee08bffffbfe6f59899d5943288bd\",\"d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd\",\"d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd\",\"9e0142d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd5e4fa2\",\"9e0142d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd5e4fa2\").map(ka),\ntu=ua(Zm),$m=Array(3).concat(\"e5f5f999d8c92ca25f\"",
                      "markdown": "`31a9850\",\"a50026d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850006837\",\n\"a50026d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850006837\").map(ka),su=ua(Ym),Zm=Array(3).concat(\"fc8d59ffffbf99d594\",\"d7191cfdae61abdda42b83ba\",\"d7191cfdae61ffffbfabdda42b83ba\",\"d53e4ffc8d59fee08be6f59899d5943288bd\",\"d53e4ffc8d59fee08bffffbfe6f59899d5943288bd\",\"d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd\",\"d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd\",\"9e0142d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd5e4fa2\",\"9e0142d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd5e4fa2\").map(ka),\ntu=ua(Zm),$m=Array(3).concat(\"e5f5f999d8c92ca25f\"`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 797,
                  "endLine": 797,
                  "endColumn": 68,
                  "snippet": {
                    "text": "96a1a9641\",\"d7191cfdae61ffffbfa6d96a1a9641\",\"d73027fc8d59fee08bd9ef8b91cf601a9850\",\"d73027fc8d59fee08bffffbfd9ef8b91cf601a9850\",\"d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850\",\"d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850\",\"a50026d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850006837\",\n\"a50026d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850006837\").map(ka),su=ua(Ym),Zm=Array(3).concat(\"fc8d59ffffbf99d594\",\"d7191cfdae61abdda42b83ba\",\"d7191cfdae61ffffbfabdda42b83ba\",\"d53e4ffc8d59fee08be6f59899d5943288bd\",\"d53e4ffc8d59fee08bffffbfe6f59899d5943288bd\",\"d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd\",\"d53e4ff46d43fdae61fee08bffffbfe6f598abdda466",
                    "rendered": {
                      "text": "96a1a9641\",\"d7191cfdae61ffffbfa6d96a1a9641\",\"d73027fc8d59fee08bd9ef8b91cf601a9850\",\"d73027fc8d59fee08bffffbfd9ef8b91cf601a9850\",\"d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850\",\"d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850\",\"a50026d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850006837\",\n\"a50026d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850006837\").map(ka),su=ua(Ym),Zm=Array(3).concat(\"fc8d59ffffbf99d594\",\"d7191cfdae61abdda42b83ba\",\"d7191cfdae61ffffbfabdda42b83ba\",\"d53e4ffc8d59fee08be6f59899d5943288bd\",\"d53e4ffc8d59fee08bffffbfe6f59899d5943288bd\",\"d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd\",\"d53e4ff46d43fdae61fee08bffffbfe6f598abdda466",
                      "markdown": "`96a1a9641\",\"d7191cfdae61ffffbfa6d96a1a9641\",\"d73027fc8d59fee08bd9ef8b91cf601a9850\",\"d73027fc8d59fee08bffffbfd9ef8b91cf601a9850\",\"d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850\",\"d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850\",\"a50026d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850006837\",\n\"a50026d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850006837\").map(ka),su=ua(Ym),Zm=Array(3).concat(\"fc8d59ffffbf99d594\",\"d7191cfdae61abdda42b83ba\",\"d7191cfdae61ffffbfabdda42b83ba\",\"d53e4ffc8d59fee08be6f59899d5943288bd\",\"d53e4ffc8d59fee08bffffbfe6f59899d5943288bd\",\"d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd\",\"d53e4ff46d43fdae61fee08bffffbfe6f598abdda466`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 796,
                  "startColumn": 500,
                  "endLine": 796,
                  "endColumn": 562,
                  "snippet": {
                    "text": "=ua(Xm),Ym=Array(3).concat(\"fc8d59ffffbf91cf60\",\"d7191cfdae61a6d96a1a9641\",\"d7191cfdae61ffffbfa6d96a1a9641\",\"d73027fc8d59fee08bd9ef8b91cf601a9850\",\"d73027fc8d59fee08bffffbfd9ef8b91cf601a9850\",\"d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850\",\"d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850\",\"a50026d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850006837\",\n\"a50026d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850006837\").map(ka),su=ua(Ym),Zm=Array(3).concat(\"fc8d59ffffbf99d594\",\"d7191cfdae61abdda42b83ba\",\"d7191cfdae61ffffbfabdda42b83ba\",\"d53e4ffc8d59fee08be6f59899d5943288bd\",\"d53e4ffc8d59fee08bffffbfe6f59899d5943288bd\",\"d53e4ff46d43fdae61fee08be",
                    "rendered": {
                      "text": "=ua(Xm),Ym=Array(3).concat(\"fc8d59ffffbf91cf60\",\"d7191cfdae61a6d96a1a9641\",\"d7191cfdae61ffffbfa6d96a1a9641\",\"d73027fc8d59fee08bd9ef8b91cf601a9850\",\"d73027fc8d59fee08bffffbfd9ef8b91cf601a9850\",\"d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850\",\"d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850\",\"a50026d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850006837\",\n\"a50026d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850006837\").map(ka),su=ua(Ym),Zm=Array(3).concat(\"fc8d59ffffbf99d594\",\"d7191cfdae61abdda42b83ba\",\"d7191cfdae61ffffbfabdda42b83ba\",\"d53e4ffc8d59fee08be6f59899d5943288bd\",\"d53e4ffc8d59fee08bffffbfe6f59899d5943288bd\",\"d53e4ff46d43fdae61fee08be",
                      "markdown": "`=ua(Xm),Ym=Array(3).concat(\"fc8d59ffffbf91cf60\",\"d7191cfdae61a6d96a1a9641\",\"d7191cfdae61ffffbfa6d96a1a9641\",\"d73027fc8d59fee08bd9ef8b91cf601a9850\",\"d73027fc8d59fee08bffffbfd9ef8b91cf601a9850\",\"d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850\",\"d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850\",\"a50026d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850006837\",\n\"a50026d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850006837\").map(ka),su=ua(Ym),Zm=Array(3).concat(\"fc8d59ffffbf99d594\",\"d7191cfdae61abdda42b83ba\",\"d7191cfdae61ffffbfabdda42b83ba\",\"d53e4ffc8d59fee08be6f59899d5943288bd\",\"d53e4ffc8d59fee08bffffbfe6f59899d5943288bd\",\"d53e4ff46d43fdae61fee08be`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 796,
                  "startColumn": 443,
                  "endLine": 796,
                  "endColumn": 499,
                  "snippet": {
                    "text": "61fee090ffffbfe0f3f8abd9e974add14575b4313695\").map(ka),ru=ua(Xm),Ym=Array(3).concat(\"fc8d59ffffbf91cf60\",\"d7191cfdae61a6d96a1a9641\",\"d7191cfdae61ffffbfa6d96a1a9641\",\"d73027fc8d59fee08bd9ef8b91cf601a9850\",\"d73027fc8d59fee08bffffbfd9ef8b91cf601a9850\",\"d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850\",\"d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850\",\"a50026d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850006837\",\n\"a50026d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850006837\").map(ka),su=ua(Ym),Zm=Array(3).concat(\"fc8d59ffffbf99d594\",\"d7191cfdae61abdda42b83ba\",\"d7191cfdae61ffffbfabdda42b83ba\",\"d53e4ffc8d59fee08be6f59899d5943288bd\",\"d53e4ff",
                    "rendered": {
                      "text": "61fee090ffffbfe0f3f8abd9e974add14575b4313695\").map(ka),ru=ua(Xm),Ym=Array(3).concat(\"fc8d59ffffbf91cf60\",\"d7191cfdae61a6d96a1a9641\",\"d7191cfdae61ffffbfa6d96a1a9641\",\"d73027fc8d59fee08bd9ef8b91cf601a9850\",\"d73027fc8d59fee08bffffbfd9ef8b91cf601a9850\",\"d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850\",\"d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850\",\"a50026d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850006837\",\n\"a50026d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850006837\").map(ka),su=ua(Ym),Zm=Array(3).concat(\"fc8d59ffffbf99d594\",\"d7191cfdae61abdda42b83ba\",\"d7191cfdae61ffffbfabdda42b83ba\",\"d53e4ffc8d59fee08be6f59899d5943288bd\",\"d53e4ff",
                      "markdown": "`61fee090ffffbfe0f3f8abd9e974add14575b4313695\").map(ka),ru=ua(Xm),Ym=Array(3).concat(\"fc8d59ffffbf91cf60\",\"d7191cfdae61a6d96a1a9641\",\"d7191cfdae61ffffbfa6d96a1a9641\",\"d73027fc8d59fee08bd9ef8b91cf601a9850\",\"d73027fc8d59fee08bffffbfd9ef8b91cf601a9850\",\"d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850\",\"d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850\",\"a50026d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850006837\",\n\"a50026d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850006837\").map(ka),su=ua(Ym),Zm=Array(3).concat(\"fc8d59ffffbf99d594\",\"d7191cfdae61abdda42b83ba\",\"d7191cfdae61ffffbfabdda42b83ba\",\"d53e4ffc8d59fee08be6f59899d5943288bd\",\"d53e4ff`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 796,
                  "startColumn": 392,
                  "endLine": 796,
                  "endColumn": 442,
                  "snippet": {
                    "text": "f8abd9e974add14575b4313695\",\"a50026d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4313695\").map(ka),ru=ua(Xm),Ym=Array(3).concat(\"fc8d59ffffbf91cf60\",\"d7191cfdae61a6d96a1a9641\",\"d7191cfdae61ffffbfa6d96a1a9641\",\"d73027fc8d59fee08bd9ef8b91cf601a9850\",\"d73027fc8d59fee08bffffbfd9ef8b91cf601a9850\",\"d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850\",\"d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850\",\"a50026d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850006837\",\n\"a50026d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850006837\").map(ka),su=ua(Ym),Zm=Array(3).concat(\"fc8d59ffffbf99d594\",\"d7191cfdae61abdda42b83ba\",\"d7191cfdae61ffffbfabdd",
                    "rendered": {
                      "text": "f8abd9e974add14575b4313695\",\"a50026d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4313695\").map(ka),ru=ua(Xm),Ym=Array(3).concat(\"fc8d59ffffbf91cf60\",\"d7191cfdae61a6d96a1a9641\",\"d7191cfdae61ffffbfa6d96a1a9641\",\"d73027fc8d59fee08bd9ef8b91cf601a9850\",\"d73027fc8d59fee08bffffbfd9ef8b91cf601a9850\",\"d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850\",\"d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850\",\"a50026d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850006837\",\n\"a50026d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850006837\").map(ka),su=ua(Ym),Zm=Array(3).concat(\"fc8d59ffffbf99d594\",\"d7191cfdae61abdda42b83ba\",\"d7191cfdae61ffffbfabdd",
                      "markdown": "`f8abd9e974add14575b4313695\",\"a50026d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4313695\").map(ka),ru=ua(Xm),Ym=Array(3).concat(\"fc8d59ffffbf91cf60\",\"d7191cfdae61a6d96a1a9641\",\"d7191cfdae61ffffbfa6d96a1a9641\",\"d73027fc8d59fee08bd9ef8b91cf601a9850\",\"d73027fc8d59fee08bffffbfd9ef8b91cf601a9850\",\"d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850\",\"d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850\",\"a50026d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850006837\",\n\"a50026d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850006837\").map(ka),su=ua(Ym),Zm=Array(3).concat(\"fc8d59ffffbf99d594\",\"d7191cfdae61abdda42b83ba\",\"d7191cfdae61ffffbfabdd`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 796,
                  "startColumn": 347,
                  "endLine": 796,
                  "endColumn": 391,
                  "snippet": {
                    "text": "d14575b4\",\"a50026d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4313695\",\"a50026d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4313695\").map(ka),ru=ua(Xm),Ym=Array(3).concat(\"fc8d59ffffbf91cf60\",\"d7191cfdae61a6d96a1a9641\",\"d7191cfdae61ffffbfa6d96a1a9641\",\"d73027fc8d59fee08bd9ef8b91cf601a9850\",\"d73027fc8d59fee08bffffbfd9ef8b91cf601a9850\",\"d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850\",\"d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850\",\"a50026d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850006837\",\n\"a50026d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850006837\").map(ka),su=ua(Ym),Zm=Array(3).concat(\"fc8d59ffffbf99d594\"",
                    "rendered": {
                      "text": "d14575b4\",\"a50026d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4313695\",\"a50026d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4313695\").map(ka),ru=ua(Xm),Ym=Array(3).concat(\"fc8d59ffffbf91cf60\",\"d7191cfdae61a6d96a1a9641\",\"d7191cfdae61ffffbfa6d96a1a9641\",\"d73027fc8d59fee08bd9ef8b91cf601a9850\",\"d73027fc8d59fee08bffffbfd9ef8b91cf601a9850\",\"d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850\",\"d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850\",\"a50026d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850006837\",\n\"a50026d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850006837\").map(ka),su=ua(Ym),Zm=Array(3).concat(\"fc8d59ffffbf99d594\"",
                      "markdown": "`d14575b4\",\"a50026d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4313695\",\"a50026d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4313695\").map(ka),ru=ua(Xm),Ym=Array(3).concat(\"fc8d59ffffbf91cf60\",\"d7191cfdae61a6d96a1a9641\",\"d7191cfdae61ffffbfa6d96a1a9641\",\"d73027fc8d59fee08bd9ef8b91cf601a9850\",\"d73027fc8d59fee08bffffbfd9ef8b91cf601a9850\",\"d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850\",\"d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850\",\"a50026d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850006837\",\n\"a50026d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850006837\").map(ka),su=ua(Ym),Zm=Array(3).concat(\"fc8d59ffffbf99d594\"`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 796,
                  "startColumn": 120,
                  "endLine": 796,
                  "endColumn": 188,
                  "snippet": {
                    "text": "9e92c7bb6\",\"d7191cfdae61ffffbfabd9e92c7bb6\",\"d73027fc8d59fee090e0f3f891bfdb4575b4\",\"d73027fc8d59fee090ffffbfe0f3f891bfdb4575b4\",\"d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4\",\n\"d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4\",\"a50026d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4313695\",\"a50026d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4313695\").map(ka),ru=ua(Xm),Ym=Array(3).concat(\"fc8d59ffffbf91cf60\",\"d7191cfdae61a6d96a1a9641\",\"d7191cfdae61ffffbfa6d96a1a9641\",\"d73027fc8d59fee08bd9ef8b91cf601a9850\",\"d73027fc8d59fee08bffffbfd9ef8b91cf601a9850\",\"d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850\",\"d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66",
                    "rendered": {
                      "text": "9e92c7bb6\",\"d7191cfdae61ffffbfabd9e92c7bb6\",\"d73027fc8d59fee090e0f3f891bfdb4575b4\",\"d73027fc8d59fee090ffffbfe0f3f891bfdb4575b4\",\"d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4\",\n\"d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4\",\"a50026d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4313695\",\"a50026d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4313695\").map(ka),ru=ua(Xm),Ym=Array(3).concat(\"fc8d59ffffbf91cf60\",\"d7191cfdae61a6d96a1a9641\",\"d7191cfdae61ffffbfa6d96a1a9641\",\"d73027fc8d59fee08bd9ef8b91cf601a9850\",\"d73027fc8d59fee08bffffbfd9ef8b91cf601a9850\",\"d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850\",\"d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66",
                      "markdown": "`9e92c7bb6\",\"d7191cfdae61ffffbfabd9e92c7bb6\",\"d73027fc8d59fee090e0f3f891bfdb4575b4\",\"d73027fc8d59fee090ffffbfe0f3f891bfdb4575b4\",\"d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4\",\n\"d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4\",\"a50026d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4313695\",\"a50026d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4313695\").map(ka),ru=ua(Xm),Ym=Array(3).concat(\"fc8d59ffffbf91cf60\",\"d7191cfdae61a6d96a1a9641\",\"d7191cfdae61ffffbfa6d96a1a9641\",\"d73027fc8d59fee08bd9ef8b91cf601a9850\",\"d73027fc8d59fee08bffffbfd9ef8b91cf601a9850\",\"d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850\",\"d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 796,
                  "startColumn": 57,
                  "endLine": 796,
                  "endColumn": 119,
                  "snippet": {
                    "text": "ua(Wm),Xm=Array(3).concat(\"fc8d59ffffbf91bfdb\",\"d7191cfdae61abd9e92c7bb6\",\"d7191cfdae61ffffbfabd9e92c7bb6\",\"d73027fc8d59fee090e0f3f891bfdb4575b4\",\"d73027fc8d59fee090ffffbfe0f3f891bfdb4575b4\",\"d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4\",\n\"d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4\",\"a50026d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4313695\",\"a50026d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4313695\").map(ka),ru=ua(Xm),Ym=Array(3).concat(\"fc8d59ffffbf91cf60\",\"d7191cfdae61a6d96a1a9641\",\"d7191cfdae61ffffbfa6d96a1a9641\",\"d73027fc8d59fee08bd9ef8b91cf601a9850\",\"d73027fc8d59fee08bffffbfd9ef8b91cf601a9850\",\"d73027f46d43fdae61fee08bd9",
                    "rendered": {
                      "text": "ua(Wm),Xm=Array(3).concat(\"fc8d59ffffbf91bfdb\",\"d7191cfdae61abd9e92c7bb6\",\"d7191cfdae61ffffbfabd9e92c7bb6\",\"d73027fc8d59fee090e0f3f891bfdb4575b4\",\"d73027fc8d59fee090ffffbfe0f3f891bfdb4575b4\",\"d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4\",\n\"d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4\",\"a50026d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4313695\",\"a50026d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4313695\").map(ka),ru=ua(Xm),Ym=Array(3).concat(\"fc8d59ffffbf91cf60\",\"d7191cfdae61a6d96a1a9641\",\"d7191cfdae61ffffbfa6d96a1a9641\",\"d73027fc8d59fee08bd9ef8b91cf601a9850\",\"d73027fc8d59fee08bffffbfd9ef8b91cf601a9850\",\"d73027f46d43fdae61fee08bd9",
                      "markdown": "`ua(Wm),Xm=Array(3).concat(\"fc8d59ffffbf91bfdb\",\"d7191cfdae61abd9e92c7bb6\",\"d7191cfdae61ffffbfabd9e92c7bb6\",\"d73027fc8d59fee090e0f3f891bfdb4575b4\",\"d73027fc8d59fee090ffffbfe0f3f891bfdb4575b4\",\"d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4\",\n\"d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4\",\"a50026d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4313695\",\"a50026d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4313695\").map(ka),ru=ua(Xm),Ym=Array(3).concat(\"fc8d59ffffbf91cf60\",\"d7191cfdae61a6d96a1a9641\",\"d7191cfdae61ffffbfa6d96a1a9641\",\"d73027fc8d59fee08bd9ef8b91cf601a9850\",\"d73027fc8d59fee08bffffbfd9ef8b91cf601a9850\",\"d73027f46d43fdae61fee08bd9`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 796,
                  "endLine": 796,
                  "endColumn": 56,
                  "snippet": {
                    "text": "2fddbc7ffffffe0e0e0bababa8787874d4d4d1a1a1a\").map(ka),qu=ua(Wm),Xm=Array(3).concat(\"fc8d59ffffbf91bfdb\",\"d7191cfdae61abd9e92c7bb6\",\"d7191cfdae61ffffbfabd9e92c7bb6\",\"d73027fc8d59fee090e0f3f891bfdb4575b4\",\"d73027fc8d59fee090ffffbfe0f3f891bfdb4575b4\",\"d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4\",\n\"d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4\",\"a50026d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4313695\",\"a50026d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4313695\").map(ka),ru=ua(Xm),Ym=Array(3).concat(\"fc8d59ffffbf91cf60\",\"d7191cfdae61a6d96a1a9641\",\"d7191cfdae61ffffbfa6d96a1a9641\",\"d73027fc8d59fee08bd9ef8b91cf601a9850\",\"d73027fc",
                    "rendered": {
                      "text": "2fddbc7ffffffe0e0e0bababa8787874d4d4d1a1a1a\").map(ka),qu=ua(Wm),Xm=Array(3).concat(\"fc8d59ffffbf91bfdb\",\"d7191cfdae61abd9e92c7bb6\",\"d7191cfdae61ffffbfabd9e92c7bb6\",\"d73027fc8d59fee090e0f3f891bfdb4575b4\",\"d73027fc8d59fee090ffffbfe0f3f891bfdb4575b4\",\"d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4\",\n\"d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4\",\"a50026d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4313695\",\"a50026d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4313695\").map(ka),ru=ua(Xm),Ym=Array(3).concat(\"fc8d59ffffbf91cf60\",\"d7191cfdae61a6d96a1a9641\",\"d7191cfdae61ffffbfa6d96a1a9641\",\"d73027fc8d59fee08bd9ef8b91cf601a9850\",\"d73027fc",
                      "markdown": "`2fddbc7ffffffe0e0e0bababa8787874d4d4d1a1a1a\").map(ka),qu=ua(Wm),Xm=Array(3).concat(\"fc8d59ffffbf91bfdb\",\"d7191cfdae61abd9e92c7bb6\",\"d7191cfdae61ffffbfabd9e92c7bb6\",\"d73027fc8d59fee090e0f3f891bfdb4575b4\",\"d73027fc8d59fee090ffffbfe0f3f891bfdb4575b4\",\"d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4\",\n\"d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4\",\"a50026d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4313695\",\"a50026d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4313695\").map(ka),ru=ua(Xm),Ym=Array(3).concat(\"fc8d59ffffbf91cf60\",\"d7191cfdae61a6d96a1a9641\",\"d7191cfdae61ffffbfa6d96a1a9641\",\"d73027fc8d59fee08bd9ef8b91cf601a9850\",\"d73027fc`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 795,
                  "startColumn": 488,
                  "endLine": 795,
                  "endColumn": 538,
                  "snippet": {
                    "text": "e0bababa8787874d4d4d1a1a1a\",\"67001fb2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d1a1a1a\").map(ka),qu=ua(Wm),Xm=Array(3).concat(\"fc8d59ffffbf91bfdb\",\"d7191cfdae61abd9e92c7bb6\",\"d7191cfdae61ffffbfabd9e92c7bb6\",\"d73027fc8d59fee090e0f3f891bfdb4575b4\",\"d73027fc8d59fee090ffffbfe0f3f891bfdb4575b4\",\"d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4\",\n\"d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4\",\"a50026d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4313695\",\"a50026d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4313695\").map(ka),ru=ua(Xm),Ym=Array(3).concat(\"fc8d59ffffbf91cf60\",\"d7191cfdae61a6d96a1a9641\",\"d7191cfdae61ffffbfa6d9",
                    "rendered": {
                      "text": "e0bababa8787874d4d4d1a1a1a\",\"67001fb2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d1a1a1a\").map(ka),qu=ua(Wm),Xm=Array(3).concat(\"fc8d59ffffbf91bfdb\",\"d7191cfdae61abd9e92c7bb6\",\"d7191cfdae61ffffbfabd9e92c7bb6\",\"d73027fc8d59fee090e0f3f891bfdb4575b4\",\"d73027fc8d59fee090ffffbfe0f3f891bfdb4575b4\",\"d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4\",\n\"d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4\",\"a50026d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4313695\",\"a50026d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4313695\").map(ka),ru=ua(Xm),Ym=Array(3).concat(\"fc8d59ffffbf91cf60\",\"d7191cfdae61a6d96a1a9641\",\"d7191cfdae61ffffbfa6d9",
                      "markdown": "`e0bababa8787874d4d4d1a1a1a\",\"67001fb2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d1a1a1a\").map(ka),qu=ua(Wm),Xm=Array(3).concat(\"fc8d59ffffbf91bfdb\",\"d7191cfdae61abd9e92c7bb6\",\"d7191cfdae61ffffbfabd9e92c7bb6\",\"d73027fc8d59fee090e0f3f891bfdb4575b4\",\"d73027fc8d59fee090ffffbfe0f3f891bfdb4575b4\",\"d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4\",\n\"d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4\",\"a50026d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4313695\",\"a50026d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4313695\").map(ka),ru=ua(Xm),Ym=Array(3).concat(\"fc8d59ffffbf91cf60\",\"d7191cfdae61a6d96a1a9641\",\"d7191cfdae61ffffbfa6d9`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 795,
                  "startColumn": 443,
                  "endLine": 795,
                  "endColumn": 487,
                  "snippet": {
                    "text": "874d4d4d\",\"67001fb2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d1a1a1a\",\"67001fb2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d1a1a1a\").map(ka),qu=ua(Wm),Xm=Array(3).concat(\"fc8d59ffffbf91bfdb\",\"d7191cfdae61abd9e92c7bb6\",\"d7191cfdae61ffffbfabd9e92c7bb6\",\"d73027fc8d59fee090e0f3f891bfdb4575b4\",\"d73027fc8d59fee090ffffbfe0f3f891bfdb4575b4\",\"d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4\",\n\"d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4\",\"a50026d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4313695\",\"a50026d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4313695\").map(ka),ru=ua(Xm),Ym=Array(3).concat(\"fc8d59ffffbf91cf60\"",
                    "rendered": {
                      "text": "874d4d4d\",\"67001fb2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d1a1a1a\",\"67001fb2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d1a1a1a\").map(ka),qu=ua(Wm),Xm=Array(3).concat(\"fc8d59ffffbf91bfdb\",\"d7191cfdae61abd9e92c7bb6\",\"d7191cfdae61ffffbfabd9e92c7bb6\",\"d73027fc8d59fee090e0f3f891bfdb4575b4\",\"d73027fc8d59fee090ffffbfe0f3f891bfdb4575b4\",\"d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4\",\n\"d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4\",\"a50026d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4313695\",\"a50026d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4313695\").map(ka),ru=ua(Xm),Ym=Array(3).concat(\"fc8d59ffffbf91cf60\"",
                      "markdown": "`874d4d4d\",\"67001fb2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d1a1a1a\",\"67001fb2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d1a1a1a\").map(ka),qu=ua(Wm),Xm=Array(3).concat(\"fc8d59ffffbf91bfdb\",\"d7191cfdae61abd9e92c7bb6\",\"d7191cfdae61ffffbfabd9e92c7bb6\",\"d73027fc8d59fee090e0f3f891bfdb4575b4\",\"d73027fc8d59fee090ffffbfe0f3f891bfdb4575b4\",\"d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4\",\n\"d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4\",\"a50026d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4313695\",\"a50026d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4313695\").map(ka),ru=ua(Xm),Ym=Array(3).concat(\"fc8d59ffffbf91cf60\"`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 795,
                  "startColumn": 216,
                  "endLine": 795,
                  "endColumn": 284,
                  "snippet": {
                    "text": "aba404040\",\"ca0020f4a582ffffffbababa404040\",\"b2182bef8a62fddbc7e0e0e09999994d4d4d\",\n\"b2182bef8a62fddbc7ffffffe0e0e09999994d4d4d\",\"b2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d\",\"b2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d\",\"67001fb2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d1a1a1a\",\"67001fb2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d1a1a1a\").map(ka),qu=ua(Wm),Xm=Array(3).concat(\"fc8d59ffffbf91bfdb\",\"d7191cfdae61abd9e92c7bb6\",\"d7191cfdae61ffffbfabd9e92c7bb6\",\"d73027fc8d59fee090e0f3f891bfdb4575b4\",\"d73027fc8d59fee090ffffbfe0f3f891bfdb4575b4\",\"d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4\",\n\"d73027f46d43fdae61fee090ffffbfe0f3f8abd9e97",
                    "rendered": {
                      "text": "aba404040\",\"ca0020f4a582ffffffbababa404040\",\"b2182bef8a62fddbc7e0e0e09999994d4d4d\",\n\"b2182bef8a62fddbc7ffffffe0e0e09999994d4d4d\",\"b2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d\",\"b2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d\",\"67001fb2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d1a1a1a\",\"67001fb2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d1a1a1a\").map(ka),qu=ua(Wm),Xm=Array(3).concat(\"fc8d59ffffbf91bfdb\",\"d7191cfdae61abd9e92c7bb6\",\"d7191cfdae61ffffbfabd9e92c7bb6\",\"d73027fc8d59fee090e0f3f891bfdb4575b4\",\"d73027fc8d59fee090ffffbfe0f3f891bfdb4575b4\",\"d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4\",\n\"d73027f46d43fdae61fee090ffffbfe0f3f8abd9e97",
                      "markdown": "`aba404040\",\"ca0020f4a582ffffffbababa404040\",\"b2182bef8a62fddbc7e0e0e09999994d4d4d\",\n\"b2182bef8a62fddbc7ffffffe0e0e09999994d4d4d\",\"b2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d\",\"b2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d\",\"67001fb2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d1a1a1a\",\"67001fb2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d1a1a1a\").map(ka),qu=ua(Wm),Xm=Array(3).concat(\"fc8d59ffffbf91bfdb\",\"d7191cfdae61abd9e92c7bb6\",\"d7191cfdae61ffffbfabd9e92c7bb6\",\"d73027fc8d59fee090e0f3f891bfdb4575b4\",\"d73027fc8d59fee090ffffbfe0f3f891bfdb4575b4\",\"d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4\",\n\"d73027f46d43fdae61fee090ffffbfe0f3f8abd9e97`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 795,
                  "startColumn": 153,
                  "endLine": 795,
                  "endColumn": 215,
                  "snippet": {
                    "text": "ua(Vm),Wm=Array(3).concat(\"ef8a62ffffff999999\",\"ca0020f4a582bababa404040\",\"ca0020f4a582ffffffbababa404040\",\"b2182bef8a62fddbc7e0e0e09999994d4d4d\",\n\"b2182bef8a62fddbc7ffffffe0e0e09999994d4d4d\",\"b2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d\",\"b2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d\",\"67001fb2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d1a1a1a\",\"67001fb2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d1a1a1a\").map(ka),qu=ua(Wm),Xm=Array(3).concat(\"fc8d59ffffbf91bfdb\",\"d7191cfdae61abd9e92c7bb6\",\"d7191cfdae61ffffbfabd9e92c7bb6\",\"d73027fc8d59fee090e0f3f891bfdb4575b4\",\"d73027fc8d59fee090ffffbfe0f3f891bfdb4575b4\",\"d73027f46d43fdae61fee090e0",
                    "rendered": {
                      "text": "ua(Vm),Wm=Array(3).concat(\"ef8a62ffffff999999\",\"ca0020f4a582bababa404040\",\"ca0020f4a582ffffffbababa404040\",\"b2182bef8a62fddbc7e0e0e09999994d4d4d\",\n\"b2182bef8a62fddbc7ffffffe0e0e09999994d4d4d\",\"b2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d\",\"b2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d\",\"67001fb2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d1a1a1a\",\"67001fb2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d1a1a1a\").map(ka),qu=ua(Wm),Xm=Array(3).concat(\"fc8d59ffffbf91bfdb\",\"d7191cfdae61abd9e92c7bb6\",\"d7191cfdae61ffffbfabd9e92c7bb6\",\"d73027fc8d59fee090e0f3f891bfdb4575b4\",\"d73027fc8d59fee090ffffbfe0f3f891bfdb4575b4\",\"d73027f46d43fdae61fee090e0",
                      "markdown": "`ua(Vm),Wm=Array(3).concat(\"ef8a62ffffff999999\",\"ca0020f4a582bababa404040\",\"ca0020f4a582ffffffbababa404040\",\"b2182bef8a62fddbc7e0e0e09999994d4d4d\",\n\"b2182bef8a62fddbc7ffffffe0e0e09999994d4d4d\",\"b2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d\",\"b2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d\",\"67001fb2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d1a1a1a\",\"67001fb2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d1a1a1a\").map(ka),qu=ua(Wm),Xm=Array(3).concat(\"fc8d59ffffbf91bfdb\",\"d7191cfdae61abd9e92c7bb6\",\"d7191cfdae61ffffbfabd9e92c7bb6\",\"d73027fc8d59fee090e0f3f891bfdb4575b4\",\"d73027fc8d59fee090ffffbfe0f3f891bfdb4575b4\",\"d73027f46d43fdae61fee090e0`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 795,
                  "startColumn": 96,
                  "endLine": 795,
                  "endColumn": 152,
                  "snippet": {
                    "text": "2fddbc7f7f7f7d1e5f092c5de4393c32166ac053061\").map(ka),pu=ua(Vm),Wm=Array(3).concat(\"ef8a62ffffff999999\",\"ca0020f4a582bababa404040\",\"ca0020f4a582ffffffbababa404040\",\"b2182bef8a62fddbc7e0e0e09999994d4d4d\",\n\"b2182bef8a62fddbc7ffffffe0e0e09999994d4d4d\",\"b2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d\",\"b2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d\",\"67001fb2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d1a1a1a\",\"67001fb2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d1a1a1a\").map(ka),qu=ua(Wm),Xm=Array(3).concat(\"fc8d59ffffbf91bfdb\",\"d7191cfdae61abd9e92c7bb6\",\"d7191cfdae61ffffbfabd9e92c7bb6\",\"d73027fc8d59fee090e0f3f891bfdb4575b4\",\"d73027fc",
                    "rendered": {
                      "text": "2fddbc7f7f7f7d1e5f092c5de4393c32166ac053061\").map(ka),pu=ua(Vm),Wm=Array(3).concat(\"ef8a62ffffff999999\",\"ca0020f4a582bababa404040\",\"ca0020f4a582ffffffbababa404040\",\"b2182bef8a62fddbc7e0e0e09999994d4d4d\",\n\"b2182bef8a62fddbc7ffffffe0e0e09999994d4d4d\",\"b2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d\",\"b2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d\",\"67001fb2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d1a1a1a\",\"67001fb2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d1a1a1a\").map(ka),qu=ua(Wm),Xm=Array(3).concat(\"fc8d59ffffbf91bfdb\",\"d7191cfdae61abd9e92c7bb6\",\"d7191cfdae61ffffbfabd9e92c7bb6\",\"d73027fc8d59fee090e0f3f891bfdb4575b4\",\"d73027fc",
                      "markdown": "`2fddbc7f7f7f7d1e5f092c5de4393c32166ac053061\").map(ka),pu=ua(Vm),Wm=Array(3).concat(\"ef8a62ffffff999999\",\"ca0020f4a582bababa404040\",\"ca0020f4a582ffffffbababa404040\",\"b2182bef8a62fddbc7e0e0e09999994d4d4d\",\n\"b2182bef8a62fddbc7ffffffe0e0e09999994d4d4d\",\"b2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d\",\"b2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d\",\"67001fb2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d1a1a1a\",\"67001fb2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d1a1a1a\").map(ka),qu=ua(Wm),Xm=Array(3).concat(\"fc8d59ffffbf91bfdb\",\"d7191cfdae61abd9e92c7bb6\",\"d7191cfdae61ffffbfabd9e92c7bb6\",\"d73027fc8d59fee090e0f3f891bfdb4575b4\",\"d73027fc`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 795,
                  "startColumn": 45,
                  "endLine": 795,
                  "endColumn": 95,
                  "snippet": {
                    "text": "092c5de4393c32166ac053061\",\"67001fb2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac053061\").map(ka),pu=ua(Vm),Wm=Array(3).concat(\"ef8a62ffffff999999\",\"ca0020f4a582bababa404040\",\"ca0020f4a582ffffffbababa404040\",\"b2182bef8a62fddbc7e0e0e09999994d4d4d\",\n\"b2182bef8a62fddbc7ffffffe0e0e09999994d4d4d\",\"b2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d\",\"b2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d\",\"67001fb2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d1a1a1a\",\"67001fb2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d1a1a1a\").map(ka),qu=ua(Wm),Xm=Array(3).concat(\"fc8d59ffffbf91bfdb\",\"d7191cfdae61abd9e92c7bb6\",\"d7191cfdae61ffffbfabd9e",
                    "rendered": {
                      "text": "092c5de4393c32166ac053061\",\"67001fb2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac053061\").map(ka),pu=ua(Vm),Wm=Array(3).concat(\"ef8a62ffffff999999\",\"ca0020f4a582bababa404040\",\"ca0020f4a582ffffffbababa404040\",\"b2182bef8a62fddbc7e0e0e09999994d4d4d\",\n\"b2182bef8a62fddbc7ffffffe0e0e09999994d4d4d\",\"b2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d\",\"b2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d\",\"67001fb2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d1a1a1a\",\"67001fb2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d1a1a1a\").map(ka),qu=ua(Wm),Xm=Array(3).concat(\"fc8d59ffffbf91bfdb\",\"d7191cfdae61abd9e92c7bb6\",\"d7191cfdae61ffffbfabd9e",
                      "markdown": "`092c5de4393c32166ac053061\",\"67001fb2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac053061\").map(ka),pu=ua(Vm),Wm=Array(3).concat(\"ef8a62ffffff999999\",\"ca0020f4a582bababa404040\",\"ca0020f4a582ffffffbababa404040\",\"b2182bef8a62fddbc7e0e0e09999994d4d4d\",\n\"b2182bef8a62fddbc7ffffffe0e0e09999994d4d4d\",\"b2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d\",\"b2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d\",\"67001fb2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d1a1a1a\",\"67001fb2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d1a1a1a\").map(ka),qu=ua(Wm),Xm=Array(3).concat(\"fc8d59ffffbf91bfdb\",\"d7191cfdae61abd9e92c7bb6\",\"d7191cfdae61ffffbfabd9e`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 795,
                  "endLine": 795,
                  "endColumn": 44,
                  "snippet": {
                    "text": "32166ac\",\"67001fb2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac053061\",\"67001fb2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac053061\").map(ka),pu=ua(Vm),Wm=Array(3).concat(\"ef8a62ffffff999999\",\"ca0020f4a582bababa404040\",\"ca0020f4a582ffffffbababa404040\",\"b2182bef8a62fddbc7e0e0e09999994d4d4d\",\n\"b2182bef8a62fddbc7ffffffe0e0e09999994d4d4d\",\"b2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d\",\"b2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d\",\"67001fb2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d1a1a1a\",\"67001fb2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d1a1a1a\").map(ka),qu=ua(Wm),Xm=Array(3).concat(\"fc8d59ffffbf91bfdb\",",
                    "rendered": {
                      "text": "32166ac\",\"67001fb2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac053061\",\"67001fb2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac053061\").map(ka),pu=ua(Vm),Wm=Array(3).concat(\"ef8a62ffffff999999\",\"ca0020f4a582bababa404040\",\"ca0020f4a582ffffffbababa404040\",\"b2182bef8a62fddbc7e0e0e09999994d4d4d\",\n\"b2182bef8a62fddbc7ffffffe0e0e09999994d4d4d\",\"b2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d\",\"b2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d\",\"67001fb2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d1a1a1a\",\"67001fb2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d1a1a1a\").map(ka),qu=ua(Wm),Xm=Array(3).concat(\"fc8d59ffffbf91bfdb\",",
                      "markdown": "`32166ac\",\"67001fb2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac053061\",\"67001fb2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac053061\").map(ka),pu=ua(Vm),Wm=Array(3).concat(\"ef8a62ffffff999999\",\"ca0020f4a582bababa404040\",\"ca0020f4a582ffffffbababa404040\",\"b2182bef8a62fddbc7e0e0e09999994d4d4d\",\n\"b2182bef8a62fddbc7ffffffe0e0e09999994d4d4d\",\"b2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d\",\"b2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d\",\"67001fb2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d1a1a1a\",\"67001fb2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d1a1a1a\").map(ka),qu=ua(Wm),Xm=Array(3).concat(\"fc8d59ffffbf91bfdb\",`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 794,
                  "startColumn": 288,
                  "endLine": 794,
                  "endColumn": 356,
                  "snippet": {
                    "text": "5de0571b0\",\n\"ca0020f4a582f7f7f792c5de0571b0\",\"b2182bef8a62fddbc7d1e5f067a9cf2166ac\",\"b2182bef8a62fddbc7f7f7f7d1e5f067a9cf2166ac\",\"b2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac\",\"b2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac\",\"67001fb2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac053061\",\"67001fb2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac053061\").map(ka),pu=ua(Vm),Wm=Array(3).concat(\"ef8a62ffffff999999\",\"ca0020f4a582bababa404040\",\"ca0020f4a582ffffffbababa404040\",\"b2182bef8a62fddbc7e0e0e09999994d4d4d\",\n\"b2182bef8a62fddbc7ffffffe0e0e09999994d4d4d\",\"b2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d\",\"b2182bd6604df4a582fddbc7ffffffe0e0e0bababa8",
                    "rendered": {
                      "text": "5de0571b0\",\n\"ca0020f4a582f7f7f792c5de0571b0\",\"b2182bef8a62fddbc7d1e5f067a9cf2166ac\",\"b2182bef8a62fddbc7f7f7f7d1e5f067a9cf2166ac\",\"b2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac\",\"b2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac\",\"67001fb2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac053061\",\"67001fb2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac053061\").map(ka),pu=ua(Vm),Wm=Array(3).concat(\"ef8a62ffffff999999\",\"ca0020f4a582bababa404040\",\"ca0020f4a582ffffffbababa404040\",\"b2182bef8a62fddbc7e0e0e09999994d4d4d\",\n\"b2182bef8a62fddbc7ffffffe0e0e09999994d4d4d\",\"b2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d\",\"b2182bd6604df4a582fddbc7ffffffe0e0e0bababa8",
                      "markdown": "`5de0571b0\",\n\"ca0020f4a582f7f7f792c5de0571b0\",\"b2182bef8a62fddbc7d1e5f067a9cf2166ac\",\"b2182bef8a62fddbc7f7f7f7d1e5f067a9cf2166ac\",\"b2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac\",\"b2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac\",\"67001fb2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac053061\",\"67001fb2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac053061\").map(ka),pu=ua(Vm),Wm=Array(3).concat(\"ef8a62ffffff999999\",\"ca0020f4a582bababa404040\",\"ca0020f4a582ffffffbababa404040\",\"b2182bef8a62fddbc7e0e0e09999994d4d4d\",\n\"b2182bef8a62fddbc7ffffffe0e0e09999994d4d4d\",\"b2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d\",\"b2182bd6604df4a582fddbc7ffffffe0e0e0bababa8`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 794,
                  "startColumn": 225,
                  "endLine": 794,
                  "endColumn": 287,
                  "snippet": {
                    "text": "ua(Um),Vm=Array(3).concat(\"ef8a62f7f7f767a9cf\",\"ca0020f4a58292c5de0571b0\",\n\"ca0020f4a582f7f7f792c5de0571b0\",\"b2182bef8a62fddbc7d1e5f067a9cf2166ac\",\"b2182bef8a62fddbc7f7f7f7d1e5f067a9cf2166ac\",\"b2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac\",\"b2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac\",\"67001fb2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac053061\",\"67001fb2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac053061\").map(ka),pu=ua(Vm),Wm=Array(3).concat(\"ef8a62ffffff999999\",\"ca0020f4a582bababa404040\",\"ca0020f4a582ffffffbababa404040\",\"b2182bef8a62fddbc7e0e0e09999994d4d4d\",\n\"b2182bef8a62fddbc7ffffffe0e0e09999994d4d4d\",\"b2182bd6604df4a582fddbc7e",
                    "rendered": {
                      "text": "ua(Um),Vm=Array(3).concat(\"ef8a62f7f7f767a9cf\",\"ca0020f4a58292c5de0571b0\",\n\"ca0020f4a582f7f7f792c5de0571b0\",\"b2182bef8a62fddbc7d1e5f067a9cf2166ac\",\"b2182bef8a62fddbc7f7f7f7d1e5f067a9cf2166ac\",\"b2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac\",\"b2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac\",\"67001fb2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac053061\",\"67001fb2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac053061\").map(ka),pu=ua(Vm),Wm=Array(3).concat(\"ef8a62ffffff999999\",\"ca0020f4a582bababa404040\",\"ca0020f4a582ffffffbababa404040\",\"b2182bef8a62fddbc7e0e0e09999994d4d4d\",\n\"b2182bef8a62fddbc7ffffffe0e0e09999994d4d4d\",\"b2182bd6604df4a582fddbc7e",
                      "markdown": "`ua(Um),Vm=Array(3).concat(\"ef8a62f7f7f767a9cf\",\"ca0020f4a58292c5de0571b0\",\n\"ca0020f4a582f7f7f792c5de0571b0\",\"b2182bef8a62fddbc7d1e5f067a9cf2166ac\",\"b2182bef8a62fddbc7f7f7f7d1e5f067a9cf2166ac\",\"b2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac\",\"b2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac\",\"67001fb2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac053061\",\"67001fb2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac053061\").map(ka),pu=ua(Vm),Wm=Array(3).concat(\"ef8a62ffffff999999\",\"ca0020f4a582bababa404040\",\"ca0020f4a582ffffffbababa404040\",\"b2182bef8a62fddbc7e0e0e09999994d4d4d\",\n\"b2182bef8a62fddbc7ffffffe0e0e09999994d4d4d\",\"b2182bd6604df4a582fddbc7e`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 794,
                  "startColumn": 168,
                  "endLine": 794,
                  "endColumn": 224,
                  "snippet": {
                    "text": "2d8daebf7f7f7fee0b6fdb863e08214b358067f3b08\").map(ka),ou=ua(Um),Vm=Array(3).concat(\"ef8a62f7f7f767a9cf\",\"ca0020f4a58292c5de0571b0\",\n\"ca0020f4a582f7f7f792c5de0571b0\",\"b2182bef8a62fddbc7d1e5f067a9cf2166ac\",\"b2182bef8a62fddbc7f7f7f7d1e5f067a9cf2166ac\",\"b2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac\",\"b2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac\",\"67001fb2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac053061\",\"67001fb2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac053061\").map(ka),pu=ua(Vm),Wm=Array(3).concat(\"ef8a62ffffff999999\",\"ca0020f4a582bababa404040\",\"ca0020f4a582ffffffbababa404040\",\"b2182bef8a62fddbc7e0e0e09999994d4d4d\",\n\"b2182be",
                    "rendered": {
                      "text": "2d8daebf7f7f7fee0b6fdb863e08214b358067f3b08\").map(ka),ou=ua(Um),Vm=Array(3).concat(\"ef8a62f7f7f767a9cf\",\"ca0020f4a58292c5de0571b0\",\n\"ca0020f4a582f7f7f792c5de0571b0\",\"b2182bef8a62fddbc7d1e5f067a9cf2166ac\",\"b2182bef8a62fddbc7f7f7f7d1e5f067a9cf2166ac\",\"b2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac\",\"b2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac\",\"67001fb2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac053061\",\"67001fb2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac053061\").map(ka),pu=ua(Vm),Wm=Array(3).concat(\"ef8a62ffffff999999\",\"ca0020f4a582bababa404040\",\"ca0020f4a582ffffffbababa404040\",\"b2182bef8a62fddbc7e0e0e09999994d4d4d\",\n\"b2182be",
                      "markdown": "`2d8daebf7f7f7fee0b6fdb863e08214b358067f3b08\").map(ka),ou=ua(Um),Vm=Array(3).concat(\"ef8a62f7f7f767a9cf\",\"ca0020f4a58292c5de0571b0\",\n\"ca0020f4a582f7f7f792c5de0571b0\",\"b2182bef8a62fddbc7d1e5f067a9cf2166ac\",\"b2182bef8a62fddbc7f7f7f7d1e5f067a9cf2166ac\",\"b2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac\",\"b2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac\",\"67001fb2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac053061\",\"67001fb2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac053061\").map(ka),pu=ua(Vm),Wm=Array(3).concat(\"ef8a62ffffff999999\",\"ca0020f4a582bababa404040\",\"ca0020f4a582ffffffbababa404040\",\"b2182bef8a62fddbc7e0e0e09999994d4d4d\",\n\"b2182be`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 794,
                  "startColumn": 117,
                  "endLine": 794,
                  "endColumn": 167,
                  "snippet": {
                    "text": "6fdb863e08214b358067f3b08\",\"2d004b5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b358067f3b08\").map(ka),ou=ua(Um),Vm=Array(3).concat(\"ef8a62f7f7f767a9cf\",\"ca0020f4a58292c5de0571b0\",\n\"ca0020f4a582f7f7f792c5de0571b0\",\"b2182bef8a62fddbc7d1e5f067a9cf2166ac\",\"b2182bef8a62fddbc7f7f7f7d1e5f067a9cf2166ac\",\"b2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac\",\"b2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac\",\"67001fb2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac053061\",\"67001fb2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac053061\").map(ka),pu=ua(Vm),Wm=Array(3).concat(\"ef8a62ffffff999999\",\"ca0020f4a582bababa404040\",\"ca0020f4a582ffffffbabab",
                    "rendered": {
                      "text": "6fdb863e08214b358067f3b08\",\"2d004b5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b358067f3b08\").map(ka),ou=ua(Um),Vm=Array(3).concat(\"ef8a62f7f7f767a9cf\",\"ca0020f4a58292c5de0571b0\",\n\"ca0020f4a582f7f7f792c5de0571b0\",\"b2182bef8a62fddbc7d1e5f067a9cf2166ac\",\"b2182bef8a62fddbc7f7f7f7d1e5f067a9cf2166ac\",\"b2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac\",\"b2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac\",\"67001fb2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac053061\",\"67001fb2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac053061\").map(ka),pu=ua(Vm),Wm=Array(3).concat(\"ef8a62ffffff999999\",\"ca0020f4a582bababa404040\",\"ca0020f4a582ffffffbabab",
                      "markdown": "`6fdb863e08214b358067f3b08\",\"2d004b5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b358067f3b08\").map(ka),ou=ua(Um),Vm=Array(3).concat(\"ef8a62f7f7f767a9cf\",\"ca0020f4a58292c5de0571b0\",\n\"ca0020f4a582f7f7f792c5de0571b0\",\"b2182bef8a62fddbc7d1e5f067a9cf2166ac\",\"b2182bef8a62fddbc7f7f7f7d1e5f067a9cf2166ac\",\"b2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac\",\"b2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac\",\"67001fb2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac053061\",\"67001fb2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac053061\").map(ka),pu=ua(Vm),Wm=Array(3).concat(\"ef8a62ffffff999999\",\"ca0020f4a582bababa404040\",\"ca0020f4a582ffffffbabab`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 794,
                  "startColumn": 72,
                  "endLine": 794,
                  "endColumn": 116,
                  "snippet": {
                    "text": "4b35806\",\"2d004b5427888073acb2abd2d8daebfee0b6fdb863e08214b358067f3b08\",\"2d004b5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b358067f3b08\").map(ka),ou=ua(Um),Vm=Array(3).concat(\"ef8a62f7f7f767a9cf\",\"ca0020f4a58292c5de0571b0\",\n\"ca0020f4a582f7f7f792c5de0571b0\",\"b2182bef8a62fddbc7d1e5f067a9cf2166ac\",\"b2182bef8a62fddbc7f7f7f7d1e5f067a9cf2166ac\",\"b2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac\",\"b2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac\",\"67001fb2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac053061\",\"67001fb2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac053061\").map(ka),pu=ua(Vm),Wm=Array(3).concat(\"ef8a62ffffff999999\",",
                    "rendered": {
                      "text": "4b35806\",\"2d004b5427888073acb2abd2d8daebfee0b6fdb863e08214b358067f3b08\",\"2d004b5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b358067f3b08\").map(ka),ou=ua(Um),Vm=Array(3).concat(\"ef8a62f7f7f767a9cf\",\"ca0020f4a58292c5de0571b0\",\n\"ca0020f4a582f7f7f792c5de0571b0\",\"b2182bef8a62fddbc7d1e5f067a9cf2166ac\",\"b2182bef8a62fddbc7f7f7f7d1e5f067a9cf2166ac\",\"b2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac\",\"b2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac\",\"67001fb2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac053061\",\"67001fb2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac053061\").map(ka),pu=ua(Vm),Wm=Array(3).concat(\"ef8a62ffffff999999\",",
                      "markdown": "`4b35806\",\"2d004b5427888073acb2abd2d8daebfee0b6fdb863e08214b358067f3b08\",\"2d004b5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b358067f3b08\").map(ka),ou=ua(Um),Vm=Array(3).concat(\"ef8a62f7f7f767a9cf\",\"ca0020f4a58292c5de0571b0\",\n\"ca0020f4a582f7f7f792c5de0571b0\",\"b2182bef8a62fddbc7d1e5f067a9cf2166ac\",\"b2182bef8a62fddbc7f7f7f7d1e5f067a9cf2166ac\",\"b2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac\",\"b2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac\",\"67001fb2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac053061\",\"67001fb2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac053061\").map(ka),pu=ua(Vm),Wm=Array(3).concat(\"ef8a62ffffff999999\",`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 793,
                  "startColumn": 365,
                  "endLine": 793,
                  "endColumn": 433,
                  "snippet": {
                    "text": "b863e66101\",\"5e3c99b2abd2f7f7f7fdb863e66101\",\"542788998ec3d8daebfee0b6f1a340b35806\",\"542788998ec3d8daebf7f7f7fee0b6f1a340b35806\",\"5427888073acb2abd2d8daebfee0b6fdb863e08214b35806\",\"5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b35806\",\"2d004b5427888073acb2abd2d8daebfee0b6fdb863e08214b358067f3b08\",\"2d004b5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b358067f3b08\").map(ka),ou=ua(Um),Vm=Array(3).concat(\"ef8a62f7f7f767a9cf\",\"ca0020f4a58292c5de0571b0\",\n\"ca0020f4a582f7f7f792c5de0571b0\",\"b2182bef8a62fddbc7d1e5f067a9cf2166ac\",\"b2182bef8a62fddbc7f7f7f7d1e5f067a9cf2166ac\",\"b2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac\",\"b2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4",
                    "rendered": {
                      "text": "b863e66101\",\"5e3c99b2abd2f7f7f7fdb863e66101\",\"542788998ec3d8daebfee0b6f1a340b35806\",\"542788998ec3d8daebf7f7f7fee0b6f1a340b35806\",\"5427888073acb2abd2d8daebfee0b6fdb863e08214b35806\",\"5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b35806\",\"2d004b5427888073acb2abd2d8daebfee0b6fdb863e08214b358067f3b08\",\"2d004b5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b358067f3b08\").map(ka),ou=ua(Um),Vm=Array(3).concat(\"ef8a62f7f7f767a9cf\",\"ca0020f4a58292c5de0571b0\",\n\"ca0020f4a582f7f7f792c5de0571b0\",\"b2182bef8a62fddbc7d1e5f067a9cf2166ac\",\"b2182bef8a62fddbc7f7f7f7d1e5f067a9cf2166ac\",\"b2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac\",\"b2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4",
                      "markdown": "`b863e66101\",\"5e3c99b2abd2f7f7f7fdb863e66101\",\"542788998ec3d8daebfee0b6f1a340b35806\",\"542788998ec3d8daebf7f7f7fee0b6f1a340b35806\",\"5427888073acb2abd2d8daebfee0b6fdb863e08214b35806\",\"5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b35806\",\"2d004b5427888073acb2abd2d8daebfee0b6fdb863e08214b358067f3b08\",\"2d004b5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b358067f3b08\").map(ka),ou=ua(Um),Vm=Array(3).concat(\"ef8a62f7f7f767a9cf\",\"ca0020f4a58292c5de0571b0\",\n\"ca0020f4a582f7f7f792c5de0571b0\",\"b2182bef8a62fddbc7d1e5f067a9cf2166ac\",\"b2182bef8a62fddbc7f7f7f7d1e5f067a9cf2166ac\",\"b2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac\",\"b2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 793,
                  "startColumn": 302,
                  "endLine": 793,
                  "endColumn": 364,
                  "snippet": {
                    "text": "=ua(Tm),Um=Array(3).concat(\"998ec3f7f7f7f1a340\",\"5e3c99b2abd2fdb863e66101\",\"5e3c99b2abd2f7f7f7fdb863e66101\",\"542788998ec3d8daebfee0b6f1a340b35806\",\"542788998ec3d8daebf7f7f7fee0b6f1a340b35806\",\"5427888073acb2abd2d8daebfee0b6fdb863e08214b35806\",\"5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b35806\",\"2d004b5427888073acb2abd2d8daebfee0b6fdb863e08214b358067f3b08\",\"2d004b5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b358067f3b08\").map(ka),ou=ua(Um),Vm=Array(3).concat(\"ef8a62f7f7f767a9cf\",\"ca0020f4a58292c5de0571b0\",\n\"ca0020f4a582f7f7f792c5de0571b0\",\"b2182bef8a62fddbc7d1e5f067a9cf2166ac\",\"b2182bef8a62fddbc7f7f7f7d1e5f067a9cf2166ac\",\"b2182bd6604df4a582fddbc7d",
                    "rendered": {
                      "text": "=ua(Tm),Um=Array(3).concat(\"998ec3f7f7f7f1a340\",\"5e3c99b2abd2fdb863e66101\",\"5e3c99b2abd2f7f7f7fdb863e66101\",\"542788998ec3d8daebfee0b6f1a340b35806\",\"542788998ec3d8daebf7f7f7fee0b6f1a340b35806\",\"5427888073acb2abd2d8daebfee0b6fdb863e08214b35806\",\"5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b35806\",\"2d004b5427888073acb2abd2d8daebfee0b6fdb863e08214b358067f3b08\",\"2d004b5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b358067f3b08\").map(ka),ou=ua(Um),Vm=Array(3).concat(\"ef8a62f7f7f767a9cf\",\"ca0020f4a58292c5de0571b0\",\n\"ca0020f4a582f7f7f792c5de0571b0\",\"b2182bef8a62fddbc7d1e5f067a9cf2166ac\",\"b2182bef8a62fddbc7f7f7f7d1e5f067a9cf2166ac\",\"b2182bd6604df4a582fddbc7d",
                      "markdown": "`=ua(Tm),Um=Array(3).concat(\"998ec3f7f7f7f1a340\",\"5e3c99b2abd2fdb863e66101\",\"5e3c99b2abd2f7f7f7fdb863e66101\",\"542788998ec3d8daebfee0b6f1a340b35806\",\"542788998ec3d8daebf7f7f7fee0b6f1a340b35806\",\"5427888073acb2abd2d8daebfee0b6fdb863e08214b35806\",\"5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b35806\",\"2d004b5427888073acb2abd2d8daebfee0b6fdb863e08214b358067f3b08\",\"2d004b5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b358067f3b08\").map(ka),ou=ua(Um),Vm=Array(3).concat(\"ef8a62f7f7f767a9cf\",\"ca0020f4a58292c5de0571b0\",\n\"ca0020f4a582f7f7f792c5de0571b0\",\"b2182bef8a62fddbc7d1e5f067a9cf2166ac\",\"b2182bef8a62fddbc7f7f7f7d1e5f067a9cf2166ac\",\"b2182bd6604df4a582fddbc7d`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 793,
                  "startColumn": 245,
                  "endLine": 793,
                  "endColumn": 301,
                  "snippet": {
                    "text": "afde0eff7f7f7e6f5d0b8e1867fbc414d9221276419\").map(ka),\nnu=ua(Tm),Um=Array(3).concat(\"998ec3f7f7f7f1a340\",\"5e3c99b2abd2fdb863e66101\",\"5e3c99b2abd2f7f7f7fdb863e66101\",\"542788998ec3d8daebfee0b6f1a340b35806\",\"542788998ec3d8daebf7f7f7fee0b6f1a340b35806\",\"5427888073acb2abd2d8daebfee0b6fdb863e08214b35806\",\"5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b35806\",\"2d004b5427888073acb2abd2d8daebfee0b6fdb863e08214b358067f3b08\",\"2d004b5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b358067f3b08\").map(ka),ou=ua(Um),Vm=Array(3).concat(\"ef8a62f7f7f767a9cf\",\"ca0020f4a58292c5de0571b0\",\n\"ca0020f4a582f7f7f792c5de0571b0\",\"b2182bef8a62fddbc7d1e5f067a9cf2166ac\",\"b2182be",
                    "rendered": {
                      "text": "afde0eff7f7f7e6f5d0b8e1867fbc414d9221276419\").map(ka),\nnu=ua(Tm),Um=Array(3).concat(\"998ec3f7f7f7f1a340\",\"5e3c99b2abd2fdb863e66101\",\"5e3c99b2abd2f7f7f7fdb863e66101\",\"542788998ec3d8daebfee0b6f1a340b35806\",\"542788998ec3d8daebf7f7f7fee0b6f1a340b35806\",\"5427888073acb2abd2d8daebfee0b6fdb863e08214b35806\",\"5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b35806\",\"2d004b5427888073acb2abd2d8daebfee0b6fdb863e08214b358067f3b08\",\"2d004b5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b358067f3b08\").map(ka),ou=ua(Um),Vm=Array(3).concat(\"ef8a62f7f7f767a9cf\",\"ca0020f4a58292c5de0571b0\",\n\"ca0020f4a582f7f7f792c5de0571b0\",\"b2182bef8a62fddbc7d1e5f067a9cf2166ac\",\"b2182be",
                      "markdown": "`afde0eff7f7f7e6f5d0b8e1867fbc414d9221276419\").map(ka),\nnu=ua(Tm),Um=Array(3).concat(\"998ec3f7f7f7f1a340\",\"5e3c99b2abd2fdb863e66101\",\"5e3c99b2abd2f7f7f7fdb863e66101\",\"542788998ec3d8daebfee0b6f1a340b35806\",\"542788998ec3d8daebf7f7f7fee0b6f1a340b35806\",\"5427888073acb2abd2d8daebfee0b6fdb863e08214b35806\",\"5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b35806\",\"2d004b5427888073acb2abd2d8daebfee0b6fdb863e08214b358067f3b08\",\"2d004b5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b358067f3b08\").map(ka),ou=ua(Um),Vm=Array(3).concat(\"ef8a62f7f7f767a9cf\",\"ca0020f4a58292c5de0571b0\",\n\"ca0020f4a582f7f7f792c5de0571b0\",\"b2182bef8a62fddbc7d1e5f067a9cf2166ac\",\"b2182be`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 793,
                  "startColumn": 194,
                  "endLine": 793,
                  "endColumn": 244,
                  "snippet": {
                    "text": "0b8e1867fbc414d9221276419\",\"8e0152c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221276419\").map(ka),\nnu=ua(Tm),Um=Array(3).concat(\"998ec3f7f7f7f1a340\",\"5e3c99b2abd2fdb863e66101\",\"5e3c99b2abd2f7f7f7fdb863e66101\",\"542788998ec3d8daebfee0b6f1a340b35806\",\"542788998ec3d8daebf7f7f7fee0b6f1a340b35806\",\"5427888073acb2abd2d8daebfee0b6fdb863e08214b35806\",\"5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b35806\",\"2d004b5427888073acb2abd2d8daebfee0b6fdb863e08214b358067f3b08\",\"2d004b5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b358067f3b08\").map(ka),ou=ua(Um),Vm=Array(3).concat(\"ef8a62f7f7f767a9cf\",\"ca0020f4a58292c5de0571b0\",\n\"ca0020f4a582f7f7f792c5",
                    "rendered": {
                      "text": "0b8e1867fbc414d9221276419\",\"8e0152c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221276419\").map(ka),\nnu=ua(Tm),Um=Array(3).concat(\"998ec3f7f7f7f1a340\",\"5e3c99b2abd2fdb863e66101\",\"5e3c99b2abd2f7f7f7fdb863e66101\",\"542788998ec3d8daebfee0b6f1a340b35806\",\"542788998ec3d8daebf7f7f7fee0b6f1a340b35806\",\"5427888073acb2abd2d8daebfee0b6fdb863e08214b35806\",\"5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b35806\",\"2d004b5427888073acb2abd2d8daebfee0b6fdb863e08214b358067f3b08\",\"2d004b5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b358067f3b08\").map(ka),ou=ua(Um),Vm=Array(3).concat(\"ef8a62f7f7f767a9cf\",\"ca0020f4a58292c5de0571b0\",\n\"ca0020f4a582f7f7f792c5",
                      "markdown": "`0b8e1867fbc414d9221276419\",\"8e0152c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221276419\").map(ka),\nnu=ua(Tm),Um=Array(3).concat(\"998ec3f7f7f7f1a340\",\"5e3c99b2abd2fdb863e66101\",\"5e3c99b2abd2f7f7f7fdb863e66101\",\"542788998ec3d8daebfee0b6f1a340b35806\",\"542788998ec3d8daebf7f7f7fee0b6f1a340b35806\",\"5427888073acb2abd2d8daebfee0b6fdb863e08214b35806\",\"5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b35806\",\"2d004b5427888073acb2abd2d8daebfee0b6fdb863e08214b358067f3b08\",\"2d004b5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b358067f3b08\").map(ka),ou=ua(Um),Vm=Array(3).concat(\"ef8a62f7f7f767a9cf\",\"ca0020f4a58292c5de0571b0\",\n\"ca0020f4a582f7f7f792c5`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 793,
                  "startColumn": 149,
                  "endLine": 793,
                  "endColumn": 193,
                  "snippet": {
                    "text": "14d9221\",\"8e0152c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221276419\",\"8e0152c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221276419\").map(ka),\nnu=ua(Tm),Um=Array(3).concat(\"998ec3f7f7f7f1a340\",\"5e3c99b2abd2fdb863e66101\",\"5e3c99b2abd2f7f7f7fdb863e66101\",\"542788998ec3d8daebfee0b6f1a340b35806\",\"542788998ec3d8daebf7f7f7fee0b6f1a340b35806\",\"5427888073acb2abd2d8daebfee0b6fdb863e08214b35806\",\"5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b35806\",\"2d004b5427888073acb2abd2d8daebfee0b6fdb863e08214b358067f3b08\",\"2d004b5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b358067f3b08\").map(ka),ou=ua(Um),Vm=Array(3).concat(\"ef8a62f7f7f767a9cf\",",
                    "rendered": {
                      "text": "14d9221\",\"8e0152c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221276419\",\"8e0152c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221276419\").map(ka),\nnu=ua(Tm),Um=Array(3).concat(\"998ec3f7f7f7f1a340\",\"5e3c99b2abd2fdb863e66101\",\"5e3c99b2abd2f7f7f7fdb863e66101\",\"542788998ec3d8daebfee0b6f1a340b35806\",\"542788998ec3d8daebf7f7f7fee0b6f1a340b35806\",\"5427888073acb2abd2d8daebfee0b6fdb863e08214b35806\",\"5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b35806\",\"2d004b5427888073acb2abd2d8daebfee0b6fdb863e08214b358067f3b08\",\"2d004b5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b358067f3b08\").map(ka),ou=ua(Um),Vm=Array(3).concat(\"ef8a62f7f7f767a9cf\",",
                      "markdown": "`14d9221\",\"8e0152c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221276419\",\"8e0152c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221276419\").map(ka),\nnu=ua(Tm),Um=Array(3).concat(\"998ec3f7f7f7f1a340\",\"5e3c99b2abd2fdb863e66101\",\"5e3c99b2abd2f7f7f7fdb863e66101\",\"542788998ec3d8daebfee0b6f1a340b35806\",\"542788998ec3d8daebf7f7f7fee0b6f1a340b35806\",\"5427888073acb2abd2d8daebfee0b6fdb863e08214b35806\",\"5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b35806\",\"2d004b5427888073acb2abd2d8daebfee0b6fdb863e08214b358067f3b08\",\"2d004b5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b358067f3b08\").map(ka),ou=ua(Um),Vm=Array(3).concat(\"ef8a62f7f7f767a9cf\",`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 792,
                  "startColumn": 443,
                  "endLine": 792,
                  "endColumn": 511,
                  "snippet": {
                    "text": "e1864dac26\",\"d01c8bf1b6daf7f7f7b8e1864dac26\",\"c51b7de9a3c9fde0efe6f5d0a1d76a4d9221\",\"c51b7de9a3c9fde0eff7f7f7e6f5d0a1d76a4d9221\",\"c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221\",\"c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221\",\"8e0152c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221276419\",\"8e0152c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221276419\").map(ka),\nnu=ua(Tm),Um=Array(3).concat(\"998ec3f7f7f7f1a340\",\"5e3c99b2abd2fdb863e66101\",\"5e3c99b2abd2f7f7f7fdb863e66101\",\"542788998ec3d8daebfee0b6f1a340b35806\",\"542788998ec3d8daebf7f7f7fee0b6f1a340b35806\",\"5427888073acb2abd2d8daebfee0b6fdb863e08214b35806\",\"5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e",
                    "rendered": {
                      "text": "e1864dac26\",\"d01c8bf1b6daf7f7f7b8e1864dac26\",\"c51b7de9a3c9fde0efe6f5d0a1d76a4d9221\",\"c51b7de9a3c9fde0eff7f7f7e6f5d0a1d76a4d9221\",\"c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221\",\"c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221\",\"8e0152c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221276419\",\"8e0152c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221276419\").map(ka),\nnu=ua(Tm),Um=Array(3).concat(\"998ec3f7f7f7f1a340\",\"5e3c99b2abd2fdb863e66101\",\"5e3c99b2abd2f7f7f7fdb863e66101\",\"542788998ec3d8daebfee0b6f1a340b35806\",\"542788998ec3d8daebf7f7f7fee0b6f1a340b35806\",\"5427888073acb2abd2d8daebfee0b6fdb863e08214b35806\",\"5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e",
                      "markdown": "`e1864dac26\",\"d01c8bf1b6daf7f7f7b8e1864dac26\",\"c51b7de9a3c9fde0efe6f5d0a1d76a4d9221\",\"c51b7de9a3c9fde0eff7f7f7e6f5d0a1d76a4d9221\",\"c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221\",\"c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221\",\"8e0152c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221276419\",\"8e0152c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221276419\").map(ka),\nnu=ua(Tm),Um=Array(3).concat(\"998ec3f7f7f7f1a340\",\"5e3c99b2abd2fdb863e66101\",\"5e3c99b2abd2f7f7f7fdb863e66101\",\"542788998ec3d8daebfee0b6f1a340b35806\",\"542788998ec3d8daebf7f7f7fee0b6f1a340b35806\",\"5427888073acb2abd2d8daebfee0b6fdb863e08214b35806\",\"5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 792,
                  "startColumn": 380,
                  "endLine": 792,
                  "endColumn": 442,
                  "snippet": {
                    "text": "=ua(Sm),Tm=Array(3).concat(\"e9a3c9f7f7f7a1d76a\",\"d01c8bf1b6dab8e1864dac26\",\"d01c8bf1b6daf7f7f7b8e1864dac26\",\"c51b7de9a3c9fde0efe6f5d0a1d76a4d9221\",\"c51b7de9a3c9fde0eff7f7f7e6f5d0a1d76a4d9221\",\"c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221\",\"c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221\",\"8e0152c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221276419\",\"8e0152c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221276419\").map(ka),\nnu=ua(Tm),Um=Array(3).concat(\"998ec3f7f7f7f1a340\",\"5e3c99b2abd2fdb863e66101\",\"5e3c99b2abd2f7f7f7fdb863e66101\",\"542788998ec3d8daebfee0b6f1a340b35806\",\"542788998ec3d8daebf7f7f7fee0b6f1a340b35806\",\"5427888073acb2abd2d8daebf",
                    "rendered": {
                      "text": "=ua(Sm),Tm=Array(3).concat(\"e9a3c9f7f7f7a1d76a\",\"d01c8bf1b6dab8e1864dac26\",\"d01c8bf1b6daf7f7f7b8e1864dac26\",\"c51b7de9a3c9fde0efe6f5d0a1d76a4d9221\",\"c51b7de9a3c9fde0eff7f7f7e6f5d0a1d76a4d9221\",\"c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221\",\"c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221\",\"8e0152c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221276419\",\"8e0152c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221276419\").map(ka),\nnu=ua(Tm),Um=Array(3).concat(\"998ec3f7f7f7f1a340\",\"5e3c99b2abd2fdb863e66101\",\"5e3c99b2abd2f7f7f7fdb863e66101\",\"542788998ec3d8daebfee0b6f1a340b35806\",\"542788998ec3d8daebf7f7f7fee0b6f1a340b35806\",\"5427888073acb2abd2d8daebf",
                      "markdown": "`=ua(Sm),Tm=Array(3).concat(\"e9a3c9f7f7f7a1d76a\",\"d01c8bf1b6dab8e1864dac26\",\"d01c8bf1b6daf7f7f7b8e1864dac26\",\"c51b7de9a3c9fde0efe6f5d0a1d76a4d9221\",\"c51b7de9a3c9fde0eff7f7f7e6f5d0a1d76a4d9221\",\"c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221\",\"c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221\",\"8e0152c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221276419\",\"8e0152c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221276419\").map(ka),\nnu=ua(Tm),Um=Array(3).concat(\"998ec3f7f7f7f1a340\",\"5e3c99b2abd2fdb863e66101\",\"5e3c99b2abd2f7f7f7fdb863e66101\",\"542788998ec3d8daebfee0b6f1a340b35806\",\"542788998ec3d8daebf7f7f7fee0b6f1a340b35806\",\"5427888073acb2abd2d8daebf`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 792,
                  "startColumn": 323,
                  "endLine": 792,
                  "endColumn": 379,
                  "snippet": {
                    "text": "cfe7d4e8f7f7f7d9f0d3a6dba05aae611b783700441b\").map(ka),mu=ua(Sm),Tm=Array(3).concat(\"e9a3c9f7f7f7a1d76a\",\"d01c8bf1b6dab8e1864dac26\",\"d01c8bf1b6daf7f7f7b8e1864dac26\",\"c51b7de9a3c9fde0efe6f5d0a1d76a4d9221\",\"c51b7de9a3c9fde0eff7f7f7e6f5d0a1d76a4d9221\",\"c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221\",\"c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221\",\"8e0152c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221276419\",\"8e0152c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221276419\").map(ka),\nnu=ua(Tm),Um=Array(3).concat(\"998ec3f7f7f7f1a340\",\"5e3c99b2abd2fdb863e66101\",\"5e3c99b2abd2f7f7f7fdb863e66101\",\"542788998ec3d8daebfee0b6f1a340b35806\",\"5427889",
                    "rendered": {
                      "text": "cfe7d4e8f7f7f7d9f0d3a6dba05aae611b783700441b\").map(ka),mu=ua(Sm),Tm=Array(3).concat(\"e9a3c9f7f7f7a1d76a\",\"d01c8bf1b6dab8e1864dac26\",\"d01c8bf1b6daf7f7f7b8e1864dac26\",\"c51b7de9a3c9fde0efe6f5d0a1d76a4d9221\",\"c51b7de9a3c9fde0eff7f7f7e6f5d0a1d76a4d9221\",\"c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221\",\"c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221\",\"8e0152c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221276419\",\"8e0152c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221276419\").map(ka),\nnu=ua(Tm),Um=Array(3).concat(\"998ec3f7f7f7f1a340\",\"5e3c99b2abd2fdb863e66101\",\"5e3c99b2abd2f7f7f7fdb863e66101\",\"542788998ec3d8daebfee0b6f1a340b35806\",\"5427889",
                      "markdown": "`cfe7d4e8f7f7f7d9f0d3a6dba05aae611b783700441b\").map(ka),mu=ua(Sm),Tm=Array(3).concat(\"e9a3c9f7f7f7a1d76a\",\"d01c8bf1b6dab8e1864dac26\",\"d01c8bf1b6daf7f7f7b8e1864dac26\",\"c51b7de9a3c9fde0efe6f5d0a1d76a4d9221\",\"c51b7de9a3c9fde0eff7f7f7e6f5d0a1d76a4d9221\",\"c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221\",\"c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221\",\"8e0152c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221276419\",\"8e0152c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221276419\").map(ka),\nnu=ua(Tm),Um=Array(3).concat(\"998ec3f7f7f7f1a340\",\"5e3c99b2abd2fdb863e66101\",\"5e3c99b2abd2f7f7f7fdb863e66101\",\"542788998ec3d8daebfee0b6f1a340b35806\",\"5427889`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 792,
                  "startColumn": 272,
                  "endLine": 792,
                  "endColumn": 322,
                  "snippet": {
                    "text": "3a6dba05aae611b783700441b\",\n\"40004b762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b783700441b\").map(ka),mu=ua(Sm),Tm=Array(3).concat(\"e9a3c9f7f7f7a1d76a\",\"d01c8bf1b6dab8e1864dac26\",\"d01c8bf1b6daf7f7f7b8e1864dac26\",\"c51b7de9a3c9fde0efe6f5d0a1d76a4d9221\",\"c51b7de9a3c9fde0eff7f7f7e6f5d0a1d76a4d9221\",\"c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221\",\"c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221\",\"8e0152c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221276419\",\"8e0152c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221276419\").map(ka),\nnu=ua(Tm),Um=Array(3).concat(\"998ec3f7f7f7f1a340\",\"5e3c99b2abd2fdb863e66101\",\"5e3c99b2abd2f7f7f7fdb8",
                    "rendered": {
                      "text": "3a6dba05aae611b783700441b\",\n\"40004b762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b783700441b\").map(ka),mu=ua(Sm),Tm=Array(3).concat(\"e9a3c9f7f7f7a1d76a\",\"d01c8bf1b6dab8e1864dac26\",\"d01c8bf1b6daf7f7f7b8e1864dac26\",\"c51b7de9a3c9fde0efe6f5d0a1d76a4d9221\",\"c51b7de9a3c9fde0eff7f7f7e6f5d0a1d76a4d9221\",\"c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221\",\"c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221\",\"8e0152c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221276419\",\"8e0152c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221276419\").map(ka),\nnu=ua(Tm),Um=Array(3).concat(\"998ec3f7f7f7f1a340\",\"5e3c99b2abd2fdb863e66101\",\"5e3c99b2abd2f7f7f7fdb8",
                      "markdown": "`3a6dba05aae611b783700441b\",\n\"40004b762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b783700441b\").map(ka),mu=ua(Sm),Tm=Array(3).concat(\"e9a3c9f7f7f7a1d76a\",\"d01c8bf1b6dab8e1864dac26\",\"d01c8bf1b6daf7f7f7b8e1864dac26\",\"c51b7de9a3c9fde0efe6f5d0a1d76a4d9221\",\"c51b7de9a3c9fde0eff7f7f7e6f5d0a1d76a4d9221\",\"c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221\",\"c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221\",\"8e0152c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221276419\",\"8e0152c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221276419\").map(ka),\nnu=ua(Tm),Um=Array(3).concat(\"998ec3f7f7f7f1a340\",\"5e3c99b2abd2fdb863e66101\",\"5e3c99b2abd2f7f7f7fdb8`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 792,
                  "startColumn": 227,
                  "endLine": 792,
                  "endColumn": 271,
                  "snippet": {
                    "text": "11b7837\",\"40004b762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b783700441b\",\n\"40004b762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b783700441b\").map(ka),mu=ua(Sm),Tm=Array(3).concat(\"e9a3c9f7f7f7a1d76a\",\"d01c8bf1b6dab8e1864dac26\",\"d01c8bf1b6daf7f7f7b8e1864dac26\",\"c51b7de9a3c9fde0efe6f5d0a1d76a4d9221\",\"c51b7de9a3c9fde0eff7f7f7e6f5d0a1d76a4d9221\",\"c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221\",\"c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221\",\"8e0152c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221276419\",\"8e0152c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221276419\").map(ka),\nnu=ua(Tm),Um=Array(3).concat(\"998ec3f7f7f7f1a340\"",
                    "rendered": {
                      "text": "11b7837\",\"40004b762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b783700441b\",\n\"40004b762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b783700441b\").map(ka),mu=ua(Sm),Tm=Array(3).concat(\"e9a3c9f7f7f7a1d76a\",\"d01c8bf1b6dab8e1864dac26\",\"d01c8bf1b6daf7f7f7b8e1864dac26\",\"c51b7de9a3c9fde0efe6f5d0a1d76a4d9221\",\"c51b7de9a3c9fde0eff7f7f7e6f5d0a1d76a4d9221\",\"c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221\",\"c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221\",\"8e0152c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221276419\",\"8e0152c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221276419\").map(ka),\nnu=ua(Tm),Um=Array(3).concat(\"998ec3f7f7f7f1a340\"",
                      "markdown": "`11b7837\",\"40004b762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b783700441b\",\n\"40004b762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b783700441b\").map(ka),mu=ua(Sm),Tm=Array(3).concat(\"e9a3c9f7f7f7a1d76a\",\"d01c8bf1b6dab8e1864dac26\",\"d01c8bf1b6daf7f7f7b8e1864dac26\",\"c51b7de9a3c9fde0efe6f5d0a1d76a4d9221\",\"c51b7de9a3c9fde0eff7f7f7e6f5d0a1d76a4d9221\",\"c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221\",\"c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221\",\"8e0152c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221276419\",\"8e0152c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221276419\").map(ka),\nnu=ua(Tm),Um=Array(3).concat(\"998ec3f7f7f7f1a340\"`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 792,
                  "endLine": 792,
                  "endColumn": 68,
                  "snippet": {
                    "text": "ba0008837\",\"7b3294c2a5cff7f7f7a6dba0008837\",\"762a83af8dc3e7d4e8d9f0d37fbf7b1b7837\",\"762a83af8dc3e7d4e8f7f7f7d9f0d37fbf7b1b7837\",\"762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b7837\",\"762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b7837\",\"40004b762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b783700441b\",\n\"40004b762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b783700441b\").map(ka),mu=ua(Sm),Tm=Array(3).concat(\"e9a3c9f7f7f7a1d76a\",\"d01c8bf1b6dab8e1864dac26\",\"d01c8bf1b6daf7f7f7b8e1864dac26\",\"c51b7de9a3c9fde0efe6f5d0a1d76a4d9221\",\"c51b7de9a3c9fde0eff7f7f7e6f5d0a1d76a4d9221\",\"c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221\",\"c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867f",
                    "rendered": {
                      "text": "ba0008837\",\"7b3294c2a5cff7f7f7a6dba0008837\",\"762a83af8dc3e7d4e8d9f0d37fbf7b1b7837\",\"762a83af8dc3e7d4e8f7f7f7d9f0d37fbf7b1b7837\",\"762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b7837\",\"762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b7837\",\"40004b762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b783700441b\",\n\"40004b762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b783700441b\").map(ka),mu=ua(Sm),Tm=Array(3).concat(\"e9a3c9f7f7f7a1d76a\",\"d01c8bf1b6dab8e1864dac26\",\"d01c8bf1b6daf7f7f7b8e1864dac26\",\"c51b7de9a3c9fde0efe6f5d0a1d76a4d9221\",\"c51b7de9a3c9fde0eff7f7f7e6f5d0a1d76a4d9221\",\"c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221\",\"c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867f",
                      "markdown": "`ba0008837\",\"7b3294c2a5cff7f7f7a6dba0008837\",\"762a83af8dc3e7d4e8d9f0d37fbf7b1b7837\",\"762a83af8dc3e7d4e8f7f7f7d9f0d37fbf7b1b7837\",\"762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b7837\",\"762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b7837\",\"40004b762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b783700441b\",\n\"40004b762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b783700441b\").map(ka),mu=ua(Sm),Tm=Array(3).concat(\"e9a3c9f7f7f7a1d76a\",\"d01c8bf1b6dab8e1864dac26\",\"d01c8bf1b6daf7f7f7b8e1864dac26\",\"c51b7de9a3c9fde0efe6f5d0a1d76a4d9221\",\"c51b7de9a3c9fde0eff7f7f7e6f5d0a1d76a4d9221\",\"c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221\",\"c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867f`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 791,
                  "startColumn": 443,
                  "endLine": 791,
                  "endColumn": 505,
                  "snippet": {
                    "text": "=ua(Rm),Sm=Array(3).concat(\"af8dc3f7f7f77fbf7b\",\"7b3294c2a5cfa6dba0008837\",\"7b3294c2a5cff7f7f7a6dba0008837\",\"762a83af8dc3e7d4e8d9f0d37fbf7b1b7837\",\"762a83af8dc3e7d4e8f7f7f7d9f0d37fbf7b1b7837\",\"762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b7837\",\"762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b7837\",\"40004b762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b783700441b\",\n\"40004b762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b783700441b\").map(ka),mu=ua(Sm),Tm=Array(3).concat(\"e9a3c9f7f7f7a1d76a\",\"d01c8bf1b6dab8e1864dac26\",\"d01c8bf1b6daf7f7f7b8e1864dac26\",\"c51b7de9a3c9fde0efe6f5d0a1d76a4d9221\",\"c51b7de9a3c9fde0eff7f7f7e6f5d0a1d76a4d9221\",\"c51b7dde77aef1b6dafde0efe",
                    "rendered": {
                      "text": "=ua(Rm),Sm=Array(3).concat(\"af8dc3f7f7f77fbf7b\",\"7b3294c2a5cfa6dba0008837\",\"7b3294c2a5cff7f7f7a6dba0008837\",\"762a83af8dc3e7d4e8d9f0d37fbf7b1b7837\",\"762a83af8dc3e7d4e8f7f7f7d9f0d37fbf7b1b7837\",\"762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b7837\",\"762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b7837\",\"40004b762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b783700441b\",\n\"40004b762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b783700441b\").map(ka),mu=ua(Sm),Tm=Array(3).concat(\"e9a3c9f7f7f7a1d76a\",\"d01c8bf1b6dab8e1864dac26\",\"d01c8bf1b6daf7f7f7b8e1864dac26\",\"c51b7de9a3c9fde0efe6f5d0a1d76a4d9221\",\"c51b7de9a3c9fde0eff7f7f7e6f5d0a1d76a4d9221\",\"c51b7dde77aef1b6dafde0efe",
                      "markdown": "`=ua(Rm),Sm=Array(3).concat(\"af8dc3f7f7f77fbf7b\",\"7b3294c2a5cfa6dba0008837\",\"7b3294c2a5cff7f7f7a6dba0008837\",\"762a83af8dc3e7d4e8d9f0d37fbf7b1b7837\",\"762a83af8dc3e7d4e8f7f7f7d9f0d37fbf7b1b7837\",\"762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b7837\",\"762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b7837\",\"40004b762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b783700441b\",\n\"40004b762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b783700441b\").map(ka),mu=ua(Sm),Tm=Array(3).concat(\"e9a3c9f7f7f7a1d76a\",\"d01c8bf1b6dab8e1864dac26\",\"d01c8bf1b6daf7f7f7b8e1864dac26\",\"c51b7de9a3c9fde0efe6f5d0a1d76a4d9221\",\"c51b7de9a3c9fde0eff7f7f7e6f5d0a1d76a4d9221\",\"c51b7dde77aef1b6dafde0efe`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 791,
                  "startColumn": 386,
                  "endLine": 791,
                  "endColumn": 442,
                  "snippet": {
                    "text": "7df6e8c3f5f5f5c7eae580cdc135978f01665e003c30\").map(ka),lu=ua(Rm),Sm=Array(3).concat(\"af8dc3f7f7f77fbf7b\",\"7b3294c2a5cfa6dba0008837\",\"7b3294c2a5cff7f7f7a6dba0008837\",\"762a83af8dc3e7d4e8d9f0d37fbf7b1b7837\",\"762a83af8dc3e7d4e8f7f7f7d9f0d37fbf7b1b7837\",\"762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b7837\",\"762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b7837\",\"40004b762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b783700441b\",\n\"40004b762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b783700441b\").map(ka),mu=ua(Sm),Tm=Array(3).concat(\"e9a3c9f7f7f7a1d76a\",\"d01c8bf1b6dab8e1864dac26\",\"d01c8bf1b6daf7f7f7b8e1864dac26\",\"c51b7de9a3c9fde0efe6f5d0a1d76a4d9221\",\"c51b7de",
                    "rendered": {
                      "text": "7df6e8c3f5f5f5c7eae580cdc135978f01665e003c30\").map(ka),lu=ua(Rm),Sm=Array(3).concat(\"af8dc3f7f7f77fbf7b\",\"7b3294c2a5cfa6dba0008837\",\"7b3294c2a5cff7f7f7a6dba0008837\",\"762a83af8dc3e7d4e8d9f0d37fbf7b1b7837\",\"762a83af8dc3e7d4e8f7f7f7d9f0d37fbf7b1b7837\",\"762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b7837\",\"762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b7837\",\"40004b762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b783700441b\",\n\"40004b762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b783700441b\").map(ka),mu=ua(Sm),Tm=Array(3).concat(\"e9a3c9f7f7f7a1d76a\",\"d01c8bf1b6dab8e1864dac26\",\"d01c8bf1b6daf7f7f7b8e1864dac26\",\"c51b7de9a3c9fde0efe6f5d0a1d76a4d9221\",\"c51b7de",
                      "markdown": "`7df6e8c3f5f5f5c7eae580cdc135978f01665e003c30\").map(ka),lu=ua(Rm),Sm=Array(3).concat(\"af8dc3f7f7f77fbf7b\",\"7b3294c2a5cfa6dba0008837\",\"7b3294c2a5cff7f7f7a6dba0008837\",\"762a83af8dc3e7d4e8d9f0d37fbf7b1b7837\",\"762a83af8dc3e7d4e8f7f7f7d9f0d37fbf7b1b7837\",\"762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b7837\",\"762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b7837\",\"40004b762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b783700441b\",\n\"40004b762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b783700441b\").map(ka),mu=ua(Sm),Tm=Array(3).concat(\"e9a3c9f7f7f7a1d76a\",\"d01c8bf1b6dab8e1864dac26\",\"d01c8bf1b6daf7f7f7b8e1864dac26\",\"c51b7de9a3c9fde0efe6f5d0a1d76a4d9221\",\"c51b7de`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 791,
                  "startColumn": 335,
                  "endLine": 791,
                  "endColumn": 385,
                  "snippet": {
                    "text": "e580cdc135978f01665e003c30\",\"5430058c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e003c30\").map(ka),lu=ua(Rm),Sm=Array(3).concat(\"af8dc3f7f7f77fbf7b\",\"7b3294c2a5cfa6dba0008837\",\"7b3294c2a5cff7f7f7a6dba0008837\",\"762a83af8dc3e7d4e8d9f0d37fbf7b1b7837\",\"762a83af8dc3e7d4e8f7f7f7d9f0d37fbf7b1b7837\",\"762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b7837\",\"762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b7837\",\"40004b762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b783700441b\",\n\"40004b762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b783700441b\").map(ka),mu=ua(Sm),Tm=Array(3).concat(\"e9a3c9f7f7f7a1d76a\",\"d01c8bf1b6dab8e1864dac26\",\"d01c8bf1b6daf7f7f7b8e1",
                    "rendered": {
                      "text": "e580cdc135978f01665e003c30\",\"5430058c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e003c30\").map(ka),lu=ua(Rm),Sm=Array(3).concat(\"af8dc3f7f7f77fbf7b\",\"7b3294c2a5cfa6dba0008837\",\"7b3294c2a5cff7f7f7a6dba0008837\",\"762a83af8dc3e7d4e8d9f0d37fbf7b1b7837\",\"762a83af8dc3e7d4e8f7f7f7d9f0d37fbf7b1b7837\",\"762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b7837\",\"762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b7837\",\"40004b762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b783700441b\",\n\"40004b762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b783700441b\").map(ka),mu=ua(Sm),Tm=Array(3).concat(\"e9a3c9f7f7f7a1d76a\",\"d01c8bf1b6dab8e1864dac26\",\"d01c8bf1b6daf7f7f7b8e1",
                      "markdown": "`e580cdc135978f01665e003c30\",\"5430058c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e003c30\").map(ka),lu=ua(Rm),Sm=Array(3).concat(\"af8dc3f7f7f77fbf7b\",\"7b3294c2a5cfa6dba0008837\",\"7b3294c2a5cff7f7f7a6dba0008837\",\"762a83af8dc3e7d4e8d9f0d37fbf7b1b7837\",\"762a83af8dc3e7d4e8f7f7f7d9f0d37fbf7b1b7837\",\"762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b7837\",\"762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b7837\",\"40004b762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b783700441b\",\n\"40004b762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b783700441b\").map(ka),mu=ua(Sm),Tm=Array(3).concat(\"e9a3c9f7f7f7a1d76a\",\"d01c8bf1b6dab8e1864dac26\",\"d01c8bf1b6daf7f7f7b8e1`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 791,
                  "startColumn": 290,
                  "endLine": 791,
                  "endColumn": 334,
                  "snippet": {
                    "text": "f01665e\",\n\"5430058c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e003c30\",\"5430058c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e003c30\").map(ka),lu=ua(Rm),Sm=Array(3).concat(\"af8dc3f7f7f77fbf7b\",\"7b3294c2a5cfa6dba0008837\",\"7b3294c2a5cff7f7f7a6dba0008837\",\"762a83af8dc3e7d4e8d9f0d37fbf7b1b7837\",\"762a83af8dc3e7d4e8f7f7f7d9f0d37fbf7b1b7837\",\"762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b7837\",\"762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b7837\",\"40004b762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b783700441b\",\n\"40004b762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b783700441b\").map(ka),mu=ua(Sm),Tm=Array(3).concat(\"e9a3c9f7f7f7a1d76a\"",
                    "rendered": {
                      "text": "f01665e\",\n\"5430058c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e003c30\",\"5430058c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e003c30\").map(ka),lu=ua(Rm),Sm=Array(3).concat(\"af8dc3f7f7f77fbf7b\",\"7b3294c2a5cfa6dba0008837\",\"7b3294c2a5cff7f7f7a6dba0008837\",\"762a83af8dc3e7d4e8d9f0d37fbf7b1b7837\",\"762a83af8dc3e7d4e8f7f7f7d9f0d37fbf7b1b7837\",\"762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b7837\",\"762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b7837\",\"40004b762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b783700441b\",\n\"40004b762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b783700441b\").map(ka),mu=ua(Sm),Tm=Array(3).concat(\"e9a3c9f7f7f7a1d76a\"",
                      "markdown": "`f01665e\",\n\"5430058c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e003c30\",\"5430058c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e003c30\").map(ka),lu=ua(Rm),Sm=Array(3).concat(\"af8dc3f7f7f77fbf7b\",\"7b3294c2a5cfa6dba0008837\",\"7b3294c2a5cff7f7f7a6dba0008837\",\"762a83af8dc3e7d4e8d9f0d37fbf7b1b7837\",\"762a83af8dc3e7d4e8f7f7f7d9f0d37fbf7b1b7837\",\"762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b7837\",\"762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b7837\",\"40004b762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b783700441b\",\n\"40004b762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b783700441b\").map(ka),mu=ua(Sm),Tm=Array(3).concat(\"e9a3c9f7f7f7a1d76a\"`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 791,
                  "startColumn": 63,
                  "endLine": 791,
                  "endColumn": 131,
                  "snippet": {
                    "text": "dc1018571\",\"a6611adfc27df5f5f580cdc1018571\",\"8c510ad8b365f6e8c3c7eae55ab4ac01665e\",\"8c510ad8b365f6e8c3f5f5f5c7eae55ab4ac01665e\",\"8c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e\",\"8c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e\",\n\"5430058c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e003c30\",\"5430058c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e003c30\").map(ka),lu=ua(Rm),Sm=Array(3).concat(\"af8dc3f7f7f77fbf7b\",\"7b3294c2a5cfa6dba0008837\",\"7b3294c2a5cff7f7f7a6dba0008837\",\"762a83af8dc3e7d4e8d9f0d37fbf7b1b7837\",\"762a83af8dc3e7d4e8f7f7f7d9f0d37fbf7b1b7837\",\"762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b7837\",\"762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05a",
                    "rendered": {
                      "text": "dc1018571\",\"a6611adfc27df5f5f580cdc1018571\",\"8c510ad8b365f6e8c3c7eae55ab4ac01665e\",\"8c510ad8b365f6e8c3f5f5f5c7eae55ab4ac01665e\",\"8c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e\",\"8c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e\",\n\"5430058c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e003c30\",\"5430058c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e003c30\").map(ka),lu=ua(Rm),Sm=Array(3).concat(\"af8dc3f7f7f77fbf7b\",\"7b3294c2a5cfa6dba0008837\",\"7b3294c2a5cff7f7f7a6dba0008837\",\"762a83af8dc3e7d4e8d9f0d37fbf7b1b7837\",\"762a83af8dc3e7d4e8f7f7f7d9f0d37fbf7b1b7837\",\"762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b7837\",\"762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05a",
                      "markdown": "`dc1018571\",\"a6611adfc27df5f5f580cdc1018571\",\"8c510ad8b365f6e8c3c7eae55ab4ac01665e\",\"8c510ad8b365f6e8c3f5f5f5c7eae55ab4ac01665e\",\"8c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e\",\"8c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e\",\n\"5430058c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e003c30\",\"5430058c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e003c30\").map(ka),lu=ua(Rm),Sm=Array(3).concat(\"af8dc3f7f7f77fbf7b\",\"7b3294c2a5cfa6dba0008837\",\"7b3294c2a5cff7f7f7a6dba0008837\",\"762a83af8dc3e7d4e8d9f0d37fbf7b1b7837\",\"762a83af8dc3e7d4e8f7f7f7d9f0d37fbf7b1b7837\",\"762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b7837\",\"762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05a`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 791,
                  "endLine": 791,
                  "endColumn": 62,
                  "snippet": {
                    "text": "ed6f\"),Rm=Array(3).concat(\"d8b365f5f5f55ab4ac\",\"a6611adfc27d80cdc1018571\",\"a6611adfc27df5f5f580cdc1018571\",\"8c510ad8b365f6e8c3c7eae55ab4ac01665e\",\"8c510ad8b365f6e8c3f5f5f5c7eae55ab4ac01665e\",\"8c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e\",\"8c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e\",\n\"5430058c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e003c30\",\"5430058c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e003c30\").map(ka),lu=ua(Rm),Sm=Array(3).concat(\"af8dc3f7f7f77fbf7b\",\"7b3294c2a5cfa6dba0008837\",\"7b3294c2a5cff7f7f7a6dba0008837\",\"762a83af8dc3e7d4e8d9f0d37fbf7b1b7837\",\"762a83af8dc3e7d4e8f7f7f7d9f0d37fbf7b1b7837\",\"762a839970abc2a5cfe7d4e8d9",
                    "rendered": {
                      "text": "ed6f\"),Rm=Array(3).concat(\"d8b365f5f5f55ab4ac\",\"a6611adfc27d80cdc1018571\",\"a6611adfc27df5f5f580cdc1018571\",\"8c510ad8b365f6e8c3c7eae55ab4ac01665e\",\"8c510ad8b365f6e8c3f5f5f5c7eae55ab4ac01665e\",\"8c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e\",\"8c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e\",\n\"5430058c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e003c30\",\"5430058c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e003c30\").map(ka),lu=ua(Rm),Sm=Array(3).concat(\"af8dc3f7f7f77fbf7b\",\"7b3294c2a5cfa6dba0008837\",\"7b3294c2a5cff7f7f7a6dba0008837\",\"762a83af8dc3e7d4e8d9f0d37fbf7b1b7837\",\"762a83af8dc3e7d4e8f7f7f7d9f0d37fbf7b1b7837\",\"762a839970abc2a5cfe7d4e8d9",
                      "markdown": "`ed6f\"),Rm=Array(3).concat(\"d8b365f5f5f55ab4ac\",\"a6611adfc27d80cdc1018571\",\"a6611adfc27df5f5f580cdc1018571\",\"8c510ad8b365f6e8c3c7eae55ab4ac01665e\",\"8c510ad8b365f6e8c3f5f5f5c7eae55ab4ac01665e\",\"8c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e\",\"8c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e\",\n\"5430058c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e003c30\",\"5430058c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e003c30\").map(ka),lu=ua(Rm),Sm=Array(3).concat(\"af8dc3f7f7f77fbf7b\",\"7b3294c2a5cfa6dba0008837\",\"7b3294c2a5cff7f7f7a6dba0008837\",\"762a83af8dc3e7d4e8d9f0d37fbf7b1b7837\",\"762a83af8dc3e7d4e8f7f7f7d9f0d37fbf7b1b7837\",\"762a839970abc2a5cfe7d4e8d9`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 790,
                  "startColumn": 497,
                  "endLine": 790,
                  "endColumn": 553,
                  "snippet": {
                    "text": "b3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f\"),Rm=Array(3).concat(\"d8b365f5f5f55ab4ac\",\"a6611adfc27d80cdc1018571\",\"a6611adfc27df5f5f580cdc1018571\",\"8c510ad8b365f6e8c3c7eae55ab4ac01665e\",\"8c510ad8b365f6e8c3f5f5f5c7eae55ab4ac01665e\",\"8c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e\",\"8c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e\",\n\"5430058c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e003c30\",\"5430058c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e003c30\").map(ka),lu=ua(Rm),Sm=Array(3).concat(\"af8dc3f7f7f77fbf7b\",\"7b3294c2a5cfa6dba0008837\",\"7b3294c2a5cff7f7f7a6dba0008837\",\"762a83af8dc3e7d4e8d9f0d37fbf7b1b7837\",\"762a83a",
                    "rendered": {
                      "text": "b3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f\"),Rm=Array(3).concat(\"d8b365f5f5f55ab4ac\",\"a6611adfc27d80cdc1018571\",\"a6611adfc27df5f5f580cdc1018571\",\"8c510ad8b365f6e8c3c7eae55ab4ac01665e\",\"8c510ad8b365f6e8c3f5f5f5c7eae55ab4ac01665e\",\"8c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e\",\"8c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e\",\n\"5430058c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e003c30\",\"5430058c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e003c30\").map(ka),lu=ua(Rm),Sm=Array(3).concat(\"af8dc3f7f7f77fbf7b\",\"7b3294c2a5cfa6dba0008837\",\"7b3294c2a5cff7f7f7a6dba0008837\",\"762a83af8dc3e7d4e8d9f0d37fbf7b1b7837\",\"762a83a",
                      "markdown": "`b3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f\"),Rm=Array(3).concat(\"d8b365f5f5f55ab4ac\",\"a6611adfc27d80cdc1018571\",\"a6611adfc27df5f5f580cdc1018571\",\"8c510ad8b365f6e8c3c7eae55ab4ac01665e\",\"8c510ad8b365f6e8c3f5f5f5c7eae55ab4ac01665e\",\"8c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e\",\"8c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e\",\n\"5430058c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e003c30\",\"5430058c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e003c30\").map(ka),lu=ua(Rm),Sm=Array(3).concat(\"af8dc3f7f7f77fbf7b\",\"7b3294c2a5cfa6dba0008837\",\"7b3294c2a5cff7f7f7a6dba0008837\",\"762a83af8dc3e7d4e8d9f0d37fbf7b1b7837\",\"762a83a`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 790,
                  "startColumn": 446,
                  "endLine": 790,
                  "endColumn": 496,
                  "snippet": {
                    "text": "be78ac3a6d854ffd92fe5c494b3b3b3\"),ku=ka(\"8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f\"),Rm=Array(3).concat(\"d8b365f5f5f55ab4ac\",\"a6611adfc27d80cdc1018571\",\"a6611adfc27df5f5f580cdc1018571\",\"8c510ad8b365f6e8c3c7eae55ab4ac01665e\",\"8c510ad8b365f6e8c3f5f5f5c7eae55ab4ac01665e\",\"8c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e\",\"8c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e\",\n\"5430058c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e003c30\",\"5430058c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e003c30\").map(ka),lu=ua(Rm),Sm=Array(3).concat(\"af8dc3f7f7f77fbf7b\",\"7b3294c2a5cfa6dba0008837\",\"7b3294c2a5cff7f7f7a6db",
                    "rendered": {
                      "text": "be78ac3a6d854ffd92fe5c494b3b3b3\"),ku=ka(\"8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f\"),Rm=Array(3).concat(\"d8b365f5f5f55ab4ac\",\"a6611adfc27d80cdc1018571\",\"a6611adfc27df5f5f580cdc1018571\",\"8c510ad8b365f6e8c3c7eae55ab4ac01665e\",\"8c510ad8b365f6e8c3f5f5f5c7eae55ab4ac01665e\",\"8c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e\",\"8c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e\",\n\"5430058c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e003c30\",\"5430058c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e003c30\").map(ka),lu=ua(Rm),Sm=Array(3).concat(\"af8dc3f7f7f77fbf7b\",\"7b3294c2a5cfa6dba0008837\",\"7b3294c2a5cff7f7f7a6db",
                      "markdown": "`be78ac3a6d854ffd92fe5c494b3b3b3\"),ku=ka(\"8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f\"),Rm=Array(3).concat(\"d8b365f5f5f55ab4ac\",\"a6611adfc27d80cdc1018571\",\"a6611adfc27df5f5f580cdc1018571\",\"8c510ad8b365f6e8c3c7eae55ab4ac01665e\",\"8c510ad8b365f6e8c3f5f5f5c7eae55ab4ac01665e\",\"8c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e\",\"8c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e\",\n\"5430058c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e003c30\",\"5430058c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e003c30\").map(ka),lu=ua(Rm),Sm=Array(3).concat(\"af8dc3f7f7f77fbf7b\",\"7b3294c2a5cfa6dba0008837\",\"7b3294c2a5cff7f7f7a6db`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 790,
                  "startColumn": 401,
                  "endLine": 790,
                  "endColumn": 445,
                  "snippet": {
                    "text": "a65628f781bf999999\"),ju=ka(\"66c2a5fc8d628da0cbe78ac3a6d854ffd92fe5c494b3b3b3\"),ku=ka(\"8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f\"),Rm=Array(3).concat(\"d8b365f5f5f55ab4ac\",\"a6611adfc27d80cdc1018571\",\"a6611adfc27df5f5f580cdc1018571\",\"8c510ad8b365f6e8c3c7eae55ab4ac01665e\",\"8c510ad8b365f6e8c3f5f5f5c7eae55ab4ac01665e\",\"8c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e\",\"8c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e\",\n\"5430058c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e003c30\",\"5430058c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e003c30\").map(ka),lu=ua(Rm),Sm=Array(3).concat(\"af8dc3f7f7f77fbf7b\"",
                    "rendered": {
                      "text": "a65628f781bf999999\"),ju=ka(\"66c2a5fc8d628da0cbe78ac3a6d854ffd92fe5c494b3b3b3\"),ku=ka(\"8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f\"),Rm=Array(3).concat(\"d8b365f5f5f55ab4ac\",\"a6611adfc27d80cdc1018571\",\"a6611adfc27df5f5f580cdc1018571\",\"8c510ad8b365f6e8c3c7eae55ab4ac01665e\",\"8c510ad8b365f6e8c3f5f5f5c7eae55ab4ac01665e\",\"8c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e\",\"8c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e\",\n\"5430058c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e003c30\",\"5430058c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e003c30\").map(ka),lu=ua(Rm),Sm=Array(3).concat(\"af8dc3f7f7f77fbf7b\"",
                      "markdown": "`a65628f781bf999999\"),ju=ka(\"66c2a5fc8d628da0cbe78ac3a6d854ffd92fe5c494b3b3b3\"),ku=ka(\"8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f\"),Rm=Array(3).concat(\"d8b365f5f5f55ab4ac\",\"a6611adfc27d80cdc1018571\",\"a6611adfc27df5f5f580cdc1018571\",\"8c510ad8b365f6e8c3c7eae55ab4ac01665e\",\"8c510ad8b365f6e8c3f5f5f5c7eae55ab4ac01665e\",\"8c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e\",\"8c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e\",\n\"5430058c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e003c30\",\"5430058c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e003c30\").map(ka),lu=ua(Rm),Sm=Array(3).concat(\"af8dc3f7f7f77fbf7b\"`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 790,
                  "startColumn": 186,
                  "endLine": 790,
                  "endColumn": 260,
                  "snippet": {
                    "text": "9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928\"),gu=ka(\"fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2\"),\nhu=ka(\"b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc\"),iu=ka(\"e41a1c377eb84daf4a984ea3ff7f00ffff33a65628f781bf999999\"),ju=ka(\"66c2a5fc8d628da0cbe78ac3a6d854ffd92fe5c494b3b3b3\"),ku=ka(\"8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f\"),Rm=Array(3).concat(\"d8b365f5f5f55ab4ac\",\"a6611adfc27d80cdc1018571\",\"a6611adfc27df5f5f580cdc1018571\",\"8c510ad8b365f6e8c3c7eae55ab4ac01665e\",\"8c510ad8b365f6e8c3f5f5f5c7eae55ab4ac01665e\",\"8c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e\",\"8c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e\",\n\"5430",
                    "rendered": {
                      "text": "9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928\"),gu=ka(\"fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2\"),\nhu=ka(\"b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc\"),iu=ka(\"e41a1c377eb84daf4a984ea3ff7f00ffff33a65628f781bf999999\"),ju=ka(\"66c2a5fc8d628da0cbe78ac3a6d854ffd92fe5c494b3b3b3\"),ku=ka(\"8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f\"),Rm=Array(3).concat(\"d8b365f5f5f55ab4ac\",\"a6611adfc27d80cdc1018571\",\"a6611adfc27df5f5f580cdc1018571\",\"8c510ad8b365f6e8c3c7eae55ab4ac01665e\",\"8c510ad8b365f6e8c3f5f5f5c7eae55ab4ac01665e\",\"8c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e\",\"8c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e\",\n\"5430",
                      "markdown": "`9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928\"),gu=ka(\"fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2\"),\nhu=ka(\"b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc\"),iu=ka(\"e41a1c377eb84daf4a984ea3ff7f00ffff33a65628f781bf999999\"),ju=ka(\"66c2a5fc8d628da0cbe78ac3a6d854ffd92fe5c494b3b3b3\"),ku=ka(\"8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f\"),Rm=Array(3).concat(\"d8b365f5f5f55ab4ac\",\"a6611adfc27d80cdc1018571\",\"a6611adfc27df5f5f580cdc1018571\",\"8c510ad8b365f6e8c3c7eae55ab4ac01665e\",\"8c510ad8b365f6e8c3f5f5f5c7eae55ab4ac01665e\",\"8c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e\",\"8c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e\",\n\"5430`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 790,
                  "startColumn": 128,
                  "endLine": 790,
                  "endColumn": 178,
                  "snippet": {
                    "text": "a61ee6ab02a6761d666666\"),fu=ka(\"a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928\"),gu=ka(\"fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2\"),\nhu=ka(\"b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc\"),iu=ka(\"e41a1c377eb84daf4a984ea3ff7f00ffff33a65628f781bf999999\"),ju=ka(\"66c2a5fc8d628da0cbe78ac3a6d854ffd92fe5c494b3b3b3\"),ku=ka(\"8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f\"),Rm=Array(3).concat(\"d8b365f5f5f55ab4ac\",\"a6611adfc27d80cdc1018571\",\"a6611adfc27df5f5f580cdc1018571\",\"8c510ad8b365f6e8c3c7eae55ab4ac01665e\",\"8c510ad8b365f6e8c3f5f5f5c7eae55ab4ac01665e\",\"8c510abf812ddfc27df6e8c3c7eae58",
                    "rendered": {
                      "text": "a61ee6ab02a6761d666666\"),fu=ka(\"a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928\"),gu=ka(\"fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2\"),\nhu=ka(\"b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc\"),iu=ka(\"e41a1c377eb84daf4a984ea3ff7f00ffff33a65628f781bf999999\"),ju=ka(\"66c2a5fc8d628da0cbe78ac3a6d854ffd92fe5c494b3b3b3\"),ku=ka(\"8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f\"),Rm=Array(3).concat(\"d8b365f5f5f55ab4ac\",\"a6611adfc27d80cdc1018571\",\"a6611adfc27df5f5f580cdc1018571\",\"8c510ad8b365f6e8c3c7eae55ab4ac01665e\",\"8c510ad8b365f6e8c3f5f5f5c7eae55ab4ac01665e\",\"8c510abf812ddfc27df6e8c3c7eae58",
                      "markdown": "`a61ee6ab02a6761d666666\"),fu=ka(\"a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928\"),gu=ka(\"fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2\"),\nhu=ka(\"b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc\"),iu=ka(\"e41a1c377eb84daf4a984ea3ff7f00ffff33a65628f781bf999999\"),ju=ka(\"66c2a5fc8d628da0cbe78ac3a6d854ffd92fe5c494b3b3b3\"),ku=ka(\"8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f\"),Rm=Array(3).concat(\"d8b365f5f5f55ab4ac\",\"a6611adfc27d80cdc1018571\",\"a6611adfc27df5f5f580cdc1018571\",\"8c510ad8b365f6e8c3c7eae55ab4ac01665e\",\"8c510ad8b365f6e8c3f5f5f5c7eae55ab4ac01665e\",\"8c510abf812ddfc27df6e8c3c7eae58`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 790,
                  "startColumn": 64,
                  "endLine": 790,
                  "endColumn": 120,
                  "snippet": {
                    "text": "ff99386cb0f0027fbf5b17666666\"),eu=ka(\"1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666\"),fu=ka(\"a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928\"),gu=ka(\"fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2\"),\nhu=ka(\"b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc\"),iu=ka(\"e41a1c377eb84daf4a984ea3ff7f00ffff33a65628f781bf999999\"),ju=ka(\"66c2a5fc8d628da0cbe78ac3a6d854ffd92fe5c494b3b3b3\"),ku=ka(\"8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f\"),Rm=Array(3).concat(\"d8b365f5f5f55ab4ac\",\"a6611adfc27d80cdc1018571\",\"a6611adfc27df5f5f580cdc1018571\",\"8c510ad8b365f6e8c3c7eae55ab4ac01665e\",\"8c510ad8b365f6e8c3",
                    "rendered": {
                      "text": "ff99386cb0f0027fbf5b17666666\"),eu=ka(\"1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666\"),fu=ka(\"a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928\"),gu=ka(\"fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2\"),\nhu=ka(\"b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc\"),iu=ka(\"e41a1c377eb84daf4a984ea3ff7f00ffff33a65628f781bf999999\"),ju=ka(\"66c2a5fc8d628da0cbe78ac3a6d854ffd92fe5c494b3b3b3\"),ku=ka(\"8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f\"),Rm=Array(3).concat(\"d8b365f5f5f55ab4ac\",\"a6611adfc27d80cdc1018571\",\"a6611adfc27df5f5f580cdc1018571\",\"8c510ad8b365f6e8c3c7eae55ab4ac01665e\",\"8c510ad8b365f6e8c3",
                      "markdown": "`ff99386cb0f0027fbf5b17666666\"),eu=ka(\"1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666\"),fu=ka(\"a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928\"),gu=ka(\"fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2\"),\nhu=ka(\"b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc\"),iu=ka(\"e41a1c377eb84daf4a984ea3ff7f00ffff33a65628f781bf999999\"),ju=ka(\"66c2a5fc8d628da0cbe78ac3a6d854ffd92fe5c494b3b3b3\"),ku=ka(\"8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f\"),Rm=Array(3).concat(\"d8b365f5f5f55ab4ac\",\"a6611adfc27d80cdc1018571\",\"a6611adfc27df5f5f580cdc1018571\",\"8c510ad8b365f6e8c3c7eae55ab4ac01665e\",\"8c510ad8b365f6e8c3`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 790,
                  "startColumn": 6,
                  "endLine": 790,
                  "endColumn": 56,
                  "snippet": {
                    "text": "c7c7bcbd22dbdb8d17becf9edae5\"),du=ka(\"7fc97fbeaed4fdc086ffff99386cb0f0027fbf5b17666666\"),eu=ka(\"1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666\"),fu=ka(\"a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928\"),gu=ka(\"fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2\"),\nhu=ka(\"b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc\"),iu=ka(\"e41a1c377eb84daf4a984ea3ff7f00ffff33a65628f781bf999999\"),ju=ka(\"66c2a5fc8d628da0cbe78ac3a6d854ffd92fe5c494b3b3b3\"),ku=ka(\"8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f\"),Rm=Array(3).concat(\"d8b365f5f5f55ab4ac\",\"a6611adfc27d80cdc1018571\",\"a6611adfc27df5f5f580cdc101",
                    "rendered": {
                      "text": "c7c7bcbd22dbdb8d17becf9edae5\"),du=ka(\"7fc97fbeaed4fdc086ffff99386cb0f0027fbf5b17666666\"),eu=ka(\"1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666\"),fu=ka(\"a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928\"),gu=ka(\"fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2\"),\nhu=ka(\"b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc\"),iu=ka(\"e41a1c377eb84daf4a984ea3ff7f00ffff33a65628f781bf999999\"),ju=ka(\"66c2a5fc8d628da0cbe78ac3a6d854ffd92fe5c494b3b3b3\"),ku=ka(\"8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f\"),Rm=Array(3).concat(\"d8b365f5f5f55ab4ac\",\"a6611adfc27d80cdc1018571\",\"a6611adfc27df5f5f580cdc101",
                      "markdown": "`c7c7bcbd22dbdb8d17becf9edae5\"),du=ka(\"7fc97fbeaed4fdc086ffff99386cb0f0027fbf5b17666666\"),eu=ka(\"1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666\"),fu=ka(\"a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928\"),gu=ka(\"fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2\"),\nhu=ka(\"b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc\"),iu=ka(\"e41a1c377eb84daf4a984ea3ff7f00ffff33a65628f781bf999999\"),ju=ka(\"66c2a5fc8d628da0cbe78ac3a6d854ffd92fe5c494b3b3b3\"),ku=ka(\"8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f\"),Rm=Array(3).concat(\"d8b365f5f5f55ab4ac\",\"a6611adfc27d80cdc1018571\",\"a6611adfc27df5f5f580cdc101`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 789,
                  "startColumn": 464,
                  "endLine": 789,
                  "endColumn": 520,
                  "snippet": {
                    "text": "02c98df8ad62728ff98969467bdc5b0d58c564bc49c94e377c2f7b6d27f7f7fc7c7c7bcbd22dbdb8d17becf9edae5\"),du=ka(\"7fc97fbeaed4fdc086ffff99386cb0f0027fbf5b17666666\"),eu=ka(\"1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666\"),fu=ka(\"a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928\"),gu=ka(\"fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2\"),\nhu=ka(\"b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc\"),iu=ka(\"e41a1c377eb84daf4a984ea3ff7f00ffff33a65628f781bf999999\"),ju=ka(\"66c2a5fc8d628da0cbe78ac3a6d854ffd92fe5c494b3b3b3\"),ku=ka(\"8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f\"),Rm=Array(3).concat(\"d8b365f5f5f55ab",
                    "rendered": {
                      "text": "02c98df8ad62728ff98969467bdc5b0d58c564bc49c94e377c2f7b6d27f7f7fc7c7c7bcbd22dbdb8d17becf9edae5\"),du=ka(\"7fc97fbeaed4fdc086ffff99386cb0f0027fbf5b17666666\"),eu=ka(\"1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666\"),fu=ka(\"a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928\"),gu=ka(\"fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2\"),\nhu=ka(\"b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc\"),iu=ka(\"e41a1c377eb84daf4a984ea3ff7f00ffff33a65628f781bf999999\"),ju=ka(\"66c2a5fc8d628da0cbe78ac3a6d854ffd92fe5c494b3b3b3\"),ku=ka(\"8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f\"),Rm=Array(3).concat(\"d8b365f5f5f55ab",
                      "markdown": "`02c98df8ad62728ff98969467bdc5b0d58c564bc49c94e377c2f7b6d27f7f7fc7c7c7bcbd22dbdb8d17becf9edae5\"),du=ka(\"7fc97fbeaed4fdc086ffff99386cb0f0027fbf5b17666666\"),eu=ka(\"1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666\"),fu=ka(\"a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928\"),gu=ka(\"fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2\"),\nhu=ka(\"b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc\"),iu=ka(\"e41a1c377eb84daf4a984ea3ff7f00ffff33a65628f781bf999999\"),ju=ka(\"66c2a5fc8d628da0cbe78ac3a6d854ffd92fe5c494b3b3b3\"),ku=ka(\"8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f\"),Rm=Array(3).concat(\"d8b365f5f5f55ab`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 789,
                  "startColumn": 382,
                  "endLine": 789,
                  "endColumn": 456,
                  "snippet": {
                    "text": "bb19e9ac8bcbddcdadaeb636363969696bdbdbdd9d9d9\"),cu=ka(\"1f77b4aec7e8ff7f0effbb782ca02c98df8ad62728ff98969467bdc5b0d58c564bc49c94e377c2f7b6d27f7f7fc7c7c7bcbd22dbdb8d17becf9edae5\"),du=ka(\"7fc97fbeaed4fdc086ffff99386cb0f0027fbf5b17666666\"),eu=ka(\"1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666\"),fu=ka(\"a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928\"),gu=ka(\"fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2\"),\nhu=ka(\"b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc\"),iu=ka(\"e41a1c377eb84daf4a984ea3ff7f00ffff33a65628f781bf999999\"),ju=ka(\"66c2a5fc8d628da0cbe78ac3a6d854ffd92fe5c494b3b3b3\"),ku=ka(\"8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccd",
                    "rendered": {
                      "text": "bb19e9ac8bcbddcdadaeb636363969696bdbdbdd9d9d9\"),cu=ka(\"1f77b4aec7e8ff7f0effbb782ca02c98df8ad62728ff98969467bdc5b0d58c564bc49c94e377c2f7b6d27f7f7fc7c7c7bcbd22dbdb8d17becf9edae5\"),du=ka(\"7fc97fbeaed4fdc086ffff99386cb0f0027fbf5b17666666\"),eu=ka(\"1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666\"),fu=ka(\"a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928\"),gu=ka(\"fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2\"),\nhu=ka(\"b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc\"),iu=ka(\"e41a1c377eb84daf4a984ea3ff7f00ffff33a65628f781bf999999\"),ju=ka(\"66c2a5fc8d628da0cbe78ac3a6d854ffd92fe5c494b3b3b3\"),ku=ka(\"8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccd",
                      "markdown": "`bb19e9ac8bcbddcdadaeb636363969696bdbdbdd9d9d9\"),cu=ka(\"1f77b4aec7e8ff7f0effbb782ca02c98df8ad62728ff98969467bdc5b0d58c564bc49c94e377c2f7b6d27f7f7fc7c7c7bcbd22dbdb8d17becf9edae5\"),du=ka(\"7fc97fbeaed4fdc086ffff99386cb0f0027fbf5b17666666\"),eu=ka(\"1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666\"),fu=ka(\"a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928\"),gu=ka(\"fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2\"),\nhu=ka(\"b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc\"),iu=ka(\"e41a1c377eb84daf4a984ea3ff7f00ffff33a65628f781bf999999\"),ju=ka(\"66c2a5fc8d628da0cbe78ac3a6d854ffd92fe5c494b3b3b3\"),ku=ka(\"8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccd`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 789,
                  "startColumn": 324,
                  "endLine": 789,
                  "endColumn": 374,
                  "snippet": {
                    "text": "1c6dbefe6550dfd8d3cfdae6bfdd0a231a35474c476a1d99bc7e9c0756bb19e9ac8bcbddcdadaeb636363969696bdbdbdd9d9d9\"),cu=ka(\"1f77b4aec7e8ff7f0effbb782ca02c98df8ad62728ff98969467bdc5b0d58c564bc49c94e377c2f7b6d27f7f7fc7c7c7bcbd22dbdb8d17becf9edae5\"),du=ka(\"7fc97fbeaed4fdc086ffff99386cb0f0027fbf5b17666666\"),eu=ka(\"1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666\"),fu=ka(\"a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928\"),gu=ka(\"fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2\"),\nhu=ka(\"b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc\"),iu=ka(\"e41a1c377eb84daf4a984ea3ff7f00ffff33a65628f781bf999999\"),ju=ka(\"66c2a5fc8d628da0cbe78a",
                    "rendered": {
                      "text": "1c6dbefe6550dfd8d3cfdae6bfdd0a231a35474c476a1d99bc7e9c0756bb19e9ac8bcbddcdadaeb636363969696bdbdbdd9d9d9\"),cu=ka(\"1f77b4aec7e8ff7f0effbb782ca02c98df8ad62728ff98969467bdc5b0d58c564bc49c94e377c2f7b6d27f7f7fc7c7c7bcbd22dbdb8d17becf9edae5\"),du=ka(\"7fc97fbeaed4fdc086ffff99386cb0f0027fbf5b17666666\"),eu=ka(\"1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666\"),fu=ka(\"a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928\"),gu=ka(\"fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2\"),\nhu=ka(\"b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc\"),iu=ka(\"e41a1c377eb84daf4a984ea3ff7f00ffff33a65628f781bf999999\"),ju=ka(\"66c2a5fc8d628da0cbe78a",
                      "markdown": "`1c6dbefe6550dfd8d3cfdae6bfdd0a231a35474c476a1d99bc7e9c0756bb19e9ac8bcbddcdadaeb636363969696bdbdbdd9d9d9\"),cu=ka(\"1f77b4aec7e8ff7f0effbb782ca02c98df8ad62728ff98969467bdc5b0d58c564bc49c94e377c2f7b6d27f7f7fc7c7c7bcbd22dbdb8d17becf9edae5\"),du=ka(\"7fc97fbeaed4fdc086ffff99386cb0f0027fbf5b17666666\"),eu=ka(\"1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666\"),fu=ka(\"a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928\"),gu=ka(\"fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2\"),\nhu=ka(\"b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc\"),iu=ka(\"e41a1c377eb84daf4a984ea3ff7f00ffff33a65628f781bf999999\"),ju=ka(\"66c2a5fc8d628da0cbe78a`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 789,
                  "startColumn": 266,
                  "endLine": 789,
                  "endColumn": 316,
                  "snippet": {
                    "text": "e7969c7b4173a55194ce6dbdde9ed6\"),\nbu=ka(\"3182bd6baed69ecae1c6dbefe6550dfd8d3cfdae6bfdd0a231a35474c476a1d99bc7e9c0756bb19e9ac8bcbddcdadaeb636363969696bdbdbdd9d9d9\"),cu=ka(\"1f77b4aec7e8ff7f0effbb782ca02c98df8ad62728ff98969467bdc5b0d58c564bc49c94e377c2f7b6d27f7f7fc7c7c7bcbd22dbdb8d17becf9edae5\"),du=ka(\"7fc97fbeaed4fdc086ffff99386cb0f0027fbf5b17666666\"),eu=ka(\"1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666\"),fu=ka(\"a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928\"),gu=ka(\"fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2\"),\nhu=ka(\"b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc\"),iu=ka(\"e41a1c377eb84daf4a984ea3ff7f",
                    "rendered": {
                      "text": "e7969c7b4173a55194ce6dbdde9ed6\"),\nbu=ka(\"3182bd6baed69ecae1c6dbefe6550dfd8d3cfdae6bfdd0a231a35474c476a1d99bc7e9c0756bb19e9ac8bcbddcdadaeb636363969696bdbdbdd9d9d9\"),cu=ka(\"1f77b4aec7e8ff7f0effbb782ca02c98df8ad62728ff98969467bdc5b0d58c564bc49c94e377c2f7b6d27f7f7fc7c7c7bcbd22dbdb8d17becf9edae5\"),du=ka(\"7fc97fbeaed4fdc086ffff99386cb0f0027fbf5b17666666\"),eu=ka(\"1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666\"),fu=ka(\"a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928\"),gu=ka(\"fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2\"),\nhu=ka(\"b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc\"),iu=ka(\"e41a1c377eb84daf4a984ea3ff7f",
                      "markdown": "`e7969c7b4173a55194ce6dbdde9ed6\"),\nbu=ka(\"3182bd6baed69ecae1c6dbefe6550dfd8d3cfdae6bfdd0a231a35474c476a1d99bc7e9c0756bb19e9ac8bcbddcdadaeb636363969696bdbdbdd9d9d9\"),cu=ka(\"1f77b4aec7e8ff7f0effbb782ca02c98df8ad62728ff98969467bdc5b0d58c564bc49c94e377c2f7b6d27f7f7fc7c7c7bcbd22dbdb8d17becf9edae5\"),du=ka(\"7fc97fbeaed4fdc086ffff99386cb0f0027fbf5b17666666\"),eu=ka(\"1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666\"),fu=ka(\"a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928\"),gu=ka(\"fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2\"),\nhu=ka(\"b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc\"),iu=ka(\"e41a1c377eb84daf4a984ea3ff7f`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 789,
                  "startColumn": 136,
                  "endLine": 789,
                  "endColumn": 258,
                  "snippet": {
                    "text": "8c564be377c27f7f7fbcbd2217becf\"),au=ka(\"393b795254a36b6ecf9c9ede6379398ca252b5cf6bcedb9c8c6d31bd9e39e7ba52e7cb94843c39ad494ad6616be7969c7b4173a55194ce6dbdde9ed6\"),\nbu=ka(\"3182bd6baed69ecae1c6dbefe6550dfd8d3cfdae6bfdd0a231a35474c476a1d99bc7e9c0756bb19e9ac8bcbddcdadaeb636363969696bdbdbdd9d9d9\"),cu=ka(\"1f77b4aec7e8ff7f0effbb782ca02c98df8ad62728ff98969467bdc5b0d58c564bc49c94e377c2f7b6d27f7f7fc7c7c7bcbd22dbdb8d17becf9edae5\"),du=ka(\"7fc97fbeaed4fdc086ffff99386cb0f0027fbf5b17666666\"),eu=ka(\"1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666\"),fu=ka(\"a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928\"),gu=ka(\"fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2\"),\nhu=ka(\"b3e2cdfdcdaccbd5e8f4cae4e6f5",
                    "rendered": {
                      "text": "8c564be377c27f7f7fbcbd2217becf\"),au=ka(\"393b795254a36b6ecf9c9ede6379398ca252b5cf6bcedb9c8c6d31bd9e39e7ba52e7cb94843c39ad494ad6616be7969c7b4173a55194ce6dbdde9ed6\"),\nbu=ka(\"3182bd6baed69ecae1c6dbefe6550dfd8d3cfdae6bfdd0a231a35474c476a1d99bc7e9c0756bb19e9ac8bcbddcdadaeb636363969696bdbdbdd9d9d9\"),cu=ka(\"1f77b4aec7e8ff7f0effbb782ca02c98df8ad62728ff98969467bdc5b0d58c564bc49c94e377c2f7b6d27f7f7fc7c7c7bcbd22dbdb8d17becf9edae5\"),du=ka(\"7fc97fbeaed4fdc086ffff99386cb0f0027fbf5b17666666\"),eu=ka(\"1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666\"),fu=ka(\"a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928\"),gu=ka(\"fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2\"),\nhu=ka(\"b3e2cdfdcdaccbd5e8f4cae4e6f5",
                      "markdown": "`8c564be377c27f7f7fbcbd2217becf\"),au=ka(\"393b795254a36b6ecf9c9ede6379398ca252b5cf6bcedb9c8c6d31bd9e39e7ba52e7cb94843c39ad494ad6616be7969c7b4173a55194ce6dbdde9ed6\"),\nbu=ka(\"3182bd6baed69ecae1c6dbefe6550dfd8d3cfdae6bfdd0a231a35474c476a1d99bc7e9c0756bb19e9ac8bcbddcdadaeb636363969696bdbdbdd9d9d9\"),cu=ka(\"1f77b4aec7e8ff7f0effbb782ca02c98df8ad62728ff98969467bdc5b0d58c564bc49c94e377c2f7b6d27f7f7fc7c7c7bcbd22dbdb8d17becf9edae5\"),du=ka(\"7fc97fbeaed4fdc086ffff99386cb0f0027fbf5b17666666\"),eu=ka(\"1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666\"),fu=ka(\"a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928\"),gu=ka(\"fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2\"),\nhu=ka(\"b3e2cdfdcdaccbd5e8f4cae4e6f5`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 789,
                  "startColumn": 6,
                  "endLine": 789,
                  "endColumn": 128,
                  "snippet": {
                    "text": "%M:%S.%LZ\"),Zt=+new Date(\"2000-01-01T00:00:00.000Z\")?ms:d3.utcParse(\"%Y-%m-%dT%H:%M:%S.%LZ\"),$t=ka(\"1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf\"),au=ka(\"393b795254a36b6ecf9c9ede6379398ca252b5cf6bcedb9c8c6d31bd9e39e7ba52e7cb94843c39ad494ad6616be7969c7b4173a55194ce6dbdde9ed6\"),\nbu=ka(\"3182bd6baed69ecae1c6dbefe6550dfd8d3cfdae6bfdd0a231a35474c476a1d99bc7e9c0756bb19e9ac8bcbddcdadaeb636363969696bdbdbdd9d9d9\"),cu=ka(\"1f77b4aec7e8ff7f0effbb782ca02c98df8ad62728ff98969467bdc5b0d58c564bc49c94e377c2f7b6d27f7f7fc7c7c7bcbd22dbdb8d17becf9edae5\"),du=ka(\"7fc97fbeaed4fdc086ffff99386cb0f0027fbf5b17666666\"),eu=ka(\"1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666\"),fu=ka(\"a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7",
                    "rendered": {
                      "text": "%M:%S.%LZ\"),Zt=+new Date(\"2000-01-01T00:00:00.000Z\")?ms:d3.utcParse(\"%Y-%m-%dT%H:%M:%S.%LZ\"),$t=ka(\"1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf\"),au=ka(\"393b795254a36b6ecf9c9ede6379398ca252b5cf6bcedb9c8c6d31bd9e39e7ba52e7cb94843c39ad494ad6616be7969c7b4173a55194ce6dbdde9ed6\"),\nbu=ka(\"3182bd6baed69ecae1c6dbefe6550dfd8d3cfdae6bfdd0a231a35474c476a1d99bc7e9c0756bb19e9ac8bcbddcdadaeb636363969696bdbdbdd9d9d9\"),cu=ka(\"1f77b4aec7e8ff7f0effbb782ca02c98df8ad62728ff98969467bdc5b0d58c564bc49c94e377c2f7b6d27f7f7fc7c7c7bcbd22dbdb8d17becf9edae5\"),du=ka(\"7fc97fbeaed4fdc086ffff99386cb0f0027fbf5b17666666\"),eu=ka(\"1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666\"),fu=ka(\"a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7",
                      "markdown": "`%M:%S.%LZ\"),Zt=+new Date(\"2000-01-01T00:00:00.000Z\")?ms:d3.utcParse(\"%Y-%m-%dT%H:%M:%S.%LZ\"),$t=ka(\"1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf\"),au=ka(\"393b795254a36b6ecf9c9ede6379398ca252b5cf6bcedb9c8c6d31bd9e39e7ba52e7cb94843c39ad494ad6616be7969c7b4173a55194ce6dbdde9ed6\"),\nbu=ka(\"3182bd6baed69ecae1c6dbefe6550dfd8d3cfdae6bfdd0a231a35474c476a1d99bc7e9c0756bb19e9ac8bcbddcdadaeb636363969696bdbdbdd9d9d9\"),cu=ka(\"1f77b4aec7e8ff7f0effbb782ca02c98df8ad62728ff98969467bdc5b0d58c564bc49c94e377c2f7b6d27f7f7fc7c7c7bcbd22dbdb8d17becf9edae5\"),du=ka(\"7fc97fbeaed4fdc086ffff99386cb0f0027fbf5b17666666\"),eu=ka(\"1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666\"),fu=ka(\"a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 788,
                  "startColumn": 413,
                  "endLine": 788,
                  "endColumn": 535,
                  "snippet": {
                    "text": "nths:\"Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec\".split(\" \")});var Yt=Date.prototype.toISOString?ls:d3.utcFormat(\"%Y-%m-%dT%H:%M:%S.%LZ\"),Zt=+new Date(\"2000-01-01T00:00:00.000Z\")?ms:d3.utcParse(\"%Y-%m-%dT%H:%M:%S.%LZ\"),$t=ka(\"1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf\"),au=ka(\"393b795254a36b6ecf9c9ede6379398ca252b5cf6bcedb9c8c6d31bd9e39e7ba52e7cb94843c39ad494ad6616be7969c7b4173a55194ce6dbdde9ed6\"),\nbu=ka(\"3182bd6baed69ecae1c6dbefe6550dfd8d3cfdae6bfdd0a231a35474c476a1d99bc7e9c0756bb19e9ac8bcbddcdadaeb636363969696bdbdbdd9d9d9\"),cu=ka(\"1f77b4aec7e8ff7f0effbb782ca02c98df8ad62728ff98969467bdc5b0d58c564bc49c94e377c2f7b6d27f7f7fc7c7c7bcbd22dbdb8d17becf9edae5\"),du=ka(\"7fc97fbeaed4fdc086ffff99386cb0",
                    "rendered": {
                      "text": "nths:\"Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec\".split(\" \")});var Yt=Date.prototype.toISOString?ls:d3.utcFormat(\"%Y-%m-%dT%H:%M:%S.%LZ\"),Zt=+new Date(\"2000-01-01T00:00:00.000Z\")?ms:d3.utcParse(\"%Y-%m-%dT%H:%M:%S.%LZ\"),$t=ka(\"1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf\"),au=ka(\"393b795254a36b6ecf9c9ede6379398ca252b5cf6bcedb9c8c6d31bd9e39e7ba52e7cb94843c39ad494ad6616be7969c7b4173a55194ce6dbdde9ed6\"),\nbu=ka(\"3182bd6baed69ecae1c6dbefe6550dfd8d3cfdae6bfdd0a231a35474c476a1d99bc7e9c0756bb19e9ac8bcbddcdadaeb636363969696bdbdbdd9d9d9\"),cu=ka(\"1f77b4aec7e8ff7f0effbb782ca02c98df8ad62728ff98969467bdc5b0d58c564bc49c94e377c2f7b6d27f7f7fc7c7c7bcbd22dbdb8d17becf9edae5\"),du=ka(\"7fc97fbeaed4fdc086ffff99386cb0",
                      "markdown": "`nths:\"Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec\".split(\" \")});var Yt=Date.prototype.toISOString?ls:d3.utcFormat(\"%Y-%m-%dT%H:%M:%S.%LZ\"),Zt=+new Date(\"2000-01-01T00:00:00.000Z\")?ms:d3.utcParse(\"%Y-%m-%dT%H:%M:%S.%LZ\"),$t=ka(\"1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf\"),au=ka(\"393b795254a36b6ecf9c9ede6379398ca252b5cf6bcedb9c8c6d31bd9e39e7ba52e7cb94843c39ad494ad6616be7969c7b4173a55194ce6dbdde9ed6\"),\nbu=ka(\"3182bd6baed69ecae1c6dbefe6550dfd8d3cfdae6bfdd0a231a35474c476a1d99bc7e9c0756bb19e9ac8bcbddcdadaeb636363969696bdbdbdd9d9d9\"),cu=ka(\"1f77b4aec7e8ff7f0effbb782ca02c98df8ad62728ff98969467bdc5b0d58c564bc49c94e377c2f7b6d27f7f7fc7c7c7bcbd22dbdb8d17becf9edae5\"),du=ka(\"7fc97fbeaed4fdc086ffff99386cb0`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 788,
                  "startColumn": 343,
                  "endLine": 788,
                  "endColumn": 405,
                  "snippet": {
                    "text": "ne July August September October November December\".split(\" \"),shortMonths:\"Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec\".split(\" \")});var Yt=Date.prototype.toISOString?ls:d3.utcFormat(\"%Y-%m-%dT%H:%M:%S.%LZ\"),Zt=+new Date(\"2000-01-01T00:00:00.000Z\")?ms:d3.utcParse(\"%Y-%m-%dT%H:%M:%S.%LZ\"),$t=ka(\"1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf\"),au=ka(\"393b795254a36b6ecf9c9ede6379398ca252b5cf6bcedb9c8c6d31bd9e39e7ba52e7cb94843c39ad494ad6616be7969c7b4173a55194ce6dbdde9ed6\"),\nbu=ka(\"3182bd6baed69ecae1c6dbefe6550dfd8d3cfdae6bfdd0a231a35474c476a1d99bc7e9c0756bb19e9ac8bcbddcdadaeb636363969696bdbdbdd9d9d9\"),cu=ka(\"1f77b4aec7e8ff7f0effbb782ca02c",
                    "rendered": {
                      "text": "ne July August September October November December\".split(\" \"),shortMonths:\"Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec\".split(\" \")});var Yt=Date.prototype.toISOString?ls:d3.utcFormat(\"%Y-%m-%dT%H:%M:%S.%LZ\"),Zt=+new Date(\"2000-01-01T00:00:00.000Z\")?ms:d3.utcParse(\"%Y-%m-%dT%H:%M:%S.%LZ\"),$t=ka(\"1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf\"),au=ka(\"393b795254a36b6ecf9c9ede6379398ca252b5cf6bcedb9c8c6d31bd9e39e7ba52e7cb94843c39ad494ad6616be7969c7b4173a55194ce6dbdde9ed6\"),\nbu=ka(\"3182bd6baed69ecae1c6dbefe6550dfd8d3cfdae6bfdd0a231a35474c476a1d99bc7e9c0756bb19e9ac8bcbddcdadaeb636363969696bdbdbdd9d9d9\"),cu=ka(\"1f77b4aec7e8ff7f0effbb782ca02c",
                      "markdown": "`ne July August September October November December\".split(\" \"),shortMonths:\"Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec\".split(\" \")});var Yt=Date.prototype.toISOString?ls:d3.utcFormat(\"%Y-%m-%dT%H:%M:%S.%LZ\"),Zt=+new Date(\"2000-01-01T00:00:00.000Z\")?ms:d3.utcParse(\"%Y-%m-%dT%H:%M:%S.%LZ\"),$t=ka(\"1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf\"),au=ka(\"393b795254a36b6ecf9c9ede6379398ca252b5cf6bcedb9c8c6d31bd9e39e7ba52e7cb94843c39ad494ad6616be7969c7b4173a55194ce6dbdde9ed6\"),\nbu=ka(\"3182bd6baed69ecae1c6dbefe6550dfd8d3cfdae6bfdd0a231a35474c476a1d99bc7e9c0756bb19e9ac8bcbddcdadaeb636363969696bdbdbdd9d9d9\"),cu=ka(\"1f77b4aec7e8ff7f0effbb782ca02c`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 1998,
                  "startColumn": 361,
                  "endLine": 1998,
                  "endColumn": 366,
                  "snippet": {
                    "text": "v,B,w;return za(function(E){switch(E.g){case 1:c=JSON.parse(a.data);d=c.type;e=c.id;f=c.payload;g=c.error;if(h=c.isReply){if(!b.g.has(e))return E.return();k=b.g.get(e);l=k.resolve;n=k.reject;b.g.delete(e);g?n(Error(g)):l(f);return E.return()}q=p=null;if(!b.listeners.has(d)){E.g=2;break}r=b.listeners.get(d);E.h=3;return ra(E,r(f),5);case 5:p=t=E.fa;E.g=2;E.h=0;break;case 3:q=v=sa(E);case 2:B={},w=(B.type=d,B.id=e,B.payload=p,B.error=q,B.isReply=\n!0,B),b.postMessage(w),E.g=0}})};m.postMessage=function(a){this.port.postMessage(JSON.stringify(a))};m.sendMessage=function(a,b){var c=this,d=this.id++;this",
                    "rendered": {
                      "text": "v,B,w;return za(function(E){switch(E.g){case 1:c=JSON.parse(a.data);d=c.type;e=c.id;f=c.payload;g=c.error;if(h=c.isReply){if(!b.g.has(e))return E.return();k=b.g.get(e);l=k.resolve;n=k.reject;b.g.delete(e);g?n(Error(g)):l(f);return E.return()}q=p=null;if(!b.listeners.has(d)){E.g=2;break}r=b.listeners.get(d);E.h=3;return ra(E,r(f),5);case 5:p=t=E.fa;E.g=2;E.h=0;break;case 3:q=v=sa(E);case 2:B={},w=(B.type=d,B.id=e,B.payload=p,B.error=q,B.isReply=\n!0,B),b.postMessage(w),E.g=0}})};m.postMessage=function(a){this.port.postMessage(JSON.stringify(a))};m.sendMessage=function(a,b){var c=this,d=this.id++;this",
                      "markdown": "`v,B,w;return za(function(E){switch(E.g){case 1:c=JSON.parse(a.data);d=c.type;e=c.id;f=c.payload;g=c.error;if(h=c.isReply){if(!b.g.has(e))return E.return();k=b.g.get(e);l=k.resolve;n=k.reject;b.g.delete(e);g?n(Error(g)):l(f);return E.return()}q=p=null;if(!b.listeners.has(d)){E.g=2;break}r=b.listeners.get(d);E.h=3;return ra(E,r(f),5);case 5:p=t=E.fa;E.g=2;E.h=0;break;case 3:q=v=sa(E);case 2:B={},w=(B.type=d,B.id=e,B.payload=p,B.error=q,B.isReply=\n!0,B),b.postMessage(w),E.g=0}})};m.postMessage=function(a){this.port.postMessage(JSON.stringify(a))};m.sendMessage=function(a,b){var c=this,d=this.id++;this`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 1998,
                  "startColumn": 221,
                  "endLine": 1998,
                  "endColumn": 226,
                  "snippet": {
                    "text": ",b){this.listeners.set(a,b)};m.unlisten=function(a){this.listeners.delete(a)};\nm.onMessage=function(a){var b=this,c,d,e,f,g,h,k,l,n,p,q,r,t,v,B,w;return za(function(E){switch(E.g){case 1:c=JSON.parse(a.data);d=c.type;e=c.id;f=c.payload;g=c.error;if(h=c.isReply){if(!b.g.has(e))return E.return();k=b.g.get(e);l=k.resolve;n=k.reject;b.g.delete(e);g?n(Error(g)):l(f);return E.return()}q=p=null;if(!b.listeners.has(d)){E.g=2;break}r=b.listeners.get(d);E.h=3;return ra(E,r(f),5);case 5:p=t=E.fa;E.g=2;E.h=0;break;case 3:q=v=sa(E);case 2:B={},w=(B.type=d,B.id=e,B.payload=p,B.error=q,B.isReply=\n!0,B),b.postMess",
                    "rendered": {
                      "text": ",b){this.listeners.set(a,b)};m.unlisten=function(a){this.listeners.delete(a)};\nm.onMessage=function(a){var b=this,c,d,e,f,g,h,k,l,n,p,q,r,t,v,B,w;return za(function(E){switch(E.g){case 1:c=JSON.parse(a.data);d=c.type;e=c.id;f=c.payload;g=c.error;if(h=c.isReply){if(!b.g.has(e))return E.return();k=b.g.get(e);l=k.resolve;n=k.reject;b.g.delete(e);g?n(Error(g)):l(f);return E.return()}q=p=null;if(!b.listeners.has(d)){E.g=2;break}r=b.listeners.get(d);E.h=3;return ra(E,r(f),5);case 5:p=t=E.fa;E.g=2;E.h=0;break;case 3:q=v=sa(E);case 2:B={},w=(B.type=d,B.id=e,B.payload=p,B.error=q,B.isReply=\n!0,B),b.postMess",
                      "markdown": "`,b){this.listeners.set(a,b)};m.unlisten=function(a){this.listeners.delete(a)};\nm.onMessage=function(a){var b=this,c,d,e,f,g,h,k,l,n,p,q,r,t,v,B,w;return za(function(E){switch(E.g){case 1:c=JSON.parse(a.data);d=c.type;e=c.id;f=c.payload;g=c.error;if(h=c.isReply){if(!b.g.has(e))return E.return();k=b.g.get(e);l=k.resolve;n=k.reject;b.g.delete(e);g?n(Error(g)):l(f);return E.return()}q=p=null;if(!b.listeners.has(d)){E.g=2;break}r=b.listeners.get(d);E.h=3;return ra(E,r(f),5);case 5:p=t=E.fa;E.g=2;E.h=0;break;case 3:q=v=sa(E);case 2:B={},w=(B.type=d,B.id=e,B.payload=p,B.error=q,B.isReply=\n!0,B),b.postMess`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 1968,
                  "startColumn": 448,
                  "endLine": 1968,
                  "endColumn": 453,
                  "snippet": {
                    "text": "\":\")[0];b.has(f)?b.get(f).push(e):b.set(f,[e])}}c=[];e=\"\";f=0;a=z(a);for(d=a.next();!d.done;d=a.next())if(d=d.value,\"Overall\"==d)e=\"Overall\",c.push({text:\"Overall\",jd:\"Overall\",lb:!0,hc:[\"Overall\"],isSelected:!1,isDisabled:!1,id:f++});else{var g=d.split(\":\")[0];g!=e&&(c.push({text:g,jd:\"\",lb:!0,hc:b.get(g),isSelected:!1,isDisabled:!1,id:f++}),e=g);c.push({text:d.split(\":\")[1],\njd:d,lb:!1,hc:[d],isSelected:!1,isDisabled:!1,id:f++})}return c};m.slicesDropDownCandidatesClass_=function(a){return a.lb?\"slice-key-true\":\"slice-key-false\"};\nm.selectDefaultSlicesFromDropDownMenuCandidates_=function(a,b){if(",
                    "rendered": {
                      "text": "\":\")[0];b.has(f)?b.get(f).push(e):b.set(f,[e])}}c=[];e=\"\";f=0;a=z(a);for(d=a.next();!d.done;d=a.next())if(d=d.value,\"Overall\"==d)e=\"Overall\",c.push({text:\"Overall\",jd:\"Overall\",lb:!0,hc:[\"Overall\"],isSelected:!1,isDisabled:!1,id:f++});else{var g=d.split(\":\")[0];g!=e&&(c.push({text:g,jd:\"\",lb:!0,hc:b.get(g),isSelected:!1,isDisabled:!1,id:f++}),e=g);c.push({text:d.split(\":\")[1],\njd:d,lb:!1,hc:[d],isSelected:!1,isDisabled:!1,id:f++})}return c};m.slicesDropDownCandidatesClass_=function(a){return a.lb?\"slice-key-true\":\"slice-key-false\"};\nm.selectDefaultSlicesFromDropDownMenuCandidates_=function(a,b){if(",
                      "markdown": "`\":\")[0];b.has(f)?b.get(f).push(e):b.set(f,[e])}}c=[];e=\"\";f=0;a=z(a);for(d=a.next();!d.done;d=a.next())if(d=d.value,\"Overall\"==d)e=\"Overall\",c.push({text:\"Overall\",jd:\"Overall\",lb:!0,hc:[\"Overall\"],isSelected:!1,isDisabled:!1,id:f++});else{var g=d.split(\":\")[0];g!=e&&(c.push({text:g,jd:\"\",lb:!0,hc:b.get(g),isSelected:!1,isDisabled:!1,id:f++}),e=g);c.push({text:d.split(\":\")[1],\njd:d,lb:!1,hc:[d],isSelected:!1,isDisabled:!1,id:f++})}return c};m.slicesDropDownCandidatesClass_=function(a){return a.lb?\"slice-key-true\":\"slice-key-false\"};\nm.selectDefaultSlicesFromDropDownMenuCandidates_=function(a,b){if(`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 1968,
                  "startColumn": 166,
                  "endLine": 1968,
                  "endColumn": 171,
                  "snippet": {
                    "text": "r c=0<b.selectedThresholds_.length?b.selectedThresholds_.join(\", \"):\" \";b.$.thresholdsList.fire(\"iron-select\",{item:{label:c}})},0)};\nm.computeSlicesDropDownCandidates_=function(a){for(var b=new Map,c=z(a),d=c.next();!d.done;d=c.next()){var e=d.value;if(\"Overall\"!=e){var f=e.split(\":\")[0];b.has(f)?b.get(f).push(e):b.set(f,[e])}}c=[];e=\"\";f=0;a=z(a);for(d=a.next();!d.done;d=a.next())if(d=d.value,\"Overall\"==d)e=\"Overall\",c.push({text:\"Overall\",jd:\"Overall\",lb:!0,hc:[\"Overall\"],isSelected:!1,isDisabled:!1,id:f++});else{var g=d.split(\":\")[0];g!=e&&(c.push({text:g,jd:\"\",lb:!0,hc:b.get(g),isSelected:!1,i",
                    "rendered": {
                      "text": "r c=0<b.selectedThresholds_.length?b.selectedThresholds_.join(\", \"):\" \";b.$.thresholdsList.fire(\"iron-select\",{item:{label:c}})},0)};\nm.computeSlicesDropDownCandidates_=function(a){for(var b=new Map,c=z(a),d=c.next();!d.done;d=c.next()){var e=d.value;if(\"Overall\"!=e){var f=e.split(\":\")[0];b.has(f)?b.get(f).push(e):b.set(f,[e])}}c=[];e=\"\";f=0;a=z(a);for(d=a.next();!d.done;d=a.next())if(d=d.value,\"Overall\"==d)e=\"Overall\",c.push({text:\"Overall\",jd:\"Overall\",lb:!0,hc:[\"Overall\"],isSelected:!1,isDisabled:!1,id:f++});else{var g=d.split(\":\")[0];g!=e&&(c.push({text:g,jd:\"\",lb:!0,hc:b.get(g),isSelected:!1,i",
                      "markdown": "`r c=0<b.selectedThresholds_.length?b.selectedThresholds_.join(\", \"):\" \";b.$.thresholdsList.fire(\"iron-select\",{item:{label:c}})},0)};\nm.computeSlicesDropDownCandidates_=function(a){for(var b=new Map,c=z(a),d=c.next();!d.done;d=c.next()){var e=d.value;if(\"Overall\"!=e){var f=e.split(\":\")[0];b.has(f)?b.get(f).push(e):b.set(f,[e])}}c=[];e=\"\";f=0;a=z(a);for(d=a.next();!d.done;d=a.next())if(d=d.value,\"Overall\"==d)e=\"Overall\",c.push({text:\"Overall\",jd:\"Overall\",lb:!0,hc:[\"Overall\"],isSelected:!1,isDisabled:!1,id:f++});else{var g=d.split(\":\")[0];g!=e&&(c.push({text:g,jd:\"\",lb:!0,hc:b.get(g),isSelected:!1,i`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 1781,
                  "startColumn": 177,
                  "endLine": 1781,
                  "endColumn": 182,
                  "snippet": {
                    "text": "esToItems(a)||[]).filter(function(c){return null!==c&&void 0!==c});this.za.clear(a);for(var b=0;b<a.length;b++)Yj(this.za,\na[b],!0);this.fallbackSelection&&!this.za.get().length&&this._valueToItem(this.fallbackSelection)&&this.select(this.fallbackSelection)},_selectionChange:function(){var a=this.za.get();this.multi?(this._setSelectedItems(a),this._setSelectedItem(a.length?a[0]:null)):null!==a&&void 0!==a?(this._setSelectedItems([a]),this._setSelectedItem(a)):(this._setSelectedItems([]),this._setSelectedItem(null))},_toggleSelected:function(a){var b=this.selectedValues.indexOf(a);0>b?this.push(\"sel",
                    "rendered": {
                      "text": "esToItems(a)||[]).filter(function(c){return null!==c&&void 0!==c});this.za.clear(a);for(var b=0;b<a.length;b++)Yj(this.za,\na[b],!0);this.fallbackSelection&&!this.za.get().length&&this._valueToItem(this.fallbackSelection)&&this.select(this.fallbackSelection)},_selectionChange:function(){var a=this.za.get();this.multi?(this._setSelectedItems(a),this._setSelectedItem(a.length?a[0]:null)):null!==a&&void 0!==a?(this._setSelectedItems([a]),this._setSelectedItem(a)):(this._setSelectedItems([]),this._setSelectedItem(null))},_toggleSelected:function(a){var b=this.selectedValues.indexOf(a);0>b?this.push(\"sel",
                      "markdown": "`esToItems(a)||[]).filter(function(c){return null!==c&&void 0!==c});this.za.clear(a);for(var b=0;b<a.length;b++)Yj(this.za,\na[b],!0);this.fallbackSelection&&!this.za.get().length&&this._valueToItem(this.fallbackSelection)&&this.select(this.fallbackSelection)},_selectionChange:function(){var a=this.za.get();this.multi?(this._setSelectedItems(a),this._setSelectedItem(a.length?a[0]:null)):null!==a&&void 0!==a?(this._setSelectedItems([a]),this._setSelectedItem(a)):(this._setSelectedItems([]),this._setSelectedItem(null))},_toggleSelected:function(a){var b=this.selectedValues.indexOf(a);0>b?this.push(\"sel`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 1781,
                  "startColumn": 41,
                  "endLine": 1781,
                  "endColumn": 46,
                  "snippet": {
                    "text": "(){this.multi?this._selectMulti(this.selectedValues):this._selectSelected(this.selected)},_selectMulti:function(a){a=a||[];a=(this._valuesToItems(a)||[]).filter(function(c){return null!==c&&void 0!==c});this.za.clear(a);for(var b=0;b<a.length;b++)Yj(this.za,\na[b],!0);this.fallbackSelection&&!this.za.get().length&&this._valueToItem(this.fallbackSelection)&&this.select(this.fallbackSelection)},_selectionChange:function(){var a=this.za.get();this.multi?(this._setSelectedItems(a),this._setSelectedItem(a.length?a[0]:null)):null!==a&&void 0!==a?(this._setSelectedItems([a]),this._setSelectedItem(a)):(this",
                    "rendered": {
                      "text": "(){this.multi?this._selectMulti(this.selectedValues):this._selectSelected(this.selected)},_selectMulti:function(a){a=a||[];a=(this._valuesToItems(a)||[]).filter(function(c){return null!==c&&void 0!==c});this.za.clear(a);for(var b=0;b<a.length;b++)Yj(this.za,\na[b],!0);this.fallbackSelection&&!this.za.get().length&&this._valueToItem(this.fallbackSelection)&&this.select(this.fallbackSelection)},_selectionChange:function(){var a=this.za.get();this.multi?(this._setSelectedItems(a),this._setSelectedItem(a.length?a[0]:null)):null!==a&&void 0!==a?(this._setSelectedItems([a]),this._setSelectedItem(a)):(this",
                      "markdown": "`(){this.multi?this._selectMulti(this.selectedValues):this._selectSelected(this.selected)},_selectMulti:function(a){a=a||[];a=(this._valuesToItems(a)||[]).filter(function(c){return null!==c&&void 0!==c});this.za.clear(a);for(var b=0;b<a.length;b++)Yj(this.za,\na[b],!0);this.fallbackSelection&&!this.za.get().length&&this._valueToItem(this.fallbackSelection)&&this.select(this.fallbackSelection)},_selectionChange:function(){var a=this.za.get();this.multi?(this._setSelectedItems(a),this._setSelectedItem(a.length?a[0]:null)):null!==a&&void 0!==a?(this._setSelectedItems([a]),this._setSelectedItem(a)):(this`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 1778,
                  "startColumn": 188,
                  "endLine": 1778,
                  "endColumn": 193,
                  "snippet": {
                    "text": "lySelection:function(a,b){this.selectedClass&&this.toggleClass(this.selectedClass,b,a);this.selectedAttribute&&\nthis.toggleAttribute.call(a,this.selectedAttribute,b);this._selectionChange();this.fire(\"iron-\"+(b?\"select\":\"deselect\"),{item:a})},_selectionChange:function(){this._setSelectedItem(this.za.get())},_observeItems:function(a){return P(a).observeNodes(function(b){this._updateItems();this._updateSelected();this.fire(\"iron-items-changed\",b,{bubbles:!1,cancelable:!1})})},_activateHandler:function(a){a=a.target;for(var b=this.items;a&&a!=this;){var c=b.indexOf(a);if(0<=c){b=this._indexToValue(c);",
                    "rendered": {
                      "text": "lySelection:function(a,b){this.selectedClass&&this.toggleClass(this.selectedClass,b,a);this.selectedAttribute&&\nthis.toggleAttribute.call(a,this.selectedAttribute,b);this._selectionChange();this.fire(\"iron-\"+(b?\"select\":\"deselect\"),{item:a})},_selectionChange:function(){this._setSelectedItem(this.za.get())},_observeItems:function(a){return P(a).observeNodes(function(b){this._updateItems();this._updateSelected();this.fire(\"iron-items-changed\",b,{bubbles:!1,cancelable:!1})})},_activateHandler:function(a){a=a.target;for(var b=this.items;a&&a!=this;){var c=b.indexOf(a);if(0<=c){b=this._indexToValue(c);",
                      "markdown": "`lySelection:function(a,b){this.selectedClass&&this.toggleClass(this.selectedClass,b,a);this.selectedAttribute&&\nthis.toggleAttribute.call(a,this.selectedAttribute,b);this._selectionChange();this.fire(\"iron-\"+(b?\"select\":\"deselect\"),{item:a})},_selectionChange:function(){this._setSelectedItem(this.za.get())},_observeItems:function(a){return P(a).observeNodes(function(b){this._updateItems();this._updateSelected();this.fire(\"iron-items-changed\",b,{bubbles:!1,cancelable:!1})})},_activateHandler:function(a){a=a.target;for(var b=this.items;a&&a!=this;){var c=b.indexOf(a);if(0<=c){b=this._indexToValue(c);`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 1776,
                  "startColumn": 295,
                  "endLine": 1776,
                  "endColumn": 300,
                  "snippet": {
                    "text": "em&&\n(this.selected=this._valueForItem(this.selectedItem))},_updateSelected:function(){this._selectSelected(this.selected)},_selectSelected:function(){if(this.items){var a=this._valueToItem(this.selected);a?this.za.select(a):this.za.clear();this.fallbackSelection&&this.items.length&&void 0===this.za.get()&&(this.selected=this.fallbackSelection)}},_filterItem:function(a){return!this._excludedLocalNames[a.localName]},_valueToItem:function(a){return null==a?null:this.items[this._valueToIndex(a)]},_valueToIndex:function(a){if(this.attrForSelected)for(var b=\n0,c;c=this.items[b];b++){if(this._valueForIte",
                    "rendered": {
                      "text": "em&&\n(this.selected=this._valueForItem(this.selectedItem))},_updateSelected:function(){this._selectSelected(this.selected)},_selectSelected:function(){if(this.items){var a=this._valueToItem(this.selected);a?this.za.select(a):this.za.clear();this.fallbackSelection&&this.items.length&&void 0===this.za.get()&&(this.selected=this.fallbackSelection)}},_filterItem:function(a){return!this._excludedLocalNames[a.localName]},_valueToItem:function(a){return null==a?null:this.items[this._valueToIndex(a)]},_valueToIndex:function(a){if(this.attrForSelected)for(var b=\n0,c;c=this.items[b];b++){if(this._valueForIte",
                      "markdown": "`em&&\n(this.selected=this._valueForItem(this.selectedItem))},_updateSelected:function(){this._selectSelected(this.selected)},_selectSelected:function(){if(this.items){var a=this._valueToItem(this.selected);a?this.za.select(a):this.za.clear();this.fallbackSelection&&this.items.length&&void 0===this.za.get()&&(this.selected=this.fallbackSelection)}},_filterItem:function(a){return!this._excludedLocalNames[a.localName]},_valueToItem:function(a){return null==a?null:this.items[this._valueToIndex(a)]},_valueToIndex:function(a){if(this.attrForSelected)for(var b=\n0,c;c=this.items[b];b++){if(this._valueForIte`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 1772,
                  "startColumn": 76,
                  "endLine": 1772,
                  "endColumn": 81,
                  "snippet": {
                    "text": "is)};m.isSelected=function(a){return 0<=this.selection.indexOf(a)};function Yj(a,b,c){if(null!=b&&c!==a.isSelected(b)){if(c)a.selection.push(b);else{var d=a.selection.indexOf(b);0<=d&&a.selection.splice(d,1)}a.g&&a.g(b,c)}}\nm.select=function(a){this.multi?this.toggle(a):this.get()!==a&&(Yj(this,this.get(),!1),Yj(this,a,!0))};m.toggle=function(a){Yj(this,a,!this.isSelected(a))};var Zj={properties:{attrForSelected:{type:String,value:null},selected:{type:String,notify:!0},selectedItem:{type:Object,readOnly:!0,notify:!0},activateEvent:{type:String,value:\"tap\",observer:\"_activateEventChanged\"},selectabl",
                    "rendered": {
                      "text": "is)};m.isSelected=function(a){return 0<=this.selection.indexOf(a)};function Yj(a,b,c){if(null!=b&&c!==a.isSelected(b)){if(c)a.selection.push(b);else{var d=a.selection.indexOf(b);0<=d&&a.selection.splice(d,1)}a.g&&a.g(b,c)}}\nm.select=function(a){this.multi?this.toggle(a):this.get()!==a&&(Yj(this,this.get(),!1),Yj(this,a,!0))};m.toggle=function(a){Yj(this,a,!this.isSelected(a))};var Zj={properties:{attrForSelected:{type:String,value:null},selected:{type:String,notify:!0},selectedItem:{type:Object,readOnly:!0,notify:!0},activateEvent:{type:String,value:\"tap\",observer:\"_activateEventChanged\"},selectabl",
                      "markdown": "`is)};m.isSelected=function(a){return 0<=this.selection.indexOf(a)};function Yj(a,b,c){if(null!=b&&c!==a.isSelected(b)){if(c)a.selection.push(b);else{var d=a.selection.indexOf(b);0<=d&&a.selection.splice(d,1)}a.g&&a.g(b,c)}}\nm.select=function(a){this.multi?this.toggle(a):this.get()!==a&&(Yj(this,this.get(),!1),Yj(this,a,!0))};m.toggle=function(a){Yj(this,a,!this.isSelected(a))};var Zj={properties:{attrForSelected:{type:String,value:null},selected:{type:String,notify:!0},selectedItem:{type:Object,readOnly:!0,notify:!0},activateEvent:{type:String,value:\"tap\",observer:\"_activateEventChanged\"},selectabl`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 1772,
                  "startColumn": 51,
                  "endLine": 1772,
                  "endColumn": 56,
                  "snippet": {
                    "text": "Of(b))&&Yj(this,b,!1)},this)};m.isSelected=function(a){return 0<=this.selection.indexOf(a)};function Yj(a,b,c){if(null!=b&&c!==a.isSelected(b)){if(c)a.selection.push(b);else{var d=a.selection.indexOf(b);0<=d&&a.selection.splice(d,1)}a.g&&a.g(b,c)}}\nm.select=function(a){this.multi?this.toggle(a):this.get()!==a&&(Yj(this,this.get(),!1),Yj(this,a,!0))};m.toggle=function(a){Yj(this,a,!this.isSelected(a))};var Zj={properties:{attrForSelected:{type:String,value:null},selected:{type:String,notify:!0},selectedItem:{type:Object,readOnly:!0,notify:!0},activateEvent:{type:String,value:\"tap\",observer:\"_activat",
                    "rendered": {
                      "text": "Of(b))&&Yj(this,b,!1)},this)};m.isSelected=function(a){return 0<=this.selection.indexOf(a)};function Yj(a,b,c){if(null!=b&&c!==a.isSelected(b)){if(c)a.selection.push(b);else{var d=a.selection.indexOf(b);0<=d&&a.selection.splice(d,1)}a.g&&a.g(b,c)}}\nm.select=function(a){this.multi?this.toggle(a):this.get()!==a&&(Yj(this,this.get(),!1),Yj(this,a,!0))};m.toggle=function(a){Yj(this,a,!this.isSelected(a))};var Zj={properties:{attrForSelected:{type:String,value:null},selected:{type:String,notify:!0},selectedItem:{type:Object,readOnly:!0,notify:!0},activateEvent:{type:String,value:\"tap\",observer:\"_activat",
                      "markdown": "`Of(b))&&Yj(this,b,!1)},this)};m.isSelected=function(a){return 0<=this.selection.indexOf(a)};function Yj(a,b,c){if(null!=b&&c!==a.isSelected(b)){if(c)a.selection.push(b);else{var d=a.selection.indexOf(b);0<=d&&a.selection.splice(d,1)}a.g&&a.g(b,c)}}\nm.select=function(a){this.multi?this.toggle(a):this.get()!==a&&(Yj(this,this.get(),!1),Yj(this,a,!0))};m.toggle=function(a){Yj(this,a,!this.isSelected(a))};var Zj={properties:{attrForSelected:{type:String,value:null},selected:{type:String,notify:!0},selectedItem:{type:Object,readOnly:!0,notify:!0},activateEvent:{type:String,value:\"tap\",observer:\"_activat`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 1572,
                  "startColumn": 337,
                  "endLine": 1572,
                  "endColumn": 342,
                  "snippet": {
                    "text": "tion(d){var e=this,f=this.__selectedIndexForItemIndex(d);if(0<=f){var g=0;this.xa.forEach(function(h,k){f==g++&&e.deselect(k)})}};b.prototype.__selectedIndexForItemIndex=function(d){if(d=this.__dataLinkedPaths[\"items.\"+d])return parseInt(d.slice(9),10)};b.prototype.deselect=function(d){var e=this.xa.get(d);if(0<=e){this.xa.delete(d);var f;this.multi&&(f=this.__selectedIndexForItemIndex(e));this.__updateLinks();this.multi?this.splice(\"selected\",f,1):this.selected=\nthis.selectedItem=null}};b.prototype.deselectIndex=function(d){this.deselect(this.items[d])};b.prototype.select=function(d){this.selectIn",
                    "rendered": {
                      "text": "tion(d){var e=this,f=this.__selectedIndexForItemIndex(d);if(0<=f){var g=0;this.xa.forEach(function(h,k){f==g++&&e.deselect(k)})}};b.prototype.__selectedIndexForItemIndex=function(d){if(d=this.__dataLinkedPaths[\"items.\"+d])return parseInt(d.slice(9),10)};b.prototype.deselect=function(d){var e=this.xa.get(d);if(0<=e){this.xa.delete(d);var f;this.multi&&(f=this.__selectedIndexForItemIndex(e));this.__updateLinks();this.multi?this.splice(\"selected\",f,1):this.selected=\nthis.selectedItem=null}};b.prototype.deselectIndex=function(d){this.deselect(this.items[d])};b.prototype.select=function(d){this.selectIn",
                      "markdown": "`tion(d){var e=this,f=this.__selectedIndexForItemIndex(d);if(0<=f){var g=0;this.xa.forEach(function(h,k){f==g++&&e.deselect(k)})}};b.prototype.__selectedIndexForItemIndex=function(d){if(d=this.__dataLinkedPaths[\"items.\"+d])return parseInt(d.slice(9),10)};b.prototype.deselect=function(d){var e=this.xa.get(d);if(0<=e){this.xa.delete(d);var f;this.multi&&(f=this.__selectedIndexForItemIndex(e));this.__updateLinks();this.multi?this.splice(\"selected\",f,1):this.selected=\nthis.selectedItem=null}};b.prototype.deselectIndex=function(d){this.deselect(this.items[d])};b.prototype.select=function(d){this.selectIn`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 1552,
                  "startColumn": 431,
                  "endLine": 1552,
                  "endColumn": 436,
                  "snippet": {
                    "text": "otype.listen=function(f,g,h){f=f||this;var k=this.__boundListeners||(this.__boundListeners=new WeakMap),l=k.get(f);l||(l={},k.set(f,l));k=g+h;l[k]||(l[k]=this._addMethodEventListenerToNode(f,g,h,this))};b.prototype.unlisten=function(f,g,h){f=f||this;var k=this.__boundListeners&&this.__boundListeners.get(f);h=g+h;var l=k&&k[h];l&&(this._removeEventListenerFromNode(f,g,\nl),k[h]=null)};b.prototype.setScrollDirection=function(f,g){Gg(g||this,e[f]||\"auto\")};b.prototype.$$=function(f){return this.root.querySelector(f)};b.prototype.distributeContent=function(){var f=P(this);window.ShadyDOM&&f.shadowRoot&&",
                    "rendered": {
                      "text": "otype.listen=function(f,g,h){f=f||this;var k=this.__boundListeners||(this.__boundListeners=new WeakMap),l=k.get(f);l||(l={},k.set(f,l));k=g+h;l[k]||(l[k]=this._addMethodEventListenerToNode(f,g,h,this))};b.prototype.unlisten=function(f,g,h){f=f||this;var k=this.__boundListeners&&this.__boundListeners.get(f);h=g+h;var l=k&&k[h];l&&(this._removeEventListenerFromNode(f,g,\nl),k[h]=null)};b.prototype.setScrollDirection=function(f,g){Gg(g||this,e[f]||\"auto\")};b.prototype.$$=function(f){return this.root.querySelector(f)};b.prototype.distributeContent=function(){var f=P(this);window.ShadyDOM&&f.shadowRoot&&",
                      "markdown": "`otype.listen=function(f,g,h){f=f||this;var k=this.__boundListeners||(this.__boundListeners=new WeakMap),l=k.get(f);l||(l={},k.set(f,l));k=g+h;l[k]||(l[k]=this._addMethodEventListenerToNode(f,g,h,this))};b.prototype.unlisten=function(f,g,h){f=f||this;var k=this.__boundListeners&&this.__boundListeners.get(f);h=g+h;var l=k&&k[h];l&&(this._removeEventListenerFromNode(f,g,\nl),k[h]=null)};b.prototype.setScrollDirection=function(f,g){Gg(g||this,e[f]||\"auto\")};b.prototype.$$=function(f){return this.root.querySelector(f)};b.prototype.distributeContent=function(){var f=P(this);window.ShadyDOM&&f.shadowRoot&&`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 1552,
                  "startColumn": 238,
                  "endLine": 1552,
                  "endColumn": 243,
                  "snippet": {
                    "text": "?{}:g;f=new Event(f,{bubbles:void 0===h.bubbles?!0:h.bubbles,\ncancelable:!!h.cancelable,composed:void 0===h.composed?!0:h.composed});f.detail=g;N(h.node||this).dispatchEvent(f);return f};b.prototype.listen=function(f,g,h){f=f||this;var k=this.__boundListeners||(this.__boundListeners=new WeakMap),l=k.get(f);l||(l={},k.set(f,l));k=g+h;l[k]||(l[k]=this._addMethodEventListenerToNode(f,g,h,this))};b.prototype.unlisten=function(f,g,h){f=f||this;var k=this.__boundListeners&&this.__boundListeners.get(f);h=g+h;var l=k&&k[h];l&&(this._removeEventListenerFromNode(f,g,\nl),k[h]=null)};b.prototype.setScrollDirec",
                    "rendered": {
                      "text": "?{}:g;f=new Event(f,{bubbles:void 0===h.bubbles?!0:h.bubbles,\ncancelable:!!h.cancelable,composed:void 0===h.composed?!0:h.composed});f.detail=g;N(h.node||this).dispatchEvent(f);return f};b.prototype.listen=function(f,g,h){f=f||this;var k=this.__boundListeners||(this.__boundListeners=new WeakMap),l=k.get(f);l||(l={},k.set(f,l));k=g+h;l[k]||(l[k]=this._addMethodEventListenerToNode(f,g,h,this))};b.prototype.unlisten=function(f,g,h){f=f||this;var k=this.__boundListeners&&this.__boundListeners.get(f);h=g+h;var l=k&&k[h];l&&(this._removeEventListenerFromNode(f,g,\nl),k[h]=null)};b.prototype.setScrollDirec",
                      "markdown": "`?{}:g;f=new Event(f,{bubbles:void 0===h.bubbles?!0:h.bubbles,\ncancelable:!!h.cancelable,composed:void 0===h.composed?!0:h.composed});f.detail=g;N(h.node||this).dispatchEvent(f);return f};b.prototype.listen=function(f,g,h){f=f||this;var k=this.__boundListeners||(this.__boundListeners=new WeakMap),l=k.get(f);l||(l={},k.set(f,l));k=g+h;l[k]||(l[k]=this._addMethodEventListenerToNode(f,g,h,this))};b.prototype.unlisten=function(f,g,h){f=f||this;var k=this.__boundListeners&&this.__boundListeners.get(f);h=g+h;var l=k&&k[h];l&&(this._removeEventListenerFromNode(f,g,\nl),k[h]=null)};b.prototype.setScrollDirec`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 1538,
                  "startColumn": 191,
                  "endLine": 1538,
                  "endColumn": 196,
                  "snippet": {
                    "text": "join(\":\"),b&&(d=this.ql(c,d)),e[c]=d);return e};m.cl=function(a){if(Ih)for(var b in a.pi)b!==this.j&&Ih(b)};\nm.pl=function(a,b,c,d,e){var f=this;c&&Ch(c,function(t,v){v&&f.g.get(v)&&(d=\"@apply \"+v+\";\")});if(!d)return a;var g=this.ai(\"\"+d,e);e=a.slice(0,a.indexOf(\"--\"));var h=g=this.hg(g,!0),k=this.g.get(b),l=k&&k.properties;l?h=Object.assign(Object.create(l),g):this.g.set(b,h);var n=[],p,q=!1;for(p in h){var r=g[p];void 0===r&&(r=\"initial\");!l||p in l||(q=!0);n.push(b+\"_-_\"+p+\": \"+r)}q&&this.cl(k);k&&(k.properties=h);c&&(e=a+\";\"+e);return e+n.join(\"; \")+\";\"};S.prototype.detectMixin=S.prototype.am;\n",
                    "rendered": {
                      "text": "join(\":\"),b&&(d=this.ql(c,d)),e[c]=d);return e};m.cl=function(a){if(Ih)for(var b in a.pi)b!==this.j&&Ih(b)};\nm.pl=function(a,b,c,d,e){var f=this;c&&Ch(c,function(t,v){v&&f.g.get(v)&&(d=\"@apply \"+v+\";\")});if(!d)return a;var g=this.ai(\"\"+d,e);e=a.slice(0,a.indexOf(\"--\"));var h=g=this.hg(g,!0),k=this.g.get(b),l=k&&k.properties;l?h=Object.assign(Object.create(l),g):this.g.set(b,h);var n=[],p,q=!1;for(p in h){var r=g[p];void 0===r&&(r=\"initial\");!l||p in l||(q=!0);n.push(b+\"_-_\"+p+\": \"+r)}q&&this.cl(k);k&&(k.properties=h);c&&(e=a+\";\"+e);return e+n.join(\"; \")+\";\"};S.prototype.detectMixin=S.prototype.am;\n",
                      "markdown": "`join(\":\"),b&&(d=this.ql(c,d)),e[c]=d);return e};m.cl=function(a){if(Ih)for(var b in a.pi)b!==this.j&&Ih(b)};\nm.pl=function(a,b,c,d,e){var f=this;c&&Ch(c,function(t,v){v&&f.g.get(v)&&(d=\"@apply \"+v+\";\")});if(!d)return a;var g=this.ai(\"\"+d,e);e=a.slice(0,a.indexOf(\"--\"));var h=g=this.hg(g,!0),k=this.g.get(b),l=k&&k.properties;l?h=Object.assign(Object.create(l),g):this.g.set(b,h);var n=[],p,q=!1;for(p in h){var r=g[p];void 0===r&&(r=\"initial\");!l||p in l||(q=!0);n.push(b+\"_-_\"+p+\": \"+r)}q&&this.cl(k);k&&(k.properties=h);c&&(e=a+\";\"+e);return e+n.join(\"; \")+\";\"};S.prototype.detectMixin=S.prototype.am;\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 1538,
                  "startColumn": 64,
                  "endLine": 1538,
                  "endColumn": 69,
                  "snippet": {
                    "text": "0===b?!1:b;a=a.split(\";\");for(var c,d,e={},f=0;f<a.length;f++)if(c=a[f])d=c.split(\":\"),1<d.length&&(c=d[0].trim(),d=d.slice(1).join(\":\"),b&&(d=this.ql(c,d)),e[c]=d);return e};m.cl=function(a){if(Ih)for(var b in a.pi)b!==this.j&&Ih(b)};\nm.pl=function(a,b,c,d,e){var f=this;c&&Ch(c,function(t,v){v&&f.g.get(v)&&(d=\"@apply \"+v+\";\")});if(!d)return a;var g=this.ai(\"\"+d,e);e=a.slice(0,a.indexOf(\"--\"));var h=g=this.hg(g,!0),k=this.g.get(b),l=k&&k.properties;l?h=Object.assign(Object.create(l),g):this.g.set(b,h);var n=[],p,q=!1;for(p in h){var r=g[p];void 0===r&&(r=\"initial\");!l||p in l||(q=!0);n.push(b+\"_-_\"",
                    "rendered": {
                      "text": "0===b?!1:b;a=a.split(\";\");for(var c,d,e={},f=0;f<a.length;f++)if(c=a[f])d=c.split(\":\"),1<d.length&&(c=d[0].trim(),d=d.slice(1).join(\":\"),b&&(d=this.ql(c,d)),e[c]=d);return e};m.cl=function(a){if(Ih)for(var b in a.pi)b!==this.j&&Ih(b)};\nm.pl=function(a,b,c,d,e){var f=this;c&&Ch(c,function(t,v){v&&f.g.get(v)&&(d=\"@apply \"+v+\";\")});if(!d)return a;var g=this.ai(\"\"+d,e);e=a.slice(0,a.indexOf(\"--\"));var h=g=this.hg(g,!0),k=this.g.get(b),l=k&&k.properties;l?h=Object.assign(Object.create(l),g):this.g.set(b,h);var n=[],p,q=!1;for(p in h){var r=g[p];void 0===r&&(r=\"initial\");!l||p in l||(q=!0);n.push(b+\"_-_\"",
                      "markdown": "`0===b?!1:b;a=a.split(\";\");for(var c,d,e={},f=0;f<a.length;f++)if(c=a[f])d=c.split(\":\"),1<d.length&&(c=d[0].trim(),d=d.slice(1).join(\":\"),b&&(d=this.ql(c,d)),e[c]=d);return e};m.cl=function(a){if(Ih)for(var b in a.pi)b!==this.j&&Ih(b)};\nm.pl=function(a,b,c,d,e){var f=this;c&&Ch(c,function(t,v){v&&f.g.get(v)&&(d=\"@apply \"+v+\";\")});if(!d)return a;var g=this.ai(\"\"+d,e);e=a.slice(0,a.indexOf(\"--\"));var h=g=this.hg(g,!0),k=this.g.get(b),l=k&&k.properties;l?h=Object.assign(Object.create(l),g):this.g.set(b,h);var n=[],p,q=!1;for(p in h){var r=g[p];void 0===r&&(r=\"initial\");!l||p in l||(q=!0);n.push(b+\"_-_\"`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 1536,
                  "startColumn": 92,
                  "endLine": 1536,
                  "endColumn": 97,
                  "snippet": {
                    "text": ".exec(a);){var d=c[0],e=c[1];c=c.index;var f=c+d.indexOf(\"@apply\");f=a.slice(0,f);a=a.slice(c+d.length);d=b?this.xk(b):{};Object.assign(d,this.hg(f));e=this.rk(e,d);a=f+e+a;oh.lastIndex=c+e.length}return a};\nm.rk=function(a,b){a=a.replace(Eh,\"\");var c=[],d=this.g.get(a);d||(this.g.set(a,{}),d=this.g.get(a));if(d){this.j&&(d.pi[this.j]=!0);var e,f=d.properties;for(e in f){var g=b&&b[e];d=[e,\": var(\",a,\"_-_\",e];g&&d.push(\",\",g.replace(Gh,\"\"));d.push(\")\");Gh.test(f[e])&&d.push(\" !important\");c.push(d.join(\"\"))}}return c.join(\"; \")};m.ql=function(a,b){var c=Fh.exec(b);c&&(b=c[1]?this.zk(a):\"apply-shim-",
                    "rendered": {
                      "text": ".exec(a);){var d=c[0],e=c[1];c=c.index;var f=c+d.indexOf(\"@apply\");f=a.slice(0,f);a=a.slice(c+d.length);d=b?this.xk(b):{};Object.assign(d,this.hg(f));e=this.rk(e,d);a=f+e+a;oh.lastIndex=c+e.length}return a};\nm.rk=function(a,b){a=a.replace(Eh,\"\");var c=[],d=this.g.get(a);d||(this.g.set(a,{}),d=this.g.get(a));if(d){this.j&&(d.pi[this.j]=!0);var e,f=d.properties;for(e in f){var g=b&&b[e];d=[e,\": var(\",a,\"_-_\",e];g&&d.push(\",\",g.replace(Gh,\"\"));d.push(\")\");Gh.test(f[e])&&d.push(\" !important\");c.push(d.join(\"\"))}}return c.join(\"; \")};m.ql=function(a,b){var c=Fh.exec(b);c&&(b=c[1]?this.zk(a):\"apply-shim-",
                      "markdown": "`.exec(a);){var d=c[0],e=c[1];c=c.index;var f=c+d.indexOf(\"@apply\");f=a.slice(0,f);a=a.slice(c+d.length);d=b?this.xk(b):{};Object.assign(d,this.hg(f));e=this.rk(e,d);a=f+e+a;oh.lastIndex=c+e.length}return a};\nm.rk=function(a,b){a=a.replace(Eh,\"\");var c=[],d=this.g.get(a);d||(this.g.set(a,{}),d=this.g.get(a));if(d){this.j&&(d.pi[this.j]=!0);var e,f=d.properties;for(e in f){var g=b&&b[e];d=[e,\": var(\",a,\"_-_\",e];g&&d.push(\",\",g.replace(Gh,\"\"));d.push(\")\");Gh.test(f[e])&&d.push(\" !important\");c.push(d.join(\"\"))}}return c.join(\"; \")};m.ql=function(a,b){var c=Fh.exec(b);c&&(b=c[1]?this.zk(a):\"apply-shim-`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 1536,
                  "startColumn": 55,
                  "endLine": 1536,
                  "endColumn": 60,
                  "snippet": {
                    "text": " d};m.ai=function(a,b){for(var c;c=oh.exec(a);){var d=c[0],e=c[1];c=c.index;var f=c+d.indexOf(\"@apply\");f=a.slice(0,f);a=a.slice(c+d.length);d=b?this.xk(b):{};Object.assign(d,this.hg(f));e=this.rk(e,d);a=f+e+a;oh.lastIndex=c+e.length}return a};\nm.rk=function(a,b){a=a.replace(Eh,\"\");var c=[],d=this.g.get(a);d||(this.g.set(a,{}),d=this.g.get(a));if(d){this.j&&(d.pi[this.j]=!0);var e,f=d.properties;for(e in f){var g=b&&b[e];d=[e,\": var(\",a,\"_-_\",e];g&&d.push(\",\",g.replace(Gh,\"\"));d.push(\")\");Gh.test(f[e])&&d.push(\" !important\");c.push(d.join(\"\"))}}return c.join(\"; \")};m.ql=function(a,b){var c=Fh.exec(",
                    "rendered": {
                      "text": " d};m.ai=function(a,b){for(var c;c=oh.exec(a);){var d=c[0],e=c[1];c=c.index;var f=c+d.indexOf(\"@apply\");f=a.slice(0,f);a=a.slice(c+d.length);d=b?this.xk(b):{};Object.assign(d,this.hg(f));e=this.rk(e,d);a=f+e+a;oh.lastIndex=c+e.length}return a};\nm.rk=function(a,b){a=a.replace(Eh,\"\");var c=[],d=this.g.get(a);d||(this.g.set(a,{}),d=this.g.get(a));if(d){this.j&&(d.pi[this.j]=!0);var e,f=d.properties;for(e in f){var g=b&&b[e];d=[e,\": var(\",a,\"_-_\",e];g&&d.push(\",\",g.replace(Gh,\"\"));d.push(\")\");Gh.test(f[e])&&d.push(\" !important\");c.push(d.join(\"\"))}}return c.join(\"; \")};m.ql=function(a,b){var c=Fh.exec(",
                      "markdown": "` d};m.ai=function(a,b){for(var c;c=oh.exec(a);){var d=c[0],e=c[1];c=c.index;var f=c+d.indexOf(\"@apply\");f=a.slice(0,f);a=a.slice(c+d.length);d=b?this.xk(b):{};Object.assign(d,this.hg(f));e=this.rk(e,d);a=f+e+a;oh.lastIndex=c+e.length}return a};\nm.rk=function(a,b){a=a.replace(Eh,\"\");var c=[],d=this.g.get(a);d||(this.g.set(a,{}),d=this.g.get(a));if(d){this.j&&(d.pi[this.j]=!0);var e,f=d.properties;for(e in f){var g=b&&b[e];d=[e,\": var(\",a,\"_-_\",e];g&&d.push(\",\",g.replace(Gh,\"\"));d.push(\")\");Gh.test(f[e])&&d.push(\" !important\");c.push(d.join(\"\"))}}return c.join(\"; \")};m.ql=function(a,b){var c=Fh.exec(`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 1433,
                  "startColumn": 339,
                  "endLine": 1433,
                  "endColumn": 344,
                  "snippet": {
                    "text": "&&(c=le(c,e.attrName,\"attribute\",a));a._propertyToAttribute(b,e.attrName,c)}function Ff(a,b,c,d,e){var f=e?qf(a):a;if(b=b[f])for(f=0;f<b.length;f++){var g=b[f];if(g.info.zd!==uf&&(!e||Af(a,g.trigger))){g.info.zd=uf;g=g.info;for(var h=c,k=d,l=0,n=h.length-1,p=-1;l<=n;){var q=l+n>>1,r=k.get(h[q].ae)-k.get(g.ae);if(0>r)l=q+1;else if(0<r)n=q-1;else{p=q;break}}0>p&&(p=n+1);h.splice(p,0,g)}}}\nfunction Gf(a){var b=a.constructor.jk;if(!b){b=new Map;for(var c=a.__computeEffects,d=Hf(a),e=d.xl,f=d.ready,g=d.total;d=f.shift();)b.set(d,b.size),(d=c[d])&&d.forEach(function(h){h=h.info.ae;--g;0===--e[h]&&f.push(",
                    "rendered": {
                      "text": "&&(c=le(c,e.attrName,\"attribute\",a));a._propertyToAttribute(b,e.attrName,c)}function Ff(a,b,c,d,e){var f=e?qf(a):a;if(b=b[f])for(f=0;f<b.length;f++){var g=b[f];if(g.info.zd!==uf&&(!e||Af(a,g.trigger))){g.info.zd=uf;g=g.info;for(var h=c,k=d,l=0,n=h.length-1,p=-1;l<=n;){var q=l+n>>1,r=k.get(h[q].ae)-k.get(g.ae);if(0>r)l=q+1;else if(0<r)n=q-1;else{p=q;break}}0>p&&(p=n+1);h.splice(p,0,g)}}}\nfunction Gf(a){var b=a.constructor.jk;if(!b){b=new Map;for(var c=a.__computeEffects,d=Hf(a),e=d.xl,f=d.ready,g=d.total;d=f.shift();)b.set(d,b.size),(d=c[d])&&d.forEach(function(h){h=h.info.ae;--g;0===--e[h]&&f.push(",
                      "markdown": "`&&(c=le(c,e.attrName,\"attribute\",a));a._propertyToAttribute(b,e.attrName,c)}function Ff(a,b,c,d,e){var f=e?qf(a):a;if(b=b[f])for(f=0;f<b.length;f++){var g=b[f];if(g.info.zd!==uf&&(!e||Af(a,g.trigger))){g.info.zd=uf;g=g.info;for(var h=c,k=d,l=0,n=h.length-1,p=-1;l<=n;){var q=l+n>>1,r=k.get(h[q].ae)-k.get(g.ae);if(0>r)l=q+1;else if(0<r)n=q-1;else{p=q;break}}0>p&&(p=n+1);h.splice(p,0,g)}}}\nfunction Gf(a){var b=a.constructor.jk;if(!b){b=new Map;for(var c=a.__computeEffects,d=Hf(a),e=d.xl,f=d.ready,g=d.total;d=f.shift();)b.set(d,b.size),(d=c[d])&&d.forEach(function(h){h=h.info.ae;--g;0===--e[h]&&f.push(`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 1433,
                  "startColumn": 324,
                  "endLine": 1433,
                  "endColumn": 329,
                  "snippet": {
                    "text": "=a.__data[b];le&&(c=le(c,e.attrName,\"attribute\",a));a._propertyToAttribute(b,e.attrName,c)}function Ff(a,b,c,d,e){var f=e?qf(a):a;if(b=b[f])for(f=0;f<b.length;f++){var g=b[f];if(g.info.zd!==uf&&(!e||Af(a,g.trigger))){g.info.zd=uf;g=g.info;for(var h=c,k=d,l=0,n=h.length-1,p=-1;l<=n;){var q=l+n>>1,r=k.get(h[q].ae)-k.get(g.ae);if(0>r)l=q+1;else if(0<r)n=q-1;else{p=q;break}}0>p&&(p=n+1);h.splice(p,0,g)}}}\nfunction Gf(a){var b=a.constructor.jk;if(!b){b=new Map;for(var c=a.__computeEffects,d=Hf(a),e=d.xl,f=d.ready,g=d.total;d=f.shift();)b.set(d,b.size),(d=c[d])&&d.forEach(function(h){h=h.info.ae;--g;0===",
                    "rendered": {
                      "text": "=a.__data[b];le&&(c=le(c,e.attrName,\"attribute\",a));a._propertyToAttribute(b,e.attrName,c)}function Ff(a,b,c,d,e){var f=e?qf(a):a;if(b=b[f])for(f=0;f<b.length;f++){var g=b[f];if(g.info.zd!==uf&&(!e||Af(a,g.trigger))){g.info.zd=uf;g=g.info;for(var h=c,k=d,l=0,n=h.length-1,p=-1;l<=n;){var q=l+n>>1,r=k.get(h[q].ae)-k.get(g.ae);if(0>r)l=q+1;else if(0<r)n=q-1;else{p=q;break}}0>p&&(p=n+1);h.splice(p,0,g)}}}\nfunction Gf(a){var b=a.constructor.jk;if(!b){b=new Map;for(var c=a.__computeEffects,d=Hf(a),e=d.xl,f=d.ready,g=d.total;d=f.shift();)b.set(d,b.size),(d=c[d])&&d.forEach(function(h){h=h.info.ae;--g;0===",
                      "markdown": "`=a.__data[b];le&&(c=le(c,e.attrName,\"attribute\",a));a._propertyToAttribute(b,e.attrName,c)}function Ff(a,b,c,d,e){var f=e?qf(a):a;if(b=b[f])for(f=0;f<b.length;f++){var g=b[f];if(g.info.zd!==uf&&(!e||Af(a,g.trigger))){g.info.zd=uf;g=g.info;for(var h=c,k=d,l=0,n=h.length-1,p=-1;l<=n;){var q=l+n>>1,r=k.get(h[q].ae)-k.get(g.ae);if(0>r)l=q+1;else if(0<r)n=q-1;else{p=q;break}}0>p&&(p=n+1);h.splice(p,0,g)}}}\nfunction Gf(a){var b=a.constructor.jk;if(!b){b=new Map;for(var c=a.__computeEffects,d=Hf(a),e=d.xl,f=d.ready,g=d.total;d=f.shift();)b.set(d,b.size),(d=c[d])&&d.forEach(function(h){h=h.info.ae;--g;0===`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 1363,
                  "startColumn": 312,
                  "endLine": 1363,
                  "endColumn": 317,
                  "snippet": {
                    "text": "function(a){Id||(Id=!0,Jd.textContent=Hd++);Gd.push(a);return Ed++},cancel:function(a){var b=a-Fd;if(0<=b){if(!Gd[b])throw Error(\"invalid async handle: \"+a);Gd[b]=null}}};var Nd=0;function M(a){var b=a.h;b||(b=new WeakMap,a.h=b);var c=Nd++;return function(d){var e=d.g;if(e&&e[c])return d;var f=b,g=f.get(d);g||(g=a(d),f.set(d,g),d=Object.create(g.g||e||null),d[c]=!0,g.g=d);return g}};function Od(){this.g=this.j=this.h=null}function Pd(a,b,c){a.h=b;a.j=c;a.g=a.h.run(function(){a.g=null;Qd.delete(a);a.j()})}Od.prototype.cancel=function(){this.isActive()&&(this.l(),Qd.delete(this))};Od.prototype.l=func",
                    "rendered": {
                      "text": "function(a){Id||(Id=!0,Jd.textContent=Hd++);Gd.push(a);return Ed++},cancel:function(a){var b=a-Fd;if(0<=b){if(!Gd[b])throw Error(\"invalid async handle: \"+a);Gd[b]=null}}};var Nd=0;function M(a){var b=a.h;b||(b=new WeakMap,a.h=b);var c=Nd++;return function(d){var e=d.g;if(e&&e[c])return d;var f=b,g=f.get(d);g||(g=a(d),f.set(d,g),d=Object.create(g.g||e||null),d[c]=!0,g.g=d);return g}};function Od(){this.g=this.j=this.h=null}function Pd(a,b,c){a.h=b;a.j=c;a.g=a.h.run(function(){a.g=null;Qd.delete(a);a.j()})}Od.prototype.cancel=function(){this.isActive()&&(this.l(),Qd.delete(this))};Od.prototype.l=func",
                      "markdown": "`function(a){Id||(Id=!0,Jd.textContent=Hd++);Gd.push(a);return Ed++},cancel:function(a){var b=a-Fd;if(0<=b){if(!Gd[b])throw Error(\"invalid async handle: \"+a);Gd[b]=null}}};var Nd=0;function M(a){var b=a.h;b||(b=new WeakMap,a.h=b);var c=Nd++;return function(d){var e=d.g;if(e&&e[c])return d;var f=b,g=f.get(d);g||(g=a(d),f.set(d,g),d=Object.create(g.g||e||null),d[c]=!0,g.g=d);return g}};function Od(){this.g=this.j=this.h=null}function Pd(a,b,c){a.h=b;a.j=c;a.g=a.h.run(function(){a.g=null;Qd.delete(a);a.j()})}Od.prototype.cancel=function(){this.isActive()&&(this.l(),Qd.delete(this))};Od.prototype.l=func`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 1323,
                  "startColumn": 48,
                  "endLine": 1323,
                  "endColumn": 53,
                  "snippet": {
                    "text": "k(a,c)};m.nk=function(a,b,c){c=void 0===c?id:c;var d=this.constructor.lc(a,c);if(void 0!==d&&!0===c.vg){var e,f=(void 0!==(null==(e=c.cd)?void 0:e.oj)?c.cd:gd).oj(b,c.type);this.h=a;null==f?this.removeAttribute(d):this.setAttribute(d,f);this.h=null}};\nm.ak=function(a,b){var c=this.constructor;a=c.eh.get(a);if(void 0!==a&&this.h!==a){c=c.fd(a);var d,e=\"function\"===typeof c.cd?{rg:c.cd}:void 0!==(null==(d=c.cd)?void 0:d.rg)?c.cd:gd;this.h=a;this[a]=e.rg(b,c.type);this.h=null}};function jd(a,b,c,d){var e=!0;void 0!==b&&(d=d||a.constructor.fd(b),(d.yi||hd)(a[b],c)?(a.o.has(b)||a.o.set(b,c),!0===d.vg&&a",
                    "rendered": {
                      "text": "k(a,c)};m.nk=function(a,b,c){c=void 0===c?id:c;var d=this.constructor.lc(a,c);if(void 0!==d&&!0===c.vg){var e,f=(void 0!==(null==(e=c.cd)?void 0:e.oj)?c.cd:gd).oj(b,c.type);this.h=a;null==f?this.removeAttribute(d):this.setAttribute(d,f);this.h=null}};\nm.ak=function(a,b){var c=this.constructor;a=c.eh.get(a);if(void 0!==a&&this.h!==a){c=c.fd(a);var d,e=\"function\"===typeof c.cd?{rg:c.cd}:void 0!==(null==(d=c.cd)?void 0:d.rg)?c.cd:gd;this.h=a;this[a]=e.rg(b,c.type);this.h=null}};function jd(a,b,c,d){var e=!0;void 0!==b&&(d=d||a.constructor.fd(b),(d.yi||hd)(a[b],c)?(a.o.has(b)||a.o.set(b,c),!0===d.vg&&a",
                      "markdown": "`k(a,c)};m.nk=function(a,b,c){c=void 0===c?id:c;var d=this.constructor.lc(a,c);if(void 0!==d&&!0===c.vg){var e,f=(void 0!==(null==(e=c.cd)?void 0:e.oj)?c.cd:gd).oj(b,c.type);this.h=a;null==f?this.removeAttribute(d):this.setAttribute(d,f);this.h=null}};\nm.ak=function(a,b){var c=this.constructor;a=c.eh.get(a);if(void 0!==a&&this.h!==a){c=c.fd(a);var d,e=\"function\"===typeof c.cd?{rg:c.cd}:void 0!==(null==(d=c.cd)?void 0:d.rg)?c.cd:gd;this.h=a;this[a]=e.rg(b,c.type);this.h=null}};function jd(a,b,c,d){var e=!0;void 0!==b&&(d=d||a.constructor.fd(b),(d.yi||hd)(a[b],c)?(a.o.has(b)||a.o.set(b,c),!0===d.vg&&a`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 1319,
                  "startColumn": 31,
                  "endLine": 1319,
                  "endColumn": 36,
                  "snippet": {
                    "text": "wnProperty(a)||(b=this.h(a,\"symbol\"===typeof a?Symbol():\"__\"+a,b),void 0!==b&&Object.defineProperty(this.prototype,a,b))};J.h=function(a,b,c){return{get:function(){return this[b]},set:function(d){var e=this[a];this[b]=d;jd(this,a,e,c)},configurable:!0,enumerable:!0}};\nJ.fd=function(a){return this.ab.get(a)||id};J.finalize=function(){if(this.hasOwnProperty(\"finalized\"))return!1;this.finalized=!0;var a=Object.getPrototypeOf(this);a.finalize();void 0!==a.ig&&(this.ig=[].concat(A(a.ig)));this.ab=new Map(a.ab);this.eh=new Map;if(this.hasOwnProperty(\"properties\")){a=this.properties;var b=[].concat(A(Obje",
                    "rendered": {
                      "text": "wnProperty(a)||(b=this.h(a,\"symbol\"===typeof a?Symbol():\"__\"+a,b),void 0!==b&&Object.defineProperty(this.prototype,a,b))};J.h=function(a,b,c){return{get:function(){return this[b]},set:function(d){var e=this[a];this[b]=d;jd(this,a,e,c)},configurable:!0,enumerable:!0}};\nJ.fd=function(a){return this.ab.get(a)||id};J.finalize=function(){if(this.hasOwnProperty(\"finalized\"))return!1;this.finalized=!0;var a=Object.getPrototypeOf(this);a.finalize();void 0!==a.ig&&(this.ig=[].concat(A(a.ig)));this.ab=new Map(a.ab);this.eh=new Map;if(this.hasOwnProperty(\"properties\")){a=this.properties;var b=[].concat(A(Obje",
                      "markdown": "`wnProperty(a)||(b=this.h(a,\"symbol\"===typeof a?Symbol():\"__\"+a,b),void 0!==b&&Object.defineProperty(this.prototype,a,b))};J.h=function(a,b,c){return{get:function(){return this[b]},set:function(d){var e=this[a];this[b]=d;jd(this,a,e,c)},configurable:!0,enumerable:!0}};\nJ.fd=function(a){return this.ab.get(a)||id};J.finalize=function(){if(this.hasOwnProperty(\"finalized\"))return!1;this.finalized=!0;var a=Object.getPrototypeOf(this);a.finalize();void 0!==a.ig&&(this.ig=[].concat(A(a.ig)));this.ab=new Map(a.ab);this.eh=new Map;if(this.hasOwnProperty(\"properties\")){a=this.properties;var b=[].concat(A(Obje`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 1316,
                  "startColumn": 178,
                  "endLine": 1316,
                  "endColumn": 183,
                  "snippet": {
                    "text": "table. Use `unsafeCSS` or `css` instead.\");this.cssText=a;this.g=b}$c.prototype.toString=function(){return this.cssText};\nu.Object.defineProperties($c.prototype,{styleSheet:{configurable:!0,enumerable:!0,get:function(){var a=this.ud,b=this.g;if(Xc&&void 0===a){var c=void 0!==b&&1===b.length;c&&(a=Zc.get(b));void 0===a&&((this.ud=a=new CSSStyleSheet).replaceSync(this.cssText),c&&Zc.set(b,a))}return a}}});\nfunction ad(a,b){Xc?a.adoptedStyleSheets=b.map(function(c){return c instanceof CSSStyleSheet?c:c.styleSheet}):b.forEach(function(c){var d=document.createElement(\"style\"),e=Wc.litNonce;void 0!==e&&d",
                    "rendered": {
                      "text": "table. Use `unsafeCSS` or `css` instead.\");this.cssText=a;this.g=b}$c.prototype.toString=function(){return this.cssText};\nu.Object.defineProperties($c.prototype,{styleSheet:{configurable:!0,enumerable:!0,get:function(){var a=this.ud,b=this.g;if(Xc&&void 0===a){var c=void 0!==b&&1===b.length;c&&(a=Zc.get(b));void 0===a&&((this.ud=a=new CSSStyleSheet).replaceSync(this.cssText),c&&Zc.set(b,a))}return a}}});\nfunction ad(a,b){Xc?a.adoptedStyleSheets=b.map(function(c){return c instanceof CSSStyleSheet?c:c.styleSheet}):b.forEach(function(c){var d=document.createElement(\"style\"),e=Wc.litNonce;void 0!==e&&d",
                      "markdown": "`table. Use `unsafeCSS` or `css` instead.\");this.cssText=a;this.g=b}$c.prototype.toString=function(){return this.cssText};\nu.Object.defineProperties($c.prototype,{styleSheet:{configurable:!0,enumerable:!0,get:function(){var a=this.ud,b=this.g;if(Xc&&void 0===a){var c=void 0!==b&&1===b.length;c&&(a=Zc.get(b));void 0===a&&((this.ud=a=new CSSStyleSheet).replaceSync(this.cssText),c&&Zc.set(b,a))}return a}}});\nfunction ad(a,b){Xc?a.adoptedStyleSheets=b.map(function(c){return c instanceof CSSStyleSheet?c:c.styleSheet}):b.forEach(function(c){var d=document.createElement(\"style\"),e=Wc.litNonce;void 0!==e&&d`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 1306,
                  "startColumn": 357,
                  "endLine": 1306,
                  "endColumn": 362,
                  "snippet": {
                    "text": "===typeof c?this.dh(a):(void 0===c.ed&&(c.ed=Ic.createElement(c.rn,this.options)),c);var d;(null==(d=this.aa)?void 0:d.pf)===a?this.aa._update(b):(d=new Oc(a,this),a=d.h(this.options),d._update(b),this.fg(a),this.aa=d)};m.dh=function(a){var b=a.eb,c=Gc.get(b);if(void 0===c){var d=b.join(\"\\x00\");c=qc.get(d);void 0===c&&(c=new Ic(a),qc.set(d,c));Gc.set(b,c)}return c};\nm.uk=function(a){wc(this.aa)||(this.aa=[],this.je());var b=this.aa,c=0,d;a=z(a);for(var e=a.next();!e.done;e=a.next())e=e.value,c===b.length?b.push(d=new Pc(this.jg(uc.createComment(\"\")),this.jg(uc.createComment(\"\")),this,this.options))",
                    "rendered": {
                      "text": "===typeof c?this.dh(a):(void 0===c.ed&&(c.ed=Ic.createElement(c.rn,this.options)),c);var d;(null==(d=this.aa)?void 0:d.pf)===a?this.aa._update(b):(d=new Oc(a,this),a=d.h(this.options),d._update(b),this.fg(a),this.aa=d)};m.dh=function(a){var b=a.eb,c=Gc.get(b);if(void 0===c){var d=b.join(\"\\x00\");c=qc.get(d);void 0===c&&(c=new Ic(a),qc.set(d,c));Gc.set(b,c)}return c};\nm.uk=function(a){wc(this.aa)||(this.aa=[],this.je());var b=this.aa,c=0,d;a=z(a);for(var e=a.next();!e.done;e=a.next())e=e.value,c===b.length?b.push(d=new Pc(this.jg(uc.createComment(\"\")),this.jg(uc.createComment(\"\")),this,this.options))",
                      "markdown": "`===typeof c?this.dh(a):(void 0===c.ed&&(c.ed=Ic.createElement(c.rn,this.options)),c);var d;(null==(d=this.aa)?void 0:d.pf)===a?this.aa._update(b):(d=new Oc(a,this),a=d.h(this.options),d._update(b),this.fg(a),this.aa=d)};m.dh=function(a){var b=a.eb,c=Gc.get(b);if(void 0===c){var d=b.join(\"\\x00\");c=qc.get(d);void 0===c&&(c=new Ic(a),qc.set(d,c));Gc.set(b,c)}return c};\nm.uk=function(a){wc(this.aa)||(this.aa=[],this.je());var b=this.aa,c=0,d;a=z(a);for(var e=a.next();!e.done;e=a.next())e=e.value,c===b.length?b.push(d=new Pc(this.jg(uc.createComment(\"\")),this.jg(uc.createComment(\"\")),this,this.options))`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 1306,
                  "startColumn": 309,
                  "endLine": 1306,
                  "endColumn": 314,
                  "snippet": {
                    "text": "tion(a){var b=a.values,c=a._$litType$;a=\"number\"===typeof c?this.dh(a):(void 0===c.ed&&(c.ed=Ic.createElement(c.rn,this.options)),c);var d;(null==(d=this.aa)?void 0:d.pf)===a?this.aa._update(b):(d=new Oc(a,this),a=d.h(this.options),d._update(b),this.fg(a),this.aa=d)};m.dh=function(a){var b=a.eb,c=Gc.get(b);if(void 0===c){var d=b.join(\"\\x00\");c=qc.get(d);void 0===c&&(c=new Ic(a),qc.set(d,c));Gc.set(b,c)}return c};\nm.uk=function(a){wc(this.aa)||(this.aa=[],this.je());var b=this.aa,c=0,d;a=z(a);for(var e=a.next();!e.done;e=a.next())e=e.value,c===b.length?b.push(d=new Pc(this.jg(uc.createComment(\"\")),t",
                    "rendered": {
                      "text": "tion(a){var b=a.values,c=a._$litType$;a=\"number\"===typeof c?this.dh(a):(void 0===c.ed&&(c.ed=Ic.createElement(c.rn,this.options)),c);var d;(null==(d=this.aa)?void 0:d.pf)===a?this.aa._update(b):(d=new Oc(a,this),a=d.h(this.options),d._update(b),this.fg(a),this.aa=d)};m.dh=function(a){var b=a.eb,c=Gc.get(b);if(void 0===c){var d=b.join(\"\\x00\");c=qc.get(d);void 0===c&&(c=new Ic(a),qc.set(d,c));Gc.set(b,c)}return c};\nm.uk=function(a){wc(this.aa)||(this.aa=[],this.je());var b=this.aa,c=0,d;a=z(a);for(var e=a.next();!e.done;e=a.next())e=e.value,c===b.length?b.push(d=new Pc(this.jg(uc.createComment(\"\")),t",
                      "markdown": "`tion(a){var b=a.values,c=a._$litType$;a=\"number\"===typeof c?this.dh(a):(void 0===c.ed&&(c.ed=Ic.createElement(c.rn,this.options)),c);var d;(null==(d=this.aa)?void 0:d.pf)===a?this.aa._update(b):(d=new Oc(a,this),a=d.h(this.options),d._update(b),this.fg(a),this.aa=d)};m.dh=function(a){var b=a.eb,c=Gc.get(b);if(void 0===c){var d=b.join(\"\\x00\");c=qc.get(d);void 0===c&&(c=new Ic(a),qc.set(d,c));Gc.set(b,c)}return c};\nm.uk=function(a){wc(this.aa)||(this.aa=[],this.je());var b=this.aa,c=0,d;a=z(a);for(var e=a.next();!e.done;e=a.next())e=e.value,c===b.length?b.push(d=new Pc(this.jg(uc.createComment(\"\")),t`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 1274,
                  "startColumn": 56,
                  "endLine": 1274,
                  "endColumn": 61,
                  "snippet": {
                    "text": "00c\\u200d\\u203f-\\u2040\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\udfff\\uf900-\\ufdcf\\ufdf0-\\ufffd]*-[\\\\-a-z.0-9_\\u00b7\\u00c0-\\u00d6\\u00d8-\\u00f6\\u00f8-\\u037d\\u200c\\u200d\\u203f-\\u2040\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\udfff\\uf900-\\ufdcf\\ufdf0-\\ufffd]*$\");\nfunction Qb(a,b){var c=window.customElements;return c&&c.get(a)||!0===Ob[a]?2:\"HTMLUnknownElement\"===b.name?1:\"HTMLElement\"===b.name&&Pb.test(a)?3:0};/*\n\n Copyright 2020 Google LLC\n SPDX-License-Identifier: BSD-3-Clause\n*/\nfunction Rb(a,b){switch(b){case \"innerHTML\":return 1===Sb(a)?2:null;case \"textContent\":return a=Sb(a),1===a||6===a?1:null;default:var c,d;",
                    "rendered": {
                      "text": "00c\\u200d\\u203f-\\u2040\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\udfff\\uf900-\\ufdcf\\ufdf0-\\ufffd]*-[\\\\-a-z.0-9_\\u00b7\\u00c0-\\u00d6\\u00d8-\\u00f6\\u00f8-\\u037d\\u200c\\u200d\\u203f-\\u2040\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\udfff\\uf900-\\ufdcf\\ufdf0-\\ufffd]*$\");\nfunction Qb(a,b){var c=window.customElements;return c&&c.get(a)||!0===Ob[a]?2:\"HTMLUnknownElement\"===b.name?1:\"HTMLElement\"===b.name&&Pb.test(a)?3:0};/*\n\n Copyright 2020 Google LLC\n SPDX-License-Identifier: BSD-3-Clause\n*/\nfunction Rb(a,b){switch(b){case \"innerHTML\":return 1===Sb(a)?2:null;case \"textContent\":return a=Sb(a),1===a||6===a?1:null;default:var c,d;",
                      "markdown": "`00c\\u200d\\u203f-\\u2040\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\udfff\\uf900-\\ufdcf\\ufdf0-\\ufffd]*-[\\\\-a-z.0-9_\\u00b7\\u00c0-\\u00d6\\u00d8-\\u00f6\\u00f8-\\u037d\\u200c\\u200d\\u203f-\\u2040\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\udfff\\uf900-\\ufdcf\\ufdf0-\\ufffd]*$\");\nfunction Qb(a,b){var c=window.customElements;return c&&c.get(a)||!0===Ob[a]?2:\"HTMLUnknownElement\"===b.name?1:\"HTMLElement\"===b.name&&Pb.test(a)?3:0};/*\n\n Copyright 2020 Google LLC\n SPDX-License-Identifier: BSD-3-Clause\n*/\nfunction Rb(a,b){switch(b){case \"innerHTML\":return 1===Sb(a)?2:null;case \"textContent\":return a=Sb(a),1===a||6===a?1:null;default:var c,d;`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 1243,
                  "startColumn": 198,
                  "endLine": 1243,
                  "endColumn": 203,
                  "snippet": {
                    "text": "upport=ib);var kb=\"\";if(window.Symbol){var lb=Symbol();\"symbol\"!==typeof lb&&(kb=Object.keys(lb)[0])}\nvar mb=\"\"!==kb,nb=mb?function(a){return null!=a&&void 0!==a[kb]}:function(){return!1};if(mb&&!window.Symbol.for){var ob=new Map;window.Symbol.for=function(a){ob.has(a)||ob.set(a,Symbol(a));return ob.get(a)}};function pb(a){if(void 0!==window.ShadyCSS&&(!window.ShadyCSS.nativeShadow||window.ShadyCSS.ApplyShim)){a=a.ReactiveElement.prototype;window.ShadyDOM&&window.ShadyDOM.inUse&&!0===window.ShadyDOM.noPatch&&window.ShadyDOM.patchElementProto(a);var b=a.zb;a.zb=function(){var e=this.localName;if(win",
                    "rendered": {
                      "text": "upport=ib);var kb=\"\";if(window.Symbol){var lb=Symbol();\"symbol\"!==typeof lb&&(kb=Object.keys(lb)[0])}\nvar mb=\"\"!==kb,nb=mb?function(a){return null!=a&&void 0!==a[kb]}:function(){return!1};if(mb&&!window.Symbol.for){var ob=new Map;window.Symbol.for=function(a){ob.has(a)||ob.set(a,Symbol(a));return ob.get(a)}};function pb(a){if(void 0!==window.ShadyCSS&&(!window.ShadyCSS.nativeShadow||window.ShadyCSS.ApplyShim)){a=a.ReactiveElement.prototype;window.ShadyDOM&&window.ShadyDOM.inUse&&!0===window.ShadyDOM.noPatch&&window.ShadyDOM.patchElementProto(a);var b=a.zb;a.zb=function(){var e=this.localName;if(win",
                      "markdown": "`upport=ib);var kb=\"\";if(window.Symbol){var lb=Symbol();\"symbol\"!==typeof lb&&(kb=Object.keys(lb)[0])}\nvar mb=\"\"!==kb,nb=mb?function(a){return null!=a&&void 0!==a[kb]}:function(){return!1};if(mb&&!window.Symbol.for){var ob=new Map;window.Symbol.for=function(a){ob.has(a)||ob.set(a,Symbol(a));return ob.get(a)}};function pb(a){if(void 0!==window.ShadyCSS&&(!window.ShadyCSS.nativeShadow||window.ShadyCSS.ApplyShim)){a=a.ReactiveElement.prototype;window.ShadyDOM&&window.ShadyDOM.inUse&&!0===window.ShadyDOM.noPatch&&window.ShadyDOM.patchElementProto(a);var b=a.zb;a.zb=function(){var e=this.localName;if(win`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 1242,
                  "startColumn": 245,
                  "endLine": 1242,
                  "endColumn": 250,
                  "snippet": {
                    "text": "var I;if(null==(I=window.ShadyCSS)?0:I.nativeShadow)I=\np.content.querySelector(\"style\"),null!==I&&k.appendChild(I.cloneNode(!0));r.insertBefore(k,B);this.hb=t;this.kc=B}else n.call(this,p,q)};b.dh=function(p){var q,r=null==(q=this.options)?void 0:q.scope;q=g.get(r);void 0===q&&g.set(r,q=new Map);r=q.get(p.eb);void 0===r&&q.set(p.eb,r=new a(p,this.options));return r}}}var jb;null!=(jb=window).litHtmlPolyfillSupport||(jb.litHtmlPolyfillSupport=ib);var kb=\"\";if(window.Symbol){var lb=Symbol();\"symbol\"!==typeof lb&&(kb=Object.keys(lb)[0])}\nvar mb=\"\"!==kb,nb=mb?function(a){return null!=a&&void 0!==a[kb]}",
                    "rendered": {
                      "text": "var I;if(null==(I=window.ShadyCSS)?0:I.nativeShadow)I=\np.content.querySelector(\"style\"),null!==I&&k.appendChild(I.cloneNode(!0));r.insertBefore(k,B);this.hb=t;this.kc=B}else n.call(this,p,q)};b.dh=function(p){var q,r=null==(q=this.options)?void 0:q.scope;q=g.get(r);void 0===q&&g.set(r,q=new Map);r=q.get(p.eb);void 0===r&&q.set(p.eb,r=new a(p,this.options));return r}}}var jb;null!=(jb=window).litHtmlPolyfillSupport||(jb.litHtmlPolyfillSupport=ib);var kb=\"\";if(window.Symbol){var lb=Symbol();\"symbol\"!==typeof lb&&(kb=Object.keys(lb)[0])}\nvar mb=\"\"!==kb,nb=mb?function(a){return null!=a&&void 0!==a[kb]}",
                      "markdown": "`var I;if(null==(I=window.ShadyCSS)?0:I.nativeShadow)I=\np.content.querySelector(\"style\"),null!==I&&k.appendChild(I.cloneNode(!0));r.insertBefore(k,B);this.hb=t;this.kc=B}else n.call(this,p,q)};b.dh=function(p){var q,r=null==(q=this.options)?void 0:q.scope;q=g.get(r);void 0===q&&g.set(r,q=new Map);r=q.get(p.eb);void 0===r&&q.set(p.eb,r=new a(p,this.options));return r}}}var jb;null!=(jb=window).litHtmlPolyfillSupport||(jb.litHtmlPolyfillSupport=ib);var kb=\"\";if(window.Symbol){var lb=Symbol();\"symbol\"!==typeof lb&&(kb=Object.keys(lb)[0])}\nvar mb=\"\"!==kb,nb=mb?function(a){return null!=a&&void 0!==a[kb]}`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 1242,
                  "startColumn": 203,
                  "endLine": 1242,
                  "endColumn": 208,
                  "snippet": {
                    "text": ".content.appendChild(v));k.removeChild(l);var I;if(null==(I=window.ShadyCSS)?0:I.nativeShadow)I=\np.content.querySelector(\"style\"),null!==I&&k.appendChild(I.cloneNode(!0));r.insertBefore(k,B);this.hb=t;this.kc=B}else n.call(this,p,q)};b.dh=function(p){var q,r=null==(q=this.options)?void 0:q.scope;q=g.get(r);void 0===q&&g.set(r,q=new Map);r=q.get(p.eb);void 0===r&&q.set(p.eb,r=new a(p,this.options));return r}}}var jb;null!=(jb=window).litHtmlPolyfillSupport||(jb.litHtmlPolyfillSupport=ib);var kb=\"\";if(window.Symbol){var lb=Symbol();\"symbol\"!==typeof lb&&(kb=Object.keys(lb)[0])}\nvar mb=\"\"!==kb,nb=mb?f",
                    "rendered": {
                      "text": ".content.appendChild(v));k.removeChild(l);var I;if(null==(I=window.ShadyCSS)?0:I.nativeShadow)I=\np.content.querySelector(\"style\"),null!==I&&k.appendChild(I.cloneNode(!0));r.insertBefore(k,B);this.hb=t;this.kc=B}else n.call(this,p,q)};b.dh=function(p){var q,r=null==(q=this.options)?void 0:q.scope;q=g.get(r);void 0===q&&g.set(r,q=new Map);r=q.get(p.eb);void 0===r&&q.set(p.eb,r=new a(p,this.options));return r}}}var jb;null!=(jb=window).litHtmlPolyfillSupport||(jb.litHtmlPolyfillSupport=ib);var kb=\"\";if(window.Symbol){var lb=Symbol();\"symbol\"!==typeof lb&&(kb=Object.keys(lb)[0])}\nvar mb=\"\"!==kb,nb=mb?f",
                      "markdown": "`.content.appendChild(v));k.removeChild(l);var I;if(null==(I=window.ShadyCSS)?0:I.nativeShadow)I=\np.content.querySelector(\"style\"),null!==I&&k.appendChild(I.cloneNode(!0));r.insertBefore(k,B);this.hb=t;this.kc=B}else n.call(this,p,q)};b.dh=function(p){var q,r=null==(q=this.options)?void 0:q.scope;q=g.get(r);void 0===q&&g.set(r,q=new Map);r=q.get(p.eb);void 0===r&&q.set(p.eb,r=new a(p,this.options));return r}}}var jb;null!=(jb=window).litHtmlPolyfillSupport||(jb.litHtmlPolyfillSupport=ib);var kb=\"\";if(window.Symbol){var lb=Symbol();\"symbol\"!==typeof lb&&(kb=Object.keys(lb)[0])}\nvar mb=\"\"!==kb,nb=mb?f`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 1239,
                  "startColumn": 270,
                  "endLine": 1239,
                  "endColumn": 275,
                  "snippet": {
                    "text": "}};var gb=new Set,hb=new Map;\nfunction ib(a,b){if(void 0!==window.ShadyCSS&&(!window.ShadyCSS.nativeShadow||window.ShadyCSS.ApplyShim)){var c,d,e=(null==(c=window.ShadyDOM)?0:c.inUse)&&!0===(null==(d=window.ShadyDOM)?void 0:d.noPatch)?window.ShadyDOM.wrap:function(p){return p},f=function(p){var q=hb.get(p);void 0===q&&hb.set(p,q=[]);return q},g=new Map,h=a.createElement;a.createElement=function(p,q){p=h.call(a,p,q);q=null==q?void 0:q.scope;if(void 0!==q&&(window.ShadyCSS.nativeShadow||window.ShadyCSS.prepareTemplateDom(p,q),void 0!==\nq&&!gb.has(q))){q=f(q);var r=p.content.querySelectorAll(\"style\");",
                    "rendered": {
                      "text": "}};var gb=new Set,hb=new Map;\nfunction ib(a,b){if(void 0!==window.ShadyCSS&&(!window.ShadyCSS.nativeShadow||window.ShadyCSS.ApplyShim)){var c,d,e=(null==(c=window.ShadyDOM)?0:c.inUse)&&!0===(null==(d=window.ShadyDOM)?void 0:d.noPatch)?window.ShadyDOM.wrap:function(p){return p},f=function(p){var q=hb.get(p);void 0===q&&hb.set(p,q=[]);return q},g=new Map,h=a.createElement;a.createElement=function(p,q){p=h.call(a,p,q);q=null==q?void 0:q.scope;if(void 0!==q&&(window.ShadyCSS.nativeShadow||window.ShadyCSS.prepareTemplateDom(p,q),void 0!==\nq&&!gb.has(q))){q=f(q);var r=p.content.querySelectorAll(\"style\");",
                      "markdown": "`}};var gb=new Set,hb=new Map;\nfunction ib(a,b){if(void 0!==window.ShadyCSS&&(!window.ShadyCSS.nativeShadow||window.ShadyCSS.ApplyShim)){var c,d,e=(null==(c=window.ShadyDOM)?0:c.inUse)&&!0===(null==(d=window.ShadyDOM)?void 0:d.noPatch)?window.ShadyDOM.wrap:function(p){return p},f=function(p){var q=hb.get(p);void 0===q&&hb.set(p,q=[]);return q},g=new Map,h=a.createElement;a.createElement=function(p,q){p=h.call(a,p,q);q=null==q?void 0:q.scope;if(void 0!==q&&(window.ShadyCSS.nativeShadow||window.ShadyCSS.prepareTemplateDom(p,q),void 0!==\nq&&!gb.has(q))){q=f(q);var r=p.content.querySelectorAll(\"style\");`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 1195,
                  "startColumn": 327,
                  "endLine": 1195,
                  "endColumn": 332,
                  "snippet": {
                    "text": "n e(h){this.h={};this.g=b();this.size=0;if(h){h=z(h);for(var k;!(k=h.next()).done;)k=k.value,this.set(k[0],k[1])}}if(function(){if(!a||\"function\"!=typeof a||!a.prototype.entries||\"function\"!=typeof Object.seal)return!1;try{var h=Object.seal({x:4}),k=new a(z([[h,\"s\"]]));if(\"s\"!=k.get(h)||1!=k.size||k.get({x:4})||k.set({x:4},\"t\")!=k||2!=k.size)return!1;var l=k.entries(),n=l.next();if(n.done||n.value[0]!=h||\"s\"!=n.value[1])return!1;n=l.next();return n.done||4!=n.value[0].x||\n\"t\"!=n.value[1]||!l.next().done?!1:!0}catch(p){return!1}}())return a;var f=new WeakMap;e.prototype.set=function(h,k){h=0===h?0:h",
                    "rendered": {
                      "text": "n e(h){this.h={};this.g=b();this.size=0;if(h){h=z(h);for(var k;!(k=h.next()).done;)k=k.value,this.set(k[0],k[1])}}if(function(){if(!a||\"function\"!=typeof a||!a.prototype.entries||\"function\"!=typeof Object.seal)return!1;try{var h=Object.seal({x:4}),k=new a(z([[h,\"s\"]]));if(\"s\"!=k.get(h)||1!=k.size||k.get({x:4})||k.set({x:4},\"t\")!=k||2!=k.size)return!1;var l=k.entries(),n=l.next();if(n.done||n.value[0]!=h||\"s\"!=n.value[1])return!1;n=l.next();return n.done||4!=n.value[0].x||\n\"t\"!=n.value[1]||!l.next().done?!1:!0}catch(p){return!1}}())return a;var f=new WeakMap;e.prototype.set=function(h,k){h=0===h?0:h",
                      "markdown": "`n e(h){this.h={};this.g=b();this.size=0;if(h){h=z(h);for(var k;!(k=h.next()).done;)k=k.value,this.set(k[0],k[1])}}if(function(){if(!a||\"function\"!=typeof a||!a.prototype.entries||\"function\"!=typeof Object.seal)return!1;try{var h=Object.seal({x:4}),k=new a(z([[h,\"s\"]]));if(\"s\"!=k.get(h)||1!=k.size||k.get({x:4})||k.set({x:4},\"t\")!=k||2!=k.size)return!1;var l=k.entries(),n=l.next();if(n.done||n.value[0]!=h||\"s\"!=n.value[1])return!1;n=l.next();return n.done||4!=n.value[0].x||\n\"t\"!=n.value[1]||!l.next().done?!1:!0}catch(p){return!1}}())return a;var f=new WeakMap;e.prototype.set=function(h,k){h=0===h?0:h`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 1195,
                  "startColumn": 306,
                  "endLine": 1195,
                  "endColumn": 311,
                  "snippet": {
                    "text": "-1,la:void 0}}function e(h){this.h={};this.g=b();this.size=0;if(h){h=z(h);for(var k;!(k=h.next()).done;)k=k.value,this.set(k[0],k[1])}}if(function(){if(!a||\"function\"!=typeof a||!a.prototype.entries||\"function\"!=typeof Object.seal)return!1;try{var h=Object.seal({x:4}),k=new a(z([[h,\"s\"]]));if(\"s\"!=k.get(h)||1!=k.size||k.get({x:4})||k.set({x:4},\"t\")!=k||2!=k.size)return!1;var l=k.entries(),n=l.next();if(n.done||n.value[0]!=h||\"s\"!=n.value[1])return!1;n=l.next();return n.done||4!=n.value[0].x||\n\"t\"!=n.value[1]||!l.next().done?!1:!0}catch(p){return!1}}())return a;var f=new WeakMap;e.prototype.set=func",
                    "rendered": {
                      "text": "-1,la:void 0}}function e(h){this.h={};this.g=b();this.size=0;if(h){h=z(h);for(var k;!(k=h.next()).done;)k=k.value,this.set(k[0],k[1])}}if(function(){if(!a||\"function\"!=typeof a||!a.prototype.entries||\"function\"!=typeof Object.seal)return!1;try{var h=Object.seal({x:4}),k=new a(z([[h,\"s\"]]));if(\"s\"!=k.get(h)||1!=k.size||k.get({x:4})||k.set({x:4},\"t\")!=k||2!=k.size)return!1;var l=k.entries(),n=l.next();if(n.done||n.value[0]!=h||\"s\"!=n.value[1])return!1;n=l.next();return n.done||4!=n.value[0].x||\n\"t\"!=n.value[1]||!l.next().done?!1:!0}catch(p){return!1}}())return a;var f=new WeakMap;e.prototype.set=func",
                      "markdown": "`-1,la:void 0}}function e(h){this.h={};this.g=b();this.size=0;if(h){h=z(h);for(var k;!(k=h.next()).done;)k=k.value,this.set(k[0],k[1])}}if(function(){if(!a||\"function\"!=typeof a||!a.prototype.entries||\"function\"!=typeof Object.seal)return!1;try{var h=Object.seal({x:4}),k=new a(z([[h,\"s\"]]));if(\"s\"!=k.get(h)||1!=k.size||k.get({x:4})||k.set({x:4},\"t\")!=k||2!=k.size)return!1;var l=k.entries(),n=l.next();if(n.done||n.value[0]!=h||\"s\"!=n.value[1])return!1;n=l.next();return n.done||4!=n.value[0].x||\n\"t\"!=n.value[1]||!l.next().done?!1:!0}catch(p){return!1}}())return a;var f=new WeakMap;e.prototype.set=func`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 1194,
                  "startColumn": 317,
                  "endLine": 1194,
                  "endColumn": 322,
                  "snippet": {
                    "text": "a){function b(){var h={};return h.mb=h.next=h.head=h}function c(h,k){var l=h.g;return da(function(){if(l){for(;l.head!=h.g;)l=l.mb;for(;l.next!=l.head;)return l=l.next,{done:!1,value:k(l)};l=null}return{done:!0,value:void 0}})}function d(h,k){var l=k&&typeof k;\"object\"==l||\"function\"==l?f.has(k)?l=f.get(k):(l=\"\"+ ++g,f.set(k,l)):l=\"p_\"+k;var n=h.h[l];if(n&&C(h.h,l))for(h=0;h<n.length;h++){var p=n[h];if(k!==k&&p.key!==p.key||k===p.key)return{id:l,list:n,index:h,la:p}}return{id:l,list:n,\nindex:-1,la:void 0}}function e(h){this.h={};this.g=b();this.size=0;if(h){h=z(h);for(var k;!(k=h.next()).done;)k=k.",
                    "rendered": {
                      "text": "a){function b(){var h={};return h.mb=h.next=h.head=h}function c(h,k){var l=h.g;return da(function(){if(l){for(;l.head!=h.g;)l=l.mb;for(;l.next!=l.head;)return l=l.next,{done:!1,value:k(l)};l=null}return{done:!0,value:void 0}})}function d(h,k){var l=k&&typeof k;\"object\"==l||\"function\"==l?f.has(k)?l=f.get(k):(l=\"\"+ ++g,f.set(k,l)):l=\"p_\"+k;var n=h.h[l];if(n&&C(h.h,l))for(h=0;h<n.length;h++){var p=n[h];if(k!==k&&p.key!==p.key||k===p.key)return{id:l,list:n,index:h,la:p}}return{id:l,list:n,\nindex:-1,la:void 0}}function e(h){this.h={};this.g=b();this.size=0;if(h){h=z(h);for(var k;!(k=h.next()).done;)k=k.",
                      "markdown": "`a){function b(){var h={};return h.mb=h.next=h.head=h}function c(h,k){var l=h.g;return da(function(){if(l){for(;l.head!=h.g;)l=l.mb;for(;l.next!=l.head;)return l=l.next,{done:!1,value:k(l)};l=null}return{done:!0,value:void 0}})}function d(h,k){var l=k&&typeof k;\"object\"==l||\"function\"==l?f.has(k)?l=f.get(k):(l=\"\"+ ++g,f.set(k,l)):l=\"p_\"+k;var n=h.h[l];if(n&&C(h.h,l))for(h=0;h<n.length;h++){var p=n[h];if(k!==k&&p.key!==p.key||k===p.key)return{id:l,list:n,index:h,la:p}}return{id:l,list:n,\nindex:-1,la:void 0}}function e(h){this.h={};this.g=b();this.size=0;if(h){h=z(h);for(var k;!(k=h.next()).done;)k=k.`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 1192,
                  "startColumn": 104,
                  "endLine": 1192,
                  "endColumn": 109,
                  "snippet": {
                    "text": "l=Object[k];l&&(Object[k]=function(n){if(n instanceof c)return n;Object.isExtensible(n)&&e(n);return l(n)})}if(function(){if(!a||!Object.seal)return!1;try{var k=Object.seal({}),l=Object.seal({}),\nn=new a([[k,2],[l,3]]);if(2!=n.get(k)||3!=n.get(l))return!1;n.delete(k);n.set(l,4);return!n.has(k)&&4==n.get(l)}catch(p){return!1}}())return a;var g=\"$jscomp_hidden_\"+Math.random();f(\"freeze\");f(\"preventExtensions\");f(\"seal\");var h=0;b.prototype.set=function(k,l){if(!d(k))throw Error(\"Invalid WeakMap key\");e(k);if(!C(k,g))throw Error(\"WeakMap key fail: \"+k);k[g][this.g]=l;return this};b.prototype.get=funct",
                    "rendered": {
                      "text": "l=Object[k];l&&(Object[k]=function(n){if(n instanceof c)return n;Object.isExtensible(n)&&e(n);return l(n)})}if(function(){if(!a||!Object.seal)return!1;try{var k=Object.seal({}),l=Object.seal({}),\nn=new a([[k,2],[l,3]]);if(2!=n.get(k)||3!=n.get(l))return!1;n.delete(k);n.set(l,4);return!n.has(k)&&4==n.get(l)}catch(p){return!1}}())return a;var g=\"$jscomp_hidden_\"+Math.random();f(\"freeze\");f(\"preventExtensions\");f(\"seal\");var h=0;b.prototype.set=function(k,l){if(!d(k))throw Error(\"Invalid WeakMap key\");e(k);if(!C(k,g))throw Error(\"WeakMap key fail: \"+k);k[g][this.g]=l;return this};b.prototype.get=funct",
                      "markdown": "`l=Object[k];l&&(Object[k]=function(n){if(n instanceof c)return n;Object.isExtensible(n)&&e(n);return l(n)})}if(function(){if(!a||!Object.seal)return!1;try{var k=Object.seal({}),l=Object.seal({}),\nn=new a([[k,2],[l,3]]);if(2!=n.get(k)||3!=n.get(l))return!1;n.delete(k);n.set(l,4);return!n.has(k)&&4==n.get(l)}catch(p){return!1}}())return a;var g=\"$jscomp_hidden_\"+Math.random();f(\"freeze\");f(\"preventExtensions\");f(\"seal\");var h=0;b.prototype.set=function(k,l){if(!d(k))throw Error(\"Invalid WeakMap key\");e(k);if(!C(k,g))throw Error(\"WeakMap key fail: \"+k);k[g][this.g]=l;return this};b.prototype.get=funct`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 1192,
                  "startColumn": 43,
                  "endLine": 1192,
                  "endColumn": 48,
                  "snippet": {
                    "text": "if(!C(k,g)){var l=new c;ba(k,g,{value:l})}}function f(k){var l=Object[k];l&&(Object[k]=function(n){if(n instanceof c)return n;Object.isExtensible(n)&&e(n);return l(n)})}if(function(){if(!a||!Object.seal)return!1;try{var k=Object.seal({}),l=Object.seal({}),\nn=new a([[k,2],[l,3]]);if(2!=n.get(k)||3!=n.get(l))return!1;n.delete(k);n.set(l,4);return!n.has(k)&&4==n.get(l)}catch(p){return!1}}())return a;var g=\"$jscomp_hidden_\"+Math.random();f(\"freeze\");f(\"preventExtensions\");f(\"seal\");var h=0;b.prototype.set=function(k,l){if(!d(k))throw Error(\"Invalid WeakMap key\");e(k);if(!C(k,g))throw Error(\"WeakMap key",
                    "rendered": {
                      "text": "if(!C(k,g)){var l=new c;ba(k,g,{value:l})}}function f(k){var l=Object[k];l&&(Object[k]=function(n){if(n instanceof c)return n;Object.isExtensible(n)&&e(n);return l(n)})}if(function(){if(!a||!Object.seal)return!1;try{var k=Object.seal({}),l=Object.seal({}),\nn=new a([[k,2],[l,3]]);if(2!=n.get(k)||3!=n.get(l))return!1;n.delete(k);n.set(l,4);return!n.has(k)&&4==n.get(l)}catch(p){return!1}}())return a;var g=\"$jscomp_hidden_\"+Math.random();f(\"freeze\");f(\"preventExtensions\");f(\"seal\");var h=0;b.prototype.set=function(k,l){if(!d(k))throw Error(\"Invalid WeakMap key\");e(k);if(!C(k,g))throw Error(\"WeakMap key",
                      "markdown": "`if(!C(k,g)){var l=new c;ba(k,g,{value:l})}}function f(k){var l=Object[k];l&&(Object[k]=function(n){if(n instanceof c)return n;Object.isExtensible(n)&&e(n);return l(n)})}if(function(){if(!a||!Object.seal)return!1;try{var k=Object.seal({}),l=Object.seal({}),\nn=new a([[k,2],[l,3]]);if(2!=n.get(k)||3!=n.get(l))return!1;n.delete(k);n.set(l,4);return!n.has(k)&&4==n.get(l)}catch(p){return!1}}())return a;var g=\"$jscomp_hidden_\"+Math.random();f(\"freeze\");f(\"preventExtensions\");f(\"seal\");var h=0;b.prototype.set=function(k,l){if(!d(k))throw Error(\"Invalid WeakMap key\");e(k);if(!C(k,g))throw Error(\"WeakMap key`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 1192,
                  "startColumn": 30,
                  "endLine": 1192,
                  "endColumn": 35,
                  "snippet": {
                    "text": "unction e(k){if(!C(k,g)){var l=new c;ba(k,g,{value:l})}}function f(k){var l=Object[k];l&&(Object[k]=function(n){if(n instanceof c)return n;Object.isExtensible(n)&&e(n);return l(n)})}if(function(){if(!a||!Object.seal)return!1;try{var k=Object.seal({}),l=Object.seal({}),\nn=new a([[k,2],[l,3]]);if(2!=n.get(k)||3!=n.get(l))return!1;n.delete(k);n.set(l,4);return!n.has(k)&&4==n.get(l)}catch(p){return!1}}())return a;var g=\"$jscomp_hidden_\"+Math.random();f(\"freeze\");f(\"preventExtensions\");f(\"seal\");var h=0;b.prototype.set=function(k,l){if(!d(k))throw Error(\"Invalid WeakMap key\");e(k);if(!C(k,g))throw Error",
                    "rendered": {
                      "text": "unction e(k){if(!C(k,g)){var l=new c;ba(k,g,{value:l})}}function f(k){var l=Object[k];l&&(Object[k]=function(n){if(n instanceof c)return n;Object.isExtensible(n)&&e(n);return l(n)})}if(function(){if(!a||!Object.seal)return!1;try{var k=Object.seal({}),l=Object.seal({}),\nn=new a([[k,2],[l,3]]);if(2!=n.get(k)||3!=n.get(l))return!1;n.delete(k);n.set(l,4);return!n.has(k)&&4==n.get(l)}catch(p){return!1}}())return a;var g=\"$jscomp_hidden_\"+Math.random();f(\"freeze\");f(\"preventExtensions\");f(\"seal\");var h=0;b.prototype.set=function(k,l){if(!d(k))throw Error(\"Invalid WeakMap key\");e(k);if(!C(k,g))throw Error",
                      "markdown": "`unction e(k){if(!C(k,g)){var l=new c;ba(k,g,{value:l})}}function f(k){var l=Object[k];l&&(Object[k]=function(n){if(n instanceof c)return n;Object.isExtensible(n)&&e(n);return l(n)})}if(function(){if(!a||!Object.seal)return!1;try{var k=Object.seal({}),l=Object.seal({}),\nn=new a([[k,2],[l,3]]);if(2!=n.get(k)||3!=n.get(l))return!1;n.delete(k);n.set(l,4);return!n.has(k)&&4==n.get(l)}catch(p){return!1}}())return a;var g=\"$jscomp_hidden_\"+Math.random();f(\"freeze\");f(\"preventExtensions\");f(\"seal\");var h=0;b.prototype.set=function(k,l){if(!d(k))throw Error(\"Invalid WeakMap key\");e(k);if(!C(k,g))throw Error`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 990,
                  "startColumn": 216,
                  "endLine": 990,
                  "endColumn": 221,
                  "snippet": {
                    "text": "eof SVGElement&&(y=a.pop());var l=x.apply(this,a),m=w.apply(this,a);a=v.apply(this,\na);var p=e(),q=z.length,u=document.documentElement.scrollTop||r.scrollTop,B=document.documentElement.scrollLeft||r.scrollLeft;for(p.html(l).style(\"opacity\",1).style(\"pointer-events\",\"all\");q--;)p.classed(z[q],!1);l=A.get(a).apply(this);p.classed(a,!0).style(\"top\",l.top+m[0]+u+\"px\").style(\"left\",l.left+m[1]+B+\"px\");return c};c.hide=function(){e().style(\"opacity\",0).style(\"pointer-events\",\"none\");return c};c.attr=function(a,l){if(2>arguments.length&&\"string\"===typeof a)return e().attr(a);var m=Array.prototype.slice.ca",
                    "rendered": {
                      "text": "eof SVGElement&&(y=a.pop());var l=x.apply(this,a),m=w.apply(this,a);a=v.apply(this,\na);var p=e(),q=z.length,u=document.documentElement.scrollTop||r.scrollTop,B=document.documentElement.scrollLeft||r.scrollLeft;for(p.html(l).style(\"opacity\",1).style(\"pointer-events\",\"all\");q--;)p.classed(z[q],!1);l=A.get(a).apply(this);p.classed(a,!0).style(\"top\",l.top+m[0]+u+\"px\").style(\"left\",l.left+m[1]+B+\"px\");return c};c.hide=function(){e().style(\"opacity\",0).style(\"pointer-events\",\"none\");return c};c.attr=function(a,l){if(2>arguments.length&&\"string\"===typeof a)return e().attr(a);var m=Array.prototype.slice.ca",
                      "markdown": "`eof SVGElement&&(y=a.pop());var l=x.apply(this,a),m=w.apply(this,a);a=v.apply(this,\na);var p=e(),q=z.length,u=document.documentElement.scrollTop||r.scrollTop,B=document.documentElement.scrollLeft||r.scrollLeft;for(p.html(l).style(\"opacity\",1).style(\"pointer-events\",\"all\");q--;)p.classed(z[q],!1);l=A.get(a).apply(this);p.classed(a,!0).style(\"top\",l.top+m[0]+u+\"px\").style(\"left\",l.left+m[1]+B+\"px\");return c};c.hide=function(){e().style(\"opacity\",0).style(\"pointer-events\",\"none\");return c};c.attr=function(a,l){if(2>arguments.length&&\"string\"===typeof a)return e().attr(a);var m=Array.prototype.slice.ca`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 880,
                  "startColumn": 406,
                  "endLine": 880,
                  "endColumn": 411,
                  "snippet": {
                    "text": " arguments.length?(A=+H,z):A},alphaDecay:function(H){return arguments.length?(C=+H,z):+C},alphaTarget:function(H){return arguments.length?(G=+H,z):G},velocityDecay:function(H){return arguments.length?(O=1-H,z):1-O},force:function(H,L){return 1<arguments.length?(null==L?S.remove(H):S.set(H,t(L)),z):S.get(H)},find:function(H,L,U){var M,X=f.length;U=null==U?Infinity:U*U;for(M=0;M<X;++M){var Y=f[M];\nvar W=H-Y.x;var ba=L-Y.y;W=W*W+ba*ba;if(W<U){var aa=Y;U=W}}return aa},on:function(H,L){return 1<arguments.length?(K.on(H,L),z):K.on(H)}}};d3.forceX=function(f){function n(A){for(var C=0,G=t.length,O;C<G;++C",
                    "rendered": {
                      "text": " arguments.length?(A=+H,z):A},alphaDecay:function(H){return arguments.length?(C=+H,z):+C},alphaTarget:function(H){return arguments.length?(G=+H,z):G},velocityDecay:function(H){return arguments.length?(O=1-H,z):1-O},force:function(H,L){return 1<arguments.length?(null==L?S.remove(H):S.set(H,t(L)),z):S.get(H)},find:function(H,L,U){var M,X=f.length;U=null==U?Infinity:U*U;for(M=0;M<X;++M){var Y=f[M];\nvar W=H-Y.x;var ba=L-Y.y;W=W*W+ba*ba;if(W<U){var aa=Y;U=W}}return aa},on:function(H,L){return 1<arguments.length?(K.on(H,L),z):K.on(H)}}};d3.forceX=function(f){function n(A){for(var C=0,G=t.length,O;C<G;++C",
                      "markdown": "` arguments.length?(A=+H,z):A},alphaDecay:function(H){return arguments.length?(C=+H,z):+C},alphaTarget:function(H){return arguments.length?(G=+H,z):G},velocityDecay:function(H){return arguments.length?(O=1-H,z):1-O},force:function(H,L){return 1<arguments.length?(null==L?S.remove(H):S.set(H,t(L)),z):S.get(H)},find:function(H,L,U){var M,X=f.length;U=null==U?Infinity:U*U;for(M=0;M<X;++M){var Y=f[M];\nvar W=H-Y.x;var ba=L-Y.y;W=W*W+ba*ba;if(W<U){var aa=Y;U=W}}return aa},on:function(H,L){return 1<arguments.length?(K.on(H,L),z):K.on(H)}}};d3.forceX=function(f){function n(A){for(var C=0,G=t.length,O;C<G;++C`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 855,
                  "startColumn": 374,
                  "endLine": 855,
                  "endColumn": 379,
                  "snippet": {
                    "text": "f):n};f.target=function(A){return arguments.length?(u=A,f):u};f.context=function(A){return arguments.length?(D=null==A?null:A,f):D};return f};d3.nest=function(){function f(A,C,G,O){if(C>=u.length)return null!=t&&A.sort(t),null!=z?z(A):A;for(var S=-1,E=A.length,K=u[C++],H,L,U=rb(),M,X=G();++S<E;)(M=U.get(H=K(L=A[S])+\"\"))?M.push(L):U.set(H,[L]);U.each(function(Y,W){O(X,W,f(Y,C,G,O))});return X}function n(A,C){if(++C>u.length)return A;\nvar G=r[C-1];if(null!=z&&C>=u.length)var O=A.entries();else O=[],A.each(function(S,E){O.push({key:E,values:n(S,C)})});return null!=G?O.sort(function(S,E){return G(S.key",
                    "rendered": {
                      "text": "f):n};f.target=function(A){return arguments.length?(u=A,f):u};f.context=function(A){return arguments.length?(D=null==A?null:A,f):D};return f};d3.nest=function(){function f(A,C,G,O){if(C>=u.length)return null!=t&&A.sort(t),null!=z?z(A):A;for(var S=-1,E=A.length,K=u[C++],H,L,U=rb(),M,X=G();++S<E;)(M=U.get(H=K(L=A[S])+\"\"))?M.push(L):U.set(H,[L]);U.each(function(Y,W){O(X,W,f(Y,C,G,O))});return X}function n(A,C){if(++C>u.length)return A;\nvar G=r[C-1];if(null!=z&&C>=u.length)var O=A.entries();else O=[],A.each(function(S,E){O.push({key:E,values:n(S,C)})});return null!=G?O.sort(function(S,E){return G(S.key",
                      "markdown": "`f):n};f.target=function(A){return arguments.length?(u=A,f):u};f.context=function(A){return arguments.length?(D=null==A?null:A,f):D};return f};d3.nest=function(){function f(A,C,G,O){if(C>=u.length)return null!=t&&A.sort(t),null!=z?z(A):A;for(var S=-1,E=A.length,K=u[C++],H,L,U=rb(),M,X=G();++S<E;)(M=U.get(H=K(L=A[S])+\"\"))?M.push(L):U.set(H,[L]);U.each(function(Y,W){O(X,W,f(Y,C,G,O))});return X}function n(A,C){if(++C>u.length)return A;\nvar G=r[C-1];if(null!=z&&C>=u.length)var O=A.entries();else O=[],A.each(function(S,E){O.push({key:E,values:n(S,C)})});return null!=G?O.sort(function(S,E){return G(S.key`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 634,
                  "startColumn": 411,
                  "endLine": 634,
                  "endColumn": 416,
                  "snippet": {
                    "text": "a[0])*(c[1]-a[1])-(b[1]-a[1])*(c[0]-a[0])}function fr(a,b){return a[0]-b[0]||a[1]-b[1]}function $k(a){for(var b=a.length,c=[0,1],d=2,e=2;e<b;++e){for(;1<d&&0>=er(a[c[d-2]],a[c[d-1]],a[e]);)--d;c[d++]=e}return c.slice(0,d)}function zc(){return Math.random()}function kh(a){function b(g){var k=g+\"\",m=c.get(k);if(!m){if(e!==lh)return e;c.set(k,m=d.push(g))}return a[(m-1)%a.length]}var c=rb(),\nd=[],e=lh;a=null==a?[]:Ib.call(a);b.domain=function(g){if(!arguments.length)return d.slice();d=[];c=rb();for(var k=-1,m=g.length,p,v;++k<m;)c.has(v=(p=g[k])+\"\")||c.set(v,d.push(p));return b};b.range=function(g){re",
                    "rendered": {
                      "text": "a[0])*(c[1]-a[1])-(b[1]-a[1])*(c[0]-a[0])}function fr(a,b){return a[0]-b[0]||a[1]-b[1]}function $k(a){for(var b=a.length,c=[0,1],d=2,e=2;e<b;++e){for(;1<d&&0>=er(a[c[d-2]],a[c[d-1]],a[e]);)--d;c[d++]=e}return c.slice(0,d)}function zc(){return Math.random()}function kh(a){function b(g){var k=g+\"\",m=c.get(k);if(!m){if(e!==lh)return e;c.set(k,m=d.push(g))}return a[(m-1)%a.length]}var c=rb(),\nd=[],e=lh;a=null==a?[]:Ib.call(a);b.domain=function(g){if(!arguments.length)return d.slice();d=[];c=rb();for(var k=-1,m=g.length,p,v;++k<m;)c.has(v=(p=g[k])+\"\")||c.set(v,d.push(p));return b};b.range=function(g){re",
                      "markdown": "`a[0])*(c[1]-a[1])-(b[1]-a[1])*(c[0]-a[0])}function fr(a,b){return a[0]-b[0]||a[1]-b[1]}function $k(a){for(var b=a.length,c=[0,1],d=2,e=2;e<b;++e){for(;1<d&&0>=er(a[c[d-2]],a[c[d-1]],a[e]);)--d;c[d++]=e}return c.slice(0,d)}function zc(){return Math.random()}function kh(a){function b(g){var k=g+\"\",m=c.get(k);if(!m){if(e!==lh)return e;c.set(k,m=d.push(g))}return a[(m-1)%a.length]}var c=rb(),\nd=[],e=lh;a=null==a?[]:Ib.call(a);b.domain=function(g){if(!arguments.length)return d.slice();d=[];c=rb();for(var k=-1,m=g.length,p,v;++k<m;)c.has(v=(p=g[k])+\"\")||c.set(v,d.push(p));return b};b.range=function(g){re`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 575,
                  "startColumn": 86,
                  "endLine": 575,
                  "endColumn": 91,
                  "snippet": {
                    "text": "ion rg(a,b,c,d,e,g){this._x=a;this._y=b;this._x0=c;this._y0=d;this._x1=e;this._y1=g;this._root=void 0}function qj(a){for(var b={data:a.data},c=b;a=a.next;)c=c.next={data:a.data};return b}function bq(a){return a.x+\na.vx}function cq(a){return a.y+a.vy}function dq(a){return a.index}function rj(a,b){a=a.get(b);if(!a)throw Error(\"missing: \"+b);return a}function eq(a){return a.x}function fq(a){return a.y}function qe(a,b){if(0>(b=(a=b?a.toExponential(b-1):a.toExponential()).indexOf(\"e\")))return null;var c=a.slice(0,b);return[1<c.length?c[0]+c.slice(2):c,+a.slice(b+1)]}function nc(a){return a=qe(Math.abs(a",
                    "rendered": {
                      "text": "ion rg(a,b,c,d,e,g){this._x=a;this._y=b;this._x0=c;this._y0=d;this._x1=e;this._y1=g;this._root=void 0}function qj(a){for(var b={data:a.data},c=b;a=a.next;)c=c.next={data:a.data};return b}function bq(a){return a.x+\na.vx}function cq(a){return a.y+a.vy}function dq(a){return a.index}function rj(a,b){a=a.get(b);if(!a)throw Error(\"missing: \"+b);return a}function eq(a){return a.x}function fq(a){return a.y}function qe(a,b){if(0>(b=(a=b?a.toExponential(b-1):a.toExponential()).indexOf(\"e\")))return null;var c=a.slice(0,b);return[1<c.length?c[0]+c.slice(2):c,+a.slice(b+1)]}function nc(a){return a=qe(Math.abs(a",
                      "markdown": "`ion rg(a,b,c,d,e,g){this._x=a;this._y=b;this._x0=c;this._y0=d;this._x1=e;this._y1=g;this._root=void 0}function qj(a){for(var b={data:a.data},c=b;a=a.next;)c=c.next={data:a.data};return b}function bq(a){return a.x+\na.vx}function cq(a){return a.y+a.vy}function dq(a){return a.index}function rj(a,b){a=a.get(b);if(!a)throw Error(\"missing: \"+b);return a}function eq(a){return a.x}function fq(a){return a.y}function qe(a,b){if(0>(b=(a=b?a.toExponential(b-1):a.toExponential()).indexOf(\"e\")))return null;var c=a.slice(0,b);return[1<c.length?c[0]+c.slice(2):c,+a.slice(b+1)]}function nc(a){return a=qe(Math.abs(a`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 323,
                  "startColumn": 274,
                  "endLine": 323,
                  "endColumn": 279,
                  "snippet": {
                    "text": "buteChangedCallback(this,\nf,g,h,e)};Zf?c(HTMLElement.prototype,Zf):Pf&&c(Element.prototype,Pf);$f?d(HTMLElement.prototype,$f):Qf&&d(Element.prototype,Qf);yg(a,Element.prototype,{prepend:Rf,append:Sf});Ag(a)};var Cg={};function Dg(a){function b(){var c=this.constructor;var d=document.__CE_registry.Ta.get(c);if(!d)throw Error(\"Failed to construct a custom element: The constructor was not registered with `customElements`.\");var e=d.constructionStack;if(0===e.length)return e=uf.call(document,d.localName),Object.setPrototypeOf(e,c.prototype),e.__CE_state=1,e.__CE_definition=d,mg(a,e),e;var f=e.length-1,",
                    "rendered": {
                      "text": "buteChangedCallback(this,\nf,g,h,e)};Zf?c(HTMLElement.prototype,Zf):Pf&&c(Element.prototype,Pf);$f?d(HTMLElement.prototype,$f):Qf&&d(Element.prototype,Qf);yg(a,Element.prototype,{prepend:Rf,append:Sf});Ag(a)};var Cg={};function Dg(a){function b(){var c=this.constructor;var d=document.__CE_registry.Ta.get(c);if(!d)throw Error(\"Failed to construct a custom element: The constructor was not registered with `customElements`.\");var e=d.constructionStack;if(0===e.length)return e=uf.call(document,d.localName),Object.setPrototypeOf(e,c.prototype),e.__CE_state=1,e.__CE_definition=d,mg(a,e),e;var f=e.length-1,",
                      "markdown": "`buteChangedCallback(this,\nf,g,h,e)};Zf?c(HTMLElement.prototype,Zf):Pf&&c(Element.prototype,Pf);$f?d(HTMLElement.prototype,$f):Qf&&d(Element.prototype,Qf);yg(a,Element.prototype,{prepend:Rf,append:Sf});Ag(a)};var Cg={};function Dg(a){function b(){var c=this.constructor;var d=document.__CE_registry.Ta.get(c);if(!d)throw Error(\"Failed to construct a custom element: The constructor was not registered with `customElements`.\");var e=d.constructionStack;if(0===e.length)return e=uf.call(document,d.localName),Object.setPrototypeOf(e,c.prototype),e.__CE_state=1,e.__CE_definition=d,mg(a,e),e;var f=e.length-1,`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 317,
                  "startColumn": 58,
                  "endLine": 317,
                  "endColumn": 63,
                  "snippet": {
                    "text": ";var c=this.ka.has(a)||this.ja.has(a);a=-1===this.oa.indexOf(a);c&&a&&b.resolve(void 0);return b.hb};n.polyfillWrapFlushCallback=function(a){this.Va&&this.Va.disconnect();var b=this.ia;this.ia=function(c){return a(function(){return b(c)})}};\nfunction sg(a,b){var c=a.ka.get(b);if(c)return c;if(c=a.ja.get(b)){a.ja.delete(b);try{return xg(a,b,c())}catch(d){rg(d)}}}T.prototype.define=T.prototype.define;T.prototype.upgrade=T.prototype.upgrade;T.prototype.get=T.prototype.get;T.prototype.whenDefined=T.prototype.whenDefined;T.prototype.polyfillDefineLazy=T.prototype.Pc;T.prototype.polyfillWrapFlushCallback",
                    "rendered": {
                      "text": ";var c=this.ka.has(a)||this.ja.has(a);a=-1===this.oa.indexOf(a);c&&a&&b.resolve(void 0);return b.hb};n.polyfillWrapFlushCallback=function(a){this.Va&&this.Va.disconnect();var b=this.ia;this.ia=function(c){return a(function(){return b(c)})}};\nfunction sg(a,b){var c=a.ka.get(b);if(c)return c;if(c=a.ja.get(b)){a.ja.delete(b);try{return xg(a,b,c())}catch(d){rg(d)}}}T.prototype.define=T.prototype.define;T.prototype.upgrade=T.prototype.upgrade;T.prototype.get=T.prototype.get;T.prototype.whenDefined=T.prototype.whenDefined;T.prototype.polyfillDefineLazy=T.prototype.Pc;T.prototype.polyfillWrapFlushCallback",
                      "markdown": "`;var c=this.ka.has(a)||this.ja.has(a);a=-1===this.oa.indexOf(a);c&&a&&b.resolve(void 0);return b.hb};n.polyfillWrapFlushCallback=function(a){this.Va&&this.Va.disconnect();var b=this.ia;this.ia=function(c){return a(function(){return b(c)})}};\nfunction sg(a,b){var c=a.ka.get(b);if(c)return c;if(c=a.ja.get(b)){a.ja.delete(b);try{return xg(a,b,c())}catch(d){rg(d)}}}T.prototype.define=T.prototype.define;T.prototype.upgrade=T.prototype.upgrade;T.prototype.get=T.prototype.get;T.prototype.whenDefined=T.prototype.whenDefined;T.prototype.polyfillDefineLazy=T.prototype.Pc;T.prototype.polyfillWrapFlushCallback`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 317,
                  "startColumn": 27,
                  "endLine": 317,
                  "endColumn": 32,
                  "snippet": {
                    "text": " b.hb;b=new ug;this.Ia.set(a,b);var c=this.ka.has(a)||this.ja.has(a);a=-1===this.oa.indexOf(a);c&&a&&b.resolve(void 0);return b.hb};n.polyfillWrapFlushCallback=function(a){this.Va&&this.Va.disconnect();var b=this.ia;this.ia=function(c){return a(function(){return b(c)})}};\nfunction sg(a,b){var c=a.ka.get(b);if(c)return c;if(c=a.ja.get(b)){a.ja.delete(b);try{return xg(a,b,c())}catch(d){rg(d)}}}T.prototype.define=T.prototype.define;T.prototype.upgrade=T.prototype.upgrade;T.prototype.get=T.prototype.get;T.prototype.whenDefined=T.prototype.whenDefined;T.prototype.polyfillDefineLazy=T.prototype.Pc;T.prot",
                    "rendered": {
                      "text": " b.hb;b=new ug;this.Ia.set(a,b);var c=this.ka.has(a)||this.ja.has(a);a=-1===this.oa.indexOf(a);c&&a&&b.resolve(void 0);return b.hb};n.polyfillWrapFlushCallback=function(a){this.Va&&this.Va.disconnect();var b=this.ia;this.ia=function(c){return a(function(){return b(c)})}};\nfunction sg(a,b){var c=a.ka.get(b);if(c)return c;if(c=a.ja.get(b)){a.ja.delete(b);try{return xg(a,b,c())}catch(d){rg(d)}}}T.prototype.define=T.prototype.define;T.prototype.upgrade=T.prototype.upgrade;T.prototype.get=T.prototype.get;T.prototype.whenDefined=T.prototype.whenDefined;T.prototype.polyfillDefineLazy=T.prototype.Pc;T.prot",
                      "markdown": "` b.hb;b=new ug;this.Ia.set(a,b);var c=this.ka.has(a)||this.ja.has(a);a=-1===this.oa.indexOf(a);c&&a&&b.resolve(void 0);return b.hb};n.polyfillWrapFlushCallback=function(a){this.Va&&this.Va.disconnect();var b=this.ia;this.ia=function(c){return a(function(){return b(c)})}};\nfunction sg(a,b){var c=a.ka.get(b);if(c)return c;if(c=a.ja.get(b)){a.ja.delete(b);try{return xg(a,b,c())}catch(d){rg(d)}}}T.prototype.define=T.prototype.define;T.prototype.upgrade=T.prototype.upgrade;T.prototype.get=T.prototype.get;T.prototype.whenDefined=T.prototype.whenDefined;T.prototype.polyfillDefineLazy=T.prototype.Pc;T.prot`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 316,
                  "startColumn": 135,
                  "endLine": 316,
                  "endColumn": 140,
                  "snippet": {
                    "text": "e],g=d.get(f),h=0;h<g.length;h++)og(this.G,g[h]);(f=this.Ia.get(f))&&f.resolve(void 0)}c.length=0}};n.get=function(a){if(a=sg(this,a))return a.constructorFunction};\nn.whenDefined=function(a){if(!bg(a))return Promise.reject(new SyntaxError(\"'\"+a+\"' is not a valid custom element name.\"));var b=this.Ia.get(a);if(b)return b.hb;b=new ug;this.Ia.set(a,b);var c=this.ka.has(a)||this.ja.has(a);a=-1===this.oa.indexOf(a);c&&a&&b.resolve(void 0);return b.hb};n.polyfillWrapFlushCallback=function(a){this.Va&&this.Va.disconnect();var b=this.ia;this.ia=function(c){return a(function(){return b(c)})}};\nfunction sg(a",
                    "rendered": {
                      "text": "e],g=d.get(f),h=0;h<g.length;h++)og(this.G,g[h]);(f=this.Ia.get(f))&&f.resolve(void 0)}c.length=0}};n.get=function(a){if(a=sg(this,a))return a.constructorFunction};\nn.whenDefined=function(a){if(!bg(a))return Promise.reject(new SyntaxError(\"'\"+a+\"' is not a valid custom element name.\"));var b=this.Ia.get(a);if(b)return b.hb;b=new ug;this.Ia.set(a,b);var c=this.ka.has(a)||this.ja.has(a);a=-1===this.oa.indexOf(a);c&&a&&b.resolve(void 0);return b.hb};n.polyfillWrapFlushCallback=function(a){this.Va&&this.Va.disconnect();var b=this.ia;this.ia=function(c){return a(function(){return b(c)})}};\nfunction sg(a",
                      "markdown": "`e],g=d.get(f),h=0;h<g.length;h++)og(this.G,g[h]);(f=this.Ia.get(f))&&f.resolve(void 0)}c.length=0}};n.get=function(a){if(a=sg(this,a))return a.constructorFunction};\nn.whenDefined=function(a){if(!bg(a))return Promise.reject(new SyntaxError(\"'\"+a+\"' is not a valid custom element name.\"));var b=this.Ia.get(a);if(b)return b.hb;b=new ug;this.Ia.set(a,b);var c=this.ka.has(a)||this.ja.has(a);a=-1===this.oa.indexOf(a);c&&a&&b.resolve(void 0);return b.hb};n.polyfillWrapFlushCallback=function(a){this.Va&&this.Va.disconnect();var b=this.ia;this.ia=function(c){return a(function(){return b(c)})}};\nfunction sg(a`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 315,
                  "startColumn": 388,
                  "endLine": 315,
                  "endColumn": 393,
                  "snippet": {
                    "text": "0;e<c.length;e++)d.set(c[e],[]);qg(this.G,document,{upgrade:function(k){if(void 0===k.__CE_state){var l=k.localName,p=d.get(l);p?p.push(k):a.ka.has(l)&&b.push(k)}}});for(e=0;e<b.length;e++)og(this.G,b[e]);for(e=0;e<c.length;e++){for(var f=c[e],g=d.get(f),h=0;h<g.length;h++)og(this.G,g[h]);(f=this.Ia.get(f))&&f.resolve(void 0)}c.length=0}};n.get=function(a){if(a=sg(this,a))return a.constructorFunction};\nn.whenDefined=function(a){if(!bg(a))return Promise.reject(new SyntaxError(\"'\"+a+\"' is not a valid custom element name.\"));var b=this.Ia.get(a);if(b)return b.hb;b=new ug;this.Ia.set(a,b);var c=this.ka",
                    "rendered": {
                      "text": "0;e<c.length;e++)d.set(c[e],[]);qg(this.G,document,{upgrade:function(k){if(void 0===k.__CE_state){var l=k.localName,p=d.get(l);p?p.push(k):a.ka.has(l)&&b.push(k)}}});for(e=0;e<b.length;e++)og(this.G,b[e]);for(e=0;e<c.length;e++){for(var f=c[e],g=d.get(f),h=0;h<g.length;h++)og(this.G,g[h]);(f=this.Ia.get(f))&&f.resolve(void 0)}c.length=0}};n.get=function(a){if(a=sg(this,a))return a.constructorFunction};\nn.whenDefined=function(a){if(!bg(a))return Promise.reject(new SyntaxError(\"'\"+a+\"' is not a valid custom element name.\"));var b=this.Ia.get(a);if(b)return b.hb;b=new ug;this.Ia.set(a,b);var c=this.ka",
                      "markdown": "`0;e<c.length;e++)d.set(c[e],[]);qg(this.G,document,{upgrade:function(k){if(void 0===k.__CE_state){var l=k.localName,p=d.get(l);p?p.push(k):a.ka.has(l)&&b.push(k)}}});for(e=0;e<b.length;e++)og(this.G,b[e]);for(e=0;e<c.length;e++){for(var f=c[e],g=d.get(f),h=0;h<g.length;h++)og(this.G,g[h]);(f=this.Ia.get(f))&&f.resolve(void 0)}c.length=0}};n.get=function(a){if(a=sg(this,a))return a.constructorFunction};\nn.whenDefined=function(a){if(!bg(a))return Promise.reject(new SyntaxError(\"'\"+a+\"' is not a valid custom element name.\"));var b=this.Ia.get(a);if(b)return b.hb;b=new ug;this.Ia.set(a,b);var c=this.ka`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 315,
                  "startColumn": 335,
                  "endLine": 315,
                  "endColumn": 340,
                  "snippet": {
                    "text": "this.M){this.M=!1;for(var b=[],c=this.oa,d=new Map,e=0;e<c.length;e++)d.set(c[e],[]);qg(this.G,document,{upgrade:function(k){if(void 0===k.__CE_state){var l=k.localName,p=d.get(l);p?p.push(k):a.ka.has(l)&&b.push(k)}}});for(e=0;e<b.length;e++)og(this.G,b[e]);for(e=0;e<c.length;e++){for(var f=c[e],g=d.get(f),h=0;h<g.length;h++)og(this.G,g[h]);(f=this.Ia.get(f))&&f.resolve(void 0)}c.length=0}};n.get=function(a){if(a=sg(this,a))return a.constructorFunction};\nn.whenDefined=function(a){if(!bg(a))return Promise.reject(new SyntaxError(\"'\"+a+\"' is not a valid custom element name.\"));var b=this.Ia.get(a);if(",
                    "rendered": {
                      "text": "this.M){this.M=!1;for(var b=[],c=this.oa,d=new Map,e=0;e<c.length;e++)d.set(c[e],[]);qg(this.G,document,{upgrade:function(k){if(void 0===k.__CE_state){var l=k.localName,p=d.get(l);p?p.push(k):a.ka.has(l)&&b.push(k)}}});for(e=0;e<b.length;e++)og(this.G,b[e]);for(e=0;e<c.length;e++){for(var f=c[e],g=d.get(f),h=0;h<g.length;h++)og(this.G,g[h]);(f=this.Ia.get(f))&&f.resolve(void 0)}c.length=0}};n.get=function(a){if(a=sg(this,a))return a.constructorFunction};\nn.whenDefined=function(a){if(!bg(a))return Promise.reject(new SyntaxError(\"'\"+a+\"' is not a valid custom element name.\"));var b=this.Ia.get(a);if(",
                      "markdown": "`this.M){this.M=!1;for(var b=[],c=this.oa,d=new Map,e=0;e<c.length;e++)d.set(c[e],[]);qg(this.G,document,{upgrade:function(k){if(void 0===k.__CE_state){var l=k.localName,p=d.get(l);p?p.push(k):a.ka.has(l)&&b.push(k)}}});for(e=0;e<b.length;e++)og(this.G,b[e]);for(e=0;e<c.length;e++){for(var f=c[e],g=d.get(f),h=0;h<g.length;h++)og(this.G,g[h]);(f=this.Ia.get(f))&&f.resolve(void 0)}c.length=0}};n.get=function(a){if(a=sg(this,a))return a.constructorFunction};\nn.whenDefined=function(a){if(!bg(a))return Promise.reject(new SyntaxError(\"'\"+a+\"' is not a valid custom element name.\"));var b=this.Ia.get(a);if(`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 315,
                  "startColumn": 207,
                  "endLine": 315,
                  "endColumn": 212,
                  "snippet": {
                    "text": ".ka.set(b,c);a.Ta.set(c.constructorFunction,c);return c}n.upgrade=function(a){qg(this.G,a)};\nn.Xa=function(){var a=this;if(!1!==this.M){this.M=!1;for(var b=[],c=this.oa,d=new Map,e=0;e<c.length;e++)d.set(c[e],[]);qg(this.G,document,{upgrade:function(k){if(void 0===k.__CE_state){var l=k.localName,p=d.get(l);p?p.push(k):a.ka.has(l)&&b.push(k)}}});for(e=0;e<b.length;e++)og(this.G,b[e]);for(e=0;e<c.length;e++){for(var f=c[e],g=d.get(f),h=0;h<g.length;h++)og(this.G,g[h]);(f=this.Ia.get(f))&&f.resolve(void 0)}c.length=0}};n.get=function(a){if(a=sg(this,a))return a.constructorFunction};\nn.whenDefined=func",
                    "rendered": {
                      "text": ".ka.set(b,c);a.Ta.set(c.constructorFunction,c);return c}n.upgrade=function(a){qg(this.G,a)};\nn.Xa=function(){var a=this;if(!1!==this.M){this.M=!1;for(var b=[],c=this.oa,d=new Map,e=0;e<c.length;e++)d.set(c[e],[]);qg(this.G,document,{upgrade:function(k){if(void 0===k.__CE_state){var l=k.localName,p=d.get(l);p?p.push(k):a.ka.has(l)&&b.push(k)}}});for(e=0;e<b.length;e++)og(this.G,b[e]);for(e=0;e<c.length;e++){for(var f=c[e],g=d.get(f),h=0;h<g.length;h++)og(this.G,g[h]);(f=this.Ia.get(f))&&f.resolve(void 0)}c.length=0}};n.get=function(a){if(a=sg(this,a))return a.constructorFunction};\nn.whenDefined=func",
                      "markdown": "`.ka.set(b,c);a.Ta.set(c.constructorFunction,c);return c}n.upgrade=function(a){qg(this.G,a)};\nn.Xa=function(){var a=this;if(!1!==this.M){this.M=!1;for(var b=[],c=this.oa,d=new Map,e=0;e<c.length;e++)d.set(c[e],[]);qg(this.G,document,{upgrade:function(k){if(void 0===k.__CE_state){var l=k.localName,p=d.get(l);p?p.push(k):a.ka.has(l)&&b.push(k)}}});for(e=0;e<b.length;e++)og(this.G,b[e]);for(e=0;e<c.length;e++){for(var f=c[e],g=d.get(f),h=0;h<g.length;h++)og(this.G,g[h]);(f=this.Ia.get(f))&&f.resolve(void 0)}c.length=0}};n.get=function(a){if(a=sg(this,a))return a.constructorFunction};\nn.whenDefined=func`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 293,
                  "startColumn": 319,
                  "endLine": 293,
                  "endColumn": 324,
                  "snippet": {
                    "text": "){Object.defineProperty(pf.prototype,a,{get:function(){return this.node[\"__shady_\"+a]},set:function(b){this.node[\"__shady_\"+a]=b},configurable:!0})}Qd.forEach(function(a){return qf(a)});Rd.forEach(function(a){return qf(a)});var rf=new WeakMap;function sf(a){if(K(a)||a instanceof pf)return a;var b=rf.get(a);b||(b=new pf(a),rf.set(a,b));return b};if(J.inUse){var tf=J.j?function(a){return a}:function(a){md(a);ld(a);return a};window.ShadyDOM={inUse:J.inUse,patch:tf,isShadyRoot:K,enqueue:Jc,flush:Kc,flushInitial:function(a){a.Qb()},settings:J,filterMutations:Pc,observeChildren:Nc,unobserveChildren:Oc,de",
                    "rendered": {
                      "text": "){Object.defineProperty(pf.prototype,a,{get:function(){return this.node[\"__shady_\"+a]},set:function(b){this.node[\"__shady_\"+a]=b},configurable:!0})}Qd.forEach(function(a){return qf(a)});Rd.forEach(function(a){return qf(a)});var rf=new WeakMap;function sf(a){if(K(a)||a instanceof pf)return a;var b=rf.get(a);b||(b=new pf(a),rf.set(a,b));return b};if(J.inUse){var tf=J.j?function(a){return a}:function(a){md(a);ld(a);return a};window.ShadyDOM={inUse:J.inUse,patch:tf,isShadyRoot:K,enqueue:Jc,flush:Kc,flushInitial:function(a){a.Qb()},settings:J,filterMutations:Pc,observeChildren:Nc,unobserveChildren:Oc,de",
                      "markdown": "`){Object.defineProperty(pf.prototype,a,{get:function(){return this.node[\"__shady_\"+a]},set:function(b){this.node[\"__shady_\"+a]=b},configurable:!0})}Qd.forEach(function(a){return qf(a)});Rd.forEach(function(a){return qf(a)});var rf=new WeakMap;function sf(a){if(K(a)||a instanceof pf)return a;var b=rf.get(a);b||(b=new pf(a),rf.set(a,b));return b};if(J.inUse){var tf=J.j?function(a){return a}:function(a){md(a);ld(a);return a};window.ShadyDOM={inUse:J.inUse,patch:tf,isShadyRoot:K,enqueue:Jc,flush:Kc,flushInitial:function(a){a.Qb()},settings:J,filterMutations:Pc,observeChildren:Nc,unobserveChildren:Oc,de`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 241,
                  "startColumn": 357,
                  "endLine": 241,
                  "endColumn": 362,
                  "snippet": {
                    "text": "}],['\"',{end:'\"',ta:!1}],[\"'\",{end:\"'\",ta:!1}]].forEach(function(a){var b=ea(a);a=b.next().value;b=b.next().value;re.set(a,b)});function se(a,b,c,d){for(d=void 0===d?!0:d;b<a.length;b++)if(\"\\\\\"===a[b]&&b<a.length-1&&\"\\n\"!==a[b+1])b++;else{if(-1!==c.indexOf(a[b]))return b;if(d&&re.has(a[b])){var e=re.get(a[b]);b=se(a,b+1,[e.end],e.ta)}}return a.length}\nfunction te(a){function b(){if(0<d.length){for(;\" \"===d[d.length-1];)d.pop();c.push({ob:d.filter(function(k,l){return 0===l%2}),Bc:d.filter(function(k,l){return 1===l%2})});d.length=0}}for(var c=[],d=[],e=0;e<a.length;){var f=d[d.length-1],g=se(a,e,[\"",
                    "rendered": {
                      "text": "}],['\"',{end:'\"',ta:!1}],[\"'\",{end:\"'\",ta:!1}]].forEach(function(a){var b=ea(a);a=b.next().value;b=b.next().value;re.set(a,b)});function se(a,b,c,d){for(d=void 0===d?!0:d;b<a.length;b++)if(\"\\\\\"===a[b]&&b<a.length-1&&\"\\n\"!==a[b+1])b++;else{if(-1!==c.indexOf(a[b]))return b;if(d&&re.has(a[b])){var e=re.get(a[b]);b=se(a,b+1,[e.end],e.ta)}}return a.length}\nfunction te(a){function b(){if(0<d.length){for(;\" \"===d[d.length-1];)d.pop();c.push({ob:d.filter(function(k,l){return 0===l%2}),Bc:d.filter(function(k,l){return 1===l%2})});d.length=0}}for(var c=[],d=[],e=0;e<a.length;){var f=d[d.length-1],g=se(a,e,[\"",
                      "markdown": "`}],['\"',{end:'\"',ta:!1}],[\"'\",{end:\"'\",ta:!1}]].forEach(function(a){var b=ea(a);a=b.next().value;b=b.next().value;re.set(a,b)});function se(a,b,c,d){for(d=void 0===d?!0:d;b<a.length;b++)if(\"\\\\\"===a[b]&&b<a.length-1&&\"\\n\"!==a[b+1])b++;else{if(-1!==c.indexOf(a[b]))return b;if(d&&re.has(a[b])){var e=re.get(a[b]);b=se(a,b+1,[e.end],e.ta)}}return a.length}\nfunction te(a){function b(){if(0<d.length){for(;\" \"===d[d.length-1];)d.pop();c.push({ob:d.filter(function(k,l){return 0===l%2}),Bc:d.filter(function(k,l){return 1===l%2})});d.length=0}}for(var c=[],d=[],e=0;e<a.length;){var f=d[d.length-1],g=se(a,e,[\"`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 102,
                  "startColumn": 371,
                  "endLine": 102,
                  "endColumn": 376,
                  "snippet": {
                    "text": "b);Qa.call(d,a,g,e);if(\"function\"===typeof b)return b.call(d,k);if(\"function\"===typeof(null==b?void 0:b.handleEvent))return b.handleEvent(k)}:null;f.set(b,g);var h;Pa.call(this,a,null!=(h=g)?h:b,e)}}};Na.prototype.removeEventListener=function(a,b,c){if(null!=b){c=Oa(c).capture;var d=Va(this,a,c),e=d.get(b);void 0!==e&&(d.delete(b),Qa.call(this,a,null!=e?e:b,c))}}};/*\n\nCopyright (c) 2020 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.githu",
                    "rendered": {
                      "text": "b);Qa.call(d,a,g,e);if(\"function\"===typeof b)return b.call(d,k);if(\"function\"===typeof(null==b?void 0:b.handleEvent))return b.handleEvent(k)}:null;f.set(b,g);var h;Pa.call(this,a,null!=(h=g)?h:b,e)}}};Na.prototype.removeEventListener=function(a,b,c){if(null!=b){c=Oa(c).capture;var d=Va(this,a,c),e=d.get(b);void 0!==e&&(d.delete(b),Qa.call(this,a,null!=e?e:b,c))}}};/*\n\nCopyright (c) 2020 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.githu",
                      "markdown": "`b);Qa.call(d,a,g,e);if(\"function\"===typeof b)return b.call(d,k);if(\"function\"===typeof(null==b?void 0:b.handleEvent))return b.handleEvent(k)}:null;f.set(b,g);var h;Pa.call(this,a,null!=(h=g)?h:b,e)}}};Na.prototype.removeEventListener=function(a,b,c){if(null!=b){c=Oa(c).capture;var d=Va(this,a,c),e=d.get(b);void 0!==e&&(d.delete(b),Qa.call(this,a,null!=e?e:b,c))}}};/*\n\nCopyright (c) 2020 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.githu`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 101,
                  "startColumn": 361,
                  "endLine": 101,
                  "endColumn": 366,
                  "snippet": {
                    "text": "{if(!a||\"object\"!==typeof a&&\"function\"!==typeof a){var b=!!a;a=!1}else b=!!a.capture,a=!!a.once;return{capture:b,once:a}},Pa=Na.prototype.addEventListener,Qa=Na.prototype.removeEventListener,Ta=new WeakMap,Ua=new WeakMap,Va=function(a,b,c){var d=c?Ta:Ua;c=d.get(a);void 0===c&&d.set(a,c=new Map);a=c.get(b);void 0===a&&c.set(b,a=new WeakMap);return a};Na.prototype.addEventListener=function(a,b,c){var d=this;if(null!=b){c=Oa(c);var e=c.capture;\nc=c.once;var f=Va(this,a,e);if(!f.has(b)){var g=c?function(k){f.delete(b);Qa.call(d,a,g,e);if(\"function\"===typeof b)return b.call(d,k);if(\"function\"===typeof(",
                    "rendered": {
                      "text": "{if(!a||\"object\"!==typeof a&&\"function\"!==typeof a){var b=!!a;a=!1}else b=!!a.capture,a=!!a.once;return{capture:b,once:a}},Pa=Na.prototype.addEventListener,Qa=Na.prototype.removeEventListener,Ta=new WeakMap,Ua=new WeakMap,Va=function(a,b,c){var d=c?Ta:Ua;c=d.get(a);void 0===c&&d.set(a,c=new Map);a=c.get(b);void 0===a&&c.set(b,a=new WeakMap);return a};Na.prototype.addEventListener=function(a,b,c){var d=this;if(null!=b){c=Oa(c);var e=c.capture;\nc=c.once;var f=Va(this,a,e);if(!f.has(b)){var g=c?function(k){f.delete(b);Qa.call(d,a,g,e);if(\"function\"===typeof b)return b.call(d,k);if(\"function\"===typeof(",
                      "markdown": "`{if(!a||\"object\"!==typeof a&&\"function\"!==typeof a){var b=!!a;a=!1}else b=!!a.capture,a=!!a.once;return{capture:b,once:a}},Pa=Na.prototype.addEventListener,Qa=Na.prototype.removeEventListener,Ta=new WeakMap,Ua=new WeakMap,Va=function(a,b,c){var d=c?Ta:Ua;c=d.get(a);void 0===c&&d.set(a,c=new Map);a=c.get(b);void 0===a&&c.set(b,a=new WeakMap);return a};Na.prototype.addEventListener=function(a,b,c){var d=this;if(null!=b){c=Oa(c);var e=c.capture;\nc=c.once;var f=Va(this,a,e);if(!f.has(b)){var g=c?function(k){f.delete(b);Qa.call(d,a,g,e);if(\"function\"===typeof b)return b.call(d,k);if(\"function\"===typeof(`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 101,
                  "startColumn": 319,
                  "endLine": 101,
                  "endColumn": 324,
                  "snippet": {
                    "text": "stener\"in Na.prototype){var Oa=function(a){if(!a||\"object\"!==typeof a&&\"function\"!==typeof a){var b=!!a;a=!1}else b=!!a.capture,a=!!a.once;return{capture:b,once:a}},Pa=Na.prototype.addEventListener,Qa=Na.prototype.removeEventListener,Ta=new WeakMap,Ua=new WeakMap,Va=function(a,b,c){var d=c?Ta:Ua;c=d.get(a);void 0===c&&d.set(a,c=new Map);a=c.get(b);void 0===a&&c.set(b,a=new WeakMap);return a};Na.prototype.addEventListener=function(a,b,c){var d=this;if(null!=b){c=Oa(c);var e=c.capture;\nc=c.once;var f=Va(this,a,e);if(!f.has(b)){var g=c?function(k){f.delete(b);Qa.call(d,a,g,e);if(\"function\"===typeof b)",
                    "rendered": {
                      "text": "stener\"in Na.prototype){var Oa=function(a){if(!a||\"object\"!==typeof a&&\"function\"!==typeof a){var b=!!a;a=!1}else b=!!a.capture,a=!!a.once;return{capture:b,once:a}},Pa=Na.prototype.addEventListener,Qa=Na.prototype.removeEventListener,Ta=new WeakMap,Ua=new WeakMap,Va=function(a,b,c){var d=c?Ta:Ua;c=d.get(a);void 0===c&&d.set(a,c=new Map);a=c.get(b);void 0===a&&c.set(b,a=new WeakMap);return a};Na.prototype.addEventListener=function(a,b,c){var d=this;if(null!=b){c=Oa(c);var e=c.capture;\nc=c.once;var f=Va(this,a,e);if(!f.has(b)){var g=c?function(k){f.delete(b);Qa.call(d,a,g,e);if(\"function\"===typeof b)",
                      "markdown": "`stener\"in Na.prototype){var Oa=function(a){if(!a||\"object\"!==typeof a&&\"function\"!==typeof a){var b=!!a;a=!1}else b=!!a.capture,a=!!a.once;return{capture:b,once:a}},Pa=Na.prototype.addEventListener,Qa=Na.prototype.removeEventListener,Ta=new WeakMap,Ua=new WeakMap,Va=function(a,b,c){var d=c?Ta:Ua;c=d.get(a);void 0===c&&d.set(a,c=new Map);a=c.get(b);void 0===a&&c.set(b,a=new WeakMap);return a};Na.prototype.addEventListener=function(a,b,c){var d=this;if(null!=b){c=Oa(c);var e=c.capture;\nc=c.once;var f=Va(this,a,e);if(!f.has(b)){var g=c?function(k){f.delete(b);Qa.call(d,a,g,e);if(\"function\"===typeof b)`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 2033,
                  "startColumn": 1492,
                  "endLine": 2033,
                  "endColumn": 1500,
                  "snippet": {
                    "text": "   </div>\\n      <div class=\"column\">\\n        [[item.falsePositives]]\\n      </div>\\n      <div class=\"column\">\\n        [[item.falseNegatives]]\\n      </div>\\n    </div>\\n  </template>\\n  <template is=\"dom-if\" if=\"[[expandable_]]\">\\n    <paper-tooltip>\\n      More data available. Click anywhere to expand / collapse.\\n    </paper-tooltip>\\n  </template>\\n</div>\\n\\n\\n');on=\nqn}pn=on;function rn(){return X.call(this)||this}D(rn,X);m=rn.prototype;\nm.computeTransformedData_=function(a,b){var c=this;if(a){var d=[];try{d=JSON.parse(a)}catch(e){}return d.matrices.map(function(e,f){return{showTitle:0==f,thre",
                    "rendered": {
                      "text": "   </div>\\n      <div class=\"column\">\\n        [[item.falsePositives]]\\n      </div>\\n      <div class=\"column\">\\n        [[item.falseNegatives]]\\n      </div>\\n    </div>\\n  </template>\\n  <template is=\"dom-if\" if=\"[[expandable_]]\">\\n    <paper-tooltip>\\n      More data available. Click anywhere to expand / collapse.\\n    </paper-tooltip>\\n  </template>\\n</div>\\n\\n\\n');on=\nqn}pn=on;function rn(){return X.call(this)||this}D(rn,X);m=rn.prototype;\nm.computeTransformedData_=function(a,b){var c=this;if(a){var d=[];try{d=JSON.parse(a)}catch(e){}return d.matrices.map(function(e,f){return{showTitle:0==f,thre",
                      "markdown": "`   </div>\\n      <div class=\"column\">\\n        [[item.falsePositives]]\\n      </div>\\n      <div class=\"column\">\\n        [[item.falseNegatives]]\\n      </div>\\n    </div>\\n  </template>\\n  <template is=\"dom-if\" if=\"[[expandable_]]\">\\n    <paper-tooltip>\\n      More data available. Click anywhere to expand / collapse.\\n    </paper-tooltip>\\n  </template>\\n</div>\\n\\n\\n');on=\nqn}pn=on;function rn(){return X.call(this)||this}D(rn,X);m=rn.prototype;\nm.computeTransformedData_=function(a,b){var c=this;if(a){var d=[];try{d=JSON.parse(a)}catch(e){}return d.matrices.map(function(e,f){return{showTitle:0==f,thre`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 2012,
                  "startColumn": 452,
                  "endLine": 2012,
                  "endColumn": 460,
                  "snippet": {
                    "text": " {\\n    text-align: right;\\n  }\\n</style>\\n<div id=\"root\" on-tap=\"toggleExpanded_\">\\n  <template is=\"dom-repeat\" items=\"[[values_]]\">\\n    <div>[[item]]</div>\\n  </template>\\n</div>\\n<template is=\"dom-if\" if=\"[[expandable_]]\">\\n  <paper-tooltip for=\"root\">\\n    More data available. Click anywhere to expand / collapse.\\n  </paper-tooltip>\\n</template>\\n\\n\\n');Um=\nWm}Vm=Um;function Xm(){return X.call(this)||this}D(Xm,X);Xm.prototype.dataChanged_=function(a){var b={};try{b=JSON.parse(a)}catch(h){}var c=[],d=(a=b.shape)&&a.length;if(d){b=b[(b.dataType+\"\").toLowerCase()+\"Values\"];var e=a.reduce(function(h,",
                    "rendered": {
                      "text": " {\\n    text-align: right;\\n  }\\n</style>\\n<div id=\"root\" on-tap=\"toggleExpanded_\">\\n  <template is=\"dom-repeat\" items=\"[[values_]]\">\\n    <div>[[item]]</div>\\n  </template>\\n</div>\\n<template is=\"dom-if\" if=\"[[expandable_]]\">\\n  <paper-tooltip for=\"root\">\\n    More data available. Click anywhere to expand / collapse.\\n  </paper-tooltip>\\n</template>\\n\\n\\n');Um=\nWm}Vm=Um;function Xm(){return X.call(this)||this}D(Xm,X);Xm.prototype.dataChanged_=function(a){var b={};try{b=JSON.parse(a)}catch(h){}var c=[],d=(a=b.shape)&&a.length;if(d){b=b[(b.dataType+\"\").toLowerCase()+\"Values\"];var e=a.reduce(function(h,",
                      "markdown": "` {\\n    text-align: right;\\n  }\\n</style>\\n<div id=\"root\" on-tap=\"toggleExpanded_\">\\n  <template is=\"dom-repeat\" items=\"[[values_]]\">\\n    <div>[[item]]</div>\\n  </template>\\n</div>\\n<template is=\"dom-if\" if=\"[[expandable_]]\">\\n  <paper-tooltip for=\"root\">\\n    More data available. Click anywhere to expand / collapse.\\n  </paper-tooltip>\\n</template>\\n\\n\\n');Um=\nWm}Vm=Um;function Xm(){return X.call(this)||this}D(Xm,X);Xm.prototype.dataChanged_=function(a){var b={};try{b=JSON.parse(a)}catch(h){}var c=[],d=(a=b.shape)&&a.length;if(d){b=b[(b.dataType+\"\").toLowerCase()+\"Values\"];var e=a.reduce(function(h,`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 1982,
                  "startColumn": 909,
                  "endLine": 1982,
                  "endColumn": 913,
                  "snippet": {
                    "text": "rivacy-dialog\">\\n  <h2>Privacy: min-slice-size</h2>\\n  <div class=\"popup\">\\n    <p>\\n      To preserve privacy, we have not aggregated data for slices with example count fewer than\\n      min_slice_size. If you have any questions, or would like to change this threshold, please\\n      reach out to us at ml-fairness-partnerships@google.com.\\n    </p>\\n    Here is the list of all such slices being omitted:<br>\\n    <paper-listbox id=\"omitted-slices-list\">\\n      <template is=\"dom-repeat\" items=\"[[omittedSlices]]\">\\n        <paper-item class=\"omitted-slices-listitem\">[[item]]</paper-item>\\n      </tem",
                    "rendered": {
                      "text": "rivacy-dialog\">\\n  <h2>Privacy: min-slice-size</h2>\\n  <div class=\"popup\">\\n    <p>\\n      To preserve privacy, we have not aggregated data for slices with example count fewer than\\n      min_slice_size. If you have any questions, or would like to change this threshold, please\\n      reach out to us at ml-fairness-partnerships@google.com.\\n    </p>\\n    Here is the list of all such slices being omitted:<br>\\n    <paper-listbox id=\"omitted-slices-list\">\\n      <template is=\"dom-repeat\" items=\"[[omittedSlices]]\">\\n        <paper-item class=\"omitted-slices-listitem\">[[item]]</paper-item>\\n      </tem",
                      "markdown": "`rivacy-dialog\">\\n  <h2>Privacy: min-slice-size</h2>\\n  <div class=\"popup\">\\n    <p>\\n      To preserve privacy, we have not aggregated data for slices with example count fewer than\\n      min_slice_size. If you have any questions, or would like to change this threshold, please\\n      reach out to us at ml-fairness-partnerships@google.com.\\n    </p>\\n    Here is the list of all such slices being omitted:<br>\\n    <paper-listbox id=\"omitted-slices-list\">\\n      <template is=\"dom-repeat\" items=\"[[omittedSlices]]\">\\n        <paper-item class=\"omitted-slices-listitem\">[[item]]</paper-item>\\n      </tem`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 1954,
                  "startColumn": 4261,
                  "endLine": 1954,
                  "endColumn": 4265,
                  "snippet": {
                    "text": "al</paper-item>\\n    </paper-listbox>\\n  </paper-dropdown-menu>\\n  <span>\\n    <paper-dialog id=\"dialog\">\\n      <h2>Parameters</h2>\\n      <ol>\\n        <li><b>Slices</b>\\n          <p>\\n            For each metric, select a set of slices to evaluate using the \"SELECT SLICES\" dropdown.\\n            At most [[MAX_NUM_SLICES]] slices can be selected and rendered.\\n          </p>\\n        </li>\\n        <li><b>Thresholds</b>\\n          <p>\\n            If a metric is thresholded (meaning that its value depends on a model\\'s classification threshold), it will have the option to select thresholds usin",
                    "rendered": {
                      "text": "al</paper-item>\\n    </paper-listbox>\\n  </paper-dropdown-menu>\\n  <span>\\n    <paper-dialog id=\"dialog\">\\n      <h2>Parameters</h2>\\n      <ol>\\n        <li><b>Slices</b>\\n          <p>\\n            For each metric, select a set of slices to evaluate using the \"SELECT SLICES\" dropdown.\\n            At most [[MAX_NUM_SLICES]] slices can be selected and rendered.\\n          </p>\\n        </li>\\n        <li><b>Thresholds</b>\\n          <p>\\n            If a metric is thresholded (meaning that its value depends on a model\\'s classification threshold), it will have the option to select thresholds usin",
                      "markdown": "`al</paper-item>\\n    </paper-listbox>\\n  </paper-dropdown-menu>\\n  <span>\\n    <paper-dialog id=\"dialog\">\\n      <h2>Parameters</h2>\\n      <ol>\\n        <li><b>Slices</b>\\n          <p>\\n            For each metric, select a set of slices to evaluate using the \"SELECT SLICES\" dropdown.\\n            At most [[MAX_NUM_SLICES]] slices can be selected and rendered.\\n          </p>\\n        </li>\\n        <li><b>Thresholds</b>\\n          <p>\\n            If a metric is thresholded (meaning that its value depends on a model\\'s classification threshold), it will have the option to select thresholds usin`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 1782,
                  "startColumn": 315,
                  "endLine": 1782,
                  "endColumn": 324,
                  "snippet": {
                    "text": "Items:function(a){return null==a?null:a.map(function(b){return this._valueToItem(b)},this)}};var bk={properties:{focusedItem:{observer:\"_focusedItemChanged\",readOnly:!0,type:Object},attrForItemTitle:{type:String},disabled:{type:Boolean,value:!1,observer:\"_disabledChanged\"}},dk:\"Alt AltGraph CapsLock Control Fn FnLock Hyper Meta NumLock OS ScrollLock Shift Super Symbol SymbolLock\".split(\" \"),ek:1E3,ei:0,hostAttributes:{role:\"menu\"},observers:[\"_updateMultiselectable(multi)\"],listeners:{focus:\"_onFocus\",keydown:\"_onKeydown\",\"iron-items-changed\":\"_onIronItemsChanged\"},na:{up:\"_onUpKey\",down:\"_onDownKey\",\n",
                    "rendered": {
                      "text": "Items:function(a){return null==a?null:a.map(function(b){return this._valueToItem(b)},this)}};var bk={properties:{focusedItem:{observer:\"_focusedItemChanged\",readOnly:!0,type:Object},attrForItemTitle:{type:String},disabled:{type:Boolean,value:!1,observer:\"_disabledChanged\"}},dk:\"Alt AltGraph CapsLock Control Fn FnLock Hyper Meta NumLock OS ScrollLock Shift Super Symbol SymbolLock\".split(\" \"),ek:1E3,ei:0,hostAttributes:{role:\"menu\"},observers:[\"_updateMultiselectable(multi)\"],listeners:{focus:\"_onFocus\",keydown:\"_onKeydown\",\"iron-items-changed\":\"_onIronItemsChanged\"},na:{up:\"_onUpKey\",down:\"_onDownKey\",\n",
                      "markdown": "`Items:function(a){return null==a?null:a.map(function(b){return this._valueToItem(b)},this)}};var bk={properties:{focusedItem:{observer:\"_focusedItemChanged\",readOnly:!0,type:Object},attrForItemTitle:{type:String},disabled:{type:Boolean,value:!1,observer:\"_disabledChanged\"}},dk:\"Alt AltGraph CapsLock Control Fn FnLock Hyper Meta NumLock OS ScrollLock Shift Super Symbol SymbolLock\".split(\" \"),ek:1E3,ei:0,hostAttributes:{role:\"menu\"},observers:[\"_updateMultiselectable(multi)\"],listeners:{focus:\"_onFocus\",keydown:\"_onKeydown\",\"iron-items-changed\":\"_onIronItemsChanged\"},na:{up:\"_onUpKey\",down:\"_onDownKey\",\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 1157,
                  "startColumn": 279,
                  "endLine": 1157,
                  "endColumn": 283,
                  "snippet": {
                    "text": "(a,b)}e=U.prototype;\ne.getLineChartData=function(a){var b=this,c=this.h.length;return this.h.map(function(d,f){var k=d.config;d=d.data.getMetricValue(\"\",a);f=c-f;var m=b.i?b.g.getModelId(k):b.g.getDataVersion(k);return[{v:\"number\"==typeof m?m:f,f:b.g.getModelHeader()+\" \"+b.g.getModelDisplayText(k)+\" at \"+b.g.getDataHeader()+\" \"+b.g.getDataDisplayText(k)},b.g.getModelId(k),b.g.getModelHeader()+\": \"+b.g.getModelDisplayText(k),{v:d,f:d}]})};\ne.getDataTable=function(){var a=this,b=this.g;return this.h.map(function(c){var d=c.data.getAllMetricValues(\"\"),f=c.config;c=b.getAdditionalDisplayTexts(f);var k",
                    "rendered": {
                      "text": "(a,b)}e=U.prototype;\ne.getLineChartData=function(a){var b=this,c=this.h.length;return this.h.map(function(d,f){var k=d.config;d=d.data.getMetricValue(\"\",a);f=c-f;var m=b.i?b.g.getModelId(k):b.g.getDataVersion(k);return[{v:\"number\"==typeof m?m:f,f:b.g.getModelHeader()+\" \"+b.g.getModelDisplayText(k)+\" at \"+b.g.getDataHeader()+\" \"+b.g.getDataDisplayText(k)},b.g.getModelId(k),b.g.getModelHeader()+\": \"+b.g.getModelDisplayText(k),{v:d,f:d}]})};\ne.getDataTable=function(){var a=this,b=this.g;return this.h.map(function(c){var d=c.data.getAllMetricValues(\"\"),f=c.config;c=b.getAdditionalDisplayTexts(f);var k",
                      "markdown": "`(a,b)}e=U.prototype;\ne.getLineChartData=function(a){var b=this,c=this.h.length;return this.h.map(function(d,f){var k=d.config;d=d.data.getMetricValue(\"\",a);f=c-f;var m=b.i?b.g.getModelId(k):b.g.getDataVersion(k);return[{v:\"number\"==typeof m?m:f,f:b.g.getModelHeader()+\" \"+b.g.getModelDisplayText(k)+\" at \"+b.g.getDataHeader()+\" \"+b.g.getDataDisplayText(k)},b.g.getModelId(k),b.g.getModelHeader()+\": \"+b.g.getModelDisplayText(k),{v:d,f:d}]})};\ne.getDataTable=function(){var a=this,b=this.g;return this.h.map(function(c){var d=c.data.getAllMetricValues(\"\"),f=c.config;c=b.getAdditionalDisplayTexts(f);var k`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 183,
                  "startColumn": 46,
                  "endLine": 183,
                  "endColumn": 50,
                  "snippet": {
                    "text": ".io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nfunction hc(){}hc.prototype.toJSON=function(){return{}};function H(a){a.__shady||(a.__shady=new hc);return a.__shady}function I(a){return a&&a.__shady};var J=window.ShadyDOM||{};J.Hc=!(!Element.prototype.attachShadow||!Node.prototype.getRootNode);var ic=Object",
                    "rendered": {
                      "text": ".io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nfunction hc(){}hc.prototype.toJSON=function(){return{}};function H(a){a.__shady||(a.__shady=new hc);return a.__shady}function I(a){return a&&a.__shady};var J=window.ShadyDOM||{};J.Hc=!(!Element.prototype.attachShadow||!Node.prototype.getRootNode);var ic=Object",
                      "markdown": "`.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\nfunction hc(){}hc.prototype.toJSON=function(){return{}};function H(a){a.__shady||(a.__shady=new hc);return a.__shady}function I(a){return a&&a.__shady};var J=window.ShadyDOM||{};J.Hc=!(!Element.prototype.attachShadow||!Node.prototype.getRootNode);var ic=Object`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 181,
                  "startColumn": 45,
                  "endLine": 181,
                  "endColumn": 49,
                  "snippet": {
                    "text": "Copyright (c) 2016 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n",
                    "rendered": {
                      "text": "Copyright (c) 2016 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n",
                      "markdown": "`Copyright (c) 2016 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt\nThe complete set of authors may be found at http://polymer.github.io/AUTHORS.txt\nThe complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt\nCode distributed by Google as part of the polymer project is also\nsubject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt\n*/\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 2116,
                  "startColumn": 5636,
                  "endLine": 2116,
                  "endColumn": 5642,
                  "snippet": {
                    "text": "   </paper-radio-button>\\n          <paper-radio-button name=\"[[sortBy_.FALSE_NEGATIVES]]\">\\n            [[getModeText_(sortBy_.FALSE_NEGATIVES)]]\\n          </paper-radio-button>\\n        </paper-radio-group>\\n      </div>\\n      <div>\\n        <label id=\"sort-label\">\\n          <span>\\n            Sort by<iron-icon class=\"info\" icon=\"info-outline\"></iron-icon>:\\n            <paper-tooltip position=\"right\" fit-to-visible-bounds=\"\">\\n              <div class=\"tip\">\\n                How the classes are sorted:\\n                <ul>\\n                  <li>\\n                    alphabetically\\n        ",
                    "rendered": {
                      "text": "   </paper-radio-button>\\n          <paper-radio-button name=\"[[sortBy_.FALSE_NEGATIVES]]\">\\n            [[getModeText_(sortBy_.FALSE_NEGATIVES)]]\\n          </paper-radio-button>\\n        </paper-radio-group>\\n      </div>\\n      <div>\\n        <label id=\"sort-label\">\\n          <span>\\n            Sort by<iron-icon class=\"info\" icon=\"info-outline\"></iron-icon>:\\n            <paper-tooltip position=\"right\" fit-to-visible-bounds=\"\">\\n              <div class=\"tip\">\\n                How the classes are sorted:\\n                <ul>\\n                  <li>\\n                    alphabetically\\n        ",
                      "markdown": "`   </paper-radio-button>\\n          <paper-radio-button name=\"[[sortBy_.FALSE_NEGATIVES]]\">\\n            [[getModeText_(sortBy_.FALSE_NEGATIVES)]]\\n          </paper-radio-button>\\n        </paper-radio-group>\\n      </div>\\n      <div>\\n        <label id=\"sort-label\">\\n          <span>\\n            Sort by<iron-icon class=\"info\" icon=\"info-outline\"></iron-icon>:\\n            <paper-tooltip position=\"right\" fit-to-visible-bounds=\"\">\\n              <div class=\"tip\">\\n                How the classes are sorted:\\n                <ul>\\n                  <li>\\n                    alphabetically\\n        `"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 2090,
                  "startColumn": 3495,
                  "endLine": 2090,
                  "endColumn": 3500,
                  "snippet": {
                    "text": "r: #FFC107;\\n  }\\n  .c13 {\\n    /** Orange */\\n    background-color: #FF9800;\\n  }\\n  .c14 {\\n    /** Deep Orange */\\n    background-color: #FF5722;\\n  }\\n  .c15 {\\n    /** Pink */\\n    background-color: #E91E63;\\n  }\\n\\n  :host(:not([expanded])) #root {\\n    min-height: 30px;\\n    transform-origin: top left;\\n  }\\n\\n  :host(:not([expanded])) .s1 {\\n    transform: scale3d(10, 10, 1);\\n  }\\n\\n  :host(:not([expanded])) .s2 {\\n    transform: scale3d(5, 5, 1);\\n  }\\n\\n  :host(:not([expanded])) .s3 {\\n    transform: scale3d(3.33, 3.33, 1);\\n  }\\n\\n  :host(:not([expanded])) .s4 {\\n    transform: scale3d(",
                    "rendered": {
                      "text": "r: #FFC107;\\n  }\\n  .c13 {\\n    /** Orange */\\n    background-color: #FF9800;\\n  }\\n  .c14 {\\n    /** Deep Orange */\\n    background-color: #FF5722;\\n  }\\n  .c15 {\\n    /** Pink */\\n    background-color: #E91E63;\\n  }\\n\\n  :host(:not([expanded])) #root {\\n    min-height: 30px;\\n    transform-origin: top left;\\n  }\\n\\n  :host(:not([expanded])) .s1 {\\n    transform: scale3d(10, 10, 1);\\n  }\\n\\n  :host(:not([expanded])) .s2 {\\n    transform: scale3d(5, 5, 1);\\n  }\\n\\n  :host(:not([expanded])) .s3 {\\n    transform: scale3d(3.33, 3.33, 1);\\n  }\\n\\n  :host(:not([expanded])) .s4 {\\n    transform: scale3d(",
                      "markdown": "`r: #FFC107;\\n  }\\n  .c13 {\\n    /** Orange */\\n    background-color: #FF9800;\\n  }\\n  .c14 {\\n    /** Deep Orange */\\n    background-color: #FF5722;\\n  }\\n  .c15 {\\n    /** Pink */\\n    background-color: #E91E63;\\n  }\\n\\n  :host(:not([expanded])) #root {\\n    min-height: 30px;\\n    transform-origin: top left;\\n  }\\n\\n  :host(:not([expanded])) .s1 {\\n    transform: scale3d(10, 10, 1);\\n  }\\n\\n  :host(:not([expanded])) .s2 {\\n    transform: scale3d(5, 5, 1);\\n  }\\n\\n  :host(:not([expanded])) .s3 {\\n    transform: scale3d(3.33, 3.33, 1);\\n  }\\n\\n  :host(:not([expanded])) .s4 {\\n    transform: scale3d(`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 2033,
                  "startColumn": 1492,
                  "endLine": 2033,
                  "endColumn": 1500,
                  "snippet": {
                    "text": "   </div>\\n      <div class=\"column\">\\n        [[item.falsePositives]]\\n      </div>\\n      <div class=\"column\">\\n        [[item.falseNegatives]]\\n      </div>\\n    </div>\\n  </template>\\n  <template is=\"dom-if\" if=\"[[expandable_]]\">\\n    <paper-tooltip>\\n      More data available. Click anywhere to expand / collapse.\\n    </paper-tooltip>\\n  </template>\\n</div>\\n\\n\\n');on=\nqn}pn=on;function rn(){return X.call(this)||this}D(rn,X);m=rn.prototype;\nm.computeTransformedData_=function(a,b){var c=this;if(a){var d=[];try{d=JSON.parse(a)}catch(e){}return d.matrices.map(function(e,f){return{showTitle:0==f,thre",
                    "rendered": {
                      "text": "   </div>\\n      <div class=\"column\">\\n        [[item.falsePositives]]\\n      </div>\\n      <div class=\"column\">\\n        [[item.falseNegatives]]\\n      </div>\\n    </div>\\n  </template>\\n  <template is=\"dom-if\" if=\"[[expandable_]]\">\\n    <paper-tooltip>\\n      More data available. Click anywhere to expand / collapse.\\n    </paper-tooltip>\\n  </template>\\n</div>\\n\\n\\n');on=\nqn}pn=on;function rn(){return X.call(this)||this}D(rn,X);m=rn.prototype;\nm.computeTransformedData_=function(a,b){var c=this;if(a){var d=[];try{d=JSON.parse(a)}catch(e){}return d.matrices.map(function(e,f){return{showTitle:0==f,thre",
                      "markdown": "`   </div>\\n      <div class=\"column\">\\n        [[item.falsePositives]]\\n      </div>\\n      <div class=\"column\">\\n        [[item.falseNegatives]]\\n      </div>\\n    </div>\\n  </template>\\n  <template is=\"dom-if\" if=\"[[expandable_]]\">\\n    <paper-tooltip>\\n      More data available. Click anywhere to expand / collapse.\\n    </paper-tooltip>\\n  </template>\\n</div>\\n\\n\\n');on=\nqn}pn=on;function rn(){return X.call(this)||this}D(rn,X);m=rn.prototype;\nm.computeTransformedData_=function(a,b){var c=this;if(a){var d=[];try{d=JSON.parse(a)}catch(e){}return d.matrices.map(function(e,f){return{showTitle:0==f,thre`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 2012,
                  "startColumn": 452,
                  "endLine": 2012,
                  "endColumn": 460,
                  "snippet": {
                    "text": " {\\n    text-align: right;\\n  }\\n</style>\\n<div id=\"root\" on-tap=\"toggleExpanded_\">\\n  <template is=\"dom-repeat\" items=\"[[values_]]\">\\n    <div>[[item]]</div>\\n  </template>\\n</div>\\n<template is=\"dom-if\" if=\"[[expandable_]]\">\\n  <paper-tooltip for=\"root\">\\n    More data available. Click anywhere to expand / collapse.\\n  </paper-tooltip>\\n</template>\\n\\n\\n');Um=\nWm}Vm=Um;function Xm(){return X.call(this)||this}D(Xm,X);Xm.prototype.dataChanged_=function(a){var b={};try{b=JSON.parse(a)}catch(h){}var c=[],d=(a=b.shape)&&a.length;if(d){b=b[(b.dataType+\"\").toLowerCase()+\"Values\"];var e=a.reduce(function(h,",
                    "rendered": {
                      "text": " {\\n    text-align: right;\\n  }\\n</style>\\n<div id=\"root\" on-tap=\"toggleExpanded_\">\\n  <template is=\"dom-repeat\" items=\"[[values_]]\">\\n    <div>[[item]]</div>\\n  </template>\\n</div>\\n<template is=\"dom-if\" if=\"[[expandable_]]\">\\n  <paper-tooltip for=\"root\">\\n    More data available. Click anywhere to expand / collapse.\\n  </paper-tooltip>\\n</template>\\n\\n\\n');Um=\nWm}Vm=Um;function Xm(){return X.call(this)||this}D(Xm,X);Xm.prototype.dataChanged_=function(a){var b={};try{b=JSON.parse(a)}catch(h){}var c=[],d=(a=b.shape)&&a.length;if(d){b=b[(b.dataType+\"\").toLowerCase()+\"Values\"];var e=a.reduce(function(h,",
                      "markdown": "` {\\n    text-align: right;\\n  }\\n</style>\\n<div id=\"root\" on-tap=\"toggleExpanded_\">\\n  <template is=\"dom-repeat\" items=\"[[values_]]\">\\n    <div>[[item]]</div>\\n  </template>\\n</div>\\n<template is=\"dom-if\" if=\"[[expandable_]]\">\\n  <paper-tooltip for=\"root\">\\n    More data available. Click anywhere to expand / collapse.\\n  </paper-tooltip>\\n</template>\\n\\n\\n');Um=\nWm}Vm=Um;function Xm(){return X.call(this)||this}D(Xm,X);Xm.prototype.dataChanged_=function(a){var b={};try{b=JSON.parse(a)}catch(h){}var c=[],d=(a=b.shape)&&a.length;if(d){b=b[(b.dataType+\"\").toLowerCase()+\"Values\"];var e=a.reduce(function(h,`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 1996,
                  "startColumn": 2945,
                  "endLine": 1996,
                  "endColumn": 2951,
                  "snippet": {
                    "text": " files, please wait for few seconds.</li>\\n          <li>TensorBoard can\\u2019t find your event files.</li>\\n          <li>Selected evaluation run doesn\\'t contain any fairness evaluation related data.</li>\\n        </ul>\\n\\n        <p>\\n          If you\\u2019re new to using TensorBoard, and want to find out how to\\n          add data and set up your event files, check out the Fairness Indicators\\n          for Tensorboard\\n          <a href=\"https://www.tensorflow.org/tensorboard/fairness_indicators\" target=\"_blank\">\\n            tutorial\\n          </a>\\n          and Fairness Indicators\\n        ",
                    "rendered": {
                      "text": " files, please wait for few seconds.</li>\\n          <li>TensorBoard can\\u2019t find your event files.</li>\\n          <li>Selected evaluation run doesn\\'t contain any fairness evaluation related data.</li>\\n        </ul>\\n\\n        <p>\\n          If you\\u2019re new to using TensorBoard, and want to find out how to\\n          add data and set up your event files, check out the Fairness Indicators\\n          for Tensorboard\\n          <a href=\"https://www.tensorflow.org/tensorboard/fairness_indicators\" target=\"_blank\">\\n            tutorial\\n          </a>\\n          and Fairness Indicators\\n        ",
                      "markdown": "` files, please wait for few seconds.</li>\\n          <li>TensorBoard can\\u2019t find your event files.</li>\\n          <li>Selected evaluation run doesn\\'t contain any fairness evaluation related data.</li>\\n        </ul>\\n\\n        <p>\\n          If you\\u2019re new to using TensorBoard, and want to find out how to\\n          add data and set up your event files, check out the Fairness Indicators\\n          for Tensorboard\\n          <a href=\"https://www.tensorflow.org/tensorboard/fairness_indicators\" target=\"_blank\">\\n            tutorial\\n          </a>\\n          and Fairness Indicators\\n        `"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 1996,
                  "startColumn": 2724,
                  "endLine": 1996,
                  "endColumn": 2730,
                  "snippet": {
                    "text": "aluation data was found.</h3>\\n        <p>Probable causes:</p>\\n        <ul>\\n          <li>You haven\\u2019t written any evaluation data to your event files.</li>\\n          <li>Tensorboard might be looking for your event files, please wait for few seconds.</li>\\n          <li>TensorBoard can\\u2019t find your event files.</li>\\n          <li>Selected evaluation run doesn\\'t contain any fairness evaluation related data.</li>\\n        </ul>\\n\\n        <p>\\n          If you\\u2019re new to using TensorBoard, and want to find out how to\\n          add data and set up your event files, check out the Fairn",
                    "rendered": {
                      "text": "aluation data was found.</h3>\\n        <p>Probable causes:</p>\\n        <ul>\\n          <li>You haven\\u2019t written any evaluation data to your event files.</li>\\n          <li>Tensorboard might be looking for your event files, please wait for few seconds.</li>\\n          <li>TensorBoard can\\u2019t find your event files.</li>\\n          <li>Selected evaluation run doesn\\'t contain any fairness evaluation related data.</li>\\n        </ul>\\n\\n        <p>\\n          If you\\u2019re new to using TensorBoard, and want to find out how to\\n          add data and set up your event files, check out the Fairn",
                      "markdown": "`aluation data was found.</h3>\\n        <p>Probable causes:</p>\\n        <ul>\\n          <li>You haven\\u2019t written any evaluation data to your event files.</li>\\n          <li>Tensorboard might be looking for your event files, please wait for few seconds.</li>\\n          <li>TensorBoard can\\u2019t find your event files.</li>\\n          <li>Selected evaluation run doesn\\'t contain any fairness evaluation related data.</li>\\n        </ul>\\n\\n        <p>\\n          If you\\u2019re new to using TensorBoard, and want to find out how to\\n          add data and set up your event files, check out the Fairn`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 1837,
                  "startColumn": 408,
                  "endLine": 1837,
                  "endColumn": 414,
                  "snippet": {
                    "text": "nAttached\"},na:{\"shift+tab:keydown\":\"_onShiftTabDown\"},hostAttributes:{tabindex:0},get ca(){this.$||(this.$={});this.$.input||(this._generateInputId(),this.$.input=this.$$(\"#\"+this._inputId));return this.$.input},get vc(){return this.ca},created:function(){this.ji=\"date datetime datetime-local month time week file\".split(\" \")},attached:function(){this._updateAriaLabelledBy();!X&&this.ca&&-1!==\nthis.ji.indexOf(this.ca.type)&&(this.alwaysFloatLabel=!0)},_appendStringWithSpace:function(a,b){a?a=a+\" \"+b:a=b;return a},_onAddonAttached:function(a){a=P(a).kd;if(a.id)this._ariaDescribedBy=this._appendString",
                    "rendered": {
                      "text": "nAttached\"},na:{\"shift+tab:keydown\":\"_onShiftTabDown\"},hostAttributes:{tabindex:0},get ca(){this.$||(this.$={});this.$.input||(this._generateInputId(),this.$.input=this.$$(\"#\"+this._inputId));return this.$.input},get vc(){return this.ca},created:function(){this.ji=\"date datetime datetime-local month time week file\".split(\" \")},attached:function(){this._updateAriaLabelledBy();!X&&this.ca&&-1!==\nthis.ji.indexOf(this.ca.type)&&(this.alwaysFloatLabel=!0)},_appendStringWithSpace:function(a,b){a?a=a+\" \"+b:a=b;return a},_onAddonAttached:function(a){a=P(a).kd;if(a.id)this._ariaDescribedBy=this._appendString",
                      "markdown": "`nAttached\"},na:{\"shift+tab:keydown\":\"_onShiftTabDown\"},hostAttributes:{tabindex:0},get ca(){this.$||(this.$={});this.$.input||(this._generateInputId(),this.$.input=this.$$(\"#\"+this._inputId));return this.$.input},get vc(){return this.ca},created:function(){this.ji=\"date datetime datetime-local month time week file\".split(\" \")},attached:function(){this._updateAriaLabelledBy();!X&&this.ca&&-1!==\nthis.ji.indexOf(this.ca.type)&&(this.alwaysFloatLabel=!0)},_appendStringWithSpace:function(a,b){a?a=a+\" \"+b:a=b;return a},_onAddonAttached:function(a){a=P(a).kd;if(a.id)this._ariaDescribedBy=this._appendString`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 1577,
                  "startColumn": 88,
                  "endLine": 1577,
                  "endColumn": 94,
                  "snippet": {
                    "text": "g=_cssFromModuleImports$$module$third_party$javascript$polymer$v2$polymer$lib$utils$style_gather(f),h=f.querySelector(\"template\");if(h){var k=\"\";h=ag(h,f.jb);for(var l=0;l<h.length;l++){var n=h[l];n.parentNode&&\nn.parentNode.removeChild(n);k+=n.textContent}g+=k}f.j=g||null}f||console.warn(\"Could not find style data in module named\",e);c+=f&&f.j||\"\"}a.textContent=c+a.textContent}this.ownerDocument!==window.document&&window.document.head.appendChild(this);return this._style};ki.prototype.getStyle=ki.prototype.fm;window.customElements.define(\"custom-style\",ki);function li(a,b,c,d,e){var f;e&&(f=\"object",
                    "rendered": {
                      "text": "g=_cssFromModuleImports$$module$third_party$javascript$polymer$v2$polymer$lib$utils$style_gather(f),h=f.querySelector(\"template\");if(h){var k=\"\";h=ag(h,f.jb);for(var l=0;l<h.length;l++){var n=h[l];n.parentNode&&\nn.parentNode.removeChild(n);k+=n.textContent}g+=k}f.j=g||null}f||console.warn(\"Could not find style data in module named\",e);c+=f&&f.j||\"\"}a.textContent=c+a.textContent}this.ownerDocument!==window.document&&window.document.head.appendChild(this);return this._style};ki.prototype.getStyle=ki.prototype.fm;window.customElements.define(\"custom-style\",ki);function li(a,b,c,d,e){var f;e&&(f=\"object",
                      "markdown": "`g=_cssFromModuleImports$$module$third_party$javascript$polymer$v2$polymer$lib$utils$style_gather(f),h=f.querySelector(\"template\");if(h){var k=\"\";h=ag(h,f.jb);for(var l=0;l<h.length;l++){var n=h[l];n.parentNode&&\nn.parentNode.removeChild(n);k+=n.textContent}g+=k}f.j=g||null}f||console.warn(\"Could not find style data in module named\",e);c+=f&&f.j||\"\"}a.textContent=c+a.textContent}this.ownerDocument!==window.document&&window.document.head.appendChild(this);return this._style};ki.prototype.getStyle=ki.prototype.fm;window.customElements.define(\"custom-style\",ki);function li(a,b,c,d,e){var f;e&&(f=\"object`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 1473,
                  "startColumn": 375,
                  "endLine": 1473,
                  "endColumn": 381,
                  "snippet": {
                    "text": " d=b.push,e=d.apply,f;var g=a[c];if(f=Q.import(g)){if(void 0===f.g){g=[];g.push.apply(g,A(_stylesFromModuleImports$$module$third_party$javascript$polymer$v2$polymer$lib$utils$style_gather(f)));var h=f.querySelector(\"template\");h&&g.push.apply(g,A(ag(h,f.jb)));f.g=g}f=f.g}else console.warn(\"Could not find style data in module named\",g),f=[];e.call(d,b,A(f))}return b}\nfunction ag(a,b){if(!a.g){for(var c=[],d=a.content.querySelectorAll(\"style\"),e=0;e<d.length;e++){var f=d[e],g=f.getAttribute(\"include\");g&&c.push.apply(c,A($f(g).filter(function(h,k,l){return l.indexOf(h)===k})));b&&(f.textContent=de(f.t",
                    "rendered": {
                      "text": " d=b.push,e=d.apply,f;var g=a[c];if(f=Q.import(g)){if(void 0===f.g){g=[];g.push.apply(g,A(_stylesFromModuleImports$$module$third_party$javascript$polymer$v2$polymer$lib$utils$style_gather(f)));var h=f.querySelector(\"template\");h&&g.push.apply(g,A(ag(h,f.jb)));f.g=g}f=f.g}else console.warn(\"Could not find style data in module named\",g),f=[];e.call(d,b,A(f))}return b}\nfunction ag(a,b){if(!a.g){for(var c=[],d=a.content.querySelectorAll(\"style\"),e=0;e<d.length;e++){var f=d[e],g=f.getAttribute(\"include\");g&&c.push.apply(c,A($f(g).filter(function(h,k,l){return l.indexOf(h)===k})));b&&(f.textContent=de(f.t",
                      "markdown": "` d=b.push,e=d.apply,f;var g=a[c];if(f=Q.import(g)){if(void 0===f.g){g=[];g.push.apply(g,A(_stylesFromModuleImports$$module$third_party$javascript$polymer$v2$polymer$lib$utils$style_gather(f)));var h=f.querySelector(\"template\");h&&g.push.apply(g,A(ag(h,f.jb)));f.g=g}f=f.g}else console.warn(\"Could not find style data in module named\",g),f=[];e.call(d,b,A(f))}return b}\nfunction ag(a,b){if(!a.g){for(var c=[],d=a.content.querySelectorAll(\"style\"),e=0;e<d.length;e++){var f=d[e],g=f.getAttribute(\"include\");g&&c.push.apply(c,A($f(g).filter(function(h,k,l){return l.indexOf(h)===k})));b&&(f.textContent=de(f.t`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 1291,
                  "startColumn": 7,
                  "endLine": 1291,
                  "endColumn": 13,
                  "snippet": {
                    "text": "se 1:n=Ub(q,n);p=1===n||6===n;break;case 3:case 2:p=!0;break;default:Ja(r,\"got an unknown element classification\")}}if(p)return function(w){return\"\"+d(w,\"STRING\",w)}}return function(w){if(!w&&w!==document.all)return w;c&&c(!0,\"Failed to sanitize \"+(l.parentElement&&l.parentElement.nodeName)+\n\" #text node to value \"+w,l.parentElement);return ec}}var t=l.localName;q=b(l);var v=null;switch(p){case \"attribute\":if(Jb(n)in q)break;return function(w){return w};case \"property\":if(n in q){v=Rb(q,n);break}if((r=Kb(n))&&r in q)break;return function(w){return w};default:Ja(p,\"got an unknown resin type, expected",
                    "rendered": {
                      "text": "se 1:n=Ub(q,n);p=1===n||6===n;break;case 3:case 2:p=!0;break;default:Ja(r,\"got an unknown element classification\")}}if(p)return function(w){return\"\"+d(w,\"STRING\",w)}}return function(w){if(!w&&w!==document.all)return w;c&&c(!0,\"Failed to sanitize \"+(l.parentElement&&l.parentElement.nodeName)+\n\" #text node to value \"+w,l.parentElement);return ec}}var t=l.localName;q=b(l);var v=null;switch(p){case \"attribute\":if(Jb(n)in q)break;return function(w){return w};case \"property\":if(n in q){v=Rb(q,n);break}if((r=Kb(n))&&r in q)break;return function(w){return w};default:Ja(p,\"got an unknown resin type, expected",
                      "markdown": "`se 1:n=Ub(q,n);p=1===n||6===n;break;case 3:case 2:p=!0;break;default:Ja(r,\"got an unknown element classification\")}}if(p)return function(w){return\"\"+d(w,\"STRING\",w)}}return function(w){if(!w&&w!==document.all)return w;c&&c(!0,\"Failed to sanitize \"+(l.parentElement&&l.parentElement.nodeName)+\n\" #text node to value \"+w,l.parentElement);return ec}}var t=l.localName;q=b(l);var v=null;switch(p){case \"attribute\":if(Jb(n)in q)break;return function(w){return w};case \"property\":if(n in q){v=Rb(q,n);break}if((r=Kb(n))&&r in q)break;return function(w){return w};default:Ja(p,\"got an unknown resin type, expected`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 1170,
                  "startColumn": 239,
                  "endLine": 1170,
                  "endColumn": 245,
                  "snippet": {
                    "text": "totype||a==Object.prototype)return a;a[b]=c.value;return a};\nfunction ca(a){a=[\"object\"==typeof globalThis&&globalThis,a,\"object\"==typeof window&&window,\"object\"==typeof self&&self,\"object\"==typeof global&&global];for(var b=0;b<a.length;++b){var c=a[b];if(c&&c.Math==Math)return c}throw Error(\"Cannot find global object\");}var u=ca(this);function x(a,b){if(b)a:{var c=u;a=a.split(\".\");for(var d=0;d<a.length-1;d++){var e=a[d];if(!(e in c))break a;c=c[e]}a=a[a.length-1];d=c[a];b=b(d);b!=d&&null!=b&&ba(c,a,{configurable:!0,writable:!0,value:b})}}\nx(\"Symbol\",function(a){function b(f){if(this instanceof b)t",
                    "rendered": {
                      "text": "totype||a==Object.prototype)return a;a[b]=c.value;return a};\nfunction ca(a){a=[\"object\"==typeof globalThis&&globalThis,a,\"object\"==typeof window&&window,\"object\"==typeof self&&self,\"object\"==typeof global&&global];for(var b=0;b<a.length;++b){var c=a[b];if(c&&c.Math==Math)return c}throw Error(\"Cannot find global object\");}var u=ca(this);function x(a,b){if(b)a:{var c=u;a=a.split(\".\");for(var d=0;d<a.length-1;d++){var e=a[d];if(!(e in c))break a;c=c[e]}a=a[a.length-1];d=c[a];b=b(d);b!=d&&null!=b&&ba(c,a,{configurable:!0,writable:!0,value:b})}}\nx(\"Symbol\",function(a){function b(f){if(this instanceof b)t",
                      "markdown": "`totype||a==Object.prototype)return a;a[b]=c.value;return a};\nfunction ca(a){a=[\"object\"==typeof globalThis&&globalThis,a,\"object\"==typeof window&&window,\"object\"==typeof self&&self,\"object\"==typeof global&&global];for(var b=0;b<a.length;++b){var c=a[b];if(c&&c.Math==Math)return c}throw Error(\"Cannot find global object\");}var u=ca(this);function x(a,b){if(b)a:{var c=u;a=a.split(\".\");for(var d=0;d<a.length-1;d++){var e=a[d];if(!(e in c))break a;c=c[e]}a=a[a.length-1];d=c[a];b=b(d);b!=d&&null!=b&&ba(c,a,{configurable:!0,writable:!0,value:b})}}\nx(\"Symbol\",function(a){function b(f){if(this instanceof b)t`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 1126,
                  "startColumn": 402,
                  "endLine": 1126,
                  "endColumn": 408,
                  "snippet": {
                    "text": "rototype||a==Object.prototype)return a;a[b]=c.value;return a};function h(a){a=[\"object\"==typeof globalThis&&globalThis,a,\"object\"==typeof window&&window,\"object\"==typeof self&&self,\"object\"==typeof global&&global];for(var b=0;b<a.length;++b){var c=a[b];if(c&&c.Math==Math)return c}throw Error(\"Cannot find global object\");}var r=h(this);\nfunction t(a,b){if(b)a:{var c=r;a=a.split(\".\");for(var d=0;d<a.length-1;d++){var f=a[d];if(!(f in c))break a;c=c[f]}a=a[a.length-1];d=c[a];b=b(d);b!=d&&null!=b&&g(c,a,{configurable:!0,writable:!0,value:b})}}function u(a){var b=0;return function(){return b<a.length?{do",
                    "rendered": {
                      "text": "rototype||a==Object.prototype)return a;a[b]=c.value;return a};function h(a){a=[\"object\"==typeof globalThis&&globalThis,a,\"object\"==typeof window&&window,\"object\"==typeof self&&self,\"object\"==typeof global&&global];for(var b=0;b<a.length;++b){var c=a[b];if(c&&c.Math==Math)return c}throw Error(\"Cannot find global object\");}var r=h(this);\nfunction t(a,b){if(b)a:{var c=r;a=a.split(\".\");for(var d=0;d<a.length-1;d++){var f=a[d];if(!(f in c))break a;c=c[f]}a=a[a.length-1];d=c[a];b=b(d);b!=d&&null!=b&&g(c,a,{configurable:!0,writable:!0,value:b})}}function u(a){var b=0;return function(){return b<a.length?{do",
                      "markdown": "`rototype||a==Object.prototype)return a;a[b]=c.value;return a};function h(a){a=[\"object\"==typeof globalThis&&globalThis,a,\"object\"==typeof window&&window,\"object\"==typeof self&&self,\"object\"==typeof global&&global];for(var b=0;b<a.length;++b){var c=a[b];if(c&&c.Math==Math)return c}throw Error(\"Cannot find global object\");}var r=h(this);\nfunction t(a,b){if(b)a:{var c=r;a=a.split(\".\");for(var d=0;d<a.length-1;d++){var f=a[d];if(!(f in c))break a;c=c[f]}a=a[a.length-1];d=c[a];b=b(d);b!=d&&null!=b&&g(c,a,{configurable:!0,writable:!0,value:b})}}function u(a){var b=0;return function(){return b<a.length?{do`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 1076,
                  "startColumn": 665,
                  "endLine": 1076,
                  "endColumn": 670,
                  "snippet": {
                    "text": "order-bottom-right-radius border-top-left-radius border-top-right-radius bottom left letter-spacing margin-bottom margin-left margin-right margin-top min-height min-width outline-offset padding-bottom padding-left padding-right padding-top perspective right shape-margin stroke-dashoffset text-indent top vertical-align word-spacing\".split(\" \"))})(F,\nnull);(function(k,f){function h(a){return k.consumeLengthOrPercent(a)||k.consumeToken(/^auto/,a)}function d(a){if((a=k.consumeList([k.ignore(k.consumeToken.bind(null,/^rect/)),k.ignore(k.consumeToken.bind(null,/^\\(/)),k.consumeRepeated.bind(null,h,/^,/),",
                    "rendered": {
                      "text": "order-bottom-right-radius border-top-left-radius border-top-right-radius bottom left letter-spacing margin-bottom margin-left margin-right margin-top min-height min-width outline-offset padding-bottom padding-left padding-right padding-top perspective right shape-margin stroke-dashoffset text-indent top vertical-align word-spacing\".split(\" \"))})(F,\nnull);(function(k,f){function h(a){return k.consumeLengthOrPercent(a)||k.consumeToken(/^auto/,a)}function d(a){if((a=k.consumeList([k.ignore(k.consumeToken.bind(null,/^rect/)),k.ignore(k.consumeToken.bind(null,/^\\(/)),k.consumeRepeated.bind(null,h,/^,/),",
                      "markdown": "`order-bottom-right-radius border-top-left-radius border-top-right-radius bottom left letter-spacing margin-bottom margin-left margin-right margin-top min-height min-width outline-offset padding-bottom padding-left padding-right padding-top perspective right shape-margin stroke-dashoffset text-indent top vertical-align word-spacing\".split(\" \"))})(F,\nnull);(function(k,f){function h(a){return k.consumeLengthOrPercent(a)||k.consumeToken(/^auto/,a)}function d(a){if((a=k.consumeList([k.ignore(k.consumeToken.bind(null,/^rect/)),k.ignore(k.consumeToken.bind(null,/^\\(/)),k.consumeRepeated.bind(null,h,/^,/),`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 1040,
                  "startColumn": 211,
                  "endLine": 1040,
                  "endColumn": 217,
                  "snippet": {
                    "text": "],q=h.style[u],t[u]=u in d?d[u][q]||q:q;else t[u]=u in d?d[u][q]||q:q}void 0==l.offset&&\n(l.offset=null);void 0==l.easing&&(l.easing=\"linear\");return l});a=!0;for(var g=-Infinity,e=0;e<b.length;e++){var m=b[e].offset;if(null!=m){if(m<g)throw new TypeError(\"Keyframes are not loosely sorted by offset. Sort or specify offsets.\");g=m}else a=!1}b=b.filter(function(n){return 0<=n.offset&&1>=n.offset});a||c();return b}})(G,null);(function(y){var v={};y.isDeprecated=function(k,f,h,d){d=d?\"are\":\"is\";var a=new Date;f=new Date(f);f.setMonth(f.getMonth()+3);return a<f?(k in v||console.warn(\"Web Animations: \"+\nk",
                    "rendered": {
                      "text": "],q=h.style[u],t[u]=u in d?d[u][q]||q:q;else t[u]=u in d?d[u][q]||q:q}void 0==l.offset&&\n(l.offset=null);void 0==l.easing&&(l.easing=\"linear\");return l});a=!0;for(var g=-Infinity,e=0;e<b.length;e++){var m=b[e].offset;if(null!=m){if(m<g)throw new TypeError(\"Keyframes are not loosely sorted by offset. Sort or specify offsets.\");g=m}else a=!1}b=b.filter(function(n){return 0<=n.offset&&1>=n.offset});a||c();return b}})(G,null);(function(y){var v={};y.isDeprecated=function(k,f,h,d){d=d?\"are\":\"is\";var a=new Date;f=new Date(f);f.setMonth(f.getMonth()+3);return a<f?(k in v||console.warn(\"Web Animations: \"+\nk",
                      "markdown": "`],q=h.style[u],t[u]=u in d?d[u][q]||q:q;else t[u]=u in d?d[u][q]||q:q}void 0==l.offset&&\n(l.offset=null);void 0==l.easing&&(l.easing=\"linear\");return l});a=!0;for(var g=-Infinity,e=0;e<b.length;e++){var m=b[e].offset;if(null!=m){if(m<g)throw new TypeError(\"Keyframes are not loosely sorted by offset. Sort or specify offsets.\");g=m}else a=!1}b=b.filter(function(n){return 0<=n.offset&&1>=n.offset});a||c();return b}})(G,null);(function(y){var v={};y.isDeprecated=function(k,f,h,d){d=d?\"are\":\"is\";var a=new Date;f=new Date(f);f.setMonth(f.getMonth()+3);return a<f?(k in v||console.warn(\"Web Animations: \"+\nk`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 979,
                  "startColumn": 453,
                  "endLine": 979,
                  "endColumn": 459,
                  "snippet": {
                    "text": "ect.prototype)return b;b[d]=c.value;return b};$jscomp.getGlobal=function(b){b=[\"object\"==typeof globalThis&&globalThis,b,\"object\"==typeof window&&window,\"object\"==typeof self&&self,\"object\"==typeof global&&global];for(var d=0;d<b.length;++d){var c=b[d];if(c&&c.Math==Math)return c}throw Error(\"Cannot find global object\");};$jscomp.global=$jscomp.getGlobal(this);\n$jscomp.IS_SYMBOL_NATIVE=\"function\"===typeof Symbol&&\"symbol\"===typeof Symbol(\"x\");$jscomp.TRUST_ES6_POLYFILLS=!$jscomp.ISOLATE_POLYFILLS||$jscomp.IS_SYMBOL_NATIVE;$jscomp.polyfills={};$jscomp.propertyToPolyfillSymbol={};$jscomp.POLYFILL_PREF",
                    "rendered": {
                      "text": "ect.prototype)return b;b[d]=c.value;return b};$jscomp.getGlobal=function(b){b=[\"object\"==typeof globalThis&&globalThis,b,\"object\"==typeof window&&window,\"object\"==typeof self&&self,\"object\"==typeof global&&global];for(var d=0;d<b.length;++d){var c=b[d];if(c&&c.Math==Math)return c}throw Error(\"Cannot find global object\");};$jscomp.global=$jscomp.getGlobal(this);\n$jscomp.IS_SYMBOL_NATIVE=\"function\"===typeof Symbol&&\"symbol\"===typeof Symbol(\"x\");$jscomp.TRUST_ES6_POLYFILLS=!$jscomp.ISOLATE_POLYFILLS||$jscomp.IS_SYMBOL_NATIVE;$jscomp.polyfills={};$jscomp.propertyToPolyfillSymbol={};$jscomp.POLYFILL_PREF",
                      "markdown": "`ect.prototype)return b;b[d]=c.value;return b};$jscomp.getGlobal=function(b){b=[\"object\"==typeof globalThis&&globalThis,b,\"object\"==typeof window&&window,\"object\"==typeof self&&self,\"object\"==typeof global&&global];for(var d=0;d<b.length;++d){var c=b[d];if(c&&c.Math==Math)return c}throw Error(\"Cannot find global object\");};$jscomp.global=$jscomp.getGlobal(this);\n$jscomp.IS_SYMBOL_NATIVE=\"function\"===typeof Symbol&&\"symbol\"===typeof Symbol(\"x\");$jscomp.TRUST_ES6_POLYFILLS=!$jscomp.ISOLATE_POLYFILLS||$jscomp.IS_SYMBOL_NATIVE;$jscomp.polyfills={};$jscomp.propertyToPolyfillSymbol={};$jscomp.POLYFILL_PREF`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 234,
                  "startColumn": 301,
                  "endLine": 234,
                  "endColumn": 307,
                  "snippet": {
                    "text": "his.ownerDocument&&this.ownerDocument.adoptNode(a);return a},appendChild:function(a){if(this!=a||!K(a))return this.__shady_insertBefore(a)},removeChild:function(a,b){b=void 0===b?!1:b;if(this.ownerDocument!==ee)return this.__shady_native_removeChild(a);if(a.__shady_parentNode!==this)throw Error(\"The node to be removed is not a child of this node: \"+a);le(this,null,a);var c=me(a),d=c&&c.ic(a),e=I(this);if(nc(this)&&(oe(a,this),oc(this))){e.root.u();var f=!0}if(Yd()&&!b&&c&&a.nodeType!==Node.TEXT_NODE){var g=\nce(a);de(a,function(h){ae(h,g)})}je(a);c&&((b=\"slot\"===this.localName)&&(f=!0),(d||b)&&c.u())",
                    "rendered": {
                      "text": "his.ownerDocument&&this.ownerDocument.adoptNode(a);return a},appendChild:function(a){if(this!=a||!K(a))return this.__shady_insertBefore(a)},removeChild:function(a,b){b=void 0===b?!1:b;if(this.ownerDocument!==ee)return this.__shady_native_removeChild(a);if(a.__shady_parentNode!==this)throw Error(\"The node to be removed is not a child of this node: \"+a);le(this,null,a);var c=me(a),d=c&&c.ic(a),e=I(this);if(nc(this)&&(oe(a,this),oc(this))){e.root.u();var f=!0}if(Yd()&&!b&&c&&a.nodeType!==Node.TEXT_NODE){var g=\nce(a);de(a,function(h){ae(h,g)})}je(a);c&&((b=\"slot\"===this.localName)&&(f=!0),(d||b)&&c.u())",
                      "markdown": "`his.ownerDocument&&this.ownerDocument.adoptNode(a);return a},appendChild:function(a){if(this!=a||!K(a))return this.__shady_insertBefore(a)},removeChild:function(a,b){b=void 0===b?!1:b;if(this.ownerDocument!==ee)return this.__shady_native_removeChild(a);if(a.__shady_parentNode!==this)throw Error(\"The node to be removed is not a child of this node: \"+a);le(this,null,a);var c=me(a),d=c&&c.ic(a),e=I(this);if(nc(this)&&(oe(a,this),oc(this))){e.root.u();var f=!0}if(Yd()&&!b&&c&&a.nodeType!==Node.TEXT_NODE){var g=\nce(a);de(a,function(h){ae(h,g)})}je(a);c&&((b=\"slot\"===this.localName)&&(f=!0),(d||b)&&c.u())`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 232,
                  "startColumn": 193,
                  "endLine": 232,
                  "endColumn": 199,
                  "snippet": {
                    "text": "this)throw Error(\"Failed to execute 'appendChild' on 'Node': The new child element contains the parent.\");\nif(b){var c=I(b);c=c&&c.parentNode;if(void 0!==c&&c!==this||void 0===c&&b.__shady_native_parentNode!==this)throw Error(\"Failed to execute 'insertBefore' on 'Node': The node before which the new node is to be inserted is not a child of this node.\");}if(b===a)return a;le(this,a);var d=[],e=(c=me(this))?c.host.localName:ce(this),f=a.__shady_parentNode;if(f){var g=ce(a);var h=!!c||!me(a)||fe&&void 0!==this.__noInsertionPoint;f.__shady_removeChild(a,h)}f=!0;var k=(!fe||void 0===a.__noInsertionPoint&",
                    "rendered": {
                      "text": "this)throw Error(\"Failed to execute 'appendChild' on 'Node': The new child element contains the parent.\");\nif(b){var c=I(b);c=c&&c.parentNode;if(void 0!==c&&c!==this||void 0===c&&b.__shady_native_parentNode!==this)throw Error(\"Failed to execute 'insertBefore' on 'Node': The node before which the new node is to be inserted is not a child of this node.\");}if(b===a)return a;le(this,a);var d=[],e=(c=me(this))?c.host.localName:ce(this),f=a.__shady_parentNode;if(f){var g=ce(a);var h=!!c||!me(a)||fe&&void 0!==this.__noInsertionPoint;f.__shady_removeChild(a,h)}f=!0;var k=(!fe||void 0===a.__noInsertionPoint&",
                      "markdown": "`this)throw Error(\"Failed to execute 'appendChild' on 'Node': The new child element contains the parent.\");\nif(b){var c=I(b);c=c&&c.parentNode;if(void 0!==c&&c!==this||void 0===c&&b.__shady_native_parentNode!==this)throw Error(\"Failed to execute 'insertBefore' on 'Node': The node before which the new node is to be inserted is not a child of this node.\");}if(b===a)return a;le(this,a);var d=[],e=(c=me(this))?c.host.localName:ce(this),f=a.__shady_parentNode;if(f){var g=ce(a);var h=!!c||!me(a)||fe&&void 0!==this.__noInsertionPoint;f.__shady_removeChild(a,h)}f=!0;var k=(!fe||void 0===a.__noInsertionPoint&`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 232,
                  "startColumn": 167,
                  "endLine": 232,
                  "endColumn": 173,
                  "snippet": {
                    "text": "nsertBefore(a,b),a;if(a===this)throw Error(\"Failed to execute 'appendChild' on 'Node': The new child element contains the parent.\");\nif(b){var c=I(b);c=c&&c.parentNode;if(void 0!==c&&c!==this||void 0===c&&b.__shady_native_parentNode!==this)throw Error(\"Failed to execute 'insertBefore' on 'Node': The node before which the new node is to be inserted is not a child of this node.\");}if(b===a)return a;le(this,a);var d=[],e=(c=me(this))?c.host.localName:ce(this),f=a.__shady_parentNode;if(f){var g=ce(a);var h=!!c||!me(a)||fe&&void 0!==this.__noInsertionPoint;f.__shady_removeChild(a,h)}f=!0;var k=(!fe||void",
                    "rendered": {
                      "text": "nsertBefore(a,b),a;if(a===this)throw Error(\"Failed to execute 'appendChild' on 'Node': The new child element contains the parent.\");\nif(b){var c=I(b);c=c&&c.parentNode;if(void 0!==c&&c!==this||void 0===c&&b.__shady_native_parentNode!==this)throw Error(\"Failed to execute 'insertBefore' on 'Node': The node before which the new node is to be inserted is not a child of this node.\");}if(b===a)return a;le(this,a);var d=[],e=(c=me(this))?c.host.localName:ce(this),f=a.__shady_parentNode;if(f){var g=ce(a);var h=!!c||!me(a)||fe&&void 0!==this.__noInsertionPoint;f.__shady_removeChild(a,h)}f=!0;var k=(!fe||void",
                      "markdown": "`nsertBefore(a,b),a;if(a===this)throw Error(\"Failed to execute 'appendChild' on 'Node': The new child element contains the parent.\");\nif(b){var c=I(b);c=c&&c.parentNode;if(void 0!==c&&c!==this||void 0===c&&b.__shady_native_parentNode!==this)throw Error(\"Failed to execute 'insertBefore' on 'Node': The node before which the new node is to be inserted is not a child of this node.\");}if(b===a)return a;le(this,a);var d=[],e=(c=me(this))?c.host.localName:ce(this),f=a.__shady_parentNode;if(f){var g=ce(a);var h=!!c||!me(a)||fe&&void 0!==this.__noInsertionPoint;f.__shady_removeChild(a,h)}f=!0;var k=(!fe||void`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 193,
                  "startColumn": 723,
                  "endLine": 193,
                  "endColumn": 731,
                  "snippet": {
                    "text": ":return\"&amp;\";case \"<\":return\"&lt;\";case \">\":return\"&gt;\";case '\"':return\"&quot;\";case \"\\u00a0\":return\"&nbsp;\"}}function Tc(a){for(var b={},c=0;c<a.length;c++)b[a[c]]=!0;return b}var Uc=Tc(\"area base br col command embed hr img input keygen link meta param source track wbr\".split(\" \")),Vc=Tc(\"style script xmp iframe noembed noframes plaintext noscript\".split(\" \"));\nfunction Wc(a,b){\"template\"===a.localName&&(a=a.content);for(var c=\"\",d=b?b(a):a.childNodes,e=0,f=d.length,g=void 0;e<f&&(g=d[e]);e++){a:{var h=g;var k=a,l=b;switch(h.nodeType){case Node.ELEMENT_NODE:k=h.localName;for(var p=\"<\"+k,x=h.attri",
                    "rendered": {
                      "text": ":return\"&amp;\";case \"<\":return\"&lt;\";case \">\":return\"&gt;\";case '\"':return\"&quot;\";case \"\\u00a0\":return\"&nbsp;\"}}function Tc(a){for(var b={},c=0;c<a.length;c++)b[a[c]]=!0;return b}var Uc=Tc(\"area base br col command embed hr img input keygen link meta param source track wbr\".split(\" \")),Vc=Tc(\"style script xmp iframe noembed noframes plaintext noscript\".split(\" \"));\nfunction Wc(a,b){\"template\"===a.localName&&(a=a.content);for(var c=\"\",d=b?b(a):a.childNodes,e=0,f=d.length,g=void 0;e<f&&(g=d[e]);e++){a:{var h=g;var k=a,l=b;switch(h.nodeType){case Node.ELEMENT_NODE:k=h.localName;for(var p=\"<\"+k,x=h.attri",
                      "markdown": "`:return\"&amp;\";case \"<\":return\"&lt;\";case \">\":return\"&gt;\";case '\"':return\"&quot;\";case \"\\u00a0\":return\"&nbsp;\"}}function Tc(a){for(var b={},c=0;c<a.length;c++)b[a[c]]=!0;return b}var Uc=Tc(\"area base br col command embed hr img input keygen link meta param source track wbr\".split(\" \")),Vc=Tc(\"style script xmp iframe noembed noframes plaintext noscript\".split(\" \"));\nfunction Wc(a,b){\"template\"===a.localName&&(a=a.content);for(var c=\"\",d=b?b(a):a.childNodes,e=0,f=d.length,g=void 0;e<f&&(g=d[e]);e++){a:{var h=g;var k=a,l=b;switch(h.nodeType){case Node.ELEMENT_NODE:k=h.localName;for(var p=\"<\"+k,x=h.attri`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 156,
                  "startColumn": 186,
                  "endLine": 156,
                  "endColumn": 194,
                  "snippet": {
                    "text": "return\"&amp;\";case \"<\":return\"&lt;\";case \">\":return\"&gt;\";case '\"':return\"&quot;\";case \"\\u00a0\":return\"&nbsp;\"}};\nna=function(t){for(var u={},D=0;D<t.length;D++)u[t[D]]=!0;return u};var C=na(\"area base br col command embed hr img input keygen link meta param source track wbr\".split(\" \")),y=na(\"style script xmp iframe noembed noframes plaintext noscript\".split(\" \")),E=function(t,u){\"template\"===t.localName&&(t=t.content);for(var D=\"\",G=u?u(t):da.get.call(t),X=0,ha=G.length,ma;X<ha&&(ma=G[X]);X++){a:{var z=ma;var N=t;var hb=u;switch(z.nodeType){case Node.ELEMENT_NODE:for(var $b=z.localName,ib=\"<\"+$b,Wg=",
                    "rendered": {
                      "text": "return\"&amp;\";case \"<\":return\"&lt;\";case \">\":return\"&gt;\";case '\"':return\"&quot;\";case \"\\u00a0\":return\"&nbsp;\"}};\nna=function(t){for(var u={},D=0;D<t.length;D++)u[t[D]]=!0;return u};var C=na(\"area base br col command embed hr img input keygen link meta param source track wbr\".split(\" \")),y=na(\"style script xmp iframe noembed noframes plaintext noscript\".split(\" \")),E=function(t,u){\"template\"===t.localName&&(t=t.content);for(var D=\"\",G=u?u(t):da.get.call(t),X=0,ha=G.length,ma;X<ha&&(ma=G[X]);X++){a:{var z=ma;var N=t;var hb=u;switch(z.nodeType){case Node.ELEMENT_NODE:for(var $b=z.localName,ib=\"<\"+$b,Wg=",
                      "markdown": "`return\"&amp;\";case \"<\":return\"&lt;\";case \">\":return\"&gt;\";case '\"':return\"&quot;\";case \"\\u00a0\":return\"&nbsp;\"}};\nna=function(t){for(var u={},D=0;D<t.length;D++)u[t[D]]=!0;return u};var C=na(\"area base br col command embed hr img input keygen link meta param source track wbr\".split(\" \")),y=na(\"style script xmp iframe noembed noframes plaintext noscript\".split(\" \")),E=function(t,u){\"template\"===t.localName&&(t=t.content);for(var D=\"\",G=u?u(t):da.get.call(t),X=0,ha=G.length,ma;X<ha&&(ma=G[X]);X++){a:{var z=ma;var N=t;var hb=u;switch(z.nodeType){case Node.ELEMENT_NODE:for(var $b=z.localName,ib=\"<\"+$b,Wg=`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 109,
                  "startColumn": 60,
                  "endLine": 109,
                  "endColumn": 64,
                  "snippet": {
                    "text": "\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nvar Wa=Element.prototype,Xa,Ya,Za,$a=null!=(Za=null==(Ya=null!=(Xa=Object.getOwnPropertyDescriptor(Wa,\"attributes\"))?Xa:Object.getOwnPropertyDescriptor(Node.prototype,\"attributes\"))?void 0:Ya.get)?Za:function(){return this.attributes},ab=",
                    "rendered": {
                      "text": "\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nvar Wa=Element.prototype,Xa,Ya,Za,$a=null!=(Za=null==(Ya=null!=(Xa=Object.getOwnPropertyDescriptor(Wa,\"attributes\"))?Xa:Object.getOwnPropertyDescriptor(Node.prototype,\"attributes\"))?void 0:Ya.get)?Za:function(){return this.attributes},ab=",
                      "markdown": "`\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nvar Wa=Element.prototype,Xa,Ya,Za,$a=null!=(Za=null==(Ya=null!=(Xa=Object.getOwnPropertyDescriptor(Wa,\"attributes\"))?Xa:Object.getOwnPropertyDescriptor(Node.prototype,\"attributes\"))?void 0:Ya.get)?Za:function(){return this.attributes},ab=`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 338,
                  "endLine": 46,
                  "endColumn": 344,
                  "snippet": {
                    "text": "nction(){return b<a.length?{done:!1,value:a[b++]}:{done:!0}}}function ba(a){a=[\"object\"==typeof globalThis&&globalThis,a,\"object\"==typeof window&&window,\"object\"==typeof self&&self,\"object\"==typeof global&&global];for(var b=0;b<a.length;++b){var c=a[b];if(c&&c.Math==Math)return c}throw Error(\"Cannot find global object\");}var ca=ba(this);function ea(a){var b=\"undefined\"!=typeof Symbol&&Symbol.iterator&&a[Symbol.iterator];return b?b.call(a):{next:aa(a)}}\nfunction w(a){if(!(a instanceof Array)){a=ea(a);for(var b,c=[];!(b=a.next()).done;)c.push(b.value);a=c}return a}function A(){for(var a=Number(this),b",
                    "rendered": {
                      "text": "nction(){return b<a.length?{done:!1,value:a[b++]}:{done:!0}}}function ba(a){a=[\"object\"==typeof globalThis&&globalThis,a,\"object\"==typeof window&&window,\"object\"==typeof self&&self,\"object\"==typeof global&&global];for(var b=0;b<a.length;++b){var c=a[b];if(c&&c.Math==Math)return c}throw Error(\"Cannot find global object\");}var ca=ba(this);function ea(a){var b=\"undefined\"!=typeof Symbol&&Symbol.iterator&&a[Symbol.iterator];return b?b.call(a):{next:aa(a)}}\nfunction w(a){if(!(a instanceof Array)){a=ea(a);for(var b,c=[];!(b=a.next()).done;)c.push(b.value);a=c}return a}function A(){for(var a=Number(this),b",
                      "markdown": "`nction(){return b<a.length?{done:!1,value:a[b++]}:{done:!0}}}function ba(a){a=[\"object\"==typeof globalThis&&globalThis,a,\"object\"==typeof window&&window,\"object\"==typeof self&&self,\"object\"==typeof global&&global];for(var b=0;b<a.length;++b){var c=a[b];if(c&&c.Math==Math)return c}throw Error(\"Cannot find global object\");}var ca=ba(this);function ea(a){var b=\"undefined\"!=typeof Symbol&&Symbol.iterator&&a[Symbol.iterator];return b?b.call(a):{next:aa(a)}}\nfunction w(a){if(!(a instanceof Array)){a=ea(a);for(var b,c=[];!(b=a.next()).done;)c.push(b.value);a=c}return a}function A(){for(var a=Number(this),b`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/post_export_metrics/__init__.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis-0.46.0-py3.12.egg-info/PKG-INFO"
                },
                "region": {
                  "startLine": 233,
                  "startColumn": 41,
                  "endLine": 233,
                  "endColumn": 45,
                  "snippet": {
                    "text": "elines](https://www.kubeflow.org/docs/components/pipelines/sdk/output-viewer/)\nincludes integrations that embed the TFMA notebook extension ([code](https://github.com/kubeflow/pipelines/blob/1.5.0-rc.2/backend/src/apiserver/visualization/types/tfma.py#L17)).\nThis integration relies on network access at runtime to load a variant of the\nJavaScript build published on unpkg.com (see [config](https://github.com/tensorflow/model-analysis/blob/v0.29.0/tensorflow_model_analysis/notebook/jupyter/js/webpack.config.js#L78)\nand [loader code](https://github.com/tensorflow/model-analysis/blob/v0.29.0/tensorflow",
                    "rendered": {
                      "text": "elines](https://www.kubeflow.org/docs/components/pipelines/sdk/output-viewer/)\nincludes integrations that embed the TFMA notebook extension ([code](https://github.com/kubeflow/pipelines/blob/1.5.0-rc.2/backend/src/apiserver/visualization/types/tfma.py#L17)).\nThis integration relies on network access at runtime to load a variant of the\nJavaScript build published on unpkg.com (see [config](https://github.com/tensorflow/model-analysis/blob/v0.29.0/tensorflow_model_analysis/notebook/jupyter/js/webpack.config.js#L78)\nand [loader code](https://github.com/tensorflow/model-analysis/blob/v0.29.0/tensorflow",
                      "markdown": "`elines](https://www.kubeflow.org/docs/components/pipelines/sdk/output-viewer/)\nincludes integrations that embed the TFMA notebook extension ([code](https://github.com/kubeflow/pipelines/blob/1.5.0-rc.2/backend/src/apiserver/visualization/types/tfma.py#L17)).\nThis integration relies on network access at runtime to load a variant of the\nJavaScript build published on unpkg.com (see [config](https://github.com/tensorflow/model-analysis/blob/v0.29.0/tensorflow_model_analysis/notebook/jupyter/js/webpack.config.js#L78)\nand [loader code](https://github.com/tensorflow/model-analysis/blob/v0.29.0/tensorflow`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis-0.46.0-py3.12.egg-info/PKG-INFO"
                },
                "region": {
                  "startLine": 211,
                  "startColumn": 8,
                  "endLine": 212,
                  "endColumn": 4,
                  "snippet": {
                    "text": "\nCheck pip packages:\n\n```Shell\npip list\n```\n\nCheck JupyterLab extensions:\n",
                    "rendered": {
                      "text": "\nCheck pip packages:\n\n```Shell\npip list\n```\n\nCheck JupyterLab extensions:\n",
                      "markdown": "`\nCheck pip packages:\n\n```Shell\npip list\n```\n\nCheck JupyterLab extensions:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis-0.46.0-py3.12.egg-info/PKG-INFO"
                },
                "region": {
                  "startLine": 209,
                  "startColumn": 5,
                  "endLine": 209,
                  "endColumn": 10,
                  "snippet": {
                    "text": "\n#### Troubleshooting\n\nCheck pip packages:\n\n```Shell\npip list\n",
                    "rendered": {
                      "text": "\n#### Troubleshooting\n\nCheck pip packages:\n\n```Shell\npip list\n",
                      "markdown": "`\n#### Troubleshooting\n\nCheck pip packages:\n\n```Shell\npip list\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis-0.46.0-py3.12.egg-info/PKG-INFO"
                },
                "region": {
                  "startLine": 177,
                  "startColumn": 8,
                  "endLine": 178,
                  "endColumn": 4,
                  "snippet": {
                    "text": "\n#### Jupyter Lab 1.2.x\n\n```Shell\npip install tensorflow_model_analysis==0.32.0\njupyter labextension install tensorflow_model_analysis@0.32.0\njupyter labextension install @jupyter-widgets/jupyterlab-manager@1.1\n```\n",
                    "rendered": {
                      "text": "\n#### Jupyter Lab 1.2.x\n\n```Shell\npip install tensorflow_model_analysis==0.32.0\njupyter labextension install tensorflow_model_analysis@0.32.0\njupyter labextension install @jupyter-widgets/jupyterlab-manager@1.1\n```\n",
                      "markdown": "`\n#### Jupyter Lab 1.2.x\n\n```Shell\npip install tensorflow_model_analysis==0.32.0\njupyter labextension install tensorflow_model_analysis@0.32.0\njupyter labextension install @jupyter-widgets/jupyterlab-manager@1.1\n```\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis-0.46.0-py3.12.egg-info/PKG-INFO"
                },
                "region": {
                  "startLine": 169,
                  "startColumn": 8,
                  "endLine": 170,
                  "endColumn": 4,
                  "snippet": {
                    "text": "\n#### Jupyter Lab 2.2.x\n\n```Shell\npip install tensorflow_model_analysis==0.32.0\njupyter labextension install tensorflow_model_analysis@0.32.0\njupyter labextension install @jupyter-widgets/jupyterlab-manager@2\n```\n",
                    "rendered": {
                      "text": "\n#### Jupyter Lab 2.2.x\n\n```Shell\npip install tensorflow_model_analysis==0.32.0\njupyter labextension install tensorflow_model_analysis@0.32.0\njupyter labextension install @jupyter-widgets/jupyterlab-manager@2\n```\n",
                      "markdown": "`\n#### Jupyter Lab 2.2.x\n\n```Shell\npip install tensorflow_model_analysis==0.32.0\njupyter labextension install tensorflow_model_analysis@0.32.0\njupyter labextension install @jupyter-widgets/jupyterlab-manager@2\n```\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis-0.46.0-py3.12.egg-info/PKG-INFO"
                },
                "region": {
                  "startLine": 162,
                  "startColumn": 61,
                  "endLine": 163,
                  "endColumn": 4,
                  "snippet": {
                    "text": "\n```Shell\npip install tensorflow_model_analysis==0.32.0\njupyter labextension install tensorflow_model_analysis@0.32.0\npip install jupyterlab_widgets==1.0.0\n```\n\n\n",
                    "rendered": {
                      "text": "\n```Shell\npip install tensorflow_model_analysis==0.32.0\njupyter labextension install tensorflow_model_analysis@0.32.0\npip install jupyterlab_widgets==1.0.0\n```\n\n\n",
                      "markdown": "`\n```Shell\npip install tensorflow_model_analysis==0.32.0\njupyter labextension install tensorflow_model_analysis@0.32.0\npip install jupyterlab_widgets==1.0.0\n```\n\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis-0.46.0-py3.12.egg-info/PKG-INFO"
                },
                "region": {
                  "startLine": 160,
                  "startColumn": 8,
                  "endLine": 161,
                  "endColumn": 4,
                  "snippet": {
                    "text": "\n#### Jupyter Lab 3.0.x\n\n```Shell\npip install tensorflow_model_analysis==0.32.0\njupyter labextension install tensorflow_model_analysis@0.32.0\npip install jupyterlab_widgets==1.0.0\n```\n",
                    "rendered": {
                      "text": "\n#### Jupyter Lab 3.0.x\n\n```Shell\npip install tensorflow_model_analysis==0.32.0\njupyter labextension install tensorflow_model_analysis@0.32.0\npip install jupyterlab_widgets==1.0.0\n```\n",
                      "markdown": "`\n#### Jupyter Lab 3.0.x\n\n```Shell\npip install tensorflow_model_analysis==0.32.0\njupyter labextension install tensorflow_model_analysis@0.32.0\npip install jupyterlab_widgets==1.0.0\n```\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis-0.46.0-py3.12.egg-info/PKG-INFO"
                },
                "region": {
                  "startLine": 149,
                  "startColumn": 45,
                  "endLine": 149,
                  "endColumn": 50,
                  "snippet": {
                    "text": "\nUsing a JupyterLab extension requires installing dependencies on the command\nline. You can do this within the console in the JupyterLab UI or on the command\nline. This includes separately installing any pip package dependencies and\nJupyterLab labextension plugin dependencies, and the version numbers must be\ncompatible.  JupyterLab labextension packages refer to npm packages\n(eg, [tensorflow_model_analysis](https://www.npmjs.com/package/tensorflow_model_analysis).\n",
                    "rendered": {
                      "text": "\nUsing a JupyterLab extension requires installing dependencies on the command\nline. You can do this within the console in the JupyterLab UI or on the command\nline. This includes separately installing any pip package dependencies and\nJupyterLab labextension plugin dependencies, and the version numbers must be\ncompatible.  JupyterLab labextension packages refer to npm packages\n(eg, [tensorflow_model_analysis](https://www.npmjs.com/package/tensorflow_model_analysis).\n",
                      "markdown": "`\nUsing a JupyterLab extension requires installing dependencies on the command\nline. You can do this within the console in the JupyterLab UI or on the command\nline. This includes separately installing any pip package dependencies and\nJupyterLab labextension plugin dependencies, and the version numbers must be\ncompatible.  JupyterLab labextension packages refer to npm packages\n(eg, [tensorflow_model_analysis](https://www.npmjs.com/package/tensorflow_model_analysis).\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis-0.46.0-py3.12.egg-info/PKG-INFO"
                },
                "region": {
                  "startLine": 144,
                  "startColumn": 51,
                  "endLine": 144,
                  "endColumn": 56,
                  "snippet": {
                    "text": "### Jupyter Lab\n\nAs of writing, because of https://github.com/pypa/pip/issues/9187, `pip install`\nmight never finish. In that case, you should revert pip to version 19 instead of\n20: `pip install \"pip<20\"`.\n\nUsing a JupyterLab extension requires installing dependencies on the command\n",
                    "rendered": {
                      "text": "### Jupyter Lab\n\nAs of writing, because of https://github.com/pypa/pip/issues/9187, `pip install`\nmight never finish. In that case, you should revert pip to version 19 instead of\n20: `pip install \"pip<20\"`.\n\nUsing a JupyterLab extension requires installing dependencies on the command\n",
                      "markdown": "`### Jupyter Lab\n\nAs of writing, because of https://github.com/pypa/pip/issues/9187, `pip install`\nmight never finish. In that case, you should revert pip to version 19 instead of\n20: `pip install \"pip<20\"`.\n\nUsing a JupyterLab extension requires installing dependencies on the command\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis-0.46.0-py3.12.egg-info/PKG-INFO"
                },
                "region": {
                  "startLine": 128,
                  "startColumn": 29,
                  "endLine": 129,
                  "endColumn": 4,
                  "snippet": {
                    "text": "```\npython3 -m venv <virtualenv_name>\nsource <virtualenv_name>/bin/activate\npip3 install setuptools wheel\ngit clone https://github.com/tensorflow/model-analysis.git\ncd model-analysis\npython3 setup.py bdist_wheel\n```\n",
                    "rendered": {
                      "text": "```\npython3 -m venv <virtualenv_name>\nsource <virtualenv_name>/bin/activate\npip3 install setuptools wheel\ngit clone https://github.com/tensorflow/model-analysis.git\ncd model-analysis\npython3 setup.py bdist_wheel\n```\n",
                      "markdown": "````\npython3 -m venv <virtualenv_name>\nsource <virtualenv_name>/bin/activate\npip3 install setuptools wheel\ngit clone https://github.com/tensorflow/model-analysis.git\ncd model-analysis\npython3 setup.py bdist_wheel\n```\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis-0.46.0-py3.12.egg-info/PKG-INFO"
                },
                "region": {
                  "startLine": 102,
                  "startColumn": 52,
                  "endLine": 103,
                  "endColumn": 4,
                  "snippet": {
                    "text": "If you have cloned the repository locally, and want to test your local change,\npip install from a local folder.\n\n<pre class=\"devsite-terminal devsite-click-to-copy\">\npip install -e $FOLDER_OF_THE_LOCAL_LOCATION\n</pre>\n\nNote that protobuf must be installed correctly for the above option since it is\n",
                    "rendered": {
                      "text": "If you have cloned the repository locally, and want to test your local change,\npip install from a local folder.\n\n<pre class=\"devsite-terminal devsite-click-to-copy\">\npip install -e $FOLDER_OF_THE_LOCAL_LOCATION\n</pre>\n\nNote that protobuf must be installed correctly for the above option since it is\n",
                      "markdown": "`If you have cloned the repository locally, and want to test your local change,\npip install from a local folder.\n\n<pre class=\"devsite-terminal devsite-click-to-copy\">\npip install -e $FOLDER_OF_THE_LOCAL_LOCATION\n</pre>\n\nNote that protobuf must be installed correctly for the above option since it is\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis-0.46.0-py3.12.egg-info/PKG-INFO"
                },
                "region": {
                  "startLine": 99,
                  "startColumn": 78,
                  "endLine": 100,
                  "endColumn": 4,
                  "snippet": {
                    "text": "pip install git+https://github.com/tensorflow/model-analysis.git@v0.21.3#egg=tensorflow_model_analysis\n</pre>\n\nIf you have cloned the repository locally, and want to test your local change,\npip install from a local folder.\n\n<pre class=\"devsite-terminal devsite-click-to-copy\">\npip install -e $FOLDER_OF_THE_LOCAL_LOCATION\n",
                    "rendered": {
                      "text": "pip install git+https://github.com/tensorflow/model-analysis.git@v0.21.3#egg=tensorflow_model_analysis\n</pre>\n\nIf you have cloned the repository locally, and want to test your local change,\npip install from a local folder.\n\n<pre class=\"devsite-terminal devsite-click-to-copy\">\npip install -e $FOLDER_OF_THE_LOCAL_LOCATION\n",
                      "markdown": "`pip install git+https://github.com/tensorflow/model-analysis.git@v0.21.3#egg=tensorflow_model_analysis\n</pre>\n\nIf you have cloned the repository locally, and want to test your local change,\npip install from a local folder.\n\n<pre class=\"devsite-terminal devsite-click-to-copy\">\npip install -e $FOLDER_OF_THE_LOCAL_LOCATION\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis-0.46.0-py3.12.egg-info/PKG-INFO"
                },
                "region": {
                  "startLine": 95,
                  "startColumn": 52,
                  "endLine": 96,
                  "endColumn": 4,
                  "snippet": {
                    "text": "\npip install from a released version directly from git:\n\n<pre class=\"devsite-terminal devsite-click-to-copy\">\npip install git+https://github.com/tensorflow/model-analysis.git@v0.21.3#egg=tensorflow_model_analysis\n</pre>\n\nIf you have cloned the repository locally, and want to test your local change,\n",
                    "rendered": {
                      "text": "\npip install from a released version directly from git:\n\n<pre class=\"devsite-terminal devsite-click-to-copy\">\npip install git+https://github.com/tensorflow/model-analysis.git@v0.21.3#egg=tensorflow_model_analysis\n</pre>\n\nIf you have cloned the repository locally, and want to test your local change,\n",
                      "markdown": "`\npip install from a released version directly from git:\n\n<pre class=\"devsite-terminal devsite-click-to-copy\">\npip install git+https://github.com/tensorflow/model-analysis.git@v0.21.3#egg=tensorflow_model_analysis\n</pre>\n\nIf you have cloned the repository locally, and want to test your local change,\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis-0.46.0-py3.12.egg-info/PKG-INFO"
                },
                "region": {
                  "startLine": 92,
                  "endLine": 93,
                  "endColumn": 4,
                  "snippet": {
                    "text": "<pre class=\"devsite-terminal devsite-click-to-copy\">\npip install git+https://github.com/tensorflow/model-analysis.git#egg=tensorflow_model_analysis\n</pre>\n\npip install from a released version directly from git:\n\n<pre class=\"devsite-terminal devsite-click-to-copy\">\npip install git+https://github.com/tensorflow/model-analysis.git@v0.21.3#egg=tensorflow_model_analysis\n",
                    "rendered": {
                      "text": "<pre class=\"devsite-terminal devsite-click-to-copy\">\npip install git+https://github.com/tensorflow/model-analysis.git#egg=tensorflow_model_analysis\n</pre>\n\npip install from a released version directly from git:\n\n<pre class=\"devsite-terminal devsite-click-to-copy\">\npip install git+https://github.com/tensorflow/model-analysis.git@v0.21.3#egg=tensorflow_model_analysis\n",
                      "markdown": "`<pre class=\"devsite-terminal devsite-click-to-copy\">\npip install git+https://github.com/tensorflow/model-analysis.git#egg=tensorflow_model_analysis\n</pre>\n\npip install from a released version directly from git:\n\n<pre class=\"devsite-terminal devsite-click-to-copy\">\npip install git+https://github.com/tensorflow/model-analysis.git@v0.21.3#egg=tensorflow_model_analysis\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis-0.46.0-py3.12.egg-info/PKG-INFO"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 52,
                  "endLine": 90,
                  "endColumn": 4,
                  "snippet": {
                    "text": "\npip install from the HEAD of the git:\n\n<pre class=\"devsite-terminal devsite-click-to-copy\">\npip install git+https://github.com/tensorflow/model-analysis.git#egg=tensorflow_model_analysis\n</pre>\n\npip install from a released version directly from git:\n",
                    "rendered": {
                      "text": "\npip install from the HEAD of the git:\n\n<pre class=\"devsite-terminal devsite-click-to-copy\">\npip install git+https://github.com/tensorflow/model-analysis.git#egg=tensorflow_model_analysis\n</pre>\n\npip install from a released version directly from git:\n",
                      "markdown": "`\npip install from the HEAD of the git:\n\n<pre class=\"devsite-terminal devsite-click-to-copy\">\npip install git+https://github.com/tensorflow/model-analysis.git#egg=tensorflow_model_analysis\n</pre>\n\npip install from a released version directly from git:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis-0.46.0-py3.12.egg-info/PKG-INFO"
                },
                "region": {
                  "startLine": 87,
                  "startColumn": 20,
                  "endLine": 87,
                  "endColumn": 26,
                  "snippet": {
                    "text": "pip install -i https://pypi-nightly.tensorflow.org/simple tensorflow-model-analysis\n</pre>\n\npip install from the HEAD of the git:\n\n<pre class=\"devsite-terminal devsite-click-to-copy\">\npip install git+https://github.com/tensorflow/model-analysis.git#egg=tensorflow_model_analysis\n",
                    "rendered": {
                      "text": "pip install -i https://pypi-nightly.tensorflow.org/simple tensorflow-model-analysis\n</pre>\n\npip install from the HEAD of the git:\n\n<pre class=\"devsite-terminal devsite-click-to-copy\">\npip install git+https://github.com/tensorflow/model-analysis.git#egg=tensorflow_model_analysis\n",
                      "markdown": "`pip install -i https://pypi-nightly.tensorflow.org/simple tensorflow-model-analysis\n</pre>\n\npip install from the HEAD of the git:\n\n<pre class=\"devsite-terminal devsite-click-to-copy\">\npip install git+https://github.com/tensorflow/model-analysis.git#egg=tensorflow_model_analysis\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis-0.46.0-py3.12.egg-info/PKG-INFO"
                },
                "region": {
                  "startLine": 86,
                  "endLine": 87,
                  "endColumn": 4,
                  "snippet": {
                    "text": "<pre class=\"devsite-terminal devsite-click-to-copy\">\npip install -i https://pypi-nightly.tensorflow.org/simple tensorflow-model-analysis\n</pre>\n\npip install from the HEAD of the git:\n\n<pre class=\"devsite-terminal devsite-click-to-copy\">\npip install git+https://github.com/tensorflow/model-analysis.git#egg=tensorflow_model_analysis\n",
                    "rendered": {
                      "text": "<pre class=\"devsite-terminal devsite-click-to-copy\">\npip install -i https://pypi-nightly.tensorflow.org/simple tensorflow-model-analysis\n</pre>\n\npip install from the HEAD of the git:\n\n<pre class=\"devsite-terminal devsite-click-to-copy\">\npip install git+https://github.com/tensorflow/model-analysis.git#egg=tensorflow_model_analysis\n",
                      "markdown": "`<pre class=\"devsite-terminal devsite-click-to-copy\">\npip install -i https://pypi-nightly.tensorflow.org/simple tensorflow-model-analysis\n</pre>\n\npip install from the HEAD of the git:\n\n<pre class=\"devsite-terminal devsite-click-to-copy\">\npip install git+https://github.com/tensorflow/model-analysis.git#egg=tensorflow_model_analysis\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis-0.46.0-py3.12.egg-info/PKG-INFO"
                },
                "region": {
                  "startLine": 83,
                  "startColumn": 52,
                  "endLine": 84,
                  "endColumn": 4,
                  "snippet": {
                    "text": "\npip install from https://pypi-nightly.tensorflow.org\n\n<pre class=\"devsite-terminal devsite-click-to-copy\">\npip install -i https://pypi-nightly.tensorflow.org/simple tensorflow-model-analysis\n</pre>\n\npip install from the HEAD of the git:\n",
                    "rendered": {
                      "text": "\npip install from https://pypi-nightly.tensorflow.org\n\n<pre class=\"devsite-terminal devsite-click-to-copy\">\npip install -i https://pypi-nightly.tensorflow.org/simple tensorflow-model-analysis\n</pre>\n\npip install from the HEAD of the git:\n",
                      "markdown": "`\npip install from https://pypi-nightly.tensorflow.org\n\n<pre class=\"devsite-terminal devsite-click-to-copy\">\npip install -i https://pypi-nightly.tensorflow.org/simple tensorflow-model-analysis\n</pre>\n\npip install from the HEAD of the git:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis-0.46.0-py3.12.egg-info/PKG-INFO"
                },
                "region": {
                  "startLine": 80,
                  "endLine": 81,
                  "endColumn": 4,
                  "snippet": {
                    "text": "<pre class=\"devsite-terminal devsite-click-to-copy\">\npip install tensorflow-model-analysis\n</pre>\n\npip install from https://pypi-nightly.tensorflow.org\n\n<pre class=\"devsite-terminal devsite-click-to-copy\">\npip install -i https://pypi-nightly.tensorflow.org/simple tensorflow-model-analysis\n",
                    "rendered": {
                      "text": "<pre class=\"devsite-terminal devsite-click-to-copy\">\npip install tensorflow-model-analysis\n</pre>\n\npip install from https://pypi-nightly.tensorflow.org\n\n<pre class=\"devsite-terminal devsite-click-to-copy\">\npip install -i https://pypi-nightly.tensorflow.org/simple tensorflow-model-analysis\n",
                      "markdown": "`<pre class=\"devsite-terminal devsite-click-to-copy\">\npip install tensorflow-model-analysis\n</pre>\n\npip install from https://pypi-nightly.tensorflow.org\n\n<pre class=\"devsite-terminal devsite-click-to-copy\">\npip install -i https://pypi-nightly.tensorflow.org/simple tensorflow-model-analysis\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis-0.46.0-py3.12.egg-info/PKG-INFO"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 52,
                  "endLine": 78,
                  "endColumn": 4,
                  "snippet": {
                    "text": "The recommended way to install TFMA is using the\n[PyPI package](https://pypi.org/project/tensorflow-model-analysis/):\n\n<pre class=\"devsite-terminal devsite-click-to-copy\">\npip install tensorflow-model-analysis\n</pre>\n\npip install from https://pypi-nightly.tensorflow.org\n",
                    "rendered": {
                      "text": "The recommended way to install TFMA is using the\n[PyPI package](https://pypi.org/project/tensorflow-model-analysis/):\n\n<pre class=\"devsite-terminal devsite-click-to-copy\">\npip install tensorflow-model-analysis\n</pre>\n\npip install from https://pypi-nightly.tensorflow.org\n",
                      "markdown": "`The recommended way to install TFMA is using the\n[PyPI package](https://pypi.org/project/tensorflow-model-analysis/):\n\n<pre class=\"devsite-terminal devsite-click-to-copy\">\npip install tensorflow-model-analysis\n</pre>\n\npip install from https://pypi-nightly.tensorflow.org\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/writers/writer_test.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/writers/writer.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/writers/metrics_plots_and_validations_wri"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/writers/metrics_plots_and_validations_wri"
                },
                "region": {
                  "startLine": 1479,
                  "startColumn": 25,
                  "endLine": 1479,
                  "endColumn": 31,
                  "snippet": {
                    "text": "                        class_name='MeanPrediction',\n                        # -.01 < 0 < .01, OK.\n                        # Diff% = -.333/.333 = -100% < -99%, OK.\n                        # Diff = 0 - .333 = -.333 < 0, OK.\n                        threshold=config_pb2.MetricThreshold(\n                            value_threshold=config_pb2.GenericValueThreshold(\n                                upper_bound={'value': .01},\n",
                    "rendered": {
                      "text": "                        class_name='MeanPrediction',\n                        # -.01 < 0 < .01, OK.\n                        # Diff% = -.333/.333 = -100% < -99%, OK.\n                        # Diff = 0 - .333 = -.333 < 0, OK.\n                        threshold=config_pb2.MetricThreshold(\n                            value_threshold=config_pb2.GenericValueThreshold(\n                                upper_bound={'value': .01},\n",
                      "markdown": "`                        class_name='MeanPrediction',\n                        # -.01 < 0 < .01, OK.\n                        # Diff% = -.333/.333 = -100% < -99%, OK.\n                        # Diff = 0 - .333 = -.333 < 0, OK.\n                        threshold=config_pb2.MetricThreshold(\n                            value_threshold=config_pb2.GenericValueThreshold(\n                                upper_bound={'value': .01},\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000801"
          },
          "message": {
            "text": "Backdoor: Executing Obfuscated Code",
            "id": "BD000801"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/slicer/slicer_test.py"
                },
                "region": {
                  "startLine": 422,
                  "startColumn": 18,
                  "endLine": 422,
                  "endColumn": 42,
                  "snippet": {
                    "text": "        (slicer.SliceKeyType, 'mixed', (('a', 1), ('b', 'f'))),\n        (slicer.SliceKeyType, 'more', (('a', 1), ('b', 'f'), ('c', 'cars'))),\n        (slicer.SliceKeyType, 'unicode',\n         (('a', b'\\xe4\\xb8\\xad\\xe6\\x96\\x87'),)),\n        (slicer.CrossSliceKeyType, 'CrossSlice overall', ((), ())),\n        (slicer.CrossSliceKeyType, 'CrossSlice one slice key baseline',\n         ((('a', '5'),), ())),\n",
                    "rendered": {
                      "text": "        (slicer.SliceKeyType, 'mixed', (('a', 1), ('b', 'f'))),\n        (slicer.SliceKeyType, 'more', (('a', 1), ('b', 'f'), ('c', 'cars'))),\n        (slicer.SliceKeyType, 'unicode',\n         (('a', b'\\xe4\\xb8\\xad\\xe6\\x96\\x87'),)),\n        (slicer.CrossSliceKeyType, 'CrossSlice overall', ((), ())),\n        (slicer.CrossSliceKeyType, 'CrossSlice one slice key baseline',\n         ((('a', '5'),), ())),\n",
                      "markdown": "`        (slicer.SliceKeyType, 'mixed', (('a', 1), ('b', 'f'))),\n        (slicer.SliceKeyType, 'more', (('a', 1), ('b', 'f'), ('c', 'cars'))),\n        (slicer.SliceKeyType, 'unicode',\n         (('a', b'\\xe4\\xb8\\xad\\xe6\\x96\\x87'),)),\n        (slicer.CrossSliceKeyType, 'CrossSlice overall', ((), ())),\n        (slicer.CrossSliceKeyType, 'CrossSlice one slice key baseline',\n         ((('a', '5'),), ())),\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000801"
          },
          "message": {
            "text": "Backdoor: Executing Obfuscated Code",
            "id": "BD000801"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/slicer/slicer_test.py"
                },
                "region": {
                  "startLine": 341,
                  "startColumn": 32,
                  "endLine": 341,
                  "endColumn": 56,
                  "snippet": {
                    "text": "        ('mixed', (('age', 1), ('gender', 'f')), 'age_X_gender:1_X_f'),\n        ('more', (('age', 1), ('gender', 'f'), ('interest', 'cars')),\n         'age_X_gender_X_interest:1_X_f_X_cars'),\n        ('unicode', (('text', b'\\xe4\\xb8\\xad\\xe6\\x96\\x87'),), u'text:\\u4e2d\\u6587'),\n    ]  # pyformat: disable\n    for (name, slice_key, stringified_key) in test_cases:\n      self.assertEqual(\n",
                    "rendered": {
                      "text": "        ('mixed', (('age', 1), ('gender', 'f')), 'age_X_gender:1_X_f'),\n        ('more', (('age', 1), ('gender', 'f'), ('interest', 'cars')),\n         'age_X_gender_X_interest:1_X_f_X_cars'),\n        ('unicode', (('text', b'\\xe4\\xb8\\xad\\xe6\\x96\\x87'),), u'text:\\u4e2d\\u6587'),\n    ]  # pyformat: disable\n    for (name, slice_key, stringified_key) in test_cases:\n      self.assertEqual(\n",
                      "markdown": "`        ('mixed', (('age', 1), ('gender', 'f')), 'age_X_gender:1_X_f'),\n        ('more', (('age', 1), ('gender', 'f'), ('interest', 'cars')),\n         'age_X_gender_X_interest:1_X_f_X_cars'),\n        ('unicode', (('text', b'\\xe4\\xb8\\xad\\xe6\\x96\\x87'),), u'text:\\u4e2d\\u6587'),\n    ]  # pyformat: disable\n    for (name, slice_key, stringified_key) in test_cases:\n      self.assertEqual(\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/slicer/slicer_test.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/slicer/slicer_lib.py"
                },
                "region": {
                  "startLine": 608,
                  "startColumn": 24,
                  "endLine": 608,
                  "endColumn": 29,
                  "snippet": {
                    "text": "      element: types.Extracts) -> List[Tuple[SliceKeyType, types.Extracts]]:\n    key_filter_fn = self._key_filter_fn  # Local cache.\n    filtered = {k: v for k, v in element.items() if key_filter_fn(k)}\n    slice_keys = element.get(constants.SLICE_KEY_TYPES_KEY)\n    # The query based evaluator will group slices from multiple examples, so we\n    # deduplicate to avoid overcounting. Depending on whether the rows within a\n    # batch have a variable or fixed length, either a VarLenTensorValue or a 2D\n",
                    "rendered": {
                      "text": "      element: types.Extracts) -> List[Tuple[SliceKeyType, types.Extracts]]:\n    key_filter_fn = self._key_filter_fn  # Local cache.\n    filtered = {k: v for k, v in element.items() if key_filter_fn(k)}\n    slice_keys = element.get(constants.SLICE_KEY_TYPES_KEY)\n    # The query based evaluator will group slices from multiple examples, so we\n    # deduplicate to avoid overcounting. Depending on whether the rows within a\n    # batch have a variable or fixed length, either a VarLenTensorValue or a 2D\n",
                      "markdown": "`      element: types.Extracts) -> List[Tuple[SliceKeyType, types.Extracts]]:\n    key_filter_fn = self._key_filter_fn  # Local cache.\n    filtered = {k: v for k, v in element.items() if key_filter_fn(k)}\n    slice_keys = element.get(constants.SLICE_KEY_TYPES_KEY)\n    # The query based evaluator will group slices from multiple examples, so we\n    # deduplicate to avoid overcounting. Depending on whether the rows within a\n    # batch have a variable or fixed length, either a VarLenTensorValue or a 2D\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/slicer/slicer_lib.py"
                },
                "region": {
                  "startLine": 234,
                  "startColumn": 27,
                  "endLine": 234,
                  "endColumn": 32,
                  "snippet": {
                    "text": "        return\n\n      column_match = []\n      for value in accessor.get(column):\n        if isinstance(value, bytes):\n          try:\n            column_match.append((column, tf.compat.as_text(value)))\n",
                    "rendered": {
                      "text": "        return\n\n      column_match = []\n      for value in accessor.get(column):\n        if isinstance(value, bytes):\n          try:\n            column_match.append((column, tf.compat.as_text(value)))\n",
                      "markdown": "`        return\n\n      column_match = []\n      for value in accessor.get(column):\n        if isinstance(value, bytes):\n          try:\n            column_match.append((column, tf.compat.as_text(value)))\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/slicer/slicer_lib.py"
                },
                "region": {
                  "startLine": 209,
                  "startColumn": 32,
                  "endLine": 209,
                  "endColumn": 37,
                  "snippet": {
                    "text": "      if not accessor.has_key(key):\n        return\n\n      accessor_values = accessor.get(key)\n      if value not in accessor_values:\n        if isinstance(value, str):\n          if value.encode() not in accessor_values:  # For Python3.\n",
                    "rendered": {
                      "text": "      if not accessor.has_key(key):\n        return\n\n      accessor_values = accessor.get(key)\n      if value not in accessor_values:\n        if isinstance(value, str):\n          if value.encode() not in accessor_values:  # For Python3.\n",
                      "markdown": "`      if not accessor.has_key(key):\n        return\n\n      accessor_values = accessor.get(key)\n      if value not in accessor_values:\n        if isinstance(value, str):\n          if value.encode() not in accessor_values:  # For Python3.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/slicer/slicer_lib.py"
                },
                "region": {
                  "startLine": 696,
                  "startColumn": 23,
                  "endLine": 696,
                  "endColumn": 27,
                  "snippet": {
                    "text": "    error_metric_key: The special metric key to indicate errors.\n\n  Returns:\n    A PCollection keyed at all the possible slice_key and aggregated data for\n    slice keys with example count more than min_slice_size and error\n    message for filtered out slices.\n  \"\"\"\n",
                    "rendered": {
                      "text": "    error_metric_key: The special metric key to indicate errors.\n\n  Returns:\n    A PCollection keyed at all the possible slice_key and aggregated data for\n    slice keys with example count more than min_slice_size and error\n    message for filtered out slices.\n  \"\"\"\n",
                      "markdown": "`    error_metric_key: The special metric key to indicate errors.\n\n  Returns:\n    A PCollection keyed at all the possible slice_key and aggregated data for\n    slice keys with example count more than min_slice_size and error\n    message for filtered out slices.\n  \"\"\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/slicer/slicer_lib.py"
                },
                "region": {
                  "startLine": 687,
                  "startColumn": 48,
                  "endLine": 687,
                  "endColumn": 52,
                  "snippet": {
                    "text": "  slice keys with empty data, and a debug message explaining the omission.\n\n  Args:\n    values: PCollection of aggregated data keyed at slice_key\n    slices_count: PCollection of slice keys and their example count.\n    min_slice_size: If the number of examples in a specific slice is less than\n      min_slice_size, then an error will be returned for that slice. This will\n",
                    "rendered": {
                      "text": "  slice keys with empty data, and a debug message explaining the omission.\n\n  Args:\n    values: PCollection of aggregated data keyed at slice_key\n    slices_count: PCollection of slice keys and their example count.\n    min_slice_size: If the number of examples in a specific slice is less than\n      min_slice_size, then an error will be returned for that slice. This will\n",
                      "markdown": "`  slice keys with empty data, and a debug message explaining the omission.\n\n  Args:\n    values: PCollection of aggregated data keyed at slice_key\n    slices_count: PCollection of slice keys and their example count.\n    min_slice_size: If the number of examples in a specific slice is less than\n      min_slice_size, then an error will be returned for that slice. This will\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/slicer/slicer_lib.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/slicer/slicer_lib.py"
                },
                "region": {
                  "startLine": 125,
                  "startColumn": 5,
                  "endLine": 125,
                  "endColumn": 11,
                  "snippet": {
                    "text": "    self._features = frozenset(features)\n\n    # We build this up as an instance variable, instead of building it each\n    # time we call generate_slices, for efficiency reasons.\n    #\n    # This is a flat list of SingletonSliceKeyTypes,\n    # i.e. List[SingletonSliceKeyType].\n",
                    "rendered": {
                      "text": "    self._features = frozenset(features)\n\n    # We build this up as an instance variable, instead of building it each\n    # time we call generate_slices, for efficiency reasons.\n    #\n    # This is a flat list of SingletonSliceKeyTypes,\n    # i.e. List[SingletonSliceKeyType].\n",
                      "markdown": "`    self._features = frozenset(features)\n\n    # We build this up as an instance variable, instead of building it each\n    # time we call generate_slices, for efficiency reasons.\n    #\n    # This is a flat list of SingletonSliceKeyTypes,\n    # i.e. List[SingletonSliceKeyType].\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/notebook/jupyter/renderer.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/notebook/jupyter/renderer.py"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 16,
                  "endLine": 42,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\n\ndef render_time_series(data, config):\n  \"\"\"Renders the time series view in Jupyter.\n\n  Args:\n    data: A list of dictionary containing metrics for different evaluation runs.\n",
                    "rendered": {
                      "text": "\n\ndef render_time_series(data, config):\n  \"\"\"Renders the time series view in Jupyter.\n\n  Args:\n    data: A list of dictionary containing metrics for different evaluation runs.\n",
                      "markdown": "`\n\ndef render_time_series(data, config):\n  \"\"\"Renders the time series view in Jupyter.\n\n  Args:\n    data: A list of dictionary containing metrics for different evaluation runs.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/preprocessors/utils/box_match.py"
                },
                "region": {
                  "startLine": 102,
                  "startColumn": 55,
                  "endLine": 102,
                  "endColumn": 59,
                  "snippet": {
                    "text": "   boxes2: numpy array, containing a list of bounding boxes in 'corners' format.\n     Bounding boxes are expected to be in the corners format of [LEFT, TOP,\n     RIGHT, BOTTOM]  For example, the bounding box with it's left bound at 20,\n     right bound at 100, TOP_bound at 110, BOTTOM bound at 300 is be represented\n     as [20, 110, 100, 300]\n\n  Returns:\n",
                    "rendered": {
                      "text": "   boxes2: numpy array, containing a list of bounding boxes in 'corners' format.\n     Bounding boxes are expected to be in the corners format of [LEFT, TOP,\n     RIGHT, BOTTOM]  For example, the bounding box with it's left bound at 20,\n     right bound at 100, TOP_bound at 110, BOTTOM bound at 300 is be represented\n     as [20, 110, 100, 300]\n\n  Returns:\n",
                      "markdown": "`   boxes2: numpy array, containing a list of bounding boxes in 'corners' format.\n     Bounding boxes are expected to be in the corners format of [LEFT, TOP,\n     RIGHT, BOTTOM]  For example, the bounding box with it's left bound at 20,\n     right bound at 100, TOP_bound at 110, BOTTOM bound at 300 is be represented\n     as [20, 110, 100, 300]\n\n  Returns:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/preprocessors/utils/box_match.py"
                },
                "region": {
                  "startLine": 102,
                  "startColumn": 34,
                  "endLine": 102,
                  "endColumn": 38,
                  "snippet": {
                    "text": "   boxes2: numpy array, containing a list of bounding boxes in 'corners' format.\n     Bounding boxes are expected to be in the corners format of [LEFT, TOP,\n     RIGHT, BOTTOM]  For example, the bounding box with it's left bound at 20,\n     right bound at 100, TOP_bound at 110, BOTTOM bound at 300 is be represented\n     as [20, 110, 100, 300]\n\n  Returns:\n",
                    "rendered": {
                      "text": "   boxes2: numpy array, containing a list of bounding boxes in 'corners' format.\n     Bounding boxes are expected to be in the corners format of [LEFT, TOP,\n     RIGHT, BOTTOM]  For example, the bounding box with it's left bound at 20,\n     right bound at 100, TOP_bound at 110, BOTTOM bound at 300 is be represented\n     as [20, 110, 100, 300]\n\n  Returns:\n",
                      "markdown": "`   boxes2: numpy array, containing a list of bounding boxes in 'corners' format.\n     Bounding boxes are expected to be in the corners format of [LEFT, TOP,\n     RIGHT, BOTTOM]  For example, the bounding box with it's left bound at 20,\n     right bound at 100, TOP_bound at 110, BOTTOM bound at 300 is be represented\n     as [20, 110, 100, 300]\n\n  Returns:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/preprocessors/utils/box_match.py"
                },
                "region": {
                  "startLine": 102,
                  "startColumn": 16,
                  "endLine": 102,
                  "endColumn": 20,
                  "snippet": {
                    "text": "   boxes2: numpy array, containing a list of bounding boxes in 'corners' format.\n     Bounding boxes are expected to be in the corners format of [LEFT, TOP,\n     RIGHT, BOTTOM]  For example, the bounding box with it's left bound at 20,\n     right bound at 100, TOP_bound at 110, BOTTOM bound at 300 is be represented\n     as [20, 110, 100, 300]\n\n  Returns:\n",
                    "rendered": {
                      "text": "   boxes2: numpy array, containing a list of bounding boxes in 'corners' format.\n     Bounding boxes are expected to be in the corners format of [LEFT, TOP,\n     RIGHT, BOTTOM]  For example, the bounding box with it's left bound at 20,\n     right bound at 100, TOP_bound at 110, BOTTOM bound at 300 is be represented\n     as [20, 110, 100, 300]\n\n  Returns:\n",
                      "markdown": "`   boxes2: numpy array, containing a list of bounding boxes in 'corners' format.\n     Bounding boxes are expected to be in the corners format of [LEFT, TOP,\n     RIGHT, BOTTOM]  For example, the bounding box with it's left bound at 20,\n     right bound at 100, TOP_bound at 110, BOTTOM bound at 300 is be represented\n     as [20, 110, 100, 300]\n\n  Returns:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/preprocessors/utils/box_match.py"
                },
                "region": {
                  "startLine": 101,
                  "startColumn": 71,
                  "endLine": 101,
                  "endColumn": 75,
                  "snippet": {
                    "text": "   boxes1: numpy array, containing a list of bounding boxes in 'corners' format.\n   boxes2: numpy array, containing a list of bounding boxes in 'corners' format.\n     Bounding boxes are expected to be in the corners format of [LEFT, TOP,\n     RIGHT, BOTTOM]  For example, the bounding box with it's left bound at 20,\n     right bound at 100, TOP_bound at 110, BOTTOM bound at 300 is be represented\n     as [20, 110, 100, 300]\n\n",
                    "rendered": {
                      "text": "   boxes1: numpy array, containing a list of bounding boxes in 'corners' format.\n   boxes2: numpy array, containing a list of bounding boxes in 'corners' format.\n     Bounding boxes are expected to be in the corners format of [LEFT, TOP,\n     RIGHT, BOTTOM]  For example, the bounding box with it's left bound at 20,\n     right bound at 100, TOP_bound at 110, BOTTOM bound at 300 is be represented\n     as [20, 110, 100, 300]\n\n",
                      "markdown": "`   boxes1: numpy array, containing a list of bounding boxes in 'corners' format.\n   boxes2: numpy array, containing a list of bounding boxes in 'corners' format.\n     Bounding boxes are expected to be in the corners format of [LEFT, TOP,\n     RIGHT, BOTTOM]  For example, the bounding box with it's left bound at 20,\n     right bound at 100, TOP_bound at 110, BOTTOM bound at 300 is be represented\n     as [20, 110, 100, 300]\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/preprocessors/utils/box_match.py"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 11,
                  "endLine": 43,
                  "endColumn": 15,
                  "snippet": {
                    "text": "    matches_gt: a numpy array with shape [T, G], the matched prediction index\n      at each iou threshold (-1 means unmatched)\n     matches_pred: a numpy array with shape [T, P], the matched ground truth\n      index at each iou threshold (-1 means unmatched)\n   where,\n    T: num of thresholds\n    P: num of predictions\n",
                    "rendered": {
                      "text": "    matches_gt: a numpy array with shape [T, G], the matched prediction index\n      at each iou threshold (-1 means unmatched)\n     matches_pred: a numpy array with shape [T, P], the matched ground truth\n      index at each iou threshold (-1 means unmatched)\n   where,\n    T: num of thresholds\n    P: num of predictions\n",
                      "markdown": "`    matches_gt: a numpy array with shape [T, G], the matched prediction index\n      at each iou threshold (-1 means unmatched)\n     matches_pred: a numpy array with shape [T, P], the matched ground truth\n      index at each iou threshold (-1 means unmatched)\n   where,\n    T: num of thresholds\n    P: num of predictions\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/preprocessors/utils/box_match.py"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 5,
                  "endLine": 41,
                  "endColumn": 9,
                  "snippet": {
                    "text": "  Returns:\n   (matches_gt, matches_pred): a tuple of ndarray of the following,\n    matches_gt: a numpy array with shape [T, G], the matched prediction index\n      at each iou threshold (-1 means unmatched)\n     matches_pred: a numpy array with shape [T, P], the matched ground truth\n      index at each iou threshold (-1 means unmatched)\n   where,\n",
                    "rendered": {
                      "text": "  Returns:\n   (matches_gt, matches_pred): a tuple of ndarray of the following,\n    matches_gt: a numpy array with shape [T, G], the matched prediction index\n      at each iou threshold (-1 means unmatched)\n     matches_pred: a numpy array with shape [T, P], the matched ground truth\n      index at each iou threshold (-1 means unmatched)\n   where,\n",
                      "markdown": "`  Returns:\n   (matches_gt, matches_pred): a tuple of ndarray of the following,\n    matches_gt: a numpy array with shape [T, G], the matched prediction index\n      at each iou threshold (-1 means unmatched)\n     matches_pred: a numpy array with shape [T, P], the matched ground truth\n      index at each iou threshold (-1 means unmatched)\n   where,\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/preprocessors/utils/box_match.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/preprocessors/utils/box_match.py"
                },
                "region": {
                  "startLine": 209,
                  "startColumn": 3,
                  "endLine": 209,
                  "endColumn": 9,
                  "snippet": {
                    "text": "  # Filter ground truth bounding boxes within an area range\n  boxes_gt = bounding_box.filter_boxes_by_area_range(boxes_gt, area_range)\n\n  # Sort predictions with confidence(larger ones first)\n  boxes_pred = bounding_box.sort_boxes_by_confidence(boxes_pred)\n\n  # Limit detection numbers to max_num_detections\n",
                    "rendered": {
                      "text": "  # Filter ground truth bounding boxes within an area range\n  boxes_gt = bounding_box.filter_boxes_by_area_range(boxes_gt, area_range)\n\n  # Sort predictions with confidence(larger ones first)\n  boxes_pred = bounding_box.sort_boxes_by_confidence(boxes_pred)\n\n  # Limit detection numbers to max_num_detections\n",
                      "markdown": "`  # Filter ground truth bounding boxes within an area range\n  boxes_gt = bounding_box.filter_boxes_by_area_range(boxes_gt, area_range)\n\n  # Sort predictions with confidence(larger ones first)\n  boxes_pred = bounding_box.sort_boxes_by_confidence(boxes_pred)\n\n  # Limit detection numbers to max_num_detections\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/preprocessors/utils/box_match.py"
                },
                "region": {
                  "startLine": 68,
                  "startColumn": 5,
                  "endLine": 68,
                  "endColumn": 11,
                  "snippet": {
                    "text": "  matches_pred = -1 * np.ones((num_iou_thresholds, num_pred), dtype=int)\n\n  for i, threshold in enumerate(thresholds):\n    # find the matched ground truth, for each prediction\n    for pred_idx in range(num_pred):\n      # initialize the index of ground truth which will match with the\n      # prediction.\n",
                    "rendered": {
                      "text": "  matches_pred = -1 * np.ones((num_iou_thresholds, num_pred), dtype=int)\n\n  for i, threshold in enumerate(thresholds):\n    # find the matched ground truth, for each prediction\n    for pred_idx in range(num_pred):\n      # initialize the index of ground truth which will match with the\n      # prediction.\n",
                      "markdown": "`  matches_pred = -1 * np.ones((num_iou_thresholds, num_pred), dtype=int)\n\n  for i, threshold in enumerate(thresholds):\n    # find the matched ground truth, for each prediction\n    for pred_idx in range(num_pred):\n      # initialize the index of ground truth which will match with the\n      # prediction.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/multi_class_confusion_matrix_plot"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 46,
                  "endLine": 14,
                  "endColumn": 50,
                  "snippet": {
                    "text": "# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\"\"\"Tests for multi-class confusion matrix plot at thresholds.\"\"\"\n\nfrom absl.testing import parameterized\nimport apache_beam as beam\n",
                    "rendered": {
                      "text": "# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\"\"\"Tests for multi-class confusion matrix plot at thresholds.\"\"\"\n\nfrom absl.testing import parameterized\nimport apache_beam as beam\n",
                      "markdown": "`# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\"\"\"Tests for multi-class confusion matrix plot at thresholds.\"\"\"\n\nfrom absl.testing import parameterized\nimport apache_beam as beam\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/multi_class_confusion_matrix_plot"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/index.js"
                },
                "region": {
                  "startLine": 13575,
                  "startColumn": 8,
                  "endLine": 13575,
                  "endColumn": 13,
                  "snippet": {
                    "text": "     * _.get(object, ['a', '0', 'b', 'c']);\n     * // => 3\n     *\n     * _.get(object, 'a.b.c', 'default');\n     * // => 'default'\n     */\n    function get(object, path, defaultValue) {\n",
                    "rendered": {
                      "text": "     * _.get(object, ['a', '0', 'b', 'c']);\n     * // => 3\n     *\n     * _.get(object, 'a.b.c', 'default');\n     * // => 'default'\n     */\n    function get(object, path, defaultValue) {\n",
                      "markdown": "`     * _.get(object, ['a', '0', 'b', 'c']);\n     * // => 3\n     *\n     * _.get(object, 'a.b.c', 'default');\n     * // => 'default'\n     */\n    function get(object, path, defaultValue) {\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/index.js"
                },
                "region": {
                  "startLine": 13572,
                  "startColumn": 8,
                  "endLine": 13572,
                  "endColumn": 13,
                  "snippet": {
                    "text": "     * _.get(object, 'a[0].b.c');\n     * // => 3\n     *\n     * _.get(object, ['a', '0', 'b', 'c']);\n     * // => 3\n     *\n     * _.get(object, 'a.b.c', 'default');\n",
                    "rendered": {
                      "text": "     * _.get(object, 'a[0].b.c');\n     * // => 3\n     *\n     * _.get(object, ['a', '0', 'b', 'c']);\n     * // => 3\n     *\n     * _.get(object, 'a.b.c', 'default');\n",
                      "markdown": "`     * _.get(object, 'a[0].b.c');\n     * // => 3\n     *\n     * _.get(object, ['a', '0', 'b', 'c']);\n     * // => 3\n     *\n     * _.get(object, 'a.b.c', 'default');\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/index.js"
                },
                "region": {
                  "startLine": 13569,
                  "startColumn": 8,
                  "endLine": 13569,
                  "endColumn": 13,
                  "snippet": {
                    "text": "     *\n     * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n     *\n     * _.get(object, 'a[0].b.c');\n     * // => 3\n     *\n     * _.get(object, ['a', '0', 'b', 'c']);\n",
                    "rendered": {
                      "text": "     *\n     * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n     *\n     * _.get(object, 'a[0].b.c');\n     * // => 3\n     *\n     * _.get(object, ['a', '0', 'b', 'c']);\n",
                      "markdown": "`     *\n     * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n     *\n     * _.get(object, 'a[0].b.c');\n     * // => 3\n     *\n     * _.get(object, ['a', '0', 'b', 'c']);\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/index.js"
                },
                "region": {
                  "startLine": 11002,
                  "startColumn": 22,
                  "endLine": 11002,
                  "endColumn": 27,
                  "snippet": {
                    "text": "            cache = memoized.cache;\n\n        if (cache.has(key)) {\n          return cache.get(key);\n        }\n        var result = func.apply(this, args);\n        memoized.cache = cache.set(key, result) || cache;\n",
                    "rendered": {
                      "text": "            cache = memoized.cache;\n\n        if (cache.has(key)) {\n          return cache.get(key);\n        }\n        var result = func.apply(this, args);\n        memoized.cache = cache.set(key, result) || cache;\n",
                      "markdown": "`            cache = memoized.cache;\n\n        if (cache.has(key)) {\n          return cache.get(key);\n        }\n        var result = func.apply(this, args);\n        memoized.cache = cache.set(key, result) || cache;\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/index.js"
                },
                "region": {
                  "startLine": 6323,
                  "startColumn": 20,
                  "endLine": 6323,
                  "endColumn": 25,
                  "snippet": {
                    "text": "     * @returns {*} Returns the metadata for `func`.\n     */\n    var getData = !metaMap ? noop : function(func) {\n      return metaMap.get(func);\n    };\n\n    /**\n",
                    "rendered": {
                      "text": "     * @returns {*} Returns the metadata for `func`.\n     */\n    var getData = !metaMap ? noop : function(func) {\n      return metaMap.get(func);\n    };\n\n    /**\n",
                      "markdown": "`     * @returns {*} Returns the metadata for `func`.\n     */\n    var getData = !metaMap ? noop : function(func) {\n      return metaMap.get(func);\n    };\n\n    /**\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/index.js"
                },
                "region": {
                  "startLine": 6235,
                  "startColumn": 28,
                  "endLine": 6235,
                  "endColumn": 33,
                  "snippet": {
                    "text": "      }\n      // Check that cyclic values are equal.\n      var objStacked = stack.get(object);\n      var othStacked = stack.get(other);\n      if (objStacked && othStacked) {\n        return objStacked == other && othStacked == object;\n      }\n",
                    "rendered": {
                      "text": "      }\n      // Check that cyclic values are equal.\n      var objStacked = stack.get(object);\n      var othStacked = stack.get(other);\n      if (objStacked && othStacked) {\n        return objStacked == other && othStacked == object;\n      }\n",
                      "markdown": "`      }\n      // Check that cyclic values are equal.\n      var objStacked = stack.get(object);\n      var othStacked = stack.get(other);\n      if (objStacked && othStacked) {\n        return objStacked == other && othStacked == object;\n      }\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/index.js"
                },
                "region": {
                  "startLine": 6234,
                  "startColumn": 28,
                  "endLine": 6234,
                  "endColumn": 33,
                  "snippet": {
                    "text": "        }\n      }\n      // Check that cyclic values are equal.\n      var objStacked = stack.get(object);\n      var othStacked = stack.get(other);\n      if (objStacked && othStacked) {\n        return objStacked == other && othStacked == object;\n",
                    "rendered": {
                      "text": "        }\n      }\n      // Check that cyclic values are equal.\n      var objStacked = stack.get(object);\n      var othStacked = stack.get(other);\n      if (objStacked && othStacked) {\n        return objStacked == other && othStacked == object;\n",
                      "markdown": "`        }\n      }\n      // Check that cyclic values are equal.\n      var objStacked = stack.get(object);\n      var othStacked = stack.get(other);\n      if (objStacked && othStacked) {\n        return objStacked == other && othStacked == object;\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/index.js"
                },
                "region": {
                  "startLine": 6183,
                  "startColumn": 29,
                  "endLine": 6183,
                  "endColumn": 34,
                  "snippet": {
                    "text": "            return false;\n          }\n          // Assume cyclic values are equal.\n          var stacked = stack.get(object);\n          if (stacked) {\n            return stacked == other;\n          }\n",
                    "rendered": {
                      "text": "            return false;\n          }\n          // Assume cyclic values are equal.\n          var stacked = stack.get(object);\n          if (stacked) {\n            return stacked == other;\n          }\n",
                      "markdown": "`            return false;\n          }\n          // Assume cyclic values are equal.\n          var stacked = stack.get(object);\n          if (stacked) {\n            return stacked == other;\n          }\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/index.js"
                },
                "region": {
                  "startLine": 6069,
                  "startColumn": 28,
                  "endLine": 6069,
                  "endColumn": 33,
                  "snippet": {
                    "text": "      }\n      // Check that cyclic values are equal.\n      var arrStacked = stack.get(array);\n      var othStacked = stack.get(other);\n      if (arrStacked && othStacked) {\n        return arrStacked == other && othStacked == array;\n      }\n",
                    "rendered": {
                      "text": "      }\n      // Check that cyclic values are equal.\n      var arrStacked = stack.get(array);\n      var othStacked = stack.get(other);\n      if (arrStacked && othStacked) {\n        return arrStacked == other && othStacked == array;\n      }\n",
                      "markdown": "`      }\n      // Check that cyclic values are equal.\n      var arrStacked = stack.get(array);\n      var othStacked = stack.get(other);\n      if (arrStacked && othStacked) {\n        return arrStacked == other && othStacked == array;\n      }\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/index.js"
                },
                "region": {
                  "startLine": 6068,
                  "startColumn": 28,
                  "endLine": 6068,
                  "endColumn": 33,
                  "snippet": {
                    "text": "        return false;\n      }\n      // Check that cyclic values are equal.\n      var arrStacked = stack.get(array);\n      var othStacked = stack.get(other);\n      if (arrStacked && othStacked) {\n        return arrStacked == other && othStacked == array;\n",
                    "rendered": {
                      "text": "        return false;\n      }\n      // Check that cyclic values are equal.\n      var arrStacked = stack.get(array);\n      var othStacked = stack.get(other);\n      if (arrStacked && othStacked) {\n        return arrStacked == other && othStacked == array;\n",
                      "markdown": "`        return false;\n      }\n      // Check that cyclic values are equal.\n      var arrStacked = stack.get(array);\n      var othStacked = stack.get(other);\n      if (arrStacked && othStacked) {\n        return arrStacked == other && othStacked == array;\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/index.js"
                },
                "region": {
                  "startLine": 4062,
                  "startColumn": 25,
                  "endLine": 4062,
                  "endColumn": 30,
                  "snippet": {
                    "text": "    function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {\n      var objValue = safeGet(object, key),\n          srcValue = safeGet(source, key),\n          stacked = stack.get(srcValue);\n\n      if (stacked) {\n        assignMergeValue(object, key, stacked);\n",
                    "rendered": {
                      "text": "    function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {\n      var objValue = safeGet(object, key),\n          srcValue = safeGet(source, key),\n          stacked = stack.get(srcValue);\n\n      if (stacked) {\n        assignMergeValue(object, key, stacked);\n",
                      "markdown": "`    function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {\n      var objValue = safeGet(object, key),\n          srcValue = safeGet(source, key),\n          stacked = stack.get(srcValue);\n\n      if (stacked) {\n        assignMergeValue(object, key, stacked);\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/index.js"
                },
                "region": {
                  "startLine": 3090,
                  "startColumn": 25,
                  "endLine": 3090,
                  "endColumn": 30,
                  "snippet": {
                    "text": "      }\n      // Check for circular references and return its corresponding clone.\n      stack || (stack = new Stack);\n      var stacked = stack.get(value);\n      if (stacked) {\n        return stacked;\n      }\n",
                    "rendered": {
                      "text": "      }\n      // Check for circular references and return its corresponding clone.\n      stack || (stack = new Stack);\n      var stacked = stack.get(value);\n      if (stacked) {\n        return stacked;\n      }\n",
                      "markdown": "`      }\n      // Check for circular references and return its corresponding clone.\n      stack || (stack = new Stack);\n      var stacked = stack.get(value);\n      if (stacked) {\n        return stacked;\n      }\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/index.js"
                },
                "region": {
                  "startLine": 2750,
                  "startColumn": 26,
                  "endLine": 2750,
                  "endColumn": 31,
                  "snippet": {
                    "text": "     * @returns {*} Returns the entry value.\n     */\n    function stackGet(key) {\n      return this.__data__.get(key);\n    }\n\n    /**\n",
                    "rendered": {
                      "text": "     * @returns {*} Returns the entry value.\n     */\n    function stackGet(key) {\n      return this.__data__.get(key);\n    }\n\n    /**\n",
                      "markdown": "`     * @returns {*} Returns the entry value.\n     */\n    function stackGet(key) {\n      return this.__data__.get(key);\n    }\n\n    /**\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/index.js"
                },
                "region": {
                  "startLine": 2603,
                  "startColumn": 34,
                  "endLine": 2603,
                  "endColumn": 39,
                  "snippet": {
                    "text": "     * @returns {*} Returns the entry value.\n     */\n    function mapCacheGet(key) {\n      return getMapData(this, key).get(key);\n    }\n\n    /**\n",
                    "rendered": {
                      "text": "     * @returns {*} Returns the entry value.\n     */\n    function mapCacheGet(key) {\n      return getMapData(this, key).get(key);\n    }\n\n    /**\n",
                      "markdown": "`     * @returns {*} Returns the entry value.\n     */\n    function mapCacheGet(key) {\n      return getMapData(this, key).get(key);\n    }\n\n    /**\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/index.js"
                },
                "region": {
                  "startLine": 356,
                  "startColumn": 24,
                  "endLine": 356,
                  "endColumn": 29,
                  "snippet": {
                    "text": " */\nconst handleTfmaEvent = (tfmaEvent, view) => {\n  const model = view.model;\n  const jsEvents = model.get('js_events').slice();\n  const detail = tfmaEvent.detail;\n  jsEvents.push({'name': detail.type, 'detail': detail.detail});\n  model.set('js_events', jsEvents);\n",
                    "rendered": {
                      "text": " */\nconst handleTfmaEvent = (tfmaEvent, view) => {\n  const model = view.model;\n  const jsEvents = model.get('js_events').slice();\n  const detail = tfmaEvent.detail;\n  jsEvents.push({'name': detail.type, 'detail': detail.detail});\n  model.set('js_events', jsEvents);\n",
                      "markdown": "` */\nconst handleTfmaEvent = (tfmaEvent, view) => {\n  const model = view.model;\n  const jsEvents = model.get('js_events').slice();\n  const detail = tfmaEvent.detail;\n  jsEvents.push({'name': detail.type, 'detail': detail.detail});\n  model.set('js_events', jsEvents);\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/index.js"
                },
                "region": {
                  "startLine": 345,
                  "startColumn": 43,
                  "endLine": 345,
                  "endColumn": 48,
                  "snippet": {
                    "text": "    this.view_.evalName = this.model.get('evalName');\n  },\n  evalNameCompareChanged_: function() {\n    this.view_.evalNameCompare = this.model.get('evalNameCompare');\n  },\n});\n\n",
                    "rendered": {
                      "text": "    this.view_.evalName = this.model.get('evalName');\n  },\n  evalNameCompareChanged_: function() {\n    this.view_.evalNameCompare = this.model.get('evalNameCompare');\n  },\n});\n\n",
                      "markdown": "`    this.view_.evalName = this.model.get('evalName');\n  },\n  evalNameCompareChanged_: function() {\n    this.view_.evalNameCompare = this.model.get('evalNameCompare');\n  },\n});\n\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/index.js"
                },
                "region": {
                  "startLine": 342,
                  "startColumn": 36,
                  "endLine": 342,
                  "endColumn": 41,
                  "snippet": {
                    "text": "    this.view_.slicingMetricsCompare = this.model.get('slicingMetricsCompare');\n  },\n  evalNameChanged_: function() {\n    this.view_.evalName = this.model.get('evalName');\n  },\n  evalNameCompareChanged_: function() {\n    this.view_.evalNameCompare = this.model.get('evalNameCompare');\n",
                    "rendered": {
                      "text": "    this.view_.slicingMetricsCompare = this.model.get('slicingMetricsCompare');\n  },\n  evalNameChanged_: function() {\n    this.view_.evalName = this.model.get('evalName');\n  },\n  evalNameCompareChanged_: function() {\n    this.view_.evalNameCompare = this.model.get('evalNameCompare');\n",
                      "markdown": "`    this.view_.slicingMetricsCompare = this.model.get('slicingMetricsCompare');\n  },\n  evalNameChanged_: function() {\n    this.view_.evalName = this.model.get('evalName');\n  },\n  evalNameCompareChanged_: function() {\n    this.view_.evalNameCompare = this.model.get('evalNameCompare');\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/index.js"
                },
                "region": {
                  "startLine": 339,
                  "startColumn": 49,
                  "endLine": 339,
                  "endColumn": 54,
                  "snippet": {
                    "text": "    this.view_.slicingMetrics = this.model.get('slicingMetrics');\n  },\n  slicingMetricsCompareChanged_: function() {\n    this.view_.slicingMetricsCompare = this.model.get('slicingMetricsCompare');\n  },\n  evalNameChanged_: function() {\n    this.view_.evalName = this.model.get('evalName');\n",
                    "rendered": {
                      "text": "    this.view_.slicingMetrics = this.model.get('slicingMetrics');\n  },\n  slicingMetricsCompareChanged_: function() {\n    this.view_.slicingMetricsCompare = this.model.get('slicingMetricsCompare');\n  },\n  evalNameChanged_: function() {\n    this.view_.evalName = this.model.get('evalName');\n",
                      "markdown": "`    this.view_.slicingMetrics = this.model.get('slicingMetrics');\n  },\n  slicingMetricsCompareChanged_: function() {\n    this.view_.slicingMetricsCompare = this.model.get('slicingMetricsCompare');\n  },\n  evalNameChanged_: function() {\n    this.view_.evalName = this.model.get('evalName');\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/index.js"
                },
                "region": {
                  "startLine": 336,
                  "startColumn": 42,
                  "endLine": 336,
                  "endColumn": 47,
                  "snippet": {
                    "text": "    });\n  },\n  slicingMetricsChanged_: function() {\n    this.view_.slicingMetrics = this.model.get('slicingMetrics');\n  },\n  slicingMetricsCompareChanged_: function() {\n    this.view_.slicingMetricsCompare = this.model.get('slicingMetricsCompare');\n",
                    "rendered": {
                      "text": "    });\n  },\n  slicingMetricsChanged_: function() {\n    this.view_.slicingMetrics = this.model.get('slicingMetrics');\n  },\n  slicingMetricsCompareChanged_: function() {\n    this.view_.slicingMetricsCompare = this.model.get('slicingMetricsCompare');\n",
                      "markdown": "`    });\n  },\n  slicingMetricsChanged_: function() {\n    this.view_.slicingMetrics = this.model.get('slicingMetrics');\n  },\n  slicingMetricsCompareChanged_: function() {\n    this.view_.slicingMetricsCompare = this.model.get('slicingMetricsCompare');\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/index.js"
                },
                "region": {
                  "startLine": 290,
                  "startColumn": 34,
                  "endLine": 290,
                  "endColumn": 39,
                  "snippet": {
                    "text": "    this.view_.data = this.model.get('data');\n  },\n  configChanged_: function() {\n    this.view_.config = this.model.get('config');\n  },\n});\n\n",
                    "rendered": {
                      "text": "    this.view_.data = this.model.get('data');\n  },\n  configChanged_: function() {\n    this.view_.config = this.model.get('config');\n  },\n});\n\n",
                      "markdown": "`    this.view_.data = this.model.get('data');\n  },\n  configChanged_: function() {\n    this.view_.config = this.model.get('config');\n  },\n});\n\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/index.js"
                },
                "region": {
                  "startLine": 287,
                  "startColumn": 32,
                  "endLine": 287,
                  "endColumn": 37,
                  "snippet": {
                    "text": "    });\n  },\n  dataChanged_: function() {\n    this.view_.data = this.model.get('data');\n  },\n  configChanged_: function() {\n    this.view_.config = this.model.get('config');\n",
                    "rendered": {
                      "text": "    });\n  },\n  dataChanged_: function() {\n    this.view_.data = this.model.get('data');\n  },\n  configChanged_: function() {\n    this.view_.config = this.model.get('config');\n",
                      "markdown": "`    });\n  },\n  dataChanged_: function() {\n    this.view_.data = this.model.get('data');\n  },\n  configChanged_: function() {\n    this.view_.config = this.model.get('config');\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/index.js"
                },
                "region": {
                  "startLine": 255,
                  "startColumn": 34,
                  "endLine": 255,
                  "endColumn": 39,
                  "snippet": {
                    "text": "    this.view_.data = this.model.get('data');\n  },\n  configChanged_: function() {\n    this.view_.config = this.model.get('config');\n  },\n});\n\n",
                    "rendered": {
                      "text": "    this.view_.data = this.model.get('data');\n  },\n  configChanged_: function() {\n    this.view_.config = this.model.get('config');\n  },\n});\n\n",
                      "markdown": "`    this.view_.data = this.model.get('data');\n  },\n  configChanged_: function() {\n    this.view_.config = this.model.get('config');\n  },\n});\n\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/index.js"
                },
                "region": {
                  "startLine": 252,
                  "startColumn": 32,
                  "endLine": 252,
                  "endColumn": 37,
                  "snippet": {
                    "text": "    });\n  },\n  dataChanged_: function() {\n    this.view_.data = this.model.get('data');\n  },\n  configChanged_: function() {\n    this.view_.config = this.model.get('config');\n",
                    "rendered": {
                      "text": "    });\n  },\n  dataChanged_: function() {\n    this.view_.data = this.model.get('data');\n  },\n  configChanged_: function() {\n    this.view_.config = this.model.get('config');\n",
                      "markdown": "`    });\n  },\n  dataChanged_: function() {\n    this.view_.data = this.model.get('data');\n  },\n  configChanged_: function() {\n    this.view_.config = this.model.get('config');\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/index.js"
                },
                "region": {
                  "startLine": 220,
                  "startColumn": 34,
                  "endLine": 220,
                  "endColumn": 39,
                  "snippet": {
                    "text": "    this.view_.data = this.model.get('data');\n  },\n  configChanged_: function() {\n    this.view_.config = this.model.get('config');\n  },\n});\n\n",
                    "rendered": {
                      "text": "    this.view_.data = this.model.get('data');\n  },\n  configChanged_: function() {\n    this.view_.config = this.model.get('config');\n  },\n});\n\n",
                      "markdown": "`    this.view_.data = this.model.get('data');\n  },\n  configChanged_: function() {\n    this.view_.config = this.model.get('config');\n  },\n});\n\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/index.js"
                },
                "region": {
                  "startLine": 217,
                  "startColumn": 32,
                  "endLine": 217,
                  "endColumn": 37,
                  "snippet": {
                    "text": "    });\n  },\n  dataChanged_: function() {\n    this.view_.data = this.model.get('data');\n  },\n  configChanged_: function() {\n    this.view_.config = this.model.get('config');\n",
                    "rendered": {
                      "text": "    });\n  },\n  dataChanged_: function() {\n    this.view_.data = this.model.get('data');\n  },\n  configChanged_: function() {\n    this.view_.config = this.model.get('config');\n",
                      "markdown": "`    });\n  },\n  dataChanged_: function() {\n    this.view_.data = this.model.get('data');\n  },\n  configChanged_: function() {\n    this.view_.config = this.model.get('config');\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/index.js"
                },
                "region": {
                  "startLine": 13176,
                  "startColumn": 7,
                  "endLine": 13176,
                  "endColumn": 11,
                  "snippet": {
                    "text": "     * _.at(object, ['a[0].b.c', 'a[1]']);\n     * // => [3, 4]\n     */\n    var at = flatRest(baseAt);\n\n    /**\n     * Creates an object that inherits from the `prototype` object. If a\n",
                    "rendered": {
                      "text": "     * _.at(object, ['a[0].b.c', 'a[1]']);\n     * // => [3, 4]\n     */\n    var at = flatRest(baseAt);\n\n    /**\n     * Creates an object that inherits from the `prototype` object. If a\n",
                      "markdown": "`     * _.at(object, ['a[0].b.c', 'a[1]']);\n     * // => [3, 4]\n     */\n    var at = flatRest(baseAt);\n\n    /**\n     * Creates an object that inherits from the `prototype` object. If a\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/index.js"
                },
                "region": {
                  "startLine": 10853,
                  "startColumn": 11,
                  "endLine": 10853,
                  "endColumn": 17,
                  "snippet": {
                    "text": "      }\n\n      function debounced() {\n        var time = now(),\n            isInvoking = shouldInvoke(time);\n\n        lastArgs = arguments;\n",
                    "rendered": {
                      "text": "      }\n\n      function debounced() {\n        var time = now(),\n            isInvoking = shouldInvoke(time);\n\n        lastArgs = arguments;\n",
                      "markdown": "`      }\n\n      function debounced() {\n        var time = now(),\n            isInvoking = shouldInvoke(time);\n\n        lastArgs = arguments;\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/index.js"
                },
                "region": {
                  "startLine": 10820,
                  "startColumn": 11,
                  "endLine": 10820,
                  "endColumn": 17,
                  "snippet": {
                    "text": "      }\n\n      function timerExpired() {\n        var time = now();\n        if (shouldInvoke(time)) {\n          return trailingEdge(time);\n        }\n",
                    "rendered": {
                      "text": "      }\n\n      function timerExpired() {\n        var time = now();\n        if (shouldInvoke(time)) {\n          return trailingEdge(time);\n        }\n",
                      "markdown": "`      }\n\n      function timerExpired() {\n        var time = now();\n        if (shouldInvoke(time)) {\n          return trailingEdge(time);\n        }\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/index.js"
                },
                "region": {
                  "startLine": 10810,
                  "startColumn": 33,
                  "endLine": 10810,
                  "endColumn": 39,
                  "snippet": {
                    "text": "\n      function shouldInvoke(time) {\n        var timeSinceLastCall = time - lastCallTime,\n            timeSinceLastInvoke = time - lastInvokeTime;\n\n        // Either this is the first call, activity has stopped and we're at the\n        // trailing edge, the system time has gone backwards and we're treating\n",
                    "rendered": {
                      "text": "\n      function shouldInvoke(time) {\n        var timeSinceLastCall = time - lastCallTime,\n            timeSinceLastInvoke = time - lastInvokeTime;\n\n        // Either this is the first call, activity has stopped and we're at the\n        // trailing edge, the system time has gone backwards and we're treating\n",
                      "markdown": "`\n      function shouldInvoke(time) {\n        var timeSinceLastCall = time - lastCallTime,\n            timeSinceLastInvoke = time - lastInvokeTime;\n\n        // Either this is the first call, activity has stopped and we're at the\n        // trailing edge, the system time has gone backwards and we're treating\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/index.js"
                },
                "region": {
                  "startLine": 10809,
                  "startColumn": 31,
                  "endLine": 10809,
                  "endColumn": 37,
                  "snippet": {
                    "text": "      }\n\n      function shouldInvoke(time) {\n        var timeSinceLastCall = time - lastCallTime,\n            timeSinceLastInvoke = time - lastInvokeTime;\n\n        // Either this is the first call, activity has stopped and we're at the\n",
                    "rendered": {
                      "text": "      }\n\n      function shouldInvoke(time) {\n        var timeSinceLastCall = time - lastCallTime,\n            timeSinceLastInvoke = time - lastInvokeTime;\n\n        // Either this is the first call, activity has stopped and we're at the\n",
                      "markdown": "`      }\n\n      function shouldInvoke(time) {\n        var timeSinceLastCall = time - lastCallTime,\n            timeSinceLastInvoke = time - lastInvokeTime;\n\n        // Either this is the first call, activity has stopped and we're at the\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/index.js"
                },
                "region": {
                  "startLine": 10800,
                  "startColumn": 33,
                  "endLine": 10800,
                  "endColumn": 39,
                  "snippet": {
                    "text": "\n      function remainingWait(time) {\n        var timeSinceLastCall = time - lastCallTime,\n            timeSinceLastInvoke = time - lastInvokeTime,\n            timeWaiting = wait - timeSinceLastCall;\n\n        return maxing\n",
                    "rendered": {
                      "text": "\n      function remainingWait(time) {\n        var timeSinceLastCall = time - lastCallTime,\n            timeSinceLastInvoke = time - lastInvokeTime,\n            timeWaiting = wait - timeSinceLastCall;\n\n        return maxing\n",
                      "markdown": "`\n      function remainingWait(time) {\n        var timeSinceLastCall = time - lastCallTime,\n            timeSinceLastInvoke = time - lastInvokeTime,\n            timeWaiting = wait - timeSinceLastCall;\n\n        return maxing\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/index.js"
                },
                "region": {
                  "startLine": 10799,
                  "startColumn": 31,
                  "endLine": 10799,
                  "endColumn": 37,
                  "snippet": {
                    "text": "      }\n\n      function remainingWait(time) {\n        var timeSinceLastCall = time - lastCallTime,\n            timeSinceLastInvoke = time - lastInvokeTime,\n            timeWaiting = wait - timeSinceLastCall;\n\n",
                    "rendered": {
                      "text": "      }\n\n      function remainingWait(time) {\n        var timeSinceLastCall = time - lastCallTime,\n            timeSinceLastInvoke = time - lastInvokeTime,\n            timeWaiting = wait - timeSinceLastCall;\n\n",
                      "markdown": "`      }\n\n      function remainingWait(time) {\n        var timeSinceLastCall = time - lastCallTime,\n            timeSinceLastInvoke = time - lastInvokeTime,\n            timeWaiting = wait - timeSinceLastCall;\n\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/index.js"
                },
                "region": {
                  "startLine": 9664,
                  "startColumn": 7,
                  "endLine": 9664,
                  "endColumn": 13,
                  "snippet": {
                    "text": "     * _.find(users, 'active');\n     * // => object for 'barney'\n     */\n    var find = createFind(findIndex);\n\n    /**\n     * This method is like `_.find` except that it iterates over elements of\n",
                    "rendered": {
                      "text": "     * _.find(users, 'active');\n     * // => object for 'barney'\n     */\n    var find = createFind(findIndex);\n\n    /**\n     * This method is like `_.find` except that it iterates over elements of\n",
                      "markdown": "`     * _.find(users, 'active');\n     * // => object for 'barney'\n     */\n    var find = createFind(findIndex);\n\n    /**\n     * This method is like `_.find` except that it iterates over elements of\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/index.js"
                },
                "region": {
                  "startLine": 153,
                  "startColumn": 9,
                  "endLine": 153,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\n  // If the vulcanizes tempalets are not loaded yet, load it now.\n  if (!document.querySelector('script[src=\"' + templateLocation + '\"]')) {\n    const script = document.createElement('script');\n    script.setAttribute('src', templateLocation);\n    document.head.appendChild(script);\n  }\n",
                    "rendered": {
                      "text": "\n  // If the vulcanizes tempalets are not loaded yet, load it now.\n  if (!document.querySelector('script[src=\"' + templateLocation + '\"]')) {\n    const script = document.createElement('script');\n    script.setAttribute('src', templateLocation);\n    document.head.appendChild(script);\n  }\n",
                      "markdown": "`\n  // If the vulcanizes tempalets are not loaded yet, load it now.\n  if (!document.querySelector('script[src=\"' + templateLocation + '\"]')) {\n    const script = document.createElement('script');\n    script.setAttribute('src', templateLocation);\n    document.head.appendChild(script);\n  }\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/notebook/jupyter/tfma_widget/widget.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/notebook/jupyter/tfma_widget/widget.py"
                },
                "region": {
                  "startLine": 64,
                  "startColumn": 8,
                  "endLine": 64,
                  "endColumn": 14,
                  "snippet": {
                    "text": "\n@widgets.register\nclass PlotViewer(widgets.DOMWidget):\n  \"\"\"The time series visualization widget.\"\"\"\n  _view_name = traitlets.Unicode('PlotView').tag(sync=True)\n  _model_name = traitlets.Unicode('PlotModel').tag(sync=True)\n  _view_module = traitlets.Unicode('tensorflow_model_analysis').tag(sync=True)\n",
                    "rendered": {
                      "text": "\n@widgets.register\nclass PlotViewer(widgets.DOMWidget):\n  \"\"\"The time series visualization widget.\"\"\"\n  _view_name = traitlets.Unicode('PlotView').tag(sync=True)\n  _model_name = traitlets.Unicode('PlotModel').tag(sync=True)\n  _view_module = traitlets.Unicode('tensorflow_model_analysis').tag(sync=True)\n",
                      "markdown": "`\n@widgets.register\nclass PlotViewer(widgets.DOMWidget):\n  \"\"\"The time series visualization widget.\"\"\"\n  _view_name = traitlets.Unicode('PlotView').tag(sync=True)\n  _model_name = traitlets.Unicode('PlotModel').tag(sync=True)\n  _view_module = traitlets.Unicode('tensorflow_model_analysis').tag(sync=True)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/notebook/jupyter/tfma_widget/widget.py"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 8,
                  "endLine": 51,
                  "endColumn": 14,
                  "snippet": {
                    "text": "\n@widgets.register\nclass TimeSeriesViewer(widgets.DOMWidget):\n  \"\"\"The time series visualization widget.\"\"\"\n  _view_name = traitlets.Unicode('TimeSeriesView').tag(sync=True)\n  _model_name = traitlets.Unicode('TimeSeriesModel').tag(sync=True)\n  _view_module = traitlets.Unicode('tensorflow_model_analysis').tag(sync=True)\n",
                    "rendered": {
                      "text": "\n@widgets.register\nclass TimeSeriesViewer(widgets.DOMWidget):\n  \"\"\"The time series visualization widget.\"\"\"\n  _view_name = traitlets.Unicode('TimeSeriesView').tag(sync=True)\n  _model_name = traitlets.Unicode('TimeSeriesModel').tag(sync=True)\n  _view_module = traitlets.Unicode('tensorflow_model_analysis').tag(sync=True)\n",
                      "markdown": "`\n@widgets.register\nclass TimeSeriesViewer(widgets.DOMWidget):\n  \"\"\"The time series visualization widget.\"\"\"\n  _view_name = traitlets.Unicode('TimeSeriesView').tag(sync=True)\n  _model_name = traitlets.Unicode('TimeSeriesModel').tag(sync=True)\n  _view_module = traitlets.Unicode('tensorflow_model_analysis').tag(sync=True)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/semantic_segmentation_confusion_m"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/preprocessors/utils/bounding_box_"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/preprocessors/utils/bounding_box_"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 58,
                  "endLine": 39,
                  "endColumn": 63,
                  "snippet": {
                    "text": "  def test_input_value_check_bounding_box_area(self):\n    boxes = np.array([[20, 300, 60, 290]])\n    expected_exception = ValueError\n    expected_regex = 'The BOTTOM boundary is less than the TOP boundary '\n    self.assertRaisesRegex(expected_exception, expected_regex,\n                           bounding_box.bounding_box_area, boxes)\n\n",
                    "rendered": {
                      "text": "  def test_input_value_check_bounding_box_area(self):\n    boxes = np.array([[20, 300, 60, 290]])\n    expected_exception = ValueError\n    expected_regex = 'The BOTTOM boundary is less than the TOP boundary '\n    self.assertRaisesRegex(expected_exception, expected_regex,\n                           bounding_box.bounding_box_area, boxes)\n\n",
                      "markdown": "`  def test_input_value_check_bounding_box_area(self):\n    boxes = np.array([[20, 300, 60, 290]])\n    expected_exception = ValueError\n    expected_regex = 'The BOTTOM boundary is less than the TOP boundary '\n    self.assertRaisesRegex(expected_exception, expected_regex,\n                           bounding_box.bounding_box_area, boxes)\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/multi_class_confusion_matrix_plot"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 28,
                  "endLine": 34,
                  "endColumn": 32,
                  "snippet": {
                    "text": "  predicted classes.\n\n  The inputs are assumed to contain a single positive label per example (i.e.\n  only one class can be true at a time) while the predictions are assumed to sum\n  to 1.0.\n  \"\"\"\n\n",
                    "rendered": {
                      "text": "  predicted classes.\n\n  The inputs are assumed to contain a single positive label per example (i.e.\n  only one class can be true at a time) while the predictions are assumed to sum\n  to 1.0.\n  \"\"\"\n\n",
                      "markdown": "`  predicted classes.\n\n  The inputs are assumed to contain a single positive label per example (i.e.\n  only one class can be true at a time) while the predictions are assumed to sum\n  to 1.0.\n  \"\"\"\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/multi_class_confusion_matrix_plot"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 36,
                  "endLine": 14,
                  "endColumn": 40,
                  "snippet": {
                    "text": "# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\"\"\"Multi-class confusion matrix plot at thresholds.\"\"\"\n\nfrom typing import Dict, List, Optional\n\n",
                    "rendered": {
                      "text": "# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\"\"\"Multi-class confusion matrix plot at thresholds.\"\"\"\n\nfrom typing import Dict, List, Optional\n\n",
                      "markdown": "`# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\"\"\"Multi-class confusion matrix plot at thresholds.\"\"\"\n\nfrom typing import Dict, List, Optional\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/multi_class_confusion_matrix_plot"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/multi_class_confusion_matrix_plot"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 45,
                  "endLine": 45,
                  "endColumn": 50,
                  "snippet": {
                    "text": "    \"\"\"Initializes multi-class confusion matrix.\n\n    Args:\n      thresholds: Optional thresholds. If the top prediction is less than a\n        threshold then the associated example will be assumed to have no\n        prediction associated with it (the predicted_class_id will be set to\n        tfma.metrics.NO_PREDICTED_CLASS_ID). Only one of\n",
                    "rendered": {
                      "text": "    \"\"\"Initializes multi-class confusion matrix.\n\n    Args:\n      thresholds: Optional thresholds. If the top prediction is less than a\n        threshold then the associated example will be assumed to have no\n        prediction associated with it (the predicted_class_id will be set to\n        tfma.metrics.NO_PREDICTED_CLASS_ID). Only one of\n",
                      "markdown": "`    \"\"\"Initializes multi-class confusion matrix.\n\n    Args:\n      thresholds: Optional thresholds. If the top prediction is less than a\n        threshold then the associated example will be assumed to have no\n        prediction associated with it (the predicted_class_id will be set to\n        tfma.metrics.NO_PREDICTED_CLASS_ID). Only one of\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 166,
                  "startColumn": 180,
                  "endLine": 166,
                  "endColumn": 186,
                  "snippet": {
                    "text": ";r||(r=document.implementation.createHTMLDocument(\"temp\"),R.Eb=r,r.Pa=r.createElement(\"base\"),r.head.appendChild(r.Pa),\nr.Oa=r.createElement(\"a\"));r.Pa.href=q;r.Oa.href=m;return r.Oa.href||m}},na={async:!0,load:function(m,q,r){if(m)if(m.match(/^data:/)){m=m.split(\",\");var v=m[1];v=-1<m[0].indexOf(\";base64\")?atob(v):decodeURIComponent(v);q(v)}else{var C=new XMLHttpRequest;C.open(\"GET\",m,na.async);C.onload=function(){var y,E=null!=(y=C.responseURL||C.getResponseHeader(\"Location\"))?y:void 0;E&&0===E.indexOf(\"/\")&&(E=(location.origin||location.protocol+\"//\"+location.host)+E);y=C.response||C.responseText",
                    "rendered": {
                      "text": ";r||(r=document.implementation.createHTMLDocument(\"temp\"),R.Eb=r,r.Pa=r.createElement(\"base\"),r.head.appendChild(r.Pa),\nr.Oa=r.createElement(\"a\"));r.Pa.href=q;r.Oa.href=m;return r.Oa.href||m}},na={async:!0,load:function(m,q,r){if(m)if(m.match(/^data:/)){m=m.split(\",\");var v=m[1];v=-1<m[0].indexOf(\";base64\")?atob(v):decodeURIComponent(v);q(v)}else{var C=new XMLHttpRequest;C.open(\"GET\",m,na.async);C.onload=function(){var y,E=null!=(y=C.responseURL||C.getResponseHeader(\"Location\"))?y:void 0;E&&0===E.indexOf(\"/\")&&(E=(location.origin||location.protocol+\"//\"+location.host)+E);y=C.response||C.responseText",
                      "markdown": "`;r||(r=document.implementation.createHTMLDocument(\"temp\"),R.Eb=r,r.Pa=r.createElement(\"base\"),r.head.appendChild(r.Pa),\nr.Oa=r.createElement(\"a\"));r.Pa.href=q;r.Oa.href=m;return r.Oa.href||m}},na={async:!0,load:function(m,q,r){if(m)if(m.match(/^data:/)){m=m.split(\",\");var v=m[1];v=-1<m[0].indexOf(\";base64\")?atob(v):decodeURIComponent(v);q(v)}else{var C=new XMLHttpRequest;C.open(\"GET\",m,na.async);C.onload=function(){var y,E=null!=(y=C.responseURL||C.getResponseHeader(\"Location\"))?y:void 0;E&&0===E.indexOf(\"/\")&&(E=(location.origin||location.protocol+\"//\"+location.host)+E);y=C.response||C.responseText`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 812,
                  "startColumn": 9,
                  "endLine": 812,
                  "endColumn": 1547,
                  "snippet": {
                    "text": "ac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4\")),\nUu=bf(ka(\"0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921\")),\nsn=Math.abs,Ia=Math.atan2,ec=Math.cos,us=Math.max,Yh=Math.min,pb=Math.sin,Dc=Math.sqrt,Kb=Math.PI,cf=Kb/2,Lb=2*Kb;Dl.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){(this._line||0!==this._line&&1===this._poin",
                    "rendered": {
                      "text": "ac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4\")),\nUu=bf(ka(\"0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921\")),\nsn=Math.abs,Ia=Math.atan2,ec=Math.cos,us=Math.max,Yh=Math.min,pb=Math.sin,Dc=Math.sqrt,Kb=Math.PI,cf=Kb/2,Lb=2*Kb;Dl.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){(this._line||0!==this._line&&1===this._poin",
                      "markdown": "`ac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4\")),\nUu=bf(ka(\"0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921\")),\nsn=Math.abs,Ia=Math.atan2,ec=Math.cos,us=Math.max,Yh=Math.min,pb=Math.sin,Dc=Math.sqrt,Kb=Math.PI,cf=Kb/2,Lb=2*Kb;Dl.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){(this._line||0!==this._line&&1===this._poin`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 811,
                  "startColumn": 9,
                  "endLine": 811,
                  "endColumn": 1547,
                  "snippet": {
                    "text": "a772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf\")),\nTu=bf(ka(\"00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4\")),\nUu=bf(ka(\"0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400",
                    "rendered": {
                      "text": "a772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf\")),\nTu=bf(ka(\"00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4\")),\nUu=bf(ka(\"0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400",
                      "markdown": "`a772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf\")),\nTu=bf(ka(\"00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4\")),\nUu=bf(ka(\"0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 810,
                  "startColumn": 9,
                  "endLine": 810,
                  "endColumn": 1547,
                  "snippet": {
                    "text": "d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725\")),\nSu=bf(ka(\"00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf\")),\nTu=bf(ka(\"00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09",
                    "rendered": {
                      "text": "d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725\")),\nSu=bf(ka(\"00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf\")),\nTu=bf(ka(\"00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09",
                      "markdown": "`d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725\")),\nSu=bf(ka(\"00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf\")),\nTu=bf(ka(\"00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 809,
                  "startColumn": 99,
                  "endLine": 809,
                  "endColumn": 1637,
                  "snippet": {
                    "text": "018c2d04\",\"fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d948018c2d04\",\"fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d94801a636037f2704\").map(ka),Lu=ua(rn),Mu=rf(db(300,.5,0),db(-240,.5,1)),Nu=rf(db(-100,.75,.35),db(80,\n1.5,.8)),Ou=rf(db(260,.75,.35),db(80,1.5,.8)),zf=db(),Af=hc(),Pu=Math.PI/3,Qu=2*Math.PI/3,Ru=bf(ka(\"44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725\")),\nSu=bf(ka(\"00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f11633111653310673410",
                    "rendered": {
                      "text": "018c2d04\",\"fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d948018c2d04\",\"fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d94801a636037f2704\").map(ka),Lu=ua(rn),Mu=rf(db(300,.5,0),db(-240,.5,1)),Nu=rf(db(-100,.75,.35),db(80,\n1.5,.8)),Ou=rf(db(260,.75,.35),db(80,1.5,.8)),zf=db(),Af=hc(),Pu=Math.PI/3,Qu=2*Math.PI/3,Ru=bf(ka(\"44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725\")),\nSu=bf(ka(\"00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f11633111653310673410",
                      "markdown": "`018c2d04\",\"fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d948018c2d04\",\"fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d94801a636037f2704\").map(ka),Lu=ua(rn),Mu=rf(db(300,.5,0),db(-240,.5,1)),Nu=rf(db(-100,.75,.35),db(80,\n1.5,.8)),Ou=rf(db(260,.75,.35),db(80,1.5,.8)),zf=db(),Af=hc(),Pu=Math.PI/3,Qu=2*Math.PI/3,Ru=bf(ka(\"44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725\")),\nSu=bf(ka(\"00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f11633111653310673410`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 808,
                  "startColumn": 362,
                  "endLine": 808,
                  "endColumn": 418,
                  "snippet": {
                    "text": "d2fcbba1fc9272fb6a4aef3b2ccb181da50f1567000d\").map(ka),Ku=ua(qn),rn=Array(3).concat(\"fee6cefdae6be6550d\",\"feeddefdbe85fd8d3cd94701\",\"feeddefdbe85fd8d3ce6550da63603\",\"feeddefdd0a2fdae6bfd8d3ce6550da63603\",\"feeddefdd0a2fdae6bfd8d3cf16913d948018c2d04\",\"fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d948018c2d04\",\"fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d94801a636037f2704\").map(ka),Lu=ua(rn),Mu=rf(db(300,.5,0),db(-240,.5,1)),Nu=rf(db(-100,.75,.35),db(80,\n1.5,.8)),Ou=rf(db(260,.75,.35),db(80,1.5,.8)),zf=db(),Af=hc(),Pu=Math.PI/3,Qu=2*Math.PI/3,Ru=bf(ka(\"44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d48",
                    "rendered": {
                      "text": "d2fcbba1fc9272fb6a4aef3b2ccb181da50f1567000d\").map(ka),Ku=ua(qn),rn=Array(3).concat(\"fee6cefdae6be6550d\",\"feeddefdbe85fd8d3cd94701\",\"feeddefdbe85fd8d3ce6550da63603\",\"feeddefdd0a2fdae6bfd8d3ce6550da63603\",\"feeddefdd0a2fdae6bfd8d3cf16913d948018c2d04\",\"fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d948018c2d04\",\"fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d94801a636037f2704\").map(ka),Lu=ua(rn),Mu=rf(db(300,.5,0),db(-240,.5,1)),Nu=rf(db(-100,.75,.35),db(80,\n1.5,.8)),Ou=rf(db(260,.75,.35),db(80,1.5,.8)),zf=db(),Af=hc(),Pu=Math.PI/3,Qu=2*Math.PI/3,Ru=bf(ka(\"44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d48",
                      "markdown": "`d2fcbba1fc9272fb6a4aef3b2ccb181da50f1567000d\").map(ka),Ku=ua(qn),rn=Array(3).concat(\"fee6cefdae6be6550d\",\"feeddefdbe85fd8d3cd94701\",\"feeddefdbe85fd8d3ce6550da63603\",\"feeddefdd0a2fdae6bfd8d3ce6550da63603\",\"feeddefdd0a2fdae6bfd8d3cf16913d948018c2d04\",\"fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d948018c2d04\",\"fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d94801a636037f2704\").map(ka),Lu=ua(rn),Mu=rf(db(300,.5,0),db(-240,.5,1)),Nu=rf(db(-100,.75,.35),db(80,\n1.5,.8)),Ou=rf(db(260,.75,.35),db(80,1.5,.8)),zf=db(),Af=hc(),Pu=Math.PI/3,Qu=2*Math.PI/3,Ru=bf(ka(\"44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d48`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 808,
                  "startColumn": 311,
                  "endLine": 808,
                  "endColumn": 361,
                  "snippet": {
                    "text": "d2fcbba1fc9272fb6a4aef3b2ccb181d99000d\",\"fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181da50f1567000d\").map(ka),Ku=ua(qn),rn=Array(3).concat(\"fee6cefdae6be6550d\",\"feeddefdbe85fd8d3cd94701\",\"feeddefdbe85fd8d3ce6550da63603\",\"feeddefdd0a2fdae6bfd8d3ce6550da63603\",\"feeddefdd0a2fdae6bfd8d3cf16913d948018c2d04\",\"fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d948018c2d04\",\"fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d94801a636037f2704\").map(ka),Lu=ua(rn),Mu=rf(db(300,.5,0),db(-240,.5,1)),Nu=rf(db(-100,.75,.35),db(80,\n1.5,.8)),Ou=rf(db(260,.75,.35),db(80,1.5,.8)),zf=db(),Af=hc(),Pu=Math.PI/3,Qu=2*Math.PI/3,Ru=bf(ka(\"44015444025645045745055946075a46085c460a5d460b5e470d60470e6",
                    "rendered": {
                      "text": "d2fcbba1fc9272fb6a4aef3b2ccb181d99000d\",\"fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181da50f1567000d\").map(ka),Ku=ua(qn),rn=Array(3).concat(\"fee6cefdae6be6550d\",\"feeddefdbe85fd8d3cd94701\",\"feeddefdbe85fd8d3ce6550da63603\",\"feeddefdd0a2fdae6bfd8d3ce6550da63603\",\"feeddefdd0a2fdae6bfd8d3cf16913d948018c2d04\",\"fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d948018c2d04\",\"fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d94801a636037f2704\").map(ka),Lu=ua(rn),Mu=rf(db(300,.5,0),db(-240,.5,1)),Nu=rf(db(-100,.75,.35),db(80,\n1.5,.8)),Ou=rf(db(260,.75,.35),db(80,1.5,.8)),zf=db(),Af=hc(),Pu=Math.PI/3,Qu=2*Math.PI/3,Ru=bf(ka(\"44015444025645045745055946075a46085c460a5d460b5e470d60470e6",
                      "markdown": "`d2fcbba1fc9272fb6a4aef3b2ccb181d99000d\",\"fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181da50f1567000d\").map(ka),Ku=ua(qn),rn=Array(3).concat(\"fee6cefdae6be6550d\",\"feeddefdbe85fd8d3cd94701\",\"feeddefdbe85fd8d3ce6550da63603\",\"feeddefdd0a2fdae6bfd8d3ce6550da63603\",\"feeddefdd0a2fdae6bfd8d3cf16913d948018c2d04\",\"fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d948018c2d04\",\"fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d94801a636037f2704\").map(ka),Lu=ua(rn),Mu=rf(db(300,.5,0),db(-240,.5,1)),Nu=rf(db(-100,.75,.35),db(80,\n1.5,.8)),Ou=rf(db(260,.75,.35),db(80,1.5,.8)),zf=db(),Af=hc(),Pu=Math.PI/3,Qu=2*Math.PI/3,Ru=bf(ka(\"44015444025645045745055946075a46085c460a5d460b5e470d60470e6`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 808,
                  "startColumn": 266,
                  "endLine": 808,
                  "endColumn": 310,
                  "snippet": {
                    "text": "1fc9272fb6a4aef3b2ccb181d99000d\",\n\"fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181d99000d\",\"fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181da50f1567000d\").map(ka),Ku=ua(qn),rn=Array(3).concat(\"fee6cefdae6be6550d\",\"feeddefdbe85fd8d3cd94701\",\"feeddefdbe85fd8d3ce6550da63603\",\"feeddefdd0a2fdae6bfd8d3ce6550da63603\",\"feeddefdd0a2fdae6bfd8d3cf16913d948018c2d04\",\"fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d948018c2d04\",\"fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d94801a636037f2704\").map(ka),Lu=ua(rn),Mu=rf(db(300,.5,0),db(-240,.5,1)),Nu=rf(db(-100,.75,.35),db(80,\n1.5,.8)),Ou=rf(db(260,.75,.35),db(80,1.5,.8)),zf=db(),Af=hc(),Pu=Math.PI/3,Qu=2*Math.PI/3,Ru=bf(ka(\"44015444",
                    "rendered": {
                      "text": "1fc9272fb6a4aef3b2ccb181d99000d\",\n\"fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181d99000d\",\"fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181da50f1567000d\").map(ka),Ku=ua(qn),rn=Array(3).concat(\"fee6cefdae6be6550d\",\"feeddefdbe85fd8d3cd94701\",\"feeddefdbe85fd8d3ce6550da63603\",\"feeddefdd0a2fdae6bfd8d3ce6550da63603\",\"feeddefdd0a2fdae6bfd8d3cf16913d948018c2d04\",\"fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d948018c2d04\",\"fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d94801a636037f2704\").map(ka),Lu=ua(rn),Mu=rf(db(300,.5,0),db(-240,.5,1)),Nu=rf(db(-100,.75,.35),db(80,\n1.5,.8)),Ou=rf(db(260,.75,.35),db(80,1.5,.8)),zf=db(),Af=hc(),Pu=Math.PI/3,Qu=2*Math.PI/3,Ru=bf(ka(\"44015444",
                      "markdown": "`1fc9272fb6a4aef3b2ccb181d99000d\",\n\"fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181d99000d\",\"fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181da50f1567000d\").map(ka),Ku=ua(qn),rn=Array(3).concat(\"fee6cefdae6be6550d\",\"feeddefdbe85fd8d3cd94701\",\"feeddefdbe85fd8d3ce6550da63603\",\"feeddefdd0a2fdae6bfd8d3ce6550da63603\",\"feeddefdd0a2fdae6bfd8d3cf16913d948018c2d04\",\"fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d948018c2d04\",\"fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d94801a636037f2704\").map(ka),Lu=ua(rn),Mu=rf(db(300,.5,0),db(-240,.5,1)),Nu=rf(db(-100,.75,.35),db(80,\n1.5,.8)),Ou=rf(db(260,.75,.35),db(80,1.5,.8)),zf=db(),Af=hc(),Pu=Math.PI/3,Qu=2*Math.PI/3,Ru=bf(ka(\"44015444`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 808,
                  "startColumn": 51,
                  "endLine": 808,
                  "endColumn": 107,
                  "snippet": {
                    "text": "5dadaebbcbddc9e9ac8807dba6a51a354278f3f007d\").map(ka),Ju=ua(pn),qn=Array(3).concat(\"fee0d2fc9272de2d26\",\"fee5d9fcae91fb6a4acb181d\",\"fee5d9fcae91fb6a4ade2d26a50f15\",\"fee5d9fcbba1fc9272fb6a4ade2d26a50f15\",\"fee5d9fcbba1fc9272fb6a4aef3b2ccb181d99000d\",\n\"fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181d99000d\",\"fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181da50f1567000d\").map(ka),Ku=ua(qn),rn=Array(3).concat(\"fee6cefdae6be6550d\",\"feeddefdbe85fd8d3cd94701\",\"feeddefdbe85fd8d3ce6550da63603\",\"feeddefdd0a2fdae6bfd8d3ce6550da63603\",\"feeddefdd0a2fdae6bfd8d3cf16913d948018c2d04\",\"fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d948018c2d04\",\"fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d94801a6",
                    "rendered": {
                      "text": "5dadaebbcbddc9e9ac8807dba6a51a354278f3f007d\").map(ka),Ju=ua(pn),qn=Array(3).concat(\"fee0d2fc9272de2d26\",\"fee5d9fcae91fb6a4acb181d\",\"fee5d9fcae91fb6a4ade2d26a50f15\",\"fee5d9fcbba1fc9272fb6a4ade2d26a50f15\",\"fee5d9fcbba1fc9272fb6a4aef3b2ccb181d99000d\",\n\"fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181d99000d\",\"fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181da50f1567000d\").map(ka),Ku=ua(qn),rn=Array(3).concat(\"fee6cefdae6be6550d\",\"feeddefdbe85fd8d3cd94701\",\"feeddefdbe85fd8d3ce6550da63603\",\"feeddefdd0a2fdae6bfd8d3ce6550da63603\",\"feeddefdd0a2fdae6bfd8d3cf16913d948018c2d04\",\"fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d948018c2d04\",\"fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d94801a6",
                      "markdown": "`5dadaebbcbddc9e9ac8807dba6a51a354278f3f007d\").map(ka),Ju=ua(pn),qn=Array(3).concat(\"fee0d2fc9272de2d26\",\"fee5d9fcae91fb6a4acb181d\",\"fee5d9fcae91fb6a4ade2d26a50f15\",\"fee5d9fcbba1fc9272fb6a4ade2d26a50f15\",\"fee5d9fcbba1fc9272fb6a4aef3b2ccb181d99000d\",\n\"fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181d99000d\",\"fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181da50f1567000d\").map(ka),Ku=ua(qn),rn=Array(3).concat(\"fee6cefdae6be6550d\",\"feeddefdbe85fd8d3cd94701\",\"feeddefdbe85fd8d3ce6550da63603\",\"feeddefdd0a2fdae6bfd8d3ce6550da63603\",\"feeddefdd0a2fdae6bfd8d3cf16913d948018c2d04\",\"fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d948018c2d04\",\"fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d94801a6`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 808,
                  "endLine": 808,
                  "endColumn": 50,
                  "snippet": {
                    "text": "5dadaebbcbddc9e9ac8807dba6a51a34a1486\",\"fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a354278f3f007d\").map(ka),Ju=ua(pn),qn=Array(3).concat(\"fee0d2fc9272de2d26\",\"fee5d9fcae91fb6a4acb181d\",\"fee5d9fcae91fb6a4ade2d26a50f15\",\"fee5d9fcbba1fc9272fb6a4ade2d26a50f15\",\"fee5d9fcbba1fc9272fb6a4aef3b2ccb181d99000d\",\n\"fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181d99000d\",\"fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181da50f1567000d\").map(ka),Ku=ua(qn),rn=Array(3).concat(\"fee6cefdae6be6550d\",\"feeddefdbe85fd8d3cd94701\",\"feeddefdbe85fd8d3ce6550da63603\",\"feeddefdd0a2fdae6bfd8d3ce6550da63603\",\"feeddefdd0a2fdae6bfd8d3cf16913d948018c2d04\",\"fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d9",
                    "rendered": {
                      "text": "5dadaebbcbddc9e9ac8807dba6a51a34a1486\",\"fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a354278f3f007d\").map(ka),Ju=ua(pn),qn=Array(3).concat(\"fee0d2fc9272de2d26\",\"fee5d9fcae91fb6a4acb181d\",\"fee5d9fcae91fb6a4ade2d26a50f15\",\"fee5d9fcbba1fc9272fb6a4ade2d26a50f15\",\"fee5d9fcbba1fc9272fb6a4aef3b2ccb181d99000d\",\n\"fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181d99000d\",\"fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181da50f1567000d\").map(ka),Ku=ua(qn),rn=Array(3).concat(\"fee6cefdae6be6550d\",\"feeddefdbe85fd8d3cd94701\",\"feeddefdbe85fd8d3ce6550da63603\",\"feeddefdd0a2fdae6bfd8d3ce6550da63603\",\"feeddefdd0a2fdae6bfd8d3cf16913d948018c2d04\",\"fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d9",
                      "markdown": "`5dadaebbcbddc9e9ac8807dba6a51a34a1486\",\"fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a354278f3f007d\").map(ka),Ju=ua(pn),qn=Array(3).concat(\"fee0d2fc9272de2d26\",\"fee5d9fcae91fb6a4acb181d\",\"fee5d9fcae91fb6a4ade2d26a50f15\",\"fee5d9fcbba1fc9272fb6a4ade2d26a50f15\",\"fee5d9fcbba1fc9272fb6a4aef3b2ccb181d99000d\",\n\"fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181d99000d\",\"fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181da50f1567000d\").map(ka),Ku=ua(qn),rn=Array(3).concat(\"fee6cefdae6be6550d\",\"feeddefdbe85fd8d3cd94701\",\"feeddefdbe85fd8d3ce6550da63603\",\"feeddefdd0a2fdae6bfd8d3ce6550da63603\",\"feeddefdd0a2fdae6bfd8d3cf16913d948018c2d04\",\"fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d9`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 807,
                  "startColumn": 460,
                  "endLine": 807,
                  "endColumn": 504,
                  "snippet": {
                    "text": "ebbcbddc9e9ac8807dba6a51a34a1486\",\"fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a34a1486\",\"fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a354278f3f007d\").map(ka),Ju=ua(pn),qn=Array(3).concat(\"fee0d2fc9272de2d26\",\"fee5d9fcae91fb6a4acb181d\",\"fee5d9fcae91fb6a4ade2d26a50f15\",\"fee5d9fcbba1fc9272fb6a4ade2d26a50f15\",\"fee5d9fcbba1fc9272fb6a4aef3b2ccb181d99000d\",\n\"fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181d99000d\",\"fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181da50f1567000d\").map(ka),Ku=ua(qn),rn=Array(3).concat(\"fee6cefdae6be6550d\",\"feeddefdbe85fd8d3cd94701\",\"feeddefdbe85fd8d3ce6550da63603\",\"feeddefdd0a2fdae6bfd8d3ce6550da63603\",\"feeddefdd0a2fdae6bfd8d3cf16913d",
                    "rendered": {
                      "text": "ebbcbddc9e9ac8807dba6a51a34a1486\",\"fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a34a1486\",\"fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a354278f3f007d\").map(ka),Ju=ua(pn),qn=Array(3).concat(\"fee0d2fc9272de2d26\",\"fee5d9fcae91fb6a4acb181d\",\"fee5d9fcae91fb6a4ade2d26a50f15\",\"fee5d9fcbba1fc9272fb6a4ade2d26a50f15\",\"fee5d9fcbba1fc9272fb6a4aef3b2ccb181d99000d\",\n\"fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181d99000d\",\"fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181da50f1567000d\").map(ka),Ku=ua(qn),rn=Array(3).concat(\"fee6cefdae6be6550d\",\"feeddefdbe85fd8d3cd94701\",\"feeddefdbe85fd8d3ce6550da63603\",\"feeddefdd0a2fdae6bfd8d3ce6550da63603\",\"feeddefdd0a2fdae6bfd8d3cf16913d",
                      "markdown": "`ebbcbddc9e9ac8807dba6a51a34a1486\",\"fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a34a1486\",\"fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a354278f3f007d\").map(ka),Ju=ua(pn),qn=Array(3).concat(\"fee0d2fc9272de2d26\",\"fee5d9fcae91fb6a4acb181d\",\"fee5d9fcae91fb6a4ade2d26a50f15\",\"fee5d9fcbba1fc9272fb6a4ade2d26a50f15\",\"fee5d9fcbba1fc9272fb6a4aef3b2ccb181d99000d\",\n\"fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181d99000d\",\"fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181da50f1567000d\").map(ka),Ku=ua(qn),rn=Array(3).concat(\"fee6cefdae6be6550d\",\"feeddefdbe85fd8d3cd94701\",\"feeddefdbe85fd8d3ce6550da63603\",\"feeddefdd0a2fdae6bfd8d3ce6550da63603\",\"feeddefdd0a2fdae6bfd8d3cf16913d`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 807,
                  "startColumn": 245,
                  "endLine": 807,
                  "endColumn": 301,
                  "snippet": {
                    "text": "0d9d9d9bdbdbd969696737373525252252525000000\").map(ka),\nIu=ua(on),pn=Array(3).concat(\"efedf5bcbddc756bb1\",\"f2f0f7cbc9e29e9ac86a51a3\",\"f2f0f7cbc9e29e9ac8756bb154278f\",\"f2f0f7dadaebbcbddc9e9ac8756bb154278f\",\"f2f0f7dadaebbcbddc9e9ac8807dba6a51a34a1486\",\"fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a34a1486\",\"fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a354278f3f007d\").map(ka),Ju=ua(pn),qn=Array(3).concat(\"fee0d2fc9272de2d26\",\"fee5d9fcae91fb6a4acb181d\",\"fee5d9fcae91fb6a4ade2d26a50f15\",\"fee5d9fcbba1fc9272fb6a4ade2d26a50f15\",\"fee5d9fcbba1fc9272fb6a4aef3b2ccb181d99000d\",\n\"fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181d99000d\",\"fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181da",
                    "rendered": {
                      "text": "0d9d9d9bdbdbd969696737373525252252525000000\").map(ka),\nIu=ua(on),pn=Array(3).concat(\"efedf5bcbddc756bb1\",\"f2f0f7cbc9e29e9ac86a51a3\",\"f2f0f7cbc9e29e9ac8756bb154278f\",\"f2f0f7dadaebbcbddc9e9ac8756bb154278f\",\"f2f0f7dadaebbcbddc9e9ac8807dba6a51a34a1486\",\"fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a34a1486\",\"fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a354278f3f007d\").map(ka),Ju=ua(pn),qn=Array(3).concat(\"fee0d2fc9272de2d26\",\"fee5d9fcae91fb6a4acb181d\",\"fee5d9fcae91fb6a4ade2d26a50f15\",\"fee5d9fcbba1fc9272fb6a4ade2d26a50f15\",\"fee5d9fcbba1fc9272fb6a4aef3b2ccb181d99000d\",\n\"fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181d99000d\",\"fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181da",
                      "markdown": "`0d9d9d9bdbdbd969696737373525252252525000000\").map(ka),\nIu=ua(on),pn=Array(3).concat(\"efedf5bcbddc756bb1\",\"f2f0f7cbc9e29e9ac86a51a3\",\"f2f0f7cbc9e29e9ac8756bb154278f\",\"f2f0f7dadaebbcbddc9e9ac8756bb154278f\",\"f2f0f7dadaebbcbddc9e9ac8807dba6a51a34a1486\",\"fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a34a1486\",\"fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a354278f3f007d\").map(ka),Ju=ua(pn),qn=Array(3).concat(\"fee0d2fc9272de2d26\",\"fee5d9fcae91fb6a4acb181d\",\"fee5d9fcae91fb6a4ade2d26a50f15\",\"fee5d9fcbba1fc9272fb6a4ade2d26a50f15\",\"fee5d9fcbba1fc9272fb6a4aef3b2ccb181d99000d\",\n\"fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181d99000d\",\"fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181da`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 807,
                  "startColumn": 194,
                  "endLine": 807,
                  "endColumn": 244,
                  "snippet": {
                    "text": "0d9d9d9bdbdbd969696737373525252252525\",\"fffffff0f0f0d9d9d9bdbdbd969696737373525252252525000000\").map(ka),\nIu=ua(on),pn=Array(3).concat(\"efedf5bcbddc756bb1\",\"f2f0f7cbc9e29e9ac86a51a3\",\"f2f0f7cbc9e29e9ac8756bb154278f\",\"f2f0f7dadaebbcbddc9e9ac8756bb154278f\",\"f2f0f7dadaebbcbddc9e9ac8807dba6a51a34a1486\",\"fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a34a1486\",\"fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a354278f3f007d\").map(ka),Ju=ua(pn),qn=Array(3).concat(\"fee0d2fc9272de2d26\",\"fee5d9fcae91fb6a4acb181d\",\"fee5d9fcae91fb6a4ade2d26a50f15\",\"fee5d9fcbba1fc9272fb6a4ade2d26a50f15\",\"fee5d9fcbba1fc9272fb6a4aef3b2ccb181d99000d\",\n\"fff5f0fee0d2fcbba1fc9272fb6a4aef3b2cc",
                    "rendered": {
                      "text": "0d9d9d9bdbdbd969696737373525252252525\",\"fffffff0f0f0d9d9d9bdbdbd969696737373525252252525000000\").map(ka),\nIu=ua(on),pn=Array(3).concat(\"efedf5bcbddc756bb1\",\"f2f0f7cbc9e29e9ac86a51a3\",\"f2f0f7cbc9e29e9ac8756bb154278f\",\"f2f0f7dadaebbcbddc9e9ac8756bb154278f\",\"f2f0f7dadaebbcbddc9e9ac8807dba6a51a34a1486\",\"fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a34a1486\",\"fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a354278f3f007d\").map(ka),Ju=ua(pn),qn=Array(3).concat(\"fee0d2fc9272de2d26\",\"fee5d9fcae91fb6a4acb181d\",\"fee5d9fcae91fb6a4ade2d26a50f15\",\"fee5d9fcbba1fc9272fb6a4ade2d26a50f15\",\"fee5d9fcbba1fc9272fb6a4aef3b2ccb181d99000d\",\n\"fff5f0fee0d2fcbba1fc9272fb6a4aef3b2cc",
                      "markdown": "`0d9d9d9bdbdbd969696737373525252252525\",\"fffffff0f0f0d9d9d9bdbdbd969696737373525252252525000000\").map(ka),\nIu=ua(on),pn=Array(3).concat(\"efedf5bcbddc756bb1\",\"f2f0f7cbc9e29e9ac86a51a3\",\"f2f0f7cbc9e29e9ac8756bb154278f\",\"f2f0f7dadaebbcbddc9e9ac8756bb154278f\",\"f2f0f7dadaebbcbddc9e9ac8807dba6a51a34a1486\",\"fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a34a1486\",\"fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a354278f3f007d\").map(ka),Ju=ua(pn),qn=Array(3).concat(\"fee0d2fc9272de2d26\",\"fee5d9fcae91fb6a4acb181d\",\"fee5d9fcae91fb6a4ade2d26a50f15\",\"fee5d9fcbba1fc9272fb6a4ade2d26a50f15\",\"fee5d9fcbba1fc9272fb6a4aef3b2ccb181d99000d\",\n\"fff5f0fee0d2fcbba1fc9272fb6a4aef3b2cc`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 807,
                  "startColumn": 149,
                  "endLine": 807,
                  "endColumn": 193,
                  "snippet": {
                    "text": "9bdbdbd969696737373525252252525\",\"fffffff0f0f0d9d9d9bdbdbd969696737373525252252525\",\"fffffff0f0f0d9d9d9bdbdbd969696737373525252252525000000\").map(ka),\nIu=ua(on),pn=Array(3).concat(\"efedf5bcbddc756bb1\",\"f2f0f7cbc9e29e9ac86a51a3\",\"f2f0f7cbc9e29e9ac8756bb154278f\",\"f2f0f7dadaebbcbddc9e9ac8756bb154278f\",\"f2f0f7dadaebbcbddc9e9ac8807dba6a51a34a1486\",\"fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a34a1486\",\"fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a354278f3f007d\").map(ka),Ju=ua(pn),qn=Array(3).concat(\"fee0d2fc9272de2d26\",\"fee5d9fcae91fb6a4acb181d\",\"fee5d9fcae91fb6a4ade2d26a50f15\",\"fee5d9fcbba1fc9272fb6a4ade2d26a50f15\",\"fee5d9fcbba1fc9272fb6a4aef3b2ccb",
                    "rendered": {
                      "text": "9bdbdbd969696737373525252252525\",\"fffffff0f0f0d9d9d9bdbdbd969696737373525252252525\",\"fffffff0f0f0d9d9d9bdbdbd969696737373525252252525000000\").map(ka),\nIu=ua(on),pn=Array(3).concat(\"efedf5bcbddc756bb1\",\"f2f0f7cbc9e29e9ac86a51a3\",\"f2f0f7cbc9e29e9ac8756bb154278f\",\"f2f0f7dadaebbcbddc9e9ac8756bb154278f\",\"f2f0f7dadaebbcbddc9e9ac8807dba6a51a34a1486\",\"fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a34a1486\",\"fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a354278f3f007d\").map(ka),Ju=ua(pn),qn=Array(3).concat(\"fee0d2fc9272de2d26\",\"fee5d9fcae91fb6a4acb181d\",\"fee5d9fcae91fb6a4ade2d26a50f15\",\"fee5d9fcbba1fc9272fb6a4ade2d26a50f15\",\"fee5d9fcbba1fc9272fb6a4aef3b2ccb",
                      "markdown": "`9bdbdbd969696737373525252252525\",\"fffffff0f0f0d9d9d9bdbdbd969696737373525252252525\",\"fffffff0f0f0d9d9d9bdbdbd969696737373525252252525000000\").map(ka),\nIu=ua(on),pn=Array(3).concat(\"efedf5bcbddc756bb1\",\"f2f0f7cbc9e29e9ac86a51a3\",\"f2f0f7cbc9e29e9ac8756bb154278f\",\"f2f0f7dadaebbcbddc9e9ac8756bb154278f\",\"f2f0f7dadaebbcbddc9e9ac8807dba6a51a34a1486\",\"fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a34a1486\",\"fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a354278f3f007d\").map(ka),Ju=ua(pn),qn=Array(3).concat(\"fee0d2fc9272de2d26\",\"fee5d9fcae91fb6a4acb181d\",\"fee5d9fcae91fb6a4ade2d26a50f15\",\"fee5d9fcbba1fc9272fb6a4ade2d26a50f15\",\"fee5d9fcbba1fc9272fb6a4aef3b2ccb`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 806,
                  "startColumn": 479,
                  "endLine": 806,
                  "endColumn": 535,
                  "snippet": {
                    "text": "e0c7e9c0a1d99b74c47641ab5d238b45006d2c00441b\").map(ka),Hu=ua(nn),on=Array(3).concat(\"f0f0f0bdbdbd636363\",\"f7f7f7cccccc969696525252\",\"f7f7f7cccccc969696636363252525\",\"f7f7f7d9d9d9bdbdbd969696636363252525\",\"f7f7f7d9d9d9bdbdbd969696737373525252252525\",\"fffffff0f0f0d9d9d9bdbdbd969696737373525252252525\",\"fffffff0f0f0d9d9d9bdbdbd969696737373525252252525000000\").map(ka),\nIu=ua(on),pn=Array(3).concat(\"efedf5bcbddc756bb1\",\"f2f0f7cbc9e29e9ac86a51a3\",\"f2f0f7cbc9e29e9ac8756bb154278f\",\"f2f0f7dadaebbcbddc9e9ac8756bb154278f\",\"f2f0f7dadaebbcbddc9e9ac8807dba6a51a34a1486\",\"fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a34a1486\",\"fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a35",
                    "rendered": {
                      "text": "e0c7e9c0a1d99b74c47641ab5d238b45006d2c00441b\").map(ka),Hu=ua(nn),on=Array(3).concat(\"f0f0f0bdbdbd636363\",\"f7f7f7cccccc969696525252\",\"f7f7f7cccccc969696636363252525\",\"f7f7f7d9d9d9bdbdbd969696636363252525\",\"f7f7f7d9d9d9bdbdbd969696737373525252252525\",\"fffffff0f0f0d9d9d9bdbdbd969696737373525252252525\",\"fffffff0f0f0d9d9d9bdbdbd969696737373525252252525000000\").map(ka),\nIu=ua(on),pn=Array(3).concat(\"efedf5bcbddc756bb1\",\"f2f0f7cbc9e29e9ac86a51a3\",\"f2f0f7cbc9e29e9ac8756bb154278f\",\"f2f0f7dadaebbcbddc9e9ac8756bb154278f\",\"f2f0f7dadaebbcbddc9e9ac8807dba6a51a34a1486\",\"fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a34a1486\",\"fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a35",
                      "markdown": "`e0c7e9c0a1d99b74c47641ab5d238b45006d2c00441b\").map(ka),Hu=ua(nn),on=Array(3).concat(\"f0f0f0bdbdbd636363\",\"f7f7f7cccccc969696525252\",\"f7f7f7cccccc969696636363252525\",\"f7f7f7d9d9d9bdbdbd969696636363252525\",\"f7f7f7d9d9d9bdbdbd969696737373525252252525\",\"fffffff0f0f0d9d9d9bdbdbd969696737373525252252525\",\"fffffff0f0f0d9d9d9bdbdbd969696737373525252252525000000\").map(ka),\nIu=ua(on),pn=Array(3).concat(\"efedf5bcbddc756bb1\",\"f2f0f7cbc9e29e9ac86a51a3\",\"f2f0f7cbc9e29e9ac8756bb154278f\",\"f2f0f7dadaebbcbddc9e9ac8756bb154278f\",\"f2f0f7dadaebbcbddc9e9ac8807dba6a51a34a1486\",\"fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a34a1486\",\"fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a35`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 806,
                  "startColumn": 428,
                  "endLine": 806,
                  "endColumn": 478,
                  "snippet": {
                    "text": "e0c7e9c0a1d99b74c47641ab5d238b45005a32\",\"f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45006d2c00441b\").map(ka),Hu=ua(nn),on=Array(3).concat(\"f0f0f0bdbdbd636363\",\"f7f7f7cccccc969696525252\",\"f7f7f7cccccc969696636363252525\",\"f7f7f7d9d9d9bdbdbd969696636363252525\",\"f7f7f7d9d9d9bdbdbd969696737373525252252525\",\"fffffff0f0f0d9d9d9bdbdbd969696737373525252252525\",\"fffffff0f0f0d9d9d9bdbdbd969696737373525252252525000000\").map(ka),\nIu=ua(on),pn=Array(3).concat(\"efedf5bcbddc756bb1\",\"f2f0f7cbc9e29e9ac86a51a3\",\"f2f0f7cbc9e29e9ac8756bb154278f\",\"f2f0f7dadaebbcbddc9e9ac8756bb154278f\",\"f2f0f7dadaebbcbddc9e9ac8807dba6a51a34a1486\",\"fcfbfdefedf5dadaebbcbddc9e9ac8807dba6",
                    "rendered": {
                      "text": "e0c7e9c0a1d99b74c47641ab5d238b45005a32\",\"f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45006d2c00441b\").map(ka),Hu=ua(nn),on=Array(3).concat(\"f0f0f0bdbdbd636363\",\"f7f7f7cccccc969696525252\",\"f7f7f7cccccc969696636363252525\",\"f7f7f7d9d9d9bdbdbd969696636363252525\",\"f7f7f7d9d9d9bdbdbd969696737373525252252525\",\"fffffff0f0f0d9d9d9bdbdbd969696737373525252252525\",\"fffffff0f0f0d9d9d9bdbdbd969696737373525252252525000000\").map(ka),\nIu=ua(on),pn=Array(3).concat(\"efedf5bcbddc756bb1\",\"f2f0f7cbc9e29e9ac86a51a3\",\"f2f0f7cbc9e29e9ac8756bb154278f\",\"f2f0f7dadaebbcbddc9e9ac8756bb154278f\",\"f2f0f7dadaebbcbddc9e9ac8807dba6a51a34a1486\",\"fcfbfdefedf5dadaebbcbddc9e9ac8807dba6",
                      "markdown": "`e0c7e9c0a1d99b74c47641ab5d238b45005a32\",\"f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45006d2c00441b\").map(ka),Hu=ua(nn),on=Array(3).concat(\"f0f0f0bdbdbd636363\",\"f7f7f7cccccc969696525252\",\"f7f7f7cccccc969696636363252525\",\"f7f7f7d9d9d9bdbdbd969696636363252525\",\"f7f7f7d9d9d9bdbdbd969696737373525252252525\",\"fffffff0f0f0d9d9d9bdbdbd969696737373525252252525\",\"fffffff0f0f0d9d9d9bdbdbd969696737373525252252525000000\").map(ka),\nIu=ua(on),pn=Array(3).concat(\"efedf5bcbddc756bb1\",\"f2f0f7cbc9e29e9ac86a51a3\",\"f2f0f7cbc9e29e9ac8756bb154278f\",\"f2f0f7dadaebbcbddc9e9ac8756bb154278f\",\"f2f0f7dadaebbcbddc9e9ac8807dba6a51a34a1486\",\"fcfbfdefedf5dadaebbcbddc9e9ac8807dba6`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 806,
                  "startColumn": 383,
                  "endLine": 806,
                  "endColumn": 427,
                  "snippet": {
                    "text": "c0a1d99b74c47641ab5d238b45005a32\",\"f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45005a32\",\"f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45006d2c00441b\").map(ka),Hu=ua(nn),on=Array(3).concat(\"f0f0f0bdbdbd636363\",\"f7f7f7cccccc969696525252\",\"f7f7f7cccccc969696636363252525\",\"f7f7f7d9d9d9bdbdbd969696636363252525\",\"f7f7f7d9d9d9bdbdbd969696737373525252252525\",\"fffffff0f0f0d9d9d9bdbdbd969696737373525252252525\",\"fffffff0f0f0d9d9d9bdbdbd969696737373525252252525000000\").map(ka),\nIu=ua(on),pn=Array(3).concat(\"efedf5bcbddc756bb1\",\"f2f0f7cbc9e29e9ac86a51a3\",\"f2f0f7cbc9e29e9ac8756bb154278f\",\"f2f0f7dadaebbcbddc9e9ac8756bb154278f\",\"f2f0f7dadaebbcbddc9e9ac8807dba6",
                    "rendered": {
                      "text": "c0a1d99b74c47641ab5d238b45005a32\",\"f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45005a32\",\"f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45006d2c00441b\").map(ka),Hu=ua(nn),on=Array(3).concat(\"f0f0f0bdbdbd636363\",\"f7f7f7cccccc969696525252\",\"f7f7f7cccccc969696636363252525\",\"f7f7f7d9d9d9bdbdbd969696636363252525\",\"f7f7f7d9d9d9bdbdbd969696737373525252252525\",\"fffffff0f0f0d9d9d9bdbdbd969696737373525252252525\",\"fffffff0f0f0d9d9d9bdbdbd969696737373525252252525000000\").map(ka),\nIu=ua(on),pn=Array(3).concat(\"efedf5bcbddc756bb1\",\"f2f0f7cbc9e29e9ac86a51a3\",\"f2f0f7cbc9e29e9ac8756bb154278f\",\"f2f0f7dadaebbcbddc9e9ac8756bb154278f\",\"f2f0f7dadaebbcbddc9e9ac8807dba6",
                      "markdown": "`c0a1d99b74c47641ab5d238b45005a32\",\"f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45005a32\",\"f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45006d2c00441b\").map(ka),Hu=ua(nn),on=Array(3).concat(\"f0f0f0bdbdbd636363\",\"f7f7f7cccccc969696525252\",\"f7f7f7cccccc969696636363252525\",\"f7f7f7d9d9d9bdbdbd969696636363252525\",\"f7f7f7d9d9d9bdbdbd969696737373525252252525\",\"fffffff0f0f0d9d9d9bdbdbd969696737373525252252525\",\"fffffff0f0f0d9d9d9bdbdbd969696737373525252252525000000\").map(ka),\nIu=ua(on),pn=Array(3).concat(\"efedf5bcbddc756bb1\",\"f2f0f7cbc9e29e9ac86a51a3\",\"f2f0f7cbc9e29e9ac8756bb154278f\",\"f2f0f7dadaebbcbddc9e9ac8756bb154278f\",\"f2f0f7dadaebbcbddc9e9ac8807dba6`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 806,
                  "startColumn": 168,
                  "endLine": 806,
                  "endColumn": 224,
                  "snippet": {
                    "text": "7c6dbef9ecae16baed64292c62171b508519c08306b\").map(ka),Gu=ua(mn),nn=Array(3).concat(\"e5f5e0a1d99b31a354\",\"edf8e9bae4b374c476238b45\",\n\"edf8e9bae4b374c47631a354006d2c\",\"edf8e9c7e9c0a1d99b74c47631a354006d2c\",\"edf8e9c7e9c0a1d99b74c47641ab5d238b45005a32\",\"f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45005a32\",\"f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45006d2c00441b\").map(ka),Hu=ua(nn),on=Array(3).concat(\"f0f0f0bdbdbd636363\",\"f7f7f7cccccc969696525252\",\"f7f7f7cccccc969696636363252525\",\"f7f7f7d9d9d9bdbdbd969696636363252525\",\"f7f7f7d9d9d9bdbdbd969696737373525252252525\",\"fffffff0f0f0d9d9d9bdbdbd969696737373525252252525\",\"fffffff0f0f0d9d9d9bdbdbd96969673737352525225",
                    "rendered": {
                      "text": "7c6dbef9ecae16baed64292c62171b508519c08306b\").map(ka),Gu=ua(mn),nn=Array(3).concat(\"e5f5e0a1d99b31a354\",\"edf8e9bae4b374c476238b45\",\n\"edf8e9bae4b374c47631a354006d2c\",\"edf8e9c7e9c0a1d99b74c47631a354006d2c\",\"edf8e9c7e9c0a1d99b74c47641ab5d238b45005a32\",\"f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45005a32\",\"f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45006d2c00441b\").map(ka),Hu=ua(nn),on=Array(3).concat(\"f0f0f0bdbdbd636363\",\"f7f7f7cccccc969696525252\",\"f7f7f7cccccc969696636363252525\",\"f7f7f7d9d9d9bdbdbd969696636363252525\",\"f7f7f7d9d9d9bdbdbd969696737373525252252525\",\"fffffff0f0f0d9d9d9bdbdbd969696737373525252252525\",\"fffffff0f0f0d9d9d9bdbdbd96969673737352525225",
                      "markdown": "`7c6dbef9ecae16baed64292c62171b508519c08306b\").map(ka),Gu=ua(mn),nn=Array(3).concat(\"e5f5e0a1d99b31a354\",\"edf8e9bae4b374c476238b45\",\n\"edf8e9bae4b374c47631a354006d2c\",\"edf8e9c7e9c0a1d99b74c47631a354006d2c\",\"edf8e9c7e9c0a1d99b74c47641ab5d238b45005a32\",\"f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45005a32\",\"f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45006d2c00441b\").map(ka),Hu=ua(nn),on=Array(3).concat(\"f0f0f0bdbdbd636363\",\"f7f7f7cccccc969696525252\",\"f7f7f7cccccc969696636363252525\",\"f7f7f7d9d9d9bdbdbd969696636363252525\",\"f7f7f7d9d9d9bdbdbd969696737373525252252525\",\"fffffff0f0f0d9d9d9bdbdbd969696737373525252252525\",\"fffffff0f0f0d9d9d9bdbdbd96969673737352525225`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 806,
                  "startColumn": 117,
                  "endLine": 806,
                  "endColumn": 167,
                  "snippet": {
                    "text": "7c6dbef9ecae16baed64292c62171b5084594\",\"f7fbffdeebf7c6dbef9ecae16baed64292c62171b508519c08306b\").map(ka),Gu=ua(mn),nn=Array(3).concat(\"e5f5e0a1d99b31a354\",\"edf8e9bae4b374c476238b45\",\n\"edf8e9bae4b374c47631a354006d2c\",\"edf8e9c7e9c0a1d99b74c47631a354006d2c\",\"edf8e9c7e9c0a1d99b74c47641ab5d238b45005a32\",\"f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45005a32\",\"f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45006d2c00441b\").map(ka),Hu=ua(nn),on=Array(3).concat(\"f0f0f0bdbdbd636363\",\"f7f7f7cccccc969696525252\",\"f7f7f7cccccc969696636363252525\",\"f7f7f7d9d9d9bdbdbd969696636363252525\",\"f7f7f7d9d9d9bdbdbd969696737373525252252525\",\"fffffff0f0f0d9d9d9bdbdbd96969673737352",
                    "rendered": {
                      "text": "7c6dbef9ecae16baed64292c62171b5084594\",\"f7fbffdeebf7c6dbef9ecae16baed64292c62171b508519c08306b\").map(ka),Gu=ua(mn),nn=Array(3).concat(\"e5f5e0a1d99b31a354\",\"edf8e9bae4b374c476238b45\",\n\"edf8e9bae4b374c47631a354006d2c\",\"edf8e9c7e9c0a1d99b74c47631a354006d2c\",\"edf8e9c7e9c0a1d99b74c47641ab5d238b45005a32\",\"f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45005a32\",\"f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45006d2c00441b\").map(ka),Hu=ua(nn),on=Array(3).concat(\"f0f0f0bdbdbd636363\",\"f7f7f7cccccc969696525252\",\"f7f7f7cccccc969696636363252525\",\"f7f7f7d9d9d9bdbdbd969696636363252525\",\"f7f7f7d9d9d9bdbdbd969696737373525252252525\",\"fffffff0f0f0d9d9d9bdbdbd96969673737352",
                      "markdown": "`7c6dbef9ecae16baed64292c62171b5084594\",\"f7fbffdeebf7c6dbef9ecae16baed64292c62171b508519c08306b\").map(ka),Gu=ua(mn),nn=Array(3).concat(\"e5f5e0a1d99b31a354\",\"edf8e9bae4b374c476238b45\",\n\"edf8e9bae4b374c47631a354006d2c\",\"edf8e9c7e9c0a1d99b74c47631a354006d2c\",\"edf8e9c7e9c0a1d99b74c47641ab5d238b45005a32\",\"f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45005a32\",\"f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45006d2c00441b\").map(ka),Hu=ua(nn),on=Array(3).concat(\"f0f0f0bdbdbd636363\",\"f7f7f7cccccc969696525252\",\"f7f7f7cccccc969696636363252525\",\"f7f7f7d9d9d9bdbdbd969696636363252525\",\"f7f7f7d9d9d9bdbdbd969696737373525252252525\",\"fffffff0f0f0d9d9d9bdbdbd96969673737352`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 806,
                  "startColumn": 72,
                  "endLine": 806,
                  "endColumn": 116,
                  "snippet": {
                    "text": "f9ecae16baed64292c62171b5084594\",\"f7fbffdeebf7c6dbef9ecae16baed64292c62171b5084594\",\"f7fbffdeebf7c6dbef9ecae16baed64292c62171b508519c08306b\").map(ka),Gu=ua(mn),nn=Array(3).concat(\"e5f5e0a1d99b31a354\",\"edf8e9bae4b374c476238b45\",\n\"edf8e9bae4b374c47631a354006d2c\",\"edf8e9c7e9c0a1d99b74c47631a354006d2c\",\"edf8e9c7e9c0a1d99b74c47641ab5d238b45005a32\",\"f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45005a32\",\"f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45006d2c00441b\").map(ka),Hu=ua(nn),on=Array(3).concat(\"f0f0f0bdbdbd636363\",\"f7f7f7cccccc969696525252\",\"f7f7f7cccccc969696636363252525\",\"f7f7f7d9d9d9bdbdbd969696636363252525\",\"f7f7f7d9d9d9bdbdbd96969673737352",
                    "rendered": {
                      "text": "f9ecae16baed64292c62171b5084594\",\"f7fbffdeebf7c6dbef9ecae16baed64292c62171b5084594\",\"f7fbffdeebf7c6dbef9ecae16baed64292c62171b508519c08306b\").map(ka),Gu=ua(mn),nn=Array(3).concat(\"e5f5e0a1d99b31a354\",\"edf8e9bae4b374c476238b45\",\n\"edf8e9bae4b374c47631a354006d2c\",\"edf8e9c7e9c0a1d99b74c47631a354006d2c\",\"edf8e9c7e9c0a1d99b74c47641ab5d238b45005a32\",\"f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45005a32\",\"f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45006d2c00441b\").map(ka),Hu=ua(nn),on=Array(3).concat(\"f0f0f0bdbdbd636363\",\"f7f7f7cccccc969696525252\",\"f7f7f7cccccc969696636363252525\",\"f7f7f7d9d9d9bdbdbd969696636363252525\",\"f7f7f7d9d9d9bdbdbd96969673737352",
                      "markdown": "`f9ecae16baed64292c62171b5084594\",\"f7fbffdeebf7c6dbef9ecae16baed64292c62171b5084594\",\"f7fbffdeebf7c6dbef9ecae16baed64292c62171b508519c08306b\").map(ka),Gu=ua(mn),nn=Array(3).concat(\"e5f5e0a1d99b31a354\",\"edf8e9bae4b374c476238b45\",\n\"edf8e9bae4b374c47631a354006d2c\",\"edf8e9c7e9c0a1d99b74c47631a354006d2c\",\"edf8e9c7e9c0a1d99b74c47641ab5d238b45005a32\",\"f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45005a32\",\"f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45006d2c00441b\").map(ka),Hu=ua(nn),on=Array(3).concat(\"f0f0f0bdbdbd636363\",\"f7f7f7cccccc969696525252\",\"f7f7f7cccccc969696636363252525\",\"f7f7f7d9d9d9bdbdbd969696636363252525\",\"f7f7f7d9d9d9bdbdbd96969673737352`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 805,
                  "startColumn": 362,
                  "endLine": 805,
                  "endColumn": 418,
                  "snippet": {
                    "text": "a0fed976feb24cfd8d3cfc4e2ae31a1cbd0026800026\").map(ka),Fu=ua(ln),mn=Array(3).concat(\"deebf79ecae13182bd\",\"eff3ffbdd7e76baed62171b5\",\"eff3ffbdd7e76baed63182bd08519c\",\"eff3ffc6dbef9ecae16baed63182bd08519c\",\"eff3ffc6dbef9ecae16baed64292c62171b5084594\",\"f7fbffdeebf7c6dbef9ecae16baed64292c62171b5084594\",\"f7fbffdeebf7c6dbef9ecae16baed64292c62171b508519c08306b\").map(ka),Gu=ua(mn),nn=Array(3).concat(\"e5f5e0a1d99b31a354\",\"edf8e9bae4b374c476238b45\",\n\"edf8e9bae4b374c47631a354006d2c\",\"edf8e9c7e9c0a1d99b74c47631a354006d2c\",\"edf8e9c7e9c0a1d99b74c47641ab5d238b45005a32\",\"f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45005a32\",\"f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b450",
                    "rendered": {
                      "text": "a0fed976feb24cfd8d3cfc4e2ae31a1cbd0026800026\").map(ka),Fu=ua(ln),mn=Array(3).concat(\"deebf79ecae13182bd\",\"eff3ffbdd7e76baed62171b5\",\"eff3ffbdd7e76baed63182bd08519c\",\"eff3ffc6dbef9ecae16baed63182bd08519c\",\"eff3ffc6dbef9ecae16baed64292c62171b5084594\",\"f7fbffdeebf7c6dbef9ecae16baed64292c62171b5084594\",\"f7fbffdeebf7c6dbef9ecae16baed64292c62171b508519c08306b\").map(ka),Gu=ua(mn),nn=Array(3).concat(\"e5f5e0a1d99b31a354\",\"edf8e9bae4b374c476238b45\",\n\"edf8e9bae4b374c47631a354006d2c\",\"edf8e9c7e9c0a1d99b74c47631a354006d2c\",\"edf8e9c7e9c0a1d99b74c47641ab5d238b45005a32\",\"f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45005a32\",\"f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b450",
                      "markdown": "`a0fed976feb24cfd8d3cfc4e2ae31a1cbd0026800026\").map(ka),Fu=ua(ln),mn=Array(3).concat(\"deebf79ecae13182bd\",\"eff3ffbdd7e76baed62171b5\",\"eff3ffbdd7e76baed63182bd08519c\",\"eff3ffc6dbef9ecae16baed63182bd08519c\",\"eff3ffc6dbef9ecae16baed64292c62171b5084594\",\"f7fbffdeebf7c6dbef9ecae16baed64292c62171b5084594\",\"f7fbffdeebf7c6dbef9ecae16baed64292c62171b508519c08306b\").map(ka),Gu=ua(mn),nn=Array(3).concat(\"e5f5e0a1d99b31a354\",\"edf8e9bae4b374c476238b45\",\n\"edf8e9bae4b374c47631a354006d2c\",\"edf8e9c7e9c0a1d99b74c47631a354006d2c\",\"edf8e9c7e9c0a1d99b74c47641ab5d238b45005a32\",\"f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45005a32\",\"f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b450`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 805,
                  "startColumn": 311,
                  "endLine": 805,
                  "endColumn": 361,
                  "snippet": {
                    "text": "a0fed976feb24cfd8d3cfc4e2ae31a1cb10026\",\"ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cbd0026800026\").map(ka),Fu=ua(ln),mn=Array(3).concat(\"deebf79ecae13182bd\",\"eff3ffbdd7e76baed62171b5\",\"eff3ffbdd7e76baed63182bd08519c\",\"eff3ffc6dbef9ecae16baed63182bd08519c\",\"eff3ffc6dbef9ecae16baed64292c62171b5084594\",\"f7fbffdeebf7c6dbef9ecae16baed64292c62171b5084594\",\"f7fbffdeebf7c6dbef9ecae16baed64292c62171b508519c08306b\").map(ka),Gu=ua(mn),nn=Array(3).concat(\"e5f5e0a1d99b31a354\",\"edf8e9bae4b374c476238b45\",\n\"edf8e9bae4b374c47631a354006d2c\",\"edf8e9c7e9c0a1d99b74c47631a354006d2c\",\"edf8e9c7e9c0a1d99b74c47641ab5d238b45005a32\",\"f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d2",
                    "rendered": {
                      "text": "a0fed976feb24cfd8d3cfc4e2ae31a1cb10026\",\"ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cbd0026800026\").map(ka),Fu=ua(ln),mn=Array(3).concat(\"deebf79ecae13182bd\",\"eff3ffbdd7e76baed62171b5\",\"eff3ffbdd7e76baed63182bd08519c\",\"eff3ffc6dbef9ecae16baed63182bd08519c\",\"eff3ffc6dbef9ecae16baed64292c62171b5084594\",\"f7fbffdeebf7c6dbef9ecae16baed64292c62171b5084594\",\"f7fbffdeebf7c6dbef9ecae16baed64292c62171b508519c08306b\").map(ka),Gu=ua(mn),nn=Array(3).concat(\"e5f5e0a1d99b31a354\",\"edf8e9bae4b374c476238b45\",\n\"edf8e9bae4b374c47631a354006d2c\",\"edf8e9c7e9c0a1d99b74c47631a354006d2c\",\"edf8e9c7e9c0a1d99b74c47641ab5d238b45005a32\",\"f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d2",
                      "markdown": "`a0fed976feb24cfd8d3cfc4e2ae31a1cb10026\",\"ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cbd0026800026\").map(ka),Fu=ua(ln),mn=Array(3).concat(\"deebf79ecae13182bd\",\"eff3ffbdd7e76baed62171b5\",\"eff3ffbdd7e76baed63182bd08519c\",\"eff3ffc6dbef9ecae16baed63182bd08519c\",\"eff3ffc6dbef9ecae16baed64292c62171b5084594\",\"f7fbffdeebf7c6dbef9ecae16baed64292c62171b5084594\",\"f7fbffdeebf7c6dbef9ecae16baed64292c62171b508519c08306b\").map(ka),Gu=ua(mn),nn=Array(3).concat(\"e5f5e0a1d99b31a354\",\"edf8e9bae4b374c476238b45\",\n\"edf8e9bae4b374c47631a354006d2c\",\"edf8e9c7e9c0a1d99b74c47631a354006d2c\",\"edf8e9c7e9c0a1d99b74c47641ab5d238b45005a32\",\"f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d2`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 805,
                  "startColumn": 266,
                  "endLine": 805,
                  "endColumn": 310,
                  "snippet": {
                    "text": "6feb24cfd8d3cfc4e2ae31a1cb10026\",\n\"ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cb10026\",\"ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cbd0026800026\").map(ka),Fu=ua(ln),mn=Array(3).concat(\"deebf79ecae13182bd\",\"eff3ffbdd7e76baed62171b5\",\"eff3ffbdd7e76baed63182bd08519c\",\"eff3ffc6dbef9ecae16baed63182bd08519c\",\"eff3ffc6dbef9ecae16baed64292c62171b5084594\",\"f7fbffdeebf7c6dbef9ecae16baed64292c62171b5084594\",\"f7fbffdeebf7c6dbef9ecae16baed64292c62171b508519c08306b\").map(ka),Gu=ua(mn),nn=Array(3).concat(\"e5f5e0a1d99b31a354\",\"edf8e9bae4b374c476238b45\",\n\"edf8e9bae4b374c47631a354006d2c\",\"edf8e9c7e9c0a1d99b74c47631a354006d2c\",\"edf8e9c7e9c0a1d99b74c47641ab5d2",
                    "rendered": {
                      "text": "6feb24cfd8d3cfc4e2ae31a1cb10026\",\n\"ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cb10026\",\"ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cbd0026800026\").map(ka),Fu=ua(ln),mn=Array(3).concat(\"deebf79ecae13182bd\",\"eff3ffbdd7e76baed62171b5\",\"eff3ffbdd7e76baed63182bd08519c\",\"eff3ffc6dbef9ecae16baed63182bd08519c\",\"eff3ffc6dbef9ecae16baed64292c62171b5084594\",\"f7fbffdeebf7c6dbef9ecae16baed64292c62171b5084594\",\"f7fbffdeebf7c6dbef9ecae16baed64292c62171b508519c08306b\").map(ka),Gu=ua(mn),nn=Array(3).concat(\"e5f5e0a1d99b31a354\",\"edf8e9bae4b374c476238b45\",\n\"edf8e9bae4b374c47631a354006d2c\",\"edf8e9c7e9c0a1d99b74c47631a354006d2c\",\"edf8e9c7e9c0a1d99b74c47641ab5d2",
                      "markdown": "`6feb24cfd8d3cfc4e2ae31a1cb10026\",\n\"ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cb10026\",\"ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cbd0026800026\").map(ka),Fu=ua(ln),mn=Array(3).concat(\"deebf79ecae13182bd\",\"eff3ffbdd7e76baed62171b5\",\"eff3ffbdd7e76baed63182bd08519c\",\"eff3ffc6dbef9ecae16baed63182bd08519c\",\"eff3ffc6dbef9ecae16baed64292c62171b5084594\",\"f7fbffdeebf7c6dbef9ecae16baed64292c62171b5084594\",\"f7fbffdeebf7c6dbef9ecae16baed64292c62171b508519c08306b\").map(ka),Gu=ua(mn),nn=Array(3).concat(\"e5f5e0a1d99b31a354\",\"edf8e9bae4b374c476238b45\",\n\"edf8e9bae4b374c47631a354006d2c\",\"edf8e9c7e9c0a1d99b74c47631a354006d2c\",\"edf8e9c7e9c0a1d99b74c47641ab5d2`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 805,
                  "startColumn": 51,
                  "endLine": 805,
                  "endColumn": 107,
                  "snippet": {
                    "text": "cfee391fec44ffe9929ec7014cc4c02993404662506\").map(ka),Eu=ua(kn),ln=Array(3).concat(\"ffeda0feb24cf03b20\",\"ffffb2fecc5cfd8d3ce31a1c\",\"ffffb2fecc5cfd8d3cf03b20bd0026\",\"ffffb2fed976feb24cfd8d3cf03b20bd0026\",\"ffffb2fed976feb24cfd8d3cfc4e2ae31a1cb10026\",\n\"ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cb10026\",\"ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cbd0026800026\").map(ka),Fu=ua(ln),mn=Array(3).concat(\"deebf79ecae13182bd\",\"eff3ffbdd7e76baed62171b5\",\"eff3ffbdd7e76baed63182bd08519c\",\"eff3ffc6dbef9ecae16baed63182bd08519c\",\"eff3ffc6dbef9ecae16baed64292c62171b5084594\",\"f7fbffdeebf7c6dbef9ecae16baed64292c62171b5084594\",\"f7fbffdeebf7c6dbef9ecae16baed64292c62171b508",
                    "rendered": {
                      "text": "cfee391fec44ffe9929ec7014cc4c02993404662506\").map(ka),Eu=ua(kn),ln=Array(3).concat(\"ffeda0feb24cf03b20\",\"ffffb2fecc5cfd8d3ce31a1c\",\"ffffb2fecc5cfd8d3cf03b20bd0026\",\"ffffb2fed976feb24cfd8d3cf03b20bd0026\",\"ffffb2fed976feb24cfd8d3cfc4e2ae31a1cb10026\",\n\"ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cb10026\",\"ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cbd0026800026\").map(ka),Fu=ua(ln),mn=Array(3).concat(\"deebf79ecae13182bd\",\"eff3ffbdd7e76baed62171b5\",\"eff3ffbdd7e76baed63182bd08519c\",\"eff3ffc6dbef9ecae16baed63182bd08519c\",\"eff3ffc6dbef9ecae16baed64292c62171b5084594\",\"f7fbffdeebf7c6dbef9ecae16baed64292c62171b5084594\",\"f7fbffdeebf7c6dbef9ecae16baed64292c62171b508",
                      "markdown": "`cfee391fec44ffe9929ec7014cc4c02993404662506\").map(ka),Eu=ua(kn),ln=Array(3).concat(\"ffeda0feb24cf03b20\",\"ffffb2fecc5cfd8d3ce31a1c\",\"ffffb2fecc5cfd8d3cf03b20bd0026\",\"ffffb2fed976feb24cfd8d3cf03b20bd0026\",\"ffffb2fed976feb24cfd8d3cfc4e2ae31a1cb10026\",\n\"ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cb10026\",\"ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cbd0026800026\").map(ka),Fu=ua(ln),mn=Array(3).concat(\"deebf79ecae13182bd\",\"eff3ffbdd7e76baed62171b5\",\"eff3ffbdd7e76baed63182bd08519c\",\"eff3ffc6dbef9ecae16baed63182bd08519c\",\"eff3ffc6dbef9ecae16baed64292c62171b5084594\",\"f7fbffdeebf7c6dbef9ecae16baed64292c62171b5084594\",\"f7fbffdeebf7c6dbef9ecae16baed64292c62171b508`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 805,
                  "endLine": 805,
                  "endColumn": 50,
                  "snippet": {
                    "text": "cfee391fec44ffe9929ec7014cc4c028c2d04\",\"ffffe5fff7bcfee391fec44ffe9929ec7014cc4c02993404662506\").map(ka),Eu=ua(kn),ln=Array(3).concat(\"ffeda0feb24cf03b20\",\"ffffb2fecc5cfd8d3ce31a1c\",\"ffffb2fecc5cfd8d3cf03b20bd0026\",\"ffffb2fed976feb24cfd8d3cf03b20bd0026\",\"ffffb2fed976feb24cfd8d3cfc4e2ae31a1cb10026\",\n\"ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cb10026\",\"ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cbd0026800026\").map(ka),Fu=ua(ln),mn=Array(3).concat(\"deebf79ecae13182bd\",\"eff3ffbdd7e76baed62171b5\",\"eff3ffbdd7e76baed63182bd08519c\",\"eff3ffc6dbef9ecae16baed63182bd08519c\",\"eff3ffc6dbef9ecae16baed64292c62171b5084594\",\"f7fbffdeebf7c6dbef9ecae16baed64292c621",
                    "rendered": {
                      "text": "cfee391fec44ffe9929ec7014cc4c028c2d04\",\"ffffe5fff7bcfee391fec44ffe9929ec7014cc4c02993404662506\").map(ka),Eu=ua(kn),ln=Array(3).concat(\"ffeda0feb24cf03b20\",\"ffffb2fecc5cfd8d3ce31a1c\",\"ffffb2fecc5cfd8d3cf03b20bd0026\",\"ffffb2fed976feb24cfd8d3cf03b20bd0026\",\"ffffb2fed976feb24cfd8d3cfc4e2ae31a1cb10026\",\n\"ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cb10026\",\"ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cbd0026800026\").map(ka),Fu=ua(ln),mn=Array(3).concat(\"deebf79ecae13182bd\",\"eff3ffbdd7e76baed62171b5\",\"eff3ffbdd7e76baed63182bd08519c\",\"eff3ffc6dbef9ecae16baed63182bd08519c\",\"eff3ffc6dbef9ecae16baed64292c62171b5084594\",\"f7fbffdeebf7c6dbef9ecae16baed64292c621",
                      "markdown": "`cfee391fec44ffe9929ec7014cc4c028c2d04\",\"ffffe5fff7bcfee391fec44ffe9929ec7014cc4c02993404662506\").map(ka),Eu=ua(kn),ln=Array(3).concat(\"ffeda0feb24cf03b20\",\"ffffb2fecc5cfd8d3ce31a1c\",\"ffffb2fecc5cfd8d3cf03b20bd0026\",\"ffffb2fed976feb24cfd8d3cf03b20bd0026\",\"ffffb2fed976feb24cfd8d3cfc4e2ae31a1cb10026\",\n\"ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cb10026\",\"ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cbd0026800026\").map(ka),Fu=ua(ln),mn=Array(3).concat(\"deebf79ecae13182bd\",\"eff3ffbdd7e76baed62171b5\",\"eff3ffbdd7e76baed63182bd08519c\",\"eff3ffc6dbef9ecae16baed63182bd08519c\",\"eff3ffc6dbef9ecae16baed64292c62171b5084594\",\"f7fbffdeebf7c6dbef9ecae16baed64292c621`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 804,
                  "startColumn": 460,
                  "endLine": 804,
                  "endColumn": 504,
                  "snippet": {
                    "text": "91fec44ffe9929ec7014cc4c028c2d04\",\"ffffe5fff7bcfee391fec44ffe9929ec7014cc4c028c2d04\",\"ffffe5fff7bcfee391fec44ffe9929ec7014cc4c02993404662506\").map(ka),Eu=ua(kn),ln=Array(3).concat(\"ffeda0feb24cf03b20\",\"ffffb2fecc5cfd8d3ce31a1c\",\"ffffb2fecc5cfd8d3cf03b20bd0026\",\"ffffb2fed976feb24cfd8d3cf03b20bd0026\",\"ffffb2fed976feb24cfd8d3cfc4e2ae31a1cb10026\",\n\"ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cb10026\",\"ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cbd0026800026\").map(ka),Fu=ua(ln),mn=Array(3).concat(\"deebf79ecae13182bd\",\"eff3ffbdd7e76baed62171b5\",\"eff3ffbdd7e76baed63182bd08519c\",\"eff3ffc6dbef9ecae16baed63182bd08519c\",\"eff3ffc6dbef9ecae16baed64292c62",
                    "rendered": {
                      "text": "91fec44ffe9929ec7014cc4c028c2d04\",\"ffffe5fff7bcfee391fec44ffe9929ec7014cc4c028c2d04\",\"ffffe5fff7bcfee391fec44ffe9929ec7014cc4c02993404662506\").map(ka),Eu=ua(kn),ln=Array(3).concat(\"ffeda0feb24cf03b20\",\"ffffb2fecc5cfd8d3ce31a1c\",\"ffffb2fecc5cfd8d3cf03b20bd0026\",\"ffffb2fed976feb24cfd8d3cf03b20bd0026\",\"ffffb2fed976feb24cfd8d3cfc4e2ae31a1cb10026\",\n\"ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cb10026\",\"ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cbd0026800026\").map(ka),Fu=ua(ln),mn=Array(3).concat(\"deebf79ecae13182bd\",\"eff3ffbdd7e76baed62171b5\",\"eff3ffbdd7e76baed63182bd08519c\",\"eff3ffc6dbef9ecae16baed63182bd08519c\",\"eff3ffc6dbef9ecae16baed64292c62",
                      "markdown": "`91fec44ffe9929ec7014cc4c028c2d04\",\"ffffe5fff7bcfee391fec44ffe9929ec7014cc4c028c2d04\",\"ffffe5fff7bcfee391fec44ffe9929ec7014cc4c02993404662506\").map(ka),Eu=ua(kn),ln=Array(3).concat(\"ffeda0feb24cf03b20\",\"ffffb2fecc5cfd8d3ce31a1c\",\"ffffb2fecc5cfd8d3cf03b20bd0026\",\"ffffb2fed976feb24cfd8d3cf03b20bd0026\",\"ffffb2fed976feb24cfd8d3cfc4e2ae31a1cb10026\",\n\"ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cb10026\",\"ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cbd0026800026\").map(ka),Fu=ua(ln),mn=Array(3).concat(\"deebf79ecae13182bd\",\"eff3ffbdd7e76baed62171b5\",\"eff3ffbdd7e76baed63182bd08519c\",\"eff3ffc6dbef9ecae16baed63182bd08519c\",\"eff3ffc6dbef9ecae16baed64292c62`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 804,
                  "startColumn": 245,
                  "endLine": 804,
                  "endColumn": 301,
                  "snippet": {
                    "text": "9d9f0a3addd8e78c67941ab5d238443006837004529\").map(ka),\nDu=ua(jn),kn=Array(3).concat(\"fff7bcfec44fd95f0e\",\"ffffd4fed98efe9929cc4c02\",\"ffffd4fed98efe9929d95f0e993404\",\"ffffd4fee391fec44ffe9929d95f0e993404\",\"ffffd4fee391fec44ffe9929ec7014cc4c028c2d04\",\"ffffe5fff7bcfee391fec44ffe9929ec7014cc4c028c2d04\",\"ffffe5fff7bcfee391fec44ffe9929ec7014cc4c02993404662506\").map(ka),Eu=ua(kn),ln=Array(3).concat(\"ffeda0feb24cf03b20\",\"ffffb2fecc5cfd8d3ce31a1c\",\"ffffb2fecc5cfd8d3cf03b20bd0026\",\"ffffb2fed976feb24cfd8d3cf03b20bd0026\",\"ffffb2fed976feb24cfd8d3cfc4e2ae31a1cb10026\",\n\"ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cb10026\",\"ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cb",
                    "rendered": {
                      "text": "9d9f0a3addd8e78c67941ab5d238443006837004529\").map(ka),\nDu=ua(jn),kn=Array(3).concat(\"fff7bcfec44fd95f0e\",\"ffffd4fed98efe9929cc4c02\",\"ffffd4fed98efe9929d95f0e993404\",\"ffffd4fee391fec44ffe9929d95f0e993404\",\"ffffd4fee391fec44ffe9929ec7014cc4c028c2d04\",\"ffffe5fff7bcfee391fec44ffe9929ec7014cc4c028c2d04\",\"ffffe5fff7bcfee391fec44ffe9929ec7014cc4c02993404662506\").map(ka),Eu=ua(kn),ln=Array(3).concat(\"ffeda0feb24cf03b20\",\"ffffb2fecc5cfd8d3ce31a1c\",\"ffffb2fecc5cfd8d3cf03b20bd0026\",\"ffffb2fed976feb24cfd8d3cf03b20bd0026\",\"ffffb2fed976feb24cfd8d3cfc4e2ae31a1cb10026\",\n\"ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cb10026\",\"ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cb",
                      "markdown": "`9d9f0a3addd8e78c67941ab5d238443006837004529\").map(ka),\nDu=ua(jn),kn=Array(3).concat(\"fff7bcfec44fd95f0e\",\"ffffd4fed98efe9929cc4c02\",\"ffffd4fed98efe9929d95f0e993404\",\"ffffd4fee391fec44ffe9929d95f0e993404\",\"ffffd4fee391fec44ffe9929ec7014cc4c028c2d04\",\"ffffe5fff7bcfee391fec44ffe9929ec7014cc4c028c2d04\",\"ffffe5fff7bcfee391fec44ffe9929ec7014cc4c02993404662506\").map(ka),Eu=ua(kn),ln=Array(3).concat(\"ffeda0feb24cf03b20\",\"ffffb2fecc5cfd8d3ce31a1c\",\"ffffb2fecc5cfd8d3cf03b20bd0026\",\"ffffb2fed976feb24cfd8d3cf03b20bd0026\",\"ffffb2fed976feb24cfd8d3cfc4e2ae31a1cb10026\",\n\"ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cb10026\",\"ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cb`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 804,
                  "startColumn": 194,
                  "endLine": 804,
                  "endColumn": 244,
                  "snippet": {
                    "text": "9d9f0a3addd8e78c67941ab5d238443005a32\",\"ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443006837004529\").map(ka),\nDu=ua(jn),kn=Array(3).concat(\"fff7bcfec44fd95f0e\",\"ffffd4fed98efe9929cc4c02\",\"ffffd4fed98efe9929d95f0e993404\",\"ffffd4fee391fec44ffe9929d95f0e993404\",\"ffffd4fee391fec44ffe9929ec7014cc4c028c2d04\",\"ffffe5fff7bcfee391fec44ffe9929ec7014cc4c028c2d04\",\"ffffe5fff7bcfee391fec44ffe9929ec7014cc4c02993404662506\").map(ka),Eu=ua(kn),ln=Array(3).concat(\"ffeda0feb24cf03b20\",\"ffffb2fecc5cfd8d3ce31a1c\",\"ffffb2fecc5cfd8d3cf03b20bd0026\",\"ffffb2fed976feb24cfd8d3cf03b20bd0026\",\"ffffb2fed976feb24cfd8d3cfc4e2ae31a1cb10026\",\n\"ffffccffeda0fed976feb24cfd8d3cfc4e2ae",
                    "rendered": {
                      "text": "9d9f0a3addd8e78c67941ab5d238443005a32\",\"ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443006837004529\").map(ka),\nDu=ua(jn),kn=Array(3).concat(\"fff7bcfec44fd95f0e\",\"ffffd4fed98efe9929cc4c02\",\"ffffd4fed98efe9929d95f0e993404\",\"ffffd4fee391fec44ffe9929d95f0e993404\",\"ffffd4fee391fec44ffe9929ec7014cc4c028c2d04\",\"ffffe5fff7bcfee391fec44ffe9929ec7014cc4c028c2d04\",\"ffffe5fff7bcfee391fec44ffe9929ec7014cc4c02993404662506\").map(ka),Eu=ua(kn),ln=Array(3).concat(\"ffeda0feb24cf03b20\",\"ffffb2fecc5cfd8d3ce31a1c\",\"ffffb2fecc5cfd8d3cf03b20bd0026\",\"ffffb2fed976feb24cfd8d3cf03b20bd0026\",\"ffffb2fed976feb24cfd8d3cfc4e2ae31a1cb10026\",\n\"ffffccffeda0fed976feb24cfd8d3cfc4e2ae",
                      "markdown": "`9d9f0a3addd8e78c67941ab5d238443005a32\",\"ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443006837004529\").map(ka),\nDu=ua(jn),kn=Array(3).concat(\"fff7bcfec44fd95f0e\",\"ffffd4fed98efe9929cc4c02\",\"ffffd4fed98efe9929d95f0e993404\",\"ffffd4fee391fec44ffe9929d95f0e993404\",\"ffffd4fee391fec44ffe9929ec7014cc4c028c2d04\",\"ffffe5fff7bcfee391fec44ffe9929ec7014cc4c028c2d04\",\"ffffe5fff7bcfee391fec44ffe9929ec7014cc4c02993404662506\").map(ka),Eu=ua(kn),ln=Array(3).concat(\"ffeda0feb24cf03b20\",\"ffffb2fecc5cfd8d3ce31a1c\",\"ffffb2fecc5cfd8d3cf03b20bd0026\",\"ffffb2fed976feb24cfd8d3cf03b20bd0026\",\"ffffb2fed976feb24cfd8d3cfc4e2ae31a1cb10026\",\n\"ffffccffeda0fed976feb24cfd8d3cfc4e2ae`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 804,
                  "startColumn": 149,
                  "endLine": 804,
                  "endColumn": 193,
                  "snippet": {
                    "text": "3addd8e78c67941ab5d238443005a32\",\"ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443005a32\",\"ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443006837004529\").map(ka),\nDu=ua(jn),kn=Array(3).concat(\"fff7bcfec44fd95f0e\",\"ffffd4fed98efe9929cc4c02\",\"ffffd4fed98efe9929d95f0e993404\",\"ffffd4fee391fec44ffe9929d95f0e993404\",\"ffffd4fee391fec44ffe9929ec7014cc4c028c2d04\",\"ffffe5fff7bcfee391fec44ffe9929ec7014cc4c028c2d04\",\"ffffe5fff7bcfee391fec44ffe9929ec7014cc4c02993404662506\").map(ka),Eu=ua(kn),ln=Array(3).concat(\"ffeda0feb24cf03b20\",\"ffffb2fecc5cfd8d3ce31a1c\",\"ffffb2fecc5cfd8d3cf03b20bd0026\",\"ffffb2fed976feb24cfd8d3cf03b20bd0026\",\"ffffb2fed976feb24cfd8d3cfc4e2ae3",
                    "rendered": {
                      "text": "3addd8e78c67941ab5d238443005a32\",\"ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443005a32\",\"ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443006837004529\").map(ka),\nDu=ua(jn),kn=Array(3).concat(\"fff7bcfec44fd95f0e\",\"ffffd4fed98efe9929cc4c02\",\"ffffd4fed98efe9929d95f0e993404\",\"ffffd4fee391fec44ffe9929d95f0e993404\",\"ffffd4fee391fec44ffe9929ec7014cc4c028c2d04\",\"ffffe5fff7bcfee391fec44ffe9929ec7014cc4c028c2d04\",\"ffffe5fff7bcfee391fec44ffe9929ec7014cc4c02993404662506\").map(ka),Eu=ua(kn),ln=Array(3).concat(\"ffeda0feb24cf03b20\",\"ffffb2fecc5cfd8d3ce31a1c\",\"ffffb2fecc5cfd8d3cf03b20bd0026\",\"ffffb2fed976feb24cfd8d3cf03b20bd0026\",\"ffffb2fed976feb24cfd8d3cfc4e2ae3",
                      "markdown": "`3addd8e78c67941ab5d238443005a32\",\"ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443005a32\",\"ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443006837004529\").map(ka),\nDu=ua(jn),kn=Array(3).concat(\"fff7bcfec44fd95f0e\",\"ffffd4fed98efe9929cc4c02\",\"ffffd4fed98efe9929d95f0e993404\",\"ffffd4fee391fec44ffe9929d95f0e993404\",\"ffffd4fee391fec44ffe9929ec7014cc4c028c2d04\",\"ffffe5fff7bcfee391fec44ffe9929ec7014cc4c028c2d04\",\"ffffe5fff7bcfee391fec44ffe9929ec7014cc4c02993404662506\").map(ka),Eu=ua(kn),ln=Array(3).concat(\"ffeda0feb24cf03b20\",\"ffffb2fecc5cfd8d3ce31a1c\",\"ffffb2fecc5cfd8d3cf03b20bd0026\",\"ffffb2fed976feb24cfd8d3cf03b20bd0026\",\"ffffb2fed976feb24cfd8d3cfc4e2ae3`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 803,
                  "startColumn": 479,
                  "endLine": 803,
                  "endColumn": 535,
                  "snippet": {
                    "text": "b1c7e9b47fcdbb41b6c41d91c0225ea8253494081d58\").map(ka),Cu=ua(hn),jn=Array(3).concat(\"f7fcb9addd8e31a354\",\"ffffccc2e69978c679238443\",\"ffffccc2e69978c67931a354006837\",\"ffffccd9f0a3addd8e78c67931a354006837\",\"ffffccd9f0a3addd8e78c67941ab5d238443005a32\",\"ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443005a32\",\"ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443006837004529\").map(ka),\nDu=ua(jn),kn=Array(3).concat(\"fff7bcfec44fd95f0e\",\"ffffd4fed98efe9929cc4c02\",\"ffffd4fed98efe9929d95f0e993404\",\"ffffd4fee391fec44ffe9929d95f0e993404\",\"ffffd4fee391fec44ffe9929ec7014cc4c028c2d04\",\"ffffe5fff7bcfee391fec44ffe9929ec7014cc4c028c2d04\",\"ffffe5fff7bcfee391fec44ffe9929ec7014cc4c029",
                    "rendered": {
                      "text": "b1c7e9b47fcdbb41b6c41d91c0225ea8253494081d58\").map(ka),Cu=ua(hn),jn=Array(3).concat(\"f7fcb9addd8e31a354\",\"ffffccc2e69978c679238443\",\"ffffccc2e69978c67931a354006837\",\"ffffccd9f0a3addd8e78c67931a354006837\",\"ffffccd9f0a3addd8e78c67941ab5d238443005a32\",\"ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443005a32\",\"ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443006837004529\").map(ka),\nDu=ua(jn),kn=Array(3).concat(\"fff7bcfec44fd95f0e\",\"ffffd4fed98efe9929cc4c02\",\"ffffd4fed98efe9929d95f0e993404\",\"ffffd4fee391fec44ffe9929d95f0e993404\",\"ffffd4fee391fec44ffe9929ec7014cc4c028c2d04\",\"ffffe5fff7bcfee391fec44ffe9929ec7014cc4c028c2d04\",\"ffffe5fff7bcfee391fec44ffe9929ec7014cc4c029",
                      "markdown": "`b1c7e9b47fcdbb41b6c41d91c0225ea8253494081d58\").map(ka),Cu=ua(hn),jn=Array(3).concat(\"f7fcb9addd8e31a354\",\"ffffccc2e69978c679238443\",\"ffffccc2e69978c67931a354006837\",\"ffffccd9f0a3addd8e78c67931a354006837\",\"ffffccd9f0a3addd8e78c67941ab5d238443005a32\",\"ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443005a32\",\"ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443006837004529\").map(ka),\nDu=ua(jn),kn=Array(3).concat(\"fff7bcfec44fd95f0e\",\"ffffd4fed98efe9929cc4c02\",\"ffffd4fed98efe9929d95f0e993404\",\"ffffd4fee391fec44ffe9929d95f0e993404\",\"ffffd4fee391fec44ffe9929ec7014cc4c028c2d04\",\"ffffe5fff7bcfee391fec44ffe9929ec7014cc4c028c2d04\",\"ffffe5fff7bcfee391fec44ffe9929ec7014cc4c029`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 803,
                  "startColumn": 428,
                  "endLine": 803,
                  "endColumn": 478,
                  "snippet": {
                    "text": "b1c7e9b47fcdbb41b6c41d91c0225ea80c2c84\",\"ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea8253494081d58\").map(ka),Cu=ua(hn),jn=Array(3).concat(\"f7fcb9addd8e31a354\",\"ffffccc2e69978c679238443\",\"ffffccc2e69978c67931a354006837\",\"ffffccd9f0a3addd8e78c67931a354006837\",\"ffffccd9f0a3addd8e78c67941ab5d238443005a32\",\"ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443005a32\",\"ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443006837004529\").map(ka),\nDu=ua(jn),kn=Array(3).concat(\"fff7bcfec44fd95f0e\",\"ffffd4fed98efe9929cc4c02\",\"ffffd4fed98efe9929d95f0e993404\",\"ffffd4fee391fec44ffe9929d95f0e993404\",\"ffffd4fee391fec44ffe9929ec7014cc4c028c2d04\",\"ffffe5fff7bcfee391fec44ffe9929ec7014c",
                    "rendered": {
                      "text": "b1c7e9b47fcdbb41b6c41d91c0225ea80c2c84\",\"ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea8253494081d58\").map(ka),Cu=ua(hn),jn=Array(3).concat(\"f7fcb9addd8e31a354\",\"ffffccc2e69978c679238443\",\"ffffccc2e69978c67931a354006837\",\"ffffccd9f0a3addd8e78c67931a354006837\",\"ffffccd9f0a3addd8e78c67941ab5d238443005a32\",\"ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443005a32\",\"ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443006837004529\").map(ka),\nDu=ua(jn),kn=Array(3).concat(\"fff7bcfec44fd95f0e\",\"ffffd4fed98efe9929cc4c02\",\"ffffd4fed98efe9929d95f0e993404\",\"ffffd4fee391fec44ffe9929d95f0e993404\",\"ffffd4fee391fec44ffe9929ec7014cc4c028c2d04\",\"ffffe5fff7bcfee391fec44ffe9929ec7014c",
                      "markdown": "`b1c7e9b47fcdbb41b6c41d91c0225ea80c2c84\",\"ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea8253494081d58\").map(ka),Cu=ua(hn),jn=Array(3).concat(\"f7fcb9addd8e31a354\",\"ffffccc2e69978c679238443\",\"ffffccc2e69978c67931a354006837\",\"ffffccd9f0a3addd8e78c67931a354006837\",\"ffffccd9f0a3addd8e78c67941ab5d238443005a32\",\"ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443005a32\",\"ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443006837004529\").map(ka),\nDu=ua(jn),kn=Array(3).concat(\"fff7bcfec44fd95f0e\",\"ffffd4fed98efe9929cc4c02\",\"ffffd4fed98efe9929d95f0e993404\",\"ffffd4fee391fec44ffe9929d95f0e993404\",\"ffffd4fee391fec44ffe9929ec7014cc4c028c2d04\",\"ffffe5fff7bcfee391fec44ffe9929ec7014c`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 803,
                  "startColumn": 383,
                  "endLine": 803,
                  "endColumn": 427,
                  "snippet": {
                    "text": "b47fcdbb41b6c41d91c0225ea80c2c84\",\"ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea80c2c84\",\"ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea8253494081d58\").map(ka),Cu=ua(hn),jn=Array(3).concat(\"f7fcb9addd8e31a354\",\"ffffccc2e69978c679238443\",\"ffffccc2e69978c67931a354006837\",\"ffffccd9f0a3addd8e78c67931a354006837\",\"ffffccd9f0a3addd8e78c67941ab5d238443005a32\",\"ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443005a32\",\"ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443006837004529\").map(ka),\nDu=ua(jn),kn=Array(3).concat(\"fff7bcfec44fd95f0e\",\"ffffd4fed98efe9929cc4c02\",\"ffffd4fed98efe9929d95f0e993404\",\"ffffd4fee391fec44ffe9929d95f0e993404\",\"ffffd4fee391fec44ffe9929ec7014c",
                    "rendered": {
                      "text": "b47fcdbb41b6c41d91c0225ea80c2c84\",\"ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea80c2c84\",\"ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea8253494081d58\").map(ka),Cu=ua(hn),jn=Array(3).concat(\"f7fcb9addd8e31a354\",\"ffffccc2e69978c679238443\",\"ffffccc2e69978c67931a354006837\",\"ffffccd9f0a3addd8e78c67931a354006837\",\"ffffccd9f0a3addd8e78c67941ab5d238443005a32\",\"ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443005a32\",\"ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443006837004529\").map(ka),\nDu=ua(jn),kn=Array(3).concat(\"fff7bcfec44fd95f0e\",\"ffffd4fed98efe9929cc4c02\",\"ffffd4fed98efe9929d95f0e993404\",\"ffffd4fee391fec44ffe9929d95f0e993404\",\"ffffd4fee391fec44ffe9929ec7014c",
                      "markdown": "`b47fcdbb41b6c41d91c0225ea80c2c84\",\"ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea80c2c84\",\"ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea8253494081d58\").map(ka),Cu=ua(hn),jn=Array(3).concat(\"f7fcb9addd8e31a354\",\"ffffccc2e69978c679238443\",\"ffffccc2e69978c67931a354006837\",\"ffffccd9f0a3addd8e78c67931a354006837\",\"ffffccd9f0a3addd8e78c67941ab5d238443005a32\",\"ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443005a32\",\"ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443006837004529\").map(ka),\nDu=ua(jn),kn=Array(3).concat(\"fff7bcfec44fd95f0e\",\"ffffd4fed98efe9929cc4c02\",\"ffffd4fed98efe9929d95f0e993404\",\"ffffd4fee391fec44ffe9929d95f0e993404\",\"ffffd4fee391fec44ffe9929ec7014c`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 803,
                  "startColumn": 168,
                  "endLine": 803,
                  "endColumn": 224,
                  "snippet": {
                    "text": "dfcc5c0fa9fb5f768a1dd3497ae017e7a017749006a\").map(ka),Bu=ua(gn),hn=Array(3).concat(\"edf8b17fcdbb2c7fb8\",\"ffffcca1dab441b6c4225ea8\",\n\"ffffcca1dab441b6c42c7fb8253494\",\"ffffccc7e9b47fcdbb41b6c42c7fb8253494\",\"ffffccc7e9b47fcdbb41b6c41d91c0225ea80c2c84\",\"ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea80c2c84\",\"ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea8253494081d58\").map(ka),Cu=ua(hn),jn=Array(3).concat(\"f7fcb9addd8e31a354\",\"ffffccc2e69978c679238443\",\"ffffccc2e69978c67931a354006837\",\"ffffccd9f0a3addd8e78c67931a354006837\",\"ffffccd9f0a3addd8e78c67941ab5d238443005a32\",\"ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443005a32\",\"ffffe5f7fcb9d9f0a3addd8e78c67941ab5d23844300",
                    "rendered": {
                      "text": "dfcc5c0fa9fb5f768a1dd3497ae017e7a017749006a\").map(ka),Bu=ua(gn),hn=Array(3).concat(\"edf8b17fcdbb2c7fb8\",\"ffffcca1dab441b6c4225ea8\",\n\"ffffcca1dab441b6c42c7fb8253494\",\"ffffccc7e9b47fcdbb41b6c42c7fb8253494\",\"ffffccc7e9b47fcdbb41b6c41d91c0225ea80c2c84\",\"ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea80c2c84\",\"ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea8253494081d58\").map(ka),Cu=ua(hn),jn=Array(3).concat(\"f7fcb9addd8e31a354\",\"ffffccc2e69978c679238443\",\"ffffccc2e69978c67931a354006837\",\"ffffccd9f0a3addd8e78c67931a354006837\",\"ffffccd9f0a3addd8e78c67941ab5d238443005a32\",\"ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443005a32\",\"ffffe5f7fcb9d9f0a3addd8e78c67941ab5d23844300",
                      "markdown": "`dfcc5c0fa9fb5f768a1dd3497ae017e7a017749006a\").map(ka),Bu=ua(gn),hn=Array(3).concat(\"edf8b17fcdbb2c7fb8\",\"ffffcca1dab441b6c4225ea8\",\n\"ffffcca1dab441b6c42c7fb8253494\",\"ffffccc7e9b47fcdbb41b6c42c7fb8253494\",\"ffffccc7e9b47fcdbb41b6c41d91c0225ea80c2c84\",\"ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea80c2c84\",\"ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea8253494081d58\").map(ka),Cu=ua(hn),jn=Array(3).concat(\"f7fcb9addd8e31a354\",\"ffffccc2e69978c679238443\",\"ffffccc2e69978c67931a354006837\",\"ffffccd9f0a3addd8e78c67931a354006837\",\"ffffccd9f0a3addd8e78c67941ab5d238443005a32\",\"ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443005a32\",\"ffffe5f7fcb9d9f0a3addd8e78c67941ab5d23844300`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 803,
                  "startColumn": 117,
                  "endLine": 803,
                  "endColumn": 167,
                  "snippet": {
                    "text": "dfcc5c0fa9fb5f768a1dd3497ae017e7a0177\",\"fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a017749006a\").map(ka),Bu=ua(gn),hn=Array(3).concat(\"edf8b17fcdbb2c7fb8\",\"ffffcca1dab441b6c4225ea8\",\n\"ffffcca1dab441b6c42c7fb8253494\",\"ffffccc7e9b47fcdbb41b6c42c7fb8253494\",\"ffffccc7e9b47fcdbb41b6c41d91c0225ea80c2c84\",\"ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea80c2c84\",\"ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea8253494081d58\").map(ka),Cu=ua(hn),jn=Array(3).concat(\"f7fcb9addd8e31a354\",\"ffffccc2e69978c679238443\",\"ffffccc2e69978c67931a354006837\",\"ffffccd9f0a3addd8e78c67931a354006837\",\"ffffccd9f0a3addd8e78c67941ab5d238443005a32\",\"ffffe5f7fcb9d9f0a3addd8e78c67941ab5d23",
                    "rendered": {
                      "text": "dfcc5c0fa9fb5f768a1dd3497ae017e7a0177\",\"fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a017749006a\").map(ka),Bu=ua(gn),hn=Array(3).concat(\"edf8b17fcdbb2c7fb8\",\"ffffcca1dab441b6c4225ea8\",\n\"ffffcca1dab441b6c42c7fb8253494\",\"ffffccc7e9b47fcdbb41b6c42c7fb8253494\",\"ffffccc7e9b47fcdbb41b6c41d91c0225ea80c2c84\",\"ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea80c2c84\",\"ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea8253494081d58\").map(ka),Cu=ua(hn),jn=Array(3).concat(\"f7fcb9addd8e31a354\",\"ffffccc2e69978c679238443\",\"ffffccc2e69978c67931a354006837\",\"ffffccd9f0a3addd8e78c67931a354006837\",\"ffffccd9f0a3addd8e78c67941ab5d238443005a32\",\"ffffe5f7fcb9d9f0a3addd8e78c67941ab5d23",
                      "markdown": "`dfcc5c0fa9fb5f768a1dd3497ae017e7a0177\",\"fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a017749006a\").map(ka),Bu=ua(gn),hn=Array(3).concat(\"edf8b17fcdbb2c7fb8\",\"ffffcca1dab441b6c4225ea8\",\n\"ffffcca1dab441b6c42c7fb8253494\",\"ffffccc7e9b47fcdbb41b6c42c7fb8253494\",\"ffffccc7e9b47fcdbb41b6c41d91c0225ea80c2c84\",\"ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea80c2c84\",\"ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea8253494081d58\").map(ka),Cu=ua(hn),jn=Array(3).concat(\"f7fcb9addd8e31a354\",\"ffffccc2e69978c679238443\",\"ffffccc2e69978c67931a354006837\",\"ffffccd9f0a3addd8e78c67931a354006837\",\"ffffccd9f0a3addd8e78c67941ab5d238443005a32\",\"ffffe5f7fcb9d9f0a3addd8e78c67941ab5d23`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 803,
                  "startColumn": 72,
                  "endLine": 803,
                  "endColumn": 116,
                  "snippet": {
                    "text": "0fa9fb5f768a1dd3497ae017e7a0177\",\"fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a0177\",\"fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a017749006a\").map(ka),Bu=ua(gn),hn=Array(3).concat(\"edf8b17fcdbb2c7fb8\",\"ffffcca1dab441b6c4225ea8\",\n\"ffffcca1dab441b6c42c7fb8253494\",\"ffffccc7e9b47fcdbb41b6c42c7fb8253494\",\"ffffccc7e9b47fcdbb41b6c41d91c0225ea80c2c84\",\"ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea80c2c84\",\"ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea8253494081d58\").map(ka),Cu=ua(hn),jn=Array(3).concat(\"f7fcb9addd8e31a354\",\"ffffccc2e69978c679238443\",\"ffffccc2e69978c67931a354006837\",\"ffffccd9f0a3addd8e78c67931a354006837\",\"ffffccd9f0a3addd8e78c67941ab5d23",
                    "rendered": {
                      "text": "0fa9fb5f768a1dd3497ae017e7a0177\",\"fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a0177\",\"fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a017749006a\").map(ka),Bu=ua(gn),hn=Array(3).concat(\"edf8b17fcdbb2c7fb8\",\"ffffcca1dab441b6c4225ea8\",\n\"ffffcca1dab441b6c42c7fb8253494\",\"ffffccc7e9b47fcdbb41b6c42c7fb8253494\",\"ffffccc7e9b47fcdbb41b6c41d91c0225ea80c2c84\",\"ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea80c2c84\",\"ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea8253494081d58\").map(ka),Cu=ua(hn),jn=Array(3).concat(\"f7fcb9addd8e31a354\",\"ffffccc2e69978c679238443\",\"ffffccc2e69978c67931a354006837\",\"ffffccd9f0a3addd8e78c67931a354006837\",\"ffffccd9f0a3addd8e78c67941ab5d23",
                      "markdown": "`0fa9fb5f768a1dd3497ae017e7a0177\",\"fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a0177\",\"fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a017749006a\").map(ka),Bu=ua(gn),hn=Array(3).concat(\"edf8b17fcdbb2c7fb8\",\"ffffcca1dab441b6c4225ea8\",\n\"ffffcca1dab441b6c42c7fb8253494\",\"ffffccc7e9b47fcdbb41b6c42c7fb8253494\",\"ffffccc7e9b47fcdbb41b6c41d91c0225ea80c2c84\",\"ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea80c2c84\",\"ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea8253494081d58\").map(ka),Cu=ua(hn),jn=Array(3).concat(\"f7fcb9addd8e31a354\",\"ffffccc2e69978c679238443\",\"ffffccc2e69978c67931a354006837\",\"ffffccd9f0a3addd8e78c67931a354006837\",\"ffffccd9f0a3addd8e78c67941ab5d23`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 802,
                  "startColumn": 362,
                  "endLine": 802,
                  "endColumn": 418,
                  "snippet": {
                    "text": "efd4b9dac994c7df65b0e7298ace125698004367001f\").map(ka),Au=ua(fn),gn=Array(3).concat(\"fde0ddfa9fb5c51b8a\",\"feebe2fbb4b9f768a1ae017e\",\"feebe2fbb4b9f768a1c51b8a7a0177\",\"feebe2fcc5c0fa9fb5f768a1c51b8a7a0177\",\"feebe2fcc5c0fa9fb5f768a1dd3497ae017e7a0177\",\"fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a0177\",\"fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a017749006a\").map(ka),Bu=ua(gn),hn=Array(3).concat(\"edf8b17fcdbb2c7fb8\",\"ffffcca1dab441b6c4225ea8\",\n\"ffffcca1dab441b6c42c7fb8253494\",\"ffffccc7e9b47fcdbb41b6c42c7fb8253494\",\"ffffccc7e9b47fcdbb41b6c41d91c0225ea80c2c84\",\"ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea80c2c84\",\"ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea82",
                    "rendered": {
                      "text": "efd4b9dac994c7df65b0e7298ace125698004367001f\").map(ka),Au=ua(fn),gn=Array(3).concat(\"fde0ddfa9fb5c51b8a\",\"feebe2fbb4b9f768a1ae017e\",\"feebe2fbb4b9f768a1c51b8a7a0177\",\"feebe2fcc5c0fa9fb5f768a1c51b8a7a0177\",\"feebe2fcc5c0fa9fb5f768a1dd3497ae017e7a0177\",\"fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a0177\",\"fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a017749006a\").map(ka),Bu=ua(gn),hn=Array(3).concat(\"edf8b17fcdbb2c7fb8\",\"ffffcca1dab441b6c4225ea8\",\n\"ffffcca1dab441b6c42c7fb8253494\",\"ffffccc7e9b47fcdbb41b6c42c7fb8253494\",\"ffffccc7e9b47fcdbb41b6c41d91c0225ea80c2c84\",\"ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea80c2c84\",\"ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea82",
                      "markdown": "`efd4b9dac994c7df65b0e7298ace125698004367001f\").map(ka),Au=ua(fn),gn=Array(3).concat(\"fde0ddfa9fb5c51b8a\",\"feebe2fbb4b9f768a1ae017e\",\"feebe2fbb4b9f768a1c51b8a7a0177\",\"feebe2fcc5c0fa9fb5f768a1c51b8a7a0177\",\"feebe2fcc5c0fa9fb5f768a1dd3497ae017e7a0177\",\"fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a0177\",\"fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a017749006a\").map(ka),Bu=ua(gn),hn=Array(3).concat(\"edf8b17fcdbb2c7fb8\",\"ffffcca1dab441b6c4225ea8\",\n\"ffffcca1dab441b6c42c7fb8253494\",\"ffffccc7e9b47fcdbb41b6c42c7fb8253494\",\"ffffccc7e9b47fcdbb41b6c41d91c0225ea80c2c84\",\"ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea80c2c84\",\"ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea82`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 802,
                  "startColumn": 311,
                  "endLine": 802,
                  "endColumn": 361,
                  "snippet": {
                    "text": "efd4b9dac994c7df65b0e7298ace125691003f\",\"f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125698004367001f\").map(ka),Au=ua(fn),gn=Array(3).concat(\"fde0ddfa9fb5c51b8a\",\"feebe2fbb4b9f768a1ae017e\",\"feebe2fbb4b9f768a1c51b8a7a0177\",\"feebe2fcc5c0fa9fb5f768a1c51b8a7a0177\",\"feebe2fcc5c0fa9fb5f768a1dd3497ae017e7a0177\",\"fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a0177\",\"fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a017749006a\").map(ka),Bu=ua(gn),hn=Array(3).concat(\"edf8b17fcdbb2c7fb8\",\"ffffcca1dab441b6c4225ea8\",\n\"ffffcca1dab441b6c42c7fb8253494\",\"ffffccc7e9b47fcdbb41b6c42c7fb8253494\",\"ffffccc7e9b47fcdbb41b6c41d91c0225ea80c2c84\",\"ffffd9edf8b1c7e9b47fcdbb41b6c41d91c02",
                    "rendered": {
                      "text": "efd4b9dac994c7df65b0e7298ace125691003f\",\"f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125698004367001f\").map(ka),Au=ua(fn),gn=Array(3).concat(\"fde0ddfa9fb5c51b8a\",\"feebe2fbb4b9f768a1ae017e\",\"feebe2fbb4b9f768a1c51b8a7a0177\",\"feebe2fcc5c0fa9fb5f768a1c51b8a7a0177\",\"feebe2fcc5c0fa9fb5f768a1dd3497ae017e7a0177\",\"fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a0177\",\"fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a017749006a\").map(ka),Bu=ua(gn),hn=Array(3).concat(\"edf8b17fcdbb2c7fb8\",\"ffffcca1dab441b6c4225ea8\",\n\"ffffcca1dab441b6c42c7fb8253494\",\"ffffccc7e9b47fcdbb41b6c42c7fb8253494\",\"ffffccc7e9b47fcdbb41b6c41d91c0225ea80c2c84\",\"ffffd9edf8b1c7e9b47fcdbb41b6c41d91c02",
                      "markdown": "`efd4b9dac994c7df65b0e7298ace125691003f\",\"f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125698004367001f\").map(ka),Au=ua(fn),gn=Array(3).concat(\"fde0ddfa9fb5c51b8a\",\"feebe2fbb4b9f768a1ae017e\",\"feebe2fbb4b9f768a1c51b8a7a0177\",\"feebe2fcc5c0fa9fb5f768a1c51b8a7a0177\",\"feebe2fcc5c0fa9fb5f768a1dd3497ae017e7a0177\",\"fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a0177\",\"fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a017749006a\").map(ka),Bu=ua(gn),hn=Array(3).concat(\"edf8b17fcdbb2c7fb8\",\"ffffcca1dab441b6c4225ea8\",\n\"ffffcca1dab441b6c42c7fb8253494\",\"ffffccc7e9b47fcdbb41b6c42c7fb8253494\",\"ffffccc7e9b47fcdbb41b6c41d91c0225ea80c2c84\",\"ffffd9edf8b1c7e9b47fcdbb41b6c41d91c02`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 802,
                  "startColumn": 266,
                  "endLine": 802,
                  "endColumn": 310,
                  "snippet": {
                    "text": "ac994c7df65b0e7298ace125691003f\",\n\"f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125691003f\",\"f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125698004367001f\").map(ka),Au=ua(fn),gn=Array(3).concat(\"fde0ddfa9fb5c51b8a\",\"feebe2fbb4b9f768a1ae017e\",\"feebe2fbb4b9f768a1c51b8a7a0177\",\"feebe2fcc5c0fa9fb5f768a1c51b8a7a0177\",\"feebe2fcc5c0fa9fb5f768a1dd3497ae017e7a0177\",\"fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a0177\",\"fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a017749006a\").map(ka),Bu=ua(gn),hn=Array(3).concat(\"edf8b17fcdbb2c7fb8\",\"ffffcca1dab441b6c4225ea8\",\n\"ffffcca1dab441b6c42c7fb8253494\",\"ffffccc7e9b47fcdbb41b6c42c7fb8253494\",\"ffffccc7e9b47fcdbb41b6c41d91c02",
                    "rendered": {
                      "text": "ac994c7df65b0e7298ace125691003f\",\n\"f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125691003f\",\"f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125698004367001f\").map(ka),Au=ua(fn),gn=Array(3).concat(\"fde0ddfa9fb5c51b8a\",\"feebe2fbb4b9f768a1ae017e\",\"feebe2fbb4b9f768a1c51b8a7a0177\",\"feebe2fcc5c0fa9fb5f768a1c51b8a7a0177\",\"feebe2fcc5c0fa9fb5f768a1dd3497ae017e7a0177\",\"fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a0177\",\"fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a017749006a\").map(ka),Bu=ua(gn),hn=Array(3).concat(\"edf8b17fcdbb2c7fb8\",\"ffffcca1dab441b6c4225ea8\",\n\"ffffcca1dab441b6c42c7fb8253494\",\"ffffccc7e9b47fcdbb41b6c42c7fb8253494\",\"ffffccc7e9b47fcdbb41b6c41d91c02",
                      "markdown": "`ac994c7df65b0e7298ace125691003f\",\n\"f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125691003f\",\"f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125698004367001f\").map(ka),Au=ua(fn),gn=Array(3).concat(\"fde0ddfa9fb5c51b8a\",\"feebe2fbb4b9f768a1ae017e\",\"feebe2fbb4b9f768a1c51b8a7a0177\",\"feebe2fcc5c0fa9fb5f768a1c51b8a7a0177\",\"feebe2fcc5c0fa9fb5f768a1dd3497ae017e7a0177\",\"fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a0177\",\"fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a017749006a\").map(ka),Bu=ua(gn),hn=Array(3).concat(\"edf8b17fcdbb2c7fb8\",\"ffffcca1dab441b6c4225ea8\",\n\"ffffcca1dab441b6c42c7fb8253494\",\"ffffccc7e9b47fcdbb41b6c42c7fb8253494\",\"ffffccc7e9b47fcdbb41b6c41d91c02`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 802,
                  "startColumn": 51,
                  "endLine": 802,
                  "endColumn": 107,
                  "snippet": {
                    "text": "2d0d1e6a6bddb74a9cf3690c00570b0045a8d023858\").map(ka),zu=ua(en),fn=Array(3).concat(\"e7e1efc994c7dd1c77\",\"f1eef6d7b5d8df65b0ce1256\",\"f1eef6d7b5d8df65b0dd1c77980043\",\"f1eef6d4b9dac994c7df65b0dd1c77980043\",\"f1eef6d4b9dac994c7df65b0e7298ace125691003f\",\n\"f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125691003f\",\"f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125698004367001f\").map(ka),Au=ua(fn),gn=Array(3).concat(\"fde0ddfa9fb5c51b8a\",\"feebe2fbb4b9f768a1ae017e\",\"feebe2fbb4b9f768a1c51b8a7a0177\",\"feebe2fcc5c0fa9fb5f768a1c51b8a7a0177\",\"feebe2fcc5c0fa9fb5f768a1dd3497ae017e7a0177\",\"fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a0177\",\"fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a",
                    "rendered": {
                      "text": "2d0d1e6a6bddb74a9cf3690c00570b0045a8d023858\").map(ka),zu=ua(en),fn=Array(3).concat(\"e7e1efc994c7dd1c77\",\"f1eef6d7b5d8df65b0ce1256\",\"f1eef6d7b5d8df65b0dd1c77980043\",\"f1eef6d4b9dac994c7df65b0dd1c77980043\",\"f1eef6d4b9dac994c7df65b0e7298ace125691003f\",\n\"f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125691003f\",\"f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125698004367001f\").map(ka),Au=ua(fn),gn=Array(3).concat(\"fde0ddfa9fb5c51b8a\",\"feebe2fbb4b9f768a1ae017e\",\"feebe2fbb4b9f768a1c51b8a7a0177\",\"feebe2fcc5c0fa9fb5f768a1c51b8a7a0177\",\"feebe2fcc5c0fa9fb5f768a1dd3497ae017e7a0177\",\"fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a0177\",\"fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a",
                      "markdown": "`2d0d1e6a6bddb74a9cf3690c00570b0045a8d023858\").map(ka),zu=ua(en),fn=Array(3).concat(\"e7e1efc994c7dd1c77\",\"f1eef6d7b5d8df65b0ce1256\",\"f1eef6d7b5d8df65b0dd1c77980043\",\"f1eef6d4b9dac994c7df65b0dd1c77980043\",\"f1eef6d4b9dac994c7df65b0e7298ace125691003f\",\n\"f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125691003f\",\"f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125698004367001f\").map(ka),Au=ua(fn),gn=Array(3).concat(\"fde0ddfa9fb5c51b8a\",\"feebe2fbb4b9f768a1ae017e\",\"feebe2fbb4b9f768a1c51b8a7a0177\",\"feebe2fcc5c0fa9fb5f768a1c51b8a7a0177\",\"feebe2fcc5c0fa9fb5f768a1dd3497ae017e7a0177\",\"fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a0177\",\"fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 802,
                  "endLine": 802,
                  "endColumn": 50,
                  "snippet": {
                    "text": "2d0d1e6a6bddb74a9cf3690c00570b0034e7b\",\"fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0045a8d023858\").map(ka),zu=ua(en),fn=Array(3).concat(\"e7e1efc994c7dd1c77\",\"f1eef6d7b5d8df65b0ce1256\",\"f1eef6d7b5d8df65b0dd1c77980043\",\"f1eef6d4b9dac994c7df65b0dd1c77980043\",\"f1eef6d4b9dac994c7df65b0e7298ace125691003f\",\n\"f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125691003f\",\"f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125698004367001f\").map(ka),Au=ua(fn),gn=Array(3).concat(\"fde0ddfa9fb5c51b8a\",\"feebe2fbb4b9f768a1ae017e\",\"feebe2fbb4b9f768a1c51b8a7a0177\",\"feebe2fcc5c0fa9fb5f768a1c51b8a7a0177\",\"feebe2fcc5c0fa9fb5f768a1dd3497ae017e7a0177\",\"fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae",
                    "rendered": {
                      "text": "2d0d1e6a6bddb74a9cf3690c00570b0034e7b\",\"fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0045a8d023858\").map(ka),zu=ua(en),fn=Array(3).concat(\"e7e1efc994c7dd1c77\",\"f1eef6d7b5d8df65b0ce1256\",\"f1eef6d7b5d8df65b0dd1c77980043\",\"f1eef6d4b9dac994c7df65b0dd1c77980043\",\"f1eef6d4b9dac994c7df65b0e7298ace125691003f\",\n\"f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125691003f\",\"f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125698004367001f\").map(ka),Au=ua(fn),gn=Array(3).concat(\"fde0ddfa9fb5c51b8a\",\"feebe2fbb4b9f768a1ae017e\",\"feebe2fbb4b9f768a1c51b8a7a0177\",\"feebe2fcc5c0fa9fb5f768a1c51b8a7a0177\",\"feebe2fcc5c0fa9fb5f768a1dd3497ae017e7a0177\",\"fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae",
                      "markdown": "`2d0d1e6a6bddb74a9cf3690c00570b0034e7b\",\"fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0045a8d023858\").map(ka),zu=ua(en),fn=Array(3).concat(\"e7e1efc994c7dd1c77\",\"f1eef6d7b5d8df65b0ce1256\",\"f1eef6d7b5d8df65b0dd1c77980043\",\"f1eef6d4b9dac994c7df65b0dd1c77980043\",\"f1eef6d4b9dac994c7df65b0e7298ace125691003f\",\n\"f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125691003f\",\"f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125698004367001f\").map(ka),Au=ua(fn),gn=Array(3).concat(\"fde0ddfa9fb5c51b8a\",\"feebe2fbb4b9f768a1ae017e\",\"feebe2fbb4b9f768a1c51b8a7a0177\",\"feebe2fcc5c0fa9fb5f768a1c51b8a7a0177\",\"feebe2fcc5c0fa9fb5f768a1dd3497ae017e7a0177\",\"fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 801,
                  "startColumn": 460,
                  "endLine": 801,
                  "endColumn": 504,
                  "snippet": {
                    "text": "e6a6bddb74a9cf3690c00570b0034e7b\",\"fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0034e7b\",\"fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0045a8d023858\").map(ka),zu=ua(en),fn=Array(3).concat(\"e7e1efc994c7dd1c77\",\"f1eef6d7b5d8df65b0ce1256\",\"f1eef6d7b5d8df65b0dd1c77980043\",\"f1eef6d4b9dac994c7df65b0dd1c77980043\",\"f1eef6d4b9dac994c7df65b0e7298ace125691003f\",\n\"f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125691003f\",\"f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125698004367001f\").map(ka),Au=ua(fn),gn=Array(3).concat(\"fde0ddfa9fb5c51b8a\",\"feebe2fbb4b9f768a1ae017e\",\"feebe2fbb4b9f768a1c51b8a7a0177\",\"feebe2fcc5c0fa9fb5f768a1c51b8a7a0177\",\"feebe2fcc5c0fa9fb5f768a1dd3497a",
                    "rendered": {
                      "text": "e6a6bddb74a9cf3690c00570b0034e7b\",\"fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0034e7b\",\"fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0045a8d023858\").map(ka),zu=ua(en),fn=Array(3).concat(\"e7e1efc994c7dd1c77\",\"f1eef6d7b5d8df65b0ce1256\",\"f1eef6d7b5d8df65b0dd1c77980043\",\"f1eef6d4b9dac994c7df65b0dd1c77980043\",\"f1eef6d4b9dac994c7df65b0e7298ace125691003f\",\n\"f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125691003f\",\"f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125698004367001f\").map(ka),Au=ua(fn),gn=Array(3).concat(\"fde0ddfa9fb5c51b8a\",\"feebe2fbb4b9f768a1ae017e\",\"feebe2fbb4b9f768a1c51b8a7a0177\",\"feebe2fcc5c0fa9fb5f768a1c51b8a7a0177\",\"feebe2fcc5c0fa9fb5f768a1dd3497a",
                      "markdown": "`e6a6bddb74a9cf3690c00570b0034e7b\",\"fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0034e7b\",\"fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0045a8d023858\").map(ka),zu=ua(en),fn=Array(3).concat(\"e7e1efc994c7dd1c77\",\"f1eef6d7b5d8df65b0ce1256\",\"f1eef6d7b5d8df65b0dd1c77980043\",\"f1eef6d4b9dac994c7df65b0dd1c77980043\",\"f1eef6d4b9dac994c7df65b0e7298ace125691003f\",\n\"f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125691003f\",\"f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125698004367001f\").map(ka),Au=ua(fn),gn=Array(3).concat(\"fde0ddfa9fb5c51b8a\",\"feebe2fbb4b9f768a1ae017e\",\"feebe2fbb4b9f768a1c51b8a7a0177\",\"feebe2fcc5c0fa9fb5f768a1c51b8a7a0177\",\"feebe2fcc5c0fa9fb5f768a1dd3497a`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 801,
                  "startColumn": 245,
                  "endLine": 801,
                  "endColumn": 301,
                  "snippet": {
                    "text": "0d0d1e6a6bddb67a9cf3690c002818a016c59014636\").map(ka),\nyu=ua(dn),en=Array(3).concat(\"ece7f2a6bddb2b8cbe\",\"f1eef6bdc9e174a9cf0570b0\",\"f1eef6bdc9e174a9cf2b8cbe045a8d\",\"f1eef6d0d1e6a6bddb74a9cf2b8cbe045a8d\",\"f1eef6d0d1e6a6bddb74a9cf3690c00570b0034e7b\",\"fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0034e7b\",\"fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0045a8d023858\").map(ka),zu=ua(en),fn=Array(3).concat(\"e7e1efc994c7dd1c77\",\"f1eef6d7b5d8df65b0ce1256\",\"f1eef6d7b5d8df65b0dd1c77980043\",\"f1eef6d4b9dac994c7df65b0dd1c77980043\",\"f1eef6d4b9dac994c7df65b0e7298ace125691003f\",\n\"f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125691003f\",\"f7f4f9e7e1efd4b9dac994c7df65b0e7298ace12569",
                    "rendered": {
                      "text": "0d0d1e6a6bddb67a9cf3690c002818a016c59014636\").map(ka),\nyu=ua(dn),en=Array(3).concat(\"ece7f2a6bddb2b8cbe\",\"f1eef6bdc9e174a9cf0570b0\",\"f1eef6bdc9e174a9cf2b8cbe045a8d\",\"f1eef6d0d1e6a6bddb74a9cf2b8cbe045a8d\",\"f1eef6d0d1e6a6bddb74a9cf3690c00570b0034e7b\",\"fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0034e7b\",\"fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0045a8d023858\").map(ka),zu=ua(en),fn=Array(3).concat(\"e7e1efc994c7dd1c77\",\"f1eef6d7b5d8df65b0ce1256\",\"f1eef6d7b5d8df65b0dd1c77980043\",\"f1eef6d4b9dac994c7df65b0dd1c77980043\",\"f1eef6d4b9dac994c7df65b0e7298ace125691003f\",\n\"f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125691003f\",\"f7f4f9e7e1efd4b9dac994c7df65b0e7298ace12569",
                      "markdown": "`0d0d1e6a6bddb67a9cf3690c002818a016c59014636\").map(ka),\nyu=ua(dn),en=Array(3).concat(\"ece7f2a6bddb2b8cbe\",\"f1eef6bdc9e174a9cf0570b0\",\"f1eef6bdc9e174a9cf2b8cbe045a8d\",\"f1eef6d0d1e6a6bddb74a9cf2b8cbe045a8d\",\"f1eef6d0d1e6a6bddb74a9cf3690c00570b0034e7b\",\"fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0034e7b\",\"fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0045a8d023858\").map(ka),zu=ua(en),fn=Array(3).concat(\"e7e1efc994c7dd1c77\",\"f1eef6d7b5d8df65b0ce1256\",\"f1eef6d7b5d8df65b0dd1c77980043\",\"f1eef6d4b9dac994c7df65b0dd1c77980043\",\"f1eef6d4b9dac994c7df65b0e7298ace125691003f\",\n\"f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125691003f\",\"f7f4f9e7e1efd4b9dac994c7df65b0e7298ace12569`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 801,
                  "startColumn": 194,
                  "endLine": 801,
                  "endColumn": 244,
                  "snippet": {
                    "text": "0d0d1e6a6bddb67a9cf3690c002818a016450\",\"fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016c59014636\").map(ka),\nyu=ua(dn),en=Array(3).concat(\"ece7f2a6bddb2b8cbe\",\"f1eef6bdc9e174a9cf0570b0\",\"f1eef6bdc9e174a9cf2b8cbe045a8d\",\"f1eef6d0d1e6a6bddb74a9cf2b8cbe045a8d\",\"f1eef6d0d1e6a6bddb74a9cf3690c00570b0034e7b\",\"fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0034e7b\",\"fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0045a8d023858\").map(ka),zu=ua(en),fn=Array(3).concat(\"e7e1efc994c7dd1c77\",\"f1eef6d7b5d8df65b0ce1256\",\"f1eef6d7b5d8df65b0dd1c77980043\",\"f1eef6d4b9dac994c7df65b0dd1c77980043\",\"f1eef6d4b9dac994c7df65b0e7298ace125691003f\",\n\"f7f4f9e7e1efd4b9dac994c7df65b0e7298ac",
                    "rendered": {
                      "text": "0d0d1e6a6bddb67a9cf3690c002818a016450\",\"fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016c59014636\").map(ka),\nyu=ua(dn),en=Array(3).concat(\"ece7f2a6bddb2b8cbe\",\"f1eef6bdc9e174a9cf0570b0\",\"f1eef6bdc9e174a9cf2b8cbe045a8d\",\"f1eef6d0d1e6a6bddb74a9cf2b8cbe045a8d\",\"f1eef6d0d1e6a6bddb74a9cf3690c00570b0034e7b\",\"fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0034e7b\",\"fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0045a8d023858\").map(ka),zu=ua(en),fn=Array(3).concat(\"e7e1efc994c7dd1c77\",\"f1eef6d7b5d8df65b0ce1256\",\"f1eef6d7b5d8df65b0dd1c77980043\",\"f1eef6d4b9dac994c7df65b0dd1c77980043\",\"f1eef6d4b9dac994c7df65b0e7298ace125691003f\",\n\"f7f4f9e7e1efd4b9dac994c7df65b0e7298ac",
                      "markdown": "`0d0d1e6a6bddb67a9cf3690c002818a016450\",\"fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016c59014636\").map(ka),\nyu=ua(dn),en=Array(3).concat(\"ece7f2a6bddb2b8cbe\",\"f1eef6bdc9e174a9cf0570b0\",\"f1eef6bdc9e174a9cf2b8cbe045a8d\",\"f1eef6d0d1e6a6bddb74a9cf2b8cbe045a8d\",\"f1eef6d0d1e6a6bddb74a9cf3690c00570b0034e7b\",\"fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0034e7b\",\"fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0045a8d023858\").map(ka),zu=ua(en),fn=Array(3).concat(\"e7e1efc994c7dd1c77\",\"f1eef6d7b5d8df65b0ce1256\",\"f1eef6d7b5d8df65b0dd1c77980043\",\"f1eef6d4b9dac994c7df65b0dd1c77980043\",\"f1eef6d4b9dac994c7df65b0e7298ace125691003f\",\n\"f7f4f9e7e1efd4b9dac994c7df65b0e7298ac`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 801,
                  "startColumn": 149,
                  "endLine": 801,
                  "endColumn": 193,
                  "snippet": {
                    "text": "6a6bddb67a9cf3690c002818a016450\",\"fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016450\",\"fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016c59014636\").map(ka),\nyu=ua(dn),en=Array(3).concat(\"ece7f2a6bddb2b8cbe\",\"f1eef6bdc9e174a9cf0570b0\",\"f1eef6bdc9e174a9cf2b8cbe045a8d\",\"f1eef6d0d1e6a6bddb74a9cf2b8cbe045a8d\",\"f1eef6d0d1e6a6bddb74a9cf3690c00570b0034e7b\",\"fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0034e7b\",\"fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0045a8d023858\").map(ka),zu=ua(en),fn=Array(3).concat(\"e7e1efc994c7dd1c77\",\"f1eef6d7b5d8df65b0ce1256\",\"f1eef6d7b5d8df65b0dd1c77980043\",\"f1eef6d4b9dac994c7df65b0dd1c77980043\",\"f1eef6d4b9dac994c7df65b0e7298ace",
                    "rendered": {
                      "text": "6a6bddb67a9cf3690c002818a016450\",\"fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016450\",\"fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016c59014636\").map(ka),\nyu=ua(dn),en=Array(3).concat(\"ece7f2a6bddb2b8cbe\",\"f1eef6bdc9e174a9cf0570b0\",\"f1eef6bdc9e174a9cf2b8cbe045a8d\",\"f1eef6d0d1e6a6bddb74a9cf2b8cbe045a8d\",\"f1eef6d0d1e6a6bddb74a9cf3690c00570b0034e7b\",\"fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0034e7b\",\"fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0045a8d023858\").map(ka),zu=ua(en),fn=Array(3).concat(\"e7e1efc994c7dd1c77\",\"f1eef6d7b5d8df65b0ce1256\",\"f1eef6d7b5d8df65b0dd1c77980043\",\"f1eef6d4b9dac994c7df65b0dd1c77980043\",\"f1eef6d4b9dac994c7df65b0e7298ace",
                      "markdown": "`6a6bddb67a9cf3690c002818a016450\",\"fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016450\",\"fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016c59014636\").map(ka),\nyu=ua(dn),en=Array(3).concat(\"ece7f2a6bddb2b8cbe\",\"f1eef6bdc9e174a9cf0570b0\",\"f1eef6bdc9e174a9cf2b8cbe045a8d\",\"f1eef6d0d1e6a6bddb74a9cf2b8cbe045a8d\",\"f1eef6d0d1e6a6bddb74a9cf3690c00570b0034e7b\",\"fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0034e7b\",\"fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0045a8d023858\").map(ka),zu=ua(en),fn=Array(3).concat(\"e7e1efc994c7dd1c77\",\"f1eef6d7b5d8df65b0ce1256\",\"f1eef6d7b5d8df65b0dd1c77980043\",\"f1eef6d4b9dac994c7df65b0dd1c77980043\",\"f1eef6d4b9dac994c7df65b0e7298ace`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 800,
                  "startColumn": 479,
                  "endLine": 800,
                  "endColumn": 535,
                  "snippet": {
                    "text": "c8fdd49efdbb84fc8d59ef6548d7301fb300007f0000\").map(ka),xu=ua(cn),dn=Array(3).concat(\"ece2f0a6bddb1c9099\",\"f6eff7bdc9e167a9cf02818a\",\"f6eff7bdc9e167a9cf1c9099016c59\",\"f6eff7d0d1e6a6bddb67a9cf1c9099016c59\",\"f6eff7d0d1e6a6bddb67a9cf3690c002818a016450\",\"fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016450\",\"fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016c59014636\").map(ka),\nyu=ua(dn),en=Array(3).concat(\"ece7f2a6bddb2b8cbe\",\"f1eef6bdc9e174a9cf0570b0\",\"f1eef6bdc9e174a9cf2b8cbe045a8d\",\"f1eef6d0d1e6a6bddb74a9cf2b8cbe045a8d\",\"f1eef6d0d1e6a6bddb74a9cf3690c00570b0034e7b\",\"fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0034e7b\",\"fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b00",
                    "rendered": {
                      "text": "c8fdd49efdbb84fc8d59ef6548d7301fb300007f0000\").map(ka),xu=ua(cn),dn=Array(3).concat(\"ece2f0a6bddb1c9099\",\"f6eff7bdc9e167a9cf02818a\",\"f6eff7bdc9e167a9cf1c9099016c59\",\"f6eff7d0d1e6a6bddb67a9cf1c9099016c59\",\"f6eff7d0d1e6a6bddb67a9cf3690c002818a016450\",\"fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016450\",\"fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016c59014636\").map(ka),\nyu=ua(dn),en=Array(3).concat(\"ece7f2a6bddb2b8cbe\",\"f1eef6bdc9e174a9cf0570b0\",\"f1eef6bdc9e174a9cf2b8cbe045a8d\",\"f1eef6d0d1e6a6bddb74a9cf2b8cbe045a8d\",\"f1eef6d0d1e6a6bddb74a9cf3690c00570b0034e7b\",\"fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0034e7b\",\"fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b00",
                      "markdown": "`c8fdd49efdbb84fc8d59ef6548d7301fb300007f0000\").map(ka),xu=ua(cn),dn=Array(3).concat(\"ece2f0a6bddb1c9099\",\"f6eff7bdc9e167a9cf02818a\",\"f6eff7bdc9e167a9cf1c9099016c59\",\"f6eff7d0d1e6a6bddb67a9cf1c9099016c59\",\"f6eff7d0d1e6a6bddb67a9cf3690c002818a016450\",\"fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016450\",\"fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016c59014636\").map(ka),\nyu=ua(dn),en=Array(3).concat(\"ece7f2a6bddb2b8cbe\",\"f1eef6bdc9e174a9cf0570b0\",\"f1eef6bdc9e174a9cf2b8cbe045a8d\",\"f1eef6d0d1e6a6bddb74a9cf2b8cbe045a8d\",\"f1eef6d0d1e6a6bddb74a9cf3690c00570b0034e7b\",\"fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0034e7b\",\"fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b00`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 800,
                  "startColumn": 428,
                  "endLine": 800,
                  "endColumn": 478,
                  "snippet": {
                    "text": "c8fdd49efdbb84fc8d59ef6548d7301f990000\",\"fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301fb300007f0000\").map(ka),xu=ua(cn),dn=Array(3).concat(\"ece2f0a6bddb1c9099\",\"f6eff7bdc9e167a9cf02818a\",\"f6eff7bdc9e167a9cf1c9099016c59\",\"f6eff7d0d1e6a6bddb67a9cf1c9099016c59\",\"f6eff7d0d1e6a6bddb67a9cf3690c002818a016450\",\"fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016450\",\"fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016c59014636\").map(ka),\nyu=ua(dn),en=Array(3).concat(\"ece7f2a6bddb2b8cbe\",\"f1eef6bdc9e174a9cf0570b0\",\"f1eef6bdc9e174a9cf2b8cbe045a8d\",\"f1eef6d0d1e6a6bddb74a9cf2b8cbe045a8d\",\"f1eef6d0d1e6a6bddb74a9cf3690c00570b0034e7b\",\"fff7fbece7f2d0d1e6a6bddb74a9cf3690c00",
                    "rendered": {
                      "text": "c8fdd49efdbb84fc8d59ef6548d7301f990000\",\"fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301fb300007f0000\").map(ka),xu=ua(cn),dn=Array(3).concat(\"ece2f0a6bddb1c9099\",\"f6eff7bdc9e167a9cf02818a\",\"f6eff7bdc9e167a9cf1c9099016c59\",\"f6eff7d0d1e6a6bddb67a9cf1c9099016c59\",\"f6eff7d0d1e6a6bddb67a9cf3690c002818a016450\",\"fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016450\",\"fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016c59014636\").map(ka),\nyu=ua(dn),en=Array(3).concat(\"ece7f2a6bddb2b8cbe\",\"f1eef6bdc9e174a9cf0570b0\",\"f1eef6bdc9e174a9cf2b8cbe045a8d\",\"f1eef6d0d1e6a6bddb74a9cf2b8cbe045a8d\",\"f1eef6d0d1e6a6bddb74a9cf3690c00570b0034e7b\",\"fff7fbece7f2d0d1e6a6bddb74a9cf3690c00",
                      "markdown": "`c8fdd49efdbb84fc8d59ef6548d7301f990000\",\"fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301fb300007f0000\").map(ka),xu=ua(cn),dn=Array(3).concat(\"ece2f0a6bddb1c9099\",\"f6eff7bdc9e167a9cf02818a\",\"f6eff7bdc9e167a9cf1c9099016c59\",\"f6eff7d0d1e6a6bddb67a9cf1c9099016c59\",\"f6eff7d0d1e6a6bddb67a9cf3690c002818a016450\",\"fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016450\",\"fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016c59014636\").map(ka),\nyu=ua(dn),en=Array(3).concat(\"ece7f2a6bddb2b8cbe\",\"f1eef6bdc9e174a9cf0570b0\",\"f1eef6bdc9e174a9cf2b8cbe045a8d\",\"f1eef6d0d1e6a6bddb74a9cf2b8cbe045a8d\",\"f1eef6d0d1e6a6bddb74a9cf3690c00570b0034e7b\",\"fff7fbece7f2d0d1e6a6bddb74a9cf3690c00`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 800,
                  "startColumn": 383,
                  "endLine": 800,
                  "endColumn": 427,
                  "snippet": {
                    "text": "9efdbb84fc8d59ef6548d7301f990000\",\"fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301f990000\",\"fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301fb300007f0000\").map(ka),xu=ua(cn),dn=Array(3).concat(\"ece2f0a6bddb1c9099\",\"f6eff7bdc9e167a9cf02818a\",\"f6eff7bdc9e167a9cf1c9099016c59\",\"f6eff7d0d1e6a6bddb67a9cf1c9099016c59\",\"f6eff7d0d1e6a6bddb67a9cf3690c002818a016450\",\"fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016450\",\"fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016c59014636\").map(ka),\nyu=ua(dn),en=Array(3).concat(\"ece7f2a6bddb2b8cbe\",\"f1eef6bdc9e174a9cf0570b0\",\"f1eef6bdc9e174a9cf2b8cbe045a8d\",\"f1eef6d0d1e6a6bddb74a9cf2b8cbe045a8d\",\"f1eef6d0d1e6a6bddb74a9cf3690c00",
                    "rendered": {
                      "text": "9efdbb84fc8d59ef6548d7301f990000\",\"fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301f990000\",\"fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301fb300007f0000\").map(ka),xu=ua(cn),dn=Array(3).concat(\"ece2f0a6bddb1c9099\",\"f6eff7bdc9e167a9cf02818a\",\"f6eff7bdc9e167a9cf1c9099016c59\",\"f6eff7d0d1e6a6bddb67a9cf1c9099016c59\",\"f6eff7d0d1e6a6bddb67a9cf3690c002818a016450\",\"fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016450\",\"fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016c59014636\").map(ka),\nyu=ua(dn),en=Array(3).concat(\"ece7f2a6bddb2b8cbe\",\"f1eef6bdc9e174a9cf0570b0\",\"f1eef6bdc9e174a9cf2b8cbe045a8d\",\"f1eef6d0d1e6a6bddb74a9cf2b8cbe045a8d\",\"f1eef6d0d1e6a6bddb74a9cf3690c00",
                      "markdown": "`9efdbb84fc8d59ef6548d7301f990000\",\"fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301f990000\",\"fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301fb300007f0000\").map(ka),xu=ua(cn),dn=Array(3).concat(\"ece2f0a6bddb1c9099\",\"f6eff7bdc9e167a9cf02818a\",\"f6eff7bdc9e167a9cf1c9099016c59\",\"f6eff7d0d1e6a6bddb67a9cf1c9099016c59\",\"f6eff7d0d1e6a6bddb67a9cf3690c002818a016450\",\"fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016450\",\"fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016c59014636\").map(ka),\nyu=ua(dn),en=Array(3).concat(\"ece7f2a6bddb2b8cbe\",\"f1eef6bdc9e174a9cf0570b0\",\"f1eef6bdc9e174a9cf2b8cbe045a8d\",\"f1eef6d0d1e6a6bddb74a9cf2b8cbe045a8d\",\"f1eef6d0d1e6a6bddb74a9cf3690c00`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 800,
                  "startColumn": 168,
                  "endLine": 800,
                  "endColumn": 224,
                  "snippet": {
                    "text": "bccebc5a8ddb57bccc44eb3d32b8cbe0868ac084081\").map(ka),wu=ua(bn),cn=Array(3).concat(\"fee8c8fdbb84e34a33\",\"fef0d9fdcc8afc8d59d7301f\",\n\"fef0d9fdcc8afc8d59e34a33b30000\",\"fef0d9fdd49efdbb84fc8d59e34a33b30000\",\"fef0d9fdd49efdbb84fc8d59ef6548d7301f990000\",\"fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301f990000\",\"fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301fb300007f0000\").map(ka),xu=ua(cn),dn=Array(3).concat(\"ece2f0a6bddb1c9099\",\"f6eff7bdc9e167a9cf02818a\",\"f6eff7bdc9e167a9cf1c9099016c59\",\"f6eff7d0d1e6a6bddb67a9cf1c9099016c59\",\"f6eff7d0d1e6a6bddb67a9cf3690c002818a016450\",\"fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016450\",\"fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a01",
                    "rendered": {
                      "text": "bccebc5a8ddb57bccc44eb3d32b8cbe0868ac084081\").map(ka),wu=ua(bn),cn=Array(3).concat(\"fee8c8fdbb84e34a33\",\"fef0d9fdcc8afc8d59d7301f\",\n\"fef0d9fdcc8afc8d59e34a33b30000\",\"fef0d9fdd49efdbb84fc8d59e34a33b30000\",\"fef0d9fdd49efdbb84fc8d59ef6548d7301f990000\",\"fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301f990000\",\"fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301fb300007f0000\").map(ka),xu=ua(cn),dn=Array(3).concat(\"ece2f0a6bddb1c9099\",\"f6eff7bdc9e167a9cf02818a\",\"f6eff7bdc9e167a9cf1c9099016c59\",\"f6eff7d0d1e6a6bddb67a9cf1c9099016c59\",\"f6eff7d0d1e6a6bddb67a9cf3690c002818a016450\",\"fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016450\",\"fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a01",
                      "markdown": "`bccebc5a8ddb57bccc44eb3d32b8cbe0868ac084081\").map(ka),wu=ua(bn),cn=Array(3).concat(\"fee8c8fdbb84e34a33\",\"fef0d9fdcc8afc8d59d7301f\",\n\"fef0d9fdcc8afc8d59e34a33b30000\",\"fef0d9fdd49efdbb84fc8d59e34a33b30000\",\"fef0d9fdd49efdbb84fc8d59ef6548d7301f990000\",\"fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301f990000\",\"fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301fb300007f0000\").map(ka),xu=ua(cn),dn=Array(3).concat(\"ece2f0a6bddb1c9099\",\"f6eff7bdc9e167a9cf02818a\",\"f6eff7bdc9e167a9cf1c9099016c59\",\"f6eff7d0d1e6a6bddb67a9cf1c9099016c59\",\"f6eff7d0d1e6a6bddb67a9cf3690c002818a016450\",\"fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016450\",\"fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a01`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 800,
                  "startColumn": 117,
                  "endLine": 800,
                  "endColumn": 167,
                  "snippet": {
                    "text": "bccebc5a8ddb57bccc44eb3d32b8cbe08589e\",\"f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe0868ac084081\").map(ka),wu=ua(bn),cn=Array(3).concat(\"fee8c8fdbb84e34a33\",\"fef0d9fdcc8afc8d59d7301f\",\n\"fef0d9fdcc8afc8d59e34a33b30000\",\"fef0d9fdd49efdbb84fc8d59e34a33b30000\",\"fef0d9fdd49efdbb84fc8d59ef6548d7301f990000\",\"fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301f990000\",\"fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301fb300007f0000\").map(ka),xu=ua(cn),dn=Array(3).concat(\"ece2f0a6bddb1c9099\",\"f6eff7bdc9e167a9cf02818a\",\"f6eff7bdc9e167a9cf1c9099016c59\",\"f6eff7d0d1e6a6bddb67a9cf1c9099016c59\",\"f6eff7d0d1e6a6bddb67a9cf3690c002818a016450\",\"fff7fbece2f0d0d1e6a6bddb67a9cf3690c002",
                    "rendered": {
                      "text": "bccebc5a8ddb57bccc44eb3d32b8cbe08589e\",\"f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe0868ac084081\").map(ka),wu=ua(bn),cn=Array(3).concat(\"fee8c8fdbb84e34a33\",\"fef0d9fdcc8afc8d59d7301f\",\n\"fef0d9fdcc8afc8d59e34a33b30000\",\"fef0d9fdd49efdbb84fc8d59e34a33b30000\",\"fef0d9fdd49efdbb84fc8d59ef6548d7301f990000\",\"fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301f990000\",\"fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301fb300007f0000\").map(ka),xu=ua(cn),dn=Array(3).concat(\"ece2f0a6bddb1c9099\",\"f6eff7bdc9e167a9cf02818a\",\"f6eff7bdc9e167a9cf1c9099016c59\",\"f6eff7d0d1e6a6bddb67a9cf1c9099016c59\",\"f6eff7d0d1e6a6bddb67a9cf3690c002818a016450\",\"fff7fbece2f0d0d1e6a6bddb67a9cf3690c002",
                      "markdown": "`bccebc5a8ddb57bccc44eb3d32b8cbe08589e\",\"f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe0868ac084081\").map(ka),wu=ua(bn),cn=Array(3).concat(\"fee8c8fdbb84e34a33\",\"fef0d9fdcc8afc8d59d7301f\",\n\"fef0d9fdcc8afc8d59e34a33b30000\",\"fef0d9fdd49efdbb84fc8d59e34a33b30000\",\"fef0d9fdd49efdbb84fc8d59ef6548d7301f990000\",\"fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301f990000\",\"fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301fb300007f0000\").map(ka),xu=ua(cn),dn=Array(3).concat(\"ece2f0a6bddb1c9099\",\"f6eff7bdc9e167a9cf02818a\",\"f6eff7bdc9e167a9cf1c9099016c59\",\"f6eff7d0d1e6a6bddb67a9cf1c9099016c59\",\"f6eff7d0d1e6a6bddb67a9cf3690c002818a016450\",\"fff7fbece2f0d0d1e6a6bddb67a9cf3690c002`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 800,
                  "startColumn": 72,
                  "endLine": 800,
                  "endColumn": 116,
                  "snippet": {
                    "text": "5a8ddb57bccc44eb3d32b8cbe08589e\",\"f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe08589e\",\"f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe0868ac084081\").map(ka),wu=ua(bn),cn=Array(3).concat(\"fee8c8fdbb84e34a33\",\"fef0d9fdcc8afc8d59d7301f\",\n\"fef0d9fdcc8afc8d59e34a33b30000\",\"fef0d9fdd49efdbb84fc8d59e34a33b30000\",\"fef0d9fdd49efdbb84fc8d59ef6548d7301f990000\",\"fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301f990000\",\"fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301fb300007f0000\").map(ka),xu=ua(cn),dn=Array(3).concat(\"ece2f0a6bddb1c9099\",\"f6eff7bdc9e167a9cf02818a\",\"f6eff7bdc9e167a9cf1c9099016c59\",\"f6eff7d0d1e6a6bddb67a9cf1c9099016c59\",\"f6eff7d0d1e6a6bddb67a9cf3690c002",
                    "rendered": {
                      "text": "5a8ddb57bccc44eb3d32b8cbe08589e\",\"f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe08589e\",\"f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe0868ac084081\").map(ka),wu=ua(bn),cn=Array(3).concat(\"fee8c8fdbb84e34a33\",\"fef0d9fdcc8afc8d59d7301f\",\n\"fef0d9fdcc8afc8d59e34a33b30000\",\"fef0d9fdd49efdbb84fc8d59e34a33b30000\",\"fef0d9fdd49efdbb84fc8d59ef6548d7301f990000\",\"fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301f990000\",\"fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301fb300007f0000\").map(ka),xu=ua(cn),dn=Array(3).concat(\"ece2f0a6bddb1c9099\",\"f6eff7bdc9e167a9cf02818a\",\"f6eff7bdc9e167a9cf1c9099016c59\",\"f6eff7d0d1e6a6bddb67a9cf1c9099016c59\",\"f6eff7d0d1e6a6bddb67a9cf3690c002",
                      "markdown": "`5a8ddb57bccc44eb3d32b8cbe08589e\",\"f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe08589e\",\"f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe0868ac084081\").map(ka),wu=ua(bn),cn=Array(3).concat(\"fee8c8fdbb84e34a33\",\"fef0d9fdcc8afc8d59d7301f\",\n\"fef0d9fdcc8afc8d59e34a33b30000\",\"fef0d9fdd49efdbb84fc8d59e34a33b30000\",\"fef0d9fdd49efdbb84fc8d59ef6548d7301f990000\",\"fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301f990000\",\"fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301fb300007f0000\").map(ka),xu=ua(cn),dn=Array(3).concat(\"ece2f0a6bddb1c9099\",\"f6eff7bdc9e167a9cf02818a\",\"f6eff7bdc9e167a9cf1c9099016c59\",\"f6eff7d0d1e6a6bddb67a9cf1c9099016c59\",\"f6eff7d0d1e6a6bddb67a9cf3690c002`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 799,
                  "startColumn": 362,
                  "endLine": 799,
                  "endColumn": 418,
                  "snippet": {
                    "text": "f4bfd3e69ebcda8c96c68c6bb188419d810f7c4d004b\").map(ka),vu=ua(an),bn=Array(3).concat(\"e0f3dba8ddb543a2ca\",\"f0f9e8bae4bc7bccc42b8cbe\",\"f0f9e8bae4bc7bccc443a2ca0868ac\",\"f0f9e8ccebc5a8ddb57bccc443a2ca0868ac\",\"f0f9e8ccebc5a8ddb57bccc44eb3d32b8cbe08589e\",\"f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe08589e\",\"f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe0868ac084081\").map(ka),wu=ua(bn),cn=Array(3).concat(\"fee8c8fdbb84e34a33\",\"fef0d9fdcc8afc8d59d7301f\",\n\"fef0d9fdcc8afc8d59e34a33b30000\",\"fef0d9fdd49efdbb84fc8d59e34a33b30000\",\"fef0d9fdd49efdbb84fc8d59ef6548d7301f990000\",\"fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301f990000\",\"fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301fb",
                    "rendered": {
                      "text": "f4bfd3e69ebcda8c96c68c6bb188419d810f7c4d004b\").map(ka),vu=ua(an),bn=Array(3).concat(\"e0f3dba8ddb543a2ca\",\"f0f9e8bae4bc7bccc42b8cbe\",\"f0f9e8bae4bc7bccc443a2ca0868ac\",\"f0f9e8ccebc5a8ddb57bccc443a2ca0868ac\",\"f0f9e8ccebc5a8ddb57bccc44eb3d32b8cbe08589e\",\"f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe08589e\",\"f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe0868ac084081\").map(ka),wu=ua(bn),cn=Array(3).concat(\"fee8c8fdbb84e34a33\",\"fef0d9fdcc8afc8d59d7301f\",\n\"fef0d9fdcc8afc8d59e34a33b30000\",\"fef0d9fdd49efdbb84fc8d59e34a33b30000\",\"fef0d9fdd49efdbb84fc8d59ef6548d7301f990000\",\"fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301f990000\",\"fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301fb",
                      "markdown": "`f4bfd3e69ebcda8c96c68c6bb188419d810f7c4d004b\").map(ka),vu=ua(an),bn=Array(3).concat(\"e0f3dba8ddb543a2ca\",\"f0f9e8bae4bc7bccc42b8cbe\",\"f0f9e8bae4bc7bccc443a2ca0868ac\",\"f0f9e8ccebc5a8ddb57bccc443a2ca0868ac\",\"f0f9e8ccebc5a8ddb57bccc44eb3d32b8cbe08589e\",\"f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe08589e\",\"f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe0868ac084081\").map(ka),wu=ua(bn),cn=Array(3).concat(\"fee8c8fdbb84e34a33\",\"fef0d9fdcc8afc8d59d7301f\",\n\"fef0d9fdcc8afc8d59e34a33b30000\",\"fef0d9fdd49efdbb84fc8d59e34a33b30000\",\"fef0d9fdd49efdbb84fc8d59ef6548d7301f990000\",\"fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301f990000\",\"fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301fb`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 799,
                  "startColumn": 311,
                  "endLine": 799,
                  "endColumn": 361,
                  "snippet": {
                    "text": "f4bfd3e69ebcda8c96c68c6bb188419d6e016b\",\"f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d810f7c4d004b\").map(ka),vu=ua(an),bn=Array(3).concat(\"e0f3dba8ddb543a2ca\",\"f0f9e8bae4bc7bccc42b8cbe\",\"f0f9e8bae4bc7bccc443a2ca0868ac\",\"f0f9e8ccebc5a8ddb57bccc443a2ca0868ac\",\"f0f9e8ccebc5a8ddb57bccc44eb3d32b8cbe08589e\",\"f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe08589e\",\"f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe0868ac084081\").map(ka),wu=ua(bn),cn=Array(3).concat(\"fee8c8fdbb84e34a33\",\"fef0d9fdcc8afc8d59d7301f\",\n\"fef0d9fdcc8afc8d59e34a33b30000\",\"fef0d9fdd49efdbb84fc8d59e34a33b30000\",\"fef0d9fdd49efdbb84fc8d59ef6548d7301f990000\",\"fff7ecfee8c8fdd49efdbb84fc8d59ef6548d",
                    "rendered": {
                      "text": "f4bfd3e69ebcda8c96c68c6bb188419d6e016b\",\"f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d810f7c4d004b\").map(ka),vu=ua(an),bn=Array(3).concat(\"e0f3dba8ddb543a2ca\",\"f0f9e8bae4bc7bccc42b8cbe\",\"f0f9e8bae4bc7bccc443a2ca0868ac\",\"f0f9e8ccebc5a8ddb57bccc443a2ca0868ac\",\"f0f9e8ccebc5a8ddb57bccc44eb3d32b8cbe08589e\",\"f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe08589e\",\"f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe0868ac084081\").map(ka),wu=ua(bn),cn=Array(3).concat(\"fee8c8fdbb84e34a33\",\"fef0d9fdcc8afc8d59d7301f\",\n\"fef0d9fdcc8afc8d59e34a33b30000\",\"fef0d9fdd49efdbb84fc8d59e34a33b30000\",\"fef0d9fdd49efdbb84fc8d59ef6548d7301f990000\",\"fff7ecfee8c8fdd49efdbb84fc8d59ef6548d",
                      "markdown": "`f4bfd3e69ebcda8c96c68c6bb188419d6e016b\",\"f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d810f7c4d004b\").map(ka),vu=ua(an),bn=Array(3).concat(\"e0f3dba8ddb543a2ca\",\"f0f9e8bae4bc7bccc42b8cbe\",\"f0f9e8bae4bc7bccc443a2ca0868ac\",\"f0f9e8ccebc5a8ddb57bccc443a2ca0868ac\",\"f0f9e8ccebc5a8ddb57bccc44eb3d32b8cbe08589e\",\"f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe08589e\",\"f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe0868ac084081\").map(ka),wu=ua(bn),cn=Array(3).concat(\"fee8c8fdbb84e34a33\",\"fef0d9fdcc8afc8d59d7301f\",\n\"fef0d9fdcc8afc8d59e34a33b30000\",\"fef0d9fdd49efdbb84fc8d59e34a33b30000\",\"fef0d9fdd49efdbb84fc8d59ef6548d7301f990000\",\"fff7ecfee8c8fdd49efdbb84fc8d59ef6548d`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 799,
                  "startColumn": 266,
                  "endLine": 799,
                  "endColumn": 310,
                  "snippet": {
                    "text": "69ebcda8c96c68c6bb188419d6e016b\",\n\"f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d6e016b\",\"f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d810f7c4d004b\").map(ka),vu=ua(an),bn=Array(3).concat(\"e0f3dba8ddb543a2ca\",\"f0f9e8bae4bc7bccc42b8cbe\",\"f0f9e8bae4bc7bccc443a2ca0868ac\",\"f0f9e8ccebc5a8ddb57bccc443a2ca0868ac\",\"f0f9e8ccebc5a8ddb57bccc44eb3d32b8cbe08589e\",\"f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe08589e\",\"f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe0868ac084081\").map(ka),wu=ua(bn),cn=Array(3).concat(\"fee8c8fdbb84e34a33\",\"fef0d9fdcc8afc8d59d7301f\",\n\"fef0d9fdcc8afc8d59e34a33b30000\",\"fef0d9fdd49efdbb84fc8d59e34a33b30000\",\"fef0d9fdd49efdbb84fc8d59ef6548d",
                    "rendered": {
                      "text": "69ebcda8c96c68c6bb188419d6e016b\",\n\"f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d6e016b\",\"f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d810f7c4d004b\").map(ka),vu=ua(an),bn=Array(3).concat(\"e0f3dba8ddb543a2ca\",\"f0f9e8bae4bc7bccc42b8cbe\",\"f0f9e8bae4bc7bccc443a2ca0868ac\",\"f0f9e8ccebc5a8ddb57bccc443a2ca0868ac\",\"f0f9e8ccebc5a8ddb57bccc44eb3d32b8cbe08589e\",\"f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe08589e\",\"f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe0868ac084081\").map(ka),wu=ua(bn),cn=Array(3).concat(\"fee8c8fdbb84e34a33\",\"fef0d9fdcc8afc8d59d7301f\",\n\"fef0d9fdcc8afc8d59e34a33b30000\",\"fef0d9fdd49efdbb84fc8d59e34a33b30000\",\"fef0d9fdd49efdbb84fc8d59ef6548d",
                      "markdown": "`69ebcda8c96c68c6bb188419d6e016b\",\n\"f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d6e016b\",\"f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d810f7c4d004b\").map(ka),vu=ua(an),bn=Array(3).concat(\"e0f3dba8ddb543a2ca\",\"f0f9e8bae4bc7bccc42b8cbe\",\"f0f9e8bae4bc7bccc443a2ca0868ac\",\"f0f9e8ccebc5a8ddb57bccc443a2ca0868ac\",\"f0f9e8ccebc5a8ddb57bccc44eb3d32b8cbe08589e\",\"f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe08589e\",\"f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe0868ac084081\").map(ka),wu=ua(bn),cn=Array(3).concat(\"fee8c8fdbb84e34a33\",\"fef0d9fdcc8afc8d59d7301f\",\n\"fef0d9fdcc8afc8d59e34a33b30000\",\"fef0d9fdd49efdbb84fc8d59e34a33b30000\",\"fef0d9fdd49efdbb84fc8d59ef6548d`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 799,
                  "startColumn": 51,
                  "endLine": 799,
                  "endColumn": 107,
                  "snippet": {
                    "text": "9ccece699d8c966c2a441ae76238b45006d2c00441b\").map(ka),uu=ua($m),an=Array(3).concat(\"e0ecf49ebcda8856a7\",\"edf8fbb3cde38c96c688419d\",\"edf8fbb3cde38c96c68856a7810f7c\",\"edf8fbbfd3e69ebcda8c96c68856a7810f7c\",\"edf8fbbfd3e69ebcda8c96c68c6bb188419d6e016b\",\n\"f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d6e016b\",\"f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d810f7c4d004b\").map(ka),vu=ua(an),bn=Array(3).concat(\"e0f3dba8ddb543a2ca\",\"f0f9e8bae4bc7bccc42b8cbe\",\"f0f9e8bae4bc7bccc443a2ca0868ac\",\"f0f9e8ccebc5a8ddb57bccc443a2ca0868ac\",\"f0f9e8ccebc5a8ddb57bccc44eb3d32b8cbe08589e\",\"f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe08589e\",\"f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe08",
                    "rendered": {
                      "text": "9ccece699d8c966c2a441ae76238b45006d2c00441b\").map(ka),uu=ua($m),an=Array(3).concat(\"e0ecf49ebcda8856a7\",\"edf8fbb3cde38c96c688419d\",\"edf8fbb3cde38c96c68856a7810f7c\",\"edf8fbbfd3e69ebcda8c96c68856a7810f7c\",\"edf8fbbfd3e69ebcda8c96c68c6bb188419d6e016b\",\n\"f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d6e016b\",\"f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d810f7c4d004b\").map(ka),vu=ua(an),bn=Array(3).concat(\"e0f3dba8ddb543a2ca\",\"f0f9e8bae4bc7bccc42b8cbe\",\"f0f9e8bae4bc7bccc443a2ca0868ac\",\"f0f9e8ccebc5a8ddb57bccc443a2ca0868ac\",\"f0f9e8ccebc5a8ddb57bccc44eb3d32b8cbe08589e\",\"f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe08589e\",\"f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe08",
                      "markdown": "`9ccece699d8c966c2a441ae76238b45006d2c00441b\").map(ka),uu=ua($m),an=Array(3).concat(\"e0ecf49ebcda8856a7\",\"edf8fbb3cde38c96c688419d\",\"edf8fbb3cde38c96c68856a7810f7c\",\"edf8fbbfd3e69ebcda8c96c68856a7810f7c\",\"edf8fbbfd3e69ebcda8c96c68c6bb188419d6e016b\",\n\"f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d6e016b\",\"f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d810f7c4d004b\").map(ka),vu=ua(an),bn=Array(3).concat(\"e0f3dba8ddb543a2ca\",\"f0f9e8bae4bc7bccc42b8cbe\",\"f0f9e8bae4bc7bccc443a2ca0868ac\",\"f0f9e8ccebc5a8ddb57bccc443a2ca0868ac\",\"f0f9e8ccebc5a8ddb57bccc44eb3d32b8cbe08589e\",\"f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe08589e\",\"f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe08`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 799,
                  "endLine": 799,
                  "endColumn": 50,
                  "snippet": {
                    "text": "9ccece699d8c966c2a441ae76238b45005824\",\"f7fcfde5f5f9ccece699d8c966c2a441ae76238b45006d2c00441b\").map(ka),uu=ua($m),an=Array(3).concat(\"e0ecf49ebcda8856a7\",\"edf8fbb3cde38c96c688419d\",\"edf8fbb3cde38c96c68856a7810f7c\",\"edf8fbbfd3e69ebcda8c96c68856a7810f7c\",\"edf8fbbfd3e69ebcda8c96c68c6bb188419d6e016b\",\n\"f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d6e016b\",\"f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d810f7c4d004b\").map(ka),vu=ua(an),bn=Array(3).concat(\"e0f3dba8ddb543a2ca\",\"f0f9e8bae4bc7bccc42b8cbe\",\"f0f9e8bae4bc7bccc443a2ca0868ac\",\"f0f9e8ccebc5a8ddb57bccc443a2ca0868ac\",\"f0f9e8ccebc5a8ddb57bccc44eb3d32b8cbe08589e\",\"f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b",
                    "rendered": {
                      "text": "9ccece699d8c966c2a441ae76238b45005824\",\"f7fcfde5f5f9ccece699d8c966c2a441ae76238b45006d2c00441b\").map(ka),uu=ua($m),an=Array(3).concat(\"e0ecf49ebcda8856a7\",\"edf8fbb3cde38c96c688419d\",\"edf8fbb3cde38c96c68856a7810f7c\",\"edf8fbbfd3e69ebcda8c96c68856a7810f7c\",\"edf8fbbfd3e69ebcda8c96c68c6bb188419d6e016b\",\n\"f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d6e016b\",\"f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d810f7c4d004b\").map(ka),vu=ua(an),bn=Array(3).concat(\"e0f3dba8ddb543a2ca\",\"f0f9e8bae4bc7bccc42b8cbe\",\"f0f9e8bae4bc7bccc443a2ca0868ac\",\"f0f9e8ccebc5a8ddb57bccc443a2ca0868ac\",\"f0f9e8ccebc5a8ddb57bccc44eb3d32b8cbe08589e\",\"f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b",
                      "markdown": "`9ccece699d8c966c2a441ae76238b45005824\",\"f7fcfde5f5f9ccece699d8c966c2a441ae76238b45006d2c00441b\").map(ka),uu=ua($m),an=Array(3).concat(\"e0ecf49ebcda8856a7\",\"edf8fbb3cde38c96c688419d\",\"edf8fbb3cde38c96c68856a7810f7c\",\"edf8fbbfd3e69ebcda8c96c68856a7810f7c\",\"edf8fbbfd3e69ebcda8c96c68c6bb188419d6e016b\",\n\"f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d6e016b\",\"f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d810f7c4d004b\").map(ka),vu=ua(an),bn=Array(3).concat(\"e0f3dba8ddb543a2ca\",\"f0f9e8bae4bc7bccc42b8cbe\",\"f0f9e8bae4bc7bccc443a2ca0868ac\",\"f0f9e8ccebc5a8ddb57bccc443a2ca0868ac\",\"f0f9e8ccebc5a8ddb57bccc44eb3d32b8cbe08589e\",\"f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 798,
                  "startColumn": 460,
                  "endLine": 798,
                  "endColumn": 504,
                  "snippet": {
                    "text": "e699d8c966c2a441ae76238b45005824\",\"f7fcfde5f5f9ccece699d8c966c2a441ae76238b45005824\",\"f7fcfde5f5f9ccece699d8c966c2a441ae76238b45006d2c00441b\").map(ka),uu=ua($m),an=Array(3).concat(\"e0ecf49ebcda8856a7\",\"edf8fbb3cde38c96c688419d\",\"edf8fbb3cde38c96c68856a7810f7c\",\"edf8fbbfd3e69ebcda8c96c68856a7810f7c\",\"edf8fbbfd3e69ebcda8c96c68c6bb188419d6e016b\",\n\"f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d6e016b\",\"f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d810f7c4d004b\").map(ka),vu=ua(an),bn=Array(3).concat(\"e0f3dba8ddb543a2ca\",\"f0f9e8bae4bc7bccc42b8cbe\",\"f0f9e8bae4bc7bccc443a2ca0868ac\",\"f0f9e8ccebc5a8ddb57bccc443a2ca0868ac\",\"f0f9e8ccebc5a8ddb57bccc44eb3d32",
                    "rendered": {
                      "text": "e699d8c966c2a441ae76238b45005824\",\"f7fcfde5f5f9ccece699d8c966c2a441ae76238b45005824\",\"f7fcfde5f5f9ccece699d8c966c2a441ae76238b45006d2c00441b\").map(ka),uu=ua($m),an=Array(3).concat(\"e0ecf49ebcda8856a7\",\"edf8fbb3cde38c96c688419d\",\"edf8fbb3cde38c96c68856a7810f7c\",\"edf8fbbfd3e69ebcda8c96c68856a7810f7c\",\"edf8fbbfd3e69ebcda8c96c68c6bb188419d6e016b\",\n\"f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d6e016b\",\"f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d810f7c4d004b\").map(ka),vu=ua(an),bn=Array(3).concat(\"e0f3dba8ddb543a2ca\",\"f0f9e8bae4bc7bccc42b8cbe\",\"f0f9e8bae4bc7bccc443a2ca0868ac\",\"f0f9e8ccebc5a8ddb57bccc443a2ca0868ac\",\"f0f9e8ccebc5a8ddb57bccc44eb3d32",
                      "markdown": "`e699d8c966c2a441ae76238b45005824\",\"f7fcfde5f5f9ccece699d8c966c2a441ae76238b45005824\",\"f7fcfde5f5f9ccece699d8c966c2a441ae76238b45006d2c00441b\").map(ka),uu=ua($m),an=Array(3).concat(\"e0ecf49ebcda8856a7\",\"edf8fbb3cde38c96c688419d\",\"edf8fbb3cde38c96c68856a7810f7c\",\"edf8fbbfd3e69ebcda8c96c68856a7810f7c\",\"edf8fbbfd3e69ebcda8c96c68c6bb188419d6e016b\",\n\"f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d6e016b\",\"f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d810f7c4d004b\").map(ka),vu=ua(an),bn=Array(3).concat(\"e0f3dba8ddb543a2ca\",\"f0f9e8bae4bc7bccc42b8cbe\",\"f0f9e8bae4bc7bccc443a2ca0868ac\",\"f0f9e8ccebc5a8ddb57bccc443a2ca0868ac\",\"f0f9e8ccebc5a8ddb57bccc44eb3d32`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 798,
                  "startColumn": 245,
                  "endLine": 798,
                  "endColumn": 301,
                  "snippet": {
                    "text": "1fee08bffffbfe6f598abdda466c2a53288bd5e4fa2\").map(ka),\ntu=ua(Zm),$m=Array(3).concat(\"e5f5f999d8c92ca25f\",\"edf8fbb2e2e266c2a4238b45\",\"edf8fbb2e2e266c2a42ca25f006d2c\",\"edf8fbccece699d8c966c2a42ca25f006d2c\",\"edf8fbccece699d8c966c2a441ae76238b45005824\",\"f7fcfde5f5f9ccece699d8c966c2a441ae76238b45005824\",\"f7fcfde5f5f9ccece699d8c966c2a441ae76238b45006d2c00441b\").map(ka),uu=ua($m),an=Array(3).concat(\"e0ecf49ebcda8856a7\",\"edf8fbb3cde38c96c688419d\",\"edf8fbb3cde38c96c68856a7810f7c\",\"edf8fbbfd3e69ebcda8c96c68856a7810f7c\",\"edf8fbbfd3e69ebcda8c96c68c6bb188419d6e016b\",\n\"f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d6e016b\",\"f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d8",
                    "rendered": {
                      "text": "1fee08bffffbfe6f598abdda466c2a53288bd5e4fa2\").map(ka),\ntu=ua(Zm),$m=Array(3).concat(\"e5f5f999d8c92ca25f\",\"edf8fbb2e2e266c2a4238b45\",\"edf8fbb2e2e266c2a42ca25f006d2c\",\"edf8fbccece699d8c966c2a42ca25f006d2c\",\"edf8fbccece699d8c966c2a441ae76238b45005824\",\"f7fcfde5f5f9ccece699d8c966c2a441ae76238b45005824\",\"f7fcfde5f5f9ccece699d8c966c2a441ae76238b45006d2c00441b\").map(ka),uu=ua($m),an=Array(3).concat(\"e0ecf49ebcda8856a7\",\"edf8fbb3cde38c96c688419d\",\"edf8fbb3cde38c96c68856a7810f7c\",\"edf8fbbfd3e69ebcda8c96c68856a7810f7c\",\"edf8fbbfd3e69ebcda8c96c68c6bb188419d6e016b\",\n\"f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d6e016b\",\"f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d8",
                      "markdown": "`1fee08bffffbfe6f598abdda466c2a53288bd5e4fa2\").map(ka),\ntu=ua(Zm),$m=Array(3).concat(\"e5f5f999d8c92ca25f\",\"edf8fbb2e2e266c2a4238b45\",\"edf8fbb2e2e266c2a42ca25f006d2c\",\"edf8fbccece699d8c966c2a42ca25f006d2c\",\"edf8fbccece699d8c966c2a441ae76238b45005824\",\"f7fcfde5f5f9ccece699d8c966c2a441ae76238b45005824\",\"f7fcfde5f5f9ccece699d8c966c2a441ae76238b45006d2c00441b\").map(ka),uu=ua($m),an=Array(3).concat(\"e0ecf49ebcda8856a7\",\"edf8fbb3cde38c96c688419d\",\"edf8fbb3cde38c96c68856a7810f7c\",\"edf8fbbfd3e69ebcda8c96c68856a7810f7c\",\"edf8fbbfd3e69ebcda8c96c68c6bb188419d6e016b\",\n\"f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d6e016b\",\"f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d8`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 798,
                  "startColumn": 194,
                  "endLine": 798,
                  "endColumn": 244,
                  "snippet": {
                    "text": "8abdda466c2a53288bd5e4fa2\",\"9e0142d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd5e4fa2\").map(ka),\ntu=ua(Zm),$m=Array(3).concat(\"e5f5f999d8c92ca25f\",\"edf8fbb2e2e266c2a4238b45\",\"edf8fbb2e2e266c2a42ca25f006d2c\",\"edf8fbccece699d8c966c2a42ca25f006d2c\",\"edf8fbccece699d8c966c2a441ae76238b45005824\",\"f7fcfde5f5f9ccece699d8c966c2a441ae76238b45005824\",\"f7fcfde5f5f9ccece699d8c966c2a441ae76238b45006d2c00441b\").map(ka),uu=ua($m),an=Array(3).concat(\"e0ecf49ebcda8856a7\",\"edf8fbb3cde38c96c688419d\",\"edf8fbb3cde38c96c68856a7810f7c\",\"edf8fbbfd3e69ebcda8c96c68856a7810f7c\",\"edf8fbbfd3e69ebcda8c96c68c6bb188419d6e016b\",\n\"f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb18",
                    "rendered": {
                      "text": "8abdda466c2a53288bd5e4fa2\",\"9e0142d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd5e4fa2\").map(ka),\ntu=ua(Zm),$m=Array(3).concat(\"e5f5f999d8c92ca25f\",\"edf8fbb2e2e266c2a4238b45\",\"edf8fbb2e2e266c2a42ca25f006d2c\",\"edf8fbccece699d8c966c2a42ca25f006d2c\",\"edf8fbccece699d8c966c2a441ae76238b45005824\",\"f7fcfde5f5f9ccece699d8c966c2a441ae76238b45005824\",\"f7fcfde5f5f9ccece699d8c966c2a441ae76238b45006d2c00441b\").map(ka),uu=ua($m),an=Array(3).concat(\"e0ecf49ebcda8856a7\",\"edf8fbb3cde38c96c688419d\",\"edf8fbb3cde38c96c68856a7810f7c\",\"edf8fbbfd3e69ebcda8c96c68856a7810f7c\",\"edf8fbbfd3e69ebcda8c96c68c6bb188419d6e016b\",\n\"f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb18",
                      "markdown": "`8abdda466c2a53288bd5e4fa2\",\"9e0142d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd5e4fa2\").map(ka),\ntu=ua(Zm),$m=Array(3).concat(\"e5f5f999d8c92ca25f\",\"edf8fbb2e2e266c2a4238b45\",\"edf8fbb2e2e266c2a42ca25f006d2c\",\"edf8fbccece699d8c966c2a42ca25f006d2c\",\"edf8fbccece699d8c966c2a441ae76238b45005824\",\"f7fcfde5f5f9ccece699d8c966c2a441ae76238b45005824\",\"f7fcfde5f5f9ccece699d8c966c2a441ae76238b45006d2c00441b\").map(ka),uu=ua($m),an=Array(3).concat(\"e0ecf49ebcda8856a7\",\"edf8fbb3cde38c96c688419d\",\"edf8fbb3cde38c96c68856a7810f7c\",\"edf8fbbfd3e69ebcda8c96c68856a7810f7c\",\"edf8fbbfd3e69ebcda8c96c68c6bb188419d6e016b\",\n\"f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb18`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 798,
                  "startColumn": 149,
                  "endLine": 798,
                  "endColumn": 193,
                  "snippet": {
                    "text": "53288bd\",\"9e0142d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd5e4fa2\",\"9e0142d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd5e4fa2\").map(ka),\ntu=ua(Zm),$m=Array(3).concat(\"e5f5f999d8c92ca25f\",\"edf8fbb2e2e266c2a4238b45\",\"edf8fbb2e2e266c2a42ca25f006d2c\",\"edf8fbccece699d8c966c2a42ca25f006d2c\",\"edf8fbccece699d8c966c2a441ae76238b45005824\",\"f7fcfde5f5f9ccece699d8c966c2a441ae76238b45005824\",\"f7fcfde5f5f9ccece699d8c966c2a441ae76238b45006d2c00441b\").map(ka),uu=ua($m),an=Array(3).concat(\"e0ecf49ebcda8856a7\",\"edf8fbb3cde38c96c688419d\",\"edf8fbb3cde38c96c68856a7810f7c\",\"edf8fbbfd3e69ebcda8c96c68856a7810f7c\",\"edf8fbbfd3e69ebcda8c96c68c6bb188",
                    "rendered": {
                      "text": "53288bd\",\"9e0142d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd5e4fa2\",\"9e0142d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd5e4fa2\").map(ka),\ntu=ua(Zm),$m=Array(3).concat(\"e5f5f999d8c92ca25f\",\"edf8fbb2e2e266c2a4238b45\",\"edf8fbb2e2e266c2a42ca25f006d2c\",\"edf8fbccece699d8c966c2a42ca25f006d2c\",\"edf8fbccece699d8c966c2a441ae76238b45005824\",\"f7fcfde5f5f9ccece699d8c966c2a441ae76238b45005824\",\"f7fcfde5f5f9ccece699d8c966c2a441ae76238b45006d2c00441b\").map(ka),uu=ua($m),an=Array(3).concat(\"e0ecf49ebcda8856a7\",\"edf8fbb3cde38c96c688419d\",\"edf8fbb3cde38c96c68856a7810f7c\",\"edf8fbbfd3e69ebcda8c96c68856a7810f7c\",\"edf8fbbfd3e69ebcda8c96c68c6bb188",
                      "markdown": "`53288bd\",\"9e0142d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd5e4fa2\",\"9e0142d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd5e4fa2\").map(ka),\ntu=ua(Zm),$m=Array(3).concat(\"e5f5f999d8c92ca25f\",\"edf8fbb2e2e266c2a4238b45\",\"edf8fbb2e2e266c2a42ca25f006d2c\",\"edf8fbccece699d8c966c2a42ca25f006d2c\",\"edf8fbccece699d8c966c2a441ae76238b45005824\",\"f7fcfde5f5f9ccece699d8c966c2a441ae76238b45005824\",\"f7fcfde5f5f9ccece699d8c966c2a441ae76238b45006d2c00441b\").map(ka),uu=ua($m),an=Array(3).concat(\"e0ecf49ebcda8856a7\",\"edf8fbb3cde38c96c688419d\",\"edf8fbb3cde38c96c68856a7810f7c\",\"edf8fbbfd3e69ebcda8c96c68856a7810f7c\",\"edf8fbbfd3e69ebcda8c96c68c6bb188`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 797,
                  "startColumn": 443,
                  "endLine": 797,
                  "endColumn": 511,
                  "snippet": {
                    "text": "dda42b83ba\",\"d7191cfdae61ffffbfabdda42b83ba\",\"d53e4ffc8d59fee08be6f59899d5943288bd\",\"d53e4ffc8d59fee08bffffbfe6f59899d5943288bd\",\"d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd\",\"d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd\",\"9e0142d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd5e4fa2\",\"9e0142d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd5e4fa2\").map(ka),\ntu=ua(Zm),$m=Array(3).concat(\"e5f5f999d8c92ca25f\",\"edf8fbb2e2e266c2a4238b45\",\"edf8fbb2e2e266c2a42ca25f006d2c\",\"edf8fbccece699d8c966c2a42ca25f006d2c\",\"edf8fbccece699d8c966c2a441ae76238b45005824\",\"f7fcfde5f5f9ccece699d8c966c2a441ae76238b45005824\",\"f7fcfde5f5f9ccece699d8c966c2a441ae76238b450",
                    "rendered": {
                      "text": "dda42b83ba\",\"d7191cfdae61ffffbfabdda42b83ba\",\"d53e4ffc8d59fee08be6f59899d5943288bd\",\"d53e4ffc8d59fee08bffffbfe6f59899d5943288bd\",\"d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd\",\"d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd\",\"9e0142d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd5e4fa2\",\"9e0142d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd5e4fa2\").map(ka),\ntu=ua(Zm),$m=Array(3).concat(\"e5f5f999d8c92ca25f\",\"edf8fbb2e2e266c2a4238b45\",\"edf8fbb2e2e266c2a42ca25f006d2c\",\"edf8fbccece699d8c966c2a42ca25f006d2c\",\"edf8fbccece699d8c966c2a441ae76238b45005824\",\"f7fcfde5f5f9ccece699d8c966c2a441ae76238b45005824\",\"f7fcfde5f5f9ccece699d8c966c2a441ae76238b450",
                      "markdown": "`dda42b83ba\",\"d7191cfdae61ffffbfabdda42b83ba\",\"d53e4ffc8d59fee08be6f59899d5943288bd\",\"d53e4ffc8d59fee08bffffbfe6f59899d5943288bd\",\"d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd\",\"d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd\",\"9e0142d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd5e4fa2\",\"9e0142d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd5e4fa2\").map(ka),\ntu=ua(Zm),$m=Array(3).concat(\"e5f5f999d8c92ca25f\",\"edf8fbb2e2e266c2a4238b45\",\"edf8fbb2e2e266c2a42ca25f006d2c\",\"edf8fbccece699d8c966c2a42ca25f006d2c\",\"edf8fbccece699d8c966c2a441ae76238b45005824\",\"f7fcfde5f5f9ccece699d8c966c2a441ae76238b45005824\",\"f7fcfde5f5f9ccece699d8c966c2a441ae76238b450`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 797,
                  "startColumn": 380,
                  "endLine": 797,
                  "endColumn": 442,
                  "snippet": {
                    "text": "=ua(Ym),Zm=Array(3).concat(\"fc8d59ffffbf99d594\",\"d7191cfdae61abdda42b83ba\",\"d7191cfdae61ffffbfabdda42b83ba\",\"d53e4ffc8d59fee08be6f59899d5943288bd\",\"d53e4ffc8d59fee08bffffbfe6f59899d5943288bd\",\"d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd\",\"d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd\",\"9e0142d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd5e4fa2\",\"9e0142d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd5e4fa2\").map(ka),\ntu=ua(Zm),$m=Array(3).concat(\"e5f5f999d8c92ca25f\",\"edf8fbb2e2e266c2a4238b45\",\"edf8fbb2e2e266c2a42ca25f006d2c\",\"edf8fbccece699d8c966c2a42ca25f006d2c\",\"edf8fbccece699d8c966c2a441ae76238b45005824\",\"f7fcfde5f5f9ccece699d8c96",
                    "rendered": {
                      "text": "=ua(Ym),Zm=Array(3).concat(\"fc8d59ffffbf99d594\",\"d7191cfdae61abdda42b83ba\",\"d7191cfdae61ffffbfabdda42b83ba\",\"d53e4ffc8d59fee08be6f59899d5943288bd\",\"d53e4ffc8d59fee08bffffbfe6f59899d5943288bd\",\"d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd\",\"d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd\",\"9e0142d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd5e4fa2\",\"9e0142d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd5e4fa2\").map(ka),\ntu=ua(Zm),$m=Array(3).concat(\"e5f5f999d8c92ca25f\",\"edf8fbb2e2e266c2a4238b45\",\"edf8fbb2e2e266c2a42ca25f006d2c\",\"edf8fbccece699d8c966c2a42ca25f006d2c\",\"edf8fbccece699d8c966c2a441ae76238b45005824\",\"f7fcfde5f5f9ccece699d8c96",
                      "markdown": "`=ua(Ym),Zm=Array(3).concat(\"fc8d59ffffbf99d594\",\"d7191cfdae61abdda42b83ba\",\"d7191cfdae61ffffbfabdda42b83ba\",\"d53e4ffc8d59fee08be6f59899d5943288bd\",\"d53e4ffc8d59fee08bffffbfe6f59899d5943288bd\",\"d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd\",\"d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd\",\"9e0142d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd5e4fa2\",\"9e0142d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd5e4fa2\").map(ka),\ntu=ua(Zm),$m=Array(3).concat(\"e5f5f999d8c92ca25f\",\"edf8fbb2e2e266c2a4238b45\",\"edf8fbb2e2e266c2a42ca25f006d2c\",\"edf8fbccece699d8c966c2a42ca25f006d2c\",\"edf8fbccece699d8c966c2a441ae76238b45005824\",\"f7fcfde5f5f9ccece699d8c96`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 797,
                  "startColumn": 323,
                  "endLine": 797,
                  "endColumn": 379,
                  "snippet": {
                    "text": "61fee08bffffbfd9ef8ba6d96a66bd631a9850006837\").map(ka),su=ua(Ym),Zm=Array(3).concat(\"fc8d59ffffbf99d594\",\"d7191cfdae61abdda42b83ba\",\"d7191cfdae61ffffbfabdda42b83ba\",\"d53e4ffc8d59fee08be6f59899d5943288bd\",\"d53e4ffc8d59fee08bffffbfe6f59899d5943288bd\",\"d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd\",\"d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd\",\"9e0142d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd5e4fa2\",\"9e0142d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd5e4fa2\").map(ka),\ntu=ua(Zm),$m=Array(3).concat(\"e5f5f999d8c92ca25f\",\"edf8fbb2e2e266c2a4238b45\",\"edf8fbb2e2e266c2a42ca25f006d2c\",\"edf8fbccece699d8c966c2a42ca25f006d2c\",\"edf8fbc",
                    "rendered": {
                      "text": "61fee08bffffbfd9ef8ba6d96a66bd631a9850006837\").map(ka),su=ua(Ym),Zm=Array(3).concat(\"fc8d59ffffbf99d594\",\"d7191cfdae61abdda42b83ba\",\"d7191cfdae61ffffbfabdda42b83ba\",\"d53e4ffc8d59fee08be6f59899d5943288bd\",\"d53e4ffc8d59fee08bffffbfe6f59899d5943288bd\",\"d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd\",\"d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd\",\"9e0142d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd5e4fa2\",\"9e0142d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd5e4fa2\").map(ka),\ntu=ua(Zm),$m=Array(3).concat(\"e5f5f999d8c92ca25f\",\"edf8fbb2e2e266c2a4238b45\",\"edf8fbb2e2e266c2a42ca25f006d2c\",\"edf8fbccece699d8c966c2a42ca25f006d2c\",\"edf8fbc",
                      "markdown": "`61fee08bffffbfd9ef8ba6d96a66bd631a9850006837\").map(ka),su=ua(Ym),Zm=Array(3).concat(\"fc8d59ffffbf99d594\",\"d7191cfdae61abdda42b83ba\",\"d7191cfdae61ffffbfabdda42b83ba\",\"d53e4ffc8d59fee08be6f59899d5943288bd\",\"d53e4ffc8d59fee08bffffbfe6f59899d5943288bd\",\"d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd\",\"d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd\",\"9e0142d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd5e4fa2\",\"9e0142d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd5e4fa2\").map(ka),\ntu=ua(Zm),$m=Array(3).concat(\"e5f5f999d8c92ca25f\",\"edf8fbb2e2e266c2a4238b45\",\"edf8fbb2e2e266c2a42ca25f006d2c\",\"edf8fbccece699d8c966c2a42ca25f006d2c\",\"edf8fbc`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 797,
                  "startColumn": 272,
                  "endLine": 797,
                  "endColumn": 322,
                  "snippet": {
                    "text": "ba6d96a66bd631a9850006837\",\n\"a50026d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850006837\").map(ka),su=ua(Ym),Zm=Array(3).concat(\"fc8d59ffffbf99d594\",\"d7191cfdae61abdda42b83ba\",\"d7191cfdae61ffffbfabdda42b83ba\",\"d53e4ffc8d59fee08be6f59899d5943288bd\",\"d53e4ffc8d59fee08bffffbfe6f59899d5943288bd\",\"d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd\",\"d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd\",\"9e0142d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd5e4fa2\",\"9e0142d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd5e4fa2\").map(ka),\ntu=ua(Zm),$m=Array(3).concat(\"e5f5f999d8c92ca25f\",\"edf8fbb2e2e266c2a4238b45\",\"edf8fbb2e2e266c2a42ca2",
                    "rendered": {
                      "text": "ba6d96a66bd631a9850006837\",\n\"a50026d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850006837\").map(ka),su=ua(Ym),Zm=Array(3).concat(\"fc8d59ffffbf99d594\",\"d7191cfdae61abdda42b83ba\",\"d7191cfdae61ffffbfabdda42b83ba\",\"d53e4ffc8d59fee08be6f59899d5943288bd\",\"d53e4ffc8d59fee08bffffbfe6f59899d5943288bd\",\"d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd\",\"d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd\",\"9e0142d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd5e4fa2\",\"9e0142d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd5e4fa2\").map(ka),\ntu=ua(Zm),$m=Array(3).concat(\"e5f5f999d8c92ca25f\",\"edf8fbb2e2e266c2a4238b45\",\"edf8fbb2e2e266c2a42ca2",
                      "markdown": "`ba6d96a66bd631a9850006837\",\n\"a50026d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850006837\").map(ka),su=ua(Ym),Zm=Array(3).concat(\"fc8d59ffffbf99d594\",\"d7191cfdae61abdda42b83ba\",\"d7191cfdae61ffffbfabdda42b83ba\",\"d53e4ffc8d59fee08be6f59899d5943288bd\",\"d53e4ffc8d59fee08bffffbfe6f59899d5943288bd\",\"d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd\",\"d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd\",\"9e0142d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd5e4fa2\",\"9e0142d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd5e4fa2\").map(ka),\ntu=ua(Zm),$m=Array(3).concat(\"e5f5f999d8c92ca25f\",\"edf8fbb2e2e266c2a4238b45\",\"edf8fbb2e2e266c2a42ca2`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 797,
                  "startColumn": 227,
                  "endLine": 797,
                  "endColumn": 271,
                  "snippet": {
                    "text": "31a9850\",\"a50026d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850006837\",\n\"a50026d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850006837\").map(ka),su=ua(Ym),Zm=Array(3).concat(\"fc8d59ffffbf99d594\",\"d7191cfdae61abdda42b83ba\",\"d7191cfdae61ffffbfabdda42b83ba\",\"d53e4ffc8d59fee08be6f59899d5943288bd\",\"d53e4ffc8d59fee08bffffbfe6f59899d5943288bd\",\"d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd\",\"d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd\",\"9e0142d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd5e4fa2\",\"9e0142d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd5e4fa2\").map(ka),\ntu=ua(Zm),$m=Array(3).concat(\"e5f5f999d8c92ca25f\"",
                    "rendered": {
                      "text": "31a9850\",\"a50026d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850006837\",\n\"a50026d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850006837\").map(ka),su=ua(Ym),Zm=Array(3).concat(\"fc8d59ffffbf99d594\",\"d7191cfdae61abdda42b83ba\",\"d7191cfdae61ffffbfabdda42b83ba\",\"d53e4ffc8d59fee08be6f59899d5943288bd\",\"d53e4ffc8d59fee08bffffbfe6f59899d5943288bd\",\"d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd\",\"d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd\",\"9e0142d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd5e4fa2\",\"9e0142d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd5e4fa2\").map(ka),\ntu=ua(Zm),$m=Array(3).concat(\"e5f5f999d8c92ca25f\"",
                      "markdown": "`31a9850\",\"a50026d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850006837\",\n\"a50026d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850006837\").map(ka),su=ua(Ym),Zm=Array(3).concat(\"fc8d59ffffbf99d594\",\"d7191cfdae61abdda42b83ba\",\"d7191cfdae61ffffbfabdda42b83ba\",\"d53e4ffc8d59fee08be6f59899d5943288bd\",\"d53e4ffc8d59fee08bffffbfe6f59899d5943288bd\",\"d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd\",\"d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd\",\"9e0142d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd5e4fa2\",\"9e0142d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd5e4fa2\").map(ka),\ntu=ua(Zm),$m=Array(3).concat(\"e5f5f999d8c92ca25f\"`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 797,
                  "endLine": 797,
                  "endColumn": 68,
                  "snippet": {
                    "text": "96a1a9641\",\"d7191cfdae61ffffbfa6d96a1a9641\",\"d73027fc8d59fee08bd9ef8b91cf601a9850\",\"d73027fc8d59fee08bffffbfd9ef8b91cf601a9850\",\"d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850\",\"d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850\",\"a50026d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850006837\",\n\"a50026d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850006837\").map(ka),su=ua(Ym),Zm=Array(3).concat(\"fc8d59ffffbf99d594\",\"d7191cfdae61abdda42b83ba\",\"d7191cfdae61ffffbfabdda42b83ba\",\"d53e4ffc8d59fee08be6f59899d5943288bd\",\"d53e4ffc8d59fee08bffffbfe6f59899d5943288bd\",\"d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd\",\"d53e4ff46d43fdae61fee08bffffbfe6f598abdda466",
                    "rendered": {
                      "text": "96a1a9641\",\"d7191cfdae61ffffbfa6d96a1a9641\",\"d73027fc8d59fee08bd9ef8b91cf601a9850\",\"d73027fc8d59fee08bffffbfd9ef8b91cf601a9850\",\"d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850\",\"d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850\",\"a50026d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850006837\",\n\"a50026d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850006837\").map(ka),su=ua(Ym),Zm=Array(3).concat(\"fc8d59ffffbf99d594\",\"d7191cfdae61abdda42b83ba\",\"d7191cfdae61ffffbfabdda42b83ba\",\"d53e4ffc8d59fee08be6f59899d5943288bd\",\"d53e4ffc8d59fee08bffffbfe6f59899d5943288bd\",\"d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd\",\"d53e4ff46d43fdae61fee08bffffbfe6f598abdda466",
                      "markdown": "`96a1a9641\",\"d7191cfdae61ffffbfa6d96a1a9641\",\"d73027fc8d59fee08bd9ef8b91cf601a9850\",\"d73027fc8d59fee08bffffbfd9ef8b91cf601a9850\",\"d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850\",\"d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850\",\"a50026d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850006837\",\n\"a50026d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850006837\").map(ka),su=ua(Ym),Zm=Array(3).concat(\"fc8d59ffffbf99d594\",\"d7191cfdae61abdda42b83ba\",\"d7191cfdae61ffffbfabdda42b83ba\",\"d53e4ffc8d59fee08be6f59899d5943288bd\",\"d53e4ffc8d59fee08bffffbfe6f59899d5943288bd\",\"d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd\",\"d53e4ff46d43fdae61fee08bffffbfe6f598abdda466`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 796,
                  "startColumn": 500,
                  "endLine": 796,
                  "endColumn": 562,
                  "snippet": {
                    "text": "=ua(Xm),Ym=Array(3).concat(\"fc8d59ffffbf91cf60\",\"d7191cfdae61a6d96a1a9641\",\"d7191cfdae61ffffbfa6d96a1a9641\",\"d73027fc8d59fee08bd9ef8b91cf601a9850\",\"d73027fc8d59fee08bffffbfd9ef8b91cf601a9850\",\"d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850\",\"d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850\",\"a50026d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850006837\",\n\"a50026d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850006837\").map(ka),su=ua(Ym),Zm=Array(3).concat(\"fc8d59ffffbf99d594\",\"d7191cfdae61abdda42b83ba\",\"d7191cfdae61ffffbfabdda42b83ba\",\"d53e4ffc8d59fee08be6f59899d5943288bd\",\"d53e4ffc8d59fee08bffffbfe6f59899d5943288bd\",\"d53e4ff46d43fdae61fee08be",
                    "rendered": {
                      "text": "=ua(Xm),Ym=Array(3).concat(\"fc8d59ffffbf91cf60\",\"d7191cfdae61a6d96a1a9641\",\"d7191cfdae61ffffbfa6d96a1a9641\",\"d73027fc8d59fee08bd9ef8b91cf601a9850\",\"d73027fc8d59fee08bffffbfd9ef8b91cf601a9850\",\"d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850\",\"d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850\",\"a50026d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850006837\",\n\"a50026d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850006837\").map(ka),su=ua(Ym),Zm=Array(3).concat(\"fc8d59ffffbf99d594\",\"d7191cfdae61abdda42b83ba\",\"d7191cfdae61ffffbfabdda42b83ba\",\"d53e4ffc8d59fee08be6f59899d5943288bd\",\"d53e4ffc8d59fee08bffffbfe6f59899d5943288bd\",\"d53e4ff46d43fdae61fee08be",
                      "markdown": "`=ua(Xm),Ym=Array(3).concat(\"fc8d59ffffbf91cf60\",\"d7191cfdae61a6d96a1a9641\",\"d7191cfdae61ffffbfa6d96a1a9641\",\"d73027fc8d59fee08bd9ef8b91cf601a9850\",\"d73027fc8d59fee08bffffbfd9ef8b91cf601a9850\",\"d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850\",\"d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850\",\"a50026d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850006837\",\n\"a50026d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850006837\").map(ka),su=ua(Ym),Zm=Array(3).concat(\"fc8d59ffffbf99d594\",\"d7191cfdae61abdda42b83ba\",\"d7191cfdae61ffffbfabdda42b83ba\",\"d53e4ffc8d59fee08be6f59899d5943288bd\",\"d53e4ffc8d59fee08bffffbfe6f59899d5943288bd\",\"d53e4ff46d43fdae61fee08be`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 796,
                  "startColumn": 443,
                  "endLine": 796,
                  "endColumn": 499,
                  "snippet": {
                    "text": "61fee090ffffbfe0f3f8abd9e974add14575b4313695\").map(ka),ru=ua(Xm),Ym=Array(3).concat(\"fc8d59ffffbf91cf60\",\"d7191cfdae61a6d96a1a9641\",\"d7191cfdae61ffffbfa6d96a1a9641\",\"d73027fc8d59fee08bd9ef8b91cf601a9850\",\"d73027fc8d59fee08bffffbfd9ef8b91cf601a9850\",\"d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850\",\"d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850\",\"a50026d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850006837\",\n\"a50026d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850006837\").map(ka),su=ua(Ym),Zm=Array(3).concat(\"fc8d59ffffbf99d594\",\"d7191cfdae61abdda42b83ba\",\"d7191cfdae61ffffbfabdda42b83ba\",\"d53e4ffc8d59fee08be6f59899d5943288bd\",\"d53e4ff",
                    "rendered": {
                      "text": "61fee090ffffbfe0f3f8abd9e974add14575b4313695\").map(ka),ru=ua(Xm),Ym=Array(3).concat(\"fc8d59ffffbf91cf60\",\"d7191cfdae61a6d96a1a9641\",\"d7191cfdae61ffffbfa6d96a1a9641\",\"d73027fc8d59fee08bd9ef8b91cf601a9850\",\"d73027fc8d59fee08bffffbfd9ef8b91cf601a9850\",\"d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850\",\"d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850\",\"a50026d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850006837\",\n\"a50026d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850006837\").map(ka),su=ua(Ym),Zm=Array(3).concat(\"fc8d59ffffbf99d594\",\"d7191cfdae61abdda42b83ba\",\"d7191cfdae61ffffbfabdda42b83ba\",\"d53e4ffc8d59fee08be6f59899d5943288bd\",\"d53e4ff",
                      "markdown": "`61fee090ffffbfe0f3f8abd9e974add14575b4313695\").map(ka),ru=ua(Xm),Ym=Array(3).concat(\"fc8d59ffffbf91cf60\",\"d7191cfdae61a6d96a1a9641\",\"d7191cfdae61ffffbfa6d96a1a9641\",\"d73027fc8d59fee08bd9ef8b91cf601a9850\",\"d73027fc8d59fee08bffffbfd9ef8b91cf601a9850\",\"d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850\",\"d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850\",\"a50026d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850006837\",\n\"a50026d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850006837\").map(ka),su=ua(Ym),Zm=Array(3).concat(\"fc8d59ffffbf99d594\",\"d7191cfdae61abdda42b83ba\",\"d7191cfdae61ffffbfabdda42b83ba\",\"d53e4ffc8d59fee08be6f59899d5943288bd\",\"d53e4ff`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 796,
                  "startColumn": 392,
                  "endLine": 796,
                  "endColumn": 442,
                  "snippet": {
                    "text": "f8abd9e974add14575b4313695\",\"a50026d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4313695\").map(ka),ru=ua(Xm),Ym=Array(3).concat(\"fc8d59ffffbf91cf60\",\"d7191cfdae61a6d96a1a9641\",\"d7191cfdae61ffffbfa6d96a1a9641\",\"d73027fc8d59fee08bd9ef8b91cf601a9850\",\"d73027fc8d59fee08bffffbfd9ef8b91cf601a9850\",\"d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850\",\"d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850\",\"a50026d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850006837\",\n\"a50026d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850006837\").map(ka),su=ua(Ym),Zm=Array(3).concat(\"fc8d59ffffbf99d594\",\"d7191cfdae61abdda42b83ba\",\"d7191cfdae61ffffbfabdd",
                    "rendered": {
                      "text": "f8abd9e974add14575b4313695\",\"a50026d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4313695\").map(ka),ru=ua(Xm),Ym=Array(3).concat(\"fc8d59ffffbf91cf60\",\"d7191cfdae61a6d96a1a9641\",\"d7191cfdae61ffffbfa6d96a1a9641\",\"d73027fc8d59fee08bd9ef8b91cf601a9850\",\"d73027fc8d59fee08bffffbfd9ef8b91cf601a9850\",\"d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850\",\"d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850\",\"a50026d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850006837\",\n\"a50026d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850006837\").map(ka),su=ua(Ym),Zm=Array(3).concat(\"fc8d59ffffbf99d594\",\"d7191cfdae61abdda42b83ba\",\"d7191cfdae61ffffbfabdd",
                      "markdown": "`f8abd9e974add14575b4313695\",\"a50026d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4313695\").map(ka),ru=ua(Xm),Ym=Array(3).concat(\"fc8d59ffffbf91cf60\",\"d7191cfdae61a6d96a1a9641\",\"d7191cfdae61ffffbfa6d96a1a9641\",\"d73027fc8d59fee08bd9ef8b91cf601a9850\",\"d73027fc8d59fee08bffffbfd9ef8b91cf601a9850\",\"d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850\",\"d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850\",\"a50026d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850006837\",\n\"a50026d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850006837\").map(ka),su=ua(Ym),Zm=Array(3).concat(\"fc8d59ffffbf99d594\",\"d7191cfdae61abdda42b83ba\",\"d7191cfdae61ffffbfabdd`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 796,
                  "startColumn": 347,
                  "endLine": 796,
                  "endColumn": 391,
                  "snippet": {
                    "text": "d14575b4\",\"a50026d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4313695\",\"a50026d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4313695\").map(ka),ru=ua(Xm),Ym=Array(3).concat(\"fc8d59ffffbf91cf60\",\"d7191cfdae61a6d96a1a9641\",\"d7191cfdae61ffffbfa6d96a1a9641\",\"d73027fc8d59fee08bd9ef8b91cf601a9850\",\"d73027fc8d59fee08bffffbfd9ef8b91cf601a9850\",\"d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850\",\"d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850\",\"a50026d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850006837\",\n\"a50026d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850006837\").map(ka),su=ua(Ym),Zm=Array(3).concat(\"fc8d59ffffbf99d594\"",
                    "rendered": {
                      "text": "d14575b4\",\"a50026d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4313695\",\"a50026d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4313695\").map(ka),ru=ua(Xm),Ym=Array(3).concat(\"fc8d59ffffbf91cf60\",\"d7191cfdae61a6d96a1a9641\",\"d7191cfdae61ffffbfa6d96a1a9641\",\"d73027fc8d59fee08bd9ef8b91cf601a9850\",\"d73027fc8d59fee08bffffbfd9ef8b91cf601a9850\",\"d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850\",\"d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850\",\"a50026d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850006837\",\n\"a50026d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850006837\").map(ka),su=ua(Ym),Zm=Array(3).concat(\"fc8d59ffffbf99d594\"",
                      "markdown": "`d14575b4\",\"a50026d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4313695\",\"a50026d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4313695\").map(ka),ru=ua(Xm),Ym=Array(3).concat(\"fc8d59ffffbf91cf60\",\"d7191cfdae61a6d96a1a9641\",\"d7191cfdae61ffffbfa6d96a1a9641\",\"d73027fc8d59fee08bd9ef8b91cf601a9850\",\"d73027fc8d59fee08bffffbfd9ef8b91cf601a9850\",\"d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850\",\"d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850\",\"a50026d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850006837\",\n\"a50026d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850006837\").map(ka),su=ua(Ym),Zm=Array(3).concat(\"fc8d59ffffbf99d594\"`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 796,
                  "startColumn": 120,
                  "endLine": 796,
                  "endColumn": 188,
                  "snippet": {
                    "text": "9e92c7bb6\",\"d7191cfdae61ffffbfabd9e92c7bb6\",\"d73027fc8d59fee090e0f3f891bfdb4575b4\",\"d73027fc8d59fee090ffffbfe0f3f891bfdb4575b4\",\"d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4\",\n\"d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4\",\"a50026d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4313695\",\"a50026d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4313695\").map(ka),ru=ua(Xm),Ym=Array(3).concat(\"fc8d59ffffbf91cf60\",\"d7191cfdae61a6d96a1a9641\",\"d7191cfdae61ffffbfa6d96a1a9641\",\"d73027fc8d59fee08bd9ef8b91cf601a9850\",\"d73027fc8d59fee08bffffbfd9ef8b91cf601a9850\",\"d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850\",\"d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66",
                    "rendered": {
                      "text": "9e92c7bb6\",\"d7191cfdae61ffffbfabd9e92c7bb6\",\"d73027fc8d59fee090e0f3f891bfdb4575b4\",\"d73027fc8d59fee090ffffbfe0f3f891bfdb4575b4\",\"d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4\",\n\"d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4\",\"a50026d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4313695\",\"a50026d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4313695\").map(ka),ru=ua(Xm),Ym=Array(3).concat(\"fc8d59ffffbf91cf60\",\"d7191cfdae61a6d96a1a9641\",\"d7191cfdae61ffffbfa6d96a1a9641\",\"d73027fc8d59fee08bd9ef8b91cf601a9850\",\"d73027fc8d59fee08bffffbfd9ef8b91cf601a9850\",\"d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850\",\"d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66",
                      "markdown": "`9e92c7bb6\",\"d7191cfdae61ffffbfabd9e92c7bb6\",\"d73027fc8d59fee090e0f3f891bfdb4575b4\",\"d73027fc8d59fee090ffffbfe0f3f891bfdb4575b4\",\"d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4\",\n\"d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4\",\"a50026d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4313695\",\"a50026d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4313695\").map(ka),ru=ua(Xm),Ym=Array(3).concat(\"fc8d59ffffbf91cf60\",\"d7191cfdae61a6d96a1a9641\",\"d7191cfdae61ffffbfa6d96a1a9641\",\"d73027fc8d59fee08bd9ef8b91cf601a9850\",\"d73027fc8d59fee08bffffbfd9ef8b91cf601a9850\",\"d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850\",\"d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 796,
                  "startColumn": 57,
                  "endLine": 796,
                  "endColumn": 119,
                  "snippet": {
                    "text": "ua(Wm),Xm=Array(3).concat(\"fc8d59ffffbf91bfdb\",\"d7191cfdae61abd9e92c7bb6\",\"d7191cfdae61ffffbfabd9e92c7bb6\",\"d73027fc8d59fee090e0f3f891bfdb4575b4\",\"d73027fc8d59fee090ffffbfe0f3f891bfdb4575b4\",\"d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4\",\n\"d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4\",\"a50026d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4313695\",\"a50026d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4313695\").map(ka),ru=ua(Xm),Ym=Array(3).concat(\"fc8d59ffffbf91cf60\",\"d7191cfdae61a6d96a1a9641\",\"d7191cfdae61ffffbfa6d96a1a9641\",\"d73027fc8d59fee08bd9ef8b91cf601a9850\",\"d73027fc8d59fee08bffffbfd9ef8b91cf601a9850\",\"d73027f46d43fdae61fee08bd9",
                    "rendered": {
                      "text": "ua(Wm),Xm=Array(3).concat(\"fc8d59ffffbf91bfdb\",\"d7191cfdae61abd9e92c7bb6\",\"d7191cfdae61ffffbfabd9e92c7bb6\",\"d73027fc8d59fee090e0f3f891bfdb4575b4\",\"d73027fc8d59fee090ffffbfe0f3f891bfdb4575b4\",\"d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4\",\n\"d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4\",\"a50026d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4313695\",\"a50026d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4313695\").map(ka),ru=ua(Xm),Ym=Array(3).concat(\"fc8d59ffffbf91cf60\",\"d7191cfdae61a6d96a1a9641\",\"d7191cfdae61ffffbfa6d96a1a9641\",\"d73027fc8d59fee08bd9ef8b91cf601a9850\",\"d73027fc8d59fee08bffffbfd9ef8b91cf601a9850\",\"d73027f46d43fdae61fee08bd9",
                      "markdown": "`ua(Wm),Xm=Array(3).concat(\"fc8d59ffffbf91bfdb\",\"d7191cfdae61abd9e92c7bb6\",\"d7191cfdae61ffffbfabd9e92c7bb6\",\"d73027fc8d59fee090e0f3f891bfdb4575b4\",\"d73027fc8d59fee090ffffbfe0f3f891bfdb4575b4\",\"d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4\",\n\"d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4\",\"a50026d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4313695\",\"a50026d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4313695\").map(ka),ru=ua(Xm),Ym=Array(3).concat(\"fc8d59ffffbf91cf60\",\"d7191cfdae61a6d96a1a9641\",\"d7191cfdae61ffffbfa6d96a1a9641\",\"d73027fc8d59fee08bd9ef8b91cf601a9850\",\"d73027fc8d59fee08bffffbfd9ef8b91cf601a9850\",\"d73027f46d43fdae61fee08bd9`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 796,
                  "endLine": 796,
                  "endColumn": 56,
                  "snippet": {
                    "text": "2fddbc7ffffffe0e0e0bababa8787874d4d4d1a1a1a\").map(ka),qu=ua(Wm),Xm=Array(3).concat(\"fc8d59ffffbf91bfdb\",\"d7191cfdae61abd9e92c7bb6\",\"d7191cfdae61ffffbfabd9e92c7bb6\",\"d73027fc8d59fee090e0f3f891bfdb4575b4\",\"d73027fc8d59fee090ffffbfe0f3f891bfdb4575b4\",\"d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4\",\n\"d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4\",\"a50026d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4313695\",\"a50026d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4313695\").map(ka),ru=ua(Xm),Ym=Array(3).concat(\"fc8d59ffffbf91cf60\",\"d7191cfdae61a6d96a1a9641\",\"d7191cfdae61ffffbfa6d96a1a9641\",\"d73027fc8d59fee08bd9ef8b91cf601a9850\",\"d73027fc",
                    "rendered": {
                      "text": "2fddbc7ffffffe0e0e0bababa8787874d4d4d1a1a1a\").map(ka),qu=ua(Wm),Xm=Array(3).concat(\"fc8d59ffffbf91bfdb\",\"d7191cfdae61abd9e92c7bb6\",\"d7191cfdae61ffffbfabd9e92c7bb6\",\"d73027fc8d59fee090e0f3f891bfdb4575b4\",\"d73027fc8d59fee090ffffbfe0f3f891bfdb4575b4\",\"d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4\",\n\"d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4\",\"a50026d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4313695\",\"a50026d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4313695\").map(ka),ru=ua(Xm),Ym=Array(3).concat(\"fc8d59ffffbf91cf60\",\"d7191cfdae61a6d96a1a9641\",\"d7191cfdae61ffffbfa6d96a1a9641\",\"d73027fc8d59fee08bd9ef8b91cf601a9850\",\"d73027fc",
                      "markdown": "`2fddbc7ffffffe0e0e0bababa8787874d4d4d1a1a1a\").map(ka),qu=ua(Wm),Xm=Array(3).concat(\"fc8d59ffffbf91bfdb\",\"d7191cfdae61abd9e92c7bb6\",\"d7191cfdae61ffffbfabd9e92c7bb6\",\"d73027fc8d59fee090e0f3f891bfdb4575b4\",\"d73027fc8d59fee090ffffbfe0f3f891bfdb4575b4\",\"d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4\",\n\"d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4\",\"a50026d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4313695\",\"a50026d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4313695\").map(ka),ru=ua(Xm),Ym=Array(3).concat(\"fc8d59ffffbf91cf60\",\"d7191cfdae61a6d96a1a9641\",\"d7191cfdae61ffffbfa6d96a1a9641\",\"d73027fc8d59fee08bd9ef8b91cf601a9850\",\"d73027fc`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 795,
                  "startColumn": 488,
                  "endLine": 795,
                  "endColumn": 538,
                  "snippet": {
                    "text": "e0bababa8787874d4d4d1a1a1a\",\"67001fb2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d1a1a1a\").map(ka),qu=ua(Wm),Xm=Array(3).concat(\"fc8d59ffffbf91bfdb\",\"d7191cfdae61abd9e92c7bb6\",\"d7191cfdae61ffffbfabd9e92c7bb6\",\"d73027fc8d59fee090e0f3f891bfdb4575b4\",\"d73027fc8d59fee090ffffbfe0f3f891bfdb4575b4\",\"d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4\",\n\"d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4\",\"a50026d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4313695\",\"a50026d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4313695\").map(ka),ru=ua(Xm),Ym=Array(3).concat(\"fc8d59ffffbf91cf60\",\"d7191cfdae61a6d96a1a9641\",\"d7191cfdae61ffffbfa6d9",
                    "rendered": {
                      "text": "e0bababa8787874d4d4d1a1a1a\",\"67001fb2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d1a1a1a\").map(ka),qu=ua(Wm),Xm=Array(3).concat(\"fc8d59ffffbf91bfdb\",\"d7191cfdae61abd9e92c7bb6\",\"d7191cfdae61ffffbfabd9e92c7bb6\",\"d73027fc8d59fee090e0f3f891bfdb4575b4\",\"d73027fc8d59fee090ffffbfe0f3f891bfdb4575b4\",\"d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4\",\n\"d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4\",\"a50026d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4313695\",\"a50026d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4313695\").map(ka),ru=ua(Xm),Ym=Array(3).concat(\"fc8d59ffffbf91cf60\",\"d7191cfdae61a6d96a1a9641\",\"d7191cfdae61ffffbfa6d9",
                      "markdown": "`e0bababa8787874d4d4d1a1a1a\",\"67001fb2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d1a1a1a\").map(ka),qu=ua(Wm),Xm=Array(3).concat(\"fc8d59ffffbf91bfdb\",\"d7191cfdae61abd9e92c7bb6\",\"d7191cfdae61ffffbfabd9e92c7bb6\",\"d73027fc8d59fee090e0f3f891bfdb4575b4\",\"d73027fc8d59fee090ffffbfe0f3f891bfdb4575b4\",\"d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4\",\n\"d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4\",\"a50026d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4313695\",\"a50026d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4313695\").map(ka),ru=ua(Xm),Ym=Array(3).concat(\"fc8d59ffffbf91cf60\",\"d7191cfdae61a6d96a1a9641\",\"d7191cfdae61ffffbfa6d9`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 795,
                  "startColumn": 443,
                  "endLine": 795,
                  "endColumn": 487,
                  "snippet": {
                    "text": "874d4d4d\",\"67001fb2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d1a1a1a\",\"67001fb2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d1a1a1a\").map(ka),qu=ua(Wm),Xm=Array(3).concat(\"fc8d59ffffbf91bfdb\",\"d7191cfdae61abd9e92c7bb6\",\"d7191cfdae61ffffbfabd9e92c7bb6\",\"d73027fc8d59fee090e0f3f891bfdb4575b4\",\"d73027fc8d59fee090ffffbfe0f3f891bfdb4575b4\",\"d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4\",\n\"d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4\",\"a50026d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4313695\",\"a50026d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4313695\").map(ka),ru=ua(Xm),Ym=Array(3).concat(\"fc8d59ffffbf91cf60\"",
                    "rendered": {
                      "text": "874d4d4d\",\"67001fb2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d1a1a1a\",\"67001fb2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d1a1a1a\").map(ka),qu=ua(Wm),Xm=Array(3).concat(\"fc8d59ffffbf91bfdb\",\"d7191cfdae61abd9e92c7bb6\",\"d7191cfdae61ffffbfabd9e92c7bb6\",\"d73027fc8d59fee090e0f3f891bfdb4575b4\",\"d73027fc8d59fee090ffffbfe0f3f891bfdb4575b4\",\"d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4\",\n\"d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4\",\"a50026d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4313695\",\"a50026d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4313695\").map(ka),ru=ua(Xm),Ym=Array(3).concat(\"fc8d59ffffbf91cf60\"",
                      "markdown": "`874d4d4d\",\"67001fb2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d1a1a1a\",\"67001fb2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d1a1a1a\").map(ka),qu=ua(Wm),Xm=Array(3).concat(\"fc8d59ffffbf91bfdb\",\"d7191cfdae61abd9e92c7bb6\",\"d7191cfdae61ffffbfabd9e92c7bb6\",\"d73027fc8d59fee090e0f3f891bfdb4575b4\",\"d73027fc8d59fee090ffffbfe0f3f891bfdb4575b4\",\"d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4\",\n\"d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4\",\"a50026d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4313695\",\"a50026d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4313695\").map(ka),ru=ua(Xm),Ym=Array(3).concat(\"fc8d59ffffbf91cf60\"`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 795,
                  "startColumn": 216,
                  "endLine": 795,
                  "endColumn": 284,
                  "snippet": {
                    "text": "aba404040\",\"ca0020f4a582ffffffbababa404040\",\"b2182bef8a62fddbc7e0e0e09999994d4d4d\",\n\"b2182bef8a62fddbc7ffffffe0e0e09999994d4d4d\",\"b2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d\",\"b2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d\",\"67001fb2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d1a1a1a\",\"67001fb2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d1a1a1a\").map(ka),qu=ua(Wm),Xm=Array(3).concat(\"fc8d59ffffbf91bfdb\",\"d7191cfdae61abd9e92c7bb6\",\"d7191cfdae61ffffbfabd9e92c7bb6\",\"d73027fc8d59fee090e0f3f891bfdb4575b4\",\"d73027fc8d59fee090ffffbfe0f3f891bfdb4575b4\",\"d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4\",\n\"d73027f46d43fdae61fee090ffffbfe0f3f8abd9e97",
                    "rendered": {
                      "text": "aba404040\",\"ca0020f4a582ffffffbababa404040\",\"b2182bef8a62fddbc7e0e0e09999994d4d4d\",\n\"b2182bef8a62fddbc7ffffffe0e0e09999994d4d4d\",\"b2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d\",\"b2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d\",\"67001fb2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d1a1a1a\",\"67001fb2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d1a1a1a\").map(ka),qu=ua(Wm),Xm=Array(3).concat(\"fc8d59ffffbf91bfdb\",\"d7191cfdae61abd9e92c7bb6\",\"d7191cfdae61ffffbfabd9e92c7bb6\",\"d73027fc8d59fee090e0f3f891bfdb4575b4\",\"d73027fc8d59fee090ffffbfe0f3f891bfdb4575b4\",\"d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4\",\n\"d73027f46d43fdae61fee090ffffbfe0f3f8abd9e97",
                      "markdown": "`aba404040\",\"ca0020f4a582ffffffbababa404040\",\"b2182bef8a62fddbc7e0e0e09999994d4d4d\",\n\"b2182bef8a62fddbc7ffffffe0e0e09999994d4d4d\",\"b2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d\",\"b2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d\",\"67001fb2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d1a1a1a\",\"67001fb2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d1a1a1a\").map(ka),qu=ua(Wm),Xm=Array(3).concat(\"fc8d59ffffbf91bfdb\",\"d7191cfdae61abd9e92c7bb6\",\"d7191cfdae61ffffbfabd9e92c7bb6\",\"d73027fc8d59fee090e0f3f891bfdb4575b4\",\"d73027fc8d59fee090ffffbfe0f3f891bfdb4575b4\",\"d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4\",\n\"d73027f46d43fdae61fee090ffffbfe0f3f8abd9e97`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 795,
                  "startColumn": 153,
                  "endLine": 795,
                  "endColumn": 215,
                  "snippet": {
                    "text": "ua(Vm),Wm=Array(3).concat(\"ef8a62ffffff999999\",\"ca0020f4a582bababa404040\",\"ca0020f4a582ffffffbababa404040\",\"b2182bef8a62fddbc7e0e0e09999994d4d4d\",\n\"b2182bef8a62fddbc7ffffffe0e0e09999994d4d4d\",\"b2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d\",\"b2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d\",\"67001fb2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d1a1a1a\",\"67001fb2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d1a1a1a\").map(ka),qu=ua(Wm),Xm=Array(3).concat(\"fc8d59ffffbf91bfdb\",\"d7191cfdae61abd9e92c7bb6\",\"d7191cfdae61ffffbfabd9e92c7bb6\",\"d73027fc8d59fee090e0f3f891bfdb4575b4\",\"d73027fc8d59fee090ffffbfe0f3f891bfdb4575b4\",\"d73027f46d43fdae61fee090e0",
                    "rendered": {
                      "text": "ua(Vm),Wm=Array(3).concat(\"ef8a62ffffff999999\",\"ca0020f4a582bababa404040\",\"ca0020f4a582ffffffbababa404040\",\"b2182bef8a62fddbc7e0e0e09999994d4d4d\",\n\"b2182bef8a62fddbc7ffffffe0e0e09999994d4d4d\",\"b2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d\",\"b2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d\",\"67001fb2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d1a1a1a\",\"67001fb2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d1a1a1a\").map(ka),qu=ua(Wm),Xm=Array(3).concat(\"fc8d59ffffbf91bfdb\",\"d7191cfdae61abd9e92c7bb6\",\"d7191cfdae61ffffbfabd9e92c7bb6\",\"d73027fc8d59fee090e0f3f891bfdb4575b4\",\"d73027fc8d59fee090ffffbfe0f3f891bfdb4575b4\",\"d73027f46d43fdae61fee090e0",
                      "markdown": "`ua(Vm),Wm=Array(3).concat(\"ef8a62ffffff999999\",\"ca0020f4a582bababa404040\",\"ca0020f4a582ffffffbababa404040\",\"b2182bef8a62fddbc7e0e0e09999994d4d4d\",\n\"b2182bef8a62fddbc7ffffffe0e0e09999994d4d4d\",\"b2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d\",\"b2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d\",\"67001fb2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d1a1a1a\",\"67001fb2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d1a1a1a\").map(ka),qu=ua(Wm),Xm=Array(3).concat(\"fc8d59ffffbf91bfdb\",\"d7191cfdae61abd9e92c7bb6\",\"d7191cfdae61ffffbfabd9e92c7bb6\",\"d73027fc8d59fee090e0f3f891bfdb4575b4\",\"d73027fc8d59fee090ffffbfe0f3f891bfdb4575b4\",\"d73027f46d43fdae61fee090e0`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 795,
                  "startColumn": 96,
                  "endLine": 795,
                  "endColumn": 152,
                  "snippet": {
                    "text": "2fddbc7f7f7f7d1e5f092c5de4393c32166ac053061\").map(ka),pu=ua(Vm),Wm=Array(3).concat(\"ef8a62ffffff999999\",\"ca0020f4a582bababa404040\",\"ca0020f4a582ffffffbababa404040\",\"b2182bef8a62fddbc7e0e0e09999994d4d4d\",\n\"b2182bef8a62fddbc7ffffffe0e0e09999994d4d4d\",\"b2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d\",\"b2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d\",\"67001fb2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d1a1a1a\",\"67001fb2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d1a1a1a\").map(ka),qu=ua(Wm),Xm=Array(3).concat(\"fc8d59ffffbf91bfdb\",\"d7191cfdae61abd9e92c7bb6\",\"d7191cfdae61ffffbfabd9e92c7bb6\",\"d73027fc8d59fee090e0f3f891bfdb4575b4\",\"d73027fc",
                    "rendered": {
                      "text": "2fddbc7f7f7f7d1e5f092c5de4393c32166ac053061\").map(ka),pu=ua(Vm),Wm=Array(3).concat(\"ef8a62ffffff999999\",\"ca0020f4a582bababa404040\",\"ca0020f4a582ffffffbababa404040\",\"b2182bef8a62fddbc7e0e0e09999994d4d4d\",\n\"b2182bef8a62fddbc7ffffffe0e0e09999994d4d4d\",\"b2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d\",\"b2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d\",\"67001fb2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d1a1a1a\",\"67001fb2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d1a1a1a\").map(ka),qu=ua(Wm),Xm=Array(3).concat(\"fc8d59ffffbf91bfdb\",\"d7191cfdae61abd9e92c7bb6\",\"d7191cfdae61ffffbfabd9e92c7bb6\",\"d73027fc8d59fee090e0f3f891bfdb4575b4\",\"d73027fc",
                      "markdown": "`2fddbc7f7f7f7d1e5f092c5de4393c32166ac053061\").map(ka),pu=ua(Vm),Wm=Array(3).concat(\"ef8a62ffffff999999\",\"ca0020f4a582bababa404040\",\"ca0020f4a582ffffffbababa404040\",\"b2182bef8a62fddbc7e0e0e09999994d4d4d\",\n\"b2182bef8a62fddbc7ffffffe0e0e09999994d4d4d\",\"b2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d\",\"b2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d\",\"67001fb2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d1a1a1a\",\"67001fb2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d1a1a1a\").map(ka),qu=ua(Wm),Xm=Array(3).concat(\"fc8d59ffffbf91bfdb\",\"d7191cfdae61abd9e92c7bb6\",\"d7191cfdae61ffffbfabd9e92c7bb6\",\"d73027fc8d59fee090e0f3f891bfdb4575b4\",\"d73027fc`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 795,
                  "startColumn": 45,
                  "endLine": 795,
                  "endColumn": 95,
                  "snippet": {
                    "text": "092c5de4393c32166ac053061\",\"67001fb2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac053061\").map(ka),pu=ua(Vm),Wm=Array(3).concat(\"ef8a62ffffff999999\",\"ca0020f4a582bababa404040\",\"ca0020f4a582ffffffbababa404040\",\"b2182bef8a62fddbc7e0e0e09999994d4d4d\",\n\"b2182bef8a62fddbc7ffffffe0e0e09999994d4d4d\",\"b2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d\",\"b2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d\",\"67001fb2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d1a1a1a\",\"67001fb2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d1a1a1a\").map(ka),qu=ua(Wm),Xm=Array(3).concat(\"fc8d59ffffbf91bfdb\",\"d7191cfdae61abd9e92c7bb6\",\"d7191cfdae61ffffbfabd9e",
                    "rendered": {
                      "text": "092c5de4393c32166ac053061\",\"67001fb2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac053061\").map(ka),pu=ua(Vm),Wm=Array(3).concat(\"ef8a62ffffff999999\",\"ca0020f4a582bababa404040\",\"ca0020f4a582ffffffbababa404040\",\"b2182bef8a62fddbc7e0e0e09999994d4d4d\",\n\"b2182bef8a62fddbc7ffffffe0e0e09999994d4d4d\",\"b2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d\",\"b2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d\",\"67001fb2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d1a1a1a\",\"67001fb2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d1a1a1a\").map(ka),qu=ua(Wm),Xm=Array(3).concat(\"fc8d59ffffbf91bfdb\",\"d7191cfdae61abd9e92c7bb6\",\"d7191cfdae61ffffbfabd9e",
                      "markdown": "`092c5de4393c32166ac053061\",\"67001fb2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac053061\").map(ka),pu=ua(Vm),Wm=Array(3).concat(\"ef8a62ffffff999999\",\"ca0020f4a582bababa404040\",\"ca0020f4a582ffffffbababa404040\",\"b2182bef8a62fddbc7e0e0e09999994d4d4d\",\n\"b2182bef8a62fddbc7ffffffe0e0e09999994d4d4d\",\"b2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d\",\"b2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d\",\"67001fb2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d1a1a1a\",\"67001fb2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d1a1a1a\").map(ka),qu=ua(Wm),Xm=Array(3).concat(\"fc8d59ffffbf91bfdb\",\"d7191cfdae61abd9e92c7bb6\",\"d7191cfdae61ffffbfabd9e`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 795,
                  "endLine": 795,
                  "endColumn": 44,
                  "snippet": {
                    "text": "32166ac\",\"67001fb2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac053061\",\"67001fb2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac053061\").map(ka),pu=ua(Vm),Wm=Array(3).concat(\"ef8a62ffffff999999\",\"ca0020f4a582bababa404040\",\"ca0020f4a582ffffffbababa404040\",\"b2182bef8a62fddbc7e0e0e09999994d4d4d\",\n\"b2182bef8a62fddbc7ffffffe0e0e09999994d4d4d\",\"b2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d\",\"b2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d\",\"67001fb2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d1a1a1a\",\"67001fb2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d1a1a1a\").map(ka),qu=ua(Wm),Xm=Array(3).concat(\"fc8d59ffffbf91bfdb\",",
                    "rendered": {
                      "text": "32166ac\",\"67001fb2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac053061\",\"67001fb2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac053061\").map(ka),pu=ua(Vm),Wm=Array(3).concat(\"ef8a62ffffff999999\",\"ca0020f4a582bababa404040\",\"ca0020f4a582ffffffbababa404040\",\"b2182bef8a62fddbc7e0e0e09999994d4d4d\",\n\"b2182bef8a62fddbc7ffffffe0e0e09999994d4d4d\",\"b2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d\",\"b2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d\",\"67001fb2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d1a1a1a\",\"67001fb2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d1a1a1a\").map(ka),qu=ua(Wm),Xm=Array(3).concat(\"fc8d59ffffbf91bfdb\",",
                      "markdown": "`32166ac\",\"67001fb2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac053061\",\"67001fb2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac053061\").map(ka),pu=ua(Vm),Wm=Array(3).concat(\"ef8a62ffffff999999\",\"ca0020f4a582bababa404040\",\"ca0020f4a582ffffffbababa404040\",\"b2182bef8a62fddbc7e0e0e09999994d4d4d\",\n\"b2182bef8a62fddbc7ffffffe0e0e09999994d4d4d\",\"b2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d\",\"b2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d\",\"67001fb2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d1a1a1a\",\"67001fb2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d1a1a1a\").map(ka),qu=ua(Wm),Xm=Array(3).concat(\"fc8d59ffffbf91bfdb\",`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 794,
                  "startColumn": 288,
                  "endLine": 794,
                  "endColumn": 356,
                  "snippet": {
                    "text": "5de0571b0\",\n\"ca0020f4a582f7f7f792c5de0571b0\",\"b2182bef8a62fddbc7d1e5f067a9cf2166ac\",\"b2182bef8a62fddbc7f7f7f7d1e5f067a9cf2166ac\",\"b2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac\",\"b2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac\",\"67001fb2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac053061\",\"67001fb2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac053061\").map(ka),pu=ua(Vm),Wm=Array(3).concat(\"ef8a62ffffff999999\",\"ca0020f4a582bababa404040\",\"ca0020f4a582ffffffbababa404040\",\"b2182bef8a62fddbc7e0e0e09999994d4d4d\",\n\"b2182bef8a62fddbc7ffffffe0e0e09999994d4d4d\",\"b2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d\",\"b2182bd6604df4a582fddbc7ffffffe0e0e0bababa8",
                    "rendered": {
                      "text": "5de0571b0\",\n\"ca0020f4a582f7f7f792c5de0571b0\",\"b2182bef8a62fddbc7d1e5f067a9cf2166ac\",\"b2182bef8a62fddbc7f7f7f7d1e5f067a9cf2166ac\",\"b2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac\",\"b2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac\",\"67001fb2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac053061\",\"67001fb2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac053061\").map(ka),pu=ua(Vm),Wm=Array(3).concat(\"ef8a62ffffff999999\",\"ca0020f4a582bababa404040\",\"ca0020f4a582ffffffbababa404040\",\"b2182bef8a62fddbc7e0e0e09999994d4d4d\",\n\"b2182bef8a62fddbc7ffffffe0e0e09999994d4d4d\",\"b2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d\",\"b2182bd6604df4a582fddbc7ffffffe0e0e0bababa8",
                      "markdown": "`5de0571b0\",\n\"ca0020f4a582f7f7f792c5de0571b0\",\"b2182bef8a62fddbc7d1e5f067a9cf2166ac\",\"b2182bef8a62fddbc7f7f7f7d1e5f067a9cf2166ac\",\"b2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac\",\"b2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac\",\"67001fb2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac053061\",\"67001fb2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac053061\").map(ka),pu=ua(Vm),Wm=Array(3).concat(\"ef8a62ffffff999999\",\"ca0020f4a582bababa404040\",\"ca0020f4a582ffffffbababa404040\",\"b2182bef8a62fddbc7e0e0e09999994d4d4d\",\n\"b2182bef8a62fddbc7ffffffe0e0e09999994d4d4d\",\"b2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d\",\"b2182bd6604df4a582fddbc7ffffffe0e0e0bababa8`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 794,
                  "startColumn": 225,
                  "endLine": 794,
                  "endColumn": 287,
                  "snippet": {
                    "text": "ua(Um),Vm=Array(3).concat(\"ef8a62f7f7f767a9cf\",\"ca0020f4a58292c5de0571b0\",\n\"ca0020f4a582f7f7f792c5de0571b0\",\"b2182bef8a62fddbc7d1e5f067a9cf2166ac\",\"b2182bef8a62fddbc7f7f7f7d1e5f067a9cf2166ac\",\"b2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac\",\"b2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac\",\"67001fb2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac053061\",\"67001fb2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac053061\").map(ka),pu=ua(Vm),Wm=Array(3).concat(\"ef8a62ffffff999999\",\"ca0020f4a582bababa404040\",\"ca0020f4a582ffffffbababa404040\",\"b2182bef8a62fddbc7e0e0e09999994d4d4d\",\n\"b2182bef8a62fddbc7ffffffe0e0e09999994d4d4d\",\"b2182bd6604df4a582fddbc7e",
                    "rendered": {
                      "text": "ua(Um),Vm=Array(3).concat(\"ef8a62f7f7f767a9cf\",\"ca0020f4a58292c5de0571b0\",\n\"ca0020f4a582f7f7f792c5de0571b0\",\"b2182bef8a62fddbc7d1e5f067a9cf2166ac\",\"b2182bef8a62fddbc7f7f7f7d1e5f067a9cf2166ac\",\"b2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac\",\"b2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac\",\"67001fb2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac053061\",\"67001fb2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac053061\").map(ka),pu=ua(Vm),Wm=Array(3).concat(\"ef8a62ffffff999999\",\"ca0020f4a582bababa404040\",\"ca0020f4a582ffffffbababa404040\",\"b2182bef8a62fddbc7e0e0e09999994d4d4d\",\n\"b2182bef8a62fddbc7ffffffe0e0e09999994d4d4d\",\"b2182bd6604df4a582fddbc7e",
                      "markdown": "`ua(Um),Vm=Array(3).concat(\"ef8a62f7f7f767a9cf\",\"ca0020f4a58292c5de0571b0\",\n\"ca0020f4a582f7f7f792c5de0571b0\",\"b2182bef8a62fddbc7d1e5f067a9cf2166ac\",\"b2182bef8a62fddbc7f7f7f7d1e5f067a9cf2166ac\",\"b2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac\",\"b2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac\",\"67001fb2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac053061\",\"67001fb2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac053061\").map(ka),pu=ua(Vm),Wm=Array(3).concat(\"ef8a62ffffff999999\",\"ca0020f4a582bababa404040\",\"ca0020f4a582ffffffbababa404040\",\"b2182bef8a62fddbc7e0e0e09999994d4d4d\",\n\"b2182bef8a62fddbc7ffffffe0e0e09999994d4d4d\",\"b2182bd6604df4a582fddbc7e`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 794,
                  "startColumn": 168,
                  "endLine": 794,
                  "endColumn": 224,
                  "snippet": {
                    "text": "2d8daebf7f7f7fee0b6fdb863e08214b358067f3b08\").map(ka),ou=ua(Um),Vm=Array(3).concat(\"ef8a62f7f7f767a9cf\",\"ca0020f4a58292c5de0571b0\",\n\"ca0020f4a582f7f7f792c5de0571b0\",\"b2182bef8a62fddbc7d1e5f067a9cf2166ac\",\"b2182bef8a62fddbc7f7f7f7d1e5f067a9cf2166ac\",\"b2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac\",\"b2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac\",\"67001fb2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac053061\",\"67001fb2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac053061\").map(ka),pu=ua(Vm),Wm=Array(3).concat(\"ef8a62ffffff999999\",\"ca0020f4a582bababa404040\",\"ca0020f4a582ffffffbababa404040\",\"b2182bef8a62fddbc7e0e0e09999994d4d4d\",\n\"b2182be",
                    "rendered": {
                      "text": "2d8daebf7f7f7fee0b6fdb863e08214b358067f3b08\").map(ka),ou=ua(Um),Vm=Array(3).concat(\"ef8a62f7f7f767a9cf\",\"ca0020f4a58292c5de0571b0\",\n\"ca0020f4a582f7f7f792c5de0571b0\",\"b2182bef8a62fddbc7d1e5f067a9cf2166ac\",\"b2182bef8a62fddbc7f7f7f7d1e5f067a9cf2166ac\",\"b2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac\",\"b2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac\",\"67001fb2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac053061\",\"67001fb2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac053061\").map(ka),pu=ua(Vm),Wm=Array(3).concat(\"ef8a62ffffff999999\",\"ca0020f4a582bababa404040\",\"ca0020f4a582ffffffbababa404040\",\"b2182bef8a62fddbc7e0e0e09999994d4d4d\",\n\"b2182be",
                      "markdown": "`2d8daebf7f7f7fee0b6fdb863e08214b358067f3b08\").map(ka),ou=ua(Um),Vm=Array(3).concat(\"ef8a62f7f7f767a9cf\",\"ca0020f4a58292c5de0571b0\",\n\"ca0020f4a582f7f7f792c5de0571b0\",\"b2182bef8a62fddbc7d1e5f067a9cf2166ac\",\"b2182bef8a62fddbc7f7f7f7d1e5f067a9cf2166ac\",\"b2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac\",\"b2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac\",\"67001fb2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac053061\",\"67001fb2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac053061\").map(ka),pu=ua(Vm),Wm=Array(3).concat(\"ef8a62ffffff999999\",\"ca0020f4a582bababa404040\",\"ca0020f4a582ffffffbababa404040\",\"b2182bef8a62fddbc7e0e0e09999994d4d4d\",\n\"b2182be`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 794,
                  "startColumn": 117,
                  "endLine": 794,
                  "endColumn": 167,
                  "snippet": {
                    "text": "6fdb863e08214b358067f3b08\",\"2d004b5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b358067f3b08\").map(ka),ou=ua(Um),Vm=Array(3).concat(\"ef8a62f7f7f767a9cf\",\"ca0020f4a58292c5de0571b0\",\n\"ca0020f4a582f7f7f792c5de0571b0\",\"b2182bef8a62fddbc7d1e5f067a9cf2166ac\",\"b2182bef8a62fddbc7f7f7f7d1e5f067a9cf2166ac\",\"b2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac\",\"b2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac\",\"67001fb2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac053061\",\"67001fb2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac053061\").map(ka),pu=ua(Vm),Wm=Array(3).concat(\"ef8a62ffffff999999\",\"ca0020f4a582bababa404040\",\"ca0020f4a582ffffffbabab",
                    "rendered": {
                      "text": "6fdb863e08214b358067f3b08\",\"2d004b5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b358067f3b08\").map(ka),ou=ua(Um),Vm=Array(3).concat(\"ef8a62f7f7f767a9cf\",\"ca0020f4a58292c5de0571b0\",\n\"ca0020f4a582f7f7f792c5de0571b0\",\"b2182bef8a62fddbc7d1e5f067a9cf2166ac\",\"b2182bef8a62fddbc7f7f7f7d1e5f067a9cf2166ac\",\"b2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac\",\"b2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac\",\"67001fb2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac053061\",\"67001fb2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac053061\").map(ka),pu=ua(Vm),Wm=Array(3).concat(\"ef8a62ffffff999999\",\"ca0020f4a582bababa404040\",\"ca0020f4a582ffffffbabab",
                      "markdown": "`6fdb863e08214b358067f3b08\",\"2d004b5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b358067f3b08\").map(ka),ou=ua(Um),Vm=Array(3).concat(\"ef8a62f7f7f767a9cf\",\"ca0020f4a58292c5de0571b0\",\n\"ca0020f4a582f7f7f792c5de0571b0\",\"b2182bef8a62fddbc7d1e5f067a9cf2166ac\",\"b2182bef8a62fddbc7f7f7f7d1e5f067a9cf2166ac\",\"b2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac\",\"b2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac\",\"67001fb2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac053061\",\"67001fb2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac053061\").map(ka),pu=ua(Vm),Wm=Array(3).concat(\"ef8a62ffffff999999\",\"ca0020f4a582bababa404040\",\"ca0020f4a582ffffffbabab`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 794,
                  "startColumn": 72,
                  "endLine": 794,
                  "endColumn": 116,
                  "snippet": {
                    "text": "4b35806\",\"2d004b5427888073acb2abd2d8daebfee0b6fdb863e08214b358067f3b08\",\"2d004b5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b358067f3b08\").map(ka),ou=ua(Um),Vm=Array(3).concat(\"ef8a62f7f7f767a9cf\",\"ca0020f4a58292c5de0571b0\",\n\"ca0020f4a582f7f7f792c5de0571b0\",\"b2182bef8a62fddbc7d1e5f067a9cf2166ac\",\"b2182bef8a62fddbc7f7f7f7d1e5f067a9cf2166ac\",\"b2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac\",\"b2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac\",\"67001fb2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac053061\",\"67001fb2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac053061\").map(ka),pu=ua(Vm),Wm=Array(3).concat(\"ef8a62ffffff999999\",",
                    "rendered": {
                      "text": "4b35806\",\"2d004b5427888073acb2abd2d8daebfee0b6fdb863e08214b358067f3b08\",\"2d004b5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b358067f3b08\").map(ka),ou=ua(Um),Vm=Array(3).concat(\"ef8a62f7f7f767a9cf\",\"ca0020f4a58292c5de0571b0\",\n\"ca0020f4a582f7f7f792c5de0571b0\",\"b2182bef8a62fddbc7d1e5f067a9cf2166ac\",\"b2182bef8a62fddbc7f7f7f7d1e5f067a9cf2166ac\",\"b2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac\",\"b2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac\",\"67001fb2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac053061\",\"67001fb2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac053061\").map(ka),pu=ua(Vm),Wm=Array(3).concat(\"ef8a62ffffff999999\",",
                      "markdown": "`4b35806\",\"2d004b5427888073acb2abd2d8daebfee0b6fdb863e08214b358067f3b08\",\"2d004b5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b358067f3b08\").map(ka),ou=ua(Um),Vm=Array(3).concat(\"ef8a62f7f7f767a9cf\",\"ca0020f4a58292c5de0571b0\",\n\"ca0020f4a582f7f7f792c5de0571b0\",\"b2182bef8a62fddbc7d1e5f067a9cf2166ac\",\"b2182bef8a62fddbc7f7f7f7d1e5f067a9cf2166ac\",\"b2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac\",\"b2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac\",\"67001fb2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac053061\",\"67001fb2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac053061\").map(ka),pu=ua(Vm),Wm=Array(3).concat(\"ef8a62ffffff999999\",`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 793,
                  "startColumn": 365,
                  "endLine": 793,
                  "endColumn": 433,
                  "snippet": {
                    "text": "b863e66101\",\"5e3c99b2abd2f7f7f7fdb863e66101\",\"542788998ec3d8daebfee0b6f1a340b35806\",\"542788998ec3d8daebf7f7f7fee0b6f1a340b35806\",\"5427888073acb2abd2d8daebfee0b6fdb863e08214b35806\",\"5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b35806\",\"2d004b5427888073acb2abd2d8daebfee0b6fdb863e08214b358067f3b08\",\"2d004b5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b358067f3b08\").map(ka),ou=ua(Um),Vm=Array(3).concat(\"ef8a62f7f7f767a9cf\",\"ca0020f4a58292c5de0571b0\",\n\"ca0020f4a582f7f7f792c5de0571b0\",\"b2182bef8a62fddbc7d1e5f067a9cf2166ac\",\"b2182bef8a62fddbc7f7f7f7d1e5f067a9cf2166ac\",\"b2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac\",\"b2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4",
                    "rendered": {
                      "text": "b863e66101\",\"5e3c99b2abd2f7f7f7fdb863e66101\",\"542788998ec3d8daebfee0b6f1a340b35806\",\"542788998ec3d8daebf7f7f7fee0b6f1a340b35806\",\"5427888073acb2abd2d8daebfee0b6fdb863e08214b35806\",\"5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b35806\",\"2d004b5427888073acb2abd2d8daebfee0b6fdb863e08214b358067f3b08\",\"2d004b5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b358067f3b08\").map(ka),ou=ua(Um),Vm=Array(3).concat(\"ef8a62f7f7f767a9cf\",\"ca0020f4a58292c5de0571b0\",\n\"ca0020f4a582f7f7f792c5de0571b0\",\"b2182bef8a62fddbc7d1e5f067a9cf2166ac\",\"b2182bef8a62fddbc7f7f7f7d1e5f067a9cf2166ac\",\"b2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac\",\"b2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4",
                      "markdown": "`b863e66101\",\"5e3c99b2abd2f7f7f7fdb863e66101\",\"542788998ec3d8daebfee0b6f1a340b35806\",\"542788998ec3d8daebf7f7f7fee0b6f1a340b35806\",\"5427888073acb2abd2d8daebfee0b6fdb863e08214b35806\",\"5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b35806\",\"2d004b5427888073acb2abd2d8daebfee0b6fdb863e08214b358067f3b08\",\"2d004b5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b358067f3b08\").map(ka),ou=ua(Um),Vm=Array(3).concat(\"ef8a62f7f7f767a9cf\",\"ca0020f4a58292c5de0571b0\",\n\"ca0020f4a582f7f7f792c5de0571b0\",\"b2182bef8a62fddbc7d1e5f067a9cf2166ac\",\"b2182bef8a62fddbc7f7f7f7d1e5f067a9cf2166ac\",\"b2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac\",\"b2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 793,
                  "startColumn": 302,
                  "endLine": 793,
                  "endColumn": 364,
                  "snippet": {
                    "text": "=ua(Tm),Um=Array(3).concat(\"998ec3f7f7f7f1a340\",\"5e3c99b2abd2fdb863e66101\",\"5e3c99b2abd2f7f7f7fdb863e66101\",\"542788998ec3d8daebfee0b6f1a340b35806\",\"542788998ec3d8daebf7f7f7fee0b6f1a340b35806\",\"5427888073acb2abd2d8daebfee0b6fdb863e08214b35806\",\"5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b35806\",\"2d004b5427888073acb2abd2d8daebfee0b6fdb863e08214b358067f3b08\",\"2d004b5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b358067f3b08\").map(ka),ou=ua(Um),Vm=Array(3).concat(\"ef8a62f7f7f767a9cf\",\"ca0020f4a58292c5de0571b0\",\n\"ca0020f4a582f7f7f792c5de0571b0\",\"b2182bef8a62fddbc7d1e5f067a9cf2166ac\",\"b2182bef8a62fddbc7f7f7f7d1e5f067a9cf2166ac\",\"b2182bd6604df4a582fddbc7d",
                    "rendered": {
                      "text": "=ua(Tm),Um=Array(3).concat(\"998ec3f7f7f7f1a340\",\"5e3c99b2abd2fdb863e66101\",\"5e3c99b2abd2f7f7f7fdb863e66101\",\"542788998ec3d8daebfee0b6f1a340b35806\",\"542788998ec3d8daebf7f7f7fee0b6f1a340b35806\",\"5427888073acb2abd2d8daebfee0b6fdb863e08214b35806\",\"5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b35806\",\"2d004b5427888073acb2abd2d8daebfee0b6fdb863e08214b358067f3b08\",\"2d004b5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b358067f3b08\").map(ka),ou=ua(Um),Vm=Array(3).concat(\"ef8a62f7f7f767a9cf\",\"ca0020f4a58292c5de0571b0\",\n\"ca0020f4a582f7f7f792c5de0571b0\",\"b2182bef8a62fddbc7d1e5f067a9cf2166ac\",\"b2182bef8a62fddbc7f7f7f7d1e5f067a9cf2166ac\",\"b2182bd6604df4a582fddbc7d",
                      "markdown": "`=ua(Tm),Um=Array(3).concat(\"998ec3f7f7f7f1a340\",\"5e3c99b2abd2fdb863e66101\",\"5e3c99b2abd2f7f7f7fdb863e66101\",\"542788998ec3d8daebfee0b6f1a340b35806\",\"542788998ec3d8daebf7f7f7fee0b6f1a340b35806\",\"5427888073acb2abd2d8daebfee0b6fdb863e08214b35806\",\"5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b35806\",\"2d004b5427888073acb2abd2d8daebfee0b6fdb863e08214b358067f3b08\",\"2d004b5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b358067f3b08\").map(ka),ou=ua(Um),Vm=Array(3).concat(\"ef8a62f7f7f767a9cf\",\"ca0020f4a58292c5de0571b0\",\n\"ca0020f4a582f7f7f792c5de0571b0\",\"b2182bef8a62fddbc7d1e5f067a9cf2166ac\",\"b2182bef8a62fddbc7f7f7f7d1e5f067a9cf2166ac\",\"b2182bd6604df4a582fddbc7d`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 793,
                  "startColumn": 245,
                  "endLine": 793,
                  "endColumn": 301,
                  "snippet": {
                    "text": "afde0eff7f7f7e6f5d0b8e1867fbc414d9221276419\").map(ka),\nnu=ua(Tm),Um=Array(3).concat(\"998ec3f7f7f7f1a340\",\"5e3c99b2abd2fdb863e66101\",\"5e3c99b2abd2f7f7f7fdb863e66101\",\"542788998ec3d8daebfee0b6f1a340b35806\",\"542788998ec3d8daebf7f7f7fee0b6f1a340b35806\",\"5427888073acb2abd2d8daebfee0b6fdb863e08214b35806\",\"5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b35806\",\"2d004b5427888073acb2abd2d8daebfee0b6fdb863e08214b358067f3b08\",\"2d004b5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b358067f3b08\").map(ka),ou=ua(Um),Vm=Array(3).concat(\"ef8a62f7f7f767a9cf\",\"ca0020f4a58292c5de0571b0\",\n\"ca0020f4a582f7f7f792c5de0571b0\",\"b2182bef8a62fddbc7d1e5f067a9cf2166ac\",\"b2182be",
                    "rendered": {
                      "text": "afde0eff7f7f7e6f5d0b8e1867fbc414d9221276419\").map(ka),\nnu=ua(Tm),Um=Array(3).concat(\"998ec3f7f7f7f1a340\",\"5e3c99b2abd2fdb863e66101\",\"5e3c99b2abd2f7f7f7fdb863e66101\",\"542788998ec3d8daebfee0b6f1a340b35806\",\"542788998ec3d8daebf7f7f7fee0b6f1a340b35806\",\"5427888073acb2abd2d8daebfee0b6fdb863e08214b35806\",\"5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b35806\",\"2d004b5427888073acb2abd2d8daebfee0b6fdb863e08214b358067f3b08\",\"2d004b5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b358067f3b08\").map(ka),ou=ua(Um),Vm=Array(3).concat(\"ef8a62f7f7f767a9cf\",\"ca0020f4a58292c5de0571b0\",\n\"ca0020f4a582f7f7f792c5de0571b0\",\"b2182bef8a62fddbc7d1e5f067a9cf2166ac\",\"b2182be",
                      "markdown": "`afde0eff7f7f7e6f5d0b8e1867fbc414d9221276419\").map(ka),\nnu=ua(Tm),Um=Array(3).concat(\"998ec3f7f7f7f1a340\",\"5e3c99b2abd2fdb863e66101\",\"5e3c99b2abd2f7f7f7fdb863e66101\",\"542788998ec3d8daebfee0b6f1a340b35806\",\"542788998ec3d8daebf7f7f7fee0b6f1a340b35806\",\"5427888073acb2abd2d8daebfee0b6fdb863e08214b35806\",\"5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b35806\",\"2d004b5427888073acb2abd2d8daebfee0b6fdb863e08214b358067f3b08\",\"2d004b5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b358067f3b08\").map(ka),ou=ua(Um),Vm=Array(3).concat(\"ef8a62f7f7f767a9cf\",\"ca0020f4a58292c5de0571b0\",\n\"ca0020f4a582f7f7f792c5de0571b0\",\"b2182bef8a62fddbc7d1e5f067a9cf2166ac\",\"b2182be`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 793,
                  "startColumn": 194,
                  "endLine": 793,
                  "endColumn": 244,
                  "snippet": {
                    "text": "0b8e1867fbc414d9221276419\",\"8e0152c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221276419\").map(ka),\nnu=ua(Tm),Um=Array(3).concat(\"998ec3f7f7f7f1a340\",\"5e3c99b2abd2fdb863e66101\",\"5e3c99b2abd2f7f7f7fdb863e66101\",\"542788998ec3d8daebfee0b6f1a340b35806\",\"542788998ec3d8daebf7f7f7fee0b6f1a340b35806\",\"5427888073acb2abd2d8daebfee0b6fdb863e08214b35806\",\"5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b35806\",\"2d004b5427888073acb2abd2d8daebfee0b6fdb863e08214b358067f3b08\",\"2d004b5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b358067f3b08\").map(ka),ou=ua(Um),Vm=Array(3).concat(\"ef8a62f7f7f767a9cf\",\"ca0020f4a58292c5de0571b0\",\n\"ca0020f4a582f7f7f792c5",
                    "rendered": {
                      "text": "0b8e1867fbc414d9221276419\",\"8e0152c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221276419\").map(ka),\nnu=ua(Tm),Um=Array(3).concat(\"998ec3f7f7f7f1a340\",\"5e3c99b2abd2fdb863e66101\",\"5e3c99b2abd2f7f7f7fdb863e66101\",\"542788998ec3d8daebfee0b6f1a340b35806\",\"542788998ec3d8daebf7f7f7fee0b6f1a340b35806\",\"5427888073acb2abd2d8daebfee0b6fdb863e08214b35806\",\"5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b35806\",\"2d004b5427888073acb2abd2d8daebfee0b6fdb863e08214b358067f3b08\",\"2d004b5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b358067f3b08\").map(ka),ou=ua(Um),Vm=Array(3).concat(\"ef8a62f7f7f767a9cf\",\"ca0020f4a58292c5de0571b0\",\n\"ca0020f4a582f7f7f792c5",
                      "markdown": "`0b8e1867fbc414d9221276419\",\"8e0152c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221276419\").map(ka),\nnu=ua(Tm),Um=Array(3).concat(\"998ec3f7f7f7f1a340\",\"5e3c99b2abd2fdb863e66101\",\"5e3c99b2abd2f7f7f7fdb863e66101\",\"542788998ec3d8daebfee0b6f1a340b35806\",\"542788998ec3d8daebf7f7f7fee0b6f1a340b35806\",\"5427888073acb2abd2d8daebfee0b6fdb863e08214b35806\",\"5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b35806\",\"2d004b5427888073acb2abd2d8daebfee0b6fdb863e08214b358067f3b08\",\"2d004b5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b358067f3b08\").map(ka),ou=ua(Um),Vm=Array(3).concat(\"ef8a62f7f7f767a9cf\",\"ca0020f4a58292c5de0571b0\",\n\"ca0020f4a582f7f7f792c5`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 793,
                  "startColumn": 149,
                  "endLine": 793,
                  "endColumn": 193,
                  "snippet": {
                    "text": "14d9221\",\"8e0152c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221276419\",\"8e0152c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221276419\").map(ka),\nnu=ua(Tm),Um=Array(3).concat(\"998ec3f7f7f7f1a340\",\"5e3c99b2abd2fdb863e66101\",\"5e3c99b2abd2f7f7f7fdb863e66101\",\"542788998ec3d8daebfee0b6f1a340b35806\",\"542788998ec3d8daebf7f7f7fee0b6f1a340b35806\",\"5427888073acb2abd2d8daebfee0b6fdb863e08214b35806\",\"5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b35806\",\"2d004b5427888073acb2abd2d8daebfee0b6fdb863e08214b358067f3b08\",\"2d004b5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b358067f3b08\").map(ka),ou=ua(Um),Vm=Array(3).concat(\"ef8a62f7f7f767a9cf\",",
                    "rendered": {
                      "text": "14d9221\",\"8e0152c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221276419\",\"8e0152c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221276419\").map(ka),\nnu=ua(Tm),Um=Array(3).concat(\"998ec3f7f7f7f1a340\",\"5e3c99b2abd2fdb863e66101\",\"5e3c99b2abd2f7f7f7fdb863e66101\",\"542788998ec3d8daebfee0b6f1a340b35806\",\"542788998ec3d8daebf7f7f7fee0b6f1a340b35806\",\"5427888073acb2abd2d8daebfee0b6fdb863e08214b35806\",\"5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b35806\",\"2d004b5427888073acb2abd2d8daebfee0b6fdb863e08214b358067f3b08\",\"2d004b5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b358067f3b08\").map(ka),ou=ua(Um),Vm=Array(3).concat(\"ef8a62f7f7f767a9cf\",",
                      "markdown": "`14d9221\",\"8e0152c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221276419\",\"8e0152c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221276419\").map(ka),\nnu=ua(Tm),Um=Array(3).concat(\"998ec3f7f7f7f1a340\",\"5e3c99b2abd2fdb863e66101\",\"5e3c99b2abd2f7f7f7fdb863e66101\",\"542788998ec3d8daebfee0b6f1a340b35806\",\"542788998ec3d8daebf7f7f7fee0b6f1a340b35806\",\"5427888073acb2abd2d8daebfee0b6fdb863e08214b35806\",\"5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b35806\",\"2d004b5427888073acb2abd2d8daebfee0b6fdb863e08214b358067f3b08\",\"2d004b5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b358067f3b08\").map(ka),ou=ua(Um),Vm=Array(3).concat(\"ef8a62f7f7f767a9cf\",`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 792,
                  "startColumn": 443,
                  "endLine": 792,
                  "endColumn": 511,
                  "snippet": {
                    "text": "e1864dac26\",\"d01c8bf1b6daf7f7f7b8e1864dac26\",\"c51b7de9a3c9fde0efe6f5d0a1d76a4d9221\",\"c51b7de9a3c9fde0eff7f7f7e6f5d0a1d76a4d9221\",\"c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221\",\"c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221\",\"8e0152c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221276419\",\"8e0152c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221276419\").map(ka),\nnu=ua(Tm),Um=Array(3).concat(\"998ec3f7f7f7f1a340\",\"5e3c99b2abd2fdb863e66101\",\"5e3c99b2abd2f7f7f7fdb863e66101\",\"542788998ec3d8daebfee0b6f1a340b35806\",\"542788998ec3d8daebf7f7f7fee0b6f1a340b35806\",\"5427888073acb2abd2d8daebfee0b6fdb863e08214b35806\",\"5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e",
                    "rendered": {
                      "text": "e1864dac26\",\"d01c8bf1b6daf7f7f7b8e1864dac26\",\"c51b7de9a3c9fde0efe6f5d0a1d76a4d9221\",\"c51b7de9a3c9fde0eff7f7f7e6f5d0a1d76a4d9221\",\"c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221\",\"c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221\",\"8e0152c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221276419\",\"8e0152c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221276419\").map(ka),\nnu=ua(Tm),Um=Array(3).concat(\"998ec3f7f7f7f1a340\",\"5e3c99b2abd2fdb863e66101\",\"5e3c99b2abd2f7f7f7fdb863e66101\",\"542788998ec3d8daebfee0b6f1a340b35806\",\"542788998ec3d8daebf7f7f7fee0b6f1a340b35806\",\"5427888073acb2abd2d8daebfee0b6fdb863e08214b35806\",\"5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e",
                      "markdown": "`e1864dac26\",\"d01c8bf1b6daf7f7f7b8e1864dac26\",\"c51b7de9a3c9fde0efe6f5d0a1d76a4d9221\",\"c51b7de9a3c9fde0eff7f7f7e6f5d0a1d76a4d9221\",\"c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221\",\"c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221\",\"8e0152c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221276419\",\"8e0152c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221276419\").map(ka),\nnu=ua(Tm),Um=Array(3).concat(\"998ec3f7f7f7f1a340\",\"5e3c99b2abd2fdb863e66101\",\"5e3c99b2abd2f7f7f7fdb863e66101\",\"542788998ec3d8daebfee0b6f1a340b35806\",\"542788998ec3d8daebf7f7f7fee0b6f1a340b35806\",\"5427888073acb2abd2d8daebfee0b6fdb863e08214b35806\",\"5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 792,
                  "startColumn": 380,
                  "endLine": 792,
                  "endColumn": 442,
                  "snippet": {
                    "text": "=ua(Sm),Tm=Array(3).concat(\"e9a3c9f7f7f7a1d76a\",\"d01c8bf1b6dab8e1864dac26\",\"d01c8bf1b6daf7f7f7b8e1864dac26\",\"c51b7de9a3c9fde0efe6f5d0a1d76a4d9221\",\"c51b7de9a3c9fde0eff7f7f7e6f5d0a1d76a4d9221\",\"c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221\",\"c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221\",\"8e0152c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221276419\",\"8e0152c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221276419\").map(ka),\nnu=ua(Tm),Um=Array(3).concat(\"998ec3f7f7f7f1a340\",\"5e3c99b2abd2fdb863e66101\",\"5e3c99b2abd2f7f7f7fdb863e66101\",\"542788998ec3d8daebfee0b6f1a340b35806\",\"542788998ec3d8daebf7f7f7fee0b6f1a340b35806\",\"5427888073acb2abd2d8daebf",
                    "rendered": {
                      "text": "=ua(Sm),Tm=Array(3).concat(\"e9a3c9f7f7f7a1d76a\",\"d01c8bf1b6dab8e1864dac26\",\"d01c8bf1b6daf7f7f7b8e1864dac26\",\"c51b7de9a3c9fde0efe6f5d0a1d76a4d9221\",\"c51b7de9a3c9fde0eff7f7f7e6f5d0a1d76a4d9221\",\"c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221\",\"c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221\",\"8e0152c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221276419\",\"8e0152c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221276419\").map(ka),\nnu=ua(Tm),Um=Array(3).concat(\"998ec3f7f7f7f1a340\",\"5e3c99b2abd2fdb863e66101\",\"5e3c99b2abd2f7f7f7fdb863e66101\",\"542788998ec3d8daebfee0b6f1a340b35806\",\"542788998ec3d8daebf7f7f7fee0b6f1a340b35806\",\"5427888073acb2abd2d8daebf",
                      "markdown": "`=ua(Sm),Tm=Array(3).concat(\"e9a3c9f7f7f7a1d76a\",\"d01c8bf1b6dab8e1864dac26\",\"d01c8bf1b6daf7f7f7b8e1864dac26\",\"c51b7de9a3c9fde0efe6f5d0a1d76a4d9221\",\"c51b7de9a3c9fde0eff7f7f7e6f5d0a1d76a4d9221\",\"c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221\",\"c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221\",\"8e0152c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221276419\",\"8e0152c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221276419\").map(ka),\nnu=ua(Tm),Um=Array(3).concat(\"998ec3f7f7f7f1a340\",\"5e3c99b2abd2fdb863e66101\",\"5e3c99b2abd2f7f7f7fdb863e66101\",\"542788998ec3d8daebfee0b6f1a340b35806\",\"542788998ec3d8daebf7f7f7fee0b6f1a340b35806\",\"5427888073acb2abd2d8daebf`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 792,
                  "startColumn": 323,
                  "endLine": 792,
                  "endColumn": 379,
                  "snippet": {
                    "text": "cfe7d4e8f7f7f7d9f0d3a6dba05aae611b783700441b\").map(ka),mu=ua(Sm),Tm=Array(3).concat(\"e9a3c9f7f7f7a1d76a\",\"d01c8bf1b6dab8e1864dac26\",\"d01c8bf1b6daf7f7f7b8e1864dac26\",\"c51b7de9a3c9fde0efe6f5d0a1d76a4d9221\",\"c51b7de9a3c9fde0eff7f7f7e6f5d0a1d76a4d9221\",\"c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221\",\"c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221\",\"8e0152c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221276419\",\"8e0152c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221276419\").map(ka),\nnu=ua(Tm),Um=Array(3).concat(\"998ec3f7f7f7f1a340\",\"5e3c99b2abd2fdb863e66101\",\"5e3c99b2abd2f7f7f7fdb863e66101\",\"542788998ec3d8daebfee0b6f1a340b35806\",\"5427889",
                    "rendered": {
                      "text": "cfe7d4e8f7f7f7d9f0d3a6dba05aae611b783700441b\").map(ka),mu=ua(Sm),Tm=Array(3).concat(\"e9a3c9f7f7f7a1d76a\",\"d01c8bf1b6dab8e1864dac26\",\"d01c8bf1b6daf7f7f7b8e1864dac26\",\"c51b7de9a3c9fde0efe6f5d0a1d76a4d9221\",\"c51b7de9a3c9fde0eff7f7f7e6f5d0a1d76a4d9221\",\"c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221\",\"c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221\",\"8e0152c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221276419\",\"8e0152c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221276419\").map(ka),\nnu=ua(Tm),Um=Array(3).concat(\"998ec3f7f7f7f1a340\",\"5e3c99b2abd2fdb863e66101\",\"5e3c99b2abd2f7f7f7fdb863e66101\",\"542788998ec3d8daebfee0b6f1a340b35806\",\"5427889",
                      "markdown": "`cfe7d4e8f7f7f7d9f0d3a6dba05aae611b783700441b\").map(ka),mu=ua(Sm),Tm=Array(3).concat(\"e9a3c9f7f7f7a1d76a\",\"d01c8bf1b6dab8e1864dac26\",\"d01c8bf1b6daf7f7f7b8e1864dac26\",\"c51b7de9a3c9fde0efe6f5d0a1d76a4d9221\",\"c51b7de9a3c9fde0eff7f7f7e6f5d0a1d76a4d9221\",\"c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221\",\"c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221\",\"8e0152c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221276419\",\"8e0152c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221276419\").map(ka),\nnu=ua(Tm),Um=Array(3).concat(\"998ec3f7f7f7f1a340\",\"5e3c99b2abd2fdb863e66101\",\"5e3c99b2abd2f7f7f7fdb863e66101\",\"542788998ec3d8daebfee0b6f1a340b35806\",\"5427889`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 792,
                  "startColumn": 272,
                  "endLine": 792,
                  "endColumn": 322,
                  "snippet": {
                    "text": "3a6dba05aae611b783700441b\",\n\"40004b762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b783700441b\").map(ka),mu=ua(Sm),Tm=Array(3).concat(\"e9a3c9f7f7f7a1d76a\",\"d01c8bf1b6dab8e1864dac26\",\"d01c8bf1b6daf7f7f7b8e1864dac26\",\"c51b7de9a3c9fde0efe6f5d0a1d76a4d9221\",\"c51b7de9a3c9fde0eff7f7f7e6f5d0a1d76a4d9221\",\"c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221\",\"c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221\",\"8e0152c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221276419\",\"8e0152c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221276419\").map(ka),\nnu=ua(Tm),Um=Array(3).concat(\"998ec3f7f7f7f1a340\",\"5e3c99b2abd2fdb863e66101\",\"5e3c99b2abd2f7f7f7fdb8",
                    "rendered": {
                      "text": "3a6dba05aae611b783700441b\",\n\"40004b762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b783700441b\").map(ka),mu=ua(Sm),Tm=Array(3).concat(\"e9a3c9f7f7f7a1d76a\",\"d01c8bf1b6dab8e1864dac26\",\"d01c8bf1b6daf7f7f7b8e1864dac26\",\"c51b7de9a3c9fde0efe6f5d0a1d76a4d9221\",\"c51b7de9a3c9fde0eff7f7f7e6f5d0a1d76a4d9221\",\"c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221\",\"c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221\",\"8e0152c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221276419\",\"8e0152c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221276419\").map(ka),\nnu=ua(Tm),Um=Array(3).concat(\"998ec3f7f7f7f1a340\",\"5e3c99b2abd2fdb863e66101\",\"5e3c99b2abd2f7f7f7fdb8",
                      "markdown": "`3a6dba05aae611b783700441b\",\n\"40004b762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b783700441b\").map(ka),mu=ua(Sm),Tm=Array(3).concat(\"e9a3c9f7f7f7a1d76a\",\"d01c8bf1b6dab8e1864dac26\",\"d01c8bf1b6daf7f7f7b8e1864dac26\",\"c51b7de9a3c9fde0efe6f5d0a1d76a4d9221\",\"c51b7de9a3c9fde0eff7f7f7e6f5d0a1d76a4d9221\",\"c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221\",\"c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221\",\"8e0152c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221276419\",\"8e0152c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221276419\").map(ka),\nnu=ua(Tm),Um=Array(3).concat(\"998ec3f7f7f7f1a340\",\"5e3c99b2abd2fdb863e66101\",\"5e3c99b2abd2f7f7f7fdb8`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 792,
                  "startColumn": 227,
                  "endLine": 792,
                  "endColumn": 271,
                  "snippet": {
                    "text": "11b7837\",\"40004b762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b783700441b\",\n\"40004b762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b783700441b\").map(ka),mu=ua(Sm),Tm=Array(3).concat(\"e9a3c9f7f7f7a1d76a\",\"d01c8bf1b6dab8e1864dac26\",\"d01c8bf1b6daf7f7f7b8e1864dac26\",\"c51b7de9a3c9fde0efe6f5d0a1d76a4d9221\",\"c51b7de9a3c9fde0eff7f7f7e6f5d0a1d76a4d9221\",\"c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221\",\"c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221\",\"8e0152c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221276419\",\"8e0152c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221276419\").map(ka),\nnu=ua(Tm),Um=Array(3).concat(\"998ec3f7f7f7f1a340\"",
                    "rendered": {
                      "text": "11b7837\",\"40004b762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b783700441b\",\n\"40004b762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b783700441b\").map(ka),mu=ua(Sm),Tm=Array(3).concat(\"e9a3c9f7f7f7a1d76a\",\"d01c8bf1b6dab8e1864dac26\",\"d01c8bf1b6daf7f7f7b8e1864dac26\",\"c51b7de9a3c9fde0efe6f5d0a1d76a4d9221\",\"c51b7de9a3c9fde0eff7f7f7e6f5d0a1d76a4d9221\",\"c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221\",\"c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221\",\"8e0152c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221276419\",\"8e0152c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221276419\").map(ka),\nnu=ua(Tm),Um=Array(3).concat(\"998ec3f7f7f7f1a340\"",
                      "markdown": "`11b7837\",\"40004b762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b783700441b\",\n\"40004b762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b783700441b\").map(ka),mu=ua(Sm),Tm=Array(3).concat(\"e9a3c9f7f7f7a1d76a\",\"d01c8bf1b6dab8e1864dac26\",\"d01c8bf1b6daf7f7f7b8e1864dac26\",\"c51b7de9a3c9fde0efe6f5d0a1d76a4d9221\",\"c51b7de9a3c9fde0eff7f7f7e6f5d0a1d76a4d9221\",\"c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221\",\"c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221\",\"8e0152c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221276419\",\"8e0152c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221276419\").map(ka),\nnu=ua(Tm),Um=Array(3).concat(\"998ec3f7f7f7f1a340\"`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 792,
                  "endLine": 792,
                  "endColumn": 68,
                  "snippet": {
                    "text": "ba0008837\",\"7b3294c2a5cff7f7f7a6dba0008837\",\"762a83af8dc3e7d4e8d9f0d37fbf7b1b7837\",\"762a83af8dc3e7d4e8f7f7f7d9f0d37fbf7b1b7837\",\"762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b7837\",\"762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b7837\",\"40004b762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b783700441b\",\n\"40004b762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b783700441b\").map(ka),mu=ua(Sm),Tm=Array(3).concat(\"e9a3c9f7f7f7a1d76a\",\"d01c8bf1b6dab8e1864dac26\",\"d01c8bf1b6daf7f7f7b8e1864dac26\",\"c51b7de9a3c9fde0efe6f5d0a1d76a4d9221\",\"c51b7de9a3c9fde0eff7f7f7e6f5d0a1d76a4d9221\",\"c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221\",\"c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867f",
                    "rendered": {
                      "text": "ba0008837\",\"7b3294c2a5cff7f7f7a6dba0008837\",\"762a83af8dc3e7d4e8d9f0d37fbf7b1b7837\",\"762a83af8dc3e7d4e8f7f7f7d9f0d37fbf7b1b7837\",\"762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b7837\",\"762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b7837\",\"40004b762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b783700441b\",\n\"40004b762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b783700441b\").map(ka),mu=ua(Sm),Tm=Array(3).concat(\"e9a3c9f7f7f7a1d76a\",\"d01c8bf1b6dab8e1864dac26\",\"d01c8bf1b6daf7f7f7b8e1864dac26\",\"c51b7de9a3c9fde0efe6f5d0a1d76a4d9221\",\"c51b7de9a3c9fde0eff7f7f7e6f5d0a1d76a4d9221\",\"c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221\",\"c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867f",
                      "markdown": "`ba0008837\",\"7b3294c2a5cff7f7f7a6dba0008837\",\"762a83af8dc3e7d4e8d9f0d37fbf7b1b7837\",\"762a83af8dc3e7d4e8f7f7f7d9f0d37fbf7b1b7837\",\"762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b7837\",\"762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b7837\",\"40004b762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b783700441b\",\n\"40004b762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b783700441b\").map(ka),mu=ua(Sm),Tm=Array(3).concat(\"e9a3c9f7f7f7a1d76a\",\"d01c8bf1b6dab8e1864dac26\",\"d01c8bf1b6daf7f7f7b8e1864dac26\",\"c51b7de9a3c9fde0efe6f5d0a1d76a4d9221\",\"c51b7de9a3c9fde0eff7f7f7e6f5d0a1d76a4d9221\",\"c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221\",\"c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867f`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 791,
                  "startColumn": 443,
                  "endLine": 791,
                  "endColumn": 505,
                  "snippet": {
                    "text": "=ua(Rm),Sm=Array(3).concat(\"af8dc3f7f7f77fbf7b\",\"7b3294c2a5cfa6dba0008837\",\"7b3294c2a5cff7f7f7a6dba0008837\",\"762a83af8dc3e7d4e8d9f0d37fbf7b1b7837\",\"762a83af8dc3e7d4e8f7f7f7d9f0d37fbf7b1b7837\",\"762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b7837\",\"762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b7837\",\"40004b762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b783700441b\",\n\"40004b762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b783700441b\").map(ka),mu=ua(Sm),Tm=Array(3).concat(\"e9a3c9f7f7f7a1d76a\",\"d01c8bf1b6dab8e1864dac26\",\"d01c8bf1b6daf7f7f7b8e1864dac26\",\"c51b7de9a3c9fde0efe6f5d0a1d76a4d9221\",\"c51b7de9a3c9fde0eff7f7f7e6f5d0a1d76a4d9221\",\"c51b7dde77aef1b6dafde0efe",
                    "rendered": {
                      "text": "=ua(Rm),Sm=Array(3).concat(\"af8dc3f7f7f77fbf7b\",\"7b3294c2a5cfa6dba0008837\",\"7b3294c2a5cff7f7f7a6dba0008837\",\"762a83af8dc3e7d4e8d9f0d37fbf7b1b7837\",\"762a83af8dc3e7d4e8f7f7f7d9f0d37fbf7b1b7837\",\"762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b7837\",\"762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b7837\",\"40004b762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b783700441b\",\n\"40004b762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b783700441b\").map(ka),mu=ua(Sm),Tm=Array(3).concat(\"e9a3c9f7f7f7a1d76a\",\"d01c8bf1b6dab8e1864dac26\",\"d01c8bf1b6daf7f7f7b8e1864dac26\",\"c51b7de9a3c9fde0efe6f5d0a1d76a4d9221\",\"c51b7de9a3c9fde0eff7f7f7e6f5d0a1d76a4d9221\",\"c51b7dde77aef1b6dafde0efe",
                      "markdown": "`=ua(Rm),Sm=Array(3).concat(\"af8dc3f7f7f77fbf7b\",\"7b3294c2a5cfa6dba0008837\",\"7b3294c2a5cff7f7f7a6dba0008837\",\"762a83af8dc3e7d4e8d9f0d37fbf7b1b7837\",\"762a83af8dc3e7d4e8f7f7f7d9f0d37fbf7b1b7837\",\"762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b7837\",\"762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b7837\",\"40004b762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b783700441b\",\n\"40004b762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b783700441b\").map(ka),mu=ua(Sm),Tm=Array(3).concat(\"e9a3c9f7f7f7a1d76a\",\"d01c8bf1b6dab8e1864dac26\",\"d01c8bf1b6daf7f7f7b8e1864dac26\",\"c51b7de9a3c9fde0efe6f5d0a1d76a4d9221\",\"c51b7de9a3c9fde0eff7f7f7e6f5d0a1d76a4d9221\",\"c51b7dde77aef1b6dafde0efe`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 791,
                  "startColumn": 386,
                  "endLine": 791,
                  "endColumn": 442,
                  "snippet": {
                    "text": "7df6e8c3f5f5f5c7eae580cdc135978f01665e003c30\").map(ka),lu=ua(Rm),Sm=Array(3).concat(\"af8dc3f7f7f77fbf7b\",\"7b3294c2a5cfa6dba0008837\",\"7b3294c2a5cff7f7f7a6dba0008837\",\"762a83af8dc3e7d4e8d9f0d37fbf7b1b7837\",\"762a83af8dc3e7d4e8f7f7f7d9f0d37fbf7b1b7837\",\"762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b7837\",\"762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b7837\",\"40004b762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b783700441b\",\n\"40004b762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b783700441b\").map(ka),mu=ua(Sm),Tm=Array(3).concat(\"e9a3c9f7f7f7a1d76a\",\"d01c8bf1b6dab8e1864dac26\",\"d01c8bf1b6daf7f7f7b8e1864dac26\",\"c51b7de9a3c9fde0efe6f5d0a1d76a4d9221\",\"c51b7de",
                    "rendered": {
                      "text": "7df6e8c3f5f5f5c7eae580cdc135978f01665e003c30\").map(ka),lu=ua(Rm),Sm=Array(3).concat(\"af8dc3f7f7f77fbf7b\",\"7b3294c2a5cfa6dba0008837\",\"7b3294c2a5cff7f7f7a6dba0008837\",\"762a83af8dc3e7d4e8d9f0d37fbf7b1b7837\",\"762a83af8dc3e7d4e8f7f7f7d9f0d37fbf7b1b7837\",\"762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b7837\",\"762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b7837\",\"40004b762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b783700441b\",\n\"40004b762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b783700441b\").map(ka),mu=ua(Sm),Tm=Array(3).concat(\"e9a3c9f7f7f7a1d76a\",\"d01c8bf1b6dab8e1864dac26\",\"d01c8bf1b6daf7f7f7b8e1864dac26\",\"c51b7de9a3c9fde0efe6f5d0a1d76a4d9221\",\"c51b7de",
                      "markdown": "`7df6e8c3f5f5f5c7eae580cdc135978f01665e003c30\").map(ka),lu=ua(Rm),Sm=Array(3).concat(\"af8dc3f7f7f77fbf7b\",\"7b3294c2a5cfa6dba0008837\",\"7b3294c2a5cff7f7f7a6dba0008837\",\"762a83af8dc3e7d4e8d9f0d37fbf7b1b7837\",\"762a83af8dc3e7d4e8f7f7f7d9f0d37fbf7b1b7837\",\"762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b7837\",\"762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b7837\",\"40004b762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b783700441b\",\n\"40004b762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b783700441b\").map(ka),mu=ua(Sm),Tm=Array(3).concat(\"e9a3c9f7f7f7a1d76a\",\"d01c8bf1b6dab8e1864dac26\",\"d01c8bf1b6daf7f7f7b8e1864dac26\",\"c51b7de9a3c9fde0efe6f5d0a1d76a4d9221\",\"c51b7de`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 791,
                  "startColumn": 335,
                  "endLine": 791,
                  "endColumn": 385,
                  "snippet": {
                    "text": "e580cdc135978f01665e003c30\",\"5430058c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e003c30\").map(ka),lu=ua(Rm),Sm=Array(3).concat(\"af8dc3f7f7f77fbf7b\",\"7b3294c2a5cfa6dba0008837\",\"7b3294c2a5cff7f7f7a6dba0008837\",\"762a83af8dc3e7d4e8d9f0d37fbf7b1b7837\",\"762a83af8dc3e7d4e8f7f7f7d9f0d37fbf7b1b7837\",\"762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b7837\",\"762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b7837\",\"40004b762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b783700441b\",\n\"40004b762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b783700441b\").map(ka),mu=ua(Sm),Tm=Array(3).concat(\"e9a3c9f7f7f7a1d76a\",\"d01c8bf1b6dab8e1864dac26\",\"d01c8bf1b6daf7f7f7b8e1",
                    "rendered": {
                      "text": "e580cdc135978f01665e003c30\",\"5430058c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e003c30\").map(ka),lu=ua(Rm),Sm=Array(3).concat(\"af8dc3f7f7f77fbf7b\",\"7b3294c2a5cfa6dba0008837\",\"7b3294c2a5cff7f7f7a6dba0008837\",\"762a83af8dc3e7d4e8d9f0d37fbf7b1b7837\",\"762a83af8dc3e7d4e8f7f7f7d9f0d37fbf7b1b7837\",\"762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b7837\",\"762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b7837\",\"40004b762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b783700441b\",\n\"40004b762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b783700441b\").map(ka),mu=ua(Sm),Tm=Array(3).concat(\"e9a3c9f7f7f7a1d76a\",\"d01c8bf1b6dab8e1864dac26\",\"d01c8bf1b6daf7f7f7b8e1",
                      "markdown": "`e580cdc135978f01665e003c30\",\"5430058c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e003c30\").map(ka),lu=ua(Rm),Sm=Array(3).concat(\"af8dc3f7f7f77fbf7b\",\"7b3294c2a5cfa6dba0008837\",\"7b3294c2a5cff7f7f7a6dba0008837\",\"762a83af8dc3e7d4e8d9f0d37fbf7b1b7837\",\"762a83af8dc3e7d4e8f7f7f7d9f0d37fbf7b1b7837\",\"762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b7837\",\"762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b7837\",\"40004b762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b783700441b\",\n\"40004b762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b783700441b\").map(ka),mu=ua(Sm),Tm=Array(3).concat(\"e9a3c9f7f7f7a1d76a\",\"d01c8bf1b6dab8e1864dac26\",\"d01c8bf1b6daf7f7f7b8e1`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 791,
                  "startColumn": 290,
                  "endLine": 791,
                  "endColumn": 334,
                  "snippet": {
                    "text": "f01665e\",\n\"5430058c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e003c30\",\"5430058c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e003c30\").map(ka),lu=ua(Rm),Sm=Array(3).concat(\"af8dc3f7f7f77fbf7b\",\"7b3294c2a5cfa6dba0008837\",\"7b3294c2a5cff7f7f7a6dba0008837\",\"762a83af8dc3e7d4e8d9f0d37fbf7b1b7837\",\"762a83af8dc3e7d4e8f7f7f7d9f0d37fbf7b1b7837\",\"762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b7837\",\"762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b7837\",\"40004b762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b783700441b\",\n\"40004b762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b783700441b\").map(ka),mu=ua(Sm),Tm=Array(3).concat(\"e9a3c9f7f7f7a1d76a\"",
                    "rendered": {
                      "text": "f01665e\",\n\"5430058c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e003c30\",\"5430058c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e003c30\").map(ka),lu=ua(Rm),Sm=Array(3).concat(\"af8dc3f7f7f77fbf7b\",\"7b3294c2a5cfa6dba0008837\",\"7b3294c2a5cff7f7f7a6dba0008837\",\"762a83af8dc3e7d4e8d9f0d37fbf7b1b7837\",\"762a83af8dc3e7d4e8f7f7f7d9f0d37fbf7b1b7837\",\"762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b7837\",\"762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b7837\",\"40004b762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b783700441b\",\n\"40004b762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b783700441b\").map(ka),mu=ua(Sm),Tm=Array(3).concat(\"e9a3c9f7f7f7a1d76a\"",
                      "markdown": "`f01665e\",\n\"5430058c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e003c30\",\"5430058c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e003c30\").map(ka),lu=ua(Rm),Sm=Array(3).concat(\"af8dc3f7f7f77fbf7b\",\"7b3294c2a5cfa6dba0008837\",\"7b3294c2a5cff7f7f7a6dba0008837\",\"762a83af8dc3e7d4e8d9f0d37fbf7b1b7837\",\"762a83af8dc3e7d4e8f7f7f7d9f0d37fbf7b1b7837\",\"762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b7837\",\"762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b7837\",\"40004b762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b783700441b\",\n\"40004b762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b783700441b\").map(ka),mu=ua(Sm),Tm=Array(3).concat(\"e9a3c9f7f7f7a1d76a\"`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 791,
                  "startColumn": 63,
                  "endLine": 791,
                  "endColumn": 131,
                  "snippet": {
                    "text": "dc1018571\",\"a6611adfc27df5f5f580cdc1018571\",\"8c510ad8b365f6e8c3c7eae55ab4ac01665e\",\"8c510ad8b365f6e8c3f5f5f5c7eae55ab4ac01665e\",\"8c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e\",\"8c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e\",\n\"5430058c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e003c30\",\"5430058c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e003c30\").map(ka),lu=ua(Rm),Sm=Array(3).concat(\"af8dc3f7f7f77fbf7b\",\"7b3294c2a5cfa6dba0008837\",\"7b3294c2a5cff7f7f7a6dba0008837\",\"762a83af8dc3e7d4e8d9f0d37fbf7b1b7837\",\"762a83af8dc3e7d4e8f7f7f7d9f0d37fbf7b1b7837\",\"762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b7837\",\"762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05a",
                    "rendered": {
                      "text": "dc1018571\",\"a6611adfc27df5f5f580cdc1018571\",\"8c510ad8b365f6e8c3c7eae55ab4ac01665e\",\"8c510ad8b365f6e8c3f5f5f5c7eae55ab4ac01665e\",\"8c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e\",\"8c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e\",\n\"5430058c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e003c30\",\"5430058c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e003c30\").map(ka),lu=ua(Rm),Sm=Array(3).concat(\"af8dc3f7f7f77fbf7b\",\"7b3294c2a5cfa6dba0008837\",\"7b3294c2a5cff7f7f7a6dba0008837\",\"762a83af8dc3e7d4e8d9f0d37fbf7b1b7837\",\"762a83af8dc3e7d4e8f7f7f7d9f0d37fbf7b1b7837\",\"762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b7837\",\"762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05a",
                      "markdown": "`dc1018571\",\"a6611adfc27df5f5f580cdc1018571\",\"8c510ad8b365f6e8c3c7eae55ab4ac01665e\",\"8c510ad8b365f6e8c3f5f5f5c7eae55ab4ac01665e\",\"8c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e\",\"8c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e\",\n\"5430058c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e003c30\",\"5430058c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e003c30\").map(ka),lu=ua(Rm),Sm=Array(3).concat(\"af8dc3f7f7f77fbf7b\",\"7b3294c2a5cfa6dba0008837\",\"7b3294c2a5cff7f7f7a6dba0008837\",\"762a83af8dc3e7d4e8d9f0d37fbf7b1b7837\",\"762a83af8dc3e7d4e8f7f7f7d9f0d37fbf7b1b7837\",\"762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b7837\",\"762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05a`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 791,
                  "endLine": 791,
                  "endColumn": 62,
                  "snippet": {
                    "text": "ed6f\"),Rm=Array(3).concat(\"d8b365f5f5f55ab4ac\",\"a6611adfc27d80cdc1018571\",\"a6611adfc27df5f5f580cdc1018571\",\"8c510ad8b365f6e8c3c7eae55ab4ac01665e\",\"8c510ad8b365f6e8c3f5f5f5c7eae55ab4ac01665e\",\"8c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e\",\"8c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e\",\n\"5430058c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e003c30\",\"5430058c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e003c30\").map(ka),lu=ua(Rm),Sm=Array(3).concat(\"af8dc3f7f7f77fbf7b\",\"7b3294c2a5cfa6dba0008837\",\"7b3294c2a5cff7f7f7a6dba0008837\",\"762a83af8dc3e7d4e8d9f0d37fbf7b1b7837\",\"762a83af8dc3e7d4e8f7f7f7d9f0d37fbf7b1b7837\",\"762a839970abc2a5cfe7d4e8d9",
                    "rendered": {
                      "text": "ed6f\"),Rm=Array(3).concat(\"d8b365f5f5f55ab4ac\",\"a6611adfc27d80cdc1018571\",\"a6611adfc27df5f5f580cdc1018571\",\"8c510ad8b365f6e8c3c7eae55ab4ac01665e\",\"8c510ad8b365f6e8c3f5f5f5c7eae55ab4ac01665e\",\"8c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e\",\"8c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e\",\n\"5430058c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e003c30\",\"5430058c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e003c30\").map(ka),lu=ua(Rm),Sm=Array(3).concat(\"af8dc3f7f7f77fbf7b\",\"7b3294c2a5cfa6dba0008837\",\"7b3294c2a5cff7f7f7a6dba0008837\",\"762a83af8dc3e7d4e8d9f0d37fbf7b1b7837\",\"762a83af8dc3e7d4e8f7f7f7d9f0d37fbf7b1b7837\",\"762a839970abc2a5cfe7d4e8d9",
                      "markdown": "`ed6f\"),Rm=Array(3).concat(\"d8b365f5f5f55ab4ac\",\"a6611adfc27d80cdc1018571\",\"a6611adfc27df5f5f580cdc1018571\",\"8c510ad8b365f6e8c3c7eae55ab4ac01665e\",\"8c510ad8b365f6e8c3f5f5f5c7eae55ab4ac01665e\",\"8c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e\",\"8c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e\",\n\"5430058c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e003c30\",\"5430058c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e003c30\").map(ka),lu=ua(Rm),Sm=Array(3).concat(\"af8dc3f7f7f77fbf7b\",\"7b3294c2a5cfa6dba0008837\",\"7b3294c2a5cff7f7f7a6dba0008837\",\"762a83af8dc3e7d4e8d9f0d37fbf7b1b7837\",\"762a83af8dc3e7d4e8f7f7f7d9f0d37fbf7b1b7837\",\"762a839970abc2a5cfe7d4e8d9`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 790,
                  "startColumn": 497,
                  "endLine": 790,
                  "endColumn": 553,
                  "snippet": {
                    "text": "b3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f\"),Rm=Array(3).concat(\"d8b365f5f5f55ab4ac\",\"a6611adfc27d80cdc1018571\",\"a6611adfc27df5f5f580cdc1018571\",\"8c510ad8b365f6e8c3c7eae55ab4ac01665e\",\"8c510ad8b365f6e8c3f5f5f5c7eae55ab4ac01665e\",\"8c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e\",\"8c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e\",\n\"5430058c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e003c30\",\"5430058c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e003c30\").map(ka),lu=ua(Rm),Sm=Array(3).concat(\"af8dc3f7f7f77fbf7b\",\"7b3294c2a5cfa6dba0008837\",\"7b3294c2a5cff7f7f7a6dba0008837\",\"762a83af8dc3e7d4e8d9f0d37fbf7b1b7837\",\"762a83a",
                    "rendered": {
                      "text": "b3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f\"),Rm=Array(3).concat(\"d8b365f5f5f55ab4ac\",\"a6611adfc27d80cdc1018571\",\"a6611adfc27df5f5f580cdc1018571\",\"8c510ad8b365f6e8c3c7eae55ab4ac01665e\",\"8c510ad8b365f6e8c3f5f5f5c7eae55ab4ac01665e\",\"8c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e\",\"8c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e\",\n\"5430058c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e003c30\",\"5430058c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e003c30\").map(ka),lu=ua(Rm),Sm=Array(3).concat(\"af8dc3f7f7f77fbf7b\",\"7b3294c2a5cfa6dba0008837\",\"7b3294c2a5cff7f7f7a6dba0008837\",\"762a83af8dc3e7d4e8d9f0d37fbf7b1b7837\",\"762a83a",
                      "markdown": "`b3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f\"),Rm=Array(3).concat(\"d8b365f5f5f55ab4ac\",\"a6611adfc27d80cdc1018571\",\"a6611adfc27df5f5f580cdc1018571\",\"8c510ad8b365f6e8c3c7eae55ab4ac01665e\",\"8c510ad8b365f6e8c3f5f5f5c7eae55ab4ac01665e\",\"8c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e\",\"8c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e\",\n\"5430058c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e003c30\",\"5430058c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e003c30\").map(ka),lu=ua(Rm),Sm=Array(3).concat(\"af8dc3f7f7f77fbf7b\",\"7b3294c2a5cfa6dba0008837\",\"7b3294c2a5cff7f7f7a6dba0008837\",\"762a83af8dc3e7d4e8d9f0d37fbf7b1b7837\",\"762a83a`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 790,
                  "startColumn": 446,
                  "endLine": 790,
                  "endColumn": 496,
                  "snippet": {
                    "text": "be78ac3a6d854ffd92fe5c494b3b3b3\"),ku=ka(\"8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f\"),Rm=Array(3).concat(\"d8b365f5f5f55ab4ac\",\"a6611adfc27d80cdc1018571\",\"a6611adfc27df5f5f580cdc1018571\",\"8c510ad8b365f6e8c3c7eae55ab4ac01665e\",\"8c510ad8b365f6e8c3f5f5f5c7eae55ab4ac01665e\",\"8c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e\",\"8c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e\",\n\"5430058c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e003c30\",\"5430058c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e003c30\").map(ka),lu=ua(Rm),Sm=Array(3).concat(\"af8dc3f7f7f77fbf7b\",\"7b3294c2a5cfa6dba0008837\",\"7b3294c2a5cff7f7f7a6db",
                    "rendered": {
                      "text": "be78ac3a6d854ffd92fe5c494b3b3b3\"),ku=ka(\"8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f\"),Rm=Array(3).concat(\"d8b365f5f5f55ab4ac\",\"a6611adfc27d80cdc1018571\",\"a6611adfc27df5f5f580cdc1018571\",\"8c510ad8b365f6e8c3c7eae55ab4ac01665e\",\"8c510ad8b365f6e8c3f5f5f5c7eae55ab4ac01665e\",\"8c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e\",\"8c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e\",\n\"5430058c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e003c30\",\"5430058c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e003c30\").map(ka),lu=ua(Rm),Sm=Array(3).concat(\"af8dc3f7f7f77fbf7b\",\"7b3294c2a5cfa6dba0008837\",\"7b3294c2a5cff7f7f7a6db",
                      "markdown": "`be78ac3a6d854ffd92fe5c494b3b3b3\"),ku=ka(\"8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f\"),Rm=Array(3).concat(\"d8b365f5f5f55ab4ac\",\"a6611adfc27d80cdc1018571\",\"a6611adfc27df5f5f580cdc1018571\",\"8c510ad8b365f6e8c3c7eae55ab4ac01665e\",\"8c510ad8b365f6e8c3f5f5f5c7eae55ab4ac01665e\",\"8c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e\",\"8c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e\",\n\"5430058c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e003c30\",\"5430058c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e003c30\").map(ka),lu=ua(Rm),Sm=Array(3).concat(\"af8dc3f7f7f77fbf7b\",\"7b3294c2a5cfa6dba0008837\",\"7b3294c2a5cff7f7f7a6db`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 790,
                  "startColumn": 401,
                  "endLine": 790,
                  "endColumn": 445,
                  "snippet": {
                    "text": "a65628f781bf999999\"),ju=ka(\"66c2a5fc8d628da0cbe78ac3a6d854ffd92fe5c494b3b3b3\"),ku=ka(\"8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f\"),Rm=Array(3).concat(\"d8b365f5f5f55ab4ac\",\"a6611adfc27d80cdc1018571\",\"a6611adfc27df5f5f580cdc1018571\",\"8c510ad8b365f6e8c3c7eae55ab4ac01665e\",\"8c510ad8b365f6e8c3f5f5f5c7eae55ab4ac01665e\",\"8c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e\",\"8c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e\",\n\"5430058c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e003c30\",\"5430058c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e003c30\").map(ka),lu=ua(Rm),Sm=Array(3).concat(\"af8dc3f7f7f77fbf7b\"",
                    "rendered": {
                      "text": "a65628f781bf999999\"),ju=ka(\"66c2a5fc8d628da0cbe78ac3a6d854ffd92fe5c494b3b3b3\"),ku=ka(\"8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f\"),Rm=Array(3).concat(\"d8b365f5f5f55ab4ac\",\"a6611adfc27d80cdc1018571\",\"a6611adfc27df5f5f580cdc1018571\",\"8c510ad8b365f6e8c3c7eae55ab4ac01665e\",\"8c510ad8b365f6e8c3f5f5f5c7eae55ab4ac01665e\",\"8c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e\",\"8c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e\",\n\"5430058c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e003c30\",\"5430058c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e003c30\").map(ka),lu=ua(Rm),Sm=Array(3).concat(\"af8dc3f7f7f77fbf7b\"",
                      "markdown": "`a65628f781bf999999\"),ju=ka(\"66c2a5fc8d628da0cbe78ac3a6d854ffd92fe5c494b3b3b3\"),ku=ka(\"8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f\"),Rm=Array(3).concat(\"d8b365f5f5f55ab4ac\",\"a6611adfc27d80cdc1018571\",\"a6611adfc27df5f5f580cdc1018571\",\"8c510ad8b365f6e8c3c7eae55ab4ac01665e\",\"8c510ad8b365f6e8c3f5f5f5c7eae55ab4ac01665e\",\"8c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e\",\"8c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e\",\n\"5430058c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e003c30\",\"5430058c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e003c30\").map(ka),lu=ua(Rm),Sm=Array(3).concat(\"af8dc3f7f7f77fbf7b\"`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 790,
                  "startColumn": 186,
                  "endLine": 790,
                  "endColumn": 260,
                  "snippet": {
                    "text": "9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928\"),gu=ka(\"fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2\"),\nhu=ka(\"b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc\"),iu=ka(\"e41a1c377eb84daf4a984ea3ff7f00ffff33a65628f781bf999999\"),ju=ka(\"66c2a5fc8d628da0cbe78ac3a6d854ffd92fe5c494b3b3b3\"),ku=ka(\"8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f\"),Rm=Array(3).concat(\"d8b365f5f5f55ab4ac\",\"a6611adfc27d80cdc1018571\",\"a6611adfc27df5f5f580cdc1018571\",\"8c510ad8b365f6e8c3c7eae55ab4ac01665e\",\"8c510ad8b365f6e8c3f5f5f5c7eae55ab4ac01665e\",\"8c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e\",\"8c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e\",\n\"5430",
                    "rendered": {
                      "text": "9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928\"),gu=ka(\"fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2\"),\nhu=ka(\"b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc\"),iu=ka(\"e41a1c377eb84daf4a984ea3ff7f00ffff33a65628f781bf999999\"),ju=ka(\"66c2a5fc8d628da0cbe78ac3a6d854ffd92fe5c494b3b3b3\"),ku=ka(\"8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f\"),Rm=Array(3).concat(\"d8b365f5f5f55ab4ac\",\"a6611adfc27d80cdc1018571\",\"a6611adfc27df5f5f580cdc1018571\",\"8c510ad8b365f6e8c3c7eae55ab4ac01665e\",\"8c510ad8b365f6e8c3f5f5f5c7eae55ab4ac01665e\",\"8c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e\",\"8c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e\",\n\"5430",
                      "markdown": "`9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928\"),gu=ka(\"fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2\"),\nhu=ka(\"b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc\"),iu=ka(\"e41a1c377eb84daf4a984ea3ff7f00ffff33a65628f781bf999999\"),ju=ka(\"66c2a5fc8d628da0cbe78ac3a6d854ffd92fe5c494b3b3b3\"),ku=ka(\"8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f\"),Rm=Array(3).concat(\"d8b365f5f5f55ab4ac\",\"a6611adfc27d80cdc1018571\",\"a6611adfc27df5f5f580cdc1018571\",\"8c510ad8b365f6e8c3c7eae55ab4ac01665e\",\"8c510ad8b365f6e8c3f5f5f5c7eae55ab4ac01665e\",\"8c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e\",\"8c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e\",\n\"5430`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 790,
                  "startColumn": 128,
                  "endLine": 790,
                  "endColumn": 178,
                  "snippet": {
                    "text": "a61ee6ab02a6761d666666\"),fu=ka(\"a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928\"),gu=ka(\"fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2\"),\nhu=ka(\"b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc\"),iu=ka(\"e41a1c377eb84daf4a984ea3ff7f00ffff33a65628f781bf999999\"),ju=ka(\"66c2a5fc8d628da0cbe78ac3a6d854ffd92fe5c494b3b3b3\"),ku=ka(\"8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f\"),Rm=Array(3).concat(\"d8b365f5f5f55ab4ac\",\"a6611adfc27d80cdc1018571\",\"a6611adfc27df5f5f580cdc1018571\",\"8c510ad8b365f6e8c3c7eae55ab4ac01665e\",\"8c510ad8b365f6e8c3f5f5f5c7eae55ab4ac01665e\",\"8c510abf812ddfc27df6e8c3c7eae58",
                    "rendered": {
                      "text": "a61ee6ab02a6761d666666\"),fu=ka(\"a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928\"),gu=ka(\"fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2\"),\nhu=ka(\"b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc\"),iu=ka(\"e41a1c377eb84daf4a984ea3ff7f00ffff33a65628f781bf999999\"),ju=ka(\"66c2a5fc8d628da0cbe78ac3a6d854ffd92fe5c494b3b3b3\"),ku=ka(\"8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f\"),Rm=Array(3).concat(\"d8b365f5f5f55ab4ac\",\"a6611adfc27d80cdc1018571\",\"a6611adfc27df5f5f580cdc1018571\",\"8c510ad8b365f6e8c3c7eae55ab4ac01665e\",\"8c510ad8b365f6e8c3f5f5f5c7eae55ab4ac01665e\",\"8c510abf812ddfc27df6e8c3c7eae58",
                      "markdown": "`a61ee6ab02a6761d666666\"),fu=ka(\"a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928\"),gu=ka(\"fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2\"),\nhu=ka(\"b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc\"),iu=ka(\"e41a1c377eb84daf4a984ea3ff7f00ffff33a65628f781bf999999\"),ju=ka(\"66c2a5fc8d628da0cbe78ac3a6d854ffd92fe5c494b3b3b3\"),ku=ka(\"8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f\"),Rm=Array(3).concat(\"d8b365f5f5f55ab4ac\",\"a6611adfc27d80cdc1018571\",\"a6611adfc27df5f5f580cdc1018571\",\"8c510ad8b365f6e8c3c7eae55ab4ac01665e\",\"8c510ad8b365f6e8c3f5f5f5c7eae55ab4ac01665e\",\"8c510abf812ddfc27df6e8c3c7eae58`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 790,
                  "startColumn": 64,
                  "endLine": 790,
                  "endColumn": 120,
                  "snippet": {
                    "text": "ff99386cb0f0027fbf5b17666666\"),eu=ka(\"1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666\"),fu=ka(\"a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928\"),gu=ka(\"fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2\"),\nhu=ka(\"b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc\"),iu=ka(\"e41a1c377eb84daf4a984ea3ff7f00ffff33a65628f781bf999999\"),ju=ka(\"66c2a5fc8d628da0cbe78ac3a6d854ffd92fe5c494b3b3b3\"),ku=ka(\"8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f\"),Rm=Array(3).concat(\"d8b365f5f5f55ab4ac\",\"a6611adfc27d80cdc1018571\",\"a6611adfc27df5f5f580cdc1018571\",\"8c510ad8b365f6e8c3c7eae55ab4ac01665e\",\"8c510ad8b365f6e8c3",
                    "rendered": {
                      "text": "ff99386cb0f0027fbf5b17666666\"),eu=ka(\"1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666\"),fu=ka(\"a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928\"),gu=ka(\"fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2\"),\nhu=ka(\"b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc\"),iu=ka(\"e41a1c377eb84daf4a984ea3ff7f00ffff33a65628f781bf999999\"),ju=ka(\"66c2a5fc8d628da0cbe78ac3a6d854ffd92fe5c494b3b3b3\"),ku=ka(\"8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f\"),Rm=Array(3).concat(\"d8b365f5f5f55ab4ac\",\"a6611adfc27d80cdc1018571\",\"a6611adfc27df5f5f580cdc1018571\",\"8c510ad8b365f6e8c3c7eae55ab4ac01665e\",\"8c510ad8b365f6e8c3",
                      "markdown": "`ff99386cb0f0027fbf5b17666666\"),eu=ka(\"1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666\"),fu=ka(\"a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928\"),gu=ka(\"fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2\"),\nhu=ka(\"b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc\"),iu=ka(\"e41a1c377eb84daf4a984ea3ff7f00ffff33a65628f781bf999999\"),ju=ka(\"66c2a5fc8d628da0cbe78ac3a6d854ffd92fe5c494b3b3b3\"),ku=ka(\"8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f\"),Rm=Array(3).concat(\"d8b365f5f5f55ab4ac\",\"a6611adfc27d80cdc1018571\",\"a6611adfc27df5f5f580cdc1018571\",\"8c510ad8b365f6e8c3c7eae55ab4ac01665e\",\"8c510ad8b365f6e8c3`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 790,
                  "startColumn": 6,
                  "endLine": 790,
                  "endColumn": 56,
                  "snippet": {
                    "text": "c7c7bcbd22dbdb8d17becf9edae5\"),du=ka(\"7fc97fbeaed4fdc086ffff99386cb0f0027fbf5b17666666\"),eu=ka(\"1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666\"),fu=ka(\"a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928\"),gu=ka(\"fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2\"),\nhu=ka(\"b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc\"),iu=ka(\"e41a1c377eb84daf4a984ea3ff7f00ffff33a65628f781bf999999\"),ju=ka(\"66c2a5fc8d628da0cbe78ac3a6d854ffd92fe5c494b3b3b3\"),ku=ka(\"8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f\"),Rm=Array(3).concat(\"d8b365f5f5f55ab4ac\",\"a6611adfc27d80cdc1018571\",\"a6611adfc27df5f5f580cdc101",
                    "rendered": {
                      "text": "c7c7bcbd22dbdb8d17becf9edae5\"),du=ka(\"7fc97fbeaed4fdc086ffff99386cb0f0027fbf5b17666666\"),eu=ka(\"1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666\"),fu=ka(\"a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928\"),gu=ka(\"fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2\"),\nhu=ka(\"b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc\"),iu=ka(\"e41a1c377eb84daf4a984ea3ff7f00ffff33a65628f781bf999999\"),ju=ka(\"66c2a5fc8d628da0cbe78ac3a6d854ffd92fe5c494b3b3b3\"),ku=ka(\"8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f\"),Rm=Array(3).concat(\"d8b365f5f5f55ab4ac\",\"a6611adfc27d80cdc1018571\",\"a6611adfc27df5f5f580cdc101",
                      "markdown": "`c7c7bcbd22dbdb8d17becf9edae5\"),du=ka(\"7fc97fbeaed4fdc086ffff99386cb0f0027fbf5b17666666\"),eu=ka(\"1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666\"),fu=ka(\"a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928\"),gu=ka(\"fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2\"),\nhu=ka(\"b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc\"),iu=ka(\"e41a1c377eb84daf4a984ea3ff7f00ffff33a65628f781bf999999\"),ju=ka(\"66c2a5fc8d628da0cbe78ac3a6d854ffd92fe5c494b3b3b3\"),ku=ka(\"8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f\"),Rm=Array(3).concat(\"d8b365f5f5f55ab4ac\",\"a6611adfc27d80cdc1018571\",\"a6611adfc27df5f5f580cdc101`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 789,
                  "startColumn": 464,
                  "endLine": 789,
                  "endColumn": 520,
                  "snippet": {
                    "text": "02c98df8ad62728ff98969467bdc5b0d58c564bc49c94e377c2f7b6d27f7f7fc7c7c7bcbd22dbdb8d17becf9edae5\"),du=ka(\"7fc97fbeaed4fdc086ffff99386cb0f0027fbf5b17666666\"),eu=ka(\"1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666\"),fu=ka(\"a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928\"),gu=ka(\"fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2\"),\nhu=ka(\"b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc\"),iu=ka(\"e41a1c377eb84daf4a984ea3ff7f00ffff33a65628f781bf999999\"),ju=ka(\"66c2a5fc8d628da0cbe78ac3a6d854ffd92fe5c494b3b3b3\"),ku=ka(\"8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f\"),Rm=Array(3).concat(\"d8b365f5f5f55ab",
                    "rendered": {
                      "text": "02c98df8ad62728ff98969467bdc5b0d58c564bc49c94e377c2f7b6d27f7f7fc7c7c7bcbd22dbdb8d17becf9edae5\"),du=ka(\"7fc97fbeaed4fdc086ffff99386cb0f0027fbf5b17666666\"),eu=ka(\"1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666\"),fu=ka(\"a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928\"),gu=ka(\"fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2\"),\nhu=ka(\"b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc\"),iu=ka(\"e41a1c377eb84daf4a984ea3ff7f00ffff33a65628f781bf999999\"),ju=ka(\"66c2a5fc8d628da0cbe78ac3a6d854ffd92fe5c494b3b3b3\"),ku=ka(\"8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f\"),Rm=Array(3).concat(\"d8b365f5f5f55ab",
                      "markdown": "`02c98df8ad62728ff98969467bdc5b0d58c564bc49c94e377c2f7b6d27f7f7fc7c7c7bcbd22dbdb8d17becf9edae5\"),du=ka(\"7fc97fbeaed4fdc086ffff99386cb0f0027fbf5b17666666\"),eu=ka(\"1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666\"),fu=ka(\"a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928\"),gu=ka(\"fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2\"),\nhu=ka(\"b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc\"),iu=ka(\"e41a1c377eb84daf4a984ea3ff7f00ffff33a65628f781bf999999\"),ju=ka(\"66c2a5fc8d628da0cbe78ac3a6d854ffd92fe5c494b3b3b3\"),ku=ka(\"8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f\"),Rm=Array(3).concat(\"d8b365f5f5f55ab`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 789,
                  "startColumn": 382,
                  "endLine": 789,
                  "endColumn": 456,
                  "snippet": {
                    "text": "bb19e9ac8bcbddcdadaeb636363969696bdbdbdd9d9d9\"),cu=ka(\"1f77b4aec7e8ff7f0effbb782ca02c98df8ad62728ff98969467bdc5b0d58c564bc49c94e377c2f7b6d27f7f7fc7c7c7bcbd22dbdb8d17becf9edae5\"),du=ka(\"7fc97fbeaed4fdc086ffff99386cb0f0027fbf5b17666666\"),eu=ka(\"1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666\"),fu=ka(\"a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928\"),gu=ka(\"fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2\"),\nhu=ka(\"b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc\"),iu=ka(\"e41a1c377eb84daf4a984ea3ff7f00ffff33a65628f781bf999999\"),ju=ka(\"66c2a5fc8d628da0cbe78ac3a6d854ffd92fe5c494b3b3b3\"),ku=ka(\"8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccd",
                    "rendered": {
                      "text": "bb19e9ac8bcbddcdadaeb636363969696bdbdbdd9d9d9\"),cu=ka(\"1f77b4aec7e8ff7f0effbb782ca02c98df8ad62728ff98969467bdc5b0d58c564bc49c94e377c2f7b6d27f7f7fc7c7c7bcbd22dbdb8d17becf9edae5\"),du=ka(\"7fc97fbeaed4fdc086ffff99386cb0f0027fbf5b17666666\"),eu=ka(\"1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666\"),fu=ka(\"a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928\"),gu=ka(\"fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2\"),\nhu=ka(\"b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc\"),iu=ka(\"e41a1c377eb84daf4a984ea3ff7f00ffff33a65628f781bf999999\"),ju=ka(\"66c2a5fc8d628da0cbe78ac3a6d854ffd92fe5c494b3b3b3\"),ku=ka(\"8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccd",
                      "markdown": "`bb19e9ac8bcbddcdadaeb636363969696bdbdbdd9d9d9\"),cu=ka(\"1f77b4aec7e8ff7f0effbb782ca02c98df8ad62728ff98969467bdc5b0d58c564bc49c94e377c2f7b6d27f7f7fc7c7c7bcbd22dbdb8d17becf9edae5\"),du=ka(\"7fc97fbeaed4fdc086ffff99386cb0f0027fbf5b17666666\"),eu=ka(\"1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666\"),fu=ka(\"a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928\"),gu=ka(\"fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2\"),\nhu=ka(\"b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc\"),iu=ka(\"e41a1c377eb84daf4a984ea3ff7f00ffff33a65628f781bf999999\"),ju=ka(\"66c2a5fc8d628da0cbe78ac3a6d854ffd92fe5c494b3b3b3\"),ku=ka(\"8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccd`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 789,
                  "startColumn": 324,
                  "endLine": 789,
                  "endColumn": 374,
                  "snippet": {
                    "text": "1c6dbefe6550dfd8d3cfdae6bfdd0a231a35474c476a1d99bc7e9c0756bb19e9ac8bcbddcdadaeb636363969696bdbdbdd9d9d9\"),cu=ka(\"1f77b4aec7e8ff7f0effbb782ca02c98df8ad62728ff98969467bdc5b0d58c564bc49c94e377c2f7b6d27f7f7fc7c7c7bcbd22dbdb8d17becf9edae5\"),du=ka(\"7fc97fbeaed4fdc086ffff99386cb0f0027fbf5b17666666\"),eu=ka(\"1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666\"),fu=ka(\"a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928\"),gu=ka(\"fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2\"),\nhu=ka(\"b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc\"),iu=ka(\"e41a1c377eb84daf4a984ea3ff7f00ffff33a65628f781bf999999\"),ju=ka(\"66c2a5fc8d628da0cbe78a",
                    "rendered": {
                      "text": "1c6dbefe6550dfd8d3cfdae6bfdd0a231a35474c476a1d99bc7e9c0756bb19e9ac8bcbddcdadaeb636363969696bdbdbdd9d9d9\"),cu=ka(\"1f77b4aec7e8ff7f0effbb782ca02c98df8ad62728ff98969467bdc5b0d58c564bc49c94e377c2f7b6d27f7f7fc7c7c7bcbd22dbdb8d17becf9edae5\"),du=ka(\"7fc97fbeaed4fdc086ffff99386cb0f0027fbf5b17666666\"),eu=ka(\"1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666\"),fu=ka(\"a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928\"),gu=ka(\"fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2\"),\nhu=ka(\"b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc\"),iu=ka(\"e41a1c377eb84daf4a984ea3ff7f00ffff33a65628f781bf999999\"),ju=ka(\"66c2a5fc8d628da0cbe78a",
                      "markdown": "`1c6dbefe6550dfd8d3cfdae6bfdd0a231a35474c476a1d99bc7e9c0756bb19e9ac8bcbddcdadaeb636363969696bdbdbdd9d9d9\"),cu=ka(\"1f77b4aec7e8ff7f0effbb782ca02c98df8ad62728ff98969467bdc5b0d58c564bc49c94e377c2f7b6d27f7f7fc7c7c7bcbd22dbdb8d17becf9edae5\"),du=ka(\"7fc97fbeaed4fdc086ffff99386cb0f0027fbf5b17666666\"),eu=ka(\"1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666\"),fu=ka(\"a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928\"),gu=ka(\"fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2\"),\nhu=ka(\"b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc\"),iu=ka(\"e41a1c377eb84daf4a984ea3ff7f00ffff33a65628f781bf999999\"),ju=ka(\"66c2a5fc8d628da0cbe78a`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 789,
                  "startColumn": 266,
                  "endLine": 789,
                  "endColumn": 316,
                  "snippet": {
                    "text": "e7969c7b4173a55194ce6dbdde9ed6\"),\nbu=ka(\"3182bd6baed69ecae1c6dbefe6550dfd8d3cfdae6bfdd0a231a35474c476a1d99bc7e9c0756bb19e9ac8bcbddcdadaeb636363969696bdbdbdd9d9d9\"),cu=ka(\"1f77b4aec7e8ff7f0effbb782ca02c98df8ad62728ff98969467bdc5b0d58c564bc49c94e377c2f7b6d27f7f7fc7c7c7bcbd22dbdb8d17becf9edae5\"),du=ka(\"7fc97fbeaed4fdc086ffff99386cb0f0027fbf5b17666666\"),eu=ka(\"1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666\"),fu=ka(\"a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928\"),gu=ka(\"fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2\"),\nhu=ka(\"b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc\"),iu=ka(\"e41a1c377eb84daf4a984ea3ff7f",
                    "rendered": {
                      "text": "e7969c7b4173a55194ce6dbdde9ed6\"),\nbu=ka(\"3182bd6baed69ecae1c6dbefe6550dfd8d3cfdae6bfdd0a231a35474c476a1d99bc7e9c0756bb19e9ac8bcbddcdadaeb636363969696bdbdbdd9d9d9\"),cu=ka(\"1f77b4aec7e8ff7f0effbb782ca02c98df8ad62728ff98969467bdc5b0d58c564bc49c94e377c2f7b6d27f7f7fc7c7c7bcbd22dbdb8d17becf9edae5\"),du=ka(\"7fc97fbeaed4fdc086ffff99386cb0f0027fbf5b17666666\"),eu=ka(\"1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666\"),fu=ka(\"a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928\"),gu=ka(\"fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2\"),\nhu=ka(\"b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc\"),iu=ka(\"e41a1c377eb84daf4a984ea3ff7f",
                      "markdown": "`e7969c7b4173a55194ce6dbdde9ed6\"),\nbu=ka(\"3182bd6baed69ecae1c6dbefe6550dfd8d3cfdae6bfdd0a231a35474c476a1d99bc7e9c0756bb19e9ac8bcbddcdadaeb636363969696bdbdbdd9d9d9\"),cu=ka(\"1f77b4aec7e8ff7f0effbb782ca02c98df8ad62728ff98969467bdc5b0d58c564bc49c94e377c2f7b6d27f7f7fc7c7c7bcbd22dbdb8d17becf9edae5\"),du=ka(\"7fc97fbeaed4fdc086ffff99386cb0f0027fbf5b17666666\"),eu=ka(\"1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666\"),fu=ka(\"a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928\"),gu=ka(\"fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2\"),\nhu=ka(\"b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc\"),iu=ka(\"e41a1c377eb84daf4a984ea3ff7f`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 789,
                  "startColumn": 136,
                  "endLine": 789,
                  "endColumn": 258,
                  "snippet": {
                    "text": "8c564be377c27f7f7fbcbd2217becf\"),au=ka(\"393b795254a36b6ecf9c9ede6379398ca252b5cf6bcedb9c8c6d31bd9e39e7ba52e7cb94843c39ad494ad6616be7969c7b4173a55194ce6dbdde9ed6\"),\nbu=ka(\"3182bd6baed69ecae1c6dbefe6550dfd8d3cfdae6bfdd0a231a35474c476a1d99bc7e9c0756bb19e9ac8bcbddcdadaeb636363969696bdbdbdd9d9d9\"),cu=ka(\"1f77b4aec7e8ff7f0effbb782ca02c98df8ad62728ff98969467bdc5b0d58c564bc49c94e377c2f7b6d27f7f7fc7c7c7bcbd22dbdb8d17becf9edae5\"),du=ka(\"7fc97fbeaed4fdc086ffff99386cb0f0027fbf5b17666666\"),eu=ka(\"1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666\"),fu=ka(\"a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928\"),gu=ka(\"fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2\"),\nhu=ka(\"b3e2cdfdcdaccbd5e8f4cae4e6f5",
                    "rendered": {
                      "text": "8c564be377c27f7f7fbcbd2217becf\"),au=ka(\"393b795254a36b6ecf9c9ede6379398ca252b5cf6bcedb9c8c6d31bd9e39e7ba52e7cb94843c39ad494ad6616be7969c7b4173a55194ce6dbdde9ed6\"),\nbu=ka(\"3182bd6baed69ecae1c6dbefe6550dfd8d3cfdae6bfdd0a231a35474c476a1d99bc7e9c0756bb19e9ac8bcbddcdadaeb636363969696bdbdbdd9d9d9\"),cu=ka(\"1f77b4aec7e8ff7f0effbb782ca02c98df8ad62728ff98969467bdc5b0d58c564bc49c94e377c2f7b6d27f7f7fc7c7c7bcbd22dbdb8d17becf9edae5\"),du=ka(\"7fc97fbeaed4fdc086ffff99386cb0f0027fbf5b17666666\"),eu=ka(\"1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666\"),fu=ka(\"a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928\"),gu=ka(\"fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2\"),\nhu=ka(\"b3e2cdfdcdaccbd5e8f4cae4e6f5",
                      "markdown": "`8c564be377c27f7f7fbcbd2217becf\"),au=ka(\"393b795254a36b6ecf9c9ede6379398ca252b5cf6bcedb9c8c6d31bd9e39e7ba52e7cb94843c39ad494ad6616be7969c7b4173a55194ce6dbdde9ed6\"),\nbu=ka(\"3182bd6baed69ecae1c6dbefe6550dfd8d3cfdae6bfdd0a231a35474c476a1d99bc7e9c0756bb19e9ac8bcbddcdadaeb636363969696bdbdbdd9d9d9\"),cu=ka(\"1f77b4aec7e8ff7f0effbb782ca02c98df8ad62728ff98969467bdc5b0d58c564bc49c94e377c2f7b6d27f7f7fc7c7c7bcbd22dbdb8d17becf9edae5\"),du=ka(\"7fc97fbeaed4fdc086ffff99386cb0f0027fbf5b17666666\"),eu=ka(\"1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666\"),fu=ka(\"a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928\"),gu=ka(\"fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2\"),\nhu=ka(\"b3e2cdfdcdaccbd5e8f4cae4e6f5`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 789,
                  "startColumn": 6,
                  "endLine": 789,
                  "endColumn": 128,
                  "snippet": {
                    "text": "%M:%S.%LZ\"),Zt=+new Date(\"2000-01-01T00:00:00.000Z\")?ms:d3.utcParse(\"%Y-%m-%dT%H:%M:%S.%LZ\"),$t=ka(\"1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf\"),au=ka(\"393b795254a36b6ecf9c9ede6379398ca252b5cf6bcedb9c8c6d31bd9e39e7ba52e7cb94843c39ad494ad6616be7969c7b4173a55194ce6dbdde9ed6\"),\nbu=ka(\"3182bd6baed69ecae1c6dbefe6550dfd8d3cfdae6bfdd0a231a35474c476a1d99bc7e9c0756bb19e9ac8bcbddcdadaeb636363969696bdbdbdd9d9d9\"),cu=ka(\"1f77b4aec7e8ff7f0effbb782ca02c98df8ad62728ff98969467bdc5b0d58c564bc49c94e377c2f7b6d27f7f7fc7c7c7bcbd22dbdb8d17becf9edae5\"),du=ka(\"7fc97fbeaed4fdc086ffff99386cb0f0027fbf5b17666666\"),eu=ka(\"1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666\"),fu=ka(\"a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7",
                    "rendered": {
                      "text": "%M:%S.%LZ\"),Zt=+new Date(\"2000-01-01T00:00:00.000Z\")?ms:d3.utcParse(\"%Y-%m-%dT%H:%M:%S.%LZ\"),$t=ka(\"1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf\"),au=ka(\"393b795254a36b6ecf9c9ede6379398ca252b5cf6bcedb9c8c6d31bd9e39e7ba52e7cb94843c39ad494ad6616be7969c7b4173a55194ce6dbdde9ed6\"),\nbu=ka(\"3182bd6baed69ecae1c6dbefe6550dfd8d3cfdae6bfdd0a231a35474c476a1d99bc7e9c0756bb19e9ac8bcbddcdadaeb636363969696bdbdbdd9d9d9\"),cu=ka(\"1f77b4aec7e8ff7f0effbb782ca02c98df8ad62728ff98969467bdc5b0d58c564bc49c94e377c2f7b6d27f7f7fc7c7c7bcbd22dbdb8d17becf9edae5\"),du=ka(\"7fc97fbeaed4fdc086ffff99386cb0f0027fbf5b17666666\"),eu=ka(\"1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666\"),fu=ka(\"a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7",
                      "markdown": "`%M:%S.%LZ\"),Zt=+new Date(\"2000-01-01T00:00:00.000Z\")?ms:d3.utcParse(\"%Y-%m-%dT%H:%M:%S.%LZ\"),$t=ka(\"1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf\"),au=ka(\"393b795254a36b6ecf9c9ede6379398ca252b5cf6bcedb9c8c6d31bd9e39e7ba52e7cb94843c39ad494ad6616be7969c7b4173a55194ce6dbdde9ed6\"),\nbu=ka(\"3182bd6baed69ecae1c6dbefe6550dfd8d3cfdae6bfdd0a231a35474c476a1d99bc7e9c0756bb19e9ac8bcbddcdadaeb636363969696bdbdbdd9d9d9\"),cu=ka(\"1f77b4aec7e8ff7f0effbb782ca02c98df8ad62728ff98969467bdc5b0d58c564bc49c94e377c2f7b6d27f7f7fc7c7c7bcbd22dbdb8d17becf9edae5\"),du=ka(\"7fc97fbeaed4fdc086ffff99386cb0f0027fbf5b17666666\"),eu=ka(\"1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666\"),fu=ka(\"a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 788,
                  "startColumn": 413,
                  "endLine": 788,
                  "endColumn": 535,
                  "snippet": {
                    "text": "nths:\"Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec\".split(\" \")});var Yt=Date.prototype.toISOString?ls:d3.utcFormat(\"%Y-%m-%dT%H:%M:%S.%LZ\"),Zt=+new Date(\"2000-01-01T00:00:00.000Z\")?ms:d3.utcParse(\"%Y-%m-%dT%H:%M:%S.%LZ\"),$t=ka(\"1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf\"),au=ka(\"393b795254a36b6ecf9c9ede6379398ca252b5cf6bcedb9c8c6d31bd9e39e7ba52e7cb94843c39ad494ad6616be7969c7b4173a55194ce6dbdde9ed6\"),\nbu=ka(\"3182bd6baed69ecae1c6dbefe6550dfd8d3cfdae6bfdd0a231a35474c476a1d99bc7e9c0756bb19e9ac8bcbddcdadaeb636363969696bdbdbdd9d9d9\"),cu=ka(\"1f77b4aec7e8ff7f0effbb782ca02c98df8ad62728ff98969467bdc5b0d58c564bc49c94e377c2f7b6d27f7f7fc7c7c7bcbd22dbdb8d17becf9edae5\"),du=ka(\"7fc97fbeaed4fdc086ffff99386cb0",
                    "rendered": {
                      "text": "nths:\"Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec\".split(\" \")});var Yt=Date.prototype.toISOString?ls:d3.utcFormat(\"%Y-%m-%dT%H:%M:%S.%LZ\"),Zt=+new Date(\"2000-01-01T00:00:00.000Z\")?ms:d3.utcParse(\"%Y-%m-%dT%H:%M:%S.%LZ\"),$t=ka(\"1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf\"),au=ka(\"393b795254a36b6ecf9c9ede6379398ca252b5cf6bcedb9c8c6d31bd9e39e7ba52e7cb94843c39ad494ad6616be7969c7b4173a55194ce6dbdde9ed6\"),\nbu=ka(\"3182bd6baed69ecae1c6dbefe6550dfd8d3cfdae6bfdd0a231a35474c476a1d99bc7e9c0756bb19e9ac8bcbddcdadaeb636363969696bdbdbdd9d9d9\"),cu=ka(\"1f77b4aec7e8ff7f0effbb782ca02c98df8ad62728ff98969467bdc5b0d58c564bc49c94e377c2f7b6d27f7f7fc7c7c7bcbd22dbdb8d17becf9edae5\"),du=ka(\"7fc97fbeaed4fdc086ffff99386cb0",
                      "markdown": "`nths:\"Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec\".split(\" \")});var Yt=Date.prototype.toISOString?ls:d3.utcFormat(\"%Y-%m-%dT%H:%M:%S.%LZ\"),Zt=+new Date(\"2000-01-01T00:00:00.000Z\")?ms:d3.utcParse(\"%Y-%m-%dT%H:%M:%S.%LZ\"),$t=ka(\"1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf\"),au=ka(\"393b795254a36b6ecf9c9ede6379398ca252b5cf6bcedb9c8c6d31bd9e39e7ba52e7cb94843c39ad494ad6616be7969c7b4173a55194ce6dbdde9ed6\"),\nbu=ka(\"3182bd6baed69ecae1c6dbefe6550dfd8d3cfdae6bfdd0a231a35474c476a1d99bc7e9c0756bb19e9ac8bcbddcdadaeb636363969696bdbdbdd9d9d9\"),cu=ka(\"1f77b4aec7e8ff7f0effbb782ca02c98df8ad62728ff98969467bdc5b0d58c564bc49c94e377c2f7b6d27f7f7fc7c7c7bcbd22dbdb8d17becf9edae5\"),du=ka(\"7fc97fbeaed4fdc086ffff99386cb0`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 788,
                  "startColumn": 343,
                  "endLine": 788,
                  "endColumn": 405,
                  "snippet": {
                    "text": "ne July August September October November December\".split(\" \"),shortMonths:\"Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec\".split(\" \")});var Yt=Date.prototype.toISOString?ls:d3.utcFormat(\"%Y-%m-%dT%H:%M:%S.%LZ\"),Zt=+new Date(\"2000-01-01T00:00:00.000Z\")?ms:d3.utcParse(\"%Y-%m-%dT%H:%M:%S.%LZ\"),$t=ka(\"1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf\"),au=ka(\"393b795254a36b6ecf9c9ede6379398ca252b5cf6bcedb9c8c6d31bd9e39e7ba52e7cb94843c39ad494ad6616be7969c7b4173a55194ce6dbdde9ed6\"),\nbu=ka(\"3182bd6baed69ecae1c6dbefe6550dfd8d3cfdae6bfdd0a231a35474c476a1d99bc7e9c0756bb19e9ac8bcbddcdadaeb636363969696bdbdbdd9d9d9\"),cu=ka(\"1f77b4aec7e8ff7f0effbb782ca02c",
                    "rendered": {
                      "text": "ne July August September October November December\".split(\" \"),shortMonths:\"Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec\".split(\" \")});var Yt=Date.prototype.toISOString?ls:d3.utcFormat(\"%Y-%m-%dT%H:%M:%S.%LZ\"),Zt=+new Date(\"2000-01-01T00:00:00.000Z\")?ms:d3.utcParse(\"%Y-%m-%dT%H:%M:%S.%LZ\"),$t=ka(\"1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf\"),au=ka(\"393b795254a36b6ecf9c9ede6379398ca252b5cf6bcedb9c8c6d31bd9e39e7ba52e7cb94843c39ad494ad6616be7969c7b4173a55194ce6dbdde9ed6\"),\nbu=ka(\"3182bd6baed69ecae1c6dbefe6550dfd8d3cfdae6bfdd0a231a35474c476a1d99bc7e9c0756bb19e9ac8bcbddcdadaeb636363969696bdbdbdd9d9d9\"),cu=ka(\"1f77b4aec7e8ff7f0effbb782ca02c",
                      "markdown": "`ne July August September October November December\".split(\" \"),shortMonths:\"Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec\".split(\" \")});var Yt=Date.prototype.toISOString?ls:d3.utcFormat(\"%Y-%m-%dT%H:%M:%S.%LZ\"),Zt=+new Date(\"2000-01-01T00:00:00.000Z\")?ms:d3.utcParse(\"%Y-%m-%dT%H:%M:%S.%LZ\"),$t=ka(\"1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf\"),au=ka(\"393b795254a36b6ecf9c9ede6379398ca252b5cf6bcedb9c8c6d31bd9e39e7ba52e7cb94843c39ad494ad6616be7969c7b4173a55194ce6dbdde9ed6\"),\nbu=ka(\"3182bd6baed69ecae1c6dbefe6550dfd8d3cfdae6bfdd0a231a35474c476a1d99bc7e9c0756bb19e9ac8bcbddcdadaeb636363969696bdbdbdd9d9d9\"),cu=ka(\"1f77b4aec7e8ff7f0effbb782ca02c`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 1998,
                  "startColumn": 361,
                  "endLine": 1998,
                  "endColumn": 366,
                  "snippet": {
                    "text": "v,B,w;return za(function(E){switch(E.g){case 1:c=JSON.parse(a.data);d=c.type;e=c.id;f=c.payload;g=c.error;if(h=c.isReply){if(!b.g.has(e))return E.return();k=b.g.get(e);l=k.resolve;n=k.reject;b.g.delete(e);g?n(Error(g)):l(f);return E.return()}q=p=null;if(!b.listeners.has(d)){E.g=2;break}r=b.listeners.get(d);E.h=3;return ra(E,r(f),5);case 5:p=t=E.fa;E.g=2;E.h=0;break;case 3:q=v=sa(E);case 2:B={},w=(B.type=d,B.id=e,B.payload=p,B.error=q,B.isReply=\n!0,B),b.postMessage(w),E.g=0}})};m.postMessage=function(a){this.port.postMessage(JSON.stringify(a))};m.sendMessage=function(a,b){var c=this,d=this.id++;this",
                    "rendered": {
                      "text": "v,B,w;return za(function(E){switch(E.g){case 1:c=JSON.parse(a.data);d=c.type;e=c.id;f=c.payload;g=c.error;if(h=c.isReply){if(!b.g.has(e))return E.return();k=b.g.get(e);l=k.resolve;n=k.reject;b.g.delete(e);g?n(Error(g)):l(f);return E.return()}q=p=null;if(!b.listeners.has(d)){E.g=2;break}r=b.listeners.get(d);E.h=3;return ra(E,r(f),5);case 5:p=t=E.fa;E.g=2;E.h=0;break;case 3:q=v=sa(E);case 2:B={},w=(B.type=d,B.id=e,B.payload=p,B.error=q,B.isReply=\n!0,B),b.postMessage(w),E.g=0}})};m.postMessage=function(a){this.port.postMessage(JSON.stringify(a))};m.sendMessage=function(a,b){var c=this,d=this.id++;this",
                      "markdown": "`v,B,w;return za(function(E){switch(E.g){case 1:c=JSON.parse(a.data);d=c.type;e=c.id;f=c.payload;g=c.error;if(h=c.isReply){if(!b.g.has(e))return E.return();k=b.g.get(e);l=k.resolve;n=k.reject;b.g.delete(e);g?n(Error(g)):l(f);return E.return()}q=p=null;if(!b.listeners.has(d)){E.g=2;break}r=b.listeners.get(d);E.h=3;return ra(E,r(f),5);case 5:p=t=E.fa;E.g=2;E.h=0;break;case 3:q=v=sa(E);case 2:B={},w=(B.type=d,B.id=e,B.payload=p,B.error=q,B.isReply=\n!0,B),b.postMessage(w),E.g=0}})};m.postMessage=function(a){this.port.postMessage(JSON.stringify(a))};m.sendMessage=function(a,b){var c=this,d=this.id++;this`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 1998,
                  "startColumn": 221,
                  "endLine": 1998,
                  "endColumn": 226,
                  "snippet": {
                    "text": ",b){this.listeners.set(a,b)};m.unlisten=function(a){this.listeners.delete(a)};\nm.onMessage=function(a){var b=this,c,d,e,f,g,h,k,l,n,p,q,r,t,v,B,w;return za(function(E){switch(E.g){case 1:c=JSON.parse(a.data);d=c.type;e=c.id;f=c.payload;g=c.error;if(h=c.isReply){if(!b.g.has(e))return E.return();k=b.g.get(e);l=k.resolve;n=k.reject;b.g.delete(e);g?n(Error(g)):l(f);return E.return()}q=p=null;if(!b.listeners.has(d)){E.g=2;break}r=b.listeners.get(d);E.h=3;return ra(E,r(f),5);case 5:p=t=E.fa;E.g=2;E.h=0;break;case 3:q=v=sa(E);case 2:B={},w=(B.type=d,B.id=e,B.payload=p,B.error=q,B.isReply=\n!0,B),b.postMess",
                    "rendered": {
                      "text": ",b){this.listeners.set(a,b)};m.unlisten=function(a){this.listeners.delete(a)};\nm.onMessage=function(a){var b=this,c,d,e,f,g,h,k,l,n,p,q,r,t,v,B,w;return za(function(E){switch(E.g){case 1:c=JSON.parse(a.data);d=c.type;e=c.id;f=c.payload;g=c.error;if(h=c.isReply){if(!b.g.has(e))return E.return();k=b.g.get(e);l=k.resolve;n=k.reject;b.g.delete(e);g?n(Error(g)):l(f);return E.return()}q=p=null;if(!b.listeners.has(d)){E.g=2;break}r=b.listeners.get(d);E.h=3;return ra(E,r(f),5);case 5:p=t=E.fa;E.g=2;E.h=0;break;case 3:q=v=sa(E);case 2:B={},w=(B.type=d,B.id=e,B.payload=p,B.error=q,B.isReply=\n!0,B),b.postMess",
                      "markdown": "`,b){this.listeners.set(a,b)};m.unlisten=function(a){this.listeners.delete(a)};\nm.onMessage=function(a){var b=this,c,d,e,f,g,h,k,l,n,p,q,r,t,v,B,w;return za(function(E){switch(E.g){case 1:c=JSON.parse(a.data);d=c.type;e=c.id;f=c.payload;g=c.error;if(h=c.isReply){if(!b.g.has(e))return E.return();k=b.g.get(e);l=k.resolve;n=k.reject;b.g.delete(e);g?n(Error(g)):l(f);return E.return()}q=p=null;if(!b.listeners.has(d)){E.g=2;break}r=b.listeners.get(d);E.h=3;return ra(E,r(f),5);case 5:p=t=E.fa;E.g=2;E.h=0;break;case 3:q=v=sa(E);case 2:B={},w=(B.type=d,B.id=e,B.payload=p,B.error=q,B.isReply=\n!0,B),b.postMess`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 1968,
                  "startColumn": 448,
                  "endLine": 1968,
                  "endColumn": 453,
                  "snippet": {
                    "text": "\":\")[0];b.has(f)?b.get(f).push(e):b.set(f,[e])}}c=[];e=\"\";f=0;a=z(a);for(d=a.next();!d.done;d=a.next())if(d=d.value,\"Overall\"==d)e=\"Overall\",c.push({text:\"Overall\",jd:\"Overall\",lb:!0,hc:[\"Overall\"],isSelected:!1,isDisabled:!1,id:f++});else{var g=d.split(\":\")[0];g!=e&&(c.push({text:g,jd:\"\",lb:!0,hc:b.get(g),isSelected:!1,isDisabled:!1,id:f++}),e=g);c.push({text:d.split(\":\")[1],\njd:d,lb:!1,hc:[d],isSelected:!1,isDisabled:!1,id:f++})}return c};m.slicesDropDownCandidatesClass_=function(a){return a.lb?\"slice-key-true\":\"slice-key-false\"};\nm.selectDefaultSlicesFromDropDownMenuCandidates_=function(a,b){if(",
                    "rendered": {
                      "text": "\":\")[0];b.has(f)?b.get(f).push(e):b.set(f,[e])}}c=[];e=\"\";f=0;a=z(a);for(d=a.next();!d.done;d=a.next())if(d=d.value,\"Overall\"==d)e=\"Overall\",c.push({text:\"Overall\",jd:\"Overall\",lb:!0,hc:[\"Overall\"],isSelected:!1,isDisabled:!1,id:f++});else{var g=d.split(\":\")[0];g!=e&&(c.push({text:g,jd:\"\",lb:!0,hc:b.get(g),isSelected:!1,isDisabled:!1,id:f++}),e=g);c.push({text:d.split(\":\")[1],\njd:d,lb:!1,hc:[d],isSelected:!1,isDisabled:!1,id:f++})}return c};m.slicesDropDownCandidatesClass_=function(a){return a.lb?\"slice-key-true\":\"slice-key-false\"};\nm.selectDefaultSlicesFromDropDownMenuCandidates_=function(a,b){if(",
                      "markdown": "`\":\")[0];b.has(f)?b.get(f).push(e):b.set(f,[e])}}c=[];e=\"\";f=0;a=z(a);for(d=a.next();!d.done;d=a.next())if(d=d.value,\"Overall\"==d)e=\"Overall\",c.push({text:\"Overall\",jd:\"Overall\",lb:!0,hc:[\"Overall\"],isSelected:!1,isDisabled:!1,id:f++});else{var g=d.split(\":\")[0];g!=e&&(c.push({text:g,jd:\"\",lb:!0,hc:b.get(g),isSelected:!1,isDisabled:!1,id:f++}),e=g);c.push({text:d.split(\":\")[1],\njd:d,lb:!1,hc:[d],isSelected:!1,isDisabled:!1,id:f++})}return c};m.slicesDropDownCandidatesClass_=function(a){return a.lb?\"slice-key-true\":\"slice-key-false\"};\nm.selectDefaultSlicesFromDropDownMenuCandidates_=function(a,b){if(`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 1968,
                  "startColumn": 166,
                  "endLine": 1968,
                  "endColumn": 171,
                  "snippet": {
                    "text": "r c=0<b.selectedThresholds_.length?b.selectedThresholds_.join(\", \"):\" \";b.$.thresholdsList.fire(\"iron-select\",{item:{label:c}})},0)};\nm.computeSlicesDropDownCandidates_=function(a){for(var b=new Map,c=z(a),d=c.next();!d.done;d=c.next()){var e=d.value;if(\"Overall\"!=e){var f=e.split(\":\")[0];b.has(f)?b.get(f).push(e):b.set(f,[e])}}c=[];e=\"\";f=0;a=z(a);for(d=a.next();!d.done;d=a.next())if(d=d.value,\"Overall\"==d)e=\"Overall\",c.push({text:\"Overall\",jd:\"Overall\",lb:!0,hc:[\"Overall\"],isSelected:!1,isDisabled:!1,id:f++});else{var g=d.split(\":\")[0];g!=e&&(c.push({text:g,jd:\"\",lb:!0,hc:b.get(g),isSelected:!1,i",
                    "rendered": {
                      "text": "r c=0<b.selectedThresholds_.length?b.selectedThresholds_.join(\", \"):\" \";b.$.thresholdsList.fire(\"iron-select\",{item:{label:c}})},0)};\nm.computeSlicesDropDownCandidates_=function(a){for(var b=new Map,c=z(a),d=c.next();!d.done;d=c.next()){var e=d.value;if(\"Overall\"!=e){var f=e.split(\":\")[0];b.has(f)?b.get(f).push(e):b.set(f,[e])}}c=[];e=\"\";f=0;a=z(a);for(d=a.next();!d.done;d=a.next())if(d=d.value,\"Overall\"==d)e=\"Overall\",c.push({text:\"Overall\",jd:\"Overall\",lb:!0,hc:[\"Overall\"],isSelected:!1,isDisabled:!1,id:f++});else{var g=d.split(\":\")[0];g!=e&&(c.push({text:g,jd:\"\",lb:!0,hc:b.get(g),isSelected:!1,i",
                      "markdown": "`r c=0<b.selectedThresholds_.length?b.selectedThresholds_.join(\", \"):\" \";b.$.thresholdsList.fire(\"iron-select\",{item:{label:c}})},0)};\nm.computeSlicesDropDownCandidates_=function(a){for(var b=new Map,c=z(a),d=c.next();!d.done;d=c.next()){var e=d.value;if(\"Overall\"!=e){var f=e.split(\":\")[0];b.has(f)?b.get(f).push(e):b.set(f,[e])}}c=[];e=\"\";f=0;a=z(a);for(d=a.next();!d.done;d=a.next())if(d=d.value,\"Overall\"==d)e=\"Overall\",c.push({text:\"Overall\",jd:\"Overall\",lb:!0,hc:[\"Overall\"],isSelected:!1,isDisabled:!1,id:f++});else{var g=d.split(\":\")[0];g!=e&&(c.push({text:g,jd:\"\",lb:!0,hc:b.get(g),isSelected:!1,i`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 1781,
                  "startColumn": 177,
                  "endLine": 1781,
                  "endColumn": 182,
                  "snippet": {
                    "text": "esToItems(a)||[]).filter(function(c){return null!==c&&void 0!==c});this.za.clear(a);for(var b=0;b<a.length;b++)Yj(this.za,\na[b],!0);this.fallbackSelection&&!this.za.get().length&&this._valueToItem(this.fallbackSelection)&&this.select(this.fallbackSelection)},_selectionChange:function(){var a=this.za.get();this.multi?(this._setSelectedItems(a),this._setSelectedItem(a.length?a[0]:null)):null!==a&&void 0!==a?(this._setSelectedItems([a]),this._setSelectedItem(a)):(this._setSelectedItems([]),this._setSelectedItem(null))},_toggleSelected:function(a){var b=this.selectedValues.indexOf(a);0>b?this.push(\"sel",
                    "rendered": {
                      "text": "esToItems(a)||[]).filter(function(c){return null!==c&&void 0!==c});this.za.clear(a);for(var b=0;b<a.length;b++)Yj(this.za,\na[b],!0);this.fallbackSelection&&!this.za.get().length&&this._valueToItem(this.fallbackSelection)&&this.select(this.fallbackSelection)},_selectionChange:function(){var a=this.za.get();this.multi?(this._setSelectedItems(a),this._setSelectedItem(a.length?a[0]:null)):null!==a&&void 0!==a?(this._setSelectedItems([a]),this._setSelectedItem(a)):(this._setSelectedItems([]),this._setSelectedItem(null))},_toggleSelected:function(a){var b=this.selectedValues.indexOf(a);0>b?this.push(\"sel",
                      "markdown": "`esToItems(a)||[]).filter(function(c){return null!==c&&void 0!==c});this.za.clear(a);for(var b=0;b<a.length;b++)Yj(this.za,\na[b],!0);this.fallbackSelection&&!this.za.get().length&&this._valueToItem(this.fallbackSelection)&&this.select(this.fallbackSelection)},_selectionChange:function(){var a=this.za.get();this.multi?(this._setSelectedItems(a),this._setSelectedItem(a.length?a[0]:null)):null!==a&&void 0!==a?(this._setSelectedItems([a]),this._setSelectedItem(a)):(this._setSelectedItems([]),this._setSelectedItem(null))},_toggleSelected:function(a){var b=this.selectedValues.indexOf(a);0>b?this.push(\"sel`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 1781,
                  "startColumn": 41,
                  "endLine": 1781,
                  "endColumn": 46,
                  "snippet": {
                    "text": "(){this.multi?this._selectMulti(this.selectedValues):this._selectSelected(this.selected)},_selectMulti:function(a){a=a||[];a=(this._valuesToItems(a)||[]).filter(function(c){return null!==c&&void 0!==c});this.za.clear(a);for(var b=0;b<a.length;b++)Yj(this.za,\na[b],!0);this.fallbackSelection&&!this.za.get().length&&this._valueToItem(this.fallbackSelection)&&this.select(this.fallbackSelection)},_selectionChange:function(){var a=this.za.get();this.multi?(this._setSelectedItems(a),this._setSelectedItem(a.length?a[0]:null)):null!==a&&void 0!==a?(this._setSelectedItems([a]),this._setSelectedItem(a)):(this",
                    "rendered": {
                      "text": "(){this.multi?this._selectMulti(this.selectedValues):this._selectSelected(this.selected)},_selectMulti:function(a){a=a||[];a=(this._valuesToItems(a)||[]).filter(function(c){return null!==c&&void 0!==c});this.za.clear(a);for(var b=0;b<a.length;b++)Yj(this.za,\na[b],!0);this.fallbackSelection&&!this.za.get().length&&this._valueToItem(this.fallbackSelection)&&this.select(this.fallbackSelection)},_selectionChange:function(){var a=this.za.get();this.multi?(this._setSelectedItems(a),this._setSelectedItem(a.length?a[0]:null)):null!==a&&void 0!==a?(this._setSelectedItems([a]),this._setSelectedItem(a)):(this",
                      "markdown": "`(){this.multi?this._selectMulti(this.selectedValues):this._selectSelected(this.selected)},_selectMulti:function(a){a=a||[];a=(this._valuesToItems(a)||[]).filter(function(c){return null!==c&&void 0!==c});this.za.clear(a);for(var b=0;b<a.length;b++)Yj(this.za,\na[b],!0);this.fallbackSelection&&!this.za.get().length&&this._valueToItem(this.fallbackSelection)&&this.select(this.fallbackSelection)},_selectionChange:function(){var a=this.za.get();this.multi?(this._setSelectedItems(a),this._setSelectedItem(a.length?a[0]:null)):null!==a&&void 0!==a?(this._setSelectedItems([a]),this._setSelectedItem(a)):(this`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 1778,
                  "startColumn": 188,
                  "endLine": 1778,
                  "endColumn": 193,
                  "snippet": {
                    "text": "lySelection:function(a,b){this.selectedClass&&this.toggleClass(this.selectedClass,b,a);this.selectedAttribute&&\nthis.toggleAttribute.call(a,this.selectedAttribute,b);this._selectionChange();this.fire(\"iron-\"+(b?\"select\":\"deselect\"),{item:a})},_selectionChange:function(){this._setSelectedItem(this.za.get())},_observeItems:function(a){return P(a).observeNodes(function(b){this._updateItems();this._updateSelected();this.fire(\"iron-items-changed\",b,{bubbles:!1,cancelable:!1})})},_activateHandler:function(a){a=a.target;for(var b=this.items;a&&a!=this;){var c=b.indexOf(a);if(0<=c){b=this._indexToValue(c);",
                    "rendered": {
                      "text": "lySelection:function(a,b){this.selectedClass&&this.toggleClass(this.selectedClass,b,a);this.selectedAttribute&&\nthis.toggleAttribute.call(a,this.selectedAttribute,b);this._selectionChange();this.fire(\"iron-\"+(b?\"select\":\"deselect\"),{item:a})},_selectionChange:function(){this._setSelectedItem(this.za.get())},_observeItems:function(a){return P(a).observeNodes(function(b){this._updateItems();this._updateSelected();this.fire(\"iron-items-changed\",b,{bubbles:!1,cancelable:!1})})},_activateHandler:function(a){a=a.target;for(var b=this.items;a&&a!=this;){var c=b.indexOf(a);if(0<=c){b=this._indexToValue(c);",
                      "markdown": "`lySelection:function(a,b){this.selectedClass&&this.toggleClass(this.selectedClass,b,a);this.selectedAttribute&&\nthis.toggleAttribute.call(a,this.selectedAttribute,b);this._selectionChange();this.fire(\"iron-\"+(b?\"select\":\"deselect\"),{item:a})},_selectionChange:function(){this._setSelectedItem(this.za.get())},_observeItems:function(a){return P(a).observeNodes(function(b){this._updateItems();this._updateSelected();this.fire(\"iron-items-changed\",b,{bubbles:!1,cancelable:!1})})},_activateHandler:function(a){a=a.target;for(var b=this.items;a&&a!=this;){var c=b.indexOf(a);if(0<=c){b=this._indexToValue(c);`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 1776,
                  "startColumn": 295,
                  "endLine": 1776,
                  "endColumn": 300,
                  "snippet": {
                    "text": "em&&\n(this.selected=this._valueForItem(this.selectedItem))},_updateSelected:function(){this._selectSelected(this.selected)},_selectSelected:function(){if(this.items){var a=this._valueToItem(this.selected);a?this.za.select(a):this.za.clear();this.fallbackSelection&&this.items.length&&void 0===this.za.get()&&(this.selected=this.fallbackSelection)}},_filterItem:function(a){return!this._excludedLocalNames[a.localName]},_valueToItem:function(a){return null==a?null:this.items[this._valueToIndex(a)]},_valueToIndex:function(a){if(this.attrForSelected)for(var b=\n0,c;c=this.items[b];b++){if(this._valueForIte",
                    "rendered": {
                      "text": "em&&\n(this.selected=this._valueForItem(this.selectedItem))},_updateSelected:function(){this._selectSelected(this.selected)},_selectSelected:function(){if(this.items){var a=this._valueToItem(this.selected);a?this.za.select(a):this.za.clear();this.fallbackSelection&&this.items.length&&void 0===this.za.get()&&(this.selected=this.fallbackSelection)}},_filterItem:function(a){return!this._excludedLocalNames[a.localName]},_valueToItem:function(a){return null==a?null:this.items[this._valueToIndex(a)]},_valueToIndex:function(a){if(this.attrForSelected)for(var b=\n0,c;c=this.items[b];b++){if(this._valueForIte",
                      "markdown": "`em&&\n(this.selected=this._valueForItem(this.selectedItem))},_updateSelected:function(){this._selectSelected(this.selected)},_selectSelected:function(){if(this.items){var a=this._valueToItem(this.selected);a?this.za.select(a):this.za.clear();this.fallbackSelection&&this.items.length&&void 0===this.za.get()&&(this.selected=this.fallbackSelection)}},_filterItem:function(a){return!this._excludedLocalNames[a.localName]},_valueToItem:function(a){return null==a?null:this.items[this._valueToIndex(a)]},_valueToIndex:function(a){if(this.attrForSelected)for(var b=\n0,c;c=this.items[b];b++){if(this._valueForIte`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 1772,
                  "startColumn": 76,
                  "endLine": 1772,
                  "endColumn": 81,
                  "snippet": {
                    "text": "is)};m.isSelected=function(a){return 0<=this.selection.indexOf(a)};function Yj(a,b,c){if(null!=b&&c!==a.isSelected(b)){if(c)a.selection.push(b);else{var d=a.selection.indexOf(b);0<=d&&a.selection.splice(d,1)}a.g&&a.g(b,c)}}\nm.select=function(a){this.multi?this.toggle(a):this.get()!==a&&(Yj(this,this.get(),!1),Yj(this,a,!0))};m.toggle=function(a){Yj(this,a,!this.isSelected(a))};var Zj={properties:{attrForSelected:{type:String,value:null},selected:{type:String,notify:!0},selectedItem:{type:Object,readOnly:!0,notify:!0},activateEvent:{type:String,value:\"tap\",observer:\"_activateEventChanged\"},selectabl",
                    "rendered": {
                      "text": "is)};m.isSelected=function(a){return 0<=this.selection.indexOf(a)};function Yj(a,b,c){if(null!=b&&c!==a.isSelected(b)){if(c)a.selection.push(b);else{var d=a.selection.indexOf(b);0<=d&&a.selection.splice(d,1)}a.g&&a.g(b,c)}}\nm.select=function(a){this.multi?this.toggle(a):this.get()!==a&&(Yj(this,this.get(),!1),Yj(this,a,!0))};m.toggle=function(a){Yj(this,a,!this.isSelected(a))};var Zj={properties:{attrForSelected:{type:String,value:null},selected:{type:String,notify:!0},selectedItem:{type:Object,readOnly:!0,notify:!0},activateEvent:{type:String,value:\"tap\",observer:\"_activateEventChanged\"},selectabl",
                      "markdown": "`is)};m.isSelected=function(a){return 0<=this.selection.indexOf(a)};function Yj(a,b,c){if(null!=b&&c!==a.isSelected(b)){if(c)a.selection.push(b);else{var d=a.selection.indexOf(b);0<=d&&a.selection.splice(d,1)}a.g&&a.g(b,c)}}\nm.select=function(a){this.multi?this.toggle(a):this.get()!==a&&(Yj(this,this.get(),!1),Yj(this,a,!0))};m.toggle=function(a){Yj(this,a,!this.isSelected(a))};var Zj={properties:{attrForSelected:{type:String,value:null},selected:{type:String,notify:!0},selectedItem:{type:Object,readOnly:!0,notify:!0},activateEvent:{type:String,value:\"tap\",observer:\"_activateEventChanged\"},selectabl`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 1772,
                  "startColumn": 51,
                  "endLine": 1772,
                  "endColumn": 56,
                  "snippet": {
                    "text": "Of(b))&&Yj(this,b,!1)},this)};m.isSelected=function(a){return 0<=this.selection.indexOf(a)};function Yj(a,b,c){if(null!=b&&c!==a.isSelected(b)){if(c)a.selection.push(b);else{var d=a.selection.indexOf(b);0<=d&&a.selection.splice(d,1)}a.g&&a.g(b,c)}}\nm.select=function(a){this.multi?this.toggle(a):this.get()!==a&&(Yj(this,this.get(),!1),Yj(this,a,!0))};m.toggle=function(a){Yj(this,a,!this.isSelected(a))};var Zj={properties:{attrForSelected:{type:String,value:null},selected:{type:String,notify:!0},selectedItem:{type:Object,readOnly:!0,notify:!0},activateEvent:{type:String,value:\"tap\",observer:\"_activat",
                    "rendered": {
                      "text": "Of(b))&&Yj(this,b,!1)},this)};m.isSelected=function(a){return 0<=this.selection.indexOf(a)};function Yj(a,b,c){if(null!=b&&c!==a.isSelected(b)){if(c)a.selection.push(b);else{var d=a.selection.indexOf(b);0<=d&&a.selection.splice(d,1)}a.g&&a.g(b,c)}}\nm.select=function(a){this.multi?this.toggle(a):this.get()!==a&&(Yj(this,this.get(),!1),Yj(this,a,!0))};m.toggle=function(a){Yj(this,a,!this.isSelected(a))};var Zj={properties:{attrForSelected:{type:String,value:null},selected:{type:String,notify:!0},selectedItem:{type:Object,readOnly:!0,notify:!0},activateEvent:{type:String,value:\"tap\",observer:\"_activat",
                      "markdown": "`Of(b))&&Yj(this,b,!1)},this)};m.isSelected=function(a){return 0<=this.selection.indexOf(a)};function Yj(a,b,c){if(null!=b&&c!==a.isSelected(b)){if(c)a.selection.push(b);else{var d=a.selection.indexOf(b);0<=d&&a.selection.splice(d,1)}a.g&&a.g(b,c)}}\nm.select=function(a){this.multi?this.toggle(a):this.get()!==a&&(Yj(this,this.get(),!1),Yj(this,a,!0))};m.toggle=function(a){Yj(this,a,!this.isSelected(a))};var Zj={properties:{attrForSelected:{type:String,value:null},selected:{type:String,notify:!0},selectedItem:{type:Object,readOnly:!0,notify:!0},activateEvent:{type:String,value:\"tap\",observer:\"_activat`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 1572,
                  "startColumn": 337,
                  "endLine": 1572,
                  "endColumn": 342,
                  "snippet": {
                    "text": "tion(d){var e=this,f=this.__selectedIndexForItemIndex(d);if(0<=f){var g=0;this.xa.forEach(function(h,k){f==g++&&e.deselect(k)})}};b.prototype.__selectedIndexForItemIndex=function(d){if(d=this.__dataLinkedPaths[\"items.\"+d])return parseInt(d.slice(9),10)};b.prototype.deselect=function(d){var e=this.xa.get(d);if(0<=e){this.xa.delete(d);var f;this.multi&&(f=this.__selectedIndexForItemIndex(e));this.__updateLinks();this.multi?this.splice(\"selected\",f,1):this.selected=\nthis.selectedItem=null}};b.prototype.deselectIndex=function(d){this.deselect(this.items[d])};b.prototype.select=function(d){this.selectIn",
                    "rendered": {
                      "text": "tion(d){var e=this,f=this.__selectedIndexForItemIndex(d);if(0<=f){var g=0;this.xa.forEach(function(h,k){f==g++&&e.deselect(k)})}};b.prototype.__selectedIndexForItemIndex=function(d){if(d=this.__dataLinkedPaths[\"items.\"+d])return parseInt(d.slice(9),10)};b.prototype.deselect=function(d){var e=this.xa.get(d);if(0<=e){this.xa.delete(d);var f;this.multi&&(f=this.__selectedIndexForItemIndex(e));this.__updateLinks();this.multi?this.splice(\"selected\",f,1):this.selected=\nthis.selectedItem=null}};b.prototype.deselectIndex=function(d){this.deselect(this.items[d])};b.prototype.select=function(d){this.selectIn",
                      "markdown": "`tion(d){var e=this,f=this.__selectedIndexForItemIndex(d);if(0<=f){var g=0;this.xa.forEach(function(h,k){f==g++&&e.deselect(k)})}};b.prototype.__selectedIndexForItemIndex=function(d){if(d=this.__dataLinkedPaths[\"items.\"+d])return parseInt(d.slice(9),10)};b.prototype.deselect=function(d){var e=this.xa.get(d);if(0<=e){this.xa.delete(d);var f;this.multi&&(f=this.__selectedIndexForItemIndex(e));this.__updateLinks();this.multi?this.splice(\"selected\",f,1):this.selected=\nthis.selectedItem=null}};b.prototype.deselectIndex=function(d){this.deselect(this.items[d])};b.prototype.select=function(d){this.selectIn`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 1552,
                  "startColumn": 431,
                  "endLine": 1552,
                  "endColumn": 436,
                  "snippet": {
                    "text": "otype.listen=function(f,g,h){f=f||this;var k=this.__boundListeners||(this.__boundListeners=new WeakMap),l=k.get(f);l||(l={},k.set(f,l));k=g+h;l[k]||(l[k]=this._addMethodEventListenerToNode(f,g,h,this))};b.prototype.unlisten=function(f,g,h){f=f||this;var k=this.__boundListeners&&this.__boundListeners.get(f);h=g+h;var l=k&&k[h];l&&(this._removeEventListenerFromNode(f,g,\nl),k[h]=null)};b.prototype.setScrollDirection=function(f,g){Gg(g||this,e[f]||\"auto\")};b.prototype.$$=function(f){return this.root.querySelector(f)};b.prototype.distributeContent=function(){var f=P(this);window.ShadyDOM&&f.shadowRoot&&",
                    "rendered": {
                      "text": "otype.listen=function(f,g,h){f=f||this;var k=this.__boundListeners||(this.__boundListeners=new WeakMap),l=k.get(f);l||(l={},k.set(f,l));k=g+h;l[k]||(l[k]=this._addMethodEventListenerToNode(f,g,h,this))};b.prototype.unlisten=function(f,g,h){f=f||this;var k=this.__boundListeners&&this.__boundListeners.get(f);h=g+h;var l=k&&k[h];l&&(this._removeEventListenerFromNode(f,g,\nl),k[h]=null)};b.prototype.setScrollDirection=function(f,g){Gg(g||this,e[f]||\"auto\")};b.prototype.$$=function(f){return this.root.querySelector(f)};b.prototype.distributeContent=function(){var f=P(this);window.ShadyDOM&&f.shadowRoot&&",
                      "markdown": "`otype.listen=function(f,g,h){f=f||this;var k=this.__boundListeners||(this.__boundListeners=new WeakMap),l=k.get(f);l||(l={},k.set(f,l));k=g+h;l[k]||(l[k]=this._addMethodEventListenerToNode(f,g,h,this))};b.prototype.unlisten=function(f,g,h){f=f||this;var k=this.__boundListeners&&this.__boundListeners.get(f);h=g+h;var l=k&&k[h];l&&(this._removeEventListenerFromNode(f,g,\nl),k[h]=null)};b.prototype.setScrollDirection=function(f,g){Gg(g||this,e[f]||\"auto\")};b.prototype.$$=function(f){return this.root.querySelector(f)};b.prototype.distributeContent=function(){var f=P(this);window.ShadyDOM&&f.shadowRoot&&`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 1552,
                  "startColumn": 238,
                  "endLine": 1552,
                  "endColumn": 243,
                  "snippet": {
                    "text": "?{}:g;f=new Event(f,{bubbles:void 0===h.bubbles?!0:h.bubbles,\ncancelable:!!h.cancelable,composed:void 0===h.composed?!0:h.composed});f.detail=g;N(h.node||this).dispatchEvent(f);return f};b.prototype.listen=function(f,g,h){f=f||this;var k=this.__boundListeners||(this.__boundListeners=new WeakMap),l=k.get(f);l||(l={},k.set(f,l));k=g+h;l[k]||(l[k]=this._addMethodEventListenerToNode(f,g,h,this))};b.prototype.unlisten=function(f,g,h){f=f||this;var k=this.__boundListeners&&this.__boundListeners.get(f);h=g+h;var l=k&&k[h];l&&(this._removeEventListenerFromNode(f,g,\nl),k[h]=null)};b.prototype.setScrollDirec",
                    "rendered": {
                      "text": "?{}:g;f=new Event(f,{bubbles:void 0===h.bubbles?!0:h.bubbles,\ncancelable:!!h.cancelable,composed:void 0===h.composed?!0:h.composed});f.detail=g;N(h.node||this).dispatchEvent(f);return f};b.prototype.listen=function(f,g,h){f=f||this;var k=this.__boundListeners||(this.__boundListeners=new WeakMap),l=k.get(f);l||(l={},k.set(f,l));k=g+h;l[k]||(l[k]=this._addMethodEventListenerToNode(f,g,h,this))};b.prototype.unlisten=function(f,g,h){f=f||this;var k=this.__boundListeners&&this.__boundListeners.get(f);h=g+h;var l=k&&k[h];l&&(this._removeEventListenerFromNode(f,g,\nl),k[h]=null)};b.prototype.setScrollDirec",
                      "markdown": "`?{}:g;f=new Event(f,{bubbles:void 0===h.bubbles?!0:h.bubbles,\ncancelable:!!h.cancelable,composed:void 0===h.composed?!0:h.composed});f.detail=g;N(h.node||this).dispatchEvent(f);return f};b.prototype.listen=function(f,g,h){f=f||this;var k=this.__boundListeners||(this.__boundListeners=new WeakMap),l=k.get(f);l||(l={},k.set(f,l));k=g+h;l[k]||(l[k]=this._addMethodEventListenerToNode(f,g,h,this))};b.prototype.unlisten=function(f,g,h){f=f||this;var k=this.__boundListeners&&this.__boundListeners.get(f);h=g+h;var l=k&&k[h];l&&(this._removeEventListenerFromNode(f,g,\nl),k[h]=null)};b.prototype.setScrollDirec`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 1538,
                  "startColumn": 191,
                  "endLine": 1538,
                  "endColumn": 196,
                  "snippet": {
                    "text": "join(\":\"),b&&(d=this.ql(c,d)),e[c]=d);return e};m.cl=function(a){if(Ih)for(var b in a.pi)b!==this.j&&Ih(b)};\nm.pl=function(a,b,c,d,e){var f=this;c&&Ch(c,function(t,v){v&&f.g.get(v)&&(d=\"@apply \"+v+\";\")});if(!d)return a;var g=this.ai(\"\"+d,e);e=a.slice(0,a.indexOf(\"--\"));var h=g=this.hg(g,!0),k=this.g.get(b),l=k&&k.properties;l?h=Object.assign(Object.create(l),g):this.g.set(b,h);var n=[],p,q=!1;for(p in h){var r=g[p];void 0===r&&(r=\"initial\");!l||p in l||(q=!0);n.push(b+\"_-_\"+p+\": \"+r)}q&&this.cl(k);k&&(k.properties=h);c&&(e=a+\";\"+e);return e+n.join(\"; \")+\";\"};S.prototype.detectMixin=S.prototype.am;\n",
                    "rendered": {
                      "text": "join(\":\"),b&&(d=this.ql(c,d)),e[c]=d);return e};m.cl=function(a){if(Ih)for(var b in a.pi)b!==this.j&&Ih(b)};\nm.pl=function(a,b,c,d,e){var f=this;c&&Ch(c,function(t,v){v&&f.g.get(v)&&(d=\"@apply \"+v+\";\")});if(!d)return a;var g=this.ai(\"\"+d,e);e=a.slice(0,a.indexOf(\"--\"));var h=g=this.hg(g,!0),k=this.g.get(b),l=k&&k.properties;l?h=Object.assign(Object.create(l),g):this.g.set(b,h);var n=[],p,q=!1;for(p in h){var r=g[p];void 0===r&&(r=\"initial\");!l||p in l||(q=!0);n.push(b+\"_-_\"+p+\": \"+r)}q&&this.cl(k);k&&(k.properties=h);c&&(e=a+\";\"+e);return e+n.join(\"; \")+\";\"};S.prototype.detectMixin=S.prototype.am;\n",
                      "markdown": "`join(\":\"),b&&(d=this.ql(c,d)),e[c]=d);return e};m.cl=function(a){if(Ih)for(var b in a.pi)b!==this.j&&Ih(b)};\nm.pl=function(a,b,c,d,e){var f=this;c&&Ch(c,function(t,v){v&&f.g.get(v)&&(d=\"@apply \"+v+\";\")});if(!d)return a;var g=this.ai(\"\"+d,e);e=a.slice(0,a.indexOf(\"--\"));var h=g=this.hg(g,!0),k=this.g.get(b),l=k&&k.properties;l?h=Object.assign(Object.create(l),g):this.g.set(b,h);var n=[],p,q=!1;for(p in h){var r=g[p];void 0===r&&(r=\"initial\");!l||p in l||(q=!0);n.push(b+\"_-_\"+p+\": \"+r)}q&&this.cl(k);k&&(k.properties=h);c&&(e=a+\";\"+e);return e+n.join(\"; \")+\";\"};S.prototype.detectMixin=S.prototype.am;\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 1538,
                  "startColumn": 64,
                  "endLine": 1538,
                  "endColumn": 69,
                  "snippet": {
                    "text": "0===b?!1:b;a=a.split(\";\");for(var c,d,e={},f=0;f<a.length;f++)if(c=a[f])d=c.split(\":\"),1<d.length&&(c=d[0].trim(),d=d.slice(1).join(\":\"),b&&(d=this.ql(c,d)),e[c]=d);return e};m.cl=function(a){if(Ih)for(var b in a.pi)b!==this.j&&Ih(b)};\nm.pl=function(a,b,c,d,e){var f=this;c&&Ch(c,function(t,v){v&&f.g.get(v)&&(d=\"@apply \"+v+\";\")});if(!d)return a;var g=this.ai(\"\"+d,e);e=a.slice(0,a.indexOf(\"--\"));var h=g=this.hg(g,!0),k=this.g.get(b),l=k&&k.properties;l?h=Object.assign(Object.create(l),g):this.g.set(b,h);var n=[],p,q=!1;for(p in h){var r=g[p];void 0===r&&(r=\"initial\");!l||p in l||(q=!0);n.push(b+\"_-_\"",
                    "rendered": {
                      "text": "0===b?!1:b;a=a.split(\";\");for(var c,d,e={},f=0;f<a.length;f++)if(c=a[f])d=c.split(\":\"),1<d.length&&(c=d[0].trim(),d=d.slice(1).join(\":\"),b&&(d=this.ql(c,d)),e[c]=d);return e};m.cl=function(a){if(Ih)for(var b in a.pi)b!==this.j&&Ih(b)};\nm.pl=function(a,b,c,d,e){var f=this;c&&Ch(c,function(t,v){v&&f.g.get(v)&&(d=\"@apply \"+v+\";\")});if(!d)return a;var g=this.ai(\"\"+d,e);e=a.slice(0,a.indexOf(\"--\"));var h=g=this.hg(g,!0),k=this.g.get(b),l=k&&k.properties;l?h=Object.assign(Object.create(l),g):this.g.set(b,h);var n=[],p,q=!1;for(p in h){var r=g[p];void 0===r&&(r=\"initial\");!l||p in l||(q=!0);n.push(b+\"_-_\"",
                      "markdown": "`0===b?!1:b;a=a.split(\";\");for(var c,d,e={},f=0;f<a.length;f++)if(c=a[f])d=c.split(\":\"),1<d.length&&(c=d[0].trim(),d=d.slice(1).join(\":\"),b&&(d=this.ql(c,d)),e[c]=d);return e};m.cl=function(a){if(Ih)for(var b in a.pi)b!==this.j&&Ih(b)};\nm.pl=function(a,b,c,d,e){var f=this;c&&Ch(c,function(t,v){v&&f.g.get(v)&&(d=\"@apply \"+v+\";\")});if(!d)return a;var g=this.ai(\"\"+d,e);e=a.slice(0,a.indexOf(\"--\"));var h=g=this.hg(g,!0),k=this.g.get(b),l=k&&k.properties;l?h=Object.assign(Object.create(l),g):this.g.set(b,h);var n=[],p,q=!1;for(p in h){var r=g[p];void 0===r&&(r=\"initial\");!l||p in l||(q=!0);n.push(b+\"_-_\"`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 1536,
                  "startColumn": 92,
                  "endLine": 1536,
                  "endColumn": 97,
                  "snippet": {
                    "text": ".exec(a);){var d=c[0],e=c[1];c=c.index;var f=c+d.indexOf(\"@apply\");f=a.slice(0,f);a=a.slice(c+d.length);d=b?this.xk(b):{};Object.assign(d,this.hg(f));e=this.rk(e,d);a=f+e+a;oh.lastIndex=c+e.length}return a};\nm.rk=function(a,b){a=a.replace(Eh,\"\");var c=[],d=this.g.get(a);d||(this.g.set(a,{}),d=this.g.get(a));if(d){this.j&&(d.pi[this.j]=!0);var e,f=d.properties;for(e in f){var g=b&&b[e];d=[e,\": var(\",a,\"_-_\",e];g&&d.push(\",\",g.replace(Gh,\"\"));d.push(\")\");Gh.test(f[e])&&d.push(\" !important\");c.push(d.join(\"\"))}}return c.join(\"; \")};m.ql=function(a,b){var c=Fh.exec(b);c&&(b=c[1]?this.zk(a):\"apply-shim-",
                    "rendered": {
                      "text": ".exec(a);){var d=c[0],e=c[1];c=c.index;var f=c+d.indexOf(\"@apply\");f=a.slice(0,f);a=a.slice(c+d.length);d=b?this.xk(b):{};Object.assign(d,this.hg(f));e=this.rk(e,d);a=f+e+a;oh.lastIndex=c+e.length}return a};\nm.rk=function(a,b){a=a.replace(Eh,\"\");var c=[],d=this.g.get(a);d||(this.g.set(a,{}),d=this.g.get(a));if(d){this.j&&(d.pi[this.j]=!0);var e,f=d.properties;for(e in f){var g=b&&b[e];d=[e,\": var(\",a,\"_-_\",e];g&&d.push(\",\",g.replace(Gh,\"\"));d.push(\")\");Gh.test(f[e])&&d.push(\" !important\");c.push(d.join(\"\"))}}return c.join(\"; \")};m.ql=function(a,b){var c=Fh.exec(b);c&&(b=c[1]?this.zk(a):\"apply-shim-",
                      "markdown": "`.exec(a);){var d=c[0],e=c[1];c=c.index;var f=c+d.indexOf(\"@apply\");f=a.slice(0,f);a=a.slice(c+d.length);d=b?this.xk(b):{};Object.assign(d,this.hg(f));e=this.rk(e,d);a=f+e+a;oh.lastIndex=c+e.length}return a};\nm.rk=function(a,b){a=a.replace(Eh,\"\");var c=[],d=this.g.get(a);d||(this.g.set(a,{}),d=this.g.get(a));if(d){this.j&&(d.pi[this.j]=!0);var e,f=d.properties;for(e in f){var g=b&&b[e];d=[e,\": var(\",a,\"_-_\",e];g&&d.push(\",\",g.replace(Gh,\"\"));d.push(\")\");Gh.test(f[e])&&d.push(\" !important\");c.push(d.join(\"\"))}}return c.join(\"; \")};m.ql=function(a,b){var c=Fh.exec(b);c&&(b=c[1]?this.zk(a):\"apply-shim-`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 1536,
                  "startColumn": 55,
                  "endLine": 1536,
                  "endColumn": 60,
                  "snippet": {
                    "text": " d};m.ai=function(a,b){for(var c;c=oh.exec(a);){var d=c[0],e=c[1];c=c.index;var f=c+d.indexOf(\"@apply\");f=a.slice(0,f);a=a.slice(c+d.length);d=b?this.xk(b):{};Object.assign(d,this.hg(f));e=this.rk(e,d);a=f+e+a;oh.lastIndex=c+e.length}return a};\nm.rk=function(a,b){a=a.replace(Eh,\"\");var c=[],d=this.g.get(a);d||(this.g.set(a,{}),d=this.g.get(a));if(d){this.j&&(d.pi[this.j]=!0);var e,f=d.properties;for(e in f){var g=b&&b[e];d=[e,\": var(\",a,\"_-_\",e];g&&d.push(\",\",g.replace(Gh,\"\"));d.push(\")\");Gh.test(f[e])&&d.push(\" !important\");c.push(d.join(\"\"))}}return c.join(\"; \")};m.ql=function(a,b){var c=Fh.exec(",
                    "rendered": {
                      "text": " d};m.ai=function(a,b){for(var c;c=oh.exec(a);){var d=c[0],e=c[1];c=c.index;var f=c+d.indexOf(\"@apply\");f=a.slice(0,f);a=a.slice(c+d.length);d=b?this.xk(b):{};Object.assign(d,this.hg(f));e=this.rk(e,d);a=f+e+a;oh.lastIndex=c+e.length}return a};\nm.rk=function(a,b){a=a.replace(Eh,\"\");var c=[],d=this.g.get(a);d||(this.g.set(a,{}),d=this.g.get(a));if(d){this.j&&(d.pi[this.j]=!0);var e,f=d.properties;for(e in f){var g=b&&b[e];d=[e,\": var(\",a,\"_-_\",e];g&&d.push(\",\",g.replace(Gh,\"\"));d.push(\")\");Gh.test(f[e])&&d.push(\" !important\");c.push(d.join(\"\"))}}return c.join(\"; \")};m.ql=function(a,b){var c=Fh.exec(",
                      "markdown": "` d};m.ai=function(a,b){for(var c;c=oh.exec(a);){var d=c[0],e=c[1];c=c.index;var f=c+d.indexOf(\"@apply\");f=a.slice(0,f);a=a.slice(c+d.length);d=b?this.xk(b):{};Object.assign(d,this.hg(f));e=this.rk(e,d);a=f+e+a;oh.lastIndex=c+e.length}return a};\nm.rk=function(a,b){a=a.replace(Eh,\"\");var c=[],d=this.g.get(a);d||(this.g.set(a,{}),d=this.g.get(a));if(d){this.j&&(d.pi[this.j]=!0);var e,f=d.properties;for(e in f){var g=b&&b[e];d=[e,\": var(\",a,\"_-_\",e];g&&d.push(\",\",g.replace(Gh,\"\"));d.push(\")\");Gh.test(f[e])&&d.push(\" !important\");c.push(d.join(\"\"))}}return c.join(\"; \")};m.ql=function(a,b){var c=Fh.exec(`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 1433,
                  "startColumn": 339,
                  "endLine": 1433,
                  "endColumn": 344,
                  "snippet": {
                    "text": "&&(c=le(c,e.attrName,\"attribute\",a));a._propertyToAttribute(b,e.attrName,c)}function Ff(a,b,c,d,e){var f=e?qf(a):a;if(b=b[f])for(f=0;f<b.length;f++){var g=b[f];if(g.info.zd!==uf&&(!e||Af(a,g.trigger))){g.info.zd=uf;g=g.info;for(var h=c,k=d,l=0,n=h.length-1,p=-1;l<=n;){var q=l+n>>1,r=k.get(h[q].ae)-k.get(g.ae);if(0>r)l=q+1;else if(0<r)n=q-1;else{p=q;break}}0>p&&(p=n+1);h.splice(p,0,g)}}}\nfunction Gf(a){var b=a.constructor.jk;if(!b){b=new Map;for(var c=a.__computeEffects,d=Hf(a),e=d.xl,f=d.ready,g=d.total;d=f.shift();)b.set(d,b.size),(d=c[d])&&d.forEach(function(h){h=h.info.ae;--g;0===--e[h]&&f.push(",
                    "rendered": {
                      "text": "&&(c=le(c,e.attrName,\"attribute\",a));a._propertyToAttribute(b,e.attrName,c)}function Ff(a,b,c,d,e){var f=e?qf(a):a;if(b=b[f])for(f=0;f<b.length;f++){var g=b[f];if(g.info.zd!==uf&&(!e||Af(a,g.trigger))){g.info.zd=uf;g=g.info;for(var h=c,k=d,l=0,n=h.length-1,p=-1;l<=n;){var q=l+n>>1,r=k.get(h[q].ae)-k.get(g.ae);if(0>r)l=q+1;else if(0<r)n=q-1;else{p=q;break}}0>p&&(p=n+1);h.splice(p,0,g)}}}\nfunction Gf(a){var b=a.constructor.jk;if(!b){b=new Map;for(var c=a.__computeEffects,d=Hf(a),e=d.xl,f=d.ready,g=d.total;d=f.shift();)b.set(d,b.size),(d=c[d])&&d.forEach(function(h){h=h.info.ae;--g;0===--e[h]&&f.push(",
                      "markdown": "`&&(c=le(c,e.attrName,\"attribute\",a));a._propertyToAttribute(b,e.attrName,c)}function Ff(a,b,c,d,e){var f=e?qf(a):a;if(b=b[f])for(f=0;f<b.length;f++){var g=b[f];if(g.info.zd!==uf&&(!e||Af(a,g.trigger))){g.info.zd=uf;g=g.info;for(var h=c,k=d,l=0,n=h.length-1,p=-1;l<=n;){var q=l+n>>1,r=k.get(h[q].ae)-k.get(g.ae);if(0>r)l=q+1;else if(0<r)n=q-1;else{p=q;break}}0>p&&(p=n+1);h.splice(p,0,g)}}}\nfunction Gf(a){var b=a.constructor.jk;if(!b){b=new Map;for(var c=a.__computeEffects,d=Hf(a),e=d.xl,f=d.ready,g=d.total;d=f.shift();)b.set(d,b.size),(d=c[d])&&d.forEach(function(h){h=h.info.ae;--g;0===--e[h]&&f.push(`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 1433,
                  "startColumn": 324,
                  "endLine": 1433,
                  "endColumn": 329,
                  "snippet": {
                    "text": "=a.__data[b];le&&(c=le(c,e.attrName,\"attribute\",a));a._propertyToAttribute(b,e.attrName,c)}function Ff(a,b,c,d,e){var f=e?qf(a):a;if(b=b[f])for(f=0;f<b.length;f++){var g=b[f];if(g.info.zd!==uf&&(!e||Af(a,g.trigger))){g.info.zd=uf;g=g.info;for(var h=c,k=d,l=0,n=h.length-1,p=-1;l<=n;){var q=l+n>>1,r=k.get(h[q].ae)-k.get(g.ae);if(0>r)l=q+1;else if(0<r)n=q-1;else{p=q;break}}0>p&&(p=n+1);h.splice(p,0,g)}}}\nfunction Gf(a){var b=a.constructor.jk;if(!b){b=new Map;for(var c=a.__computeEffects,d=Hf(a),e=d.xl,f=d.ready,g=d.total;d=f.shift();)b.set(d,b.size),(d=c[d])&&d.forEach(function(h){h=h.info.ae;--g;0===",
                    "rendered": {
                      "text": "=a.__data[b];le&&(c=le(c,e.attrName,\"attribute\",a));a._propertyToAttribute(b,e.attrName,c)}function Ff(a,b,c,d,e){var f=e?qf(a):a;if(b=b[f])for(f=0;f<b.length;f++){var g=b[f];if(g.info.zd!==uf&&(!e||Af(a,g.trigger))){g.info.zd=uf;g=g.info;for(var h=c,k=d,l=0,n=h.length-1,p=-1;l<=n;){var q=l+n>>1,r=k.get(h[q].ae)-k.get(g.ae);if(0>r)l=q+1;else if(0<r)n=q-1;else{p=q;break}}0>p&&(p=n+1);h.splice(p,0,g)}}}\nfunction Gf(a){var b=a.constructor.jk;if(!b){b=new Map;for(var c=a.__computeEffects,d=Hf(a),e=d.xl,f=d.ready,g=d.total;d=f.shift();)b.set(d,b.size),(d=c[d])&&d.forEach(function(h){h=h.info.ae;--g;0===",
                      "markdown": "`=a.__data[b];le&&(c=le(c,e.attrName,\"attribute\",a));a._propertyToAttribute(b,e.attrName,c)}function Ff(a,b,c,d,e){var f=e?qf(a):a;if(b=b[f])for(f=0;f<b.length;f++){var g=b[f];if(g.info.zd!==uf&&(!e||Af(a,g.trigger))){g.info.zd=uf;g=g.info;for(var h=c,k=d,l=0,n=h.length-1,p=-1;l<=n;){var q=l+n>>1,r=k.get(h[q].ae)-k.get(g.ae);if(0>r)l=q+1;else if(0<r)n=q-1;else{p=q;break}}0>p&&(p=n+1);h.splice(p,0,g)}}}\nfunction Gf(a){var b=a.constructor.jk;if(!b){b=new Map;for(var c=a.__computeEffects,d=Hf(a),e=d.xl,f=d.ready,g=d.total;d=f.shift();)b.set(d,b.size),(d=c[d])&&d.forEach(function(h){h=h.info.ae;--g;0===`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 1363,
                  "startColumn": 312,
                  "endLine": 1363,
                  "endColumn": 317,
                  "snippet": {
                    "text": "function(a){Id||(Id=!0,Jd.textContent=Hd++);Gd.push(a);return Ed++},cancel:function(a){var b=a-Fd;if(0<=b){if(!Gd[b])throw Error(\"invalid async handle: \"+a);Gd[b]=null}}};var Nd=0;function M(a){var b=a.h;b||(b=new WeakMap,a.h=b);var c=Nd++;return function(d){var e=d.g;if(e&&e[c])return d;var f=b,g=f.get(d);g||(g=a(d),f.set(d,g),d=Object.create(g.g||e||null),d[c]=!0,g.g=d);return g}};function Od(){this.g=this.j=this.h=null}function Pd(a,b,c){a.h=b;a.j=c;a.g=a.h.run(function(){a.g=null;Qd.delete(a);a.j()})}Od.prototype.cancel=function(){this.isActive()&&(this.l(),Qd.delete(this))};Od.prototype.l=func",
                    "rendered": {
                      "text": "function(a){Id||(Id=!0,Jd.textContent=Hd++);Gd.push(a);return Ed++},cancel:function(a){var b=a-Fd;if(0<=b){if(!Gd[b])throw Error(\"invalid async handle: \"+a);Gd[b]=null}}};var Nd=0;function M(a){var b=a.h;b||(b=new WeakMap,a.h=b);var c=Nd++;return function(d){var e=d.g;if(e&&e[c])return d;var f=b,g=f.get(d);g||(g=a(d),f.set(d,g),d=Object.create(g.g||e||null),d[c]=!0,g.g=d);return g}};function Od(){this.g=this.j=this.h=null}function Pd(a,b,c){a.h=b;a.j=c;a.g=a.h.run(function(){a.g=null;Qd.delete(a);a.j()})}Od.prototype.cancel=function(){this.isActive()&&(this.l(),Qd.delete(this))};Od.prototype.l=func",
                      "markdown": "`function(a){Id||(Id=!0,Jd.textContent=Hd++);Gd.push(a);return Ed++},cancel:function(a){var b=a-Fd;if(0<=b){if(!Gd[b])throw Error(\"invalid async handle: \"+a);Gd[b]=null}}};var Nd=0;function M(a){var b=a.h;b||(b=new WeakMap,a.h=b);var c=Nd++;return function(d){var e=d.g;if(e&&e[c])return d;var f=b,g=f.get(d);g||(g=a(d),f.set(d,g),d=Object.create(g.g||e||null),d[c]=!0,g.g=d);return g}};function Od(){this.g=this.j=this.h=null}function Pd(a,b,c){a.h=b;a.j=c;a.g=a.h.run(function(){a.g=null;Qd.delete(a);a.j()})}Od.prototype.cancel=function(){this.isActive()&&(this.l(),Qd.delete(this))};Od.prototype.l=func`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 1323,
                  "startColumn": 48,
                  "endLine": 1323,
                  "endColumn": 53,
                  "snippet": {
                    "text": "k(a,c)};m.nk=function(a,b,c){c=void 0===c?id:c;var d=this.constructor.lc(a,c);if(void 0!==d&&!0===c.vg){var e,f=(void 0!==(null==(e=c.cd)?void 0:e.oj)?c.cd:gd).oj(b,c.type);this.h=a;null==f?this.removeAttribute(d):this.setAttribute(d,f);this.h=null}};\nm.ak=function(a,b){var c=this.constructor;a=c.eh.get(a);if(void 0!==a&&this.h!==a){c=c.fd(a);var d,e=\"function\"===typeof c.cd?{rg:c.cd}:void 0!==(null==(d=c.cd)?void 0:d.rg)?c.cd:gd;this.h=a;this[a]=e.rg(b,c.type);this.h=null}};function jd(a,b,c,d){var e=!0;void 0!==b&&(d=d||a.constructor.fd(b),(d.yi||hd)(a[b],c)?(a.o.has(b)||a.o.set(b,c),!0===d.vg&&a",
                    "rendered": {
                      "text": "k(a,c)};m.nk=function(a,b,c){c=void 0===c?id:c;var d=this.constructor.lc(a,c);if(void 0!==d&&!0===c.vg){var e,f=(void 0!==(null==(e=c.cd)?void 0:e.oj)?c.cd:gd).oj(b,c.type);this.h=a;null==f?this.removeAttribute(d):this.setAttribute(d,f);this.h=null}};\nm.ak=function(a,b){var c=this.constructor;a=c.eh.get(a);if(void 0!==a&&this.h!==a){c=c.fd(a);var d,e=\"function\"===typeof c.cd?{rg:c.cd}:void 0!==(null==(d=c.cd)?void 0:d.rg)?c.cd:gd;this.h=a;this[a]=e.rg(b,c.type);this.h=null}};function jd(a,b,c,d){var e=!0;void 0!==b&&(d=d||a.constructor.fd(b),(d.yi||hd)(a[b],c)?(a.o.has(b)||a.o.set(b,c),!0===d.vg&&a",
                      "markdown": "`k(a,c)};m.nk=function(a,b,c){c=void 0===c?id:c;var d=this.constructor.lc(a,c);if(void 0!==d&&!0===c.vg){var e,f=(void 0!==(null==(e=c.cd)?void 0:e.oj)?c.cd:gd).oj(b,c.type);this.h=a;null==f?this.removeAttribute(d):this.setAttribute(d,f);this.h=null}};\nm.ak=function(a,b){var c=this.constructor;a=c.eh.get(a);if(void 0!==a&&this.h!==a){c=c.fd(a);var d,e=\"function\"===typeof c.cd?{rg:c.cd}:void 0!==(null==(d=c.cd)?void 0:d.rg)?c.cd:gd;this.h=a;this[a]=e.rg(b,c.type);this.h=null}};function jd(a,b,c,d){var e=!0;void 0!==b&&(d=d||a.constructor.fd(b),(d.yi||hd)(a[b],c)?(a.o.has(b)||a.o.set(b,c),!0===d.vg&&a`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 1319,
                  "startColumn": 31,
                  "endLine": 1319,
                  "endColumn": 36,
                  "snippet": {
                    "text": "wnProperty(a)||(b=this.h(a,\"symbol\"===typeof a?Symbol():\"__\"+a,b),void 0!==b&&Object.defineProperty(this.prototype,a,b))};J.h=function(a,b,c){return{get:function(){return this[b]},set:function(d){var e=this[a];this[b]=d;jd(this,a,e,c)},configurable:!0,enumerable:!0}};\nJ.fd=function(a){return this.ab.get(a)||id};J.finalize=function(){if(this.hasOwnProperty(\"finalized\"))return!1;this.finalized=!0;var a=Object.getPrototypeOf(this);a.finalize();void 0!==a.ig&&(this.ig=[].concat(A(a.ig)));this.ab=new Map(a.ab);this.eh=new Map;if(this.hasOwnProperty(\"properties\")){a=this.properties;var b=[].concat(A(Obje",
                    "rendered": {
                      "text": "wnProperty(a)||(b=this.h(a,\"symbol\"===typeof a?Symbol():\"__\"+a,b),void 0!==b&&Object.defineProperty(this.prototype,a,b))};J.h=function(a,b,c){return{get:function(){return this[b]},set:function(d){var e=this[a];this[b]=d;jd(this,a,e,c)},configurable:!0,enumerable:!0}};\nJ.fd=function(a){return this.ab.get(a)||id};J.finalize=function(){if(this.hasOwnProperty(\"finalized\"))return!1;this.finalized=!0;var a=Object.getPrototypeOf(this);a.finalize();void 0!==a.ig&&(this.ig=[].concat(A(a.ig)));this.ab=new Map(a.ab);this.eh=new Map;if(this.hasOwnProperty(\"properties\")){a=this.properties;var b=[].concat(A(Obje",
                      "markdown": "`wnProperty(a)||(b=this.h(a,\"symbol\"===typeof a?Symbol():\"__\"+a,b),void 0!==b&&Object.defineProperty(this.prototype,a,b))};J.h=function(a,b,c){return{get:function(){return this[b]},set:function(d){var e=this[a];this[b]=d;jd(this,a,e,c)},configurable:!0,enumerable:!0}};\nJ.fd=function(a){return this.ab.get(a)||id};J.finalize=function(){if(this.hasOwnProperty(\"finalized\"))return!1;this.finalized=!0;var a=Object.getPrototypeOf(this);a.finalize();void 0!==a.ig&&(this.ig=[].concat(A(a.ig)));this.ab=new Map(a.ab);this.eh=new Map;if(this.hasOwnProperty(\"properties\")){a=this.properties;var b=[].concat(A(Obje`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 1316,
                  "startColumn": 178,
                  "endLine": 1316,
                  "endColumn": 183,
                  "snippet": {
                    "text": "table. Use `unsafeCSS` or `css` instead.\");this.cssText=a;this.g=b}$c.prototype.toString=function(){return this.cssText};\nu.Object.defineProperties($c.prototype,{styleSheet:{configurable:!0,enumerable:!0,get:function(){var a=this.ud,b=this.g;if(Xc&&void 0===a){var c=void 0!==b&&1===b.length;c&&(a=Zc.get(b));void 0===a&&((this.ud=a=new CSSStyleSheet).replaceSync(this.cssText),c&&Zc.set(b,a))}return a}}});\nfunction ad(a,b){Xc?a.adoptedStyleSheets=b.map(function(c){return c instanceof CSSStyleSheet?c:c.styleSheet}):b.forEach(function(c){var d=document.createElement(\"style\"),e=Wc.litNonce;void 0!==e&&d",
                    "rendered": {
                      "text": "table. Use `unsafeCSS` or `css` instead.\");this.cssText=a;this.g=b}$c.prototype.toString=function(){return this.cssText};\nu.Object.defineProperties($c.prototype,{styleSheet:{configurable:!0,enumerable:!0,get:function(){var a=this.ud,b=this.g;if(Xc&&void 0===a){var c=void 0!==b&&1===b.length;c&&(a=Zc.get(b));void 0===a&&((this.ud=a=new CSSStyleSheet).replaceSync(this.cssText),c&&Zc.set(b,a))}return a}}});\nfunction ad(a,b){Xc?a.adoptedStyleSheets=b.map(function(c){return c instanceof CSSStyleSheet?c:c.styleSheet}):b.forEach(function(c){var d=document.createElement(\"style\"),e=Wc.litNonce;void 0!==e&&d",
                      "markdown": "`table. Use `unsafeCSS` or `css` instead.\");this.cssText=a;this.g=b}$c.prototype.toString=function(){return this.cssText};\nu.Object.defineProperties($c.prototype,{styleSheet:{configurable:!0,enumerable:!0,get:function(){var a=this.ud,b=this.g;if(Xc&&void 0===a){var c=void 0!==b&&1===b.length;c&&(a=Zc.get(b));void 0===a&&((this.ud=a=new CSSStyleSheet).replaceSync(this.cssText),c&&Zc.set(b,a))}return a}}});\nfunction ad(a,b){Xc?a.adoptedStyleSheets=b.map(function(c){return c instanceof CSSStyleSheet?c:c.styleSheet}):b.forEach(function(c){var d=document.createElement(\"style\"),e=Wc.litNonce;void 0!==e&&d`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 1306,
                  "startColumn": 357,
                  "endLine": 1306,
                  "endColumn": 362,
                  "snippet": {
                    "text": "===typeof c?this.dh(a):(void 0===c.ed&&(c.ed=Ic.createElement(c.rn,this.options)),c);var d;(null==(d=this.aa)?void 0:d.pf)===a?this.aa._update(b):(d=new Oc(a,this),a=d.h(this.options),d._update(b),this.fg(a),this.aa=d)};m.dh=function(a){var b=a.eb,c=Gc.get(b);if(void 0===c){var d=b.join(\"\\x00\");c=qc.get(d);void 0===c&&(c=new Ic(a),qc.set(d,c));Gc.set(b,c)}return c};\nm.uk=function(a){wc(this.aa)||(this.aa=[],this.je());var b=this.aa,c=0,d;a=z(a);for(var e=a.next();!e.done;e=a.next())e=e.value,c===b.length?b.push(d=new Pc(this.jg(uc.createComment(\"\")),this.jg(uc.createComment(\"\")),this,this.options))",
                    "rendered": {
                      "text": "===typeof c?this.dh(a):(void 0===c.ed&&(c.ed=Ic.createElement(c.rn,this.options)),c);var d;(null==(d=this.aa)?void 0:d.pf)===a?this.aa._update(b):(d=new Oc(a,this),a=d.h(this.options),d._update(b),this.fg(a),this.aa=d)};m.dh=function(a){var b=a.eb,c=Gc.get(b);if(void 0===c){var d=b.join(\"\\x00\");c=qc.get(d);void 0===c&&(c=new Ic(a),qc.set(d,c));Gc.set(b,c)}return c};\nm.uk=function(a){wc(this.aa)||(this.aa=[],this.je());var b=this.aa,c=0,d;a=z(a);for(var e=a.next();!e.done;e=a.next())e=e.value,c===b.length?b.push(d=new Pc(this.jg(uc.createComment(\"\")),this.jg(uc.createComment(\"\")),this,this.options))",
                      "markdown": "`===typeof c?this.dh(a):(void 0===c.ed&&(c.ed=Ic.createElement(c.rn,this.options)),c);var d;(null==(d=this.aa)?void 0:d.pf)===a?this.aa._update(b):(d=new Oc(a,this),a=d.h(this.options),d._update(b),this.fg(a),this.aa=d)};m.dh=function(a){var b=a.eb,c=Gc.get(b);if(void 0===c){var d=b.join(\"\\x00\");c=qc.get(d);void 0===c&&(c=new Ic(a),qc.set(d,c));Gc.set(b,c)}return c};\nm.uk=function(a){wc(this.aa)||(this.aa=[],this.je());var b=this.aa,c=0,d;a=z(a);for(var e=a.next();!e.done;e=a.next())e=e.value,c===b.length?b.push(d=new Pc(this.jg(uc.createComment(\"\")),this.jg(uc.createComment(\"\")),this,this.options))`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 1306,
                  "startColumn": 309,
                  "endLine": 1306,
                  "endColumn": 314,
                  "snippet": {
                    "text": "tion(a){var b=a.values,c=a._$litType$;a=\"number\"===typeof c?this.dh(a):(void 0===c.ed&&(c.ed=Ic.createElement(c.rn,this.options)),c);var d;(null==(d=this.aa)?void 0:d.pf)===a?this.aa._update(b):(d=new Oc(a,this),a=d.h(this.options),d._update(b),this.fg(a),this.aa=d)};m.dh=function(a){var b=a.eb,c=Gc.get(b);if(void 0===c){var d=b.join(\"\\x00\");c=qc.get(d);void 0===c&&(c=new Ic(a),qc.set(d,c));Gc.set(b,c)}return c};\nm.uk=function(a){wc(this.aa)||(this.aa=[],this.je());var b=this.aa,c=0,d;a=z(a);for(var e=a.next();!e.done;e=a.next())e=e.value,c===b.length?b.push(d=new Pc(this.jg(uc.createComment(\"\")),t",
                    "rendered": {
                      "text": "tion(a){var b=a.values,c=a._$litType$;a=\"number\"===typeof c?this.dh(a):(void 0===c.ed&&(c.ed=Ic.createElement(c.rn,this.options)),c);var d;(null==(d=this.aa)?void 0:d.pf)===a?this.aa._update(b):(d=new Oc(a,this),a=d.h(this.options),d._update(b),this.fg(a),this.aa=d)};m.dh=function(a){var b=a.eb,c=Gc.get(b);if(void 0===c){var d=b.join(\"\\x00\");c=qc.get(d);void 0===c&&(c=new Ic(a),qc.set(d,c));Gc.set(b,c)}return c};\nm.uk=function(a){wc(this.aa)||(this.aa=[],this.je());var b=this.aa,c=0,d;a=z(a);for(var e=a.next();!e.done;e=a.next())e=e.value,c===b.length?b.push(d=new Pc(this.jg(uc.createComment(\"\")),t",
                      "markdown": "`tion(a){var b=a.values,c=a._$litType$;a=\"number\"===typeof c?this.dh(a):(void 0===c.ed&&(c.ed=Ic.createElement(c.rn,this.options)),c);var d;(null==(d=this.aa)?void 0:d.pf)===a?this.aa._update(b):(d=new Oc(a,this),a=d.h(this.options),d._update(b),this.fg(a),this.aa=d)};m.dh=function(a){var b=a.eb,c=Gc.get(b);if(void 0===c){var d=b.join(\"\\x00\");c=qc.get(d);void 0===c&&(c=new Ic(a),qc.set(d,c));Gc.set(b,c)}return c};\nm.uk=function(a){wc(this.aa)||(this.aa=[],this.je());var b=this.aa,c=0,d;a=z(a);for(var e=a.next();!e.done;e=a.next())e=e.value,c===b.length?b.push(d=new Pc(this.jg(uc.createComment(\"\")),t`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 1274,
                  "startColumn": 56,
                  "endLine": 1274,
                  "endColumn": 61,
                  "snippet": {
                    "text": "00c\\u200d\\u203f-\\u2040\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\udfff\\uf900-\\ufdcf\\ufdf0-\\ufffd]*-[\\\\-a-z.0-9_\\u00b7\\u00c0-\\u00d6\\u00d8-\\u00f6\\u00f8-\\u037d\\u200c\\u200d\\u203f-\\u2040\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\udfff\\uf900-\\ufdcf\\ufdf0-\\ufffd]*$\");\nfunction Qb(a,b){var c=window.customElements;return c&&c.get(a)||!0===Ob[a]?2:\"HTMLUnknownElement\"===b.name?1:\"HTMLElement\"===b.name&&Pb.test(a)?3:0};/*\n\n Copyright 2020 Google LLC\n SPDX-License-Identifier: BSD-3-Clause\n*/\nfunction Rb(a,b){switch(b){case \"innerHTML\":return 1===Sb(a)?2:null;case \"textContent\":return a=Sb(a),1===a||6===a?1:null;default:var c,d;",
                    "rendered": {
                      "text": "00c\\u200d\\u203f-\\u2040\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\udfff\\uf900-\\ufdcf\\ufdf0-\\ufffd]*-[\\\\-a-z.0-9_\\u00b7\\u00c0-\\u00d6\\u00d8-\\u00f6\\u00f8-\\u037d\\u200c\\u200d\\u203f-\\u2040\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\udfff\\uf900-\\ufdcf\\ufdf0-\\ufffd]*$\");\nfunction Qb(a,b){var c=window.customElements;return c&&c.get(a)||!0===Ob[a]?2:\"HTMLUnknownElement\"===b.name?1:\"HTMLElement\"===b.name&&Pb.test(a)?3:0};/*\n\n Copyright 2020 Google LLC\n SPDX-License-Identifier: BSD-3-Clause\n*/\nfunction Rb(a,b){switch(b){case \"innerHTML\":return 1===Sb(a)?2:null;case \"textContent\":return a=Sb(a),1===a||6===a?1:null;default:var c,d;",
                      "markdown": "`00c\\u200d\\u203f-\\u2040\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\udfff\\uf900-\\ufdcf\\ufdf0-\\ufffd]*-[\\\\-a-z.0-9_\\u00b7\\u00c0-\\u00d6\\u00d8-\\u00f6\\u00f8-\\u037d\\u200c\\u200d\\u203f-\\u2040\\u2070-\\u218f\\u2c00-\\u2fef\\u3001-\\udfff\\uf900-\\ufdcf\\ufdf0-\\ufffd]*$\");\nfunction Qb(a,b){var c=window.customElements;return c&&c.get(a)||!0===Ob[a]?2:\"HTMLUnknownElement\"===b.name?1:\"HTMLElement\"===b.name&&Pb.test(a)?3:0};/*\n\n Copyright 2020 Google LLC\n SPDX-License-Identifier: BSD-3-Clause\n*/\nfunction Rb(a,b){switch(b){case \"innerHTML\":return 1===Sb(a)?2:null;case \"textContent\":return a=Sb(a),1===a||6===a?1:null;default:var c,d;`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 1243,
                  "startColumn": 198,
                  "endLine": 1243,
                  "endColumn": 203,
                  "snippet": {
                    "text": "upport=ib);var kb=\"\";if(window.Symbol){var lb=Symbol();\"symbol\"!==typeof lb&&(kb=Object.keys(lb)[0])}\nvar mb=\"\"!==kb,nb=mb?function(a){return null!=a&&void 0!==a[kb]}:function(){return!1};if(mb&&!window.Symbol.for){var ob=new Map;window.Symbol.for=function(a){ob.has(a)||ob.set(a,Symbol(a));return ob.get(a)}};function pb(a){if(void 0!==window.ShadyCSS&&(!window.ShadyCSS.nativeShadow||window.ShadyCSS.ApplyShim)){a=a.ReactiveElement.prototype;window.ShadyDOM&&window.ShadyDOM.inUse&&!0===window.ShadyDOM.noPatch&&window.ShadyDOM.patchElementProto(a);var b=a.zb;a.zb=function(){var e=this.localName;if(win",
                    "rendered": {
                      "text": "upport=ib);var kb=\"\";if(window.Symbol){var lb=Symbol();\"symbol\"!==typeof lb&&(kb=Object.keys(lb)[0])}\nvar mb=\"\"!==kb,nb=mb?function(a){return null!=a&&void 0!==a[kb]}:function(){return!1};if(mb&&!window.Symbol.for){var ob=new Map;window.Symbol.for=function(a){ob.has(a)||ob.set(a,Symbol(a));return ob.get(a)}};function pb(a){if(void 0!==window.ShadyCSS&&(!window.ShadyCSS.nativeShadow||window.ShadyCSS.ApplyShim)){a=a.ReactiveElement.prototype;window.ShadyDOM&&window.ShadyDOM.inUse&&!0===window.ShadyDOM.noPatch&&window.ShadyDOM.patchElementProto(a);var b=a.zb;a.zb=function(){var e=this.localName;if(win",
                      "markdown": "`upport=ib);var kb=\"\";if(window.Symbol){var lb=Symbol();\"symbol\"!==typeof lb&&(kb=Object.keys(lb)[0])}\nvar mb=\"\"!==kb,nb=mb?function(a){return null!=a&&void 0!==a[kb]}:function(){return!1};if(mb&&!window.Symbol.for){var ob=new Map;window.Symbol.for=function(a){ob.has(a)||ob.set(a,Symbol(a));return ob.get(a)}};function pb(a){if(void 0!==window.ShadyCSS&&(!window.ShadyCSS.nativeShadow||window.ShadyCSS.ApplyShim)){a=a.ReactiveElement.prototype;window.ShadyDOM&&window.ShadyDOM.inUse&&!0===window.ShadyDOM.noPatch&&window.ShadyDOM.patchElementProto(a);var b=a.zb;a.zb=function(){var e=this.localName;if(win`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 1242,
                  "startColumn": 245,
                  "endLine": 1242,
                  "endColumn": 250,
                  "snippet": {
                    "text": "var I;if(null==(I=window.ShadyCSS)?0:I.nativeShadow)I=\np.content.querySelector(\"style\"),null!==I&&k.appendChild(I.cloneNode(!0));r.insertBefore(k,B);this.hb=t;this.kc=B}else n.call(this,p,q)};b.dh=function(p){var q,r=null==(q=this.options)?void 0:q.scope;q=g.get(r);void 0===q&&g.set(r,q=new Map);r=q.get(p.eb);void 0===r&&q.set(p.eb,r=new a(p,this.options));return r}}}var jb;null!=(jb=window).litHtmlPolyfillSupport||(jb.litHtmlPolyfillSupport=ib);var kb=\"\";if(window.Symbol){var lb=Symbol();\"symbol\"!==typeof lb&&(kb=Object.keys(lb)[0])}\nvar mb=\"\"!==kb,nb=mb?function(a){return null!=a&&void 0!==a[kb]}",
                    "rendered": {
                      "text": "var I;if(null==(I=window.ShadyCSS)?0:I.nativeShadow)I=\np.content.querySelector(\"style\"),null!==I&&k.appendChild(I.cloneNode(!0));r.insertBefore(k,B);this.hb=t;this.kc=B}else n.call(this,p,q)};b.dh=function(p){var q,r=null==(q=this.options)?void 0:q.scope;q=g.get(r);void 0===q&&g.set(r,q=new Map);r=q.get(p.eb);void 0===r&&q.set(p.eb,r=new a(p,this.options));return r}}}var jb;null!=(jb=window).litHtmlPolyfillSupport||(jb.litHtmlPolyfillSupport=ib);var kb=\"\";if(window.Symbol){var lb=Symbol();\"symbol\"!==typeof lb&&(kb=Object.keys(lb)[0])}\nvar mb=\"\"!==kb,nb=mb?function(a){return null!=a&&void 0!==a[kb]}",
                      "markdown": "`var I;if(null==(I=window.ShadyCSS)?0:I.nativeShadow)I=\np.content.querySelector(\"style\"),null!==I&&k.appendChild(I.cloneNode(!0));r.insertBefore(k,B);this.hb=t;this.kc=B}else n.call(this,p,q)};b.dh=function(p){var q,r=null==(q=this.options)?void 0:q.scope;q=g.get(r);void 0===q&&g.set(r,q=new Map);r=q.get(p.eb);void 0===r&&q.set(p.eb,r=new a(p,this.options));return r}}}var jb;null!=(jb=window).litHtmlPolyfillSupport||(jb.litHtmlPolyfillSupport=ib);var kb=\"\";if(window.Symbol){var lb=Symbol();\"symbol\"!==typeof lb&&(kb=Object.keys(lb)[0])}\nvar mb=\"\"!==kb,nb=mb?function(a){return null!=a&&void 0!==a[kb]}`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 1242,
                  "startColumn": 203,
                  "endLine": 1242,
                  "endColumn": 208,
                  "snippet": {
                    "text": ".content.appendChild(v));k.removeChild(l);var I;if(null==(I=window.ShadyCSS)?0:I.nativeShadow)I=\np.content.querySelector(\"style\"),null!==I&&k.appendChild(I.cloneNode(!0));r.insertBefore(k,B);this.hb=t;this.kc=B}else n.call(this,p,q)};b.dh=function(p){var q,r=null==(q=this.options)?void 0:q.scope;q=g.get(r);void 0===q&&g.set(r,q=new Map);r=q.get(p.eb);void 0===r&&q.set(p.eb,r=new a(p,this.options));return r}}}var jb;null!=(jb=window).litHtmlPolyfillSupport||(jb.litHtmlPolyfillSupport=ib);var kb=\"\";if(window.Symbol){var lb=Symbol();\"symbol\"!==typeof lb&&(kb=Object.keys(lb)[0])}\nvar mb=\"\"!==kb,nb=mb?f",
                    "rendered": {
                      "text": ".content.appendChild(v));k.removeChild(l);var I;if(null==(I=window.ShadyCSS)?0:I.nativeShadow)I=\np.content.querySelector(\"style\"),null!==I&&k.appendChild(I.cloneNode(!0));r.insertBefore(k,B);this.hb=t;this.kc=B}else n.call(this,p,q)};b.dh=function(p){var q,r=null==(q=this.options)?void 0:q.scope;q=g.get(r);void 0===q&&g.set(r,q=new Map);r=q.get(p.eb);void 0===r&&q.set(p.eb,r=new a(p,this.options));return r}}}var jb;null!=(jb=window).litHtmlPolyfillSupport||(jb.litHtmlPolyfillSupport=ib);var kb=\"\";if(window.Symbol){var lb=Symbol();\"symbol\"!==typeof lb&&(kb=Object.keys(lb)[0])}\nvar mb=\"\"!==kb,nb=mb?f",
                      "markdown": "`.content.appendChild(v));k.removeChild(l);var I;if(null==(I=window.ShadyCSS)?0:I.nativeShadow)I=\np.content.querySelector(\"style\"),null!==I&&k.appendChild(I.cloneNode(!0));r.insertBefore(k,B);this.hb=t;this.kc=B}else n.call(this,p,q)};b.dh=function(p){var q,r=null==(q=this.options)?void 0:q.scope;q=g.get(r);void 0===q&&g.set(r,q=new Map);r=q.get(p.eb);void 0===r&&q.set(p.eb,r=new a(p,this.options));return r}}}var jb;null!=(jb=window).litHtmlPolyfillSupport||(jb.litHtmlPolyfillSupport=ib);var kb=\"\";if(window.Symbol){var lb=Symbol();\"symbol\"!==typeof lb&&(kb=Object.keys(lb)[0])}\nvar mb=\"\"!==kb,nb=mb?f`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 1239,
                  "startColumn": 270,
                  "endLine": 1239,
                  "endColumn": 275,
                  "snippet": {
                    "text": "}};var gb=new Set,hb=new Map;\nfunction ib(a,b){if(void 0!==window.ShadyCSS&&(!window.ShadyCSS.nativeShadow||window.ShadyCSS.ApplyShim)){var c,d,e=(null==(c=window.ShadyDOM)?0:c.inUse)&&!0===(null==(d=window.ShadyDOM)?void 0:d.noPatch)?window.ShadyDOM.wrap:function(p){return p},f=function(p){var q=hb.get(p);void 0===q&&hb.set(p,q=[]);return q},g=new Map,h=a.createElement;a.createElement=function(p,q){p=h.call(a,p,q);q=null==q?void 0:q.scope;if(void 0!==q&&(window.ShadyCSS.nativeShadow||window.ShadyCSS.prepareTemplateDom(p,q),void 0!==\nq&&!gb.has(q))){q=f(q);var r=p.content.querySelectorAll(\"style\");",
                    "rendered": {
                      "text": "}};var gb=new Set,hb=new Map;\nfunction ib(a,b){if(void 0!==window.ShadyCSS&&(!window.ShadyCSS.nativeShadow||window.ShadyCSS.ApplyShim)){var c,d,e=(null==(c=window.ShadyDOM)?0:c.inUse)&&!0===(null==(d=window.ShadyDOM)?void 0:d.noPatch)?window.ShadyDOM.wrap:function(p){return p},f=function(p){var q=hb.get(p);void 0===q&&hb.set(p,q=[]);return q},g=new Map,h=a.createElement;a.createElement=function(p,q){p=h.call(a,p,q);q=null==q?void 0:q.scope;if(void 0!==q&&(window.ShadyCSS.nativeShadow||window.ShadyCSS.prepareTemplateDom(p,q),void 0!==\nq&&!gb.has(q))){q=f(q);var r=p.content.querySelectorAll(\"style\");",
                      "markdown": "`}};var gb=new Set,hb=new Map;\nfunction ib(a,b){if(void 0!==window.ShadyCSS&&(!window.ShadyCSS.nativeShadow||window.ShadyCSS.ApplyShim)){var c,d,e=(null==(c=window.ShadyDOM)?0:c.inUse)&&!0===(null==(d=window.ShadyDOM)?void 0:d.noPatch)?window.ShadyDOM.wrap:function(p){return p},f=function(p){var q=hb.get(p);void 0===q&&hb.set(p,q=[]);return q},g=new Map,h=a.createElement;a.createElement=function(p,q){p=h.call(a,p,q);q=null==q?void 0:q.scope;if(void 0!==q&&(window.ShadyCSS.nativeShadow||window.ShadyCSS.prepareTemplateDom(p,q),void 0!==\nq&&!gb.has(q))){q=f(q);var r=p.content.querySelectorAll(\"style\");`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 1195,
                  "startColumn": 327,
                  "endLine": 1195,
                  "endColumn": 332,
                  "snippet": {
                    "text": "n e(h){this.h={};this.g=b();this.size=0;if(h){h=z(h);for(var k;!(k=h.next()).done;)k=k.value,this.set(k[0],k[1])}}if(function(){if(!a||\"function\"!=typeof a||!a.prototype.entries||\"function\"!=typeof Object.seal)return!1;try{var h=Object.seal({x:4}),k=new a(z([[h,\"s\"]]));if(\"s\"!=k.get(h)||1!=k.size||k.get({x:4})||k.set({x:4},\"t\")!=k||2!=k.size)return!1;var l=k.entries(),n=l.next();if(n.done||n.value[0]!=h||\"s\"!=n.value[1])return!1;n=l.next();return n.done||4!=n.value[0].x||\n\"t\"!=n.value[1]||!l.next().done?!1:!0}catch(p){return!1}}())return a;var f=new WeakMap;e.prototype.set=function(h,k){h=0===h?0:h",
                    "rendered": {
                      "text": "n e(h){this.h={};this.g=b();this.size=0;if(h){h=z(h);for(var k;!(k=h.next()).done;)k=k.value,this.set(k[0],k[1])}}if(function(){if(!a||\"function\"!=typeof a||!a.prototype.entries||\"function\"!=typeof Object.seal)return!1;try{var h=Object.seal({x:4}),k=new a(z([[h,\"s\"]]));if(\"s\"!=k.get(h)||1!=k.size||k.get({x:4})||k.set({x:4},\"t\")!=k||2!=k.size)return!1;var l=k.entries(),n=l.next();if(n.done||n.value[0]!=h||\"s\"!=n.value[1])return!1;n=l.next();return n.done||4!=n.value[0].x||\n\"t\"!=n.value[1]||!l.next().done?!1:!0}catch(p){return!1}}())return a;var f=new WeakMap;e.prototype.set=function(h,k){h=0===h?0:h",
                      "markdown": "`n e(h){this.h={};this.g=b();this.size=0;if(h){h=z(h);for(var k;!(k=h.next()).done;)k=k.value,this.set(k[0],k[1])}}if(function(){if(!a||\"function\"!=typeof a||!a.prototype.entries||\"function\"!=typeof Object.seal)return!1;try{var h=Object.seal({x:4}),k=new a(z([[h,\"s\"]]));if(\"s\"!=k.get(h)||1!=k.size||k.get({x:4})||k.set({x:4},\"t\")!=k||2!=k.size)return!1;var l=k.entries(),n=l.next();if(n.done||n.value[0]!=h||\"s\"!=n.value[1])return!1;n=l.next();return n.done||4!=n.value[0].x||\n\"t\"!=n.value[1]||!l.next().done?!1:!0}catch(p){return!1}}())return a;var f=new WeakMap;e.prototype.set=function(h,k){h=0===h?0:h`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 1195,
                  "startColumn": 306,
                  "endLine": 1195,
                  "endColumn": 311,
                  "snippet": {
                    "text": "-1,la:void 0}}function e(h){this.h={};this.g=b();this.size=0;if(h){h=z(h);for(var k;!(k=h.next()).done;)k=k.value,this.set(k[0],k[1])}}if(function(){if(!a||\"function\"!=typeof a||!a.prototype.entries||\"function\"!=typeof Object.seal)return!1;try{var h=Object.seal({x:4}),k=new a(z([[h,\"s\"]]));if(\"s\"!=k.get(h)||1!=k.size||k.get({x:4})||k.set({x:4},\"t\")!=k||2!=k.size)return!1;var l=k.entries(),n=l.next();if(n.done||n.value[0]!=h||\"s\"!=n.value[1])return!1;n=l.next();return n.done||4!=n.value[0].x||\n\"t\"!=n.value[1]||!l.next().done?!1:!0}catch(p){return!1}}())return a;var f=new WeakMap;e.prototype.set=func",
                    "rendered": {
                      "text": "-1,la:void 0}}function e(h){this.h={};this.g=b();this.size=0;if(h){h=z(h);for(var k;!(k=h.next()).done;)k=k.value,this.set(k[0],k[1])}}if(function(){if(!a||\"function\"!=typeof a||!a.prototype.entries||\"function\"!=typeof Object.seal)return!1;try{var h=Object.seal({x:4}),k=new a(z([[h,\"s\"]]));if(\"s\"!=k.get(h)||1!=k.size||k.get({x:4})||k.set({x:4},\"t\")!=k||2!=k.size)return!1;var l=k.entries(),n=l.next();if(n.done||n.value[0]!=h||\"s\"!=n.value[1])return!1;n=l.next();return n.done||4!=n.value[0].x||\n\"t\"!=n.value[1]||!l.next().done?!1:!0}catch(p){return!1}}())return a;var f=new WeakMap;e.prototype.set=func",
                      "markdown": "`-1,la:void 0}}function e(h){this.h={};this.g=b();this.size=0;if(h){h=z(h);for(var k;!(k=h.next()).done;)k=k.value,this.set(k[0],k[1])}}if(function(){if(!a||\"function\"!=typeof a||!a.prototype.entries||\"function\"!=typeof Object.seal)return!1;try{var h=Object.seal({x:4}),k=new a(z([[h,\"s\"]]));if(\"s\"!=k.get(h)||1!=k.size||k.get({x:4})||k.set({x:4},\"t\")!=k||2!=k.size)return!1;var l=k.entries(),n=l.next();if(n.done||n.value[0]!=h||\"s\"!=n.value[1])return!1;n=l.next();return n.done||4!=n.value[0].x||\n\"t\"!=n.value[1]||!l.next().done?!1:!0}catch(p){return!1}}())return a;var f=new WeakMap;e.prototype.set=func`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 1194,
                  "startColumn": 317,
                  "endLine": 1194,
                  "endColumn": 322,
                  "snippet": {
                    "text": "a){function b(){var h={};return h.mb=h.next=h.head=h}function c(h,k){var l=h.g;return da(function(){if(l){for(;l.head!=h.g;)l=l.mb;for(;l.next!=l.head;)return l=l.next,{done:!1,value:k(l)};l=null}return{done:!0,value:void 0}})}function d(h,k){var l=k&&typeof k;\"object\"==l||\"function\"==l?f.has(k)?l=f.get(k):(l=\"\"+ ++g,f.set(k,l)):l=\"p_\"+k;var n=h.h[l];if(n&&C(h.h,l))for(h=0;h<n.length;h++){var p=n[h];if(k!==k&&p.key!==p.key||k===p.key)return{id:l,list:n,index:h,la:p}}return{id:l,list:n,\nindex:-1,la:void 0}}function e(h){this.h={};this.g=b();this.size=0;if(h){h=z(h);for(var k;!(k=h.next()).done;)k=k.",
                    "rendered": {
                      "text": "a){function b(){var h={};return h.mb=h.next=h.head=h}function c(h,k){var l=h.g;return da(function(){if(l){for(;l.head!=h.g;)l=l.mb;for(;l.next!=l.head;)return l=l.next,{done:!1,value:k(l)};l=null}return{done:!0,value:void 0}})}function d(h,k){var l=k&&typeof k;\"object\"==l||\"function\"==l?f.has(k)?l=f.get(k):(l=\"\"+ ++g,f.set(k,l)):l=\"p_\"+k;var n=h.h[l];if(n&&C(h.h,l))for(h=0;h<n.length;h++){var p=n[h];if(k!==k&&p.key!==p.key||k===p.key)return{id:l,list:n,index:h,la:p}}return{id:l,list:n,\nindex:-1,la:void 0}}function e(h){this.h={};this.g=b();this.size=0;if(h){h=z(h);for(var k;!(k=h.next()).done;)k=k.",
                      "markdown": "`a){function b(){var h={};return h.mb=h.next=h.head=h}function c(h,k){var l=h.g;return da(function(){if(l){for(;l.head!=h.g;)l=l.mb;for(;l.next!=l.head;)return l=l.next,{done:!1,value:k(l)};l=null}return{done:!0,value:void 0}})}function d(h,k){var l=k&&typeof k;\"object\"==l||\"function\"==l?f.has(k)?l=f.get(k):(l=\"\"+ ++g,f.set(k,l)):l=\"p_\"+k;var n=h.h[l];if(n&&C(h.h,l))for(h=0;h<n.length;h++){var p=n[h];if(k!==k&&p.key!==p.key||k===p.key)return{id:l,list:n,index:h,la:p}}return{id:l,list:n,\nindex:-1,la:void 0}}function e(h){this.h={};this.g=b();this.size=0;if(h){h=z(h);for(var k;!(k=h.next()).done;)k=k.`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 1192,
                  "startColumn": 104,
                  "endLine": 1192,
                  "endColumn": 109,
                  "snippet": {
                    "text": "l=Object[k];l&&(Object[k]=function(n){if(n instanceof c)return n;Object.isExtensible(n)&&e(n);return l(n)})}if(function(){if(!a||!Object.seal)return!1;try{var k=Object.seal({}),l=Object.seal({}),\nn=new a([[k,2],[l,3]]);if(2!=n.get(k)||3!=n.get(l))return!1;n.delete(k);n.set(l,4);return!n.has(k)&&4==n.get(l)}catch(p){return!1}}())return a;var g=\"$jscomp_hidden_\"+Math.random();f(\"freeze\");f(\"preventExtensions\");f(\"seal\");var h=0;b.prototype.set=function(k,l){if(!d(k))throw Error(\"Invalid WeakMap key\");e(k);if(!C(k,g))throw Error(\"WeakMap key fail: \"+k);k[g][this.g]=l;return this};b.prototype.get=funct",
                    "rendered": {
                      "text": "l=Object[k];l&&(Object[k]=function(n){if(n instanceof c)return n;Object.isExtensible(n)&&e(n);return l(n)})}if(function(){if(!a||!Object.seal)return!1;try{var k=Object.seal({}),l=Object.seal({}),\nn=new a([[k,2],[l,3]]);if(2!=n.get(k)||3!=n.get(l))return!1;n.delete(k);n.set(l,4);return!n.has(k)&&4==n.get(l)}catch(p){return!1}}())return a;var g=\"$jscomp_hidden_\"+Math.random();f(\"freeze\");f(\"preventExtensions\");f(\"seal\");var h=0;b.prototype.set=function(k,l){if(!d(k))throw Error(\"Invalid WeakMap key\");e(k);if(!C(k,g))throw Error(\"WeakMap key fail: \"+k);k[g][this.g]=l;return this};b.prototype.get=funct",
                      "markdown": "`l=Object[k];l&&(Object[k]=function(n){if(n instanceof c)return n;Object.isExtensible(n)&&e(n);return l(n)})}if(function(){if(!a||!Object.seal)return!1;try{var k=Object.seal({}),l=Object.seal({}),\nn=new a([[k,2],[l,3]]);if(2!=n.get(k)||3!=n.get(l))return!1;n.delete(k);n.set(l,4);return!n.has(k)&&4==n.get(l)}catch(p){return!1}}())return a;var g=\"$jscomp_hidden_\"+Math.random();f(\"freeze\");f(\"preventExtensions\");f(\"seal\");var h=0;b.prototype.set=function(k,l){if(!d(k))throw Error(\"Invalid WeakMap key\");e(k);if(!C(k,g))throw Error(\"WeakMap key fail: \"+k);k[g][this.g]=l;return this};b.prototype.get=funct`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 1192,
                  "startColumn": 43,
                  "endLine": 1192,
                  "endColumn": 48,
                  "snippet": {
                    "text": "if(!C(k,g)){var l=new c;ba(k,g,{value:l})}}function f(k){var l=Object[k];l&&(Object[k]=function(n){if(n instanceof c)return n;Object.isExtensible(n)&&e(n);return l(n)})}if(function(){if(!a||!Object.seal)return!1;try{var k=Object.seal({}),l=Object.seal({}),\nn=new a([[k,2],[l,3]]);if(2!=n.get(k)||3!=n.get(l))return!1;n.delete(k);n.set(l,4);return!n.has(k)&&4==n.get(l)}catch(p){return!1}}())return a;var g=\"$jscomp_hidden_\"+Math.random();f(\"freeze\");f(\"preventExtensions\");f(\"seal\");var h=0;b.prototype.set=function(k,l){if(!d(k))throw Error(\"Invalid WeakMap key\");e(k);if(!C(k,g))throw Error(\"WeakMap key",
                    "rendered": {
                      "text": "if(!C(k,g)){var l=new c;ba(k,g,{value:l})}}function f(k){var l=Object[k];l&&(Object[k]=function(n){if(n instanceof c)return n;Object.isExtensible(n)&&e(n);return l(n)})}if(function(){if(!a||!Object.seal)return!1;try{var k=Object.seal({}),l=Object.seal({}),\nn=new a([[k,2],[l,3]]);if(2!=n.get(k)||3!=n.get(l))return!1;n.delete(k);n.set(l,4);return!n.has(k)&&4==n.get(l)}catch(p){return!1}}())return a;var g=\"$jscomp_hidden_\"+Math.random();f(\"freeze\");f(\"preventExtensions\");f(\"seal\");var h=0;b.prototype.set=function(k,l){if(!d(k))throw Error(\"Invalid WeakMap key\");e(k);if(!C(k,g))throw Error(\"WeakMap key",
                      "markdown": "`if(!C(k,g)){var l=new c;ba(k,g,{value:l})}}function f(k){var l=Object[k];l&&(Object[k]=function(n){if(n instanceof c)return n;Object.isExtensible(n)&&e(n);return l(n)})}if(function(){if(!a||!Object.seal)return!1;try{var k=Object.seal({}),l=Object.seal({}),\nn=new a([[k,2],[l,3]]);if(2!=n.get(k)||3!=n.get(l))return!1;n.delete(k);n.set(l,4);return!n.has(k)&&4==n.get(l)}catch(p){return!1}}())return a;var g=\"$jscomp_hidden_\"+Math.random();f(\"freeze\");f(\"preventExtensions\");f(\"seal\");var h=0;b.prototype.set=function(k,l){if(!d(k))throw Error(\"Invalid WeakMap key\");e(k);if(!C(k,g))throw Error(\"WeakMap key`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 1192,
                  "startColumn": 30,
                  "endLine": 1192,
                  "endColumn": 35,
                  "snippet": {
                    "text": "unction e(k){if(!C(k,g)){var l=new c;ba(k,g,{value:l})}}function f(k){var l=Object[k];l&&(Object[k]=function(n){if(n instanceof c)return n;Object.isExtensible(n)&&e(n);return l(n)})}if(function(){if(!a||!Object.seal)return!1;try{var k=Object.seal({}),l=Object.seal({}),\nn=new a([[k,2],[l,3]]);if(2!=n.get(k)||3!=n.get(l))return!1;n.delete(k);n.set(l,4);return!n.has(k)&&4==n.get(l)}catch(p){return!1}}())return a;var g=\"$jscomp_hidden_\"+Math.random();f(\"freeze\");f(\"preventExtensions\");f(\"seal\");var h=0;b.prototype.set=function(k,l){if(!d(k))throw Error(\"Invalid WeakMap key\");e(k);if(!C(k,g))throw Error",
                    "rendered": {
                      "text": "unction e(k){if(!C(k,g)){var l=new c;ba(k,g,{value:l})}}function f(k){var l=Object[k];l&&(Object[k]=function(n){if(n instanceof c)return n;Object.isExtensible(n)&&e(n);return l(n)})}if(function(){if(!a||!Object.seal)return!1;try{var k=Object.seal({}),l=Object.seal({}),\nn=new a([[k,2],[l,3]]);if(2!=n.get(k)||3!=n.get(l))return!1;n.delete(k);n.set(l,4);return!n.has(k)&&4==n.get(l)}catch(p){return!1}}())return a;var g=\"$jscomp_hidden_\"+Math.random();f(\"freeze\");f(\"preventExtensions\");f(\"seal\");var h=0;b.prototype.set=function(k,l){if(!d(k))throw Error(\"Invalid WeakMap key\");e(k);if(!C(k,g))throw Error",
                      "markdown": "`unction e(k){if(!C(k,g)){var l=new c;ba(k,g,{value:l})}}function f(k){var l=Object[k];l&&(Object[k]=function(n){if(n instanceof c)return n;Object.isExtensible(n)&&e(n);return l(n)})}if(function(){if(!a||!Object.seal)return!1;try{var k=Object.seal({}),l=Object.seal({}),\nn=new a([[k,2],[l,3]]);if(2!=n.get(k)||3!=n.get(l))return!1;n.delete(k);n.set(l,4);return!n.has(k)&&4==n.get(l)}catch(p){return!1}}())return a;var g=\"$jscomp_hidden_\"+Math.random();f(\"freeze\");f(\"preventExtensions\");f(\"seal\");var h=0;b.prototype.set=function(k,l){if(!d(k))throw Error(\"Invalid WeakMap key\");e(k);if(!C(k,g))throw Error`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 990,
                  "startColumn": 216,
                  "endLine": 990,
                  "endColumn": 221,
                  "snippet": {
                    "text": "eof SVGElement&&(y=a.pop());var l=x.apply(this,a),m=w.apply(this,a);a=v.apply(this,\na);var p=e(),q=z.length,u=document.documentElement.scrollTop||r.scrollTop,B=document.documentElement.scrollLeft||r.scrollLeft;for(p.html(l).style(\"opacity\",1).style(\"pointer-events\",\"all\");q--;)p.classed(z[q],!1);l=A.get(a).apply(this);p.classed(a,!0).style(\"top\",l.top+m[0]+u+\"px\").style(\"left\",l.left+m[1]+B+\"px\");return c};c.hide=function(){e().style(\"opacity\",0).style(\"pointer-events\",\"none\");return c};c.attr=function(a,l){if(2>arguments.length&&\"string\"===typeof a)return e().attr(a);var m=Array.prototype.slice.ca",
                    "rendered": {
                      "text": "eof SVGElement&&(y=a.pop());var l=x.apply(this,a),m=w.apply(this,a);a=v.apply(this,\na);var p=e(),q=z.length,u=document.documentElement.scrollTop||r.scrollTop,B=document.documentElement.scrollLeft||r.scrollLeft;for(p.html(l).style(\"opacity\",1).style(\"pointer-events\",\"all\");q--;)p.classed(z[q],!1);l=A.get(a).apply(this);p.classed(a,!0).style(\"top\",l.top+m[0]+u+\"px\").style(\"left\",l.left+m[1]+B+\"px\");return c};c.hide=function(){e().style(\"opacity\",0).style(\"pointer-events\",\"none\");return c};c.attr=function(a,l){if(2>arguments.length&&\"string\"===typeof a)return e().attr(a);var m=Array.prototype.slice.ca",
                      "markdown": "`eof SVGElement&&(y=a.pop());var l=x.apply(this,a),m=w.apply(this,a);a=v.apply(this,\na);var p=e(),q=z.length,u=document.documentElement.scrollTop||r.scrollTop,B=document.documentElement.scrollLeft||r.scrollLeft;for(p.html(l).style(\"opacity\",1).style(\"pointer-events\",\"all\");q--;)p.classed(z[q],!1);l=A.get(a).apply(this);p.classed(a,!0).style(\"top\",l.top+m[0]+u+\"px\").style(\"left\",l.left+m[1]+B+\"px\");return c};c.hide=function(){e().style(\"opacity\",0).style(\"pointer-events\",\"none\");return c};c.attr=function(a,l){if(2>arguments.length&&\"string\"===typeof a)return e().attr(a);var m=Array.prototype.slice.ca`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 880,
                  "startColumn": 406,
                  "endLine": 880,
                  "endColumn": 411,
                  "snippet": {
                    "text": " arguments.length?(A=+H,z):A},alphaDecay:function(H){return arguments.length?(C=+H,z):+C},alphaTarget:function(H){return arguments.length?(G=+H,z):G},velocityDecay:function(H){return arguments.length?(O=1-H,z):1-O},force:function(H,L){return 1<arguments.length?(null==L?S.remove(H):S.set(H,t(L)),z):S.get(H)},find:function(H,L,U){var M,X=f.length;U=null==U?Infinity:U*U;for(M=0;M<X;++M){var Y=f[M];\nvar W=H-Y.x;var ba=L-Y.y;W=W*W+ba*ba;if(W<U){var aa=Y;U=W}}return aa},on:function(H,L){return 1<arguments.length?(K.on(H,L),z):K.on(H)}}};d3.forceX=function(f){function n(A){for(var C=0,G=t.length,O;C<G;++C",
                    "rendered": {
                      "text": " arguments.length?(A=+H,z):A},alphaDecay:function(H){return arguments.length?(C=+H,z):+C},alphaTarget:function(H){return arguments.length?(G=+H,z):G},velocityDecay:function(H){return arguments.length?(O=1-H,z):1-O},force:function(H,L){return 1<arguments.length?(null==L?S.remove(H):S.set(H,t(L)),z):S.get(H)},find:function(H,L,U){var M,X=f.length;U=null==U?Infinity:U*U;for(M=0;M<X;++M){var Y=f[M];\nvar W=H-Y.x;var ba=L-Y.y;W=W*W+ba*ba;if(W<U){var aa=Y;U=W}}return aa},on:function(H,L){return 1<arguments.length?(K.on(H,L),z):K.on(H)}}};d3.forceX=function(f){function n(A){for(var C=0,G=t.length,O;C<G;++C",
                      "markdown": "` arguments.length?(A=+H,z):A},alphaDecay:function(H){return arguments.length?(C=+H,z):+C},alphaTarget:function(H){return arguments.length?(G=+H,z):G},velocityDecay:function(H){return arguments.length?(O=1-H,z):1-O},force:function(H,L){return 1<arguments.length?(null==L?S.remove(H):S.set(H,t(L)),z):S.get(H)},find:function(H,L,U){var M,X=f.length;U=null==U?Infinity:U*U;for(M=0;M<X;++M){var Y=f[M];\nvar W=H-Y.x;var ba=L-Y.y;W=W*W+ba*ba;if(W<U){var aa=Y;U=W}}return aa},on:function(H,L){return 1<arguments.length?(K.on(H,L),z):K.on(H)}}};d3.forceX=function(f){function n(A){for(var C=0,G=t.length,O;C<G;++C`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 855,
                  "startColumn": 374,
                  "endLine": 855,
                  "endColumn": 379,
                  "snippet": {
                    "text": "f):n};f.target=function(A){return arguments.length?(u=A,f):u};f.context=function(A){return arguments.length?(D=null==A?null:A,f):D};return f};d3.nest=function(){function f(A,C,G,O){if(C>=u.length)return null!=t&&A.sort(t),null!=z?z(A):A;for(var S=-1,E=A.length,K=u[C++],H,L,U=rb(),M,X=G();++S<E;)(M=U.get(H=K(L=A[S])+\"\"))?M.push(L):U.set(H,[L]);U.each(function(Y,W){O(X,W,f(Y,C,G,O))});return X}function n(A,C){if(++C>u.length)return A;\nvar G=r[C-1];if(null!=z&&C>=u.length)var O=A.entries();else O=[],A.each(function(S,E){O.push({key:E,values:n(S,C)})});return null!=G?O.sort(function(S,E){return G(S.key",
                    "rendered": {
                      "text": "f):n};f.target=function(A){return arguments.length?(u=A,f):u};f.context=function(A){return arguments.length?(D=null==A?null:A,f):D};return f};d3.nest=function(){function f(A,C,G,O){if(C>=u.length)return null!=t&&A.sort(t),null!=z?z(A):A;for(var S=-1,E=A.length,K=u[C++],H,L,U=rb(),M,X=G();++S<E;)(M=U.get(H=K(L=A[S])+\"\"))?M.push(L):U.set(H,[L]);U.each(function(Y,W){O(X,W,f(Y,C,G,O))});return X}function n(A,C){if(++C>u.length)return A;\nvar G=r[C-1];if(null!=z&&C>=u.length)var O=A.entries();else O=[],A.each(function(S,E){O.push({key:E,values:n(S,C)})});return null!=G?O.sort(function(S,E){return G(S.key",
                      "markdown": "`f):n};f.target=function(A){return arguments.length?(u=A,f):u};f.context=function(A){return arguments.length?(D=null==A?null:A,f):D};return f};d3.nest=function(){function f(A,C,G,O){if(C>=u.length)return null!=t&&A.sort(t),null!=z?z(A):A;for(var S=-1,E=A.length,K=u[C++],H,L,U=rb(),M,X=G();++S<E;)(M=U.get(H=K(L=A[S])+\"\"))?M.push(L):U.set(H,[L]);U.each(function(Y,W){O(X,W,f(Y,C,G,O))});return X}function n(A,C){if(++C>u.length)return A;\nvar G=r[C-1];if(null!=z&&C>=u.length)var O=A.entries();else O=[],A.each(function(S,E){O.push({key:E,values:n(S,C)})});return null!=G?O.sort(function(S,E){return G(S.key`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 634,
                  "startColumn": 411,
                  "endLine": 634,
                  "endColumn": 416,
                  "snippet": {
                    "text": "a[0])*(c[1]-a[1])-(b[1]-a[1])*(c[0]-a[0])}function fr(a,b){return a[0]-b[0]||a[1]-b[1]}function $k(a){for(var b=a.length,c=[0,1],d=2,e=2;e<b;++e){for(;1<d&&0>=er(a[c[d-2]],a[c[d-1]],a[e]);)--d;c[d++]=e}return c.slice(0,d)}function zc(){return Math.random()}function kh(a){function b(g){var k=g+\"\",m=c.get(k);if(!m){if(e!==lh)return e;c.set(k,m=d.push(g))}return a[(m-1)%a.length]}var c=rb(),\nd=[],e=lh;a=null==a?[]:Ib.call(a);b.domain=function(g){if(!arguments.length)return d.slice();d=[];c=rb();for(var k=-1,m=g.length,p,v;++k<m;)c.has(v=(p=g[k])+\"\")||c.set(v,d.push(p));return b};b.range=function(g){re",
                    "rendered": {
                      "text": "a[0])*(c[1]-a[1])-(b[1]-a[1])*(c[0]-a[0])}function fr(a,b){return a[0]-b[0]||a[1]-b[1]}function $k(a){for(var b=a.length,c=[0,1],d=2,e=2;e<b;++e){for(;1<d&&0>=er(a[c[d-2]],a[c[d-1]],a[e]);)--d;c[d++]=e}return c.slice(0,d)}function zc(){return Math.random()}function kh(a){function b(g){var k=g+\"\",m=c.get(k);if(!m){if(e!==lh)return e;c.set(k,m=d.push(g))}return a[(m-1)%a.length]}var c=rb(),\nd=[],e=lh;a=null==a?[]:Ib.call(a);b.domain=function(g){if(!arguments.length)return d.slice();d=[];c=rb();for(var k=-1,m=g.length,p,v;++k<m;)c.has(v=(p=g[k])+\"\")||c.set(v,d.push(p));return b};b.range=function(g){re",
                      "markdown": "`a[0])*(c[1]-a[1])-(b[1]-a[1])*(c[0]-a[0])}function fr(a,b){return a[0]-b[0]||a[1]-b[1]}function $k(a){for(var b=a.length,c=[0,1],d=2,e=2;e<b;++e){for(;1<d&&0>=er(a[c[d-2]],a[c[d-1]],a[e]);)--d;c[d++]=e}return c.slice(0,d)}function zc(){return Math.random()}function kh(a){function b(g){var k=g+\"\",m=c.get(k);if(!m){if(e!==lh)return e;c.set(k,m=d.push(g))}return a[(m-1)%a.length]}var c=rb(),\nd=[],e=lh;a=null==a?[]:Ib.call(a);b.domain=function(g){if(!arguments.length)return d.slice();d=[];c=rb();for(var k=-1,m=g.length,p,v;++k<m;)c.has(v=(p=g[k])+\"\")||c.set(v,d.push(p));return b};b.range=function(g){re`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 575,
                  "startColumn": 86,
                  "endLine": 575,
                  "endColumn": 91,
                  "snippet": {
                    "text": "ion rg(a,b,c,d,e,g){this._x=a;this._y=b;this._x0=c;this._y0=d;this._x1=e;this._y1=g;this._root=void 0}function qj(a){for(var b={data:a.data},c=b;a=a.next;)c=c.next={data:a.data};return b}function bq(a){return a.x+\na.vx}function cq(a){return a.y+a.vy}function dq(a){return a.index}function rj(a,b){a=a.get(b);if(!a)throw Error(\"missing: \"+b);return a}function eq(a){return a.x}function fq(a){return a.y}function qe(a,b){if(0>(b=(a=b?a.toExponential(b-1):a.toExponential()).indexOf(\"e\")))return null;var c=a.slice(0,b);return[1<c.length?c[0]+c.slice(2):c,+a.slice(b+1)]}function nc(a){return a=qe(Math.abs(a",
                    "rendered": {
                      "text": "ion rg(a,b,c,d,e,g){this._x=a;this._y=b;this._x0=c;this._y0=d;this._x1=e;this._y1=g;this._root=void 0}function qj(a){for(var b={data:a.data},c=b;a=a.next;)c=c.next={data:a.data};return b}function bq(a){return a.x+\na.vx}function cq(a){return a.y+a.vy}function dq(a){return a.index}function rj(a,b){a=a.get(b);if(!a)throw Error(\"missing: \"+b);return a}function eq(a){return a.x}function fq(a){return a.y}function qe(a,b){if(0>(b=(a=b?a.toExponential(b-1):a.toExponential()).indexOf(\"e\")))return null;var c=a.slice(0,b);return[1<c.length?c[0]+c.slice(2):c,+a.slice(b+1)]}function nc(a){return a=qe(Math.abs(a",
                      "markdown": "`ion rg(a,b,c,d,e,g){this._x=a;this._y=b;this._x0=c;this._y0=d;this._x1=e;this._y1=g;this._root=void 0}function qj(a){for(var b={data:a.data},c=b;a=a.next;)c=c.next={data:a.data};return b}function bq(a){return a.x+\na.vx}function cq(a){return a.y+a.vy}function dq(a){return a.index}function rj(a,b){a=a.get(b);if(!a)throw Error(\"missing: \"+b);return a}function eq(a){return a.x}function fq(a){return a.y}function qe(a,b){if(0>(b=(a=b?a.toExponential(b-1):a.toExponential()).indexOf(\"e\")))return null;var c=a.slice(0,b);return[1<c.length?c[0]+c.slice(2):c,+a.slice(b+1)]}function nc(a){return a=qe(Math.abs(a`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 323,
                  "startColumn": 274,
                  "endLine": 323,
                  "endColumn": 279,
                  "snippet": {
                    "text": "buteChangedCallback(this,\nf,g,h,e)};Zf?c(HTMLElement.prototype,Zf):Pf&&c(Element.prototype,Pf);$f?d(HTMLElement.prototype,$f):Qf&&d(Element.prototype,Qf);yg(a,Element.prototype,{prepend:Rf,append:Sf});Ag(a)};var Cg={};function Dg(a){function b(){var c=this.constructor;var d=document.__CE_registry.Ta.get(c);if(!d)throw Error(\"Failed to construct a custom element: The constructor was not registered with `customElements`.\");var e=d.constructionStack;if(0===e.length)return e=uf.call(document,d.localName),Object.setPrototypeOf(e,c.prototype),e.__CE_state=1,e.__CE_definition=d,mg(a,e),e;var f=e.length-1,",
                    "rendered": {
                      "text": "buteChangedCallback(this,\nf,g,h,e)};Zf?c(HTMLElement.prototype,Zf):Pf&&c(Element.prototype,Pf);$f?d(HTMLElement.prototype,$f):Qf&&d(Element.prototype,Qf);yg(a,Element.prototype,{prepend:Rf,append:Sf});Ag(a)};var Cg={};function Dg(a){function b(){var c=this.constructor;var d=document.__CE_registry.Ta.get(c);if(!d)throw Error(\"Failed to construct a custom element: The constructor was not registered with `customElements`.\");var e=d.constructionStack;if(0===e.length)return e=uf.call(document,d.localName),Object.setPrototypeOf(e,c.prototype),e.__CE_state=1,e.__CE_definition=d,mg(a,e),e;var f=e.length-1,",
                      "markdown": "`buteChangedCallback(this,\nf,g,h,e)};Zf?c(HTMLElement.prototype,Zf):Pf&&c(Element.prototype,Pf);$f?d(HTMLElement.prototype,$f):Qf&&d(Element.prototype,Qf);yg(a,Element.prototype,{prepend:Rf,append:Sf});Ag(a)};var Cg={};function Dg(a){function b(){var c=this.constructor;var d=document.__CE_registry.Ta.get(c);if(!d)throw Error(\"Failed to construct a custom element: The constructor was not registered with `customElements`.\");var e=d.constructionStack;if(0===e.length)return e=uf.call(document,d.localName),Object.setPrototypeOf(e,c.prototype),e.__CE_state=1,e.__CE_definition=d,mg(a,e),e;var f=e.length-1,`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 317,
                  "startColumn": 58,
                  "endLine": 317,
                  "endColumn": 63,
                  "snippet": {
                    "text": ";var c=this.ka.has(a)||this.ja.has(a);a=-1===this.oa.indexOf(a);c&&a&&b.resolve(void 0);return b.hb};n.polyfillWrapFlushCallback=function(a){this.Va&&this.Va.disconnect();var b=this.ia;this.ia=function(c){return a(function(){return b(c)})}};\nfunction sg(a,b){var c=a.ka.get(b);if(c)return c;if(c=a.ja.get(b)){a.ja.delete(b);try{return xg(a,b,c())}catch(d){rg(d)}}}T.prototype.define=T.prototype.define;T.prototype.upgrade=T.prototype.upgrade;T.prototype.get=T.prototype.get;T.prototype.whenDefined=T.prototype.whenDefined;T.prototype.polyfillDefineLazy=T.prototype.Pc;T.prototype.polyfillWrapFlushCallback",
                    "rendered": {
                      "text": ";var c=this.ka.has(a)||this.ja.has(a);a=-1===this.oa.indexOf(a);c&&a&&b.resolve(void 0);return b.hb};n.polyfillWrapFlushCallback=function(a){this.Va&&this.Va.disconnect();var b=this.ia;this.ia=function(c){return a(function(){return b(c)})}};\nfunction sg(a,b){var c=a.ka.get(b);if(c)return c;if(c=a.ja.get(b)){a.ja.delete(b);try{return xg(a,b,c())}catch(d){rg(d)}}}T.prototype.define=T.prototype.define;T.prototype.upgrade=T.prototype.upgrade;T.prototype.get=T.prototype.get;T.prototype.whenDefined=T.prototype.whenDefined;T.prototype.polyfillDefineLazy=T.prototype.Pc;T.prototype.polyfillWrapFlushCallback",
                      "markdown": "`;var c=this.ka.has(a)||this.ja.has(a);a=-1===this.oa.indexOf(a);c&&a&&b.resolve(void 0);return b.hb};n.polyfillWrapFlushCallback=function(a){this.Va&&this.Va.disconnect();var b=this.ia;this.ia=function(c){return a(function(){return b(c)})}};\nfunction sg(a,b){var c=a.ka.get(b);if(c)return c;if(c=a.ja.get(b)){a.ja.delete(b);try{return xg(a,b,c())}catch(d){rg(d)}}}T.prototype.define=T.prototype.define;T.prototype.upgrade=T.prototype.upgrade;T.prototype.get=T.prototype.get;T.prototype.whenDefined=T.prototype.whenDefined;T.prototype.polyfillDefineLazy=T.prototype.Pc;T.prototype.polyfillWrapFlushCallback`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 317,
                  "startColumn": 27,
                  "endLine": 317,
                  "endColumn": 32,
                  "snippet": {
                    "text": " b.hb;b=new ug;this.Ia.set(a,b);var c=this.ka.has(a)||this.ja.has(a);a=-1===this.oa.indexOf(a);c&&a&&b.resolve(void 0);return b.hb};n.polyfillWrapFlushCallback=function(a){this.Va&&this.Va.disconnect();var b=this.ia;this.ia=function(c){return a(function(){return b(c)})}};\nfunction sg(a,b){var c=a.ka.get(b);if(c)return c;if(c=a.ja.get(b)){a.ja.delete(b);try{return xg(a,b,c())}catch(d){rg(d)}}}T.prototype.define=T.prototype.define;T.prototype.upgrade=T.prototype.upgrade;T.prototype.get=T.prototype.get;T.prototype.whenDefined=T.prototype.whenDefined;T.prototype.polyfillDefineLazy=T.prototype.Pc;T.prot",
                    "rendered": {
                      "text": " b.hb;b=new ug;this.Ia.set(a,b);var c=this.ka.has(a)||this.ja.has(a);a=-1===this.oa.indexOf(a);c&&a&&b.resolve(void 0);return b.hb};n.polyfillWrapFlushCallback=function(a){this.Va&&this.Va.disconnect();var b=this.ia;this.ia=function(c){return a(function(){return b(c)})}};\nfunction sg(a,b){var c=a.ka.get(b);if(c)return c;if(c=a.ja.get(b)){a.ja.delete(b);try{return xg(a,b,c())}catch(d){rg(d)}}}T.prototype.define=T.prototype.define;T.prototype.upgrade=T.prototype.upgrade;T.prototype.get=T.prototype.get;T.prototype.whenDefined=T.prototype.whenDefined;T.prototype.polyfillDefineLazy=T.prototype.Pc;T.prot",
                      "markdown": "` b.hb;b=new ug;this.Ia.set(a,b);var c=this.ka.has(a)||this.ja.has(a);a=-1===this.oa.indexOf(a);c&&a&&b.resolve(void 0);return b.hb};n.polyfillWrapFlushCallback=function(a){this.Va&&this.Va.disconnect();var b=this.ia;this.ia=function(c){return a(function(){return b(c)})}};\nfunction sg(a,b){var c=a.ka.get(b);if(c)return c;if(c=a.ja.get(b)){a.ja.delete(b);try{return xg(a,b,c())}catch(d){rg(d)}}}T.prototype.define=T.prototype.define;T.prototype.upgrade=T.prototype.upgrade;T.prototype.get=T.prototype.get;T.prototype.whenDefined=T.prototype.whenDefined;T.prototype.polyfillDefineLazy=T.prototype.Pc;T.prot`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 316,
                  "startColumn": 135,
                  "endLine": 316,
                  "endColumn": 140,
                  "snippet": {
                    "text": "e],g=d.get(f),h=0;h<g.length;h++)og(this.G,g[h]);(f=this.Ia.get(f))&&f.resolve(void 0)}c.length=0}};n.get=function(a){if(a=sg(this,a))return a.constructorFunction};\nn.whenDefined=function(a){if(!bg(a))return Promise.reject(new SyntaxError(\"'\"+a+\"' is not a valid custom element name.\"));var b=this.Ia.get(a);if(b)return b.hb;b=new ug;this.Ia.set(a,b);var c=this.ka.has(a)||this.ja.has(a);a=-1===this.oa.indexOf(a);c&&a&&b.resolve(void 0);return b.hb};n.polyfillWrapFlushCallback=function(a){this.Va&&this.Va.disconnect();var b=this.ia;this.ia=function(c){return a(function(){return b(c)})}};\nfunction sg(a",
                    "rendered": {
                      "text": "e],g=d.get(f),h=0;h<g.length;h++)og(this.G,g[h]);(f=this.Ia.get(f))&&f.resolve(void 0)}c.length=0}};n.get=function(a){if(a=sg(this,a))return a.constructorFunction};\nn.whenDefined=function(a){if(!bg(a))return Promise.reject(new SyntaxError(\"'\"+a+\"' is not a valid custom element name.\"));var b=this.Ia.get(a);if(b)return b.hb;b=new ug;this.Ia.set(a,b);var c=this.ka.has(a)||this.ja.has(a);a=-1===this.oa.indexOf(a);c&&a&&b.resolve(void 0);return b.hb};n.polyfillWrapFlushCallback=function(a){this.Va&&this.Va.disconnect();var b=this.ia;this.ia=function(c){return a(function(){return b(c)})}};\nfunction sg(a",
                      "markdown": "`e],g=d.get(f),h=0;h<g.length;h++)og(this.G,g[h]);(f=this.Ia.get(f))&&f.resolve(void 0)}c.length=0}};n.get=function(a){if(a=sg(this,a))return a.constructorFunction};\nn.whenDefined=function(a){if(!bg(a))return Promise.reject(new SyntaxError(\"'\"+a+\"' is not a valid custom element name.\"));var b=this.Ia.get(a);if(b)return b.hb;b=new ug;this.Ia.set(a,b);var c=this.ka.has(a)||this.ja.has(a);a=-1===this.oa.indexOf(a);c&&a&&b.resolve(void 0);return b.hb};n.polyfillWrapFlushCallback=function(a){this.Va&&this.Va.disconnect();var b=this.ia;this.ia=function(c){return a(function(){return b(c)})}};\nfunction sg(a`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 315,
                  "startColumn": 388,
                  "endLine": 315,
                  "endColumn": 393,
                  "snippet": {
                    "text": "0;e<c.length;e++)d.set(c[e],[]);qg(this.G,document,{upgrade:function(k){if(void 0===k.__CE_state){var l=k.localName,p=d.get(l);p?p.push(k):a.ka.has(l)&&b.push(k)}}});for(e=0;e<b.length;e++)og(this.G,b[e]);for(e=0;e<c.length;e++){for(var f=c[e],g=d.get(f),h=0;h<g.length;h++)og(this.G,g[h]);(f=this.Ia.get(f))&&f.resolve(void 0)}c.length=0}};n.get=function(a){if(a=sg(this,a))return a.constructorFunction};\nn.whenDefined=function(a){if(!bg(a))return Promise.reject(new SyntaxError(\"'\"+a+\"' is not a valid custom element name.\"));var b=this.Ia.get(a);if(b)return b.hb;b=new ug;this.Ia.set(a,b);var c=this.ka",
                    "rendered": {
                      "text": "0;e<c.length;e++)d.set(c[e],[]);qg(this.G,document,{upgrade:function(k){if(void 0===k.__CE_state){var l=k.localName,p=d.get(l);p?p.push(k):a.ka.has(l)&&b.push(k)}}});for(e=0;e<b.length;e++)og(this.G,b[e]);for(e=0;e<c.length;e++){for(var f=c[e],g=d.get(f),h=0;h<g.length;h++)og(this.G,g[h]);(f=this.Ia.get(f))&&f.resolve(void 0)}c.length=0}};n.get=function(a){if(a=sg(this,a))return a.constructorFunction};\nn.whenDefined=function(a){if(!bg(a))return Promise.reject(new SyntaxError(\"'\"+a+\"' is not a valid custom element name.\"));var b=this.Ia.get(a);if(b)return b.hb;b=new ug;this.Ia.set(a,b);var c=this.ka",
                      "markdown": "`0;e<c.length;e++)d.set(c[e],[]);qg(this.G,document,{upgrade:function(k){if(void 0===k.__CE_state){var l=k.localName,p=d.get(l);p?p.push(k):a.ka.has(l)&&b.push(k)}}});for(e=0;e<b.length;e++)og(this.G,b[e]);for(e=0;e<c.length;e++){for(var f=c[e],g=d.get(f),h=0;h<g.length;h++)og(this.G,g[h]);(f=this.Ia.get(f))&&f.resolve(void 0)}c.length=0}};n.get=function(a){if(a=sg(this,a))return a.constructorFunction};\nn.whenDefined=function(a){if(!bg(a))return Promise.reject(new SyntaxError(\"'\"+a+\"' is not a valid custom element name.\"));var b=this.Ia.get(a);if(b)return b.hb;b=new ug;this.Ia.set(a,b);var c=this.ka`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 315,
                  "startColumn": 335,
                  "endLine": 315,
                  "endColumn": 340,
                  "snippet": {
                    "text": "this.M){this.M=!1;for(var b=[],c=this.oa,d=new Map,e=0;e<c.length;e++)d.set(c[e],[]);qg(this.G,document,{upgrade:function(k){if(void 0===k.__CE_state){var l=k.localName,p=d.get(l);p?p.push(k):a.ka.has(l)&&b.push(k)}}});for(e=0;e<b.length;e++)og(this.G,b[e]);for(e=0;e<c.length;e++){for(var f=c[e],g=d.get(f),h=0;h<g.length;h++)og(this.G,g[h]);(f=this.Ia.get(f))&&f.resolve(void 0)}c.length=0}};n.get=function(a){if(a=sg(this,a))return a.constructorFunction};\nn.whenDefined=function(a){if(!bg(a))return Promise.reject(new SyntaxError(\"'\"+a+\"' is not a valid custom element name.\"));var b=this.Ia.get(a);if(",
                    "rendered": {
                      "text": "this.M){this.M=!1;for(var b=[],c=this.oa,d=new Map,e=0;e<c.length;e++)d.set(c[e],[]);qg(this.G,document,{upgrade:function(k){if(void 0===k.__CE_state){var l=k.localName,p=d.get(l);p?p.push(k):a.ka.has(l)&&b.push(k)}}});for(e=0;e<b.length;e++)og(this.G,b[e]);for(e=0;e<c.length;e++){for(var f=c[e],g=d.get(f),h=0;h<g.length;h++)og(this.G,g[h]);(f=this.Ia.get(f))&&f.resolve(void 0)}c.length=0}};n.get=function(a){if(a=sg(this,a))return a.constructorFunction};\nn.whenDefined=function(a){if(!bg(a))return Promise.reject(new SyntaxError(\"'\"+a+\"' is not a valid custom element name.\"));var b=this.Ia.get(a);if(",
                      "markdown": "`this.M){this.M=!1;for(var b=[],c=this.oa,d=new Map,e=0;e<c.length;e++)d.set(c[e],[]);qg(this.G,document,{upgrade:function(k){if(void 0===k.__CE_state){var l=k.localName,p=d.get(l);p?p.push(k):a.ka.has(l)&&b.push(k)}}});for(e=0;e<b.length;e++)og(this.G,b[e]);for(e=0;e<c.length;e++){for(var f=c[e],g=d.get(f),h=0;h<g.length;h++)og(this.G,g[h]);(f=this.Ia.get(f))&&f.resolve(void 0)}c.length=0}};n.get=function(a){if(a=sg(this,a))return a.constructorFunction};\nn.whenDefined=function(a){if(!bg(a))return Promise.reject(new SyntaxError(\"'\"+a+\"' is not a valid custom element name.\"));var b=this.Ia.get(a);if(`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 315,
                  "startColumn": 207,
                  "endLine": 315,
                  "endColumn": 212,
                  "snippet": {
                    "text": ".ka.set(b,c);a.Ta.set(c.constructorFunction,c);return c}n.upgrade=function(a){qg(this.G,a)};\nn.Xa=function(){var a=this;if(!1!==this.M){this.M=!1;for(var b=[],c=this.oa,d=new Map,e=0;e<c.length;e++)d.set(c[e],[]);qg(this.G,document,{upgrade:function(k){if(void 0===k.__CE_state){var l=k.localName,p=d.get(l);p?p.push(k):a.ka.has(l)&&b.push(k)}}});for(e=0;e<b.length;e++)og(this.G,b[e]);for(e=0;e<c.length;e++){for(var f=c[e],g=d.get(f),h=0;h<g.length;h++)og(this.G,g[h]);(f=this.Ia.get(f))&&f.resolve(void 0)}c.length=0}};n.get=function(a){if(a=sg(this,a))return a.constructorFunction};\nn.whenDefined=func",
                    "rendered": {
                      "text": ".ka.set(b,c);a.Ta.set(c.constructorFunction,c);return c}n.upgrade=function(a){qg(this.G,a)};\nn.Xa=function(){var a=this;if(!1!==this.M){this.M=!1;for(var b=[],c=this.oa,d=new Map,e=0;e<c.length;e++)d.set(c[e],[]);qg(this.G,document,{upgrade:function(k){if(void 0===k.__CE_state){var l=k.localName,p=d.get(l);p?p.push(k):a.ka.has(l)&&b.push(k)}}});for(e=0;e<b.length;e++)og(this.G,b[e]);for(e=0;e<c.length;e++){for(var f=c[e],g=d.get(f),h=0;h<g.length;h++)og(this.G,g[h]);(f=this.Ia.get(f))&&f.resolve(void 0)}c.length=0}};n.get=function(a){if(a=sg(this,a))return a.constructorFunction};\nn.whenDefined=func",
                      "markdown": "`.ka.set(b,c);a.Ta.set(c.constructorFunction,c);return c}n.upgrade=function(a){qg(this.G,a)};\nn.Xa=function(){var a=this;if(!1!==this.M){this.M=!1;for(var b=[],c=this.oa,d=new Map,e=0;e<c.length;e++)d.set(c[e],[]);qg(this.G,document,{upgrade:function(k){if(void 0===k.__CE_state){var l=k.localName,p=d.get(l);p?p.push(k):a.ka.has(l)&&b.push(k)}}});for(e=0;e<b.length;e++)og(this.G,b[e]);for(e=0;e<c.length;e++){for(var f=c[e],g=d.get(f),h=0;h<g.length;h++)og(this.G,g[h]);(f=this.Ia.get(f))&&f.resolve(void 0)}c.length=0}};n.get=function(a){if(a=sg(this,a))return a.constructorFunction};\nn.whenDefined=func`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 293,
                  "startColumn": 319,
                  "endLine": 293,
                  "endColumn": 324,
                  "snippet": {
                    "text": "){Object.defineProperty(pf.prototype,a,{get:function(){return this.node[\"__shady_\"+a]},set:function(b){this.node[\"__shady_\"+a]=b},configurable:!0})}Qd.forEach(function(a){return qf(a)});Rd.forEach(function(a){return qf(a)});var rf=new WeakMap;function sf(a){if(K(a)||a instanceof pf)return a;var b=rf.get(a);b||(b=new pf(a),rf.set(a,b));return b};if(J.inUse){var tf=J.j?function(a){return a}:function(a){md(a);ld(a);return a};window.ShadyDOM={inUse:J.inUse,patch:tf,isShadyRoot:K,enqueue:Jc,flush:Kc,flushInitial:function(a){a.Qb()},settings:J,filterMutations:Pc,observeChildren:Nc,unobserveChildren:Oc,de",
                    "rendered": {
                      "text": "){Object.defineProperty(pf.prototype,a,{get:function(){return this.node[\"__shady_\"+a]},set:function(b){this.node[\"__shady_\"+a]=b},configurable:!0})}Qd.forEach(function(a){return qf(a)});Rd.forEach(function(a){return qf(a)});var rf=new WeakMap;function sf(a){if(K(a)||a instanceof pf)return a;var b=rf.get(a);b||(b=new pf(a),rf.set(a,b));return b};if(J.inUse){var tf=J.j?function(a){return a}:function(a){md(a);ld(a);return a};window.ShadyDOM={inUse:J.inUse,patch:tf,isShadyRoot:K,enqueue:Jc,flush:Kc,flushInitial:function(a){a.Qb()},settings:J,filterMutations:Pc,observeChildren:Nc,unobserveChildren:Oc,de",
                      "markdown": "`){Object.defineProperty(pf.prototype,a,{get:function(){return this.node[\"__shady_\"+a]},set:function(b){this.node[\"__shady_\"+a]=b},configurable:!0})}Qd.forEach(function(a){return qf(a)});Rd.forEach(function(a){return qf(a)});var rf=new WeakMap;function sf(a){if(K(a)||a instanceof pf)return a;var b=rf.get(a);b||(b=new pf(a),rf.set(a,b));return b};if(J.inUse){var tf=J.j?function(a){return a}:function(a){md(a);ld(a);return a};window.ShadyDOM={inUse:J.inUse,patch:tf,isShadyRoot:K,enqueue:Jc,flush:Kc,flushInitial:function(a){a.Qb()},settings:J,filterMutations:Pc,observeChildren:Nc,unobserveChildren:Oc,de`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 241,
                  "startColumn": 357,
                  "endLine": 241,
                  "endColumn": 362,
                  "snippet": {
                    "text": "}],['\"',{end:'\"',ta:!1}],[\"'\",{end:\"'\",ta:!1}]].forEach(function(a){var b=ea(a);a=b.next().value;b=b.next().value;re.set(a,b)});function se(a,b,c,d){for(d=void 0===d?!0:d;b<a.length;b++)if(\"\\\\\"===a[b]&&b<a.length-1&&\"\\n\"!==a[b+1])b++;else{if(-1!==c.indexOf(a[b]))return b;if(d&&re.has(a[b])){var e=re.get(a[b]);b=se(a,b+1,[e.end],e.ta)}}return a.length}\nfunction te(a){function b(){if(0<d.length){for(;\" \"===d[d.length-1];)d.pop();c.push({ob:d.filter(function(k,l){return 0===l%2}),Bc:d.filter(function(k,l){return 1===l%2})});d.length=0}}for(var c=[],d=[],e=0;e<a.length;){var f=d[d.length-1],g=se(a,e,[\"",
                    "rendered": {
                      "text": "}],['\"',{end:'\"',ta:!1}],[\"'\",{end:\"'\",ta:!1}]].forEach(function(a){var b=ea(a);a=b.next().value;b=b.next().value;re.set(a,b)});function se(a,b,c,d){for(d=void 0===d?!0:d;b<a.length;b++)if(\"\\\\\"===a[b]&&b<a.length-1&&\"\\n\"!==a[b+1])b++;else{if(-1!==c.indexOf(a[b]))return b;if(d&&re.has(a[b])){var e=re.get(a[b]);b=se(a,b+1,[e.end],e.ta)}}return a.length}\nfunction te(a){function b(){if(0<d.length){for(;\" \"===d[d.length-1];)d.pop();c.push({ob:d.filter(function(k,l){return 0===l%2}),Bc:d.filter(function(k,l){return 1===l%2})});d.length=0}}for(var c=[],d=[],e=0;e<a.length;){var f=d[d.length-1],g=se(a,e,[\"",
                      "markdown": "`}],['\"',{end:'\"',ta:!1}],[\"'\",{end:\"'\",ta:!1}]].forEach(function(a){var b=ea(a);a=b.next().value;b=b.next().value;re.set(a,b)});function se(a,b,c,d){for(d=void 0===d?!0:d;b<a.length;b++)if(\"\\\\\"===a[b]&&b<a.length-1&&\"\\n\"!==a[b+1])b++;else{if(-1!==c.indexOf(a[b]))return b;if(d&&re.has(a[b])){var e=re.get(a[b]);b=se(a,b+1,[e.end],e.ta)}}return a.length}\nfunction te(a){function b(){if(0<d.length){for(;\" \"===d[d.length-1];)d.pop();c.push({ob:d.filter(function(k,l){return 0===l%2}),Bc:d.filter(function(k,l){return 1===l%2})});d.length=0}}for(var c=[],d=[],e=0;e<a.length;){var f=d[d.length-1],g=se(a,e,[\"`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 102,
                  "startColumn": 371,
                  "endLine": 102,
                  "endColumn": 376,
                  "snippet": {
                    "text": "b);Qa.call(d,a,g,e);if(\"function\"===typeof b)return b.call(d,k);if(\"function\"===typeof(null==b?void 0:b.handleEvent))return b.handleEvent(k)}:null;f.set(b,g);var h;Pa.call(this,a,null!=(h=g)?h:b,e)}}};Na.prototype.removeEventListener=function(a,b,c){if(null!=b){c=Oa(c).capture;var d=Va(this,a,c),e=d.get(b);void 0!==e&&(d.delete(b),Qa.call(this,a,null!=e?e:b,c))}}};/*\n\nCopyright (c) 2020 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.githu",
                    "rendered": {
                      "text": "b);Qa.call(d,a,g,e);if(\"function\"===typeof b)return b.call(d,k);if(\"function\"===typeof(null==b?void 0:b.handleEvent))return b.handleEvent(k)}:null;f.set(b,g);var h;Pa.call(this,a,null!=(h=g)?h:b,e)}}};Na.prototype.removeEventListener=function(a,b,c){if(null!=b){c=Oa(c).capture;var d=Va(this,a,c),e=d.get(b);void 0!==e&&(d.delete(b),Qa.call(this,a,null!=e?e:b,c))}}};/*\n\nCopyright (c) 2020 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.githu",
                      "markdown": "`b);Qa.call(d,a,g,e);if(\"function\"===typeof b)return b.call(d,k);if(\"function\"===typeof(null==b?void 0:b.handleEvent))return b.handleEvent(k)}:null;f.set(b,g);var h;Pa.call(this,a,null!=(h=g)?h:b,e)}}};Na.prototype.removeEventListener=function(a,b,c){if(null!=b){c=Oa(c).capture;var d=Va(this,a,c),e=d.get(b);void 0!==e&&(d.delete(b),Qa.call(this,a,null!=e?e:b,c))}}};/*\n\nCopyright (c) 2020 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.githu`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 101,
                  "startColumn": 361,
                  "endLine": 101,
                  "endColumn": 366,
                  "snippet": {
                    "text": "{if(!a||\"object\"!==typeof a&&\"function\"!==typeof a){var b=!!a;a=!1}else b=!!a.capture,a=!!a.once;return{capture:b,once:a}},Pa=Na.prototype.addEventListener,Qa=Na.prototype.removeEventListener,Ta=new WeakMap,Ua=new WeakMap,Va=function(a,b,c){var d=c?Ta:Ua;c=d.get(a);void 0===c&&d.set(a,c=new Map);a=c.get(b);void 0===a&&c.set(b,a=new WeakMap);return a};Na.prototype.addEventListener=function(a,b,c){var d=this;if(null!=b){c=Oa(c);var e=c.capture;\nc=c.once;var f=Va(this,a,e);if(!f.has(b)){var g=c?function(k){f.delete(b);Qa.call(d,a,g,e);if(\"function\"===typeof b)return b.call(d,k);if(\"function\"===typeof(",
                    "rendered": {
                      "text": "{if(!a||\"object\"!==typeof a&&\"function\"!==typeof a){var b=!!a;a=!1}else b=!!a.capture,a=!!a.once;return{capture:b,once:a}},Pa=Na.prototype.addEventListener,Qa=Na.prototype.removeEventListener,Ta=new WeakMap,Ua=new WeakMap,Va=function(a,b,c){var d=c?Ta:Ua;c=d.get(a);void 0===c&&d.set(a,c=new Map);a=c.get(b);void 0===a&&c.set(b,a=new WeakMap);return a};Na.prototype.addEventListener=function(a,b,c){var d=this;if(null!=b){c=Oa(c);var e=c.capture;\nc=c.once;var f=Va(this,a,e);if(!f.has(b)){var g=c?function(k){f.delete(b);Qa.call(d,a,g,e);if(\"function\"===typeof b)return b.call(d,k);if(\"function\"===typeof(",
                      "markdown": "`{if(!a||\"object\"!==typeof a&&\"function\"!==typeof a){var b=!!a;a=!1}else b=!!a.capture,a=!!a.once;return{capture:b,once:a}},Pa=Na.prototype.addEventListener,Qa=Na.prototype.removeEventListener,Ta=new WeakMap,Ua=new WeakMap,Va=function(a,b,c){var d=c?Ta:Ua;c=d.get(a);void 0===c&&d.set(a,c=new Map);a=c.get(b);void 0===a&&c.set(b,a=new WeakMap);return a};Na.prototype.addEventListener=function(a,b,c){var d=this;if(null!=b){c=Oa(c);var e=c.capture;\nc=c.once;var f=Va(this,a,e);if(!f.has(b)){var g=c?function(k){f.delete(b);Qa.call(d,a,g,e);if(\"function\"===typeof b)return b.call(d,k);if(\"function\"===typeof(`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 101,
                  "startColumn": 319,
                  "endLine": 101,
                  "endColumn": 324,
                  "snippet": {
                    "text": "stener\"in Na.prototype){var Oa=function(a){if(!a||\"object\"!==typeof a&&\"function\"!==typeof a){var b=!!a;a=!1}else b=!!a.capture,a=!!a.once;return{capture:b,once:a}},Pa=Na.prototype.addEventListener,Qa=Na.prototype.removeEventListener,Ta=new WeakMap,Ua=new WeakMap,Va=function(a,b,c){var d=c?Ta:Ua;c=d.get(a);void 0===c&&d.set(a,c=new Map);a=c.get(b);void 0===a&&c.set(b,a=new WeakMap);return a};Na.prototype.addEventListener=function(a,b,c){var d=this;if(null!=b){c=Oa(c);var e=c.capture;\nc=c.once;var f=Va(this,a,e);if(!f.has(b)){var g=c?function(k){f.delete(b);Qa.call(d,a,g,e);if(\"function\"===typeof b)",
                    "rendered": {
                      "text": "stener\"in Na.prototype){var Oa=function(a){if(!a||\"object\"!==typeof a&&\"function\"!==typeof a){var b=!!a;a=!1}else b=!!a.capture,a=!!a.once;return{capture:b,once:a}},Pa=Na.prototype.addEventListener,Qa=Na.prototype.removeEventListener,Ta=new WeakMap,Ua=new WeakMap,Va=function(a,b,c){var d=c?Ta:Ua;c=d.get(a);void 0===c&&d.set(a,c=new Map);a=c.get(b);void 0===a&&c.set(b,a=new WeakMap);return a};Na.prototype.addEventListener=function(a,b,c){var d=this;if(null!=b){c=Oa(c);var e=c.capture;\nc=c.once;var f=Va(this,a,e);if(!f.has(b)){var g=c?function(k){f.delete(b);Qa.call(d,a,g,e);if(\"function\"===typeof b)",
                      "markdown": "`stener\"in Na.prototype){var Oa=function(a){if(!a||\"object\"!==typeof a&&\"function\"!==typeof a){var b=!!a;a=!1}else b=!!a.capture,a=!!a.once;return{capture:b,once:a}},Pa=Na.prototype.addEventListener,Qa=Na.prototype.removeEventListener,Ta=new WeakMap,Ua=new WeakMap,Va=function(a,b,c){var d=c?Ta:Ua;c=d.get(a);void 0===c&&d.set(a,c=new Map);a=c.get(b);void 0===a&&c.set(b,a=new WeakMap);return a};Na.prototype.addEventListener=function(a,b,c){var d=this;if(null!=b){c=Oa(c);var e=c.capture;\nc=c.once;var f=Va(this,a,e);if(!f.has(b)){var g=c?function(k){f.delete(b);Qa.call(d,a,g,e);if(\"function\"===typeof b)`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 2033,
                  "startColumn": 1492,
                  "endLine": 2033,
                  "endColumn": 1500,
                  "snippet": {
                    "text": "   </div>\\n      <div class=\"column\">\\n        [[item.falsePositives]]\\n      </div>\\n      <div class=\"column\">\\n        [[item.falseNegatives]]\\n      </div>\\n    </div>\\n  </template>\\n  <template is=\"dom-if\" if=\"[[expandable_]]\">\\n    <paper-tooltip>\\n      More data available. Click anywhere to expand / collapse.\\n    </paper-tooltip>\\n  </template>\\n</div>\\n\\n\\n');on=\nqn}pn=on;function rn(){return X.call(this)||this}D(rn,X);m=rn.prototype;\nm.computeTransformedData_=function(a,b){var c=this;if(a){var d=[];try{d=JSON.parse(a)}catch(e){}return d.matrices.map(function(e,f){return{showTitle:0==f,thre",
                    "rendered": {
                      "text": "   </div>\\n      <div class=\"column\">\\n        [[item.falsePositives]]\\n      </div>\\n      <div class=\"column\">\\n        [[item.falseNegatives]]\\n      </div>\\n    </div>\\n  </template>\\n  <template is=\"dom-if\" if=\"[[expandable_]]\">\\n    <paper-tooltip>\\n      More data available. Click anywhere to expand / collapse.\\n    </paper-tooltip>\\n  </template>\\n</div>\\n\\n\\n');on=\nqn}pn=on;function rn(){return X.call(this)||this}D(rn,X);m=rn.prototype;\nm.computeTransformedData_=function(a,b){var c=this;if(a){var d=[];try{d=JSON.parse(a)}catch(e){}return d.matrices.map(function(e,f){return{showTitle:0==f,thre",
                      "markdown": "`   </div>\\n      <div class=\"column\">\\n        [[item.falsePositives]]\\n      </div>\\n      <div class=\"column\">\\n        [[item.falseNegatives]]\\n      </div>\\n    </div>\\n  </template>\\n  <template is=\"dom-if\" if=\"[[expandable_]]\">\\n    <paper-tooltip>\\n      More data available. Click anywhere to expand / collapse.\\n    </paper-tooltip>\\n  </template>\\n</div>\\n\\n\\n');on=\nqn}pn=on;function rn(){return X.call(this)||this}D(rn,X);m=rn.prototype;\nm.computeTransformedData_=function(a,b){var c=this;if(a){var d=[];try{d=JSON.parse(a)}catch(e){}return d.matrices.map(function(e,f){return{showTitle:0==f,thre`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 2012,
                  "startColumn": 452,
                  "endLine": 2012,
                  "endColumn": 460,
                  "snippet": {
                    "text": " {\\n    text-align: right;\\n  }\\n</style>\\n<div id=\"root\" on-tap=\"toggleExpanded_\">\\n  <template is=\"dom-repeat\" items=\"[[values_]]\">\\n    <div>[[item]]</div>\\n  </template>\\n</div>\\n<template is=\"dom-if\" if=\"[[expandable_]]\">\\n  <paper-tooltip for=\"root\">\\n    More data available. Click anywhere to expand / collapse.\\n  </paper-tooltip>\\n</template>\\n\\n\\n');Um=\nWm}Vm=Um;function Xm(){return X.call(this)||this}D(Xm,X);Xm.prototype.dataChanged_=function(a){var b={};try{b=JSON.parse(a)}catch(h){}var c=[],d=(a=b.shape)&&a.length;if(d){b=b[(b.dataType+\"\").toLowerCase()+\"Values\"];var e=a.reduce(function(h,",
                    "rendered": {
                      "text": " {\\n    text-align: right;\\n  }\\n</style>\\n<div id=\"root\" on-tap=\"toggleExpanded_\">\\n  <template is=\"dom-repeat\" items=\"[[values_]]\">\\n    <div>[[item]]</div>\\n  </template>\\n</div>\\n<template is=\"dom-if\" if=\"[[expandable_]]\">\\n  <paper-tooltip for=\"root\">\\n    More data available. Click anywhere to expand / collapse.\\n  </paper-tooltip>\\n</template>\\n\\n\\n');Um=\nWm}Vm=Um;function Xm(){return X.call(this)||this}D(Xm,X);Xm.prototype.dataChanged_=function(a){var b={};try{b=JSON.parse(a)}catch(h){}var c=[],d=(a=b.shape)&&a.length;if(d){b=b[(b.dataType+\"\").toLowerCase()+\"Values\"];var e=a.reduce(function(h,",
                      "markdown": "` {\\n    text-align: right;\\n  }\\n</style>\\n<div id=\"root\" on-tap=\"toggleExpanded_\">\\n  <template is=\"dom-repeat\" items=\"[[values_]]\">\\n    <div>[[item]]</div>\\n  </template>\\n</div>\\n<template is=\"dom-if\" if=\"[[expandable_]]\">\\n  <paper-tooltip for=\"root\">\\n    More data available. Click anywhere to expand / collapse.\\n  </paper-tooltip>\\n</template>\\n\\n\\n');Um=\nWm}Vm=Um;function Xm(){return X.call(this)||this}D(Xm,X);Xm.prototype.dataChanged_=function(a){var b={};try{b=JSON.parse(a)}catch(h){}var c=[],d=(a=b.shape)&&a.length;if(d){b=b[(b.dataType+\"\").toLowerCase()+\"Values\"];var e=a.reduce(function(h,`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 1982,
                  "startColumn": 909,
                  "endLine": 1982,
                  "endColumn": 913,
                  "snippet": {
                    "text": "rivacy-dialog\">\\n  <h2>Privacy: min-slice-size</h2>\\n  <div class=\"popup\">\\n    <p>\\n      To preserve privacy, we have not aggregated data for slices with example count fewer than\\n      min_slice_size. If you have any questions, or would like to change this threshold, please\\n      reach out to us at ml-fairness-partnerships@google.com.\\n    </p>\\n    Here is the list of all such slices being omitted:<br>\\n    <paper-listbox id=\"omitted-slices-list\">\\n      <template is=\"dom-repeat\" items=\"[[omittedSlices]]\">\\n        <paper-item class=\"omitted-slices-listitem\">[[item]]</paper-item>\\n      </tem",
                    "rendered": {
                      "text": "rivacy-dialog\">\\n  <h2>Privacy: min-slice-size</h2>\\n  <div class=\"popup\">\\n    <p>\\n      To preserve privacy, we have not aggregated data for slices with example count fewer than\\n      min_slice_size. If you have any questions, or would like to change this threshold, please\\n      reach out to us at ml-fairness-partnerships@google.com.\\n    </p>\\n    Here is the list of all such slices being omitted:<br>\\n    <paper-listbox id=\"omitted-slices-list\">\\n      <template is=\"dom-repeat\" items=\"[[omittedSlices]]\">\\n        <paper-item class=\"omitted-slices-listitem\">[[item]]</paper-item>\\n      </tem",
                      "markdown": "`rivacy-dialog\">\\n  <h2>Privacy: min-slice-size</h2>\\n  <div class=\"popup\">\\n    <p>\\n      To preserve privacy, we have not aggregated data for slices with example count fewer than\\n      min_slice_size. If you have any questions, or would like to change this threshold, please\\n      reach out to us at ml-fairness-partnerships@google.com.\\n    </p>\\n    Here is the list of all such slices being omitted:<br>\\n    <paper-listbox id=\"omitted-slices-list\">\\n      <template is=\"dom-repeat\" items=\"[[omittedSlices]]\">\\n        <paper-item class=\"omitted-slices-listitem\">[[item]]</paper-item>\\n      </tem`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 1954,
                  "startColumn": 4261,
                  "endLine": 1954,
                  "endColumn": 4265,
                  "snippet": {
                    "text": "al</paper-item>\\n    </paper-listbox>\\n  </paper-dropdown-menu>\\n  <span>\\n    <paper-dialog id=\"dialog\">\\n      <h2>Parameters</h2>\\n      <ol>\\n        <li><b>Slices</b>\\n          <p>\\n            For each metric, select a set of slices to evaluate using the \"SELECT SLICES\" dropdown.\\n            At most [[MAX_NUM_SLICES]] slices can be selected and rendered.\\n          </p>\\n        </li>\\n        <li><b>Thresholds</b>\\n          <p>\\n            If a metric is thresholded (meaning that its value depends on a model\\'s classification threshold), it will have the option to select thresholds usin",
                    "rendered": {
                      "text": "al</paper-item>\\n    </paper-listbox>\\n  </paper-dropdown-menu>\\n  <span>\\n    <paper-dialog id=\"dialog\">\\n      <h2>Parameters</h2>\\n      <ol>\\n        <li><b>Slices</b>\\n          <p>\\n            For each metric, select a set of slices to evaluate using the \"SELECT SLICES\" dropdown.\\n            At most [[MAX_NUM_SLICES]] slices can be selected and rendered.\\n          </p>\\n        </li>\\n        <li><b>Thresholds</b>\\n          <p>\\n            If a metric is thresholded (meaning that its value depends on a model\\'s classification threshold), it will have the option to select thresholds usin",
                      "markdown": "`al</paper-item>\\n    </paper-listbox>\\n  </paper-dropdown-menu>\\n  <span>\\n    <paper-dialog id=\"dialog\">\\n      <h2>Parameters</h2>\\n      <ol>\\n        <li><b>Slices</b>\\n          <p>\\n            For each metric, select a set of slices to evaluate using the \"SELECT SLICES\" dropdown.\\n            At most [[MAX_NUM_SLICES]] slices can be selected and rendered.\\n          </p>\\n        </li>\\n        <li><b>Thresholds</b>\\n          <p>\\n            If a metric is thresholded (meaning that its value depends on a model\\'s classification threshold), it will have the option to select thresholds usin`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 1782,
                  "startColumn": 315,
                  "endLine": 1782,
                  "endColumn": 324,
                  "snippet": {
                    "text": "Items:function(a){return null==a?null:a.map(function(b){return this._valueToItem(b)},this)}};var bk={properties:{focusedItem:{observer:\"_focusedItemChanged\",readOnly:!0,type:Object},attrForItemTitle:{type:String},disabled:{type:Boolean,value:!1,observer:\"_disabledChanged\"}},dk:\"Alt AltGraph CapsLock Control Fn FnLock Hyper Meta NumLock OS ScrollLock Shift Super Symbol SymbolLock\".split(\" \"),ek:1E3,ei:0,hostAttributes:{role:\"menu\"},observers:[\"_updateMultiselectable(multi)\"],listeners:{focus:\"_onFocus\",keydown:\"_onKeydown\",\"iron-items-changed\":\"_onIronItemsChanged\"},na:{up:\"_onUpKey\",down:\"_onDownKey\",\n",
                    "rendered": {
                      "text": "Items:function(a){return null==a?null:a.map(function(b){return this._valueToItem(b)},this)}};var bk={properties:{focusedItem:{observer:\"_focusedItemChanged\",readOnly:!0,type:Object},attrForItemTitle:{type:String},disabled:{type:Boolean,value:!1,observer:\"_disabledChanged\"}},dk:\"Alt AltGraph CapsLock Control Fn FnLock Hyper Meta NumLock OS ScrollLock Shift Super Symbol SymbolLock\".split(\" \"),ek:1E3,ei:0,hostAttributes:{role:\"menu\"},observers:[\"_updateMultiselectable(multi)\"],listeners:{focus:\"_onFocus\",keydown:\"_onKeydown\",\"iron-items-changed\":\"_onIronItemsChanged\"},na:{up:\"_onUpKey\",down:\"_onDownKey\",\n",
                      "markdown": "`Items:function(a){return null==a?null:a.map(function(b){return this._valueToItem(b)},this)}};var bk={properties:{focusedItem:{observer:\"_focusedItemChanged\",readOnly:!0,type:Object},attrForItemTitle:{type:String},disabled:{type:Boolean,value:!1,observer:\"_disabledChanged\"}},dk:\"Alt AltGraph CapsLock Control Fn FnLock Hyper Meta NumLock OS ScrollLock Shift Super Symbol SymbolLock\".split(\" \"),ek:1E3,ei:0,hostAttributes:{role:\"menu\"},observers:[\"_updateMultiselectable(multi)\"],listeners:{focus:\"_onFocus\",keydown:\"_onKeydown\",\"iron-items-changed\":\"_onIronItemsChanged\"},na:{up:\"_onUpKey\",down:\"_onDownKey\",\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 1157,
                  "startColumn": 279,
                  "endLine": 1157,
                  "endColumn": 283,
                  "snippet": {
                    "text": "(a,b)}e=U.prototype;\ne.getLineChartData=function(a){var b=this,c=this.h.length;return this.h.map(function(d,f){var k=d.config;d=d.data.getMetricValue(\"\",a);f=c-f;var m=b.i?b.g.getModelId(k):b.g.getDataVersion(k);return[{v:\"number\"==typeof m?m:f,f:b.g.getModelHeader()+\" \"+b.g.getModelDisplayText(k)+\" at \"+b.g.getDataHeader()+\" \"+b.g.getDataDisplayText(k)},b.g.getModelId(k),b.g.getModelHeader()+\": \"+b.g.getModelDisplayText(k),{v:d,f:d}]})};\ne.getDataTable=function(){var a=this,b=this.g;return this.h.map(function(c){var d=c.data.getAllMetricValues(\"\"),f=c.config;c=b.getAdditionalDisplayTexts(f);var k",
                    "rendered": {
                      "text": "(a,b)}e=U.prototype;\ne.getLineChartData=function(a){var b=this,c=this.h.length;return this.h.map(function(d,f){var k=d.config;d=d.data.getMetricValue(\"\",a);f=c-f;var m=b.i?b.g.getModelId(k):b.g.getDataVersion(k);return[{v:\"number\"==typeof m?m:f,f:b.g.getModelHeader()+\" \"+b.g.getModelDisplayText(k)+\" at \"+b.g.getDataHeader()+\" \"+b.g.getDataDisplayText(k)},b.g.getModelId(k),b.g.getModelHeader()+\": \"+b.g.getModelDisplayText(k),{v:d,f:d}]})};\ne.getDataTable=function(){var a=this,b=this.g;return this.h.map(function(c){var d=c.data.getAllMetricValues(\"\"),f=c.config;c=b.getAdditionalDisplayTexts(f);var k",
                      "markdown": "`(a,b)}e=U.prototype;\ne.getLineChartData=function(a){var b=this,c=this.h.length;return this.h.map(function(d,f){var k=d.config;d=d.data.getMetricValue(\"\",a);f=c-f;var m=b.i?b.g.getModelId(k):b.g.getDataVersion(k);return[{v:\"number\"==typeof m?m:f,f:b.g.getModelHeader()+\" \"+b.g.getModelDisplayText(k)+\" at \"+b.g.getDataHeader()+\" \"+b.g.getDataDisplayText(k)},b.g.getModelId(k),b.g.getModelHeader()+\": \"+b.g.getModelDisplayText(k),{v:d,f:d}]})};\ne.getDataTable=function(){var a=this,b=this.g;return this.h.map(function(c){var d=c.data.getAllMetricValues(\"\"),f=c.config;c=b.getAdditionalDisplayTexts(f);var k`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 2116,
                  "startColumn": 5636,
                  "endLine": 2116,
                  "endColumn": 5642,
                  "snippet": {
                    "text": "   </paper-radio-button>\\n          <paper-radio-button name=\"[[sortBy_.FALSE_NEGATIVES]]\">\\n            [[getModeText_(sortBy_.FALSE_NEGATIVES)]]\\n          </paper-radio-button>\\n        </paper-radio-group>\\n      </div>\\n      <div>\\n        <label id=\"sort-label\">\\n          <span>\\n            Sort by<iron-icon class=\"info\" icon=\"info-outline\"></iron-icon>:\\n            <paper-tooltip position=\"right\" fit-to-visible-bounds=\"\">\\n              <div class=\"tip\">\\n                How the classes are sorted:\\n                <ul>\\n                  <li>\\n                    alphabetically\\n        ",
                    "rendered": {
                      "text": "   </paper-radio-button>\\n          <paper-radio-button name=\"[[sortBy_.FALSE_NEGATIVES]]\">\\n            [[getModeText_(sortBy_.FALSE_NEGATIVES)]]\\n          </paper-radio-button>\\n        </paper-radio-group>\\n      </div>\\n      <div>\\n        <label id=\"sort-label\">\\n          <span>\\n            Sort by<iron-icon class=\"info\" icon=\"info-outline\"></iron-icon>:\\n            <paper-tooltip position=\"right\" fit-to-visible-bounds=\"\">\\n              <div class=\"tip\">\\n                How the classes are sorted:\\n                <ul>\\n                  <li>\\n                    alphabetically\\n        ",
                      "markdown": "`   </paper-radio-button>\\n          <paper-radio-button name=\"[[sortBy_.FALSE_NEGATIVES]]\">\\n            [[getModeText_(sortBy_.FALSE_NEGATIVES)]]\\n          </paper-radio-button>\\n        </paper-radio-group>\\n      </div>\\n      <div>\\n        <label id=\"sort-label\">\\n          <span>\\n            Sort by<iron-icon class=\"info\" icon=\"info-outline\"></iron-icon>:\\n            <paper-tooltip position=\"right\" fit-to-visible-bounds=\"\">\\n              <div class=\"tip\">\\n                How the classes are sorted:\\n                <ul>\\n                  <li>\\n                    alphabetically\\n        `"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 2090,
                  "startColumn": 3495,
                  "endLine": 2090,
                  "endColumn": 3500,
                  "snippet": {
                    "text": "r: #FFC107;\\n  }\\n  .c13 {\\n    /** Orange */\\n    background-color: #FF9800;\\n  }\\n  .c14 {\\n    /** Deep Orange */\\n    background-color: #FF5722;\\n  }\\n  .c15 {\\n    /** Pink */\\n    background-color: #E91E63;\\n  }\\n\\n  :host(:not([expanded])) #root {\\n    min-height: 30px;\\n    transform-origin: top left;\\n  }\\n\\n  :host(:not([expanded])) .s1 {\\n    transform: scale3d(10, 10, 1);\\n  }\\n\\n  :host(:not([expanded])) .s2 {\\n    transform: scale3d(5, 5, 1);\\n  }\\n\\n  :host(:not([expanded])) .s3 {\\n    transform: scale3d(3.33, 3.33, 1);\\n  }\\n\\n  :host(:not([expanded])) .s4 {\\n    transform: scale3d(",
                    "rendered": {
                      "text": "r: #FFC107;\\n  }\\n  .c13 {\\n    /** Orange */\\n    background-color: #FF9800;\\n  }\\n  .c14 {\\n    /** Deep Orange */\\n    background-color: #FF5722;\\n  }\\n  .c15 {\\n    /** Pink */\\n    background-color: #E91E63;\\n  }\\n\\n  :host(:not([expanded])) #root {\\n    min-height: 30px;\\n    transform-origin: top left;\\n  }\\n\\n  :host(:not([expanded])) .s1 {\\n    transform: scale3d(10, 10, 1);\\n  }\\n\\n  :host(:not([expanded])) .s2 {\\n    transform: scale3d(5, 5, 1);\\n  }\\n\\n  :host(:not([expanded])) .s3 {\\n    transform: scale3d(3.33, 3.33, 1);\\n  }\\n\\n  :host(:not([expanded])) .s4 {\\n    transform: scale3d(",
                      "markdown": "`r: #FFC107;\\n  }\\n  .c13 {\\n    /** Orange */\\n    background-color: #FF9800;\\n  }\\n  .c14 {\\n    /** Deep Orange */\\n    background-color: #FF5722;\\n  }\\n  .c15 {\\n    /** Pink */\\n    background-color: #E91E63;\\n  }\\n\\n  :host(:not([expanded])) #root {\\n    min-height: 30px;\\n    transform-origin: top left;\\n  }\\n\\n  :host(:not([expanded])) .s1 {\\n    transform: scale3d(10, 10, 1);\\n  }\\n\\n  :host(:not([expanded])) .s2 {\\n    transform: scale3d(5, 5, 1);\\n  }\\n\\n  :host(:not([expanded])) .s3 {\\n    transform: scale3d(3.33, 3.33, 1);\\n  }\\n\\n  :host(:not([expanded])) .s4 {\\n    transform: scale3d(`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 2033,
                  "startColumn": 1492,
                  "endLine": 2033,
                  "endColumn": 1500,
                  "snippet": {
                    "text": "   </div>\\n      <div class=\"column\">\\n        [[item.falsePositives]]\\n      </div>\\n      <div class=\"column\">\\n        [[item.falseNegatives]]\\n      </div>\\n    </div>\\n  </template>\\n  <template is=\"dom-if\" if=\"[[expandable_]]\">\\n    <paper-tooltip>\\n      More data available. Click anywhere to expand / collapse.\\n    </paper-tooltip>\\n  </template>\\n</div>\\n\\n\\n');on=\nqn}pn=on;function rn(){return X.call(this)||this}D(rn,X);m=rn.prototype;\nm.computeTransformedData_=function(a,b){var c=this;if(a){var d=[];try{d=JSON.parse(a)}catch(e){}return d.matrices.map(function(e,f){return{showTitle:0==f,thre",
                    "rendered": {
                      "text": "   </div>\\n      <div class=\"column\">\\n        [[item.falsePositives]]\\n      </div>\\n      <div class=\"column\">\\n        [[item.falseNegatives]]\\n      </div>\\n    </div>\\n  </template>\\n  <template is=\"dom-if\" if=\"[[expandable_]]\">\\n    <paper-tooltip>\\n      More data available. Click anywhere to expand / collapse.\\n    </paper-tooltip>\\n  </template>\\n</div>\\n\\n\\n');on=\nqn}pn=on;function rn(){return X.call(this)||this}D(rn,X);m=rn.prototype;\nm.computeTransformedData_=function(a,b){var c=this;if(a){var d=[];try{d=JSON.parse(a)}catch(e){}return d.matrices.map(function(e,f){return{showTitle:0==f,thre",
                      "markdown": "`   </div>\\n      <div class=\"column\">\\n        [[item.falsePositives]]\\n      </div>\\n      <div class=\"column\">\\n        [[item.falseNegatives]]\\n      </div>\\n    </div>\\n  </template>\\n  <template is=\"dom-if\" if=\"[[expandable_]]\">\\n    <paper-tooltip>\\n      More data available. Click anywhere to expand / collapse.\\n    </paper-tooltip>\\n  </template>\\n</div>\\n\\n\\n');on=\nqn}pn=on;function rn(){return X.call(this)||this}D(rn,X);m=rn.prototype;\nm.computeTransformedData_=function(a,b){var c=this;if(a){var d=[];try{d=JSON.parse(a)}catch(e){}return d.matrices.map(function(e,f){return{showTitle:0==f,thre`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 2012,
                  "startColumn": 452,
                  "endLine": 2012,
                  "endColumn": 460,
                  "snippet": {
                    "text": " {\\n    text-align: right;\\n  }\\n</style>\\n<div id=\"root\" on-tap=\"toggleExpanded_\">\\n  <template is=\"dom-repeat\" items=\"[[values_]]\">\\n    <div>[[item]]</div>\\n  </template>\\n</div>\\n<template is=\"dom-if\" if=\"[[expandable_]]\">\\n  <paper-tooltip for=\"root\">\\n    More data available. Click anywhere to expand / collapse.\\n  </paper-tooltip>\\n</template>\\n\\n\\n');Um=\nWm}Vm=Um;function Xm(){return X.call(this)||this}D(Xm,X);Xm.prototype.dataChanged_=function(a){var b={};try{b=JSON.parse(a)}catch(h){}var c=[],d=(a=b.shape)&&a.length;if(d){b=b[(b.dataType+\"\").toLowerCase()+\"Values\"];var e=a.reduce(function(h,",
                    "rendered": {
                      "text": " {\\n    text-align: right;\\n  }\\n</style>\\n<div id=\"root\" on-tap=\"toggleExpanded_\">\\n  <template is=\"dom-repeat\" items=\"[[values_]]\">\\n    <div>[[item]]</div>\\n  </template>\\n</div>\\n<template is=\"dom-if\" if=\"[[expandable_]]\">\\n  <paper-tooltip for=\"root\">\\n    More data available. Click anywhere to expand / collapse.\\n  </paper-tooltip>\\n</template>\\n\\n\\n');Um=\nWm}Vm=Um;function Xm(){return X.call(this)||this}D(Xm,X);Xm.prototype.dataChanged_=function(a){var b={};try{b=JSON.parse(a)}catch(h){}var c=[],d=(a=b.shape)&&a.length;if(d){b=b[(b.dataType+\"\").toLowerCase()+\"Values\"];var e=a.reduce(function(h,",
                      "markdown": "` {\\n    text-align: right;\\n  }\\n</style>\\n<div id=\"root\" on-tap=\"toggleExpanded_\">\\n  <template is=\"dom-repeat\" items=\"[[values_]]\">\\n    <div>[[item]]</div>\\n  </template>\\n</div>\\n<template is=\"dom-if\" if=\"[[expandable_]]\">\\n  <paper-tooltip for=\"root\">\\n    More data available. Click anywhere to expand / collapse.\\n  </paper-tooltip>\\n</template>\\n\\n\\n');Um=\nWm}Vm=Um;function Xm(){return X.call(this)||this}D(Xm,X);Xm.prototype.dataChanged_=function(a){var b={};try{b=JSON.parse(a)}catch(h){}var c=[],d=(a=b.shape)&&a.length;if(d){b=b[(b.dataType+\"\").toLowerCase()+\"Values\"];var e=a.reduce(function(h,`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 1996,
                  "startColumn": 2945,
                  "endLine": 1996,
                  "endColumn": 2951,
                  "snippet": {
                    "text": " files, please wait for few seconds.</li>\\n          <li>TensorBoard can\\u2019t find your event files.</li>\\n          <li>Selected evaluation run doesn\\'t contain any fairness evaluation related data.</li>\\n        </ul>\\n\\n        <p>\\n          If you\\u2019re new to using TensorBoard, and want to find out how to\\n          add data and set up your event files, check out the Fairness Indicators\\n          for Tensorboard\\n          <a href=\"https://www.tensorflow.org/tensorboard/fairness_indicators\" target=\"_blank\">\\n            tutorial\\n          </a>\\n          and Fairness Indicators\\n        ",
                    "rendered": {
                      "text": " files, please wait for few seconds.</li>\\n          <li>TensorBoard can\\u2019t find your event files.</li>\\n          <li>Selected evaluation run doesn\\'t contain any fairness evaluation related data.</li>\\n        </ul>\\n\\n        <p>\\n          If you\\u2019re new to using TensorBoard, and want to find out how to\\n          add data and set up your event files, check out the Fairness Indicators\\n          for Tensorboard\\n          <a href=\"https://www.tensorflow.org/tensorboard/fairness_indicators\" target=\"_blank\">\\n            tutorial\\n          </a>\\n          and Fairness Indicators\\n        ",
                      "markdown": "` files, please wait for few seconds.</li>\\n          <li>TensorBoard can\\u2019t find your event files.</li>\\n          <li>Selected evaluation run doesn\\'t contain any fairness evaluation related data.</li>\\n        </ul>\\n\\n        <p>\\n          If you\\u2019re new to using TensorBoard, and want to find out how to\\n          add data and set up your event files, check out the Fairness Indicators\\n          for Tensorboard\\n          <a href=\"https://www.tensorflow.org/tensorboard/fairness_indicators\" target=\"_blank\">\\n            tutorial\\n          </a>\\n          and Fairness Indicators\\n        `"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 1996,
                  "startColumn": 2724,
                  "endLine": 1996,
                  "endColumn": 2730,
                  "snippet": {
                    "text": "aluation data was found.</h3>\\n        <p>Probable causes:</p>\\n        <ul>\\n          <li>You haven\\u2019t written any evaluation data to your event files.</li>\\n          <li>Tensorboard might be looking for your event files, please wait for few seconds.</li>\\n          <li>TensorBoard can\\u2019t find your event files.</li>\\n          <li>Selected evaluation run doesn\\'t contain any fairness evaluation related data.</li>\\n        </ul>\\n\\n        <p>\\n          If you\\u2019re new to using TensorBoard, and want to find out how to\\n          add data and set up your event files, check out the Fairn",
                    "rendered": {
                      "text": "aluation data was found.</h3>\\n        <p>Probable causes:</p>\\n        <ul>\\n          <li>You haven\\u2019t written any evaluation data to your event files.</li>\\n          <li>Tensorboard might be looking for your event files, please wait for few seconds.</li>\\n          <li>TensorBoard can\\u2019t find your event files.</li>\\n          <li>Selected evaluation run doesn\\'t contain any fairness evaluation related data.</li>\\n        </ul>\\n\\n        <p>\\n          If you\\u2019re new to using TensorBoard, and want to find out how to\\n          add data and set up your event files, check out the Fairn",
                      "markdown": "`aluation data was found.</h3>\\n        <p>Probable causes:</p>\\n        <ul>\\n          <li>You haven\\u2019t written any evaluation data to your event files.</li>\\n          <li>Tensorboard might be looking for your event files, please wait for few seconds.</li>\\n          <li>TensorBoard can\\u2019t find your event files.</li>\\n          <li>Selected evaluation run doesn\\'t contain any fairness evaluation related data.</li>\\n        </ul>\\n\\n        <p>\\n          If you\\u2019re new to using TensorBoard, and want to find out how to\\n          add data and set up your event files, check out the Fairn`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 1837,
                  "startColumn": 408,
                  "endLine": 1837,
                  "endColumn": 414,
                  "snippet": {
                    "text": "nAttached\"},na:{\"shift+tab:keydown\":\"_onShiftTabDown\"},hostAttributes:{tabindex:0},get ca(){this.$||(this.$={});this.$.input||(this._generateInputId(),this.$.input=this.$$(\"#\"+this._inputId));return this.$.input},get vc(){return this.ca},created:function(){this.ji=\"date datetime datetime-local month time week file\".split(\" \")},attached:function(){this._updateAriaLabelledBy();!X&&this.ca&&-1!==\nthis.ji.indexOf(this.ca.type)&&(this.alwaysFloatLabel=!0)},_appendStringWithSpace:function(a,b){a?a=a+\" \"+b:a=b;return a},_onAddonAttached:function(a){a=P(a).kd;if(a.id)this._ariaDescribedBy=this._appendString",
                    "rendered": {
                      "text": "nAttached\"},na:{\"shift+tab:keydown\":\"_onShiftTabDown\"},hostAttributes:{tabindex:0},get ca(){this.$||(this.$={});this.$.input||(this._generateInputId(),this.$.input=this.$$(\"#\"+this._inputId));return this.$.input},get vc(){return this.ca},created:function(){this.ji=\"date datetime datetime-local month time week file\".split(\" \")},attached:function(){this._updateAriaLabelledBy();!X&&this.ca&&-1!==\nthis.ji.indexOf(this.ca.type)&&(this.alwaysFloatLabel=!0)},_appendStringWithSpace:function(a,b){a?a=a+\" \"+b:a=b;return a},_onAddonAttached:function(a){a=P(a).kd;if(a.id)this._ariaDescribedBy=this._appendString",
                      "markdown": "`nAttached\"},na:{\"shift+tab:keydown\":\"_onShiftTabDown\"},hostAttributes:{tabindex:0},get ca(){this.$||(this.$={});this.$.input||(this._generateInputId(),this.$.input=this.$$(\"#\"+this._inputId));return this.$.input},get vc(){return this.ca},created:function(){this.ji=\"date datetime datetime-local month time week file\".split(\" \")},attached:function(){this._updateAriaLabelledBy();!X&&this.ca&&-1!==\nthis.ji.indexOf(this.ca.type)&&(this.alwaysFloatLabel=!0)},_appendStringWithSpace:function(a,b){a?a=a+\" \"+b:a=b;return a},_onAddonAttached:function(a){a=P(a).kd;if(a.id)this._ariaDescribedBy=this._appendString`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 1577,
                  "startColumn": 88,
                  "endLine": 1577,
                  "endColumn": 94,
                  "snippet": {
                    "text": "g=_cssFromModuleImports$$module$third_party$javascript$polymer$v2$polymer$lib$utils$style_gather(f),h=f.querySelector(\"template\");if(h){var k=\"\";h=ag(h,f.jb);for(var l=0;l<h.length;l++){var n=h[l];n.parentNode&&\nn.parentNode.removeChild(n);k+=n.textContent}g+=k}f.j=g||null}f||console.warn(\"Could not find style data in module named\",e);c+=f&&f.j||\"\"}a.textContent=c+a.textContent}this.ownerDocument!==window.document&&window.document.head.appendChild(this);return this._style};ki.prototype.getStyle=ki.prototype.fm;window.customElements.define(\"custom-style\",ki);function li(a,b,c,d,e){var f;e&&(f=\"object",
                    "rendered": {
                      "text": "g=_cssFromModuleImports$$module$third_party$javascript$polymer$v2$polymer$lib$utils$style_gather(f),h=f.querySelector(\"template\");if(h){var k=\"\";h=ag(h,f.jb);for(var l=0;l<h.length;l++){var n=h[l];n.parentNode&&\nn.parentNode.removeChild(n);k+=n.textContent}g+=k}f.j=g||null}f||console.warn(\"Could not find style data in module named\",e);c+=f&&f.j||\"\"}a.textContent=c+a.textContent}this.ownerDocument!==window.document&&window.document.head.appendChild(this);return this._style};ki.prototype.getStyle=ki.prototype.fm;window.customElements.define(\"custom-style\",ki);function li(a,b,c,d,e){var f;e&&(f=\"object",
                      "markdown": "`g=_cssFromModuleImports$$module$third_party$javascript$polymer$v2$polymer$lib$utils$style_gather(f),h=f.querySelector(\"template\");if(h){var k=\"\";h=ag(h,f.jb);for(var l=0;l<h.length;l++){var n=h[l];n.parentNode&&\nn.parentNode.removeChild(n);k+=n.textContent}g+=k}f.j=g||null}f||console.warn(\"Could not find style data in module named\",e);c+=f&&f.j||\"\"}a.textContent=c+a.textContent}this.ownerDocument!==window.document&&window.document.head.appendChild(this);return this._style};ki.prototype.getStyle=ki.prototype.fm;window.customElements.define(\"custom-style\",ki);function li(a,b,c,d,e){var f;e&&(f=\"object`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 1473,
                  "startColumn": 375,
                  "endLine": 1473,
                  "endColumn": 381,
                  "snippet": {
                    "text": " d=b.push,e=d.apply,f;var g=a[c];if(f=Q.import(g)){if(void 0===f.g){g=[];g.push.apply(g,A(_stylesFromModuleImports$$module$third_party$javascript$polymer$v2$polymer$lib$utils$style_gather(f)));var h=f.querySelector(\"template\");h&&g.push.apply(g,A(ag(h,f.jb)));f.g=g}f=f.g}else console.warn(\"Could not find style data in module named\",g),f=[];e.call(d,b,A(f))}return b}\nfunction ag(a,b){if(!a.g){for(var c=[],d=a.content.querySelectorAll(\"style\"),e=0;e<d.length;e++){var f=d[e],g=f.getAttribute(\"include\");g&&c.push.apply(c,A($f(g).filter(function(h,k,l){return l.indexOf(h)===k})));b&&(f.textContent=de(f.t",
                    "rendered": {
                      "text": " d=b.push,e=d.apply,f;var g=a[c];if(f=Q.import(g)){if(void 0===f.g){g=[];g.push.apply(g,A(_stylesFromModuleImports$$module$third_party$javascript$polymer$v2$polymer$lib$utils$style_gather(f)));var h=f.querySelector(\"template\");h&&g.push.apply(g,A(ag(h,f.jb)));f.g=g}f=f.g}else console.warn(\"Could not find style data in module named\",g),f=[];e.call(d,b,A(f))}return b}\nfunction ag(a,b){if(!a.g){for(var c=[],d=a.content.querySelectorAll(\"style\"),e=0;e<d.length;e++){var f=d[e],g=f.getAttribute(\"include\");g&&c.push.apply(c,A($f(g).filter(function(h,k,l){return l.indexOf(h)===k})));b&&(f.textContent=de(f.t",
                      "markdown": "` d=b.push,e=d.apply,f;var g=a[c];if(f=Q.import(g)){if(void 0===f.g){g=[];g.push.apply(g,A(_stylesFromModuleImports$$module$third_party$javascript$polymer$v2$polymer$lib$utils$style_gather(f)));var h=f.querySelector(\"template\");h&&g.push.apply(g,A(ag(h,f.jb)));f.g=g}f=f.g}else console.warn(\"Could not find style data in module named\",g),f=[];e.call(d,b,A(f))}return b}\nfunction ag(a,b){if(!a.g){for(var c=[],d=a.content.querySelectorAll(\"style\"),e=0;e<d.length;e++){var f=d[e],g=f.getAttribute(\"include\");g&&c.push.apply(c,A($f(g).filter(function(h,k,l){return l.indexOf(h)===k})));b&&(f.textContent=de(f.t`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 1291,
                  "startColumn": 7,
                  "endLine": 1291,
                  "endColumn": 13,
                  "snippet": {
                    "text": "se 1:n=Ub(q,n);p=1===n||6===n;break;case 3:case 2:p=!0;break;default:Ja(r,\"got an unknown element classification\")}}if(p)return function(w){return\"\"+d(w,\"STRING\",w)}}return function(w){if(!w&&w!==document.all)return w;c&&c(!0,\"Failed to sanitize \"+(l.parentElement&&l.parentElement.nodeName)+\n\" #text node to value \"+w,l.parentElement);return ec}}var t=l.localName;q=b(l);var v=null;switch(p){case \"attribute\":if(Jb(n)in q)break;return function(w){return w};case \"property\":if(n in q){v=Rb(q,n);break}if((r=Kb(n))&&r in q)break;return function(w){return w};default:Ja(p,\"got an unknown resin type, expected",
                    "rendered": {
                      "text": "se 1:n=Ub(q,n);p=1===n||6===n;break;case 3:case 2:p=!0;break;default:Ja(r,\"got an unknown element classification\")}}if(p)return function(w){return\"\"+d(w,\"STRING\",w)}}return function(w){if(!w&&w!==document.all)return w;c&&c(!0,\"Failed to sanitize \"+(l.parentElement&&l.parentElement.nodeName)+\n\" #text node to value \"+w,l.parentElement);return ec}}var t=l.localName;q=b(l);var v=null;switch(p){case \"attribute\":if(Jb(n)in q)break;return function(w){return w};case \"property\":if(n in q){v=Rb(q,n);break}if((r=Kb(n))&&r in q)break;return function(w){return w};default:Ja(p,\"got an unknown resin type, expected",
                      "markdown": "`se 1:n=Ub(q,n);p=1===n||6===n;break;case 3:case 2:p=!0;break;default:Ja(r,\"got an unknown element classification\")}}if(p)return function(w){return\"\"+d(w,\"STRING\",w)}}return function(w){if(!w&&w!==document.all)return w;c&&c(!0,\"Failed to sanitize \"+(l.parentElement&&l.parentElement.nodeName)+\n\" #text node to value \"+w,l.parentElement);return ec}}var t=l.localName;q=b(l);var v=null;switch(p){case \"attribute\":if(Jb(n)in q)break;return function(w){return w};case \"property\":if(n in q){v=Rb(q,n);break}if((r=Kb(n))&&r in q)break;return function(w){return w};default:Ja(p,\"got an unknown resin type, expected`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 1170,
                  "startColumn": 239,
                  "endLine": 1170,
                  "endColumn": 245,
                  "snippet": {
                    "text": "totype||a==Object.prototype)return a;a[b]=c.value;return a};\nfunction ca(a){a=[\"object\"==typeof globalThis&&globalThis,a,\"object\"==typeof window&&window,\"object\"==typeof self&&self,\"object\"==typeof global&&global];for(var b=0;b<a.length;++b){var c=a[b];if(c&&c.Math==Math)return c}throw Error(\"Cannot find global object\");}var u=ca(this);function x(a,b){if(b)a:{var c=u;a=a.split(\".\");for(var d=0;d<a.length-1;d++){var e=a[d];if(!(e in c))break a;c=c[e]}a=a[a.length-1];d=c[a];b=b(d);b!=d&&null!=b&&ba(c,a,{configurable:!0,writable:!0,value:b})}}\nx(\"Symbol\",function(a){function b(f){if(this instanceof b)t",
                    "rendered": {
                      "text": "totype||a==Object.prototype)return a;a[b]=c.value;return a};\nfunction ca(a){a=[\"object\"==typeof globalThis&&globalThis,a,\"object\"==typeof window&&window,\"object\"==typeof self&&self,\"object\"==typeof global&&global];for(var b=0;b<a.length;++b){var c=a[b];if(c&&c.Math==Math)return c}throw Error(\"Cannot find global object\");}var u=ca(this);function x(a,b){if(b)a:{var c=u;a=a.split(\".\");for(var d=0;d<a.length-1;d++){var e=a[d];if(!(e in c))break a;c=c[e]}a=a[a.length-1];d=c[a];b=b(d);b!=d&&null!=b&&ba(c,a,{configurable:!0,writable:!0,value:b})}}\nx(\"Symbol\",function(a){function b(f){if(this instanceof b)t",
                      "markdown": "`totype||a==Object.prototype)return a;a[b]=c.value;return a};\nfunction ca(a){a=[\"object\"==typeof globalThis&&globalThis,a,\"object\"==typeof window&&window,\"object\"==typeof self&&self,\"object\"==typeof global&&global];for(var b=0;b<a.length;++b){var c=a[b];if(c&&c.Math==Math)return c}throw Error(\"Cannot find global object\");}var u=ca(this);function x(a,b){if(b)a:{var c=u;a=a.split(\".\");for(var d=0;d<a.length-1;d++){var e=a[d];if(!(e in c))break a;c=c[e]}a=a[a.length-1];d=c[a];b=b(d);b!=d&&null!=b&&ba(c,a,{configurable:!0,writable:!0,value:b})}}\nx(\"Symbol\",function(a){function b(f){if(this instanceof b)t`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 1126,
                  "startColumn": 402,
                  "endLine": 1126,
                  "endColumn": 408,
                  "snippet": {
                    "text": "rototype||a==Object.prototype)return a;a[b]=c.value;return a};function h(a){a=[\"object\"==typeof globalThis&&globalThis,a,\"object\"==typeof window&&window,\"object\"==typeof self&&self,\"object\"==typeof global&&global];for(var b=0;b<a.length;++b){var c=a[b];if(c&&c.Math==Math)return c}throw Error(\"Cannot find global object\");}var r=h(this);\nfunction t(a,b){if(b)a:{var c=r;a=a.split(\".\");for(var d=0;d<a.length-1;d++){var f=a[d];if(!(f in c))break a;c=c[f]}a=a[a.length-1];d=c[a];b=b(d);b!=d&&null!=b&&g(c,a,{configurable:!0,writable:!0,value:b})}}function u(a){var b=0;return function(){return b<a.length?{do",
                    "rendered": {
                      "text": "rototype||a==Object.prototype)return a;a[b]=c.value;return a};function h(a){a=[\"object\"==typeof globalThis&&globalThis,a,\"object\"==typeof window&&window,\"object\"==typeof self&&self,\"object\"==typeof global&&global];for(var b=0;b<a.length;++b){var c=a[b];if(c&&c.Math==Math)return c}throw Error(\"Cannot find global object\");}var r=h(this);\nfunction t(a,b){if(b)a:{var c=r;a=a.split(\".\");for(var d=0;d<a.length-1;d++){var f=a[d];if(!(f in c))break a;c=c[f]}a=a[a.length-1];d=c[a];b=b(d);b!=d&&null!=b&&g(c,a,{configurable:!0,writable:!0,value:b})}}function u(a){var b=0;return function(){return b<a.length?{do",
                      "markdown": "`rototype||a==Object.prototype)return a;a[b]=c.value;return a};function h(a){a=[\"object\"==typeof globalThis&&globalThis,a,\"object\"==typeof window&&window,\"object\"==typeof self&&self,\"object\"==typeof global&&global];for(var b=0;b<a.length;++b){var c=a[b];if(c&&c.Math==Math)return c}throw Error(\"Cannot find global object\");}var r=h(this);\nfunction t(a,b){if(b)a:{var c=r;a=a.split(\".\");for(var d=0;d<a.length-1;d++){var f=a[d];if(!(f in c))break a;c=c[f]}a=a[a.length-1];d=c[a];b=b(d);b!=d&&null!=b&&g(c,a,{configurable:!0,writable:!0,value:b})}}function u(a){var b=0;return function(){return b<a.length?{do`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 1076,
                  "startColumn": 665,
                  "endLine": 1076,
                  "endColumn": 670,
                  "snippet": {
                    "text": "order-bottom-right-radius border-top-left-radius border-top-right-radius bottom left letter-spacing margin-bottom margin-left margin-right margin-top min-height min-width outline-offset padding-bottom padding-left padding-right padding-top perspective right shape-margin stroke-dashoffset text-indent top vertical-align word-spacing\".split(\" \"))})(F,\nnull);(function(k,f){function h(a){return k.consumeLengthOrPercent(a)||k.consumeToken(/^auto/,a)}function d(a){if((a=k.consumeList([k.ignore(k.consumeToken.bind(null,/^rect/)),k.ignore(k.consumeToken.bind(null,/^\\(/)),k.consumeRepeated.bind(null,h,/^,/),",
                    "rendered": {
                      "text": "order-bottom-right-radius border-top-left-radius border-top-right-radius bottom left letter-spacing margin-bottom margin-left margin-right margin-top min-height min-width outline-offset padding-bottom padding-left padding-right padding-top perspective right shape-margin stroke-dashoffset text-indent top vertical-align word-spacing\".split(\" \"))})(F,\nnull);(function(k,f){function h(a){return k.consumeLengthOrPercent(a)||k.consumeToken(/^auto/,a)}function d(a){if((a=k.consumeList([k.ignore(k.consumeToken.bind(null,/^rect/)),k.ignore(k.consumeToken.bind(null,/^\\(/)),k.consumeRepeated.bind(null,h,/^,/),",
                      "markdown": "`order-bottom-right-radius border-top-left-radius border-top-right-radius bottom left letter-spacing margin-bottom margin-left margin-right margin-top min-height min-width outline-offset padding-bottom padding-left padding-right padding-top perspective right shape-margin stroke-dashoffset text-indent top vertical-align word-spacing\".split(\" \"))})(F,\nnull);(function(k,f){function h(a){return k.consumeLengthOrPercent(a)||k.consumeToken(/^auto/,a)}function d(a){if((a=k.consumeList([k.ignore(k.consumeToken.bind(null,/^rect/)),k.ignore(k.consumeToken.bind(null,/^\\(/)),k.consumeRepeated.bind(null,h,/^,/),`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 1040,
                  "startColumn": 211,
                  "endLine": 1040,
                  "endColumn": 217,
                  "snippet": {
                    "text": "],q=h.style[u],t[u]=u in d?d[u][q]||q:q;else t[u]=u in d?d[u][q]||q:q}void 0==l.offset&&\n(l.offset=null);void 0==l.easing&&(l.easing=\"linear\");return l});a=!0;for(var g=-Infinity,e=0;e<b.length;e++){var m=b[e].offset;if(null!=m){if(m<g)throw new TypeError(\"Keyframes are not loosely sorted by offset. Sort or specify offsets.\");g=m}else a=!1}b=b.filter(function(n){return 0<=n.offset&&1>=n.offset});a||c();return b}})(G,null);(function(y){var v={};y.isDeprecated=function(k,f,h,d){d=d?\"are\":\"is\";var a=new Date;f=new Date(f);f.setMonth(f.getMonth()+3);return a<f?(k in v||console.warn(\"Web Animations: \"+\nk",
                    "rendered": {
                      "text": "],q=h.style[u],t[u]=u in d?d[u][q]||q:q;else t[u]=u in d?d[u][q]||q:q}void 0==l.offset&&\n(l.offset=null);void 0==l.easing&&(l.easing=\"linear\");return l});a=!0;for(var g=-Infinity,e=0;e<b.length;e++){var m=b[e].offset;if(null!=m){if(m<g)throw new TypeError(\"Keyframes are not loosely sorted by offset. Sort or specify offsets.\");g=m}else a=!1}b=b.filter(function(n){return 0<=n.offset&&1>=n.offset});a||c();return b}})(G,null);(function(y){var v={};y.isDeprecated=function(k,f,h,d){d=d?\"are\":\"is\";var a=new Date;f=new Date(f);f.setMonth(f.getMonth()+3);return a<f?(k in v||console.warn(\"Web Animations: \"+\nk",
                      "markdown": "`],q=h.style[u],t[u]=u in d?d[u][q]||q:q;else t[u]=u in d?d[u][q]||q:q}void 0==l.offset&&\n(l.offset=null);void 0==l.easing&&(l.easing=\"linear\");return l});a=!0;for(var g=-Infinity,e=0;e<b.length;e++){var m=b[e].offset;if(null!=m){if(m<g)throw new TypeError(\"Keyframes are not loosely sorted by offset. Sort or specify offsets.\");g=m}else a=!1}b=b.filter(function(n){return 0<=n.offset&&1>=n.offset});a||c();return b}})(G,null);(function(y){var v={};y.isDeprecated=function(k,f,h,d){d=d?\"are\":\"is\";var a=new Date;f=new Date(f);f.setMonth(f.getMonth()+3);return a<f?(k in v||console.warn(\"Web Animations: \"+\nk`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 979,
                  "startColumn": 453,
                  "endLine": 979,
                  "endColumn": 459,
                  "snippet": {
                    "text": "ect.prototype)return b;b[d]=c.value;return b};$jscomp.getGlobal=function(b){b=[\"object\"==typeof globalThis&&globalThis,b,\"object\"==typeof window&&window,\"object\"==typeof self&&self,\"object\"==typeof global&&global];for(var d=0;d<b.length;++d){var c=b[d];if(c&&c.Math==Math)return c}throw Error(\"Cannot find global object\");};$jscomp.global=$jscomp.getGlobal(this);\n$jscomp.IS_SYMBOL_NATIVE=\"function\"===typeof Symbol&&\"symbol\"===typeof Symbol(\"x\");$jscomp.TRUST_ES6_POLYFILLS=!$jscomp.ISOLATE_POLYFILLS||$jscomp.IS_SYMBOL_NATIVE;$jscomp.polyfills={};$jscomp.propertyToPolyfillSymbol={};$jscomp.POLYFILL_PREF",
                    "rendered": {
                      "text": "ect.prototype)return b;b[d]=c.value;return b};$jscomp.getGlobal=function(b){b=[\"object\"==typeof globalThis&&globalThis,b,\"object\"==typeof window&&window,\"object\"==typeof self&&self,\"object\"==typeof global&&global];for(var d=0;d<b.length;++d){var c=b[d];if(c&&c.Math==Math)return c}throw Error(\"Cannot find global object\");};$jscomp.global=$jscomp.getGlobal(this);\n$jscomp.IS_SYMBOL_NATIVE=\"function\"===typeof Symbol&&\"symbol\"===typeof Symbol(\"x\");$jscomp.TRUST_ES6_POLYFILLS=!$jscomp.ISOLATE_POLYFILLS||$jscomp.IS_SYMBOL_NATIVE;$jscomp.polyfills={};$jscomp.propertyToPolyfillSymbol={};$jscomp.POLYFILL_PREF",
                      "markdown": "`ect.prototype)return b;b[d]=c.value;return b};$jscomp.getGlobal=function(b){b=[\"object\"==typeof globalThis&&globalThis,b,\"object\"==typeof window&&window,\"object\"==typeof self&&self,\"object\"==typeof global&&global];for(var d=0;d<b.length;++d){var c=b[d];if(c&&c.Math==Math)return c}throw Error(\"Cannot find global object\");};$jscomp.global=$jscomp.getGlobal(this);\n$jscomp.IS_SYMBOL_NATIVE=\"function\"===typeof Symbol&&\"symbol\"===typeof Symbol(\"x\");$jscomp.TRUST_ES6_POLYFILLS=!$jscomp.ISOLATE_POLYFILLS||$jscomp.IS_SYMBOL_NATIVE;$jscomp.polyfills={};$jscomp.propertyToPolyfillSymbol={};$jscomp.POLYFILL_PREF`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 234,
                  "startColumn": 301,
                  "endLine": 234,
                  "endColumn": 307,
                  "snippet": {
                    "text": "his.ownerDocument&&this.ownerDocument.adoptNode(a);return a},appendChild:function(a){if(this!=a||!K(a))return this.__shady_insertBefore(a)},removeChild:function(a,b){b=void 0===b?!1:b;if(this.ownerDocument!==ee)return this.__shady_native_removeChild(a);if(a.__shady_parentNode!==this)throw Error(\"The node to be removed is not a child of this node: \"+a);le(this,null,a);var c=me(a),d=c&&c.ic(a),e=I(this);if(nc(this)&&(oe(a,this),oc(this))){e.root.u();var f=!0}if(Yd()&&!b&&c&&a.nodeType!==Node.TEXT_NODE){var g=\nce(a);de(a,function(h){ae(h,g)})}je(a);c&&((b=\"slot\"===this.localName)&&(f=!0),(d||b)&&c.u())",
                    "rendered": {
                      "text": "his.ownerDocument&&this.ownerDocument.adoptNode(a);return a},appendChild:function(a){if(this!=a||!K(a))return this.__shady_insertBefore(a)},removeChild:function(a,b){b=void 0===b?!1:b;if(this.ownerDocument!==ee)return this.__shady_native_removeChild(a);if(a.__shady_parentNode!==this)throw Error(\"The node to be removed is not a child of this node: \"+a);le(this,null,a);var c=me(a),d=c&&c.ic(a),e=I(this);if(nc(this)&&(oe(a,this),oc(this))){e.root.u();var f=!0}if(Yd()&&!b&&c&&a.nodeType!==Node.TEXT_NODE){var g=\nce(a);de(a,function(h){ae(h,g)})}je(a);c&&((b=\"slot\"===this.localName)&&(f=!0),(d||b)&&c.u())",
                      "markdown": "`his.ownerDocument&&this.ownerDocument.adoptNode(a);return a},appendChild:function(a){if(this!=a||!K(a))return this.__shady_insertBefore(a)},removeChild:function(a,b){b=void 0===b?!1:b;if(this.ownerDocument!==ee)return this.__shady_native_removeChild(a);if(a.__shady_parentNode!==this)throw Error(\"The node to be removed is not a child of this node: \"+a);le(this,null,a);var c=me(a),d=c&&c.ic(a),e=I(this);if(nc(this)&&(oe(a,this),oc(this))){e.root.u();var f=!0}if(Yd()&&!b&&c&&a.nodeType!==Node.TEXT_NODE){var g=\nce(a);de(a,function(h){ae(h,g)})}je(a);c&&((b=\"slot\"===this.localName)&&(f=!0),(d||b)&&c.u())`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 232,
                  "startColumn": 193,
                  "endLine": 232,
                  "endColumn": 199,
                  "snippet": {
                    "text": "this)throw Error(\"Failed to execute 'appendChild' on 'Node': The new child element contains the parent.\");\nif(b){var c=I(b);c=c&&c.parentNode;if(void 0!==c&&c!==this||void 0===c&&b.__shady_native_parentNode!==this)throw Error(\"Failed to execute 'insertBefore' on 'Node': The node before which the new node is to be inserted is not a child of this node.\");}if(b===a)return a;le(this,a);var d=[],e=(c=me(this))?c.host.localName:ce(this),f=a.__shady_parentNode;if(f){var g=ce(a);var h=!!c||!me(a)||fe&&void 0!==this.__noInsertionPoint;f.__shady_removeChild(a,h)}f=!0;var k=(!fe||void 0===a.__noInsertionPoint&",
                    "rendered": {
                      "text": "this)throw Error(\"Failed to execute 'appendChild' on 'Node': The new child element contains the parent.\");\nif(b){var c=I(b);c=c&&c.parentNode;if(void 0!==c&&c!==this||void 0===c&&b.__shady_native_parentNode!==this)throw Error(\"Failed to execute 'insertBefore' on 'Node': The node before which the new node is to be inserted is not a child of this node.\");}if(b===a)return a;le(this,a);var d=[],e=(c=me(this))?c.host.localName:ce(this),f=a.__shady_parentNode;if(f){var g=ce(a);var h=!!c||!me(a)||fe&&void 0!==this.__noInsertionPoint;f.__shady_removeChild(a,h)}f=!0;var k=(!fe||void 0===a.__noInsertionPoint&",
                      "markdown": "`this)throw Error(\"Failed to execute 'appendChild' on 'Node': The new child element contains the parent.\");\nif(b){var c=I(b);c=c&&c.parentNode;if(void 0!==c&&c!==this||void 0===c&&b.__shady_native_parentNode!==this)throw Error(\"Failed to execute 'insertBefore' on 'Node': The node before which the new node is to be inserted is not a child of this node.\");}if(b===a)return a;le(this,a);var d=[],e=(c=me(this))?c.host.localName:ce(this),f=a.__shady_parentNode;if(f){var g=ce(a);var h=!!c||!me(a)||fe&&void 0!==this.__noInsertionPoint;f.__shady_removeChild(a,h)}f=!0;var k=(!fe||void 0===a.__noInsertionPoint&`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 232,
                  "startColumn": 167,
                  "endLine": 232,
                  "endColumn": 173,
                  "snippet": {
                    "text": "nsertBefore(a,b),a;if(a===this)throw Error(\"Failed to execute 'appendChild' on 'Node': The new child element contains the parent.\");\nif(b){var c=I(b);c=c&&c.parentNode;if(void 0!==c&&c!==this||void 0===c&&b.__shady_native_parentNode!==this)throw Error(\"Failed to execute 'insertBefore' on 'Node': The node before which the new node is to be inserted is not a child of this node.\");}if(b===a)return a;le(this,a);var d=[],e=(c=me(this))?c.host.localName:ce(this),f=a.__shady_parentNode;if(f){var g=ce(a);var h=!!c||!me(a)||fe&&void 0!==this.__noInsertionPoint;f.__shady_removeChild(a,h)}f=!0;var k=(!fe||void",
                    "rendered": {
                      "text": "nsertBefore(a,b),a;if(a===this)throw Error(\"Failed to execute 'appendChild' on 'Node': The new child element contains the parent.\");\nif(b){var c=I(b);c=c&&c.parentNode;if(void 0!==c&&c!==this||void 0===c&&b.__shady_native_parentNode!==this)throw Error(\"Failed to execute 'insertBefore' on 'Node': The node before which the new node is to be inserted is not a child of this node.\");}if(b===a)return a;le(this,a);var d=[],e=(c=me(this))?c.host.localName:ce(this),f=a.__shady_parentNode;if(f){var g=ce(a);var h=!!c||!me(a)||fe&&void 0!==this.__noInsertionPoint;f.__shady_removeChild(a,h)}f=!0;var k=(!fe||void",
                      "markdown": "`nsertBefore(a,b),a;if(a===this)throw Error(\"Failed to execute 'appendChild' on 'Node': The new child element contains the parent.\");\nif(b){var c=I(b);c=c&&c.parentNode;if(void 0!==c&&c!==this||void 0===c&&b.__shady_native_parentNode!==this)throw Error(\"Failed to execute 'insertBefore' on 'Node': The node before which the new node is to be inserted is not a child of this node.\");}if(b===a)return a;le(this,a);var d=[],e=(c=me(this))?c.host.localName:ce(this),f=a.__shady_parentNode;if(f){var g=ce(a);var h=!!c||!me(a)||fe&&void 0!==this.__noInsertionPoint;f.__shady_removeChild(a,h)}f=!0;var k=(!fe||void`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 193,
                  "startColumn": 723,
                  "endLine": 193,
                  "endColumn": 731,
                  "snippet": {
                    "text": ":return\"&amp;\";case \"<\":return\"&lt;\";case \">\":return\"&gt;\";case '\"':return\"&quot;\";case \"\\u00a0\":return\"&nbsp;\"}}function Tc(a){for(var b={},c=0;c<a.length;c++)b[a[c]]=!0;return b}var Uc=Tc(\"area base br col command embed hr img input keygen link meta param source track wbr\".split(\" \")),Vc=Tc(\"style script xmp iframe noembed noframes plaintext noscript\".split(\" \"));\nfunction Wc(a,b){\"template\"===a.localName&&(a=a.content);for(var c=\"\",d=b?b(a):a.childNodes,e=0,f=d.length,g=void 0;e<f&&(g=d[e]);e++){a:{var h=g;var k=a,l=b;switch(h.nodeType){case Node.ELEMENT_NODE:k=h.localName;for(var p=\"<\"+k,x=h.attri",
                    "rendered": {
                      "text": ":return\"&amp;\";case \"<\":return\"&lt;\";case \">\":return\"&gt;\";case '\"':return\"&quot;\";case \"\\u00a0\":return\"&nbsp;\"}}function Tc(a){for(var b={},c=0;c<a.length;c++)b[a[c]]=!0;return b}var Uc=Tc(\"area base br col command embed hr img input keygen link meta param source track wbr\".split(\" \")),Vc=Tc(\"style script xmp iframe noembed noframes plaintext noscript\".split(\" \"));\nfunction Wc(a,b){\"template\"===a.localName&&(a=a.content);for(var c=\"\",d=b?b(a):a.childNodes,e=0,f=d.length,g=void 0;e<f&&(g=d[e]);e++){a:{var h=g;var k=a,l=b;switch(h.nodeType){case Node.ELEMENT_NODE:k=h.localName;for(var p=\"<\"+k,x=h.attri",
                      "markdown": "`:return\"&amp;\";case \"<\":return\"&lt;\";case \">\":return\"&gt;\";case '\"':return\"&quot;\";case \"\\u00a0\":return\"&nbsp;\"}}function Tc(a){for(var b={},c=0;c<a.length;c++)b[a[c]]=!0;return b}var Uc=Tc(\"area base br col command embed hr img input keygen link meta param source track wbr\".split(\" \")),Vc=Tc(\"style script xmp iframe noembed noframes plaintext noscript\".split(\" \"));\nfunction Wc(a,b){\"template\"===a.localName&&(a=a.content);for(var c=\"\",d=b?b(a):a.childNodes,e=0,f=d.length,g=void 0;e<f&&(g=d[e]);e++){a:{var h=g;var k=a,l=b;switch(h.nodeType){case Node.ELEMENT_NODE:k=h.localName;for(var p=\"<\"+k,x=h.attri`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 156,
                  "startColumn": 186,
                  "endLine": 156,
                  "endColumn": 194,
                  "snippet": {
                    "text": "return\"&amp;\";case \"<\":return\"&lt;\";case \">\":return\"&gt;\";case '\"':return\"&quot;\";case \"\\u00a0\":return\"&nbsp;\"}};\nna=function(t){for(var u={},D=0;D<t.length;D++)u[t[D]]=!0;return u};var C=na(\"area base br col command embed hr img input keygen link meta param source track wbr\".split(\" \")),y=na(\"style script xmp iframe noembed noframes plaintext noscript\".split(\" \")),E=function(t,u){\"template\"===t.localName&&(t=t.content);for(var D=\"\",G=u?u(t):da.get.call(t),X=0,ha=G.length,ma;X<ha&&(ma=G[X]);X++){a:{var z=ma;var N=t;var hb=u;switch(z.nodeType){case Node.ELEMENT_NODE:for(var $b=z.localName,ib=\"<\"+$b,Wg=",
                    "rendered": {
                      "text": "return\"&amp;\";case \"<\":return\"&lt;\";case \">\":return\"&gt;\";case '\"':return\"&quot;\";case \"\\u00a0\":return\"&nbsp;\"}};\nna=function(t){for(var u={},D=0;D<t.length;D++)u[t[D]]=!0;return u};var C=na(\"area base br col command embed hr img input keygen link meta param source track wbr\".split(\" \")),y=na(\"style script xmp iframe noembed noframes plaintext noscript\".split(\" \")),E=function(t,u){\"template\"===t.localName&&(t=t.content);for(var D=\"\",G=u?u(t):da.get.call(t),X=0,ha=G.length,ma;X<ha&&(ma=G[X]);X++){a:{var z=ma;var N=t;var hb=u;switch(z.nodeType){case Node.ELEMENT_NODE:for(var $b=z.localName,ib=\"<\"+$b,Wg=",
                      "markdown": "`return\"&amp;\";case \"<\":return\"&lt;\";case \">\":return\"&gt;\";case '\"':return\"&quot;\";case \"\\u00a0\":return\"&nbsp;\"}};\nna=function(t){for(var u={},D=0;D<t.length;D++)u[t[D]]=!0;return u};var C=na(\"area base br col command embed hr img input keygen link meta param source track wbr\".split(\" \")),y=na(\"style script xmp iframe noembed noframes plaintext noscript\".split(\" \")),E=function(t,u){\"template\"===t.localName&&(t=t.content);for(var D=\"\",G=u?u(t):da.get.call(t),X=0,ha=G.length,ma;X<ha&&(ma=G[X]);X++){a:{var z=ma;var N=t;var hb=u;switch(z.nodeType){case Node.ELEMENT_NODE:for(var $b=z.localName,ib=\"<\"+$b,Wg=`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/vulcanized_tfma.js"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 338,
                  "endLine": 46,
                  "endColumn": 344,
                  "snippet": {
                    "text": "nction(){return b<a.length?{done:!1,value:a[b++]}:{done:!0}}}function ba(a){a=[\"object\"==typeof globalThis&&globalThis,a,\"object\"==typeof window&&window,\"object\"==typeof self&&self,\"object\"==typeof global&&global];for(var b=0;b<a.length;++b){var c=a[b];if(c&&c.Math==Math)return c}throw Error(\"Cannot find global object\");}var ca=ba(this);function ea(a){var b=\"undefined\"!=typeof Symbol&&Symbol.iterator&&a[Symbol.iterator];return b?b.call(a):{next:aa(a)}}\nfunction w(a){if(!(a instanceof Array)){a=ea(a);for(var b,c=[];!(b=a.next()).done;)c.push(b.value);a=c}return a}function A(){for(var a=Number(this),b",
                    "rendered": {
                      "text": "nction(){return b<a.length?{done:!1,value:a[b++]}:{done:!0}}}function ba(a){a=[\"object\"==typeof globalThis&&globalThis,a,\"object\"==typeof window&&window,\"object\"==typeof self&&self,\"object\"==typeof global&&global];for(var b=0;b<a.length;++b){var c=a[b];if(c&&c.Math==Math)return c}throw Error(\"Cannot find global object\");}var ca=ba(this);function ea(a){var b=\"undefined\"!=typeof Symbol&&Symbol.iterator&&a[Symbol.iterator];return b?b.call(a):{next:aa(a)}}\nfunction w(a){if(!(a instanceof Array)){a=ea(a);for(var b,c=[];!(b=a.next()).done;)c.push(b.value);a=c}return a}function A(){for(var a=Number(this),b",
                      "markdown": "`nction(){return b<a.length?{done:!1,value:a[b++]}:{done:!0}}}function ba(a){a=[\"object\"==typeof globalThis&&globalThis,a,\"object\"==typeof window&&window,\"object\"==typeof self&&self,\"object\"==typeof global&&global];for(var b=0;b<a.length;++b){var c=a[b];if(c&&c.Math==Math)return c}throw Error(\"Cannot find global object\");}var ca=ba(this);function ea(a){var b=\"undefined\"!=typeof Symbol&&Symbol.iterator&&a[Symbol.iterator];return b?b.call(a):{next:aa(a)}}\nfunction w(a){if(!(a instanceof Array)){a=ea(a);for(var b,c=[];!(b=a.next()).done;)c.push(b.value);a=c}return a}function A(){for(var a=Number(this),b`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/notebook/jupyter/__init__.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/score_distribution_plot_test.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/preprocessors/utils/bounding_box."
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/preprocessors/utils/bounding_box."
                },
                "region": {
                  "startLine": 137,
                  "startColumn": 31,
                  "endLine": 137,
                  "endColumn": 37,
                  "snippet": {
                    "text": "                     f'( <batch_size>, {CONFIDENCE}+)')\n\n  if boxes.shape[1] <= CONFIDENCE:\n    warnings.warn('The axis for sort does not exist, return the original data')\n    return boxes\n  inds = np.argsort(-boxes[:, CONFIDENCE], kind='mergesort')\n  return boxes[inds]\n",
                    "rendered": {
                      "text": "                     f'( <batch_size>, {CONFIDENCE}+)')\n\n  if boxes.shape[1] <= CONFIDENCE:\n    warnings.warn('The axis for sort does not exist, return the original data')\n    return boxes\n  inds = np.argsort(-boxes[:, CONFIDENCE], kind='mergesort')\n  return boxes[inds]\n",
                      "markdown": "`                     f'( <batch_size>, {CONFIDENCE}+)')\n\n  if boxes.shape[1] <= CONFIDENCE:\n    warnings.warn('The axis for sort does not exist, return the original data')\n    return boxes\n  inds = np.argsort(-boxes[:, CONFIDENCE], kind='mergesort')\n  return boxes[inds]\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/preprocessors/utils/bounding_box."
                },
                "region": {
                  "startLine": 123,
                  "startColumn": 21,
                  "endLine": 123,
                  "endColumn": 27,
                  "snippet": {
                    "text": "def sort_boxes_by_confidence(boxes: np.ndarray) -> np.ndarray:\n  \"\"\"Sort boxes according the confidence in descending order.\n\n    It is using merge sort to agree with COCO metrics.\n\n  Args:\n   boxes: a numpy array representing the bounding boxes in the following format\n",
                    "rendered": {
                      "text": "def sort_boxes_by_confidence(boxes: np.ndarray) -> np.ndarray:\n  \"\"\"Sort boxes according the confidence in descending order.\n\n    It is using merge sort to agree with COCO metrics.\n\n  Args:\n   boxes: a numpy array representing the bounding boxes in the following format\n",
                      "markdown": "`def sort_boxes_by_confidence(boxes: np.ndarray) -> np.ndarray:\n  \"\"\"Sort boxes according the confidence in descending order.\n\n    It is using merge sort to agree with COCO metrics.\n\n  Args:\n   boxes: a numpy array representing the bounding boxes in the following format\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/preprocessors/utils/bounding_box."
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 34,
                  "endLine": 49,
                  "endColumn": 39,
                  "snippet": {
                    "text": "                                                     boxes[:, LEFT]))\n  if np.any(boxes[:, BOTTOM] - boxes[:, TOP] < 0):\n    raise ValueError('The BOTTOM boundary is less than the TOP boundary '\n                     'BOTTOM = {}, TOP = {}.'.format(boxes[:, BOTTOM],\n                                                     boxes[:, TOP]))\n  boxes_width = boxes[:, RIGHT] - boxes[:, LEFT]\n  boxes_height = boxes[:, BOTTOM] - boxes[:, TOP]\n",
                    "rendered": {
                      "text": "                                                     boxes[:, LEFT]))\n  if np.any(boxes[:, BOTTOM] - boxes[:, TOP] < 0):\n    raise ValueError('The BOTTOM boundary is less than the TOP boundary '\n                     'BOTTOM = {}, TOP = {}.'.format(boxes[:, BOTTOM],\n                                                     boxes[:, TOP]))\n  boxes_width = boxes[:, RIGHT] - boxes[:, LEFT]\n  boxes_height = boxes[:, BOTTOM] - boxes[:, TOP]\n",
                      "markdown": "`                                                     boxes[:, LEFT]))\n  if np.any(boxes[:, BOTTOM] - boxes[:, TOP] < 0):\n    raise ValueError('The BOTTOM boundary is less than the TOP boundary '\n                     'BOTTOM = {}, TOP = {}.'.format(boxes[:, BOTTOM],\n                                                     boxes[:, TOP]))\n  boxes_width = boxes[:, RIGHT] - boxes[:, LEFT]\n  boxes_height = boxes[:, BOTTOM] - boxes[:, TOP]\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/preprocessors/utils/bounding_box."
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 58,
                  "endLine": 48,
                  "endColumn": 63,
                  "snippet": {
                    "text": "                     'right = {}, left = {}.'.format(boxes[:, RIGHT],\n                                                     boxes[:, LEFT]))\n  if np.any(boxes[:, BOTTOM] - boxes[:, TOP] < 0):\n    raise ValueError('The BOTTOM boundary is less than the TOP boundary '\n                     'BOTTOM = {}, TOP = {}.'.format(boxes[:, BOTTOM],\n                                                     boxes[:, TOP]))\n  boxes_width = boxes[:, RIGHT] - boxes[:, LEFT]\n",
                    "rendered": {
                      "text": "                     'right = {}, left = {}.'.format(boxes[:, RIGHT],\n                                                     boxes[:, LEFT]))\n  if np.any(boxes[:, BOTTOM] - boxes[:, TOP] < 0):\n    raise ValueError('The BOTTOM boundary is less than the TOP boundary '\n                     'BOTTOM = {}, TOP = {}.'.format(boxes[:, BOTTOM],\n                                                     boxes[:, TOP]))\n  boxes_width = boxes[:, RIGHT] - boxes[:, LEFT]\n",
                      "markdown": "`                     'right = {}, left = {}.'.format(boxes[:, RIGHT],\n                                                     boxes[:, LEFT]))\n  if np.any(boxes[:, BOTTOM] - boxes[:, TOP] < 0):\n    raise ValueError('The BOTTOM boundary is less than the TOP boundary '\n                     'BOTTOM = {}, TOP = {}.'.format(boxes[:, BOTTOM],\n                                                     boxes[:, TOP]))\n  boxes_width = boxes[:, RIGHT] - boxes[:, LEFT]\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/binary_confusion_matrices.py"
                },
                "region": {
                  "startLine": 480,
                  "startColumn": 26,
                  "endLine": 480,
                  "endColumn": 30,
                  "snippet": {
                    "text": "  fn = fn[threshold_offset:threshold_offset + len(thresholds)]\n  # We sum all values >= bucket i, but TP/FP values greater that 1.0 + EPSILON\n  # should be 0.0. The FN/TN above 1.0 + _EPSILON should also be adjusted to\n  # match the TP/FP values at the start.\n  for i, t in enumerate(thresholds):\n    if t >= 1.0 + _EPSILON:\n      tp[i] = 0.0\n",
                    "rendered": {
                      "text": "  fn = fn[threshold_offset:threshold_offset + len(thresholds)]\n  # We sum all values >= bucket i, but TP/FP values greater that 1.0 + EPSILON\n  # should be 0.0. The FN/TN above 1.0 + _EPSILON should also be adjusted to\n  # match the TP/FP values at the start.\n  for i, t in enumerate(thresholds):\n    if t >= 1.0 + _EPSILON:\n      tp[i] = 0.0\n",
                      "markdown": "`  fn = fn[threshold_offset:threshold_offset + len(thresholds)]\n  # We sum all values >= bucket i, but TP/FP values greater that 1.0 + EPSILON\n  # should be 0.0. The FN/TN above 1.0 + _EPSILON should also be adjusted to\n  # match the TP/FP values at the start.\n  for i, t in enumerate(thresholds):\n    if t >= 1.0 + _EPSILON:\n      tp[i] = 0.0\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/binary_confusion_matrices.py"
                },
                "region": {
                  "startLine": 422,
                  "startColumn": 62,
                  "endLine": 422,
                  "endColumn": 66,
                  "snippet": {
                    "text": "          # first threshold.\n          rebin_thresholds = [-_EPSILON] + rebin_thresholds\n        if thresholds[-1] < 1.0:\n          # If the last threshold < 1.0, then add a fence post at 1.0 + epsilon\n          # otherwise true negatives and true positives will be overcounted.\n          rebin_thresholds = rebin_thresholds + [1.0 + _EPSILON]\n        histogram = calibration_histogram.rebin(rebin_thresholds,\n",
                    "rendered": {
                      "text": "          # first threshold.\n          rebin_thresholds = [-_EPSILON] + rebin_thresholds\n        if thresholds[-1] < 1.0:\n          # If the last threshold < 1.0, then add a fence post at 1.0 + epsilon\n          # otherwise true negatives and true positives will be overcounted.\n          rebin_thresholds = rebin_thresholds + [1.0 + _EPSILON]\n        histogram = calibration_histogram.rebin(rebin_thresholds,\n",
                      "markdown": "`          # first threshold.\n          rebin_thresholds = [-_EPSILON] + rebin_thresholds\n        if thresholds[-1] < 1.0:\n          # If the last threshold < 1.0, then add a fence post at 1.0 + epsilon\n          # otherwise true negatives and true positives will be overcounted.\n          rebin_thresholds = rebin_thresholds + [1.0 + _EPSILON]\n        histogram = calibration_histogram.rebin(rebin_thresholds,\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/binary_confusion_matrices.py"
                },
                "region": {
                  "startLine": 342,
                  "startColumn": 42,
                  "endLine": 342,
                  "endColumn": 46,
                  "snippet": {
                    "text": "    # all predictions are matched - i.e. thresholds <= 0) we will assume that\n    # other metrics will make use of the calibration histogram and re-use the\n    # default histogram for the given model_name/output_name/sub_key. This is\n    # also required to get accurate counts at the threshold boundaries. If this\n    # becomes an issue, then calibration histogram can be updated to support\n    # non-linear boundaries.\n    # If used for object_detection, to distinguish between histograms with\n",
                    "rendered": {
                      "text": "    # all predictions are matched - i.e. thresholds <= 0) we will assume that\n    # other metrics will make use of the calibration histogram and re-use the\n    # default histogram for the given model_name/output_name/sub_key. This is\n    # also required to get accurate counts at the threshold boundaries. If this\n    # becomes an issue, then calibration histogram can be updated to support\n    # non-linear boundaries.\n    # If used for object_detection, to distinguish between histograms with\n",
                      "markdown": "`    # all predictions are matched - i.e. thresholds <= 0) we will assume that\n    # other metrics will make use of the calibration histogram and re-use the\n    # default histogram for the given model_name/output_name/sub_key. This is\n    # also required to get accurate counts at the threshold boundaries. If this\n    # becomes an issue, then calibration histogram can be updated to support\n    # non-linear boundaries.\n    # If used for object_detection, to distinguish between histograms with\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/binary_confusion_matrices.py"
                },
                "region": {
                  "startLine": 271,
                  "startColumn": 60,
                  "endLine": 271,
                  "endColumn": 64,
                  "snippet": {
                    "text": "      thresholds = None\n  if num_thresholds is not None and thresholds is not None:\n    raise ValueError(\n        'only one of thresholds or num_thresholds can be set at a time: '\n        f'num_thresholds={num_thresholds}, thresholds={thresholds}, '\n        f'len(thresholds)={len(thresholds)})')\n  if num_thresholds is None and thresholds is None:\n",
                    "rendered": {
                      "text": "      thresholds = None\n  if num_thresholds is not None and thresholds is not None:\n    raise ValueError(\n        'only one of thresholds or num_thresholds can be set at a time: '\n        f'num_thresholds={num_thresholds}, thresholds={thresholds}, '\n        f'len(thresholds)={len(thresholds)})')\n  if num_thresholds is None and thresholds is None:\n",
                      "markdown": "`      thresholds = None\n  if num_thresholds is not None and thresholds is not None:\n    raise ValueError(\n        'only one of thresholds or num_thresholds can be set at a time: '\n        f'num_thresholds={num_thresholds}, thresholds={thresholds}, '\n        f'len(thresholds)={len(thresholds)})')\n  if num_thresholds is None and thresholds is None:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/binary_confusion_matrices.py"
                },
                "region": {
                  "startLine": 255,
                  "startColumn": 61,
                  "endLine": 255,
                  "endColumn": 65,
                  "snippet": {
                    "text": "      the labels only take on the values of 0.0 or 1.0.\n\n  Raises:\n    ValueError: If both num_thresholds and thresholds are set at the same time.\n  \"\"\"\n  # TF v1 Keras AUC turns num_thresholds parameters into thresholds which\n  # circumvents sharing of settings. If the thresholds match the interpolated\n",
                    "rendered": {
                      "text": "      the labels only take on the values of 0.0 or 1.0.\n\n  Raises:\n    ValueError: If both num_thresholds and thresholds are set at the same time.\n  \"\"\"\n  # TF v1 Keras AUC turns num_thresholds parameters into thresholds which\n  # circumvents sharing of settings. If the thresholds match the interpolated\n",
                      "markdown": "`      the labels only take on the values of 0.0 or 1.0.\n\n  Raises:\n    ValueError: If both num_thresholds and thresholds are set at the same time.\n  \"\"\"\n  # TF v1 Keras AUC turns num_thresholds parameters into thresholds which\n  # circumvents sharing of settings. If the thresholds match the interpolated\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/binary_confusion_matrices.py"
                },
                "region": {
                  "startLine": 217,
                  "startColumn": 71,
                  "endLine": 217,
                  "endColumn": 75,
                  "snippet": {
                    "text": "      be > 1.\n    thresholds: A specific set of thresholds to use. The caller is responsible\n      for marking the boundaries with +/-epsilon if desired. Only one of\n      num_thresholds or thresholds should be used. For metrics computed at top k\n      this may be a single negative threshold value (i.e. -inf).\n    name: Metric name containing binary_confusion_matrices.Matrices.\n    eval_config: Eval config.\n",
                    "rendered": {
                      "text": "      be > 1.\n    thresholds: A specific set of thresholds to use. The caller is responsible\n      for marking the boundaries with +/-epsilon if desired. Only one of\n      num_thresholds or thresholds should be used. For metrics computed at top k\n      this may be a single negative threshold value (i.e. -inf).\n    name: Metric name containing binary_confusion_matrices.Matrices.\n    eval_config: Eval config.\n",
                      "markdown": "`      be > 1.\n    thresholds: A specific set of thresholds to use. The caller is responsible\n      for marking the boundaries with +/-epsilon if desired. Only one of\n      num_thresholds or thresholds should be used. For metrics computed at top k\n      this may be a single negative threshold value (i.e. -inf).\n    name: Metric name containing binary_confusion_matrices.Matrices.\n    eval_config: Eval config.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/binary_confusion_matrices.py"
                },
                "region": {
                  "startLine": 212,
                  "startColumn": 18,
                  "endLine": 212,
                  "endColumn": 22,
                  "snippet": {
                    "text": "  Args:\n    num_thresholds: Number of thresholds to use. Thresholds will be calculated\n      using linear interpolation between 0.0 and 1.0 with equidistant values and\n      bondardaries at -epsilon and 1.0+epsilon. Values must be > 0. Only one of\n      num_thresholds or thresholds should be used. If used, num_thresholds must\n      be > 1.\n    thresholds: A specific set of thresholds to use. The caller is responsible\n",
                    "rendered": {
                      "text": "  Args:\n    num_thresholds: Number of thresholds to use. Thresholds will be calculated\n      using linear interpolation between 0.0 and 1.0 with equidistant values and\n      bondardaries at -epsilon and 1.0+epsilon. Values must be > 0. Only one of\n      num_thresholds or thresholds should be used. If used, num_thresholds must\n      be > 1.\n    thresholds: A specific set of thresholds to use. The caller is responsible\n",
                      "markdown": "`  Args:\n    num_thresholds: Number of thresholds to use. Thresholds will be calculated\n      using linear interpolation between 0.0 and 1.0 with equidistant values and\n      bondardaries at -epsilon and 1.0+epsilon. Values must be > 0. Only one of\n      num_thresholds or thresholds should be used. If used, num_thresholds must\n      be > 1.\n    thresholds: A specific set of thresholds to use. The caller is responsible\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/binary_confusion_matrices.py"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 60,
                  "endLine": 61,
                  "endColumn": 64,
                  "snippet": {
                    "text": "        ],\n    ),\n):\n  \"\"\"A class representing a set of binary confusion matrices at thresholds.\n\n  For each threshold, in addition to the count of examples per prediction and\n  label, this class also contains a sample of raw examples. Threshold values are\n",
                    "rendered": {
                      "text": "        ],\n    ),\n):\n  \"\"\"A class representing a set of binary confusion matrices at thresholds.\n\n  For each threshold, in addition to the count of examples per prediction and\n  label, this class also contains a sample of raw examples. Threshold values are\n",
                      "markdown": "`        ],\n    ),\n):\n  \"\"\"A class representing a set of binary confusion matrices at thresholds.\n\n  For each threshold, in addition to the count of examples per prediction and\n  label, this class also contains a sample of raw examples. Threshold values are\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/binary_confusion_matrices.py"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 53,
                  "endLine": 45,
                  "endColumn": 57,
                  "snippet": {
                    "text": "                            ('tn_examples', List[List[str]]),\n                            ('fp_examples', List[List[str]]),\n                            ('fn_examples', List[List[str]])])):\n  \"\"\"A set of examples for each binary confusion case at each threshold.\"\"\"\n\n\nclass Matrices(  # pytype: disable=signature-mismatch  # always-use-return-annotations\n",
                    "rendered": {
                      "text": "                            ('tn_examples', List[List[str]]),\n                            ('fp_examples', List[List[str]]),\n                            ('fn_examples', List[List[str]])])):\n  \"\"\"A set of examples for each binary confusion case at each threshold.\"\"\"\n\n\nclass Matrices(  # pytype: disable=signature-mismatch  # always-use-return-annotations\n",
                      "markdown": "`                            ('tn_examples', List[List[str]]),\n                            ('fp_examples', List[List[str]]),\n                            ('fn_examples', List[List[str]])])):\n  \"\"\"A set of examples for each binary confusion case at each threshold.\"\"\"\n\n\nclass Matrices(  # pytype: disable=signature-mismatch  # always-use-return-annotations\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/binary_confusion_matrices.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/binary_confusion_matrices.py"
                },
                "region": {
                  "startLine": 217,
                  "startColumn": 74,
                  "endLine": 217,
                  "endColumn": 79,
                  "snippet": {
                    "text": "      be > 1.\n    thresholds: A specific set of thresholds to use. The caller is responsible\n      for marking the boundaries with +/-epsilon if desired. Only one of\n      num_thresholds or thresholds should be used. For metrics computed at top k\n      this may be a single negative threshold value (i.e. -inf).\n    name: Metric name containing binary_confusion_matrices.Matrices.\n    eval_config: Eval config.\n",
                    "rendered": {
                      "text": "      be > 1.\n    thresholds: A specific set of thresholds to use. The caller is responsible\n      for marking the boundaries with +/-epsilon if desired. Only one of\n      num_thresholds or thresholds should be used. For metrics computed at top k\n      this may be a single negative threshold value (i.e. -inf).\n    name: Metric name containing binary_confusion_matrices.Matrices.\n    eval_config: Eval config.\n",
                      "markdown": "`      be > 1.\n    thresholds: A specific set of thresholds to use. The caller is responsible\n      for marking the boundaries with +/-epsilon if desired. Only one of\n      num_thresholds or thresholds should be used. For metrics computed at top k\n      this may be a single negative threshold value (i.e. -inf).\n    name: Metric name containing binary_confusion_matrices.Matrices.\n    eval_config: Eval config.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 559272,
                  "endLine": 1,
                  "endColumn": 559277,
                  "snippet": {
                    "text": "undefined` resolved values.\\n     * @returns {*} Returns the resolved value.\\n     * @example\\n     *\\n     * var object = { 'a': [{ 'b': { 'c': 3 } }] };\\n     *\\n     * _.get(object, 'a[0].b.c');\\n     * // => 3\\n     *\\n     * _.get(object, ['a', '0', 'b', 'c']);\\n     * // => 3\\n     *\\n     * _.get(object, 'a.b.c', 'default');\\n     * // => 'default'\\n     */\\n    function get(object, path, defaultValue) {\\n      var result = object == null ? undefined : baseGet(object, path);\\n      return result === undefined ? defaultValue : result;\\n    }\\n\\n    /**\\n     * Checks if `path` is a direct pro",
                    "rendered": {
                      "text": "undefined` resolved values.\\n     * @returns {*} Returns the resolved value.\\n     * @example\\n     *\\n     * var object = { 'a': [{ 'b': { 'c': 3 } }] };\\n     *\\n     * _.get(object, 'a[0].b.c');\\n     * // => 3\\n     *\\n     * _.get(object, ['a', '0', 'b', 'c']);\\n     * // => 3\\n     *\\n     * _.get(object, 'a.b.c', 'default');\\n     * // => 'default'\\n     */\\n    function get(object, path, defaultValue) {\\n      var result = object == null ? undefined : baseGet(object, path);\\n      return result === undefined ? defaultValue : result;\\n    }\\n\\n    /**\\n     * Checks if `path` is a direct pro",
                      "markdown": "`undefined` resolved values.\\n     * @returns {*} Returns the resolved value.\\n     * @example\\n     *\\n     * var object = { 'a': [{ 'b': { 'c': 3 } }] };\\n     *\\n     * _.get(object, 'a[0].b.c');\\n     * // => 3\\n     *\\n     * _.get(object, ['a', '0', 'b', 'c']);\\n     * // => 3\\n     *\\n     * _.get(object, 'a.b.c', 'default');\\n     * // => 'default'\\n     */\\n    function get(object, path, defaultValue) {\\n      var result = object == null ? undefined : baseGet(object, path);\\n      return result === undefined ? defaultValue : result;\\n    }\\n\\n    /**\\n     * Checks if `path` is a direct pro`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 559203,
                  "endLine": 1,
                  "endColumn": 559208,
                  "snippet": {
                    "text": "ty to get.\\n     * @param {*} [defaultValue] The value returned for `undefined` resolved values.\\n     * @returns {*} Returns the resolved value.\\n     * @example\\n     *\\n     * var object = { 'a': [{ 'b': { 'c': 3 } }] };\\n     *\\n     * _.get(object, 'a[0].b.c');\\n     * // => 3\\n     *\\n     * _.get(object, ['a', '0', 'b', 'c']);\\n     * // => 3\\n     *\\n     * _.get(object, 'a.b.c', 'default');\\n     * // => 'default'\\n     */\\n    function get(object, path, defaultValue) {\\n      var result = object == null ? undefined : baseGet(object, path);\\n      return result === undefined ? defaultValue",
                    "rendered": {
                      "text": "ty to get.\\n     * @param {*} [defaultValue] The value returned for `undefined` resolved values.\\n     * @returns {*} Returns the resolved value.\\n     * @example\\n     *\\n     * var object = { 'a': [{ 'b': { 'c': 3 } }] };\\n     *\\n     * _.get(object, 'a[0].b.c');\\n     * // => 3\\n     *\\n     * _.get(object, ['a', '0', 'b', 'c']);\\n     * // => 3\\n     *\\n     * _.get(object, 'a.b.c', 'default');\\n     * // => 'default'\\n     */\\n    function get(object, path, defaultValue) {\\n      var result = object == null ? undefined : baseGet(object, path);\\n      return result === undefined ? defaultValue",
                      "markdown": "`ty to get.\\n     * @param {*} [defaultValue] The value returned for `undefined` resolved values.\\n     * @returns {*} Returns the resolved value.\\n     * @example\\n     *\\n     * var object = { 'a': [{ 'b': { 'c': 3 } }] };\\n     *\\n     * _.get(object, 'a[0].b.c');\\n     * // => 3\\n     *\\n     * _.get(object, ['a', '0', 'b', 'c']);\\n     * // => 3\\n     *\\n     * _.get(object, 'a.b.c', 'default');\\n     * // => 'default'\\n     */\\n    function get(object, path, defaultValue) {\\n      var result = object == null ? undefined : baseGet(object, path);\\n      return result === undefined ? defaultValue`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 559144,
                  "endLine": 1,
                  "endColumn": 559149,
                  "snippet": {
                    "text": ".\\n     * @param {Array|string} path The path of the property to get.\\n     * @param {*} [defaultValue] The value returned for `undefined` resolved values.\\n     * @returns {*} Returns the resolved value.\\n     * @example\\n     *\\n     * var object = { 'a': [{ 'b': { 'c': 3 } }] };\\n     *\\n     * _.get(object, 'a[0].b.c');\\n     * // => 3\\n     *\\n     * _.get(object, ['a', '0', 'b', 'c']);\\n     * // => 3\\n     *\\n     * _.get(object, 'a.b.c', 'default');\\n     * // => 'default'\\n     */\\n    function get(object, path, defaultValue) {\\n      var result = object == null ? undefined : baseGet(objec",
                    "rendered": {
                      "text": ".\\n     * @param {Array|string} path The path of the property to get.\\n     * @param {*} [defaultValue] The value returned for `undefined` resolved values.\\n     * @returns {*} Returns the resolved value.\\n     * @example\\n     *\\n     * var object = { 'a': [{ 'b': { 'c': 3 } }] };\\n     *\\n     * _.get(object, 'a[0].b.c');\\n     * // => 3\\n     *\\n     * _.get(object, ['a', '0', 'b', 'c']);\\n     * // => 3\\n     *\\n     * _.get(object, 'a.b.c', 'default');\\n     * // => 'default'\\n     */\\n    function get(object, path, defaultValue) {\\n      var result = object == null ? undefined : baseGet(objec",
                      "markdown": "`.\\n     * @param {Array|string} path The path of the property to get.\\n     * @param {*} [defaultValue] The value returned for `undefined` resolved values.\\n     * @returns {*} Returns the resolved value.\\n     * @example\\n     *\\n     * var object = { 'a': [{ 'b': { 'c': 3 } }] };\\n     *\\n     * _.get(object, 'a[0].b.c');\\n     * // => 3\\n     *\\n     * _.get(object, ['a', '0', 'b', 'c']);\\n     * // => 3\\n     *\\n     * _.get(object, 'a.b.c', 'default');\\n     * // => 'default'\\n     */\\n    function get(object, path, defaultValue) {\\n      var result = object == null ? undefined : baseGet(objec`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 482561,
                  "endLine": 1,
                  "endColumn": 482566,
                  "snippet": {
                    "text": "= 'function')) {\\n        throw new TypeError(FUNC_ERROR_TEXT);\\n      }\\n      var memoized = function() {\\n        var args = arguments,\\n            key = resolver ? resolver.apply(this, args) : args[0],\\n            cache = memoized.cache;\\n\\n        if (cache.has(key)) {\\n          return cache.get(key);\\n        }\\n        var result = func.apply(this, args);\\n        memoized.cache = cache.set(key, result) || cache;\\n        return result;\\n      };\\n      memoized.cache = new (memoize.Cache || MapCache);\\n      return memoized;\\n    }\\n\\n    // Expose `MapCache`.\\n    memoize.Cache = MapCac",
                    "rendered": {
                      "text": "= 'function')) {\\n        throw new TypeError(FUNC_ERROR_TEXT);\\n      }\\n      var memoized = function() {\\n        var args = arguments,\\n            key = resolver ? resolver.apply(this, args) : args[0],\\n            cache = memoized.cache;\\n\\n        if (cache.has(key)) {\\n          return cache.get(key);\\n        }\\n        var result = func.apply(this, args);\\n        memoized.cache = cache.set(key, result) || cache;\\n        return result;\\n      };\\n      memoized.cache = new (memoize.Cache || MapCache);\\n      return memoized;\\n    }\\n\\n    // Expose `MapCache`.\\n    memoize.Cache = MapCac",
                      "markdown": "`= 'function')) {\\n        throw new TypeError(FUNC_ERROR_TEXT);\\n      }\\n      var memoized = function() {\\n        var args = arguments,\\n            key = resolver ? resolver.apply(this, args) : args[0],\\n            cache = memoized.cache;\\n\\n        if (cache.has(key)) {\\n          return cache.get(key);\\n        }\\n        var result = func.apply(this, args);\\n        memoized.cache = cache.set(key, result) || cache;\\n        return result;\\n      };\\n      memoized.cache = new (memoize.Cache || MapCache);\\n      return memoized;\\n    }\\n\\n    // Expose `MapCache`.\\n    memoize.Cache = MapCac`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 327767,
                  "endLine": 1,
                  "endColumn": 327772,
                  "snippet": {
                    "text": "object, keysIn, getSymbolsIn);\\n    }\\n\\n    /**\\n     * Gets metadata for `func`.\\n     *\\n     * @private\\n     * @param {Function} func The function to query.\\n     * @returns {*} Returns the metadata for `func`.\\n     */\\n    var getData = !metaMap ? noop : function(func) {\\n      return metaMap.get(func);\\n    };\\n\\n    /**\\n     * Gets the name of `func`.\\n     *\\n     * @private\\n     * @param {Function} func The function to query.\\n     * @returns {string} Returns the function name.\\n     */\\n    function getFuncName(func) {\\n      var result = (func.name + ''),\\n          array = realNames",
                    "rendered": {
                      "text": "object, keysIn, getSymbolsIn);\\n    }\\n\\n    /**\\n     * Gets metadata for `func`.\\n     *\\n     * @private\\n     * @param {Function} func The function to query.\\n     * @returns {*} Returns the metadata for `func`.\\n     */\\n    var getData = !metaMap ? noop : function(func) {\\n      return metaMap.get(func);\\n    };\\n\\n    /**\\n     * Gets the name of `func`.\\n     *\\n     * @private\\n     * @param {Function} func The function to query.\\n     * @returns {string} Returns the function name.\\n     */\\n    function getFuncName(func) {\\n      var result = (func.name + ''),\\n          array = realNames",
                      "markdown": "`object, keysIn, getSymbolsIn);\\n    }\\n\\n    /**\\n     * Gets metadata for `func`.\\n     *\\n     * @private\\n     * @param {Function} func The function to query.\\n     * @returns {*} Returns the metadata for `func`.\\n     */\\n    var getData = !metaMap ? noop : function(func) {\\n      return metaMap.get(func);\\n    };\\n\\n    /**\\n     * Gets the name of `func`.\\n     *\\n     * @private\\n     * @param {Function} func The function to query.\\n     * @returns {string} Returns the function name.\\n     */\\n    function getFuncName(func) {\\n      var result = (func.name + ''),\\n          array = realNames`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 324815,
                  "endLine": 1,
                  "endColumn": 324820,
                  "snippet": {
                    "text": "     while (index--) {\\n        var key = objProps[index];\\n        if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {\\n          return false;\\n        }\\n      }\\n      // Check that cyclic values are equal.\\n      var objStacked = stack.get(object);\\n      var othStacked = stack.get(other);\\n      if (objStacked && othStacked) {\\n        return objStacked == other && othStacked == object;\\n      }\\n      var result = true;\\n      stack.set(object, other);\\n      stack.set(other, object);\\n\\n      var skipCtor = isPartial;\\n      while (++index < objLength) {\\n        key = objP",
                    "rendered": {
                      "text": "     while (index--) {\\n        var key = objProps[index];\\n        if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {\\n          return false;\\n        }\\n      }\\n      // Check that cyclic values are equal.\\n      var objStacked = stack.get(object);\\n      var othStacked = stack.get(other);\\n      if (objStacked && othStacked) {\\n        return objStacked == other && othStacked == object;\\n      }\\n      var result = true;\\n      stack.set(object, other);\\n      stack.set(other, object);\\n\\n      var skipCtor = isPartial;\\n      while (++index < objLength) {\\n        key = objP",
                      "markdown": "`     while (index--) {\\n        var key = objProps[index];\\n        if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {\\n          return false;\\n        }\\n      }\\n      // Check that cyclic values are equal.\\n      var objStacked = stack.get(object);\\n      var othStacked = stack.get(other);\\n      if (objStacked && othStacked) {\\n        return objStacked == other && othStacked == object;\\n      }\\n      var result = true;\\n      stack.set(object, other);\\n      stack.set(other, object);\\n\\n      var skipCtor = isPartial;\\n      while (++index < objLength) {\\n        key = objP`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 324772,
                  "endLine": 1,
                  "endColumn": 324777,
                  "snippet": {
                    "text": ";\\n      }\\n      var index = objLength;\\n      while (index--) {\\n        var key = objProps[index];\\n        if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {\\n          return false;\\n        }\\n      }\\n      // Check that cyclic values are equal.\\n      var objStacked = stack.get(object);\\n      var othStacked = stack.get(other);\\n      if (objStacked && othStacked) {\\n        return objStacked == other && othStacked == object;\\n      }\\n      var result = true;\\n      stack.set(object, other);\\n      stack.set(other, object);\\n\\n      var skipCtor = isPartial;\\n      while ",
                    "rendered": {
                      "text": ";\\n      }\\n      var index = objLength;\\n      while (index--) {\\n        var key = objProps[index];\\n        if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {\\n          return false;\\n        }\\n      }\\n      // Check that cyclic values are equal.\\n      var objStacked = stack.get(object);\\n      var othStacked = stack.get(other);\\n      if (objStacked && othStacked) {\\n        return objStacked == other && othStacked == object;\\n      }\\n      var result = true;\\n      stack.set(object, other);\\n      stack.set(other, object);\\n\\n      var skipCtor = isPartial;\\n      while ",
                      "markdown": "`;\\n      }\\n      var index = objLength;\\n      while (index--) {\\n        var key = objProps[index];\\n        if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {\\n          return false;\\n        }\\n      }\\n      // Check that cyclic values are equal.\\n      var objStacked = stack.get(object);\\n      var othStacked = stack.get(other);\\n      if (objStacked && othStacked) {\\n        return objStacked == other && othStacked == object;\\n      }\\n      var result = true;\\n      stack.set(object, other);\\n      stack.set(other, object);\\n\\n      var skipCtor = isPartial;\\n      while `"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 322802,
                  "endLine": 1,
                  "endColumn": 322807,
                  "snippet": {
                    "text": "      case setTag:\\n          var isPartial = bitmask & COMPARE_PARTIAL_FLAG;\\n          convert || (convert = setToArray);\\n\\n          if (object.size != other.size && !isPartial) {\\n            return false;\\n          }\\n          // Assume cyclic values are equal.\\n          var stacked = stack.get(object);\\n          if (stacked) {\\n            return stacked == other;\\n          }\\n          bitmask |= COMPARE_UNORDERED_FLAG;\\n\\n          // Recursively compare objects (susceptible to call stack limits).\\n          stack.set(object, other);\\n          var result = equalArrays(convert(object)",
                    "rendered": {
                      "text": "      case setTag:\\n          var isPartial = bitmask & COMPARE_PARTIAL_FLAG;\\n          convert || (convert = setToArray);\\n\\n          if (object.size != other.size && !isPartial) {\\n            return false;\\n          }\\n          // Assume cyclic values are equal.\\n          var stacked = stack.get(object);\\n          if (stacked) {\\n            return stacked == other;\\n          }\\n          bitmask |= COMPARE_UNORDERED_FLAG;\\n\\n          // Recursively compare objects (susceptible to call stack limits).\\n          stack.set(object, other);\\n          var result = equalArrays(convert(object)",
                      "markdown": "`      case setTag:\\n          var isPartial = bitmask & COMPARE_PARTIAL_FLAG;\\n          convert || (convert = setToArray);\\n\\n          if (object.size != other.size && !isPartial) {\\n            return false;\\n          }\\n          // Assume cyclic values are equal.\\n          var stacked = stack.get(object);\\n          if (stacked) {\\n            return stacked == other;\\n          }\\n          bitmask |= COMPARE_UNORDERED_FLAG;\\n\\n          // Recursively compare objects (susceptible to call stack limits).\\n          stack.set(object, other);\\n          var result = equalArrays(convert(object)`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 318655,
                  "endLine": 1,
                  "endColumn": 318660,
                  "snippet": {
                    "text": "        arrLength = array.length,\\n          othLength = other.length;\\n\\n      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\\n        return false;\\n      }\\n      // Check that cyclic values are equal.\\n      var arrStacked = stack.get(array);\\n      var othStacked = stack.get(other);\\n      if (arrStacked && othStacked) {\\n        return arrStacked == other && othStacked == array;\\n      }\\n      var index = -1,\\n          result = true,\\n          seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;\\n\\n      stack.set(array, other);\\n      stack.set(oth",
                    "rendered": {
                      "text": "        arrLength = array.length,\\n          othLength = other.length;\\n\\n      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\\n        return false;\\n      }\\n      // Check that cyclic values are equal.\\n      var arrStacked = stack.get(array);\\n      var othStacked = stack.get(other);\\n      if (arrStacked && othStacked) {\\n        return arrStacked == other && othStacked == array;\\n      }\\n      var index = -1,\\n          result = true,\\n          seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;\\n\\n      stack.set(array, other);\\n      stack.set(oth",
                      "markdown": "`        arrLength = array.length,\\n          othLength = other.length;\\n\\n      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\\n        return false;\\n      }\\n      // Check that cyclic values are equal.\\n      var arrStacked = stack.get(array);\\n      var othStacked = stack.get(other);\\n      if (arrStacked && othStacked) {\\n        return arrStacked == other && othStacked == array;\\n      }\\n      var index = -1,\\n          result = true,\\n          seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;\\n\\n      stack.set(array, other);\\n      stack.set(oth`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 318613,
                  "endLine": 1,
                  "endColumn": 318618,
                  "snippet": {
                    "text": "tial = bitmask & COMPARE_PARTIAL_FLAG,\\n          arrLength = array.length,\\n          othLength = other.length;\\n\\n      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\\n        return false;\\n      }\\n      // Check that cyclic values are equal.\\n      var arrStacked = stack.get(array);\\n      var othStacked = stack.get(other);\\n      if (arrStacked && othStacked) {\\n        return arrStacked == other && othStacked == array;\\n      }\\n      var index = -1,\\n          result = true,\\n          seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;\\n\\n      sta",
                    "rendered": {
                      "text": "tial = bitmask & COMPARE_PARTIAL_FLAG,\\n          arrLength = array.length,\\n          othLength = other.length;\\n\\n      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\\n        return false;\\n      }\\n      // Check that cyclic values are equal.\\n      var arrStacked = stack.get(array);\\n      var othStacked = stack.get(other);\\n      if (arrStacked && othStacked) {\\n        return arrStacked == other && othStacked == array;\\n      }\\n      var index = -1,\\n          result = true,\\n          seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;\\n\\n      sta",
                      "markdown": "`tial = bitmask & COMPARE_PARTIAL_FLAG,\\n          arrLength = array.length,\\n          othLength = other.length;\\n\\n      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\\n        return false;\\n      }\\n      // Check that cyclic values are equal.\\n      var arrStacked = stack.get(array);\\n      var othStacked = stack.get(other);\\n      if (arrStacked && othStacked) {\\n        return arrStacked == other && othStacked == array;\\n      }\\n      var index = -1,\\n          result = true,\\n          seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;\\n\\n      sta`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 248704,
                  "endLine": 1,
                  "endColumn": 248709,
                  "snippet": {
                    "text": "bject} [stack] Tracks traversed source values and their merged\\n     *  counterparts.\\n     */\\n    function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {\\n      var objValue = safeGet(object, key),\\n          srcValue = safeGet(source, key),\\n          stacked = stack.get(srcValue);\\n\\n      if (stacked) {\\n        assignMergeValue(object, key, stacked);\\n        return;\\n      }\\n      var newValue = customizer\\n        ? customizer(objValue, srcValue, (key + ''), object, source, stack)\\n        : undefined;\\n\\n      var isCommon = newValue === undefined;\\n\\n      i",
                    "rendered": {
                      "text": "bject} [stack] Tracks traversed source values and their merged\\n     *  counterparts.\\n     */\\n    function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {\\n      var objValue = safeGet(object, key),\\n          srcValue = safeGet(source, key),\\n          stacked = stack.get(srcValue);\\n\\n      if (stacked) {\\n        assignMergeValue(object, key, stacked);\\n        return;\\n      }\\n      var newValue = customizer\\n        ? customizer(objValue, srcValue, (key + ''), object, source, stack)\\n        : undefined;\\n\\n      var isCommon = newValue === undefined;\\n\\n      i",
                      "markdown": "`bject} [stack] Tracks traversed source values and their merged\\n     *  counterparts.\\n     */\\n    function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {\\n      var objValue = safeGet(object, key),\\n          srcValue = safeGet(source, key),\\n          stacked = stack.get(srcValue);\\n\\n      if (stacked) {\\n        assignMergeValue(object, key, stacked);\\n        return;\\n      }\\n      var newValue = customizer\\n        ? customizer(objValue, srcValue, (key + ''), object, source, stack)\\n        : undefined;\\n\\n      var isCommon = newValue === undefined;\\n\\n      i`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 214657,
                  "endLine": 1,
                  "endColumn": 214662,
                  "snippet": {
                    "text": "    if (!cloneableTags[tag]) {\\n            return object ? value : {};\\n          }\\n          result = initCloneByTag(value, tag, isDeep);\\n        }\\n      }\\n      // Check for circular references and return its corresponding clone.\\n      stack || (stack = new Stack);\\n      var stacked = stack.get(value);\\n      if (stacked) {\\n        return stacked;\\n      }\\n      stack.set(value, result);\\n\\n      if (isSet(value)) {\\n        value.forEach(function(subValue) {\\n          result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));\\n        });\\n      } else if (isMap(valu",
                    "rendered": {
                      "text": "    if (!cloneableTags[tag]) {\\n            return object ? value : {};\\n          }\\n          result = initCloneByTag(value, tag, isDeep);\\n        }\\n      }\\n      // Check for circular references and return its corresponding clone.\\n      stack || (stack = new Stack);\\n      var stacked = stack.get(value);\\n      if (stacked) {\\n        return stacked;\\n      }\\n      stack.set(value, result);\\n\\n      if (isSet(value)) {\\n        value.forEach(function(subValue) {\\n          result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));\\n        });\\n      } else if (isMap(valu",
                      "markdown": "`    if (!cloneableTags[tag]) {\\n            return object ? value : {};\\n          }\\n          result = initCloneByTag(value, tag, isDeep);\\n        }\\n      }\\n      // Check for circular references and return its corresponding clone.\\n      stack || (stack = new Stack);\\n      var stacked = stack.get(value);\\n      if (stacked) {\\n        return stacked;\\n      }\\n      stack.set(value, result);\\n\\n      if (isSet(value)) {\\n        value.forEach(function(subValue) {\\n          result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));\\n        });\\n      } else if (isMap(valu`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 203231,
                  "endLine": 1,
                  "endColumn": 203236,
                  "snippet": {
                    "text": "sult;\\n    }\\n\\n    /**\\n     * Gets the stack value for `key`.\\n     *\\n     * @private\\n     * @name get\\n     * @memberOf Stack\\n     * @param {string} key The key of the value to get.\\n     * @returns {*} Returns the entry value.\\n     */\\n    function stackGet(key) {\\n      return this.__data__.get(key);\\n    }\\n\\n    /**\\n     * Checks if a stack value for `key` exists.\\n     *\\n     * @private\\n     * @name has\\n     * @memberOf Stack\\n     * @param {string} key The key of the entry to check.\\n     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\\n     */\\n    ",
                    "rendered": {
                      "text": "sult;\\n    }\\n\\n    /**\\n     * Gets the stack value for `key`.\\n     *\\n     * @private\\n     * @name get\\n     * @memberOf Stack\\n     * @param {string} key The key of the value to get.\\n     * @returns {*} Returns the entry value.\\n     */\\n    function stackGet(key) {\\n      return this.__data__.get(key);\\n    }\\n\\n    /**\\n     * Checks if a stack value for `key` exists.\\n     *\\n     * @private\\n     * @name has\\n     * @memberOf Stack\\n     * @param {string} key The key of the entry to check.\\n     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\\n     */\\n    ",
                      "markdown": "`sult;\\n    }\\n\\n    /**\\n     * Gets the stack value for `key`.\\n     *\\n     * @private\\n     * @name get\\n     * @memberOf Stack\\n     * @param {string} key The key of the value to get.\\n     * @returns {*} Returns the entry value.\\n     */\\n    function stackGet(key) {\\n      return this.__data__.get(key);\\n    }\\n\\n    /**\\n     * Checks if a stack value for `key` exists.\\n     *\\n     * @private\\n     * @name has\\n     * @memberOf Stack\\n     * @param {string} key The key of the entry to check.\\n     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\\n     */\\n    `"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 199332,
                  "endLine": 1,
                  "endColumn": 199337,
                  "snippet": {
                    "text": "\\n\\n    /**\\n     * Gets the map value for `key`.\\n     *\\n     * @private\\n     * @name get\\n     * @memberOf MapCache\\n     * @param {string} key The key of the value to get.\\n     * @returns {*} Returns the entry value.\\n     */\\n    function mapCacheGet(key) {\\n      return getMapData(this, key).get(key);\\n    }\\n\\n    /**\\n     * Checks if a map value for `key` exists.\\n     *\\n     * @private\\n     * @name has\\n     * @memberOf MapCache\\n     * @param {string} key The key of the entry to check.\\n     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\\n     */\\n   ",
                    "rendered": {
                      "text": "\\n\\n    /**\\n     * Gets the map value for `key`.\\n     *\\n     * @private\\n     * @name get\\n     * @memberOf MapCache\\n     * @param {string} key The key of the value to get.\\n     * @returns {*} Returns the entry value.\\n     */\\n    function mapCacheGet(key) {\\n      return getMapData(this, key).get(key);\\n    }\\n\\n    /**\\n     * Checks if a map value for `key` exists.\\n     *\\n     * @private\\n     * @name has\\n     * @memberOf MapCache\\n     * @param {string} key The key of the entry to check.\\n     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\\n     */\\n   ",
                      "markdown": "`\\n\\n    /**\\n     * Gets the map value for `key`.\\n     *\\n     * @private\\n     * @name get\\n     * @memberOf MapCache\\n     * @param {string} key The key of the value to get.\\n     * @returns {*} Returns the entry value.\\n     */\\n    function mapCacheGet(key) {\\n      return getMapData(this, key).get(key);\\n    }\\n\\n    /**\\n     * Checks if a map value for `key` exists.\\n     *\\n     * @private\\n     * @name has\\n     * @memberOf MapCache\\n     * @param {string} key The key of the entry to check.\\n     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\\n     */\\n   `"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 123395,
                  "endLine": 1,
                  "endColumn": 123400,
                  "snippet": {
                    "text": "ompare = this.model.get('evalNameCompare');\\n  },\\n});\\n\\n/**\\n * Handler for events of type \\\"tfma-event\\\" for the given view element.\\n * @param {!Event} tfmaEvent\\n * @param {!Element} view\\n */\\nconst handleTfmaEvent = (tfmaEvent, view) => {\\n  const model = view.model;\\n  const jsEvents = model.get('js_events').slice();\\n  const detail = tfmaEvent.detail;\\n  jsEvents.push({'name': detail.type, 'detail': detail.detail});\\n  model.set('js_events', jsEvents);\\n  view.touch();\\n};\\n\\nmodule.exports = {\\n  [PLOT_MODEL_NAME]: PlotModel,\\n  [PLOT_VIEW_NAME]: PlotView,\\n  [SLICING_METRICS_MODEL_NAME]:",
                    "rendered": {
                      "text": "ompare = this.model.get('evalNameCompare');\\n  },\\n});\\n\\n/**\\n * Handler for events of type \\\"tfma-event\\\" for the given view element.\\n * @param {!Event} tfmaEvent\\n * @param {!Element} view\\n */\\nconst handleTfmaEvent = (tfmaEvent, view) => {\\n  const model = view.model;\\n  const jsEvents = model.get('js_events').slice();\\n  const detail = tfmaEvent.detail;\\n  jsEvents.push({'name': detail.type, 'detail': detail.detail});\\n  model.set('js_events', jsEvents);\\n  view.touch();\\n};\\n\\nmodule.exports = {\\n  [PLOT_MODEL_NAME]: PlotModel,\\n  [PLOT_VIEW_NAME]: PlotView,\\n  [SLICING_METRICS_MODEL_NAME]:",
                      "markdown": "`ompare = this.model.get('evalNameCompare');\\n  },\\n});\\n\\n/**\\n * Handler for events of type \\\"tfma-event\\\" for the given view element.\\n * @param {!Event} tfmaEvent\\n * @param {!Element} view\\n */\\nconst handleTfmaEvent = (tfmaEvent, view) => {\\n  const model = view.model;\\n  const jsEvents = model.get('js_events').slice();\\n  const detail = tfmaEvent.detail;\\n  jsEvents.push({'name': detail.type, 'detail': detail.detail});\\n  model.set('js_events', jsEvents);\\n  view.touch();\\n};\\n\\nmodule.exports = {\\n  [PLOT_MODEL_NAME]: PlotModel,\\n  [PLOT_VIEW_NAME]: PlotView,\\n  [SLICING_METRICS_MODEL_NAME]:`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 123114,
                  "endLine": 1,
                  "endColumn": 123119,
                  "snippet": {
                    "text": "icsCompareChanged_: function() {\\n    this.view_.slicingMetricsCompare = this.model.get('slicingMetricsCompare');\\n  },\\n  evalNameChanged_: function() {\\n    this.view_.evalName = this.model.get('evalName');\\n  },\\n  evalNameCompareChanged_: function() {\\n    this.view_.evalNameCompare = this.model.get('evalNameCompare');\\n  },\\n});\\n\\n/**\\n * Handler for events of type \\\"tfma-event\\\" for the given view element.\\n * @param {!Event} tfmaEvent\\n * @param {!Element} view\\n */\\nconst handleTfmaEvent = (tfmaEvent, view) => {\\n  const model = view.model;\\n  const jsEvents = model.get('js_events').slice(",
                    "rendered": {
                      "text": "icsCompareChanged_: function() {\\n    this.view_.slicingMetricsCompare = this.model.get('slicingMetricsCompare');\\n  },\\n  evalNameChanged_: function() {\\n    this.view_.evalName = this.model.get('evalName');\\n  },\\n  evalNameCompareChanged_: function() {\\n    this.view_.evalNameCompare = this.model.get('evalNameCompare');\\n  },\\n});\\n\\n/**\\n * Handler for events of type \\\"tfma-event\\\" for the given view element.\\n * @param {!Event} tfmaEvent\\n * @param {!Element} view\\n */\\nconst handleTfmaEvent = (tfmaEvent, view) => {\\n  const model = view.model;\\n  const jsEvents = model.get('js_events').slice(",
                      "markdown": "`icsCompareChanged_: function() {\\n    this.view_.slicingMetricsCompare = this.model.get('slicingMetricsCompare');\\n  },\\n  evalNameChanged_: function() {\\n    this.view_.evalName = this.model.get('evalName');\\n  },\\n  evalNameCompareChanged_: function() {\\n    this.view_.evalNameCompare = this.model.get('evalNameCompare');\\n  },\\n});\\n\\n/**\\n * Handler for events of type \\\"tfma-event\\\" for the given view element.\\n * @param {!Event} tfmaEvent\\n * @param {!Element} view\\n */\\nconst handleTfmaEvent = (tfmaEvent, view) => {\\n  const model = view.model;\\n  const jsEvents = model.get('js_events').slice(`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 123005,
                  "endLine": 1,
                  "endColumn": 123010,
                  "snippet": {
                    "text": "hanged_: function() {\\n    this.view_.slicingMetrics = this.model.get('slicingMetrics');\\n  },\\n  slicingMetricsCompareChanged_: function() {\\n    this.view_.slicingMetricsCompare = this.model.get('slicingMetricsCompare');\\n  },\\n  evalNameChanged_: function() {\\n    this.view_.evalName = this.model.get('evalName');\\n  },\\n  evalNameCompareChanged_: function() {\\n    this.view_.evalNameCompare = this.model.get('evalNameCompare');\\n  },\\n});\\n\\n/**\\n * Handler for events of type \\\"tfma-event\\\" for the given view element.\\n * @param {!Event} tfmaEvent\\n * @param {!Element} view\\n */\\nconst handleTfma",
                    "rendered": {
                      "text": "hanged_: function() {\\n    this.view_.slicingMetrics = this.model.get('slicingMetrics');\\n  },\\n  slicingMetricsCompareChanged_: function() {\\n    this.view_.slicingMetricsCompare = this.model.get('slicingMetricsCompare');\\n  },\\n  evalNameChanged_: function() {\\n    this.view_.evalName = this.model.get('evalName');\\n  },\\n  evalNameCompareChanged_: function() {\\n    this.view_.evalNameCompare = this.model.get('evalNameCompare');\\n  },\\n});\\n\\n/**\\n * Handler for events of type \\\"tfma-event\\\" for the given view element.\\n * @param {!Event} tfmaEvent\\n * @param {!Element} view\\n */\\nconst handleTfma",
                      "markdown": "`hanged_: function() {\\n    this.view_.slicingMetrics = this.model.get('slicingMetrics');\\n  },\\n  slicingMetricsCompareChanged_: function() {\\n    this.view_.slicingMetricsCompare = this.model.get('slicingMetricsCompare');\\n  },\\n  evalNameChanged_: function() {\\n    this.view_.evalName = this.model.get('evalName');\\n  },\\n  evalNameCompareChanged_: function() {\\n    this.view_.evalNameCompare = this.model.get('evalNameCompare');\\n  },\\n});\\n\\n/**\\n * Handler for events of type \\\"tfma-event\\\" for the given view element.\\n * @param {!Event} tfmaEvent\\n * @param {!Element} view\\n */\\nconst handleTfma`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 122897,
                  "endLine": 1,
                  "endColumn": 122902,
                  "snippet": {
                    "text": "\\n          'change:evalNameCompare', this.evalNameCompareChanged_, this);\\n    });\\n  },\\n  slicingMetricsChanged_: function() {\\n    this.view_.slicingMetrics = this.model.get('slicingMetrics');\\n  },\\n  slicingMetricsCompareChanged_: function() {\\n    this.view_.slicingMetricsCompare = this.model.get('slicingMetricsCompare');\\n  },\\n  evalNameChanged_: function() {\\n    this.view_.evalName = this.model.get('evalName');\\n  },\\n  evalNameCompareChanged_: function() {\\n    this.view_.evalNameCompare = this.model.get('evalNameCompare');\\n  },\\n});\\n\\n/**\\n * Handler for events of type \\\"tfma-event\\\"",
                    "rendered": {
                      "text": "\\n          'change:evalNameCompare', this.evalNameCompareChanged_, this);\\n    });\\n  },\\n  slicingMetricsChanged_: function() {\\n    this.view_.slicingMetrics = this.model.get('slicingMetrics');\\n  },\\n  slicingMetricsCompareChanged_: function() {\\n    this.view_.slicingMetricsCompare = this.model.get('slicingMetricsCompare');\\n  },\\n  evalNameChanged_: function() {\\n    this.view_.evalName = this.model.get('evalName');\\n  },\\n  evalNameCompareChanged_: function() {\\n    this.view_.evalNameCompare = this.model.get('evalNameCompare');\\n  },\\n});\\n\\n/**\\n * Handler for events of type \\\"tfma-event\\\"",
                      "markdown": "`\\n          'change:evalNameCompare', this.evalNameCompareChanged_, this);\\n    });\\n  },\\n  slicingMetricsChanged_: function() {\\n    this.view_.slicingMetrics = this.model.get('slicingMetrics');\\n  },\\n  slicingMetricsCompareChanged_: function() {\\n    this.view_.slicingMetricsCompare = this.model.get('slicingMetricsCompare');\\n  },\\n  evalNameChanged_: function() {\\n    this.view_.evalName = this.model.get('evalName');\\n  },\\n  evalNameCompareChanged_: function() {\\n    this.view_.evalNameCompare = this.model.get('evalNameCompare');\\n  },\\n});\\n\\n/**\\n * Handler for events of type \\\"tfma-event\\\"`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 122770,
                  "endLine": 1,
                  "endColumn": 122775,
                  "snippet": {
                    "text": "sCompareChanged_,\\n          this);\\n      this.model.on('change:evalName', this.evalNameChanged_, this);\\n      this.model.on(\\n          'change:evalNameCompare', this.evalNameCompareChanged_, this);\\n    });\\n  },\\n  slicingMetricsChanged_: function() {\\n    this.view_.slicingMetrics = this.model.get('slicingMetrics');\\n  },\\n  slicingMetricsCompareChanged_: function() {\\n    this.view_.slicingMetricsCompare = this.model.get('slicingMetricsCompare');\\n  },\\n  evalNameChanged_: function() {\\n    this.view_.evalName = this.model.get('evalName');\\n  },\\n  evalNameCompareChanged_: function() {\\n    ",
                    "rendered": {
                      "text": "sCompareChanged_,\\n          this);\\n      this.model.on('change:evalName', this.evalNameChanged_, this);\\n      this.model.on(\\n          'change:evalNameCompare', this.evalNameCompareChanged_, this);\\n    });\\n  },\\n  slicingMetricsChanged_: function() {\\n    this.view_.slicingMetrics = this.model.get('slicingMetrics');\\n  },\\n  slicingMetricsCompareChanged_: function() {\\n    this.view_.slicingMetricsCompare = this.model.get('slicingMetricsCompare');\\n  },\\n  evalNameChanged_: function() {\\n    this.view_.evalName = this.model.get('evalName');\\n  },\\n  evalNameCompareChanged_: function() {\\n    ",
                      "markdown": "`sCompareChanged_,\\n          this);\\n      this.model.on('change:evalName', this.evalNameChanged_, this);\\n      this.model.on(\\n          'change:evalNameCompare', this.evalNameCompareChanged_, this);\\n    });\\n  },\\n  slicingMetricsChanged_: function() {\\n    this.view_.slicingMetrics = this.model.get('slicingMetrics');\\n  },\\n  slicingMetricsCompareChanged_: function() {\\n    this.view_.slicingMetricsCompare = this.model.get('slicingMetricsCompare');\\n  },\\n  evalNameChanged_: function() {\\n    this.view_.evalName = this.model.get('evalName');\\n  },\\n  evalNameCompareChanged_: function() {\\n    `"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 121248,
                  "endLine": 1,
                  "endColumn": 121253,
                  "snippet": {
                    "text": "ed_();\\n      this.model.on('change:config', this.configChanged_, this);\\n      this.model.on('change:data', this.dataChanged_, this);\\n    });\\n  },\\n  dataChanged_: function() {\\n    this.view_.data = this.model.get('data');\\n  },\\n  configChanged_: function() {\\n    this.view_.config = this.model.get('config');\\n  },\\n});\\n\\nconst FairnessIndicatorModel = widgets.DOMWidgetModel.extend({\\n  defaults: _.extend(widgets.DOMWidgetModel.prototype.defaults(), {\\n    _model_name: FAIRNESS_INDICATOR_MODEL_NAME,\\n    _view_name: FAIRNESS_INDICATOR_VIEW_NAME,\\n    _model_module: MODULE_NAME,\\n    _view_mod",
                    "rendered": {
                      "text": "ed_();\\n      this.model.on('change:config', this.configChanged_, this);\\n      this.model.on('change:data', this.dataChanged_, this);\\n    });\\n  },\\n  dataChanged_: function() {\\n    this.view_.data = this.model.get('data');\\n  },\\n  configChanged_: function() {\\n    this.view_.config = this.model.get('config');\\n  },\\n});\\n\\nconst FairnessIndicatorModel = widgets.DOMWidgetModel.extend({\\n  defaults: _.extend(widgets.DOMWidgetModel.prototype.defaults(), {\\n    _model_name: FAIRNESS_INDICATOR_MODEL_NAME,\\n    _view_name: FAIRNESS_INDICATOR_VIEW_NAME,\\n    _model_module: MODULE_NAME,\\n    _view_mod",
                      "markdown": "`ed_();\\n      this.model.on('change:config', this.configChanged_, this);\\n      this.model.on('change:data', this.dataChanged_, this);\\n    });\\n  },\\n  dataChanged_: function() {\\n    this.view_.data = this.model.get('data');\\n  },\\n  configChanged_: function() {\\n    this.view_.config = this.model.get('config');\\n  },\\n});\\n\\nconst FairnessIndicatorModel = widgets.DOMWidgetModel.extend({\\n  defaults: _.extend(widgets.DOMWidgetModel.prototype.defaults(), {\\n    _model_name: FAIRNESS_INDICATOR_MODEL_NAME,\\n    _view_name: FAIRNESS_INDICATOR_VIEW_NAME,\\n    _model_module: MODULE_NAME,\\n    _view_mod`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 121161,
                  "endLine": 1,
                  "endColumn": 121166,
                  "snippet": {
                    "text": "iew_);\\n\\n    delayedRender(() => {\\n      this.configChanged_();\\n      this.dataChanged_();\\n      this.model.on('change:config', this.configChanged_, this);\\n      this.model.on('change:data', this.dataChanged_, this);\\n    });\\n  },\\n  dataChanged_: function() {\\n    this.view_.data = this.model.get('data');\\n  },\\n  configChanged_: function() {\\n    this.view_.config = this.model.get('config');\\n  },\\n});\\n\\nconst FairnessIndicatorModel = widgets.DOMWidgetModel.extend({\\n  defaults: _.extend(widgets.DOMWidgetModel.prototype.defaults(), {\\n    _model_name: FAIRNESS_INDICATOR_MODEL_NAME,\\n    _v",
                    "rendered": {
                      "text": "iew_);\\n\\n    delayedRender(() => {\\n      this.configChanged_();\\n      this.dataChanged_();\\n      this.model.on('change:config', this.configChanged_, this);\\n      this.model.on('change:data', this.dataChanged_, this);\\n    });\\n  },\\n  dataChanged_: function() {\\n    this.view_.data = this.model.get('data');\\n  },\\n  configChanged_: function() {\\n    this.view_.config = this.model.get('config');\\n  },\\n});\\n\\nconst FairnessIndicatorModel = widgets.DOMWidgetModel.extend({\\n  defaults: _.extend(widgets.DOMWidgetModel.prototype.defaults(), {\\n    _model_name: FAIRNESS_INDICATOR_MODEL_NAME,\\n    _v",
                      "markdown": "`iew_);\\n\\n    delayedRender(() => {\\n      this.configChanged_();\\n      this.dataChanged_();\\n      this.model.on('change:config', this.configChanged_, this);\\n      this.model.on('change:data', this.dataChanged_, this);\\n    });\\n  },\\n  dataChanged_: function() {\\n    this.view_.data = this.model.get('data');\\n  },\\n  configChanged_: function() {\\n    this.view_.config = this.model.get('config');\\n  },\\n});\\n\\nconst FairnessIndicatorModel = widgets.DOMWidgetModel.extend({\\n  defaults: _.extend(widgets.DOMWidgetModel.prototype.defaults(), {\\n    _model_name: FAIRNESS_INDICATOR_MODEL_NAME,\\n    _v`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 120252,
                  "endLine": 1,
                  "endColumn": 120257,
                  "snippet": {
                    "text": "ed_();\\n      this.model.on('change:config', this.configChanged_, this);\\n      this.model.on('change:data', this.dataChanged_, this);\\n    });\\n  },\\n  dataChanged_: function() {\\n    this.view_.data = this.model.get('data');\\n  },\\n  configChanged_: function() {\\n    this.view_.config = this.model.get('config');\\n  },\\n});\\n\\nconst PlotModel = widgets.DOMWidgetModel.extend({\\n  defaults: _.extend(widgets.DOMWidgetModel.prototype.defaults(), {\\n    _model_name: PLOT_MODEL_NAME,\\n    _view_name: PLOT_VIEW_NAME,\\n    _model_module: MODULE_NAME,\\n    _view_module: MODULE_NAME,\\n    _model_module_vers",
                    "rendered": {
                      "text": "ed_();\\n      this.model.on('change:config', this.configChanged_, this);\\n      this.model.on('change:data', this.dataChanged_, this);\\n    });\\n  },\\n  dataChanged_: function() {\\n    this.view_.data = this.model.get('data');\\n  },\\n  configChanged_: function() {\\n    this.view_.config = this.model.get('config');\\n  },\\n});\\n\\nconst PlotModel = widgets.DOMWidgetModel.extend({\\n  defaults: _.extend(widgets.DOMWidgetModel.prototype.defaults(), {\\n    _model_name: PLOT_MODEL_NAME,\\n    _view_name: PLOT_VIEW_NAME,\\n    _model_module: MODULE_NAME,\\n    _view_module: MODULE_NAME,\\n    _model_module_vers",
                      "markdown": "`ed_();\\n      this.model.on('change:config', this.configChanged_, this);\\n      this.model.on('change:data', this.dataChanged_, this);\\n    });\\n  },\\n  dataChanged_: function() {\\n    this.view_.data = this.model.get('data');\\n  },\\n  configChanged_: function() {\\n    this.view_.config = this.model.get('config');\\n  },\\n});\\n\\nconst PlotModel = widgets.DOMWidgetModel.extend({\\n  defaults: _.extend(widgets.DOMWidgetModel.prototype.defaults(), {\\n    _model_name: PLOT_MODEL_NAME,\\n    _view_name: PLOT_VIEW_NAME,\\n    _model_module: MODULE_NAME,\\n    _view_module: MODULE_NAME,\\n    _model_module_vers`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 120165,
                  "endLine": 1,
                  "endColumn": 120170,
                  "snippet": {
                    "text": "iew_);\\n\\n    delayedRender(() => {\\n      this.configChanged_();\\n      this.dataChanged_();\\n      this.model.on('change:config', this.configChanged_, this);\\n      this.model.on('change:data', this.dataChanged_, this);\\n    });\\n  },\\n  dataChanged_: function() {\\n    this.view_.data = this.model.get('data');\\n  },\\n  configChanged_: function() {\\n    this.view_.config = this.model.get('config');\\n  },\\n});\\n\\nconst PlotModel = widgets.DOMWidgetModel.extend({\\n  defaults: _.extend(widgets.DOMWidgetModel.prototype.defaults(), {\\n    _model_name: PLOT_MODEL_NAME,\\n    _view_name: PLOT_VIEW_NAME,\\n",
                    "rendered": {
                      "text": "iew_);\\n\\n    delayedRender(() => {\\n      this.configChanged_();\\n      this.dataChanged_();\\n      this.model.on('change:config', this.configChanged_, this);\\n      this.model.on('change:data', this.dataChanged_, this);\\n    });\\n  },\\n  dataChanged_: function() {\\n    this.view_.data = this.model.get('data');\\n  },\\n  configChanged_: function() {\\n    this.view_.config = this.model.get('config');\\n  },\\n});\\n\\nconst PlotModel = widgets.DOMWidgetModel.extend({\\n  defaults: _.extend(widgets.DOMWidgetModel.prototype.defaults(), {\\n    _model_name: PLOT_MODEL_NAME,\\n    _view_name: PLOT_VIEW_NAME,\\n",
                      "markdown": "`iew_);\\n\\n    delayedRender(() => {\\n      this.configChanged_();\\n      this.dataChanged_();\\n      this.model.on('change:config', this.configChanged_, this);\\n      this.model.on('change:data', this.dataChanged_, this);\\n    });\\n  },\\n  dataChanged_: function() {\\n    this.view_.data = this.model.get('data');\\n  },\\n  configChanged_: function() {\\n    this.view_.config = this.model.get('config');\\n  },\\n});\\n\\nconst PlotModel = widgets.DOMWidgetModel.extend({\\n  defaults: _.extend(widgets.DOMWidgetModel.prototype.defaults(), {\\n    _model_name: PLOT_MODEL_NAME,\\n    _view_name: PLOT_VIEW_NAME,\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 119223,
                  "endLine": 1,
                  "endColumn": 119228,
                  "snippet": {
                    "text": "ed_();\\n      this.model.on('change:config', this.configChanged_, this);\\n      this.model.on('change:data', this.dataChanged_, this);\\n    });\\n  },\\n  dataChanged_: function() {\\n    this.view_.data = this.model.get('data');\\n  },\\n  configChanged_: function() {\\n    this.view_.config = this.model.get('config');\\n  },\\n});\\n\\nconst TimeSeriesModel = widgets.DOMWidgetModel.extend({\\n  defaults: _.extend(widgets.DOMWidgetModel.prototype.defaults(), {\\n    _model_name: TIME_SERIES_MODEL_NAME,\\n    _view_name: TIME_SERIES_VIEW_NAME,\\n    _model_module: MODULE_NAME,\\n    _view_module: MODULE_NAME,\\n  ",
                    "rendered": {
                      "text": "ed_();\\n      this.model.on('change:config', this.configChanged_, this);\\n      this.model.on('change:data', this.dataChanged_, this);\\n    });\\n  },\\n  dataChanged_: function() {\\n    this.view_.data = this.model.get('data');\\n  },\\n  configChanged_: function() {\\n    this.view_.config = this.model.get('config');\\n  },\\n});\\n\\nconst TimeSeriesModel = widgets.DOMWidgetModel.extend({\\n  defaults: _.extend(widgets.DOMWidgetModel.prototype.defaults(), {\\n    _model_name: TIME_SERIES_MODEL_NAME,\\n    _view_name: TIME_SERIES_VIEW_NAME,\\n    _model_module: MODULE_NAME,\\n    _view_module: MODULE_NAME,\\n  ",
                      "markdown": "`ed_();\\n      this.model.on('change:config', this.configChanged_, this);\\n      this.model.on('change:data', this.dataChanged_, this);\\n    });\\n  },\\n  dataChanged_: function() {\\n    this.view_.data = this.model.get('data');\\n  },\\n  configChanged_: function() {\\n    this.view_.config = this.model.get('config');\\n  },\\n});\\n\\nconst TimeSeriesModel = widgets.DOMWidgetModel.extend({\\n  defaults: _.extend(widgets.DOMWidgetModel.prototype.defaults(), {\\n    _model_name: TIME_SERIES_MODEL_NAME,\\n    _view_name: TIME_SERIES_VIEW_NAME,\\n    _model_module: MODULE_NAME,\\n    _view_module: MODULE_NAME,\\n  `"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 119136,
                  "endLine": 1,
                  "endColumn": 119141,
                  "snippet": {
                    "text": "   });\\n\\n    delayedRender(() => {\\n      this.configChanged_();\\n      this.dataChanged_();\\n      this.model.on('change:config', this.configChanged_, this);\\n      this.model.on('change:data', this.dataChanged_, this);\\n    });\\n  },\\n  dataChanged_: function() {\\n    this.view_.data = this.model.get('data');\\n  },\\n  configChanged_: function() {\\n    this.view_.config = this.model.get('config');\\n  },\\n});\\n\\nconst TimeSeriesModel = widgets.DOMWidgetModel.extend({\\n  defaults: _.extend(widgets.DOMWidgetModel.prototype.defaults(), {\\n    _model_name: TIME_SERIES_MODEL_NAME,\\n    _view_name: TIME",
                    "rendered": {
                      "text": "   });\\n\\n    delayedRender(() => {\\n      this.configChanged_();\\n      this.dataChanged_();\\n      this.model.on('change:config', this.configChanged_, this);\\n      this.model.on('change:data', this.dataChanged_, this);\\n    });\\n  },\\n  dataChanged_: function() {\\n    this.view_.data = this.model.get('data');\\n  },\\n  configChanged_: function() {\\n    this.view_.config = this.model.get('config');\\n  },\\n});\\n\\nconst TimeSeriesModel = widgets.DOMWidgetModel.extend({\\n  defaults: _.extend(widgets.DOMWidgetModel.prototype.defaults(), {\\n    _model_name: TIME_SERIES_MODEL_NAME,\\n    _view_name: TIME",
                      "markdown": "`   });\\n\\n    delayedRender(() => {\\n      this.configChanged_();\\n      this.dataChanged_();\\n      this.model.on('change:config', this.configChanged_, this);\\n      this.model.on('change:data', this.dataChanged_, this);\\n    });\\n  },\\n  dataChanged_: function() {\\n    this.view_.data = this.model.get('data');\\n  },\\n  configChanged_: function() {\\n    this.view_.config = this.model.get('config');\\n  },\\n});\\n\\nconst TimeSeriesModel = widgets.DOMWidgetModel.extend({\\n  defaults: _.extend(widgets.DOMWidgetModel.prototype.defaults(), {\\n    _model_name: TIME_SERIES_MODEL_NAME,\\n    _view_name: TIME`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 649869,
                  "endLine": 1,
                  "endColumn": 649873,
                  "snippet": {
                    "text": "objects, _.property(['a', 'b'])), 'a.b');\\n     * // => [1, 2]\\n     */\\n    function property(path) {\\n      return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);\\n    }\\n\\n    /**\\n     * The opposite of `_.property`; this method creates a function that returns\\n     * the value at a given path of `object`.\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 3.0.0\\n     * @category Util\\n     * @param {Object} object The object to query.\\n     * @returns {Function} Returns the new accessor function.\\n     * @example\\n     *\\n     * var array = [0, 1, 2],\\n     *     obj",
                    "rendered": {
                      "text": "objects, _.property(['a', 'b'])), 'a.b');\\n     * // => [1, 2]\\n     */\\n    function property(path) {\\n      return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);\\n    }\\n\\n    /**\\n     * The opposite of `_.property`; this method creates a function that returns\\n     * the value at a given path of `object`.\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 3.0.0\\n     * @category Util\\n     * @param {Object} object The object to query.\\n     * @returns {Function} Returns the new accessor function.\\n     * @example\\n     *\\n     * var array = [0, 1, 2],\\n     *     obj",
                      "markdown": "`objects, _.property(['a', 'b'])), 'a.b');\\n     * // => [1, 2]\\n     */\\n    function property(path) {\\n      return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);\\n    }\\n\\n    /**\\n     * The opposite of `_.property`; this method creates a function that returns\\n     * the value at a given path of `object`.\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 3.0.0\\n     * @category Util\\n     * @param {Object} object The object to query.\\n     * @returns {Function} Returns the new accessor function.\\n     * @example\\n     *\\n     * var array = [0, 1, 2],\\n     *     obj`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 649096,
                  "endLine": 1,
                  "endColumn": 649100,
                  "snippet": {
                    "text": "ue\\n     *\\n     * func(NaN);\\n     * // => false\\n     *\\n     * var matchesFunc = _.overSome([{ 'a': 1 }, { 'a': 2 }])\\n     * var matchesPropertyFunc = _.overSome([['a', 1], ['a', 2]])\\n     */\\n    var overSome = createOver(arraySome);\\n\\n    /**\\n     * Creates a function that returns the value at `path` of a given object.\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 2.4.0\\n     * @category Util\\n     * @param {Array|string} path The path of the property to get.\\n     * @returns {Function} Returns the new accessor function.\\n     * @example\\n     *\\n     * var objects = [\\n     ",
                    "rendered": {
                      "text": "ue\\n     *\\n     * func(NaN);\\n     * // => false\\n     *\\n     * var matchesFunc = _.overSome([{ 'a': 1 }, { 'a': 2 }])\\n     * var matchesPropertyFunc = _.overSome([['a', 1], ['a', 2]])\\n     */\\n    var overSome = createOver(arraySome);\\n\\n    /**\\n     * Creates a function that returns the value at `path` of a given object.\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 2.4.0\\n     * @category Util\\n     * @param {Array|string} path The path of the property to get.\\n     * @returns {Function} Returns the new accessor function.\\n     * @example\\n     *\\n     * var objects = [\\n     ",
                      "markdown": "`ue\\n     *\\n     * func(NaN);\\n     * // => false\\n     *\\n     * var matchesFunc = _.overSome([{ 'a': 1 }, { 'a': 2 }])\\n     * var matchesPropertyFunc = _.overSome([['a', 1], ['a', 2]])\\n     */\\n    var overSome = createOver(arraySome);\\n\\n    /**\\n     * Creates a function that returns the value at `path` of a given object.\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 2.4.0\\n     * @category Util\\n     * @param {Array|string} path The path of the property to get.\\n     * @returns {Function} Returns the new accessor function.\\n     * @example\\n     *\\n     * var objects = [\\n     `"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 645793,
                  "endLine": 1,
                  "endColumn": 645797,
                  "snippet": {
                    "text": "   * @static\\n     * @memberOf _\\n     * @since 2.3.0\\n     * @category Util\\n     * @example\\n     *\\n     * _.times(2, _.noop);\\n     * // => [undefined, undefined]\\n     */\\n    function noop() {\\n      // No operation performed.\\n    }\\n\\n    /**\\n     * Creates a function that gets the argument at index `n`. If `n` is negative,\\n     * the nth argument from the end is returned.\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 4.0.0\\n     * @category Util\\n     * @param {number} [n=0] The index of the argument to return.\\n     * @returns {Function} Returns the new pass-thru function.",
                    "rendered": {
                      "text": "   * @static\\n     * @memberOf _\\n     * @since 2.3.0\\n     * @category Util\\n     * @example\\n     *\\n     * _.times(2, _.noop);\\n     * // => [undefined, undefined]\\n     */\\n    function noop() {\\n      // No operation performed.\\n    }\\n\\n    /**\\n     * Creates a function that gets the argument at index `n`. If `n` is negative,\\n     * the nth argument from the end is returned.\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 4.0.0\\n     * @category Util\\n     * @param {number} [n=0] The index of the argument to return.\\n     * @returns {Function} Returns the new pass-thru function.",
                      "markdown": "`   * @static\\n     * @memberOf _\\n     * @since 2.3.0\\n     * @category Util\\n     * @example\\n     *\\n     * _.times(2, _.noop);\\n     * // => [undefined, undefined]\\n     */\\n    function noop() {\\n      // No operation performed.\\n    }\\n\\n    /**\\n     * Creates a function that gets the argument at index `n`. If `n` is negative,\\n     * the nth argument from the end is returned.\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 4.0.0\\n     * @category Util\\n     * @param {number} [n=0] The index of the argument to return.\\n     * @returns {Function} Returns the new pass-thru function.`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 641647,
                  "endLine": 1,
                  "endColumn": 641651,
                  "snippet": {
                    "text": "', 'b']));\\n     * // => [2, 1]\\n     */\\n    var method = baseRest(function(path, args) {\\n      return function(object) {\\n        return baseInvoke(object, path, args);\\n      };\\n    });\\n\\n    /**\\n     * The opposite of `_.method`; this method creates a function that invokes\\n     * the method at a given path of `object`. Any additional arguments are\\n     * provided to the invoked method.\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 3.7.0\\n     * @category Util\\n     * @param {Object} object The object to query.\\n     * @param {...*} [args] The arguments to invoke the method w",
                    "rendered": {
                      "text": "', 'b']));\\n     * // => [2, 1]\\n     */\\n    var method = baseRest(function(path, args) {\\n      return function(object) {\\n        return baseInvoke(object, path, args);\\n      };\\n    });\\n\\n    /**\\n     * The opposite of `_.method`; this method creates a function that invokes\\n     * the method at a given path of `object`. Any additional arguments are\\n     * provided to the invoked method.\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 3.7.0\\n     * @category Util\\n     * @param {Object} object The object to query.\\n     * @param {...*} [args] The arguments to invoke the method w",
                      "markdown": "`', 'b']));\\n     * // => [2, 1]\\n     */\\n    var method = baseRest(function(path, args) {\\n      return function(object) {\\n        return baseInvoke(object, path, args);\\n      };\\n    });\\n\\n    /**\\n     * The opposite of `_.method`; this method creates a function that invokes\\n     * the method at a given path of `object`. Any additional arguments are\\n     * provided to the invoked method.\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 3.7.0\\n     * @category Util\\n     * @param {Object} object The object to query.\\n     * @param {...*} [args] The arguments to invoke the method w`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 640701,
                  "endLine": 1,
                  "endColumn": 640705,
                  "snippet": {
                    "text": "chesProperty('a', 4)]));\\n     * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]\\n     */\\n    function matchesProperty(path, srcValue) {\\n      return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));\\n    }\\n\\n    /**\\n     * Creates a function that invokes the method at `path` of a given object.\\n     * Any additional arguments are provided to the invoked method.\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 3.7.0\\n     * @category Util\\n     * @param {Array|string} path The path of the method to invoke.\\n     * @param {...*} [args] The arguments to in",
                    "rendered": {
                      "text": "chesProperty('a', 4)]));\\n     * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]\\n     */\\n    function matchesProperty(path, srcValue) {\\n      return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));\\n    }\\n\\n    /**\\n     * Creates a function that invokes the method at `path` of a given object.\\n     * Any additional arguments are provided to the invoked method.\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 3.7.0\\n     * @category Util\\n     * @param {Array|string} path The path of the method to invoke.\\n     * @param {...*} [args] The arguments to in",
                      "markdown": "`chesProperty('a', 4)]));\\n     * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]\\n     */\\n    function matchesProperty(path, srcValue) {\\n      return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));\\n    }\\n\\n    /**\\n     * Creates a function that invokes the method at `path` of a given object.\\n     * Any additional arguments are provided to the invoked method.\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 3.7.0\\n     * @category Util\\n     * @param {Array|string} path The path of the method to invoke.\\n     * @param {...*} [args] The arguments to in`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 639316,
                  "endLine": 1,
                  "endColumn": 639320,
                  "snippet": {
                    "text": " 'a': 4 })]));\\n     * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]\\n     */\\n    function matches(source) {\\n      return baseMatches(baseClone(source, CLONE_DEEP_FLAG));\\n    }\\n\\n    /**\\n     * Creates a function that performs a partial deep comparison between the\\n     * value at `path` of a given object to `srcValue`, returning `true` if the\\n     * object value is equivalent, else `false`.\\n     *\\n     * **Note:** Partial comparisons will match empty array and empty object\\n     * `srcValue` values against any array or object value, respectively. See\\n     * `_.isEqual` f",
                    "rendered": {
                      "text": " 'a': 4 })]));\\n     * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]\\n     */\\n    function matches(source) {\\n      return baseMatches(baseClone(source, CLONE_DEEP_FLAG));\\n    }\\n\\n    /**\\n     * Creates a function that performs a partial deep comparison between the\\n     * value at `path` of a given object to `srcValue`, returning `true` if the\\n     * object value is equivalent, else `false`.\\n     *\\n     * **Note:** Partial comparisons will match empty array and empty object\\n     * `srcValue` values against any array or object value, respectively. See\\n     * `_.isEqual` f",
                      "markdown": "` 'a': 4 })]));\\n     * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]\\n     */\\n    function matches(source) {\\n      return baseMatches(baseClone(source, CLONE_DEEP_FLAG));\\n    }\\n\\n    /**\\n     * Creates a function that performs a partial deep comparison between the\\n     * value at `path` of a given object to `srcValue`, returning `true` if the\\n     * object value is equivalent, else `false`.\\n     *\\n     * **Note:** Partial comparisons will match empty array and empty object\\n     * `srcValue` values against any array or object value, respectively. See\\n     * `_.isEqual` f`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 581682,
                  "endLine": 1,
                  "endColumn": 581686,
                  "snippet": {
                    "text": "   }\\n        else {\\n          accumulator = {};\\n        }\\n      }\\n      (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object) {\\n        return iteratee(accumulator, value, index, object);\\n      });\\n      return accumulator;\\n    }\\n\\n    /**\\n     * Removes the property at `path` of `object`.\\n     *\\n     * **Note:** This method mutates `object`.\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 4.0.0\\n     * @category Object\\n     * @param {Object} object The object to modify.\\n     * @param {Array|string} path The path of the property to unset.\\n     * @re",
                    "rendered": {
                      "text": "   }\\n        else {\\n          accumulator = {};\\n        }\\n      }\\n      (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object) {\\n        return iteratee(accumulator, value, index, object);\\n      });\\n      return accumulator;\\n    }\\n\\n    /**\\n     * Removes the property at `path` of `object`.\\n     *\\n     * **Note:** This method mutates `object`.\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 4.0.0\\n     * @category Object\\n     * @param {Object} object The object to modify.\\n     * @param {Array|string} path The path of the property to unset.\\n     * @re",
                      "markdown": "`   }\\n        else {\\n          accumulator = {};\\n        }\\n      }\\n      (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object) {\\n        return iteratee(accumulator, value, index, object);\\n      });\\n      return accumulator;\\n    }\\n\\n    /**\\n     * Removes the property at `path` of `object`.\\n     *\\n     * **Note:** This method mutates `object`.\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 4.0.0\\n     * @category Object\\n     * @param {Object} object The object to modify.\\n     * @param {Array|string} path The path of the property to unset.\\n     * @re`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 575932,
                  "endLine": 1,
                  "endColumn": 575936,
                  "snippet": {
                    "text": "bject == null ? undefined : object[toKey(path[index])];\\n        if (value === undefined) {\\n          index = length;\\n          value = defaultValue;\\n        }\\n        object = isFunction(value) ? value.call(object) : value;\\n      }\\n      return object;\\n    }\\n\\n    /**\\n     * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,\\n     * it's created. Arrays are created for missing index properties while objects\\n     * are created for all other missing properties. Use `_.setWith` to customize\\n     * `path` creation.\\n     *\\n     * **Note:** This method mutates `obj",
                    "rendered": {
                      "text": "bject == null ? undefined : object[toKey(path[index])];\\n        if (value === undefined) {\\n          index = length;\\n          value = defaultValue;\\n        }\\n        object = isFunction(value) ? value.call(object) : value;\\n      }\\n      return object;\\n    }\\n\\n    /**\\n     * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,\\n     * it's created. Arrays are created for missing index properties while objects\\n     * are created for all other missing properties. Use `_.setWith` to customize\\n     * `path` creation.\\n     *\\n     * **Note:** This method mutates `obj",
                      "markdown": "`bject == null ? undefined : object[toKey(path[index])];\\n        if (value === undefined) {\\n          index = length;\\n          value = defaultValue;\\n        }\\n        object = isFunction(value) ? value.call(object) : value;\\n      }\\n      return object;\\n    }\\n\\n    /**\\n     * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,\\n     * it's created. Arrays are created for missing index properties while objects\\n     * are created for all other missing properties. Use `_.setWith` to customize\\n     * `path` creation.\\n     *\\n     * **Note:** This method mutates `obj`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 563344,
                  "endLine": 1,
                  "endColumn": 563348,
                  "snippet": {
                    "text": "typeof value.toString != 'function') {\\n        value = nativeObjectToString.call(value);\\n      }\\n\\n      if (hasOwnProperty.call(result, value)) {\\n        result[value].push(key);\\n      } else {\\n        result[value] = [key];\\n      }\\n    }, getIteratee);\\n\\n    /**\\n     * Invokes the method at `path` of `object`.\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 4.0.0\\n     * @category Object\\n     * @param {Object} object The object to query.\\n     * @param {Array|string} path The path of the method to invoke.\\n     * @param {...*} [args] The arguments to invoke the method with.",
                    "rendered": {
                      "text": "typeof value.toString != 'function') {\\n        value = nativeObjectToString.call(value);\\n      }\\n\\n      if (hasOwnProperty.call(result, value)) {\\n        result[value].push(key);\\n      } else {\\n        result[value] = [key];\\n      }\\n    }, getIteratee);\\n\\n    /**\\n     * Invokes the method at `path` of `object`.\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 4.0.0\\n     * @category Object\\n     * @param {Object} object The object to query.\\n     * @param {Array|string} path The path of the method to invoke.\\n     * @param {...*} [args] The arguments to invoke the method with.",
                      "markdown": "`typeof value.toString != 'function') {\\n        value = nativeObjectToString.call(value);\\n      }\\n\\n      if (hasOwnProperty.call(result, value)) {\\n        result[value].push(key);\\n      } else {\\n        result[value] = [key];\\n      }\\n    }, getIteratee);\\n\\n    /**\\n     * Invokes the method at `path` of `object`.\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 4.0.0\\n     * @category Object\\n     * @param {Object} object The object to query.\\n     * @param {Array|string} path The path of the method to invoke.\\n     * @param {...*} [args] The arguments to invoke the method with.`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 558589,
                  "endLine": 1,
                  "endColumn": 558593,
                  "snippet": {
                    "text": "nt('b');\\n     * }\\n     *\\n     * Foo.prototype.c = _.constant('c');\\n     *\\n     * _.functionsIn(new Foo);\\n     * // => ['a', 'b', 'c']\\n     */\\n    function functionsIn(object) {\\n      return object == null ? [] : baseFunctions(object, keysIn(object));\\n    }\\n\\n    /**\\n     * Gets the value at `path` of `object`. If the resolved value is\\n     * `undefined`, the `defaultValue` is returned in its place.\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 3.7.0\\n     * @category Object\\n     * @param {Object} object The object to query.\\n     * @param {Array|string} path The path of ",
                    "rendered": {
                      "text": "nt('b');\\n     * }\\n     *\\n     * Foo.prototype.c = _.constant('c');\\n     *\\n     * _.functionsIn(new Foo);\\n     * // => ['a', 'b', 'c']\\n     */\\n    function functionsIn(object) {\\n      return object == null ? [] : baseFunctions(object, keysIn(object));\\n    }\\n\\n    /**\\n     * Gets the value at `path` of `object`. If the resolved value is\\n     * `undefined`, the `defaultValue` is returned in its place.\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 3.7.0\\n     * @category Object\\n     * @param {Object} object The object to query.\\n     * @param {Array|string} path The path of ",
                      "markdown": "`nt('b');\\n     * }\\n     *\\n     * Foo.prototype.c = _.constant('c');\\n     *\\n     * _.functionsIn(new Foo);\\n     * // => ['a', 'b', 'c']\\n     */\\n    function functionsIn(object) {\\n      return object == null ? [] : baseFunctions(object, keysIn(object));\\n    }\\n\\n    /**\\n     * Gets the value at `path` of `object`. If the resolved value is\\n     * `undefined`, the `defaultValue` is returned in its place.\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 3.7.0\\n     * @category Object\\n     * @param {Object} object The object to query.\\n     * @param {Array|string} path The path of `"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 546951,
                  "endLine": 1,
                  "endColumn": 546955,
                  "snippet": {
                    "text": "r.\\n     * @param {...(string|string[])} [paths] The property paths to pick.\\n     * @returns {Array} Returns the picked values.\\n     * @example\\n     *\\n     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };\\n     *\\n     * _.at(object, ['a[0].b.c', 'a[1]']);\\n     * // => [3, 4]\\n     */\\n    var at = flatRest(baseAt);\\n\\n    /**\\n     * Creates an object that inherits from the `prototype` object. If a\\n     * `properties` object is given, its own enumerable string keyed properties\\n     * are assigned to the created object.\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 2.3.0\\n    ",
                    "rendered": {
                      "text": "r.\\n     * @param {...(string|string[])} [paths] The property paths to pick.\\n     * @returns {Array} Returns the picked values.\\n     * @example\\n     *\\n     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };\\n     *\\n     * _.at(object, ['a[0].b.c', 'a[1]']);\\n     * // => [3, 4]\\n     */\\n    var at = flatRest(baseAt);\\n\\n    /**\\n     * Creates an object that inherits from the `prototype` object. If a\\n     * `properties` object is given, its own enumerable string keyed properties\\n     * are assigned to the created object.\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 2.3.0\\n    ",
                      "markdown": "`r.\\n     * @param {...(string|string[])} [paths] The property paths to pick.\\n     * @returns {Array} Returns the picked values.\\n     * @example\\n     *\\n     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };\\n     *\\n     * _.at(object, ['a[0].b.c', 'a[1]']);\\n     * // => [3, 4]\\n     */\\n    var at = flatRest(baseAt);\\n\\n    /**\\n     * Creates an object that inherits from the `prototype` object. If a\\n     * `properties` object is given, its own enumerable string keyed properties\\n     * are assigned to the created object.\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 2.3.0\\n    `"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 492662,
                  "endLine": 1,
                  "endColumn": 492666,
                  "snippet": {
                    "text": " {\\n        var array = args[start],\\n            otherArgs = castSlice(args, 0, start);\\n\\n        if (array) {\\n          arrayPush(otherArgs, array);\\n        }\\n        return apply(func, this, otherArgs);\\n      });\\n    }\\n\\n    /**\\n     * Creates a throttled function that only invokes `func` at most once per\\n     * every `wait` milliseconds. The throttled function comes with a `cancel`\\n     * method to cancel delayed `func` invocations and a `flush` method to\\n     * immediately invoke them. Provide `options` to indicate whether `func`\\n     * should be invoked on the leading and/or trai",
                    "rendered": {
                      "text": " {\\n        var array = args[start],\\n            otherArgs = castSlice(args, 0, start);\\n\\n        if (array) {\\n          arrayPush(otherArgs, array);\\n        }\\n        return apply(func, this, otherArgs);\\n      });\\n    }\\n\\n    /**\\n     * Creates a throttled function that only invokes `func` at most once per\\n     * every `wait` milliseconds. The throttled function comes with a `cancel`\\n     * method to cancel delayed `func` invocations and a `flush` method to\\n     * immediately invoke them. Provide `options` to indicate whether `func`\\n     * should be invoked on the leading and/or trai",
                      "markdown": "` {\\n        var array = args[start],\\n            otherArgs = castSlice(args, 0, start);\\n\\n        if (array) {\\n          arrayPush(otherArgs, array);\\n        }\\n        return apply(func, this, otherArgs);\\n      });\\n    }\\n\\n    /**\\n     * Creates a throttled function that only invokes `func` at most once per\\n     * every `wait` milliseconds. The throttled function comes with a `cancel`\\n     * method to cancel delayed `func` invocations and a `flush` method to\\n     * immediately invoke them. Provide `options` to indicate whether `func`\\n     * should be invoked on the leading and/or trai`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 489139,
                  "endLine": 1,
                  "endColumn": 489143,
                  "snippet": {
                    "text": "c, WRAP_PARTIAL_RIGHT_FLAG, undefined, partials, holders);\\n    });\\n\\n    /**\\n     * Creates a function that invokes `func` with arguments arranged according\\n     * to the specified `indexes` where the argument value at the first index is\\n     * provided as the first argument, the argument value at the second index is\\n     * provided as the second argument, and so on.\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 3.0.0\\n     * @category Function\\n     * @param {Function} func The function to rearrange arguments for.\\n     * @param {...(number|number[])} indexes The arranged argum",
                    "rendered": {
                      "text": "c, WRAP_PARTIAL_RIGHT_FLAG, undefined, partials, holders);\\n    });\\n\\n    /**\\n     * Creates a function that invokes `func` with arguments arranged according\\n     * to the specified `indexes` where the argument value at the first index is\\n     * provided as the first argument, the argument value at the second index is\\n     * provided as the second argument, and so on.\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 3.0.0\\n     * @category Function\\n     * @param {Function} func The function to rearrange arguments for.\\n     * @param {...(number|number[])} indexes The arranged argum",
                      "markdown": "`c, WRAP_PARTIAL_RIGHT_FLAG, undefined, partials, holders);\\n    });\\n\\n    /**\\n     * Creates a function that invokes `func` with arguments arranged according\\n     * to the specified `indexes` where the argument value at the first index is\\n     * provided as the first argument, the argument value at the second index is\\n     * provided as the second argument, and so on.\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 3.0.0\\n     * @category Function\\n     * @param {Function} func The function to rearrange arguments for.\\n     * @param {...(number|number[])} indexes The arranged argum`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 489058,
                  "endLine": 1,
                  "endColumn": 489062,
                  "snippet": {
                    "text": "= replaceHolders(partials, getHolder(partialRight));\\n      return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined, partials, holders);\\n    });\\n\\n    /**\\n     * Creates a function that invokes `func` with arguments arranged according\\n     * to the specified `indexes` where the argument value at the first index is\\n     * provided as the first argument, the argument value at the second index is\\n     * provided as the second argument, and so on.\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 3.0.0\\n     * @category Function\\n     * @param {Function} func The function to rearrang",
                    "rendered": {
                      "text": "= replaceHolders(partials, getHolder(partialRight));\\n      return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined, partials, holders);\\n    });\\n\\n    /**\\n     * Creates a function that invokes `func` with arguments arranged according\\n     * to the specified `indexes` where the argument value at the first index is\\n     * provided as the first argument, the argument value at the second index is\\n     * provided as the second argument, and so on.\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 3.0.0\\n     * @category Function\\n     * @param {Function} func The function to rearrang",
                      "markdown": "`= replaceHolders(partials, getHolder(partialRight));\\n      return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined, partials, holders);\\n    });\\n\\n    /**\\n     * Creates a function that invokes `func` with arguments arranged according\\n     * to the specified `indexes` where the argument value at the first index is\\n     * provided as the first argument, the argument value at the second index is\\n     * provided as the second argument, and so on.\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 3.0.0\\n     * @category Function\\n     * @param {Function} func The function to rearrang`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 477124,
                  "endLine": 1,
                  "endColumn": 477128,
                  "snippet": {
                    "text": "ilingEdge(time);\\n        }\\n        // Restart the timer.\\n        timerId = setTimeout(timerExpired, remainingWait(time));\\n      }\\n\\n      function trailingEdge(time) {\\n        timerId = undefined;\\n\\n        // Only invoke if we have `lastArgs` which means `func` has been\\n        // debounced at least once.\\n        if (trailing && lastArgs) {\\n          return invokeFunc(time);\\n        }\\n        lastArgs = lastThis = undefined;\\n        return result;\\n      }\\n\\n      function cancel() {\\n        if (timerId !== undefined) {\\n          clearTimeout(timerId);\\n        }\\n        lastInvo",
                    "rendered": {
                      "text": "ilingEdge(time);\\n        }\\n        // Restart the timer.\\n        timerId = setTimeout(timerExpired, remainingWait(time));\\n      }\\n\\n      function trailingEdge(time) {\\n        timerId = undefined;\\n\\n        // Only invoke if we have `lastArgs` which means `func` has been\\n        // debounced at least once.\\n        if (trailing && lastArgs) {\\n          return invokeFunc(time);\\n        }\\n        lastArgs = lastThis = undefined;\\n        return result;\\n      }\\n\\n      function cancel() {\\n        if (timerId !== undefined) {\\n          clearTimeout(timerId);\\n        }\\n        lastInvo",
                      "markdown": "`ilingEdge(time);\\n        }\\n        // Restart the timer.\\n        timerId = setTimeout(timerExpired, remainingWait(time));\\n      }\\n\\n      function trailingEdge(time) {\\n        timerId = undefined;\\n\\n        // Only invoke if we have `lastArgs` which means `func` has been\\n        // debounced at least once.\\n        if (trailing && lastArgs) {\\n          return invokeFunc(time);\\n        }\\n        lastArgs = lastThis = undefined;\\n        return result;\\n      }\\n\\n      function cancel() {\\n        if (timerId !== undefined) {\\n          clearTimeout(timerId);\\n        }\\n        lastInvo`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 476376,
                  "endLine": 1,
                  "endColumn": 476380,
                  "snippet": {
                    "text": "aiting, maxWait - timeSinceLastInvoke)\\n          : timeWaiting;\\n      }\\n\\n      function shouldInvoke(time) {\\n        var timeSinceLastCall = time - lastCallTime,\\n            timeSinceLastInvoke = time - lastInvokeTime;\\n\\n        // Either this is the first call, activity has stopped and we're at the\\n        // trailing edge, the system time has gone backwards and we're treating\\n        // it as the trailing edge, or we've hit the `maxWait` limit.\\n        return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||\\n          (timeSinceLastCall < 0) || (maxing && timeSinceLastInvo",
                    "rendered": {
                      "text": "aiting, maxWait - timeSinceLastInvoke)\\n          : timeWaiting;\\n      }\\n\\n      function shouldInvoke(time) {\\n        var timeSinceLastCall = time - lastCallTime,\\n            timeSinceLastInvoke = time - lastInvokeTime;\\n\\n        // Either this is the first call, activity has stopped and we're at the\\n        // trailing edge, the system time has gone backwards and we're treating\\n        // it as the trailing edge, or we've hit the `maxWait` limit.\\n        return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||\\n          (timeSinceLastCall < 0) || (maxing && timeSinceLastInvo",
                      "markdown": "`aiting, maxWait - timeSinceLastInvoke)\\n          : timeWaiting;\\n      }\\n\\n      function shouldInvoke(time) {\\n        var timeSinceLastCall = time - lastCallTime,\\n            timeSinceLastInvoke = time - lastInvokeTime;\\n\\n        // Either this is the first call, activity has stopped and we're at the\\n        // trailing edge, the system time has gone backwards and we're treating\\n        // it as the trailing edge, or we've hit the `maxWait` limit.\\n        return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||\\n          (timeSinceLastCall < 0) || (maxing && timeSinceLastInvo`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 468796,
                  "endLine": 1,
                  "endColumn": 468800,
                  "snippet": {
                    "text": " replaceHolders(partials, getHolder(bindKey));\\n        bitmask |= WRAP_PARTIAL_FLAG;\\n      }\\n      return createWrap(key, bitmask, object, partials, holders);\\n    });\\n\\n    /**\\n     * Creates a function that accepts arguments of `func` and either invokes\\n     * `func` returning its result, if at least `arity` number of arguments have\\n     * been provided, or returns a function that accepts the remaining `func`\\n     * arguments, and so on. The arity of `func` may be specified if `func.length`\\n     * is not sufficient.\\n     *\\n     * The `_.curry.placeholder` value, which defaults to `_` ",
                    "rendered": {
                      "text": " replaceHolders(partials, getHolder(bindKey));\\n        bitmask |= WRAP_PARTIAL_FLAG;\\n      }\\n      return createWrap(key, bitmask, object, partials, holders);\\n    });\\n\\n    /**\\n     * Creates a function that accepts arguments of `func` and either invokes\\n     * `func` returning its result, if at least `arity` number of arguments have\\n     * been provided, or returns a function that accepts the remaining `func`\\n     * arguments, and so on. The arity of `func` may be specified if `func.length`\\n     * is not sufficient.\\n     *\\n     * The `_.curry.placeholder` value, which defaults to `_` ",
                      "markdown": "` replaceHolders(partials, getHolder(bindKey));\\n        bitmask |= WRAP_PARTIAL_FLAG;\\n      }\\n      return createWrap(key, bitmask, object, partials, holders);\\n    });\\n\\n    /**\\n     * Creates a function that accepts arguments of `func` and either invokes\\n     * `func` returning its result, if at least `arity` number of arguments have\\n     * been provided, or returns a function that accepts the remaining `func`\\n     * arguments, and so on. The arity of `func` may be specified if `func.length`\\n     * is not sufficient.\\n     *\\n     * The `_.curry.placeholder` value, which defaults to `_` `"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 466787,
                  "endLine": 1,
                  "endColumn": 466791,
                  "snippet": {
                    "text": " WRAP_BIND_FLAG;\\n      if (partials.length) {\\n        var holders = replaceHolders(partials, getHolder(bind));\\n        bitmask |= WRAP_PARTIAL_FLAG;\\n      }\\n      return createWrap(func, bitmask, thisArg, partials, holders);\\n    });\\n\\n    /**\\n     * Creates a function that invokes the method at `object[key]` with `partials`\\n     * prepended to the arguments it receives.\\n     *\\n     * This method differs from `_.bind` by allowing bound functions to reference\\n     * methods that may be redefined or don't yet exist. See\\n     * [Peter Michaux's article](http://peter.michaux.ca/articles/la",
                    "rendered": {
                      "text": " WRAP_BIND_FLAG;\\n      if (partials.length) {\\n        var holders = replaceHolders(partials, getHolder(bind));\\n        bitmask |= WRAP_PARTIAL_FLAG;\\n      }\\n      return createWrap(func, bitmask, thisArg, partials, holders);\\n    });\\n\\n    /**\\n     * Creates a function that invokes the method at `object[key]` with `partials`\\n     * prepended to the arguments it receives.\\n     *\\n     * This method differs from `_.bind` by allowing bound functions to reference\\n     * methods that may be redefined or don't yet exist. See\\n     * [Peter Michaux's article](http://peter.michaux.ca/articles/la",
                      "markdown": "` WRAP_BIND_FLAG;\\n      if (partials.length) {\\n        var holders = replaceHolders(partials, getHolder(bind));\\n        bitmask |= WRAP_PARTIAL_FLAG;\\n      }\\n      return createWrap(func, bitmask, thisArg, partials, holders);\\n    });\\n\\n    /**\\n     * Creates a function that invokes the method at `object[key]` with `partials`\\n     * prepended to the arguments it receives.\\n     *\\n     * This method differs from `_.bind` by allowing bound functions to reference\\n     * methods that may be redefined or don't yet exist. See\\n     * [Peter Michaux's article](http://peter.michaux.ca/articles/la`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 464468,
                  "endLine": 1,
                  "endColumn": 464472,
                  "snippet": {
                    "text": " of the created function, while it's called less than `n` times. Subsequent\\n     * calls to the created function return the result of the last `func` invocation.\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 3.0.0\\n     * @category Function\\n     * @param {number} n The number of calls at which `func` is no longer invoked.\\n     * @param {Function} func The function to restrict.\\n     * @returns {Function} Returns the new restricted function.\\n     * @example\\n     *\\n     * jQuery(element).on('click', _.before(5, addContactToList));\\n     * // => Allows adding up to 4 contacts to th",
                    "rendered": {
                      "text": " of the created function, while it's called less than `n` times. Subsequent\\n     * calls to the created function return the result of the last `func` invocation.\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 3.0.0\\n     * @category Function\\n     * @param {number} n The number of calls at which `func` is no longer invoked.\\n     * @param {Function} func The function to restrict.\\n     * @returns {Function} Returns the new restricted function.\\n     * @example\\n     *\\n     * jQuery(element).on('click', _.before(5, addContactToList));\\n     * // => Allows adding up to 4 contacts to th",
                      "markdown": "` of the created function, while it's called less than `n` times. Subsequent\\n     * calls to the created function return the result of the last `func` invocation.\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 3.0.0\\n     * @category Function\\n     * @param {number} n The number of calls at which `func` is no longer invoked.\\n     * @param {Function} func The function to restrict.\\n     * @returns {Function} Returns the new restricted function.\\n     * @example\\n     *\\n     * jQuery(element).on('click', _.before(5, addContactToList));\\n     * // => Allows adding up to 4 contacts to th`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 455646,
                  "endLine": 1,
                  "endColumn": 455650,
                  "snippet": {
                    "text": "ns {*} Returns the random element.\\n     * @example\\n     *\\n     * _.sample([1, 2, 3, 4]);\\n     * // => 2\\n     */\\n    function sample(collection) {\\n      var func = isArray(collection) ? arraySample : baseSample;\\n      return func(collection);\\n    }\\n\\n    /**\\n     * Gets `n` random elements at unique keys from `collection` up to the\\n     * size of `collection`.\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 4.0.0\\n     * @category Collection\\n     * @param {Array|Object} collection The collection to sample.\\n     * @param {number} [n=1] The number of elements to sample.\\n    ",
                    "rendered": {
                      "text": "ns {*} Returns the random element.\\n     * @example\\n     *\\n     * _.sample([1, 2, 3, 4]);\\n     * // => 2\\n     */\\n    function sample(collection) {\\n      var func = isArray(collection) ? arraySample : baseSample;\\n      return func(collection);\\n    }\\n\\n    /**\\n     * Gets `n` random elements at unique keys from `collection` up to the\\n     * size of `collection`.\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 4.0.0\\n     * @category Collection\\n     * @param {Array|Object} collection The collection to sample.\\n     * @param {number} [n=1] The number of elements to sample.\\n    ",
                      "markdown": "`ns {*} Returns the random element.\\n     * @example\\n     *\\n     * _.sample([1, 2, 3, 4]);\\n     * // => 2\\n     */\\n    function sample(collection) {\\n      var func = isArray(collection) ? arraySample : baseSample;\\n      return func(collection);\\n    }\\n\\n    /**\\n     * Gets `n` random elements at unique keys from `collection` up to the\\n     * size of `collection`.\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 4.0.0\\n     * @category Collection\\n     * @param {Array|Object} collection The collection to sample.\\n     * @param {number} [n=1] The number of elements to sample.\\n    `"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 443342,
                  "endLine": 1,
                  "endColumn": 443346,
                  "snippet": {
                    "text": " 0) {\\n        fromIndex = nativeMax(length + fromIndex, 0);\\n      }\\n      return isString(collection)\\n        ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)\\n        : (!!length && baseIndexOf(collection, value, fromIndex) > -1);\\n    }\\n\\n    /**\\n     * Invokes the method at `path` of each element in `collection`, returning\\n     * an array of the results of each invoked method. Any additional arguments\\n     * are provided to each invoked method. If `path` is a function, it's invoked\\n     * for, and `this` bound to, each element in `collection`.\\n     *\\n     * @stati",
                    "rendered": {
                      "text": " 0) {\\n        fromIndex = nativeMax(length + fromIndex, 0);\\n      }\\n      return isString(collection)\\n        ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)\\n        : (!!length && baseIndexOf(collection, value, fromIndex) > -1);\\n    }\\n\\n    /**\\n     * Invokes the method at `path` of each element in `collection`, returning\\n     * an array of the results of each invoked method. Any additional arguments\\n     * are provided to each invoked method. If `path` is a function, it's invoked\\n     * for, and `this` bound to, each element in `collection`.\\n     *\\n     * @stati",
                      "markdown": "` 0) {\\n        fromIndex = nativeMax(length + fromIndex, 0);\\n      }\\n      return isString(collection)\\n        ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)\\n        : (!!length && baseIndexOf(collection, value, fromIndex) > -1);\\n    }\\n\\n    /**\\n     * Invokes the method at `path` of each element in `collection`, returning\\n     * an array of the results of each invoked method. Any additional arguments\\n     * are provided to each invoked method. If `path` is a function, it's invoked\\n     * for, and `this` bound to, each element in `collection`.\\n     *\\n     * @stati`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 397262,
                  "endLine": 1,
                  "endColumn": 397266,
                  "snippet": {
                    "text": "tic\\n     * @memberOf _\\n     * @since 4.0.0\\n     * @category Array\\n     * @param {Array} array The sorted array to inspect.\\n     * @param {*} value The value to evaluate.\\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\\n     * @returns {number} Returns the index at which `value` should be inserted\\n     *  into `array`.\\n     * @example\\n     *\\n     * var objects = [{ 'x': 4 }, { 'x': 5 }];\\n     *\\n     * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });\\n     * // => 1\\n     *\\n     * // The `_.property` iteratee shorthand.\\n     * _.so",
                    "rendered": {
                      "text": "tic\\n     * @memberOf _\\n     * @since 4.0.0\\n     * @category Array\\n     * @param {Array} array The sorted array to inspect.\\n     * @param {*} value The value to evaluate.\\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\\n     * @returns {number} Returns the index at which `value` should be inserted\\n     *  into `array`.\\n     * @example\\n     *\\n     * var objects = [{ 'x': 4 }, { 'x': 5 }];\\n     *\\n     * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });\\n     * // => 1\\n     *\\n     * // The `_.property` iteratee shorthand.\\n     * _.so",
                      "markdown": "`tic\\n     * @memberOf _\\n     * @since 4.0.0\\n     * @category Array\\n     * @param {Array} array The sorted array to inspect.\\n     * @param {*} value The value to evaluate.\\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\\n     * @returns {number} Returns the index at which `value` should be inserted\\n     *  into `array`.\\n     * @example\\n     *\\n     * var objects = [{ 'x': 4 }, { 'x': 5 }];\\n     *\\n     * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });\\n     * // => 1\\n     *\\n     * // The `_.property` iteratee shorthand.\\n     * _.so`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 396432,
                  "endLine": 1,
                  "endColumn": 396436,
                  "snippet": {
                    "text": "ted into `array` in order to\\n     * maintain its sort order.\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 3.0.0\\n     * @category Array\\n     * @param {Array} array The sorted array to inspect.\\n     * @param {*} value The value to evaluate.\\n     * @returns {number} Returns the index at which `value` should be inserted\\n     *  into `array`.\\n     * @example\\n     *\\n     * _.sortedLastIndex([4, 5, 5, 5, 6], 5);\\n     * // => 4\\n     */\\n    function sortedLastIndex(array, value) {\\n      return baseSortedIndex(array, value, true);\\n    }\\n\\n    /**\\n     * This method is like `_.s",
                    "rendered": {
                      "text": "ted into `array` in order to\\n     * maintain its sort order.\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 3.0.0\\n     * @category Array\\n     * @param {Array} array The sorted array to inspect.\\n     * @param {*} value The value to evaluate.\\n     * @returns {number} Returns the index at which `value` should be inserted\\n     *  into `array`.\\n     * @example\\n     *\\n     * _.sortedLastIndex([4, 5, 5, 5, 6], 5);\\n     * // => 4\\n     */\\n    function sortedLastIndex(array, value) {\\n      return baseSortedIndex(array, value, true);\\n    }\\n\\n    /**\\n     * This method is like `_.s",
                      "markdown": "`ted into `array` in order to\\n     * maintain its sort order.\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 3.0.0\\n     * @category Array\\n     * @param {Array} array The sorted array to inspect.\\n     * @param {*} value The value to evaluate.\\n     * @returns {number} Returns the index at which `value` should be inserted\\n     *  into `array`.\\n     * @example\\n     *\\n     * _.sortedLastIndex([4, 5, 5, 5, 6], 5);\\n     * // => 4\\n     */\\n    function sortedLastIndex(array, value) {\\n      return baseSortedIndex(array, value, true);\\n    }\\n\\n    /**\\n     * This method is like `_.s`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 396099,
                  "endLine": 1,
                  "endColumn": 396103,
                  "snippet": {
                    "text": "   if (length) {\\n        var index = baseSortedIndex(array, value);\\n        if (index < length && eq(array[index], value)) {\\n          return index;\\n        }\\n      }\\n      return -1;\\n    }\\n\\n    /**\\n     * This method is like `_.sortedIndex` except that it returns the highest\\n     * index at which `value` should be inserted into `array` in order to\\n     * maintain its sort order.\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 3.0.0\\n     * @category Array\\n     * @param {Array} array The sorted array to inspect.\\n     * @param {*} value The value to evaluate.\\n     * @retur",
                    "rendered": {
                      "text": "   if (length) {\\n        var index = baseSortedIndex(array, value);\\n        if (index < length && eq(array[index], value)) {\\n          return index;\\n        }\\n      }\\n      return -1;\\n    }\\n\\n    /**\\n     * This method is like `_.sortedIndex` except that it returns the highest\\n     * index at which `value` should be inserted into `array` in order to\\n     * maintain its sort order.\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 3.0.0\\n     * @category Array\\n     * @param {Array} array The sorted array to inspect.\\n     * @param {*} value The value to evaluate.\\n     * @retur",
                      "markdown": "`   if (length) {\\n        var index = baseSortedIndex(array, value);\\n        if (index < length && eq(array[index], value)) {\\n          return index;\\n        }\\n      }\\n      return -1;\\n    }\\n\\n    /**\\n     * This method is like `_.sortedIndex` except that it returns the highest\\n     * index at which `value` should be inserted into `array` in order to\\n     * maintain its sort order.\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 3.0.0\\n     * @category Array\\n     * @param {Array} array The sorted array to inspect.\\n     * @param {*} value The value to evaluate.\\n     * @retur`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 394717,
                  "endLine": 1,
                  "endColumn": 394721,
                  "snippet": {
                    "text": "tic\\n     * @memberOf _\\n     * @since 4.0.0\\n     * @category Array\\n     * @param {Array} array The sorted array to inspect.\\n     * @param {*} value The value to evaluate.\\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\\n     * @returns {number} Returns the index at which `value` should be inserted\\n     *  into `array`.\\n     * @example\\n     *\\n     * var objects = [{ 'x': 4 }, { 'x': 5 }];\\n     *\\n     * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });\\n     * // => 0\\n     *\\n     * // The `_.property` iteratee shorthand.\\n     * _.sorted",
                    "rendered": {
                      "text": "tic\\n     * @memberOf _\\n     * @since 4.0.0\\n     * @category Array\\n     * @param {Array} array The sorted array to inspect.\\n     * @param {*} value The value to evaluate.\\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\\n     * @returns {number} Returns the index at which `value` should be inserted\\n     *  into `array`.\\n     * @example\\n     *\\n     * var objects = [{ 'x': 4 }, { 'x': 5 }];\\n     *\\n     * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });\\n     * // => 0\\n     *\\n     * // The `_.property` iteratee shorthand.\\n     * _.sorted",
                      "markdown": "`tic\\n     * @memberOf _\\n     * @since 4.0.0\\n     * @category Array\\n     * @param {Array} array The sorted array to inspect.\\n     * @param {*} value The value to evaluate.\\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\\n     * @returns {number} Returns the index at which `value` should be inserted\\n     *  into `array`.\\n     * @example\\n     *\\n     * var objects = [{ 'x': 4 }, { 'x': 5 }];\\n     *\\n     * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });\\n     * // => 0\\n     *\\n     * // The `_.property` iteratee shorthand.\\n     * _.sorted`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 393911,
                  "endLine": 1,
                  "endColumn": 393915,
                  "snippet": {
                    "text": "be inserted into `array` in order to maintain its sort order.\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 0.1.0\\n     * @category Array\\n     * @param {Array} array The sorted array to inspect.\\n     * @param {*} value The value to evaluate.\\n     * @returns {number} Returns the index at which `value` should be inserted\\n     *  into `array`.\\n     * @example\\n     *\\n     * _.sortedIndex([30, 50], 40);\\n     * // => 1\\n     */\\n    function sortedIndex(array, value) {\\n      return baseSortedIndex(array, value);\\n    }\\n\\n    /**\\n     * This method is like `_.sortedIndex` except t",
                    "rendered": {
                      "text": "be inserted into `array` in order to maintain its sort order.\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 0.1.0\\n     * @category Array\\n     * @param {Array} array The sorted array to inspect.\\n     * @param {*} value The value to evaluate.\\n     * @returns {number} Returns the index at which `value` should be inserted\\n     *  into `array`.\\n     * @example\\n     *\\n     * _.sortedIndex([30, 50], 40);\\n     * // => 1\\n     */\\n    function sortedIndex(array, value) {\\n      return baseSortedIndex(array, value);\\n    }\\n\\n    /**\\n     * This method is like `_.sortedIndex` except t",
                      "markdown": "`be inserted into `array` in order to maintain its sort order.\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 0.1.0\\n     * @category Array\\n     * @param {Array} array The sorted array to inspect.\\n     * @param {*} value The value to evaluate.\\n     * @returns {number} Returns the index at which `value` should be inserted\\n     *  into `array`.\\n     * @example\\n     *\\n     * _.sortedIndex([30, 50], 40);\\n     * // => 1\\n     */\\n    function sortedIndex(array, value) {\\n      return baseSortedIndex(array, value);\\n    }\\n\\n    /**\\n     * This method is like `_.sortedIndex` except t`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 393578,
                  "endLine": 1,
                  "endColumn": 393582,
                  "snippet": {
                    "text": "tart = 0;\\n        end = length;\\n      }\\n      else {\\n        start = start == null ? 0 : toInteger(start);\\n        end = end === undefined ? length : toInteger(end);\\n      }\\n      return baseSlice(array, start, end);\\n    }\\n\\n    /**\\n     * Uses a binary search to determine the lowest index at which `value`\\n     * should be inserted into `array` in order to maintain its sort order.\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 0.1.0\\n     * @category Array\\n     * @param {Array} array The sorted array to inspect.\\n     * @param {*} value The value to evaluate.\\n     * @retur",
                    "rendered": {
                      "text": "tart = 0;\\n        end = length;\\n      }\\n      else {\\n        start = start == null ? 0 : toInteger(start);\\n        end = end === undefined ? length : toInteger(end);\\n      }\\n      return baseSlice(array, start, end);\\n    }\\n\\n    /**\\n     * Uses a binary search to determine the lowest index at which `value`\\n     * should be inserted into `array` in order to maintain its sort order.\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 0.1.0\\n     * @category Array\\n     * @param {Array} array The sorted array to inspect.\\n     * @param {*} value The value to evaluate.\\n     * @retur",
                      "markdown": "`tart = 0;\\n        end = length;\\n      }\\n      else {\\n        start = start == null ? 0 : toInteger(start);\\n        end = end === undefined ? length : toInteger(end);\\n      }\\n      return baseSlice(array, start, end);\\n    }\\n\\n    /**\\n     * Uses a binary search to determine the lowest index at which `value`\\n     * should be inserted into `array` in order to maintain its sort order.\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 0.1.0\\n     * @category Array\\n     * @param {Array} array The sorted array to inspect.\\n     * @param {*} value The value to evaluate.\\n     * @retur`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 384830,
                  "endLine": 1,
                  "endColumn": 384834,
                  "snippet": {
                    "text": "toInteger(fromIndex);\\n        index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);\\n      }\\n      return value === value\\n        ? strictLastIndexOf(array, value, index)\\n        : baseFindIndex(array, baseIsNaN, index, true);\\n    }\\n\\n    /**\\n     * Gets the element at index `n` of `array`. If `n` is negative, the nth\\n     * element from the end is returned.\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 4.11.0\\n     * @category Array\\n     * @param {Array} array The array to query.\\n     * @param {number} [n=0] The index of the element to return.\\n  ",
                    "rendered": {
                      "text": "toInteger(fromIndex);\\n        index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);\\n      }\\n      return value === value\\n        ? strictLastIndexOf(array, value, index)\\n        : baseFindIndex(array, baseIsNaN, index, true);\\n    }\\n\\n    /**\\n     * Gets the element at index `n` of `array`. If `n` is negative, the nth\\n     * element from the end is returned.\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 4.11.0\\n     * @category Array\\n     * @param {Array} array The array to query.\\n     * @param {number} [n=0] The index of the element to return.\\n  ",
                      "markdown": "`toInteger(fromIndex);\\n        index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);\\n      }\\n      return value === value\\n        ? strictLastIndexOf(array, value, index)\\n        : baseFindIndex(array, baseIsNaN, index, true);\\n    }\\n\\n    /**\\n     * Gets the element at index `n` of `array`. If `n` is negative, the nth\\n     * element from the end is returned.\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 4.11.0\\n     * @category Array\\n     * @param {Array} array The array to query.\\n     * @param {number} [n=0] The index of the element to return.\\n  `"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 377489,
                  "endLine": 1,
                  "endColumn": 377493,
                  "snippet": {
                    "text": "*} Returns the first element of `array`.\\n     * @example\\n     *\\n     * _.head([1, 2, 3]);\\n     * // => 1\\n     *\\n     * _.head([]);\\n     * // => undefined\\n     */\\n    function head(array) {\\n      return (array && array.length) ? array[0] : undefined;\\n    }\\n\\n    /**\\n     * Gets the index at which the first occurrence of `value` is found in `array`\\n     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\\n     * for equality comparisons. If `fromIndex` is negative, it's used as the\\n     * offset from the end of `array`.\\n     *\\n     * @static\\n   ",
                    "rendered": {
                      "text": "*} Returns the first element of `array`.\\n     * @example\\n     *\\n     * _.head([1, 2, 3]);\\n     * // => 1\\n     *\\n     * _.head([]);\\n     * // => undefined\\n     */\\n    function head(array) {\\n      return (array && array.length) ? array[0] : undefined;\\n    }\\n\\n    /**\\n     * Gets the index at which the first occurrence of `value` is found in `array`\\n     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\\n     * for equality comparisons. If `fromIndex` is negative, it's used as the\\n     * offset from the end of `array`.\\n     *\\n     * @static\\n   ",
                      "markdown": "`*} Returns the first element of `array`.\\n     * @example\\n     *\\n     * _.head([1, 2, 3]);\\n     * // => 1\\n     *\\n     * _.head([]);\\n     * // => undefined\\n     */\\n    function head(array) {\\n      return (array && array.length) ? array[0] : undefined;\\n    }\\n\\n    /**\\n     * Gets the index at which the first occurrence of `value` is found in `array`\\n     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\\n     * for equality comparisons. If `fromIndex` is negative, it's used as the\\n     * offset from the end of `array`.\\n     *\\n     * @static\\n   `"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 353503,
                  "endLine": 1,
                  "endColumn": 353507,
                  "snippet": {
                    "text": "dify.\\n     * @param {Function} string The `toString` result.\\n     * @returns {Function} Returns `func`.\\n     */\\n    var setToString = shortOut(baseSetToString);\\n\\n    /**\\n     * Sets the `toString` method of `wrapper` to mimic the source of `reference`\\n     * with wrapper details in a comment at the top of the source body.\\n     *\\n     * @private\\n     * @param {Function} wrapper The function to modify.\\n     * @param {Function} reference The reference function.\\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\\n     * @returns {Function} Returns `wrappe",
                    "rendered": {
                      "text": "dify.\\n     * @param {Function} string The `toString` result.\\n     * @returns {Function} Returns `func`.\\n     */\\n    var setToString = shortOut(baseSetToString);\\n\\n    /**\\n     * Sets the `toString` method of `wrapper` to mimic the source of `reference`\\n     * with wrapper details in a comment at the top of the source body.\\n     *\\n     * @private\\n     * @param {Function} wrapper The function to modify.\\n     * @param {Function} reference The reference function.\\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\\n     * @returns {Function} Returns `wrappe",
                      "markdown": "`dify.\\n     * @param {Function} string The `toString` result.\\n     * @returns {Function} Returns `func`.\\n     */\\n    var setToString = shortOut(baseSetToString);\\n\\n    /**\\n     * Sets the `toString` method of `wrapper` to mimic the source of `reference`\\n     * with wrapper details in a comment at the top of the source body.\\n     *\\n     * @private\\n     * @param {Function} wrapper The function to modify.\\n     * @param {Function} reference The reference function.\\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\\n     * @returns {Function} Returns `wrappe`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 351506,
                  "endLine": 1,
                  "endColumn": 351510,
                  "snippet": {
                    "text": "h = nativeMin(indexes.length, arrLength),\\n          oldArray = copyArray(array);\\n\\n      while (length--) {\\n        var index = indexes[length];\\n        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;\\n      }\\n      return array;\\n    }\\n\\n    /**\\n     * Gets the value at `key`, unless `key` is \\\"__proto__\\\" or \\\"constructor\\\".\\n     *\\n     * @private\\n     * @param {Object} object The object to query.\\n     * @param {string} key The key of the property to get.\\n     * @returns {*} Returns the property value.\\n     */\\n    function safeGet(object, key) {\\n      if (",
                    "rendered": {
                      "text": "h = nativeMin(indexes.length, arrLength),\\n          oldArray = copyArray(array);\\n\\n      while (length--) {\\n        var index = indexes[length];\\n        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;\\n      }\\n      return array;\\n    }\\n\\n    /**\\n     * Gets the value at `key`, unless `key` is \\\"__proto__\\\" or \\\"constructor\\\".\\n     *\\n     * @private\\n     * @param {Object} object The object to query.\\n     * @param {string} key The key of the property to get.\\n     * @returns {*} Returns the property value.\\n     */\\n    function safeGet(object, key) {\\n      if (",
                      "markdown": "`h = nativeMin(indexes.length, arrLength),\\n          oldArray = copyArray(array);\\n\\n      while (length--) {\\n        var index = indexes[length];\\n        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;\\n      }\\n      return array;\\n    }\\n\\n    /**\\n     * Gets the value at `key`, unless `key` is \\\"__proto__\\\" or \\\"constructor\\\".\\n     *\\n     * @private\\n     * @param {Object} object The object to query.\\n     * @param {string} key The key of the property to get.\\n     * @returns {*} Returns the property value.\\n     */\\n    function safeGet(object, key) {\\n      if (`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 350344,
                  "endLine": 1,
                  "endColumn": 350348,
                  "snippet": {
                    "text": "       index = -1;\\n        var otherArgs = Array(start + 1);\\n        while (++index < start) {\\n          otherArgs[index] = args[index];\\n        }\\n        otherArgs[start] = transform(array);\\n        return apply(func, this, otherArgs);\\n      };\\n    }\\n\\n    /**\\n     * Gets the parent value at `path` of `object`.\\n     *\\n     * @private\\n     * @param {Object} object The object to query.\\n     * @param {Array} path The path to get the parent value of.\\n     * @returns {*} Returns the parent value.\\n     */\\n    function parent(object, path) {\\n      return path.length < 2 ? object : base",
                    "rendered": {
                      "text": "       index = -1;\\n        var otherArgs = Array(start + 1);\\n        while (++index < start) {\\n          otherArgs[index] = args[index];\\n        }\\n        otherArgs[start] = transform(array);\\n        return apply(func, this, otherArgs);\\n      };\\n    }\\n\\n    /**\\n     * Gets the parent value at `path` of `object`.\\n     *\\n     * @private\\n     * @param {Object} object The object to query.\\n     * @param {Array} path The path to get the parent value of.\\n     * @returns {*} Returns the parent value.\\n     */\\n    function parent(object, path) {\\n      return path.length < 2 ? object : base",
                      "markdown": "`       index = -1;\\n        var otherArgs = Array(start + 1);\\n        while (++index < start) {\\n          otherArgs[index] = args[index];\\n        }\\n        otherArgs[start] = transform(array);\\n        return apply(func, this, otherArgs);\\n      };\\n    }\\n\\n    /**\\n     * Gets the parent value at `path` of `object`.\\n     *\\n     * @private\\n     * @param {Object} object The object to query.\\n     * @param {Array} path The path to get the parent value of.\\n     * @returns {*} Returns the parent value.\\n     */\\n    function parent(object, path) {\\n      return path.length < 2 ? object : base`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 338589,
                  "endLine": 1,
                  "endColumn": 338593,
                  "snippet": {
                    "text": "ngTag:\\n          return new Ctor(object);\\n\\n        case regexpTag:\\n          return cloneRegExp(object);\\n\\n        case setTag:\\n          return new Ctor;\\n\\n        case symbolTag:\\n          return cloneSymbol(object);\\n      }\\n    }\\n\\n    /**\\n     * Inserts wrapper `details` in a comment at the top of the `source` body.\\n     *\\n     * @private\\n     * @param {string} source The source to modify.\\n     * @returns {Array} details The details to insert.\\n     * @returns {string} Returns the modified source.\\n     */\\n    function insertWrapDetails(source, details) {\\n      var length = d",
                    "rendered": {
                      "text": "ngTag:\\n          return new Ctor(object);\\n\\n        case regexpTag:\\n          return cloneRegExp(object);\\n\\n        case setTag:\\n          return new Ctor;\\n\\n        case symbolTag:\\n          return cloneSymbol(object);\\n      }\\n    }\\n\\n    /**\\n     * Inserts wrapper `details` in a comment at the top of the `source` body.\\n     *\\n     * @private\\n     * @param {string} source The source to modify.\\n     * @returns {Array} details The details to insert.\\n     * @returns {string} Returns the modified source.\\n     */\\n    function insertWrapDetails(source, details) {\\n      var length = d",
                      "markdown": "`ngTag:\\n          return new Ctor(object);\\n\\n        case regexpTag:\\n          return cloneRegExp(object);\\n\\n        case setTag:\\n          return new Ctor;\\n\\n        case symbolTag:\\n          return cloneSymbol(object);\\n      }\\n    }\\n\\n    /**\\n     * Inserts wrapper `details` in a comment at the top of the `source` body.\\n     *\\n     * @private\\n     * @param {string} source The source to modify.\\n     * @returns {Array} details The details to insert.\\n     * @returns {string} Returns the modified source.\\n     */\\n    function insertWrapDetails(source, details) {\\n      var length = d`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 330491,
                  "endLine": 1,
                  "endColumn": 330495,
                  "snippet": {
                    "text": "t = keys(object),\\n          length = result.length;\\n\\n      while (length--) {\\n        var key = result[length],\\n            value = object[key];\\n\\n        result[length] = [key, value, isStrictComparable(value)];\\n      }\\n      return result;\\n    }\\n\\n    /**\\n     * Gets the native function at `key` of `object`.\\n     *\\n     * @private\\n     * @param {Object} object The object to query.\\n     * @param {string} key The key of the method to get.\\n     * @returns {*} Returns the function if it's native, else `undefined`.\\n     */\\n    function getNative(object, key) {\\n      var value = get",
                    "rendered": {
                      "text": "t = keys(object),\\n          length = result.length;\\n\\n      while (length--) {\\n        var key = result[length],\\n            value = object[key];\\n\\n        result[length] = [key, value, isStrictComparable(value)];\\n      }\\n      return result;\\n    }\\n\\n    /**\\n     * Gets the native function at `key` of `object`.\\n     *\\n     * @private\\n     * @param {Object} object The object to query.\\n     * @param {string} key The key of the method to get.\\n     * @returns {*} Returns the function if it's native, else `undefined`.\\n     */\\n    function getNative(object, key) {\\n      var value = get",
                      "markdown": "`t = keys(object),\\n          length = result.length;\\n\\n      while (length--) {\\n        var key = result[length],\\n            value = object[key];\\n\\n        result[length] = [key, value, isStrictComparable(value)];\\n      }\\n      return result;\\n    }\\n\\n    /**\\n     * Gets the native function at `key` of `object`.\\n     *\\n     * @private\\n     * @param {Object} object The object to query.\\n     * @param {string} key The key of the method to get.\\n     * @returns {*} Returns the function if it's native, else `undefined`.\\n     */\\n    function getNative(object, key) {\\n      var value = get`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 265253,
                  "endLine": 1,
                  "endColumn": 265257,
                  "snippet": {
                    "text": "   * @param {Array} array The sorted array to inspect.\\n     * @param {*} value The value to evaluate.\\n     * @param {Function} iteratee The iteratee invoked per element.\\n     * @param {boolean} [retHighest] Specify returning the highest qualified index.\\n     * @returns {number} Returns the index at which `value` should be inserted\\n     *  into `array`.\\n     */\\n    function baseSortedIndexBy(array, value, iteratee, retHighest) {\\n      var low = 0,\\n          high = array == null ? 0 : array.length;\\n      if (high === 0) {\\n        return 0;\\n      }\\n\\n      value = iteratee(value);\\n     ",
                    "rendered": {
                      "text": "   * @param {Array} array The sorted array to inspect.\\n     * @param {*} value The value to evaluate.\\n     * @param {Function} iteratee The iteratee invoked per element.\\n     * @param {boolean} [retHighest] Specify returning the highest qualified index.\\n     * @returns {number} Returns the index at which `value` should be inserted\\n     *  into `array`.\\n     */\\n    function baseSortedIndexBy(array, value, iteratee, retHighest) {\\n      var low = 0,\\n          high = array == null ? 0 : array.length;\\n      if (high === 0) {\\n        return 0;\\n      }\\n\\n      value = iteratee(value);\\n     ",
                      "markdown": "`   * @param {Array} array The sorted array to inspect.\\n     * @param {*} value The value to evaluate.\\n     * @param {Function} iteratee The iteratee invoked per element.\\n     * @param {boolean} [retHighest] Specify returning the highest qualified index.\\n     * @returns {number} Returns the index at which `value` should be inserted\\n     *  into `array`.\\n     */\\n    function baseSortedIndexBy(array, value, iteratee, retHighest) {\\n      var low = 0,\\n          high = array == null ? 0 : array.length;\\n      if (high === 0) {\\n        return 0;\\n      }\\n\\n      value = iteratee(value);\\n     `"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 263929,
                  "endLine": 1,
                  "endColumn": 263933,
                  "snippet": {
                    "text": "ay` in order to maintain its sort order.\\n     *\\n     * @private\\n     * @param {Array} array The sorted array to inspect.\\n     * @param {*} value The value to evaluate.\\n     * @param {boolean} [retHighest] Specify returning the highest qualified index.\\n     * @returns {number} Returns the index at which `value` should be inserted\\n     *  into `array`.\\n     */\\n    function baseSortedIndex(array, value, retHighest) {\\n      var low = 0,\\n          high = array == null ? low : array.length;\\n\\n      if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {\\n        w",
                    "rendered": {
                      "text": "ay` in order to maintain its sort order.\\n     *\\n     * @private\\n     * @param {Array} array The sorted array to inspect.\\n     * @param {*} value The value to evaluate.\\n     * @param {boolean} [retHighest] Specify returning the highest qualified index.\\n     * @returns {number} Returns the index at which `value` should be inserted\\n     *  into `array`.\\n     */\\n    function baseSortedIndex(array, value, retHighest) {\\n      var low = 0,\\n          high = array == null ? low : array.length;\\n\\n      if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {\\n        w",
                      "markdown": "`ay` in order to maintain its sort order.\\n     *\\n     * @private\\n     * @param {Array} array The sorted array to inspect.\\n     * @param {*} value The value to evaluate.\\n     * @param {boolean} [retHighest] Specify returning the highest qualified index.\\n     * @returns {number} Returns the index at which `value` should be inserted\\n     *  into `array`.\\n     */\\n    function baseSortedIndex(array, value, retHighest) {\\n      var low = 0,\\n          high = array == null ? low : array.length;\\n\\n      if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {\\n        w`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 263575,
                  "endLine": 1,
                  "endColumn": 263579,
                  "snippet": {
                    "text": "ndex, collection) {\\n        result = predicate(value, index, collection);\\n        return !result;\\n      });\\n      return !!result;\\n    }\\n\\n    /**\\n     * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which\\n     * performs a binary search of `array` to determine the index at which `value`\\n     * should be inserted into `array` in order to maintain its sort order.\\n     *\\n     * @private\\n     * @param {Array} array The sorted array to inspect.\\n     * @param {*} value The value to evaluate.\\n     * @param {boolean} [retHighest] Specify returning the highest qualified ",
                    "rendered": {
                      "text": "ndex, collection) {\\n        result = predicate(value, index, collection);\\n        return !result;\\n      });\\n      return !!result;\\n    }\\n\\n    /**\\n     * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which\\n     * performs a binary search of `array` to determine the index at which `value`\\n     * should be inserted into `array` in order to maintain its sort order.\\n     *\\n     * @private\\n     * @param {Array} array The sorted array to inspect.\\n     * @param {*} value The value to evaluate.\\n     * @param {boolean} [retHighest] Specify returning the highest qualified ",
                      "markdown": "`ndex, collection) {\\n        result = predicate(value, index, collection);\\n        return !result;\\n      });\\n      return !!result;\\n    }\\n\\n    /**\\n     * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which\\n     * performs a binary search of `array` to determine the index at which `value`\\n     * should be inserted into `array` in order to maintain its sort order.\\n     *\\n     * @private\\n     * @param {Array} array The sorted array to inspect.\\n     * @param {*} value The value to evaluate.\\n     * @param {boolean} [retHighest] Specify returning the highest qualified `"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 208472,
                  "endLine": 1,
                  "endColumn": 208476,
                  "snippet": {
                    "text": "nction assignValue(object, key, value) {\\n      var objValue = object[key];\\n      if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||\\n          (value === undefined && !(key in object))) {\\n        baseAssignValue(object, key, value);\\n      }\\n    }\\n\\n    /**\\n     * Gets the index at which the `key` is found in `array` of key-value pairs.\\n     *\\n     * @private\\n     * @param {Array} array The array to inspect.\\n     * @param {*} key The key to search for.\\n     * @returns {number} Returns the index of the matched value, else `-1`.\\n     */\\n    function assocIndexOf(array, ke",
                    "rendered": {
                      "text": "nction assignValue(object, key, value) {\\n      var objValue = object[key];\\n      if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||\\n          (value === undefined && !(key in object))) {\\n        baseAssignValue(object, key, value);\\n      }\\n    }\\n\\n    /**\\n     * Gets the index at which the `key` is found in `array` of key-value pairs.\\n     *\\n     * @private\\n     * @param {Array} array The array to inspect.\\n     * @param {*} key The key to search for.\\n     * @returns {number} Returns the index of the matched value, else `-1`.\\n     */\\n    function assocIndexOf(array, ke",
                      "markdown": "`nction assignValue(object, key, value) {\\n      var objValue = object[key];\\n      if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||\\n          (value === undefined && !(key in object))) {\\n        baseAssignValue(object, key, value);\\n      }\\n    }\\n\\n    /**\\n     * Gets the index at which the `key` is found in `array` of key-value pairs.\\n     *\\n     * @private\\n     * @param {Array} array The array to inspect.\\n     * @param {*} key The key to search for.\\n     * @returns {number} Returns the index of the matched value, else `-1`.\\n     */\\n    function assocIndexOf(array, ke`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 165293,
                  "endLine": 1,
                  "endColumn": 165297,
                  "snippet": {
                    "text": "ers for inclusion in compiled string literals.\\n   *\\n   * @private\\n   * @param {string} chr The matched character to escape.\\n   * @returns {string} Returns the escaped character.\\n   */\\n  function escapeStringChar(chr) {\\n    return '\\\\\\\\' + stringEscapes[chr];\\n  }\\n\\n  /**\\n   * Gets the value at `key` of `object`.\\n   *\\n   * @private\\n   * @param {Object} [object] The object to query.\\n   * @param {string} key The key of the property to get.\\n   * @returns {*} Returns the property value.\\n   */\\n  function getValue(object, key) {\\n    return object == null ? undefined : object[key];\\n  }\\n",
                    "rendered": {
                      "text": "ers for inclusion in compiled string literals.\\n   *\\n   * @private\\n   * @param {string} chr The matched character to escape.\\n   * @returns {string} Returns the escaped character.\\n   */\\n  function escapeStringChar(chr) {\\n    return '\\\\\\\\' + stringEscapes[chr];\\n  }\\n\\n  /**\\n   * Gets the value at `key` of `object`.\\n   *\\n   * @private\\n   * @param {Object} [object] The object to query.\\n   * @param {string} key The key of the property to get.\\n   * @returns {*} Returns the property value.\\n   */\\n  function getValue(object, key) {\\n    return object == null ? undefined : object[key];\\n  }\\n",
                      "markdown": "`ers for inclusion in compiled string literals.\\n   *\\n   * @private\\n   * @param {string} chr The matched character to escape.\\n   * @returns {string} Returns the escaped character.\\n   */\\n  function escapeStringChar(chr) {\\n    return '\\\\\\\\' + stringEscapes[chr];\\n  }\\n\\n  /**\\n   * Gets the value at `key` of `object`.\\n   *\\n   * @private\\n   * @param {Object} [object] The object to query.\\n   * @param {string} key The key of the property to get.\\n   * @returns {*} Returns the property value.\\n   */\\n  function getValue(object, key) {\\n    return object == null ? undefined : object[key];\\n  }\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 685539,
                  "endLine": 1,
                  "endColumn": 685547,
                  "snippet": {
                    "text": "ort lodash.\\n  var _ = runInContext();\\n\\n  // Some AMD build optimizers, like r.js, check for condition patterns like:\\n  if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {\\n    // Expose Lodash on the global object to prevent errors when Lodash is\\n    // loaded by a script tag in the presence of an AMD loader.\\n    // See http://requirejs.org/docs/errors.html#mismatch for more details.\\n    // Use `_.noConflict` to remove Lodash from the global object.\\n    root._ = _;\\n\\n    // Define as an anonymous module so, through path mapping, it can be\\n    // referenced as th",
                    "rendered": {
                      "text": "ort lodash.\\n  var _ = runInContext();\\n\\n  // Some AMD build optimizers, like r.js, check for condition patterns like:\\n  if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {\\n    // Expose Lodash on the global object to prevent errors when Lodash is\\n    // loaded by a script tag in the presence of an AMD loader.\\n    // See http://requirejs.org/docs/errors.html#mismatch for more details.\\n    // Use `_.noConflict` to remove Lodash from the global object.\\n    root._ = _;\\n\\n    // Define as an anonymous module so, through path mapping, it can be\\n    // referenced as th",
                      "markdown": "`ort lodash.\\n  var _ = runInContext();\\n\\n  // Some AMD build optimizers, like r.js, check for condition patterns like:\\n  if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {\\n    // Expose Lodash on the global object to prevent errors when Lodash is\\n    // loaded by a script tag in the presence of an AMD loader.\\n    // See http://requirejs.org/docs/errors.html#mismatch for more details.\\n    // Use `_.noConflict` to remove Lodash from the global object.\\n    root._ = _;\\n\\n    // Define as an anonymous module so, through path mapping, it can be\\n    // referenced as th`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 615798,
                  "endLine": 1,
                  "endColumn": 615803,
                  "snippet": {
                    "text": "dded in Adobe products needs `match` returned in\\n        // order to produce the correct `offset` value.\\n        return match;\\n      });\\n\\n      source += \\\"';\\\\n\\\";\\n\\n      // If `variable` is not specified wrap a with-statement around the generated\\n      // code to add the data object to the top of the scope chain.\\n      var variable = hasOwnProperty.call(options, 'variable') && options.variable;\\n      if (!variable) {\\n        source = 'with (obj) {\\\\n' + source + '\\\\n}\\\\n';\\n      }\\n      // Throw an error if a forbidden character was found in `variable`, to prevent\\n      // potential",
                    "rendered": {
                      "text": "dded in Adobe products needs `match` returned in\\n        // order to produce the correct `offset` value.\\n        return match;\\n      });\\n\\n      source += \\\"';\\\\n\\\";\\n\\n      // If `variable` is not specified wrap a with-statement around the generated\\n      // code to add the data object to the top of the scope chain.\\n      var variable = hasOwnProperty.call(options, 'variable') && options.variable;\\n      if (!variable) {\\n        source = 'with (obj) {\\\\n' + source + '\\\\n}\\\\n';\\n      }\\n      // Throw an error if a forbidden character was found in `variable`, to prevent\\n      // potential",
                      "markdown": "`dded in Adobe products needs `match` returned in\\n        // order to produce the correct `offset` value.\\n        return match;\\n      });\\n\\n      source += \\\"';\\\\n\\\";\\n\\n      // If `variable` is not specified wrap a with-statement around the generated\\n      // code to add the data object to the top of the scope chain.\\n      var variable = hasOwnProperty.call(options, 'variable') && options.variable;\\n      if (!variable) {\\n        source = 'with (obj) {\\\\n' + source + '\\\\n}\\\\n';\\n      }\\n      // Throw an error if a forbidden character was found in `variable`, to prevent\\n      // potential`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 611774,
                  "endLine": 1,
                  "endColumn": 611780,
                  "snippet": {
                    "text": "s': ['fred', 'barney'] });\\n     * // => '<li>fred</li><li>barney</li>'\\n     *\\n     * // Use the `sourceURL` option to specify a custom sourceURL for the template.\\n     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });\\n     * compiled(data);\\n     * // => Find the source of \\\"greeting.jst\\\" under the Sources tab or Resources panel of the web inspector.\\n     *\\n     * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.\\n     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });\\n     * compil",
                    "rendered": {
                      "text": "s': ['fred', 'barney'] });\\n     * // => '<li>fred</li><li>barney</li>'\\n     *\\n     * // Use the `sourceURL` option to specify a custom sourceURL for the template.\\n     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });\\n     * compiled(data);\\n     * // => Find the source of \\\"greeting.jst\\\" under the Sources tab or Resources panel of the web inspector.\\n     *\\n     * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.\\n     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });\\n     * compil",
                      "markdown": "`s': ['fred', 'barney'] });\\n     * // => '<li>fred</li><li>barney</li>'\\n     *\\n     * // Use the `sourceURL` option to specify a custom sourceURL for the template.\\n     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });\\n     * compiled(data);\\n     * // => Find the source of \\\"greeting.jst\\\" under the Sources tab or Resources panel of the web inspector.\\n     *\\n     * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.\\n     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });\\n     * compil`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 493576,
                  "endLine": 1,
                  "endColumn": 493585,
                  "snippet": {
                    "text": "` is\\n     * invoked on the trailing edge of the timeout only if the throttled function\\n     * is invoked more than once during the `wait` timeout.\\n     *\\n     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\\n     * until to the next tick, similar to `setTimeout` with a timeout of `0`.\\n     *\\n     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\\n     * for details over the differences between `_.throttle` and `_.debounce`.\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 0.1.0\\n     * @category Function\\n     *",
                    "rendered": {
                      "text": "` is\\n     * invoked on the trailing edge of the timeout only if the throttled function\\n     * is invoked more than once during the `wait` timeout.\\n     *\\n     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\\n     * until to the next tick, similar to `setTimeout` with a timeout of `0`.\\n     *\\n     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\\n     * for details over the differences between `_.throttle` and `_.debounce`.\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 0.1.0\\n     * @category Function\\n     *",
                      "markdown": "`` is\\n     * invoked on the trailing edge of the timeout only if the throttled function\\n     * is invoked more than once during the `wait` timeout.\\n     *\\n     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\\n     * until to the next tick, similar to `setTimeout` with a timeout of `0`.\\n     *\\n     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\\n     * for details over the differences between `_.throttle` and `_.debounce`.\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 0.1.0\\n     * @category Function\\n     *`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 493324,
                  "endLine": 1,
                  "endColumn": 493333,
                  "snippet": {
                    "text": "oked with the last arguments provided to the\\n     * throttled function. Subsequent calls to the throttled function return the\\n     * result of the last `func` invocation.\\n     *\\n     * **Note:** If `leading` and `trailing` options are `true`, `func` is\\n     * invoked on the trailing edge of the timeout only if the throttled function\\n     * is invoked more than once during the `wait` timeout.\\n     *\\n     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\\n     * until to the next tick, similar to `setTimeout` with a timeout of `0`.\\n     *\\n     * See [David Corbacho's ar",
                    "rendered": {
                      "text": "oked with the last arguments provided to the\\n     * throttled function. Subsequent calls to the throttled function return the\\n     * result of the last `func` invocation.\\n     *\\n     * **Note:** If `leading` and `trailing` options are `true`, `func` is\\n     * invoked on the trailing edge of the timeout only if the throttled function\\n     * is invoked more than once during the `wait` timeout.\\n     *\\n     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\\n     * until to the next tick, similar to `setTimeout` with a timeout of `0`.\\n     *\\n     * See [David Corbacho's ar",
                      "markdown": "`oked with the last arguments provided to the\\n     * throttled function. Subsequent calls to the throttled function return the\\n     * result of the last `func` invocation.\\n     *\\n     * **Note:** If `leading` and `trailing` options are `true`, `func` is\\n     * invoked on the trailing edge of the timeout only if the throttled function\\n     * is invoked more than once during the `wait` timeout.\\n     *\\n     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\\n     * until to the next tick, similar to `setTimeout` with a timeout of `0`.\\n     *\\n     * See [David Corbacho's ar`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 477667,
                  "endLine": 1,
                  "endColumn": 477673,
                  "snippet": {
                    "text": "          clearTimeout(timerId);\\n        }\\n        lastInvokeTime = 0;\\n        lastArgs = lastCallTime = lastThis = timerId = undefined;\\n      }\\n\\n      function flush() {\\n        return timerId === undefined ? result : trailingEdge(now());\\n      }\\n\\n      function debounced() {\\n        var time = now(),\\n            isInvoking = shouldInvoke(time);\\n\\n        lastArgs = arguments;\\n        lastThis = this;\\n        lastCallTime = time;\\n\\n        if (isInvoking) {\\n          if (timerId === undefined) {\\n            return leadingEdge(lastCallTime);\\n          }\\n          if (maxing) {\\n ",
                    "rendered": {
                      "text": "          clearTimeout(timerId);\\n        }\\n        lastInvokeTime = 0;\\n        lastArgs = lastCallTime = lastThis = timerId = undefined;\\n      }\\n\\n      function flush() {\\n        return timerId === undefined ? result : trailingEdge(now());\\n      }\\n\\n      function debounced() {\\n        var time = now(),\\n            isInvoking = shouldInvoke(time);\\n\\n        lastArgs = arguments;\\n        lastThis = this;\\n        lastCallTime = time;\\n\\n        if (isInvoking) {\\n          if (timerId === undefined) {\\n            return leadingEdge(lastCallTime);\\n          }\\n          if (maxing) {\\n ",
                      "markdown": "`          clearTimeout(timerId);\\n        }\\n        lastInvokeTime = 0;\\n        lastArgs = lastCallTime = lastThis = timerId = undefined;\\n      }\\n\\n      function flush() {\\n        return timerId === undefined ? result : trailingEdge(now());\\n      }\\n\\n      function debounced() {\\n        var time = now(),\\n            isInvoking = shouldInvoke(time);\\n\\n        lastArgs = arguments;\\n        lastThis = this;\\n        lastCallTime = time;\\n\\n        if (isInvoking) {\\n          if (timerId === undefined) {\\n            return leadingEdge(lastCallTime);\\n          }\\n          if (maxing) {\\n `"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 476753,
                  "endLine": 1,
                  "endColumn": 476759,
                  "snippet": {
                    "text": "re treating\\n        // it as the trailing edge, or we've hit the `maxWait` limit.\\n        return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||\\n          (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));\\n      }\\n\\n      function timerExpired() {\\n        var time = now();\\n        if (shouldInvoke(time)) {\\n          return trailingEdge(time);\\n        }\\n        // Restart the timer.\\n        timerId = setTimeout(timerExpired, remainingWait(time));\\n      }\\n\\n      function trailingEdge(time) {\\n        timerId = undefined;\\n\\n        // Only invoke if we ",
                    "rendered": {
                      "text": "re treating\\n        // it as the trailing edge, or we've hit the `maxWait` limit.\\n        return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||\\n          (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));\\n      }\\n\\n      function timerExpired() {\\n        var time = now();\\n        if (shouldInvoke(time)) {\\n          return trailingEdge(time);\\n        }\\n        // Restart the timer.\\n        timerId = setTimeout(timerExpired, remainingWait(time));\\n      }\\n\\n      function trailingEdge(time) {\\n        timerId = undefined;\\n\\n        // Only invoke if we ",
                      "markdown": "`re treating\\n        // it as the trailing edge, or we've hit the `maxWait` limit.\\n        return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||\\n          (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));\\n      }\\n\\n      function timerExpired() {\\n        var time = now();\\n        if (shouldInvoke(time)) {\\n          return trailingEdge(time);\\n        }\\n        // Restart the timer.\\n        timerId = setTimeout(timerExpired, remainingWait(time));\\n      }\\n\\n      function trailingEdge(time) {\\n        timerId = undefined;\\n\\n        // Only invoke if we `"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 476421,
                  "endLine": 1,
                  "endColumn": 476427,
                  "snippet": {
                    "text": "     : timeWaiting;\\n      }\\n\\n      function shouldInvoke(time) {\\n        var timeSinceLastCall = time - lastCallTime,\\n            timeSinceLastInvoke = time - lastInvokeTime;\\n\\n        // Either this is the first call, activity has stopped and we're at the\\n        // trailing edge, the system time has gone backwards and we're treating\\n        // it as the trailing edge, or we've hit the `maxWait` limit.\\n        return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||\\n          (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));\\n      }\\n\\n      function tim",
                    "rendered": {
                      "text": "     : timeWaiting;\\n      }\\n\\n      function shouldInvoke(time) {\\n        var timeSinceLastCall = time - lastCallTime,\\n            timeSinceLastInvoke = time - lastInvokeTime;\\n\\n        // Either this is the first call, activity has stopped and we're at the\\n        // trailing edge, the system time has gone backwards and we're treating\\n        // it as the trailing edge, or we've hit the `maxWait` limit.\\n        return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||\\n          (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));\\n      }\\n\\n      function tim",
                      "markdown": "`     : timeWaiting;\\n      }\\n\\n      function shouldInvoke(time) {\\n        var timeSinceLastCall = time - lastCallTime,\\n            timeSinceLastInvoke = time - lastInvokeTime;\\n\\n        // Either this is the first call, activity has stopped and we're at the\\n        // trailing edge, the system time has gone backwards and we're treating\\n        // it as the trailing edge, or we've hit the `maxWait` limit.\\n        return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||\\n          (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));\\n      }\\n\\n      function tim`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 476277,
                  "endLine": 1,
                  "endColumn": 476283,
                  "snippet": {
                    "text": "      timeWaiting = wait - timeSinceLastCall;\\n\\n        return maxing\\n          ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)\\n          : timeWaiting;\\n      }\\n\\n      function shouldInvoke(time) {\\n        var timeSinceLastCall = time - lastCallTime,\\n            timeSinceLastInvoke = time - lastInvokeTime;\\n\\n        // Either this is the first call, activity has stopped and we're at the\\n        // trailing edge, the system time has gone backwards and we're treating\\n        // it as the trailing edge, or we've hit the `maxWait` limit.\\n        return (lastCallTime === undefined || ",
                    "rendered": {
                      "text": "      timeWaiting = wait - timeSinceLastCall;\\n\\n        return maxing\\n          ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)\\n          : timeWaiting;\\n      }\\n\\n      function shouldInvoke(time) {\\n        var timeSinceLastCall = time - lastCallTime,\\n            timeSinceLastInvoke = time - lastInvokeTime;\\n\\n        // Either this is the first call, activity has stopped and we're at the\\n        // trailing edge, the system time has gone backwards and we're treating\\n        // it as the trailing edge, or we've hit the `maxWait` limit.\\n        return (lastCallTime === undefined || ",
                      "markdown": "`      timeWaiting = wait - timeSinceLastCall;\\n\\n        return maxing\\n          ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)\\n          : timeWaiting;\\n      }\\n\\n      function shouldInvoke(time) {\\n        var timeSinceLastCall = time - lastCallTime,\\n            timeSinceLastInvoke = time - lastInvokeTime;\\n\\n        // Either this is the first call, activity has stopped and we're at the\\n        // trailing edge, the system time has gone backwards and we're treating\\n        // it as the trailing edge, or we've hit the `maxWait` limit.\\n        return (lastCallTime === undefined || `"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 476221,
                  "endLine": 1,
                  "endColumn": 476227,
                  "snippet": {
                    "text": "    timeSinceLastInvoke = time - lastInvokeTime,\\n            timeWaiting = wait - timeSinceLastCall;\\n\\n        return maxing\\n          ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)\\n          : timeWaiting;\\n      }\\n\\n      function shouldInvoke(time) {\\n        var timeSinceLastCall = time - lastCallTime,\\n            timeSinceLastInvoke = time - lastInvokeTime;\\n\\n        // Either this is the first call, activity has stopped and we're at the\\n        // trailing edge, the system time has gone backwards and we're treating\\n        // it as the trailing edge, or we've hit the `maxWait",
                    "rendered": {
                      "text": "    timeSinceLastInvoke = time - lastInvokeTime,\\n            timeWaiting = wait - timeSinceLastCall;\\n\\n        return maxing\\n          ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)\\n          : timeWaiting;\\n      }\\n\\n      function shouldInvoke(time) {\\n        var timeSinceLastCall = time - lastCallTime,\\n            timeSinceLastInvoke = time - lastInvokeTime;\\n\\n        // Either this is the first call, activity has stopped and we're at the\\n        // trailing edge, the system time has gone backwards and we're treating\\n        // it as the trailing edge, or we've hit the `maxWait",
                      "markdown": "`    timeSinceLastInvoke = time - lastInvokeTime,\\n            timeWaiting = wait - timeSinceLastCall;\\n\\n        return maxing\\n          ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)\\n          : timeWaiting;\\n      }\\n\\n      function shouldInvoke(time) {\\n        var timeSinceLastCall = time - lastCallTime,\\n            timeSinceLastInvoke = time - lastInvokeTime;\\n\\n        // Either this is the first call, activity has stopped and we're at the\\n        // trailing edge, the system time has gone backwards and we're treating\\n        // it as the trailing edge, or we've hit the `maxWait`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 475946,
                  "endLine": 1,
                  "endColumn": 475952,
                  "snippet": {
                    "text": "or the trailing edge.\\n        timerId = setTimeout(timerExpired, wait);\\n        // Invoke the leading edge.\\n        return leading ? invokeFunc(time) : result;\\n      }\\n\\n      function remainingWait(time) {\\n        var timeSinceLastCall = time - lastCallTime,\\n            timeSinceLastInvoke = time - lastInvokeTime,\\n            timeWaiting = wait - timeSinceLastCall;\\n\\n        return maxing\\n          ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)\\n          : timeWaiting;\\n      }\\n\\n      function shouldInvoke(time) {\\n        var timeSinceLastCall = time - lastCallTime,\\n        ",
                    "rendered": {
                      "text": "or the trailing edge.\\n        timerId = setTimeout(timerExpired, wait);\\n        // Invoke the leading edge.\\n        return leading ? invokeFunc(time) : result;\\n      }\\n\\n      function remainingWait(time) {\\n        var timeSinceLastCall = time - lastCallTime,\\n            timeSinceLastInvoke = time - lastInvokeTime,\\n            timeWaiting = wait - timeSinceLastCall;\\n\\n        return maxing\\n          ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)\\n          : timeWaiting;\\n      }\\n\\n      function shouldInvoke(time) {\\n        var timeSinceLastCall = time - lastCallTime,\\n        ",
                      "markdown": "`or the trailing edge.\\n        timerId = setTimeout(timerExpired, wait);\\n        // Invoke the leading edge.\\n        return leading ? invokeFunc(time) : result;\\n      }\\n\\n      function remainingWait(time) {\\n        var timeSinceLastCall = time - lastCallTime,\\n            timeSinceLastInvoke = time - lastInvokeTime,\\n            timeWaiting = wait - timeSinceLastCall;\\n\\n        return maxing\\n          ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)\\n          : timeWaiting;\\n      }\\n\\n      function shouldInvoke(time) {\\n        var timeSinceLastCall = time - lastCallTime,\\n        `"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 475890,
                  "endLine": 1,
                  "endColumn": 475896,
                  "snippet": {
                    "text": "    lastInvokeTime = time;\\n        // Start the timer for the trailing edge.\\n        timerId = setTimeout(timerExpired, wait);\\n        // Invoke the leading edge.\\n        return leading ? invokeFunc(time) : result;\\n      }\\n\\n      function remainingWait(time) {\\n        var timeSinceLastCall = time - lastCallTime,\\n            timeSinceLastInvoke = time - lastInvokeTime,\\n            timeWaiting = wait - timeSinceLastCall;\\n\\n        return maxing\\n          ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)\\n          : timeWaiting;\\n      }\\n\\n      function shouldInvoke(time) {\\n      ",
                    "rendered": {
                      "text": "    lastInvokeTime = time;\\n        // Start the timer for the trailing edge.\\n        timerId = setTimeout(timerExpired, wait);\\n        // Invoke the leading edge.\\n        return leading ? invokeFunc(time) : result;\\n      }\\n\\n      function remainingWait(time) {\\n        var timeSinceLastCall = time - lastCallTime,\\n            timeSinceLastInvoke = time - lastInvokeTime,\\n            timeWaiting = wait - timeSinceLastCall;\\n\\n        return maxing\\n          ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)\\n          : timeWaiting;\\n      }\\n\\n      function shouldInvoke(time) {\\n      ",
                      "markdown": "`    lastInvokeTime = time;\\n        // Start the timer for the trailing edge.\\n        timerId = setTimeout(timerExpired, wait);\\n        // Invoke the leading edge.\\n        return leading ? invokeFunc(time) : result;\\n      }\\n\\n      function remainingWait(time) {\\n        var timeSinceLastCall = time - lastCallTime,\\n            timeSinceLastInvoke = time - lastInvokeTime,\\n            timeWaiting = wait - timeSinceLastCall;\\n\\n        return maxing\\n          ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)\\n          : timeWaiting;\\n      }\\n\\n      function shouldInvoke(time) {\\n      `"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 473555,
                  "endLine": 1,
                  "endColumn": 473561,
                  "snippet": {
                    "text": "n     * @param {number} [wait=0] The number of milliseconds to delay.\\n     * @param {Object} [options={}] The options object.\\n     * @param {boolean} [options.leading=false]\\n     *  Specify invoking on the leading edge of the timeout.\\n     * @param {number} [options.maxWait]\\n     *  The maximum time `func` is allowed to be delayed before it's invoked.\\n     * @param {boolean} [options.trailing=true]\\n     *  Specify invoking on the trailing edge of the timeout.\\n     * @returns {Function} Returns the new debounced function.\\n     * @example\\n     *\\n     * // Avoid costly calculations while the",
                    "rendered": {
                      "text": "n     * @param {number} [wait=0] The number of milliseconds to delay.\\n     * @param {Object} [options={}] The options object.\\n     * @param {boolean} [options.leading=false]\\n     *  Specify invoking on the leading edge of the timeout.\\n     * @param {number} [options.maxWait]\\n     *  The maximum time `func` is allowed to be delayed before it's invoked.\\n     * @param {boolean} [options.trailing=true]\\n     *  Specify invoking on the trailing edge of the timeout.\\n     * @returns {Function} Returns the new debounced function.\\n     * @example\\n     *\\n     * // Avoid costly calculations while the",
                      "markdown": "`n     * @param {number} [wait=0] The number of milliseconds to delay.\\n     * @param {Object} [options={}] The options object.\\n     * @param {boolean} [options.leading=false]\\n     *  Specify invoking on the leading edge of the timeout.\\n     * @param {number} [options.maxWait]\\n     *  The maximum time `func` is allowed to be delayed before it's invoked.\\n     * @param {boolean} [options.trailing=true]\\n     *  Specify invoking on the trailing edge of the timeout.\\n     * @returns {Function} Returns the new debounced function.\\n     * @example\\n     *\\n     * // Avoid costly calculations while the`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 472896,
                  "endLine": 1,
                  "endColumn": 472905,
                  "snippet": {
                    "text": "` is\\n     * invoked on the trailing edge of the timeout only if the debounced function\\n     * is invoked more than once during the `wait` timeout.\\n     *\\n     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\\n     * until to the next tick, similar to `setTimeout` with a timeout of `0`.\\n     *\\n     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\\n     * for details over the differences between `_.debounce` and `_.throttle`.\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 0.1.0\\n     * @category Function\\n     *",
                    "rendered": {
                      "text": "` is\\n     * invoked on the trailing edge of the timeout only if the debounced function\\n     * is invoked more than once during the `wait` timeout.\\n     *\\n     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\\n     * until to the next tick, similar to `setTimeout` with a timeout of `0`.\\n     *\\n     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\\n     * for details over the differences between `_.debounce` and `_.throttle`.\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 0.1.0\\n     * @category Function\\n     *",
                      "markdown": "`` is\\n     * invoked on the trailing edge of the timeout only if the debounced function\\n     * is invoked more than once during the `wait` timeout.\\n     *\\n     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\\n     * until to the next tick, similar to `setTimeout` with a timeout of `0`.\\n     *\\n     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\\n     * for details over the differences between `_.debounce` and `_.throttle`.\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 0.1.0\\n     * @category Function\\n     *`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 472644,
                  "endLine": 1,
                  "endColumn": 472653,
                  "snippet": {
                    "text": "   * with the last arguments provided to the debounced function. Subsequent\\n     * calls to the debounced function return the result of the last `func`\\n     * invocation.\\n     *\\n     * **Note:** If `leading` and `trailing` options are `true`, `func` is\\n     * invoked on the trailing edge of the timeout only if the debounced function\\n     * is invoked more than once during the `wait` timeout.\\n     *\\n     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\\n     * until to the next tick, similar to `setTimeout` with a timeout of `0`.\\n     *\\n     * See [David Corbacho's ar",
                    "rendered": {
                      "text": "   * with the last arguments provided to the debounced function. Subsequent\\n     * calls to the debounced function return the result of the last `func`\\n     * invocation.\\n     *\\n     * **Note:** If `leading` and `trailing` options are `true`, `func` is\\n     * invoked on the trailing edge of the timeout only if the debounced function\\n     * is invoked more than once during the `wait` timeout.\\n     *\\n     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\\n     * until to the next tick, similar to `setTimeout` with a timeout of `0`.\\n     *\\n     * See [David Corbacho's ar",
                      "markdown": "`   * with the last arguments provided to the debounced function. Subsequent\\n     * calls to the debounced function return the result of the last `func`\\n     * invocation.\\n     *\\n     * **Note:** If `leading` and `trailing` options are `true`, `func` is\\n     * invoked on the trailing edge of the timeout only if the debounced function\\n     * is invoked more than once during the `wait` timeout.\\n     *\\n     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\\n     * until to the next tick, similar to `setTimeout` with a timeout of `0`.\\n     *\\n     * See [David Corbacho's ar`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 471985,
                  "endLine": 1,
                  "endColumn": 471991,
                  "snippet": {
                    "text": "_RIGHT_FLAG, undefined, undefined, undefined, undefined, undefined, arity);\\n      result.placeholder = curryRight.placeholder;\\n      return result;\\n    }\\n\\n    /**\\n     * Creates a debounced function that delays invoking `func` until after `wait`\\n     * milliseconds have elapsed since the last time the debounced function was\\n     * invoked. The debounced function comes with a `cancel` method to cancel\\n     * delayed `func` invocations and a `flush` method to immediately invoke them.\\n     * Provide `options` to indicate whether `func` should be invoked on the\\n     * leading and/or trailing ",
                    "rendered": {
                      "text": "_RIGHT_FLAG, undefined, undefined, undefined, undefined, undefined, arity);\\n      result.placeholder = curryRight.placeholder;\\n      return result;\\n    }\\n\\n    /**\\n     * Creates a debounced function that delays invoking `func` until after `wait`\\n     * milliseconds have elapsed since the last time the debounced function was\\n     * invoked. The debounced function comes with a `cancel` method to cancel\\n     * delayed `func` invocations and a `flush` method to immediately invoke them.\\n     * Provide `options` to indicate whether `func` should be invoked on the\\n     * leading and/or trailing ",
                      "markdown": "`_RIGHT_FLAG, undefined, undefined, undefined, undefined, undefined, arity);\\n      result.placeholder = curryRight.placeholder;\\n      return result;\\n    }\\n\\n    /**\\n     * Creates a debounced function that delays invoking `func` until after `wait`\\n     * milliseconds have elapsed since the last time the debounced function was\\n     * invoked. The debounced function comes with a `cancel` method to cancel\\n     * delayed `func` invocations and a `flush` method to immediately invoke them.\\n     * Provide `options` to indicate whether `func` should be invoked on the\\n     * leading and/or trailing `"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 460330,
                  "endLine": 1,
                  "endColumn": 460336,
                  "snippet": {
                    "text": " are invoked with one argument: (value).\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 0.1.0\\n     * @category Collection\\n     * @param {Array|Object} collection The collection to iterate over.\\n     * @param {...(Function|Function[])} [iteratees=[_.identity]]\\n     *  The iteratees to sort by.\\n     * @returns {Array} Returns the new sorted array.\\n     * @example\\n     *\\n     * var users = [\\n     *   { 'user': 'fred',   'age': 48 },\\n     *   { 'user': 'barney', 'age': 36 },\\n     *   { 'user': 'fred',   'age': 30 },\\n     *   { 'user': 'barney', 'age': 34 }\\n     * ];\\n     *\\n   ",
                    "rendered": {
                      "text": " are invoked with one argument: (value).\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 0.1.0\\n     * @category Collection\\n     * @param {Array|Object} collection The collection to iterate over.\\n     * @param {...(Function|Function[])} [iteratees=[_.identity]]\\n     *  The iteratees to sort by.\\n     * @returns {Array} Returns the new sorted array.\\n     * @example\\n     *\\n     * var users = [\\n     *   { 'user': 'fred',   'age': 48 },\\n     *   { 'user': 'barney', 'age': 36 },\\n     *   { 'user': 'fred',   'age': 30 },\\n     *   { 'user': 'barney', 'age': 34 }\\n     * ];\\n     *\\n   ",
                      "markdown": "` are invoked with one argument: (value).\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 0.1.0\\n     * @category Collection\\n     * @param {Array|Object} collection The collection to iterate over.\\n     * @param {...(Function|Function[])} [iteratees=[_.identity]]\\n     *  The iteratees to sort by.\\n     * @returns {Array} Returns the new sorted array.\\n     * @example\\n     *\\n     * var users = [\\n     *   { 'user': 'fred',   'age': 48 },\\n     *   { 'user': 'barney', 'age': 36 },\\n     *   { 'user': 'fred',   'age': 30 },\\n     *   { 'user': 'barney', 'age': 34 }\\n     * ];\\n     *\\n   `"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 459978,
                  "endLine": 1,
                  "endColumn": 459984,
                  "snippet": {
                    "text": "     return func(collection, getIteratee(predicate, 3));\\n    }\\n\\n    /**\\n     * Creates an array of elements, sorted in ascending order by the results of\\n     * running each element in a collection thru each iteratee. This method\\n     * performs a stable sort, that is, it preserves the original sort order of\\n     * equal elements. The iteratees are invoked with one argument: (value).\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 0.1.0\\n     * @category Collection\\n     * @param {Array|Object} collection The collection to iterate over.\\n     * @param {...(Function|Function[])} [ite",
                    "rendered": {
                      "text": "     return func(collection, getIteratee(predicate, 3));\\n    }\\n\\n    /**\\n     * Creates an array of elements, sorted in ascending order by the results of\\n     * running each element in a collection thru each iteratee. This method\\n     * performs a stable sort, that is, it preserves the original sort order of\\n     * equal elements. The iteratees are invoked with one argument: (value).\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 0.1.0\\n     * @category Collection\\n     * @param {Array|Object} collection The collection to iterate over.\\n     * @param {...(Function|Function[])} [ite",
                      "markdown": "`     return func(collection, getIteratee(predicate, 3));\\n    }\\n\\n    /**\\n     * Creates an array of elements, sorted in ascending order by the results of\\n     * running each element in a collection thru each iteratee. This method\\n     * performs a stable sort, that is, it preserves the original sort order of\\n     * equal elements. The iteratees are invoked with one argument: (value).\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 0.1.0\\n     * @category Collection\\n     * @param {Array|Object} collection The collection to iterate over.\\n     * @param {...(Function|Function[])} [ite`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 448643,
                  "endLine": 1,
                  "endColumn": 448649,
                  "snippet": {
                    "text": "    * @returns {Array} Returns the new sorted array.\\n     * @example\\n     *\\n     * var users = [\\n     *   { 'user': 'fred',   'age': 48 },\\n     *   { 'user': 'barney', 'age': 34 },\\n     *   { 'user': 'fred',   'age': 40 },\\n     *   { 'user': 'barney', 'age': 36 }\\n     * ];\\n     *\\n     * // Sort by `user` in ascending order and by `age` in descending order.\\n     * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);\\n     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]\\n     */\\n    function orderBy(collection, iteratees, orders, guard) {\\n      if (collecti",
                    "rendered": {
                      "text": "    * @returns {Array} Returns the new sorted array.\\n     * @example\\n     *\\n     * var users = [\\n     *   { 'user': 'fred',   'age': 48 },\\n     *   { 'user': 'barney', 'age': 34 },\\n     *   { 'user': 'fred',   'age': 40 },\\n     *   { 'user': 'barney', 'age': 36 }\\n     * ];\\n     *\\n     * // Sort by `user` in ascending order and by `age` in descending order.\\n     * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);\\n     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]\\n     */\\n    function orderBy(collection, iteratees, orders, guard) {\\n      if (collecti",
                      "markdown": "`    * @returns {Array} Returns the new sorted array.\\n     * @example\\n     *\\n     * var users = [\\n     *   { 'user': 'fred',   'age': 48 },\\n     *   { 'user': 'barney', 'age': 34 },\\n     *   { 'user': 'fred',   'age': 40 },\\n     *   { 'user': 'barney', 'age': 36 }\\n     * ];\\n     *\\n     * // Sort by `user` in ascending order and by `age` in descending order.\\n     * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);\\n     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]\\n     */\\n    function orderBy(collection, iteratees, orders, guard) {\\n      if (collecti`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 448223,
                  "endLine": 1,
                  "endColumn": 448229,
                  "snippet": {
                    "text": "atic\\n     * @memberOf _\\n     * @since 4.0.0\\n     * @category Collection\\n     * @param {Array|Object} collection The collection to iterate over.\\n     * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]\\n     *  The iteratees to sort by.\\n     * @param {string[]} [orders] The sort orders of `iteratees`.\\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.\\n     * @returns {Array} Returns the new sorted array.\\n     * @example\\n     *\\n     * var users = [\\n     *   { 'user': 'fred',   'age': 48 },\\n     *   { 'user': 'barney', 'age': 34 },\\",
                    "rendered": {
                      "text": "atic\\n     * @memberOf _\\n     * @since 4.0.0\\n     * @category Collection\\n     * @param {Array|Object} collection The collection to iterate over.\\n     * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]\\n     *  The iteratees to sort by.\\n     * @param {string[]} [orders] The sort orders of `iteratees`.\\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.\\n     * @returns {Array} Returns the new sorted array.\\n     * @example\\n     *\\n     * var users = [\\n     *   { 'user': 'fred',   'age': 48 },\\n     *   { 'user': 'barney', 'age': 34 },\\",
                      "markdown": "`atic\\n     * @memberOf _\\n     * @since 4.0.0\\n     * @category Collection\\n     * @param {Array|Object} collection The collection to iterate over.\\n     * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]\\n     *  The iteratees to sort by.\\n     * @param {string[]} [orders] The sort orders of `iteratees`.\\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.\\n     * @returns {Array} Returns the new sorted array.\\n     * @example\\n     *\\n     * var users = [\\n     *   { 'user': 'fred',   'age': 48 },\\n     *   { 'user': 'barney', 'age': 34 },\\`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 448175,
                  "endLine": 1,
                  "endColumn": 448181,
                  "snippet": {
                    "text": "der of corresponding values.\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 4.0.0\\n     * @category Collection\\n     * @param {Array|Object} collection The collection to iterate over.\\n     * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]\\n     *  The iteratees to sort by.\\n     * @param {string[]} [orders] The sort orders of `iteratees`.\\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.\\n     * @returns {Array} Returns the new sorted array.\\n     * @example\\n     *\\n     * var users = [\\n     *   { 'user': 'fred',   'age': 4",
                    "rendered": {
                      "text": "der of corresponding values.\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 4.0.0\\n     * @category Collection\\n     * @param {Array|Object} collection The collection to iterate over.\\n     * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]\\n     *  The iteratees to sort by.\\n     * @param {string[]} [orders] The sort orders of `iteratees`.\\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.\\n     * @returns {Array} Returns the new sorted array.\\n     * @example\\n     *\\n     * var users = [\\n     *   { 'user': 'fred',   'age': 4",
                      "markdown": "`der of corresponding values.\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 4.0.0\\n     * @category Collection\\n     * @param {Array|Object} collection The collection to iterate over.\\n     * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]\\n     *  The iteratees to sort by.\\n     * @param {string[]} [orders] The sort orders of `iteratees`.\\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.\\n     * @returns {Array} Returns the new sorted array.\\n     * @example\\n     *\\n     * var users = [\\n     *   { 'user': 'fred',   'age': 4`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 447867,
                  "endLine": 1,
                  "endColumn": 447873,
                  "snippet": {
                    "text": "\\n    /**\\n     * This method is like `_.sortBy` except that it allows specifying the sort\\n     * orders of the iteratees to sort by. If `orders` is unspecified, all values\\n     * are sorted in ascending order. Otherwise, specify an order of \\\"desc\\\" for\\n     * descending or \\\"asc\\\" for ascending sort order of corresponding values.\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 4.0.0\\n     * @category Collection\\n     * @param {Array|Object} collection The collection to iterate over.\\n     * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]\\n     *  The iteratees ",
                    "rendered": {
                      "text": "\\n    /**\\n     * This method is like `_.sortBy` except that it allows specifying the sort\\n     * orders of the iteratees to sort by. If `orders` is unspecified, all values\\n     * are sorted in ascending order. Otherwise, specify an order of \\\"desc\\\" for\\n     * descending or \\\"asc\\\" for ascending sort order of corresponding values.\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 4.0.0\\n     * @category Collection\\n     * @param {Array|Object} collection The collection to iterate over.\\n     * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]\\n     *  The iteratees ",
                      "markdown": "`\\n    /**\\n     * This method is like `_.sortBy` except that it allows specifying the sort\\n     * orders of the iteratees to sort by. If `orders` is unspecified, all values\\n     * are sorted in ascending order. Otherwise, specify an order of \\\"desc\\\" for\\n     * descending or \\\"asc\\\" for ascending sort order of corresponding values.\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 4.0.0\\n     * @category Collection\\n     * @param {Array|Object} collection The collection to iterate over.\\n     * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]\\n     *  The iteratees `"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 447692,
                  "endLine": 1,
                  "endColumn": 447698,
                  "snippet": {
                    "text": "    */\\n    function map(collection, iteratee) {\\n      var func = isArray(collection) ? arrayMap : baseMap;\\n      return func(collection, getIteratee(iteratee, 3));\\n    }\\n\\n    /**\\n     * This method is like `_.sortBy` except that it allows specifying the sort\\n     * orders of the iteratees to sort by. If `orders` is unspecified, all values\\n     * are sorted in ascending order. Otherwise, specify an order of \\\"desc\\\" for\\n     * descending or \\\"asc\\\" for ascending sort order of corresponding values.\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 4.0.0\\n     * @category Collection\\",
                    "rendered": {
                      "text": "    */\\n    function map(collection, iteratee) {\\n      var func = isArray(collection) ? arrayMap : baseMap;\\n      return func(collection, getIteratee(iteratee, 3));\\n    }\\n\\n    /**\\n     * This method is like `_.sortBy` except that it allows specifying the sort\\n     * orders of the iteratees to sort by. If `orders` is unspecified, all values\\n     * are sorted in ascending order. Otherwise, specify an order of \\\"desc\\\" for\\n     * descending or \\\"asc\\\" for ascending sort order of corresponding values.\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 4.0.0\\n     * @category Collection\\",
                      "markdown": "`    */\\n    function map(collection, iteratee) {\\n      var func = isArray(collection) ? arrayMap : baseMap;\\n      return func(collection, getIteratee(iteratee, 3));\\n    }\\n\\n    /**\\n     * This method is like `_.sortBy` except that it allows specifying the sort\\n     * orders of the iteratees to sort by. If `orders` is unspecified, all values\\n     * are sorted in ascending order. Otherwise, specify an order of \\\"desc\\\" for\\n     * descending or \\\"asc\\\" for ascending sort order of corresponding values.\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 4.0.0\\n     * @category Collection\\`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 435077,
                  "endLine": 1,
                  "endColumn": 435083,
                  "snippet": {
                    "text": "> object for 'pebbles'\\n     *\\n     * // The `_.matchesProperty` iteratee shorthand.\\n     * _.find(users, ['active', false]);\\n     * // => object for 'fred'\\n     *\\n     * // The `_.property` iteratee shorthand.\\n     * _.find(users, 'active');\\n     * // => object for 'barney'\\n     */\\n    var find = createFind(findIndex);\\n\\n    /**\\n     * This method is like `_.find` except that it iterates over elements of\\n     * `collection` from right to left.\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 2.0.0\\n     * @category Collection\\n     * @param {Array|Object} collection The collec",
                    "rendered": {
                      "text": "> object for 'pebbles'\\n     *\\n     * // The `_.matchesProperty` iteratee shorthand.\\n     * _.find(users, ['active', false]);\\n     * // => object for 'fred'\\n     *\\n     * // The `_.property` iteratee shorthand.\\n     * _.find(users, 'active');\\n     * // => object for 'barney'\\n     */\\n    var find = createFind(findIndex);\\n\\n    /**\\n     * This method is like `_.find` except that it iterates over elements of\\n     * `collection` from right to left.\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 2.0.0\\n     * @category Collection\\n     * @param {Array|Object} collection The collec",
                      "markdown": "`> object for 'pebbles'\\n     *\\n     * // The `_.matchesProperty` iteratee shorthand.\\n     * _.find(users, ['active', false]);\\n     * // => object for 'fred'\\n     *\\n     * // The `_.property` iteratee shorthand.\\n     * _.find(users, 'active');\\n     * // => object for 'barney'\\n     */\\n    var find = createFind(findIndex);\\n\\n    /**\\n     * This method is like `_.find` except that it iterates over elements of\\n     * `collection` from right to left.\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 2.0.0\\n     * @category Collection\\n     * @param {Array|Object} collection The collec`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 396875,
                  "endLine": 1,
                  "endColumn": 396881,
                  "snippet": {
                    "text": "=> 4\\n     */\\n    function sortedLastIndex(array, value) {\\n      return baseSortedIndex(array, value, true);\\n    }\\n\\n    /**\\n     * This method is like `_.sortedLastIndex` except that it accepts `iteratee`\\n     * which is invoked for `value` and each element of `array` to compute their\\n     * sort ranking. The iteratee is invoked with one argument: (value).\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 4.0.0\\n     * @category Array\\n     * @param {Array} array The sorted array to inspect.\\n     * @param {*} value The value to evaluate.\\n     * @param {Function} [iteratee=_.identi",
                    "rendered": {
                      "text": "=> 4\\n     */\\n    function sortedLastIndex(array, value) {\\n      return baseSortedIndex(array, value, true);\\n    }\\n\\n    /**\\n     * This method is like `_.sortedLastIndex` except that it accepts `iteratee`\\n     * which is invoked for `value` and each element of `array` to compute their\\n     * sort ranking. The iteratee is invoked with one argument: (value).\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 4.0.0\\n     * @category Array\\n     * @param {Array} array The sorted array to inspect.\\n     * @param {*} value The value to evaluate.\\n     * @param {Function} [iteratee=_.identi",
                      "markdown": "`=> 4\\n     */\\n    function sortedLastIndex(array, value) {\\n      return baseSortedIndex(array, value, true);\\n    }\\n\\n    /**\\n     * This method is like `_.sortedLastIndex` except that it accepts `iteratee`\\n     * which is invoked for `value` and each element of `array` to compute their\\n     * sort ranking. The iteratee is invoked with one argument: (value).\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 4.0.0\\n     * @category Array\\n     * @param {Array} array The sorted array to inspect.\\n     * @param {*} value The value to evaluate.\\n     * @param {Function} [iteratee=_.identi`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 396181,
                  "endLine": 1,
                  "endColumn": 396187,
                  "snippet": {
                    "text": "index < length && eq(array[index], value)) {\\n          return index;\\n        }\\n      }\\n      return -1;\\n    }\\n\\n    /**\\n     * This method is like `_.sortedIndex` except that it returns the highest\\n     * index at which `value` should be inserted into `array` in order to\\n     * maintain its sort order.\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 3.0.0\\n     * @category Array\\n     * @param {Array} array The sorted array to inspect.\\n     * @param {*} value The value to evaluate.\\n     * @returns {number} Returns the index at which `value` should be inserted\\n     *  into `arr",
                    "rendered": {
                      "text": "index < length && eq(array[index], value)) {\\n          return index;\\n        }\\n      }\\n      return -1;\\n    }\\n\\n    /**\\n     * This method is like `_.sortedIndex` except that it returns the highest\\n     * index at which `value` should be inserted into `array` in order to\\n     * maintain its sort order.\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 3.0.0\\n     * @category Array\\n     * @param {Array} array The sorted array to inspect.\\n     * @param {*} value The value to evaluate.\\n     * @returns {number} Returns the index at which `value` should be inserted\\n     *  into `arr",
                      "markdown": "`index < length && eq(array[index], value)) {\\n          return index;\\n        }\\n      }\\n      return -1;\\n    }\\n\\n    /**\\n     * This method is like `_.sortedIndex` except that it returns the highest\\n     * index at which `value` should be inserted into `array` in order to\\n     * maintain its sort order.\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 3.0.0\\n     * @category Array\\n     * @param {Array} array The sorted array to inspect.\\n     * @param {*} value The value to evaluate.\\n     * @returns {number} Returns the index at which `value` should be inserted\\n     *  into `arr`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 394330,
                  "endLine": 1,
                  "endColumn": 394336,
                  "snippet": {
                    "text": ");\\n     * // => 1\\n     */\\n    function sortedIndex(array, value) {\\n      return baseSortedIndex(array, value);\\n    }\\n\\n    /**\\n     * This method is like `_.sortedIndex` except that it accepts `iteratee`\\n     * which is invoked for `value` and each element of `array` to compute their\\n     * sort ranking. The iteratee is invoked with one argument: (value).\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 4.0.0\\n     * @category Array\\n     * @param {Array} array The sorted array to inspect.\\n     * @param {*} value The value to evaluate.\\n     * @param {Function} [iteratee=_.identi",
                    "rendered": {
                      "text": ");\\n     * // => 1\\n     */\\n    function sortedIndex(array, value) {\\n      return baseSortedIndex(array, value);\\n    }\\n\\n    /**\\n     * This method is like `_.sortedIndex` except that it accepts `iteratee`\\n     * which is invoked for `value` and each element of `array` to compute their\\n     * sort ranking. The iteratee is invoked with one argument: (value).\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 4.0.0\\n     * @category Array\\n     * @param {Array} array The sorted array to inspect.\\n     * @param {*} value The value to evaluate.\\n     * @param {Function} [iteratee=_.identi",
                      "markdown": "`);\\n     * // => 1\\n     */\\n    function sortedIndex(array, value) {\\n      return baseSortedIndex(array, value);\\n    }\\n\\n    /**\\n     * This method is like `_.sortedIndex` except that it accepts `iteratee`\\n     * which is invoked for `value` and each element of `array` to compute their\\n     * sort ranking. The iteratee is invoked with one argument: (value).\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 4.0.0\\n     * @category Array\\n     * @param {Array} array The sorted array to inspect.\\n     * @param {*} value The value to evaluate.\\n     * @param {Function} [iteratee=_.identi`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 393660,
                  "endLine": 1,
                  "endColumn": 393666,
                  "snippet": {
                    "text": "null ? 0 : toInteger(start);\\n        end = end === undefined ? length : toInteger(end);\\n      }\\n      return baseSlice(array, start, end);\\n    }\\n\\n    /**\\n     * Uses a binary search to determine the lowest index at which `value`\\n     * should be inserted into `array` in order to maintain its sort order.\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 0.1.0\\n     * @category Array\\n     * @param {Array} array The sorted array to inspect.\\n     * @param {*} value The value to evaluate.\\n     * @returns {number} Returns the index at which `value` should be inserted\\n     *  into `arr",
                    "rendered": {
                      "text": "null ? 0 : toInteger(start);\\n        end = end === undefined ? length : toInteger(end);\\n      }\\n      return baseSlice(array, start, end);\\n    }\\n\\n    /**\\n     * Uses a binary search to determine the lowest index at which `value`\\n     * should be inserted into `array` in order to maintain its sort order.\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 0.1.0\\n     * @category Array\\n     * @param {Array} array The sorted array to inspect.\\n     * @param {*} value The value to evaluate.\\n     * @returns {number} Returns the index at which `value` should be inserted\\n     *  into `arr",
                      "markdown": "`null ? 0 : toInteger(start);\\n        end = end === undefined ? length : toInteger(end);\\n      }\\n      return baseSlice(array, start, end);\\n    }\\n\\n    /**\\n     * Uses a binary search to determine the lowest index at which `value`\\n     * should be inserted into `array` in order to maintain its sort order.\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 0.1.0\\n     * @category Array\\n     * @param {Array} array The sorted array to inspect.\\n     * @param {*} value The value to evaluate.\\n     * @returns {number} Returns the index at which `value` should be inserted\\n     *  into `arr`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 353510,
                  "endLine": 1,
                  "endColumn": 353515,
                  "snippet": {
                    "text": "     * @param {Function} string The `toString` result.\\n     * @returns {Function} Returns `func`.\\n     */\\n    var setToString = shortOut(baseSetToString);\\n\\n    /**\\n     * Sets the `toString` method of `wrapper` to mimic the source of `reference`\\n     * with wrapper details in a comment at the top of the source body.\\n     *\\n     * @private\\n     * @param {Function} wrapper The function to modify.\\n     * @param {Function} reference The reference function.\\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\\n     * @returns {Function} Returns `wrapper`.\\n   ",
                    "rendered": {
                      "text": "     * @param {Function} string The `toString` result.\\n     * @returns {Function} Returns `func`.\\n     */\\n    var setToString = shortOut(baseSetToString);\\n\\n    /**\\n     * Sets the `toString` method of `wrapper` to mimic the source of `reference`\\n     * with wrapper details in a comment at the top of the source body.\\n     *\\n     * @private\\n     * @param {Function} wrapper The function to modify.\\n     * @param {Function} reference The reference function.\\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\\n     * @returns {Function} Returns `wrapper`.\\n   ",
                      "markdown": "`     * @param {Function} string The `toString` result.\\n     * @returns {Function} Returns `func`.\\n     */\\n    var setToString = shortOut(baseSetToString);\\n\\n    /**\\n     * Sets the `toString` method of `wrapper` to mimic the source of `reference`\\n     * with wrapper details in a comment at the top of the source body.\\n     *\\n     * @private\\n     * @param {Function} wrapper The function to modify.\\n     * @param {Function} reference The reference function.\\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\\n     * @returns {Function} Returns `wrapper`.\\n   `"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 352914,
                  "endLine": 1,
                  "endColumn": 352923,
                  "snippet": {
                    "text": "*\\n     * A simple wrapper around the global [`setTimeout`](https://mdn.io/setTimeout).\\n     *\\n     * @private\\n     * @param {Function} func The function to delay.\\n     * @param {number} wait The number of milliseconds to delay invocation.\\n     * @returns {number|Object} Returns the timer id or timeout object.\\n     */\\n    var setTimeout = ctxSetTimeout || function(func, wait) {\\n      return root.setTimeout(func, wait);\\n    };\\n\\n    /**\\n     * Sets the `toString` method of `func` to return `string`.\\n     *\\n     * @private\\n     * @param {Function} func The function to modify.\\n     * @param",
                    "rendered": {
                      "text": "*\\n     * A simple wrapper around the global [`setTimeout`](https://mdn.io/setTimeout).\\n     *\\n     * @private\\n     * @param {Function} func The function to delay.\\n     * @param {number} wait The number of milliseconds to delay invocation.\\n     * @returns {number|Object} Returns the timer id or timeout object.\\n     */\\n    var setTimeout = ctxSetTimeout || function(func, wait) {\\n      return root.setTimeout(func, wait);\\n    };\\n\\n    /**\\n     * Sets the `toString` method of `func` to return `string`.\\n     *\\n     * @private\\n     * @param {Function} func The function to modify.\\n     * @param",
                      "markdown": "`*\\n     * A simple wrapper around the global [`setTimeout`](https://mdn.io/setTimeout).\\n     *\\n     * @private\\n     * @param {Function} func The function to delay.\\n     * @param {number} wait The number of milliseconds to delay invocation.\\n     * @returns {number|Object} Returns the timer id or timeout object.\\n     */\\n    var setTimeout = ctxSetTimeout || function(func, wait) {\\n      return root.setTimeout(func, wait);\\n    };\\n\\n    /**\\n     * Sets the `toString` method of `func` to return `string`.\\n     *\\n     * @private\\n     * @param {Function} func The function to modify.\\n     * @param`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 338596,
                  "endLine": 1,
                  "endColumn": 338601,
                  "snippet": {
                    "text": "n          return new Ctor(object);\\n\\n        case regexpTag:\\n          return cloneRegExp(object);\\n\\n        case setTag:\\n          return new Ctor;\\n\\n        case symbolTag:\\n          return cloneSymbol(object);\\n      }\\n    }\\n\\n    /**\\n     * Inserts wrapper `details` in a comment at the top of the `source` body.\\n     *\\n     * @private\\n     * @param {string} source The source to modify.\\n     * @returns {Array} details The details to insert.\\n     * @returns {string} Returns the modified source.\\n     */\\n    function insertWrapDetails(source, details) {\\n      var length = details.l",
                    "rendered": {
                      "text": "n          return new Ctor(object);\\n\\n        case regexpTag:\\n          return cloneRegExp(object);\\n\\n        case setTag:\\n          return new Ctor;\\n\\n        case symbolTag:\\n          return cloneSymbol(object);\\n      }\\n    }\\n\\n    /**\\n     * Inserts wrapper `details` in a comment at the top of the `source` body.\\n     *\\n     * @private\\n     * @param {string} source The source to modify.\\n     * @returns {Array} details The details to insert.\\n     * @returns {string} Returns the modified source.\\n     */\\n    function insertWrapDetails(source, details) {\\n      var length = details.l",
                      "markdown": "`n          return new Ctor(object);\\n\\n        case regexpTag:\\n          return cloneRegExp(object);\\n\\n        case setTag:\\n          return new Ctor;\\n\\n        case symbolTag:\\n          return cloneSymbol(object);\\n      }\\n    }\\n\\n    /**\\n     * Inserts wrapper `details` in a comment at the top of the `source` body.\\n     *\\n     * @private\\n     * @param {string} source The source to modify.\\n     * @returns {Array} details The details to insert.\\n     * @returns {string} Returns the modified source.\\n     */\\n    function insertWrapDetails(source, details) {\\n      var length = details.l`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 296895,
                  "endLine": 1,
                  "endColumn": 296901,
                  "snippet": {
                    "text": " func;\\n        return apply(fn, this, args);\\n      }\\n      return wrapper;\\n    }\\n\\n    /**\\n     * Creates a `_.find` or `_.findLast` function.\\n     *\\n     * @private\\n     * @param {Function} findIndexFunc The function to find the collection index.\\n     * @returns {Function} Returns the new find function.\\n     */\\n    function createFind(findIndexFunc) {\\n      return function(collection, predicate, fromIndex) {\\n        var iterable = Object(collection);\\n        if (!isArrayLike(collection)) {\\n          var iteratee = getIteratee(predicate, 3);\\n          collection = keys(collection);\\",
                    "rendered": {
                      "text": " func;\\n        return apply(fn, this, args);\\n      }\\n      return wrapper;\\n    }\\n\\n    /**\\n     * Creates a `_.find` or `_.findLast` function.\\n     *\\n     * @private\\n     * @param {Function} findIndexFunc The function to find the collection index.\\n     * @returns {Function} Returns the new find function.\\n     */\\n    function createFind(findIndexFunc) {\\n      return function(collection, predicate, fromIndex) {\\n        var iterable = Object(collection);\\n        if (!isArrayLike(collection)) {\\n          var iteratee = getIteratee(predicate, 3);\\n          collection = keys(collection);\\",
                      "markdown": "` func;\\n        return apply(fn, this, args);\\n      }\\n      return wrapper;\\n    }\\n\\n    /**\\n     * Creates a `_.find` or `_.findLast` function.\\n     *\\n     * @private\\n     * @param {Function} findIndexFunc The function to find the collection index.\\n     * @returns {Function} Returns the new find function.\\n     */\\n    function createFind(findIndexFunc) {\\n      return function(collection, predicate, fromIndex) {\\n        var iterable = Object(collection);\\n        if (!isArrayLike(collection)) {\\n          var iteratee = getIteratee(predicate, 3);\\n          collection = keys(collection);\\`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 296824,
                  "endLine": 1,
                  "endColumn": 296830,
                  "snippet": {
                    "text": "   var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;\\n        return apply(fn, this, args);\\n      }\\n      return wrapper;\\n    }\\n\\n    /**\\n     * Creates a `_.find` or `_.findLast` function.\\n     *\\n     * @private\\n     * @param {Function} findIndexFunc The function to find the collection index.\\n     * @returns {Function} Returns the new find function.\\n     */\\n    function createFind(findIndexFunc) {\\n      return function(collection, predicate, fromIndex) {\\n        var iterable = Object(collection);\\n        if (!isArrayLike(collection)) {\\n          var iteratee ",
                    "rendered": {
                      "text": "   var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;\\n        return apply(fn, this, args);\\n      }\\n      return wrapper;\\n    }\\n\\n    /**\\n     * Creates a `_.find` or `_.findLast` function.\\n     *\\n     * @private\\n     * @param {Function} findIndexFunc The function to find the collection index.\\n     * @returns {Function} Returns the new find function.\\n     */\\n    function createFind(findIndexFunc) {\\n      return function(collection, predicate, fromIndex) {\\n        var iterable = Object(collection);\\n        if (!isArrayLike(collection)) {\\n          var iteratee ",
                      "markdown": "`   var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;\\n        return apply(fn, this, args);\\n      }\\n      return wrapper;\\n    }\\n\\n    /**\\n     * Creates a `_.find` or `_.findLast` function.\\n     *\\n     * @private\\n     * @param {Function} findIndexFunc The function to find the collection index.\\n     * @returns {Function} Returns the new find function.\\n     */\\n    function createFind(findIndexFunc) {\\n      return function(collection, predicate, fromIndex) {\\n        var iterable = Object(collection);\\n        if (!isArrayLike(collection)) {\\n          var iteratee `"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 283286,
                  "endLine": 1,
                  "endColumn": 283292,
                  "snippet": {
                    "text": "t` bug in the JS engine embedded in Adobe applications\\n      // that causes it, under certain circumstances, to provide the same value for\\n      // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247\\n      // for more details.\\n      //\\n      // This also ensures a stable sort in V8 and other engines.\\n      // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.\\n      return object.index - other.index;\\n    }\\n\\n    /**\\n     * Creates an array that is the composition of partially applied arguments,\\n     * placeholders, and provided arguments into a",
                    "rendered": {
                      "text": "t` bug in the JS engine embedded in Adobe applications\\n      // that causes it, under certain circumstances, to provide the same value for\\n      // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247\\n      // for more details.\\n      //\\n      // This also ensures a stable sort in V8 and other engines.\\n      // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.\\n      return object.index - other.index;\\n    }\\n\\n    /**\\n     * Creates an array that is the composition of partially applied arguments,\\n     * placeholders, and provided arguments into a",
                      "markdown": "`t` bug in the JS engine embedded in Adobe applications\\n      // that causes it, under certain circumstances, to provide the same value for\\n      // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247\\n      // for more details.\\n      //\\n      // This also ensures a stable sort in V8 and other engines.\\n      // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.\\n      return object.index - other.index;\\n    }\\n\\n    /**\\n     * Creates an array that is the composition of partially applied arguments,\\n     * placeholders, and provided arguments into a`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 282337,
                  "endLine": 1,
                  "endColumn": 282343,
                  "snippet": {
                    "text": "rt order\\n     * of corresponding values.\\n     *\\n     * @private\\n     * @param {Object} object The object to compare.\\n     * @param {Object} other The other object to compare.\\n     * @param {boolean[]|string[]} orders The order to sort by for each property.\\n     * @returns {number} Returns the sort order indicator for `object`.\\n     */\\n    function compareMultiple(object, other, orders) {\\n      var index = -1,\\n          objCriteria = object.criteria,\\n          othCriteria = other.criteria,\\n          length = objCriteria.length,\\n          ordersLength = orders.length;\\n\\n      while (++i",
                    "rendered": {
                      "text": "rt order\\n     * of corresponding values.\\n     *\\n     * @private\\n     * @param {Object} object The object to compare.\\n     * @param {Object} other The other object to compare.\\n     * @param {boolean[]|string[]} orders The order to sort by for each property.\\n     * @returns {number} Returns the sort order indicator for `object`.\\n     */\\n    function compareMultiple(object, other, orders) {\\n      var index = -1,\\n          objCriteria = object.criteria,\\n          othCriteria = other.criteria,\\n          length = objCriteria.length,\\n          ordersLength = orders.length;\\n\\n      while (++i",
                      "markdown": "`rt order\\n     * of corresponding values.\\n     *\\n     * @private\\n     * @param {Object} object The object to compare.\\n     * @param {Object} other The other object to compare.\\n     * @param {boolean[]|string[]} orders The order to sort by for each property.\\n     * @returns {number} Returns the sort order indicator for `object`.\\n     */\\n    function compareMultiple(object, other, orders) {\\n      var index = -1,\\n          objCriteria = object.criteria,\\n          othCriteria = other.criteria,\\n          length = objCriteria.length,\\n          ordersLength = orders.length;\\n\\n      while (++i`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 282272,
                  "endLine": 1,
                  "endColumn": 282278,
                  "snippet": {
                    "text": "y an order of \\\"desc\\\" for descending or \\\"asc\\\" for ascending sort order\\n     * of corresponding values.\\n     *\\n     * @private\\n     * @param {Object} object The object to compare.\\n     * @param {Object} other The other object to compare.\\n     * @param {boolean[]|string[]} orders The order to sort by for each property.\\n     * @returns {number} Returns the sort order indicator for `object`.\\n     */\\n    function compareMultiple(object, other, orders) {\\n      var index = -1,\\n          objCriteria = object.criteria,\\n          othCriteria = other.criteria,\\n          length = objCriteria.len",
                    "rendered": {
                      "text": "y an order of \\\"desc\\\" for descending or \\\"asc\\\" for ascending sort order\\n     * of corresponding values.\\n     *\\n     * @private\\n     * @param {Object} object The object to compare.\\n     * @param {Object} other The other object to compare.\\n     * @param {boolean[]|string[]} orders The order to sort by for each property.\\n     * @returns {number} Returns the sort order indicator for `object`.\\n     */\\n    function compareMultiple(object, other, orders) {\\n      var index = -1,\\n          objCriteria = object.criteria,\\n          othCriteria = other.criteria,\\n          length = objCriteria.len",
                      "markdown": "`y an order of \\\"desc\\\" for descending or \\\"asc\\\" for ascending sort order\\n     * of corresponding values.\\n     *\\n     * @private\\n     * @param {Object} object The object to compare.\\n     * @param {Object} other The other object to compare.\\n     * @param {boolean[]|string[]} orders The order to sort by for each property.\\n     * @returns {number} Returns the sort order indicator for `object`.\\n     */\\n    function compareMultiple(object, other, orders) {\\n      var index = -1,\\n          objCriteria = object.criteria,\\n          othCriteria = other.criteria,\\n          length = objCriteria.len`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 282034,
                  "endLine": 1,
                  "endColumn": 282040,
                  "snippet": {
                    "text": "   }\\n\\n    /**\\n     * Used by `_.orderBy` to compare multiple properties of a value to another\\n     * and stable sort them.\\n     *\\n     * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,\\n     * specify an order of \\\"desc\\\" for descending or \\\"asc\\\" for ascending sort order\\n     * of corresponding values.\\n     *\\n     * @private\\n     * @param {Object} object The object to compare.\\n     * @param {Object} other The other object to compare.\\n     * @param {boolean[]|string[]} orders The order to sort by for each property.\\n     * @returns {number} Returns the so",
                    "rendered": {
                      "text": "   }\\n\\n    /**\\n     * Used by `_.orderBy` to compare multiple properties of a value to another\\n     * and stable sort them.\\n     *\\n     * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,\\n     * specify an order of \\\"desc\\\" for descending or \\\"asc\\\" for ascending sort order\\n     * of corresponding values.\\n     *\\n     * @private\\n     * @param {Object} object The object to compare.\\n     * @param {Object} other The other object to compare.\\n     * @param {boolean[]|string[]} orders The order to sort by for each property.\\n     * @returns {number} Returns the so",
                      "markdown": "`   }\\n\\n    /**\\n     * Used by `_.orderBy` to compare multiple properties of a value to another\\n     * and stable sort them.\\n     *\\n     * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,\\n     * specify an order of \\\"desc\\\" for descending or \\\"asc\\\" for ascending sort order\\n     * of corresponding values.\\n     *\\n     * @private\\n     * @param {Object} object The object to compare.\\n     * @param {Object} other The other object to compare.\\n     * @param {boolean[]|string[]} orders The order to sort by for each property.\\n     * @returns {number} Returns the so`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 281849,
                  "endLine": 1,
                  "endColumn": 281855,
                  "snippet": {
                    "text": "ull && valIsDefined && valIsReflexive) ||\\n            (!othIsDefined && valIsReflexive) ||\\n            !othIsReflexive) {\\n          return -1;\\n        }\\n      }\\n      return 0;\\n    }\\n\\n    /**\\n     * Used by `_.orderBy` to compare multiple properties of a value to another\\n     * and stable sort them.\\n     *\\n     * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,\\n     * specify an order of \\\"desc\\\" for descending or \\\"asc\\\" for ascending sort order\\n     * of corresponding values.\\n     *\\n     * @private\\n     * @param {Object} object The object to compar",
                    "rendered": {
                      "text": "ull && valIsDefined && valIsReflexive) ||\\n            (!othIsDefined && valIsReflexive) ||\\n            !othIsReflexive) {\\n          return -1;\\n        }\\n      }\\n      return 0;\\n    }\\n\\n    /**\\n     * Used by `_.orderBy` to compare multiple properties of a value to another\\n     * and stable sort them.\\n     *\\n     * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,\\n     * specify an order of \\\"desc\\\" for descending or \\\"asc\\\" for ascending sort order\\n     * of corresponding values.\\n     *\\n     * @private\\n     * @param {Object} object The object to compar",
                      "markdown": "`ull && valIsDefined && valIsReflexive) ||\\n            (!othIsDefined && valIsReflexive) ||\\n            !othIsReflexive) {\\n          return -1;\\n        }\\n      }\\n      return 0;\\n    }\\n\\n    /**\\n     * Used by `_.orderBy` to compare multiple properties of a value to another\\n     * and stable sort them.\\n     *\\n     * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,\\n     * specify an order of \\\"desc\\\" for descending or \\\"asc\\\" for ascending sort order\\n     * of corresponding values.\\n     *\\n     * @private\\n     * @param {Object} object The object to compar`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 280522,
                  "endLine": 1,
                  "endColumn": 280528,
                  "snippet": {
                    "text": "constructor(buffer, typedArray.byteOffset, typedArray.length);\\n    }\\n\\n    /**\\n     * Compares values to sort them in ascending order.\\n     *\\n     * @private\\n     * @param {*} value The value to compare.\\n     * @param {*} other The other value to compare.\\n     * @returns {number} Returns the sort order indicator for `value`.\\n     */\\n    function compareAscending(value, other) {\\n      if (value !== other) {\\n        var valIsDefined = value !== undefined,\\n            valIsNull = value === null,\\n            valIsReflexive = value === value,\\n            valIsSymbol = isSymbol(value);\\n\\n ",
                    "rendered": {
                      "text": "constructor(buffer, typedArray.byteOffset, typedArray.length);\\n    }\\n\\n    /**\\n     * Compares values to sort them in ascending order.\\n     *\\n     * @private\\n     * @param {*} value The value to compare.\\n     * @param {*} other The other value to compare.\\n     * @returns {number} Returns the sort order indicator for `value`.\\n     */\\n    function compareAscending(value, other) {\\n      if (value !== other) {\\n        var valIsDefined = value !== undefined,\\n            valIsNull = value === null,\\n            valIsReflexive = value === value,\\n            valIsSymbol = isSymbol(value);\\n\\n ",
                      "markdown": "`constructor(buffer, typedArray.byteOffset, typedArray.length);\\n    }\\n\\n    /**\\n     * Compares values to sort them in ascending order.\\n     *\\n     * @private\\n     * @param {*} value The value to compare.\\n     * @param {*} other The other value to compare.\\n     * @returns {number} Returns the sort order indicator for `value`.\\n     */\\n    function compareAscending(value, other) {\\n      if (value !== other) {\\n        var valIsDefined = value !== undefined,\\n            valIsNull = value === null,\\n            valIsReflexive = value === value,\\n            valIsSymbol = isSymbol(value);\\n\\n `"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 280329,
                  "endLine": 1,
                  "endColumn": 280335,
                  "snippet": {
                    "text": "ned typed array.\\n     */\\n    function cloneTypedArray(typedArray, isDeep) {\\n      var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;\\n      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);\\n    }\\n\\n    /**\\n     * Compares values to sort them in ascending order.\\n     *\\n     * @private\\n     * @param {*} value The value to compare.\\n     * @param {*} other The other value to compare.\\n     * @returns {number} Returns the sort order indicator for `value`.\\n     */\\n    function compareAscending(value, other) {\\n      if (value !== o",
                    "rendered": {
                      "text": "ned typed array.\\n     */\\n    function cloneTypedArray(typedArray, isDeep) {\\n      var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;\\n      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);\\n    }\\n\\n    /**\\n     * Compares values to sort them in ascending order.\\n     *\\n     * @private\\n     * @param {*} value The value to compare.\\n     * @param {*} other The other value to compare.\\n     * @returns {number} Returns the sort order indicator for `value`.\\n     */\\n    function compareAscending(value, other) {\\n      if (value !== o",
                      "markdown": "`ned typed array.\\n     */\\n    function cloneTypedArray(typedArray, isDeep) {\\n      var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;\\n      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);\\n    }\\n\\n    /**\\n     * Compares values to sort them in ascending order.\\n     *\\n     * @private\\n     * @param {*} value The value to compare.\\n     * @param {*} other The other value to compare.\\n     * @returns {number} Returns the sort order indicator for `value`.\\n     */\\n    function compareAscending(value, other) {\\n      if (value !== o`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 277497,
                  "endLine": 1,
                  "endColumn": 277506,
                  "snippet": {
                    "text": "d = end === undefined ? length : end;\\n      return (!start && end >= length) ? array : baseSlice(array, start, end);\\n    }\\n\\n    /**\\n     * A simple wrapper around the global [`clearTimeout`](https://mdn.io/clearTimeout).\\n     *\\n     * @private\\n     * @param {number|Object} id The timer id or timeout object of the timer to clear.\\n     */\\n    var clearTimeout = ctxClearTimeout || function(id) {\\n      return root.clearTimeout(id);\\n    };\\n\\n    /**\\n     * Creates a clone of  `buffer`.\\n     *\\n     * @private\\n     * @param {Buffer} buffer The buffer to clone.\\n     * @param {boolean} [isDeep",
                    "rendered": {
                      "text": "d = end === undefined ? length : end;\\n      return (!start && end >= length) ? array : baseSlice(array, start, end);\\n    }\\n\\n    /**\\n     * A simple wrapper around the global [`clearTimeout`](https://mdn.io/clearTimeout).\\n     *\\n     * @private\\n     * @param {number|Object} id The timer id or timeout object of the timer to clear.\\n     */\\n    var clearTimeout = ctxClearTimeout || function(id) {\\n      return root.clearTimeout(id);\\n    };\\n\\n    /**\\n     * Creates a clone of  `buffer`.\\n     *\\n     * @private\\n     * @param {Buffer} buffer The buffer to clone.\\n     * @param {boolean} [isDeep",
                      "markdown": "`d = end === undefined ? length : end;\\n      return (!start && end >= length) ? array : baseSlice(array, start, end);\\n    }\\n\\n    /**\\n     * A simple wrapper around the global [`clearTimeout`](https://mdn.io/clearTimeout).\\n     *\\n     * @private\\n     * @param {number|Object} id The timer id or timeout object of the timer to clear.\\n     */\\n    var clearTimeout = ctxClearTimeout || function(id) {\\n      return root.clearTimeout(id);\\n    };\\n\\n    /**\\n     * Creates a clone of  `buffer`.\\n     *\\n     * @private\\n     * @param {Buffer} buffer The buffer to clone.\\n     * @param {boolean} [isDeep`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 264858,
                  "endLine": 1,
                  "endColumn": 264864,
                  "snippet": {
                    "text": "    }\\n        return high;\\n      }\\n      return baseSortedIndexBy(array, value, identity, retHighest);\\n    }\\n\\n    /**\\n     * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`\\n     * which invokes `iteratee` for `value` and each element of `array` to compute\\n     * their sort ranking. The iteratee is invoked with one argument; (value).\\n     *\\n     * @private\\n     * @param {Array} array The sorted array to inspect.\\n     * @param {*} value The value to evaluate.\\n     * @param {Function} iteratee The iteratee invoked per element.\\n     * @param {boolean} [retHighest] S",
                    "rendered": {
                      "text": "    }\\n        return high;\\n      }\\n      return baseSortedIndexBy(array, value, identity, retHighest);\\n    }\\n\\n    /**\\n     * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`\\n     * which invokes `iteratee` for `value` and each element of `array` to compute\\n     * their sort ranking. The iteratee is invoked with one argument; (value).\\n     *\\n     * @private\\n     * @param {Array} array The sorted array to inspect.\\n     * @param {*} value The value to evaluate.\\n     * @param {Function} iteratee The iteratee invoked per element.\\n     * @param {boolean} [retHighest] S",
                      "markdown": "`    }\\n        return high;\\n      }\\n      return baseSortedIndexBy(array, value, identity, retHighest);\\n    }\\n\\n    /**\\n     * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`\\n     * which invokes `iteratee` for `value` and each element of `array` to compute\\n     * their sort ranking. The iteratee is invoked with one argument; (value).\\n     *\\n     * @private\\n     * @param {Array} array The sorted array to inspect.\\n     * @param {*} value The value to evaluate.\\n     * @param {Function} iteratee The iteratee invoked per element.\\n     * @param {boolean} [retHighest] S`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 263657,
                  "endLine": 1,
                  "endColumn": 263663,
                  "snippet": {
                    "text": "  return !result;\\n      });\\n      return !!result;\\n    }\\n\\n    /**\\n     * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which\\n     * performs a binary search of `array` to determine the index at which `value`\\n     * should be inserted into `array` in order to maintain its sort order.\\n     *\\n     * @private\\n     * @param {Array} array The sorted array to inspect.\\n     * @param {*} value The value to evaluate.\\n     * @param {boolean} [retHighest] Specify returning the highest qualified index.\\n     * @returns {number} Returns the index at which `value` should be insert",
                    "rendered": {
                      "text": "  return !result;\\n      });\\n      return !!result;\\n    }\\n\\n    /**\\n     * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which\\n     * performs a binary search of `array` to determine the index at which `value`\\n     * should be inserted into `array` in order to maintain its sort order.\\n     *\\n     * @private\\n     * @param {Array} array The sorted array to inspect.\\n     * @param {*} value The value to evaluate.\\n     * @param {boolean} [retHighest] Specify returning the highest qualified index.\\n     * @returns {number} Returns the index at which `value` should be insert",
                      "markdown": "`  return !result;\\n      });\\n      return !!result;\\n    }\\n\\n    /**\\n     * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which\\n     * performs a binary search of `array` to determine the index at which `value`\\n     * should be inserted into `array` in order to maintain its sort order.\\n     *\\n     * @private\\n     * @param {Array} array The sorted array to inspect.\\n     * @param {*} value The value to evaluate.\\n     * @param {boolean} [retHighest] Specify returning the highest qualified index.\\n     * @returns {number} Returns the index at which `value` should be insert`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 251304,
                  "endLine": 1,
                  "endColumn": 251310,
                  "snippet": {
                    "text": "  }\\n\\n    /**\\n     * The base implementation of `_.orderBy` without param guards.\\n     *\\n     * @private\\n     * @param {Array|Object} collection The collection to iterate over.\\n     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.\\n     * @param {string[]} orders The sort orders of `iteratees`.\\n     * @returns {Array} Returns the new sorted array.\\n     */\\n    function baseOrderBy(collection, iteratees, orders) {\\n      if (iteratees.length) {\\n        iteratees = arrayMap(iteratees, function(iteratee) {\\n          if (isArray(iteratee)) {\\n            return funct",
                    "rendered": {
                      "text": "  }\\n\\n    /**\\n     * The base implementation of `_.orderBy` without param guards.\\n     *\\n     * @private\\n     * @param {Array|Object} collection The collection to iterate over.\\n     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.\\n     * @param {string[]} orders The sort orders of `iteratees`.\\n     * @returns {Array} Returns the new sorted array.\\n     */\\n    function baseOrderBy(collection, iteratees, orders) {\\n      if (iteratees.length) {\\n        iteratees = arrayMap(iteratees, function(iteratee) {\\n          if (isArray(iteratee)) {\\n            return funct",
                      "markdown": "`  }\\n\\n    /**\\n     * The base implementation of `_.orderBy` without param guards.\\n     *\\n     * @private\\n     * @param {Array|Object} collection The collection to iterate over.\\n     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.\\n     * @param {string[]} orders The sort orders of `iteratees`.\\n     * @returns {Array} Returns the new sorted array.\\n     */\\n    function baseOrderBy(collection, iteratees, orders) {\\n      if (iteratees.length) {\\n        iteratees = arrayMap(iteratees, function(iteratee) {\\n          if (isArray(iteratee)) {\\n            return funct`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 251258,
                  "endLine": 1,
                  "endColumn": 251264,
                  "snippet": {
                    "text": "isIndex(n, length) ? array[n] : undefined;\\n    }\\n\\n    /**\\n     * The base implementation of `_.orderBy` without param guards.\\n     *\\n     * @private\\n     * @param {Array|Object} collection The collection to iterate over.\\n     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.\\n     * @param {string[]} orders The sort orders of `iteratees`.\\n     * @returns {Array} Returns the new sorted array.\\n     */\\n    function baseOrderBy(collection, iteratees, orders) {\\n      if (iteratees.length) {\\n        iteratees = arrayMap(iteratees, function(iteratee) {\\n          if (",
                    "rendered": {
                      "text": "isIndex(n, length) ? array[n] : undefined;\\n    }\\n\\n    /**\\n     * The base implementation of `_.orderBy` without param guards.\\n     *\\n     * @private\\n     * @param {Array|Object} collection The collection to iterate over.\\n     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.\\n     * @param {string[]} orders The sort orders of `iteratees`.\\n     * @returns {Array} Returns the new sorted array.\\n     */\\n    function baseOrderBy(collection, iteratees, orders) {\\n      if (iteratees.length) {\\n        iteratees = arrayMap(iteratees, function(iteratee) {\\n          if (",
                      "markdown": "`isIndex(n, length) ? array[n] : undefined;\\n    }\\n\\n    /**\\n     * The base implementation of `_.orderBy` without param guards.\\n     *\\n     * @private\\n     * @param {Array|Object} collection The collection to iterate over.\\n     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.\\n     * @param {string[]} orders The sort orders of `iteratees`.\\n     * @returns {Array} Returns the new sorted array.\\n     */\\n    function baseOrderBy(collection, iteratees, orders) {\\n      if (iteratees.length) {\\n        iteratees = arrayMap(iteratees, function(iteratee) {\\n          if (`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 217307,
                  "endLine": 1,
                  "endColumn": 217316,
                  "snippet": {
                    "text": "* to provide to `func`.\\n     *\\n     * @private\\n     * @param {Function} func The function to delay.\\n     * @param {number} wait The number of milliseconds to delay invocation.\\n     * @param {Array} args The arguments to provide to `func`.\\n     * @returns {number|Object} Returns the timer id or timeout object.\\n     */\\n    function baseDelay(func, wait, args) {\\n      if (typeof func != 'function') {\\n        throw new TypeError(FUNC_ERROR_TEXT);\\n      }\\n      return setTimeout(function() { func.apply(undefined, args); }, wait);\\n    }\\n\\n    /**\\n     * The base implementation of methods like ",
                    "rendered": {
                      "text": "* to provide to `func`.\\n     *\\n     * @private\\n     * @param {Function} func The function to delay.\\n     * @param {number} wait The number of milliseconds to delay invocation.\\n     * @param {Array} args The arguments to provide to `func`.\\n     * @returns {number|Object} Returns the timer id or timeout object.\\n     */\\n    function baseDelay(func, wait, args) {\\n      if (typeof func != 'function') {\\n        throw new TypeError(FUNC_ERROR_TEXT);\\n      }\\n      return setTimeout(function() { func.apply(undefined, args); }, wait);\\n    }\\n\\n    /**\\n     * The base implementation of methods like ",
                      "markdown": "`* to provide to `func`.\\n     *\\n     * @private\\n     * @param {Function} func The function to delay.\\n     * @param {number} wait The number of milliseconds to delay invocation.\\n     * @param {Array} args The arguments to provide to `func`.\\n     * @returns {number|Object} Returns the timer id or timeout object.\\n     */\\n    function baseDelay(func, wait, args) {\\n      if (typeof func != 'function') {\\n        throw new TypeError(FUNC_ERROR_TEXT);\\n      }\\n      return setTimeout(function() { func.apply(undefined, args); }, wait);\\n    }\\n\\n    /**\\n     * The base implementation of methods like `"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 186525,
                  "endLine": 1,
                  "endColumn": 186531,
                  "snippet": {
                    "text": "Wrapper(value, chainAll) {\\n      this.__wrapped__ = value;\\n      this.__actions__ = [];\\n      this.__chain__ = !!chainAll;\\n      this.__index__ = 0;\\n      this.__values__ = undefined;\\n    }\\n\\n    /**\\n     * By default, the template delimiters used by lodash are like those in\\n     * embedded Ruby (ERB) as well as ES2015 template strings. Change the\\n     * following template settings to use alternative delimiters.\\n     *\\n     * @static\\n     * @memberOf _\\n     * @type {Object}\\n     */\\n    lodash.templateSettings = {\\n\\n      /**\\n       * Used to detect `data` property values to be HTML",
                    "rendered": {
                      "text": "Wrapper(value, chainAll) {\\n      this.__wrapped__ = value;\\n      this.__actions__ = [];\\n      this.__chain__ = !!chainAll;\\n      this.__index__ = 0;\\n      this.__values__ = undefined;\\n    }\\n\\n    /**\\n     * By default, the template delimiters used by lodash are like those in\\n     * embedded Ruby (ERB) as well as ES2015 template strings. Change the\\n     * following template settings to use alternative delimiters.\\n     *\\n     * @static\\n     * @memberOf _\\n     * @type {Object}\\n     */\\n    lodash.templateSettings = {\\n\\n      /**\\n       * Used to detect `data` property values to be HTML",
                      "markdown": "`Wrapper(value, chainAll) {\\n      this.__wrapped__ = value;\\n      this.__actions__ = [];\\n      this.__chain__ = !!chainAll;\\n      this.__index__ = 0;\\n      this.__values__ = undefined;\\n    }\\n\\n    /**\\n     * By default, the template delimiters used by lodash are like those in\\n     * embedded Ruby (ERB) as well as ES2015 template strings. Change the\\n     * following template settings to use alternative delimiters.\\n     *\\n     * @static\\n     * @memberOf _\\n     * @type {Object}\\n     */\\n    lodash.templateSettings = {\\n\\n      /**\\n       * Used to detect `data` property values to be HTML`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 159222,
                  "endLine": 1,
                  "endColumn": 159228,
                  "snippet": {
                    "text": "\\n   * The base implementation of `_.sortBy` which uses `comparer` to define the\\n   * sort order of `array` and replaces criteria objects with their corresponding\\n   * values.\\n   *\\n   * @private\\n   * @param {Array} array The array to sort.\\n   * @param {Function} comparer The function to define sort order.\\n   * @returns {Array} Returns `array`.\\n   */\\n  function baseSortBy(array, comparer) {\\n    var length = array.length;\\n\\n    array.sort(comparer);\\n    while (length--) {\\n      array[length] = array[length].value;\\n    }\\n    return array;\\n  }\\n\\n  /**\\n   * The base implementation of `_",
                    "rendered": {
                      "text": "\\n   * The base implementation of `_.sortBy` which uses `comparer` to define the\\n   * sort order of `array` and replaces criteria objects with their corresponding\\n   * values.\\n   *\\n   * @private\\n   * @param {Array} array The array to sort.\\n   * @param {Function} comparer The function to define sort order.\\n   * @returns {Array} Returns `array`.\\n   */\\n  function baseSortBy(array, comparer) {\\n    var length = array.length;\\n\\n    array.sort(comparer);\\n    while (length--) {\\n      array[length] = array[length].value;\\n    }\\n    return array;\\n  }\\n\\n  /**\\n   * The base implementation of `_",
                      "markdown": "`\\n   * The base implementation of `_.sortBy` which uses `comparer` to define the\\n   * sort order of `array` and replaces criteria objects with their corresponding\\n   * values.\\n   *\\n   * @private\\n   * @param {Array} array The array to sort.\\n   * @param {Function} comparer The function to define sort order.\\n   * @returns {Array} Returns `array`.\\n   */\\n  function baseSortBy(array, comparer) {\\n    var length = array.length;\\n\\n    array.sort(comparer);\\n    while (length--) {\\n      array[length] = array[length].value;\\n    }\\n    return array;\\n  }\\n\\n  /**\\n   * The base implementation of `_`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 159008,
                  "endLine": 1,
                  "endColumn": 159014,
                  "snippet": {
                    "text": " function(value, index, collection) {\\n      accumulator = initAccum\\n        ? (initAccum = false, value)\\n        : iteratee(accumulator, value, index, collection);\\n    });\\n    return accumulator;\\n  }\\n\\n  /**\\n   * The base implementation of `_.sortBy` which uses `comparer` to define the\\n   * sort order of `array` and replaces criteria objects with their corresponding\\n   * values.\\n   *\\n   * @private\\n   * @param {Array} array The array to sort.\\n   * @param {Function} comparer The function to define sort order.\\n   * @returns {Array} Returns `array`.\\n   */\\n  function baseSortBy(array, co",
                    "rendered": {
                      "text": " function(value, index, collection) {\\n      accumulator = initAccum\\n        ? (initAccum = false, value)\\n        : iteratee(accumulator, value, index, collection);\\n    });\\n    return accumulator;\\n  }\\n\\n  /**\\n   * The base implementation of `_.sortBy` which uses `comparer` to define the\\n   * sort order of `array` and replaces criteria objects with their corresponding\\n   * values.\\n   *\\n   * @private\\n   * @param {Array} array The array to sort.\\n   * @param {Function} comparer The function to define sort order.\\n   * @returns {Array} Returns `array`.\\n   */\\n  function baseSortBy(array, co",
                      "markdown": "` function(value, index, collection) {\\n      accumulator = initAccum\\n        ? (initAccum = false, value)\\n        : iteratee(accumulator, value, index, collection);\\n    });\\n    return accumulator;\\n  }\\n\\n  /**\\n   * The base implementation of `_.sortBy` which uses `comparer` to define the\\n   * sort order of `array` and replaces criteria objects with their corresponding\\n   * values.\\n   *\\n   * @private\\n   * @param {Array} array The array to sort.\\n   * @param {Function} comparer The function to define sort order.\\n   * @returns {Array} Returns `array`.\\n   */\\n  function baseSortBy(array, co`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/static/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 116980,
                  "endLine": 1,
                  "endColumn": 116988,
                  "snippet": {
                    "text": "atePath = __webpack_public_path__;\\n  }\\n  // templatePath ends with a slash.\\n  const templateLocation = `${templatePath}vulcanized_tfma.js`;\\n\\n  // If the vulcanizes tempalets are not loaded yet, load it now.\\n  if (!document.querySelector('script[src=\\\"' + templateLocation + '\\\"]')) {\\n    const script = document.createElement('script');\\n    script.setAttribute('src', templateLocation);\\n    document.head.appendChild(script);\\n  }\\n}\\n\\n/**\\n * HACK: Calls the render callback in a setTimeout. This delay avoids some\\n * rendering artifacts.\\n * @param {!Function} cb\\n */\\nfunction delayedRender(cb",
                    "rendered": {
                      "text": "atePath = __webpack_public_path__;\\n  }\\n  // templatePath ends with a slash.\\n  const templateLocation = `${templatePath}vulcanized_tfma.js`;\\n\\n  // If the vulcanizes tempalets are not loaded yet, load it now.\\n  if (!document.querySelector('script[src=\\\"' + templateLocation + '\\\"]')) {\\n    const script = document.createElement('script');\\n    script.setAttribute('src', templateLocation);\\n    document.head.appendChild(script);\\n  }\\n}\\n\\n/**\\n * HACK: Calls the render callback in a setTimeout. This delay avoids some\\n * rendering artifacts.\\n * @param {!Function} cb\\n */\\nfunction delayedRender(cb",
                      "markdown": "`atePath = __webpack_public_path__;\\n  }\\n  // templatePath ends with a slash.\\n  const templateLocation = `${templatePath}vulcanized_tfma.js`;\\n\\n  // If the vulcanizes tempalets are not loaded yet, load it now.\\n  if (!document.querySelector('script[src=\\\"' + templateLocation + '\\\"]')) {\\n    const script = document.createElement('script');\\n    script.setAttribute('src', templateLocation);\\n    document.head.appendChild(script);\\n  }\\n}\\n\\n/**\\n * HACK: Calls the render callback in a setTimeout. This delay avoids some\\n * rendering artifacts.\\n * @param {!Function} cb\\n */\\nfunction delayedRender(cb`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/slicer/slice_accessor_test.py"
                },
                "region": {
                  "startLine": 102,
                  "startColumn": 38,
                  "endLine": 102,
                  "endColumn": 43,
                  "snippet": {
                    "text": "      self.assertEqual([1.0, 2.0], accessor.get('dense'))\n      self.assertEqual([7.0], accessor.get('dense_single'))\n      self.assertEqual([1.0, 2.0, 3.0, 4.0], accessor.get('dense_multidim'))\n      self.assertEqual([2.0], accessor.get('squeeze_needed'))\n\n\nif __name__ == '__main__':\n",
                    "rendered": {
                      "text": "      self.assertEqual([1.0, 2.0], accessor.get('dense'))\n      self.assertEqual([7.0], accessor.get('dense_single'))\n      self.assertEqual([1.0, 2.0, 3.0, 4.0], accessor.get('dense_multidim'))\n      self.assertEqual([2.0], accessor.get('squeeze_needed'))\n\n\nif __name__ == '__main__':\n",
                      "markdown": "`      self.assertEqual([1.0, 2.0], accessor.get('dense'))\n      self.assertEqual([7.0], accessor.get('dense_single'))\n      self.assertEqual([1.0, 2.0, 3.0, 4.0], accessor.get('dense_multidim'))\n      self.assertEqual([2.0], accessor.get('squeeze_needed'))\n\n\nif __name__ == '__main__':\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/slicer/slice_accessor_test.py"
                },
                "region": {
                  "startLine": 101,
                  "startColumn": 53,
                  "endLine": 101,
                  "endColumn": 58,
                  "snippet": {
                    "text": "      self.assertEqual([b'apple', b'banana'], accessor.get('sparse'))\n      self.assertEqual([1.0, 2.0], accessor.get('dense'))\n      self.assertEqual([7.0], accessor.get('dense_single'))\n      self.assertEqual([1.0, 2.0, 3.0, 4.0], accessor.get('dense_multidim'))\n      self.assertEqual([2.0], accessor.get('squeeze_needed'))\n\n\n",
                    "rendered": {
                      "text": "      self.assertEqual([b'apple', b'banana'], accessor.get('sparse'))\n      self.assertEqual([1.0, 2.0], accessor.get('dense'))\n      self.assertEqual([7.0], accessor.get('dense_single'))\n      self.assertEqual([1.0, 2.0, 3.0, 4.0], accessor.get('dense_multidim'))\n      self.assertEqual([2.0], accessor.get('squeeze_needed'))\n\n\n",
                      "markdown": "`      self.assertEqual([b'apple', b'banana'], accessor.get('sparse'))\n      self.assertEqual([1.0, 2.0], accessor.get('dense'))\n      self.assertEqual([7.0], accessor.get('dense_single'))\n      self.assertEqual([1.0, 2.0, 3.0, 4.0], accessor.get('dense_multidim'))\n      self.assertEqual([2.0], accessor.get('squeeze_needed'))\n\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/slicer/slice_accessor_test.py"
                },
                "region": {
                  "startLine": 100,
                  "startColumn": 38,
                  "endLine": 100,
                  "endColumn": 43,
                  "snippet": {
                    "text": "      accessor = slice_accessor.SliceAccessor([features_dict])\n      self.assertEqual([b'apple', b'banana'], accessor.get('sparse'))\n      self.assertEqual([1.0, 2.0], accessor.get('dense'))\n      self.assertEqual([7.0], accessor.get('dense_single'))\n      self.assertEqual([1.0, 2.0, 3.0, 4.0], accessor.get('dense_multidim'))\n      self.assertEqual([2.0], accessor.get('squeeze_needed'))\n\n",
                    "rendered": {
                      "text": "      accessor = slice_accessor.SliceAccessor([features_dict])\n      self.assertEqual([b'apple', b'banana'], accessor.get('sparse'))\n      self.assertEqual([1.0, 2.0], accessor.get('dense'))\n      self.assertEqual([7.0], accessor.get('dense_single'))\n      self.assertEqual([1.0, 2.0, 3.0, 4.0], accessor.get('dense_multidim'))\n      self.assertEqual([2.0], accessor.get('squeeze_needed'))\n\n",
                      "markdown": "`      accessor = slice_accessor.SliceAccessor([features_dict])\n      self.assertEqual([b'apple', b'banana'], accessor.get('sparse'))\n      self.assertEqual([1.0, 2.0], accessor.get('dense'))\n      self.assertEqual([7.0], accessor.get('dense_single'))\n      self.assertEqual([1.0, 2.0, 3.0, 4.0], accessor.get('dense_multidim'))\n      self.assertEqual([2.0], accessor.get('squeeze_needed'))\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/slicer/slice_accessor_test.py"
                },
                "region": {
                  "startLine": 99,
                  "startColumn": 43,
                  "endLine": 99,
                  "endColumn": 48,
                  "snippet": {
                    "text": "      }\n      accessor = slice_accessor.SliceAccessor([features_dict])\n      self.assertEqual([b'apple', b'banana'], accessor.get('sparse'))\n      self.assertEqual([1.0, 2.0], accessor.get('dense'))\n      self.assertEqual([7.0], accessor.get('dense_single'))\n      self.assertEqual([1.0, 2.0, 3.0, 4.0], accessor.get('dense_multidim'))\n      self.assertEqual([2.0], accessor.get('squeeze_needed'))\n",
                    "rendered": {
                      "text": "      }\n      accessor = slice_accessor.SliceAccessor([features_dict])\n      self.assertEqual([b'apple', b'banana'], accessor.get('sparse'))\n      self.assertEqual([1.0, 2.0], accessor.get('dense'))\n      self.assertEqual([7.0], accessor.get('dense_single'))\n      self.assertEqual([1.0, 2.0, 3.0, 4.0], accessor.get('dense_multidim'))\n      self.assertEqual([2.0], accessor.get('squeeze_needed'))\n",
                      "markdown": "`      }\n      accessor = slice_accessor.SliceAccessor([features_dict])\n      self.assertEqual([b'apple', b'banana'], accessor.get('sparse'))\n      self.assertEqual([1.0, 2.0], accessor.get('dense'))\n      self.assertEqual([7.0], accessor.get('dense_single'))\n      self.assertEqual([1.0, 2.0, 3.0, 4.0], accessor.get('dense_multidim'))\n      self.assertEqual([2.0], accessor.get('squeeze_needed'))\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/slicer/slice_accessor_test.py"
                },
                "region": {
                  "startLine": 98,
                  "startColumn": 54,
                  "endLine": 98,
                  "endColumn": 59,
                  "snippet": {
                    "text": "          },\n      }\n      accessor = slice_accessor.SliceAccessor([features_dict])\n      self.assertEqual([b'apple', b'banana'], accessor.get('sparse'))\n      self.assertEqual([1.0, 2.0], accessor.get('dense'))\n      self.assertEqual([7.0], accessor.get('dense_single'))\n      self.assertEqual([1.0, 2.0, 3.0, 4.0], accessor.get('dense_multidim'))\n",
                    "rendered": {
                      "text": "          },\n      }\n      accessor = slice_accessor.SliceAccessor([features_dict])\n      self.assertEqual([b'apple', b'banana'], accessor.get('sparse'))\n      self.assertEqual([1.0, 2.0], accessor.get('dense'))\n      self.assertEqual([7.0], accessor.get('dense_single'))\n      self.assertEqual([1.0, 2.0, 3.0, 4.0], accessor.get('dense_multidim'))\n",
                      "markdown": "`          },\n      }\n      accessor = slice_accessor.SliceAccessor([features_dict])\n      self.assertEqual([b'apple', b'banana'], accessor.get('sparse'))\n      self.assertEqual([1.0, 2.0], accessor.get('dense'))\n      self.assertEqual([7.0], accessor.get('dense_single'))\n      self.assertEqual([1.0, 2.0, 3.0, 4.0], accessor.get('dense_multidim'))\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/slicer/slice_accessor_test.py"
                },
                "region": {
                  "startLine": 64,
                  "startColumn": 42,
                  "endLine": 64,
                  "endColumn": 47,
                  "snippet": {
                    "text": "            'unmatched_feature': feature_value\n        }],\n        default_features_dict={'feature': feature_value})\n    self.assertEqual(slice_value, accessor.get('feature'))\n\n  def testLegacyAccessFeaturesDict(self):\n    with tf.compat.v1.Session() as sess:\n",
                    "rendered": {
                      "text": "            'unmatched_feature': feature_value\n        }],\n        default_features_dict={'feature': feature_value})\n    self.assertEqual(slice_value, accessor.get('feature'))\n\n  def testLegacyAccessFeaturesDict(self):\n    with tf.compat.v1.Session() as sess:\n",
                      "markdown": "`            'unmatched_feature': feature_value\n        }],\n        default_features_dict={'feature': feature_value})\n    self.assertEqual(slice_value, accessor.get('feature'))\n\n  def testLegacyAccessFeaturesDict(self):\n    with tf.compat.v1.Session() as sess:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/slicer/slice_accessor_test.py"
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 42,
                  "endLine": 57,
                  "endColumn": 47,
                  "snippet": {
                    "text": "    }, {\n        'feature': feature_value\n    }])\n    self.assertEqual(slice_value, accessor.get('feature'))\n    # Test with default features dict\n    accessor = slice_accessor.SliceAccessor(\n        [{\n",
                    "rendered": {
                      "text": "    }, {\n        'feature': feature_value\n    }])\n    self.assertEqual(slice_value, accessor.get('feature'))\n    # Test with default features dict\n    accessor = slice_accessor.SliceAccessor(\n        [{\n",
                      "markdown": "`    }, {\n        'feature': feature_value\n    }])\n    self.assertEqual(slice_value, accessor.get('feature'))\n    # Test with default features dict\n    accessor = slice_accessor.SliceAccessor(\n        [{\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/slicer/slice_accessor_test.py"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 42,
                  "endLine": 50,
                  "endColumn": 47,
                  "snippet": {
                    "text": "      ('pyarrow_ragged', pa.array([[1, 2], [3]]), [1, 2, 3]))\n  def testAccessFeaturesDict(self, feature_value, slice_value):\n    accessor = slice_accessor.SliceAccessor([{'feature': feature_value}])\n    self.assertEqual(slice_value, accessor.get('feature'))\n    # Test with multiple dicts and duplicate values\n    accessor = slice_accessor.SliceAccessor([{\n        'feature': feature_value\n",
                    "rendered": {
                      "text": "      ('pyarrow_ragged', pa.array([[1, 2], [3]]), [1, 2, 3]))\n  def testAccessFeaturesDict(self, feature_value, slice_value):\n    accessor = slice_accessor.SliceAccessor([{'feature': feature_value}])\n    self.assertEqual(slice_value, accessor.get('feature'))\n    # Test with multiple dicts and duplicate values\n    accessor = slice_accessor.SliceAccessor([{\n        'feature': feature_value\n",
                      "markdown": "`      ('pyarrow_ragged', pa.array([[1, 2], [3]]), [1, 2, 3]))\n  def testAccessFeaturesDict(self, feature_value, slice_value):\n    accessor = slice_accessor.SliceAccessor([{'feature': feature_value}])\n    self.assertEqual(slice_value, accessor.get('feature'))\n    # Test with multiple dicts and duplicate values\n    accessor = slice_accessor.SliceAccessor([{\n        'feature': feature_value\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/slicer/slice_accessor_test.py"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 14,
                  "endLine": 30,
                  "endColumn": 19,
                  "snippet": {
                    "text": "  def testRaisesKeyError(self):\n    accessor = slice_accessor.SliceAccessor({})\n    with self.assertRaises(KeyError):\n      accessor.get('no_such_key')\n\n  @parameterized.named_parameters(\n      ('sparse_tensor_value',\n",
                    "rendered": {
                      "text": "  def testRaisesKeyError(self):\n    accessor = slice_accessor.SliceAccessor({})\n    with self.assertRaises(KeyError):\n      accessor.get('no_such_key')\n\n  @parameterized.named_parameters(\n      ('sparse_tensor_value',\n",
                      "markdown": "`  def testRaisesKeyError(self):\n    accessor = slice_accessor.SliceAccessor({})\n    with self.assertRaises(KeyError):\n      accessor.get('no_such_key')\n\n  @parameterized.named_parameters(\n      ('sparse_tensor_value',\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/slicer/slice_accessor_test.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/slicer/slice_accessor.py"
                },
                "region": {
                  "startLine": 93,
                  "startColumn": 58,
                  "endLine": 93,
                  "endColumn": 63,
                  "snippet": {
                    "text": "      else:\n        values = np.concatenate((values, value))\n    if values is None and self._default_features_dict:\n      values = normalize_value(self._default_features_dict.get(key))\n    if values is None:\n      raise KeyError('key %s not found' % key)\n    return np.unique(values).tolist()\n",
                    "rendered": {
                      "text": "      else:\n        values = np.concatenate((values, value))\n    if values is None and self._default_features_dict:\n      values = normalize_value(self._default_features_dict.get(key))\n    if values is None:\n      raise KeyError('key %s not found' % key)\n    return np.unique(values).tolist()\n",
                      "markdown": "`      else:\n        values = np.concatenate((values, value))\n    if values is None and self._default_features_dict:\n      values = normalize_value(self._default_features_dict.get(key))\n    if values is None:\n      raise KeyError('key %s not found' % key)\n    return np.unique(values).tolist()\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/slicer/slice_accessor.py"
                },
                "region": {
                  "startLine": 85,
                  "startColumn": 31,
                  "endLine": 85,
                  "endColumn": 36,
                  "snippet": {
                    "text": "\n    values = None\n    for d in self._features_dicts:\n      value = normalize_value(d.get(key))\n      if value is None:\n        continue\n      if values is None:\n",
                    "rendered": {
                      "text": "\n    values = None\n    for d in self._features_dicts:\n      value = normalize_value(d.get(key))\n      if value is None:\n        continue\n      if values is None:\n",
                      "markdown": "`\n    values = None\n    for d in self._features_dicts:\n      value = normalize_value(d.get(key))\n      if value is None:\n        continue\n      if values is None:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/slicer/slice_accessor.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/notebook/colab/widget.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/notebook/colab/widget.py"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 27,
                  "endLine": 25,
                  "endColumn": 33,
                  "snippet": {
                    "text": "\n\nclass TimeSeriesViewer:\n  \"\"\"Empty viewer class for time series.\"\"\"\n  pass\n\n\n",
                    "rendered": {
                      "text": "\n\nclass TimeSeriesViewer:\n  \"\"\"Empty viewer class for time series.\"\"\"\n  pass\n\n\n",
                      "markdown": "`\n\nclass TimeSeriesViewer:\n  \"\"\"Empty viewer class for time series.\"\"\"\n  pass\n\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/set_match_confusion_matrix_metric"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/preprocessors/utils/box_match_tes"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/multi_label_confusion_matrix_plot"
                },
                "region": {
                  "startLine": 161,
                  "startColumn": 41,
                  "endLine": 161,
                  "endColumn": 45,
                  "snippet": {
                    "text": "\n\nclass _MultiLabelConfusionMatrixPlotCombiner(beam.CombineFn):\n  \"\"\"Creates multi-label confusion matrix at thresholds from standard inputs.\"\"\"\n\n  def __init__(self, key: metric_types.PlotKey,\n               eval_config: Optional[config_pb2.EvalConfig],\n",
                    "rendered": {
                      "text": "\n\nclass _MultiLabelConfusionMatrixPlotCombiner(beam.CombineFn):\n  \"\"\"Creates multi-label confusion matrix at thresholds from standard inputs.\"\"\"\n\n  def __init__(self, key: metric_types.PlotKey,\n               eval_config: Optional[config_pb2.EvalConfig],\n",
                      "markdown": "`\n\nclass _MultiLabelConfusionMatrixPlotCombiner(beam.CombineFn):\n  \"\"\"Creates multi-label confusion matrix at thresholds from standard inputs.\"\"\"\n\n  def __init__(self, key: metric_types.PlotKey,\n               eval_config: Optional[config_pb2.EvalConfig],\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/multi_label_confusion_matrix_plot"
                },
                "region": {
                  "startLine": 113,
                  "startColumn": 60,
                  "endLine": 113,
                  "endColumn": 64,
                  "snippet": {
                    "text": "  \"\"\"Returns computations for multi-label confusion matrix at thresholds.\"\"\"\n  if num_thresholds is not None and thresholds is not None:\n    raise ValueError(\n        'only one of thresholds or num_thresholds can be set at a time')\n  if num_thresholds is None and thresholds is None:\n    thresholds = [0.5]\n  if num_thresholds is not None:\n",
                    "rendered": {
                      "text": "  \"\"\"Returns computations for multi-label confusion matrix at thresholds.\"\"\"\n  if num_thresholds is not None and thresholds is not None:\n    raise ValueError(\n        'only one of thresholds or num_thresholds can be set at a time')\n  if num_thresholds is None and thresholds is None:\n    thresholds = [0.5]\n  if num_thresholds is not None:\n",
                      "markdown": "`  \"\"\"Returns computations for multi-label confusion matrix at thresholds.\"\"\"\n  if num_thresholds is not None and thresholds is not None:\n    raise ValueError(\n        'only one of thresholds or num_thresholds can be set at a time')\n  if num_thresholds is None and thresholds is None:\n    thresholds = [0.5]\n  if num_thresholds is not None:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/multi_label_confusion_matrix_plot"
                },
                "region": {
                  "startLine": 110,
                  "startColumn": 58,
                  "endLine": 110,
                  "endColumn": 62,
                  "snippet": {
                    "text": "    output_name: str = '',\n    example_weighted: bool = False,\n) -> metric_types.MetricComputations:\n  \"\"\"Returns computations for multi-label confusion matrix at thresholds.\"\"\"\n  if num_thresholds is not None and thresholds is not None:\n    raise ValueError(\n        'only one of thresholds or num_thresholds can be set at a time')\n",
                    "rendered": {
                      "text": "    output_name: str = '',\n    example_weighted: bool = False,\n) -> metric_types.MetricComputations:\n  \"\"\"Returns computations for multi-label confusion matrix at thresholds.\"\"\"\n  if num_thresholds is not None and thresholds is not None:\n    raise ValueError(\n        'only one of thresholds or num_thresholds can be set at a time')\n",
                      "markdown": "`    output_name: str = '',\n    example_weighted: bool = False,\n) -> metric_types.MetricComputations:\n  \"\"\"Returns computations for multi-label confusion matrix at thresholds.\"\"\"\n  if num_thresholds is not None and thresholds is not None:\n    raise ValueError(\n        'only one of thresholds or num_thresholds can be set at a time')\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/multi_label_confusion_matrix_plot"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 31,
                  "endLine": 14,
                  "endColumn": 35,
                  "snippet": {
                    "text": "# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\"\"\"Multi-label confusion matrix at thresholds.\"\"\"\n\nfrom typing import Dict, Iterable, List, Optional, NamedTuple\n\n",
                    "rendered": {
                      "text": "# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\"\"\"Multi-label confusion matrix at thresholds.\"\"\"\n\nfrom typing import Dict, Iterable, List, Optional, NamedTuple\n\n",
                      "markdown": "`# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\"\"\"Multi-label confusion matrix at thresholds.\"\"\"\n\nfrom typing import Dict, Iterable, List, Optional, NamedTuple\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/multi_label_confusion_matrix_plot"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/attributions_test.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/notebook/visualization.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/semantic_segmentation_confusion_m"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/attributions.py"
                },
                "region": {
                  "startLine": 210,
                  "startColumn": 25,
                  "endLine": 210,
                  "endColumn": 36,
                  "snippet": {
                    "text": "      metrics: Dict[metric_types.MetricKey, Any]\n  ) -> Dict[metric_types.AttributionsKey, Dict[str, Union[float, np.ndarray]]]:\n    \"\"\"Returns total attributions.\"\"\"\n    return {key: metrics[private_key]}\n\n  derived_computation = metric_types.DerivedMetricComputation(\n      keys=[key], result=result)\n",
                    "rendered": {
                      "text": "      metrics: Dict[metric_types.MetricKey, Any]\n  ) -> Dict[metric_types.AttributionsKey, Dict[str, Union[float, np.ndarray]]]:\n    \"\"\"Returns total attributions.\"\"\"\n    return {key: metrics[private_key]}\n\n  derived_computation = metric_types.DerivedMetricComputation(\n      keys=[key], result=result)\n",
                      "markdown": "`      metrics: Dict[metric_types.MetricKey, Any]\n  ) -> Dict[metric_types.AttributionsKey, Dict[str, Union[float, np.ndarray]]]:\n    \"\"\"Returns total attributions.\"\"\"\n    return {key: metrics[private_key]}\n\n  derived_computation = metric_types.DerivedMetricComputation(\n      keys=[key], result=result)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/attributions.py"
                },
                "region": {
                  "startLine": 204,
                  "startColumn": 2,
                  "endLine": 204,
                  "endColumn": 13,
                  "snippet": {
                    "text": "      output_name=output_name,\n      sub_key=sub_key,\n      example_weighted=example_weighted)\n  private_key = computations[-1].keys[-1]\n\n  def result(\n      metrics: Dict[metric_types.MetricKey, Any]\n",
                    "rendered": {
                      "text": "      output_name=output_name,\n      sub_key=sub_key,\n      example_weighted=example_weighted)\n  private_key = computations[-1].keys[-1]\n\n  def result(\n      metrics: Dict[metric_types.MetricKey, Any]\n",
                      "markdown": "`      output_name=output_name,\n      sub_key=sub_key,\n      example_weighted=example_weighted)\n  private_key = computations[-1].keys[-1]\n\n  def result(\n      metrics: Dict[metric_types.MetricKey, Any]\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/attributions.py"
                },
                "region": {
                  "startLine": 269,
                  "startColumn": 28,
                  "endLine": 269,
                  "endColumn": 32,
                  "snippet": {
                    "text": "    self._absolute = absolute\n\n  def _sum(self, a: List[float], b: Union[np.ndarray, List[float]]):\n    \"\"\"Adds values in b to a at matching offsets.\"\"\"\n    if (isinstance(b, (float, np.floating)) or\n        (isinstance(b, np.ndarray) and b.size == 1)):\n      if len(a) != 1:\n",
                    "rendered": {
                      "text": "    self._absolute = absolute\n\n  def _sum(self, a: List[float], b: Union[np.ndarray, List[float]]):\n    \"\"\"Adds values in b to a at matching offsets.\"\"\"\n    if (isinstance(b, (float, np.floating)) or\n        (isinstance(b, np.ndarray) and b.size == 1)):\n      if len(a) != 1:\n",
                      "markdown": "`    self._absolute = absolute\n\n  def _sum(self, a: List[float], b: Union[np.ndarray, List[float]]):\n    \"\"\"Adds values in b to a at matching offsets.\"\"\"\n    if (isinstance(b, (float, np.floating)) or\n        (isinstance(b, np.ndarray) and b.size == 1)):\n      if len(a) != 1:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/attributions.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/attributions.py"
                },
                "region": {
                  "startLine": 360,
                  "startColumn": 24,
                  "endLine": 360,
                  "endColumn": 29,
                  "snippet": {
                    "text": "  if scores.shape[-1] < top_k:\n    raise ValueError(\n        'not enough attributions were provided to perform the requested '\n        'calcuations for top k. The requested value for k is {}, but the '\n        'values are {}\\n\\nThis may be caused by a metric configuration error '\n        'or an error in the pipeline.'.format(top_k, scores))\n\n",
                    "rendered": {
                      "text": "  if scores.shape[-1] < top_k:\n    raise ValueError(\n        'not enough attributions were provided to perform the requested '\n        'calcuations for top k. The requested value for k is {}, but the '\n        'values are {}\\n\\nThis may be caused by a metric configuration error '\n        'or an error in the pipeline.'.format(top_k, scores))\n\n",
                      "markdown": "`  if scores.shape[-1] < top_k:\n    raise ValueError(\n        'not enough attributions were provided to perform the requested '\n        'calcuations for top k. The requested value for k is {}, but the '\n        'values are {}\\n\\nThis may be caused by a metric configuration error '\n        'or an error in the pipeline.'.format(top_k, scores))\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/exact_match.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/cross_entropy_metrics_test.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/cross_entropy_metrics.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/confusion_matrix_plot_test.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/confusion_matrix_plot.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/confusion_matrix_metrics_test.py"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 29,
                  "endLine": 14,
                  "endColumn": 33,
                  "snippet": {
                    "text": "# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\"\"\"Tests for confusion matrix at thresholds.\"\"\"\n\nimport math\n\n",
                    "rendered": {
                      "text": "# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\"\"\"Tests for confusion matrix at thresholds.\"\"\"\n\nimport math\n\n",
                      "markdown": "`# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\"\"\"Tests for confusion matrix at thresholds.\"\"\"\n\nimport math\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/confusion_matrix_metrics_test.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/confusion_matrix_metrics.py"
                },
                "region": {
                  "startLine": 2346,
                  "startColumn": 24,
                  "endLine": 2346,
                  "endColumn": 28,
                  "snippet": {
                    "text": "  The metric uses true positives and false negatives to compute recall by\n  dividing the true positives by the sum of true positives and false negatives.\n\n  Effectively the recall at threshold = epsilon(1.0e-12). It is equilvalent\n  to the recall defined in COCO metrics.\n\n  If `sample_weight` is `None`, weights default to 1.\n",
                    "rendered": {
                      "text": "  The metric uses true positives and false negatives to compute recall by\n  dividing the true positives by the sum of true positives and false negatives.\n\n  Effectively the recall at threshold = epsilon(1.0e-12). It is equilvalent\n  to the recall defined in COCO metrics.\n\n  If `sample_weight` is `None`, weights default to 1.\n",
                      "markdown": "`  The metric uses true positives and false negatives to compute recall by\n  dividing the true positives by the sum of true positives and false negatives.\n\n  Effectively the recall at threshold = epsilon(1.0e-12). It is equilvalent\n  to the recall defined in COCO metrics.\n\n  If `sample_weight` is `None`, weights default to 1.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/confusion_matrix_metrics.py"
                },
                "region": {
                  "startLine": 2299,
                  "startColumn": 55,
                  "endLine": 2299,
                  "endColumn": 59,
                  "snippet": {
                    "text": "      aggregation_type: Optional[metric_types.AggregationType] = None,\n      class_weights: Optional[Dict[int, float]] = None,\n      example_weighted: bool = False) -> metric_types.MetricComputations:\n    \"\"\"Returns metric computations for confusion matrix at thresholds.\"\"\"\n    sub_key = _validate_and_update_sub_key(name, model_name, output_name,\n                                           sub_key, top_k, class_id)\n    key = metric_types.MetricKey(\n",
                    "rendered": {
                      "text": "      aggregation_type: Optional[metric_types.AggregationType] = None,\n      class_weights: Optional[Dict[int, float]] = None,\n      example_weighted: bool = False) -> metric_types.MetricComputations:\n    \"\"\"Returns metric computations for confusion matrix at thresholds.\"\"\"\n    sub_key = _validate_and_update_sub_key(name, model_name, output_name,\n                                           sub_key, top_k, class_id)\n    key = metric_types.MetricKey(\n",
                      "markdown": "`      aggregation_type: Optional[metric_types.AggregationType] = None,\n      class_weights: Optional[Dict[int, float]] = None,\n      example_weighted: bool = False) -> metric_types.MetricComputations:\n    \"\"\"Returns metric computations for confusion matrix at thresholds.\"\"\"\n    sub_key = _validate_and_update_sub_key(name, model_name, output_name,\n                                           sub_key, top_k, class_id)\n    key = metric_types.MetricKey(\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/confusion_matrix_metrics.py"
                },
                "region": {
                  "startLine": 2259,
                  "startColumn": 35,
                  "endLine": 2259,
                  "endColumn": 39,
                  "snippet": {
                    "text": "               name: Optional[str] = None,\n               top_k: Optional[int] = None,\n               class_id: Optional[int] = None):\n    \"\"\"Initializes confusion matrix at thresholds.\n\n    Args:\n      thresholds: Thresholds to use for confusion matrix.\n",
                    "rendered": {
                      "text": "               name: Optional[str] = None,\n               top_k: Optional[int] = None,\n               class_id: Optional[int] = None):\n    \"\"\"Initializes confusion matrix at thresholds.\n\n    Args:\n      thresholds: Thresholds to use for confusion matrix.\n",
                      "markdown": "`               name: Optional[str] = None,\n               top_k: Optional[int] = None,\n               class_id: Optional[int] = None):\n    \"\"\"Initializes confusion matrix at thresholds.\n\n    Args:\n      thresholds: Thresholds to use for confusion matrix.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/confusion_matrix_metrics.py"
                },
                "region": {
                  "startLine": 2252,
                  "startColumn": 21,
                  "endLine": 2252,
                  "endColumn": 25,
                  "snippet": {
                    "text": "\n\nclass ConfusionMatrixAtThresholds(metric_types.Metric):\n  \"\"\"Confusion matrix at thresholds.\"\"\"\n\n  def __init__(self,\n               thresholds: List[float],\n",
                    "rendered": {
                      "text": "\n\nclass ConfusionMatrixAtThresholds(metric_types.Metric):\n  \"\"\"Confusion matrix at thresholds.\"\"\"\n\n  def __init__(self,\n               thresholds: List[float],\n",
                      "markdown": "`\n\nclass ConfusionMatrixAtThresholds(metric_types.Metric):\n  \"\"\"Confusion matrix at thresholds.\"\"\"\n\n  def __init__(self,\n               thresholds: List[float],\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/confusion_matrix_metrics.py"
                },
                "region": {
                  "startLine": 845,
                  "startColumn": 59,
                  "endLine": 845,
                  "endColumn": 63,
                  "snippet": {
                    "text": "  be achievable, in this case 0.0 is returned as recall.\n\n  This metric creates three local variables, `true_positives`, `false_positives`\n  and `false_negatives` that are used to compute the recall at the given\n  precision. The threshold for the given precision value is computed and used to\n  evaluate the corresponding recall.\n\n",
                    "rendered": {
                      "text": "  be achievable, in this case 0.0 is returned as recall.\n\n  This metric creates three local variables, `true_positives`, `false_positives`\n  and `false_negatives` that are used to compute the recall at the given\n  precision. The threshold for the given precision value is computed and used to\n  evaluate the corresponding recall.\n\n",
                      "markdown": "`  be achievable, in this case 0.0 is returned as recall.\n\n  This metric creates three local variables, `true_positives`, `false_positives`\n  and `false_negatives` that are used to compute the recall at the given\n  precision. The threshold for the given precision value is computed and used to\n  evaluate the corresponding recall.\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/confusion_matrix_metrics.py"
                },
                "region": {
                  "startLine": 180,
                  "startColumn": 24,
                  "endLine": 180,
                  "endColumn": 28,
                  "snippet": {
                    "text": "      array.\n    dependent: From these values the maximum that satiesfies the constraint is\n      selected. Values in this array and in `constrained` are linked by having\n      the same threshold at each position, hence this array must have the same\n      shape.\n    values: A list of the lower bound where contrained >= value.\n\n",
                    "rendered": {
                      "text": "      array.\n    dependent: From these values the maximum that satiesfies the constraint is\n      selected. Values in this array and in `constrained` are linked by having\n      the same threshold at each position, hence this array must have the same\n      shape.\n    values: A list of the lower bound where contrained >= value.\n\n",
                      "markdown": "`      array.\n    dependent: From these values the maximum that satiesfies the constraint is\n      selected. Values in this array and in `constrained` are linked by having\n      the same threshold at each position, hence this array must have the same\n      shape.\n    values: A list of the lower bound where contrained >= value.\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/confusion_matrix_metrics.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/confusion_matrix_metrics.py"
                },
                "region": {
                  "startLine": 549,
                  "startColumn": 5,
                  "endLine": 549,
                  "endColumn": 11,
                  "snippet": {
                    "text": "      x = recall\n      y = precision\n\n    # Find the rectangle heights based on `summation_method`.\n    if summation_method == AUCSummationMethod.INTERPOLATION:\n      heights = (y[:num_thresholds - 1] + y[1:]) / 2.\n    elif summation_method == AUCSummationMethod.MINORING:\n",
                    "rendered": {
                      "text": "      x = recall\n      y = precision\n\n    # Find the rectangle heights based on `summation_method`.\n    if summation_method == AUCSummationMethod.INTERPOLATION:\n      heights = (y[:num_thresholds - 1] + y[1:]) / 2.\n    elif summation_method == AUCSummationMethod.MINORING:\n",
                      "markdown": "`      x = recall\n      y = precision\n\n    # Find the rectangle heights based on `summation_method`.\n    if summation_method == AUCSummationMethod.INTERPOLATION:\n      heights = (y[:num_thresholds - 1] + y[1:]) / 2.\n    elif summation_method == AUCSummationMethod.MINORING:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/confusion_matrix_metrics.py"
                },
                "region": {
                  "startLine": 116,
                  "startColumn": 10,
                  "endLine": 116,
                  "endColumn": 15,
                  "snippet": {
                    "text": "    model_name: Model name.\n    output_name: Output name.\n    sub_key: Sub key (from MetricsSpec).\n    top_k: Top k setting (from MetricConfig).\n    class_id: Class ID setting (from MetricConfig).\n\n  Returns:\n",
                    "rendered": {
                      "text": "    model_name: Model name.\n    output_name: Output name.\n    sub_key: Sub key (from MetricsSpec).\n    top_k: Top k setting (from MetricConfig).\n    class_id: Class ID setting (from MetricConfig).\n\n  Returns:\n",
                      "markdown": "`    model_name: Model name.\n    output_name: Output name.\n    sub_key: Sub key (from MetricsSpec).\n    top_k: Top k setting (from MetricConfig).\n    class_id: Class ID setting (from MetricConfig).\n\n  Returns:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/calibration_test.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/calibration_plot_test.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/calibration_plot.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/calibration_plot.py"
                },
                "region": {
                  "startLine": 81,
                  "startColumn": 3,
                  "endLine": 81,
                  "endColumn": 9,
                  "snippet": {
                    "text": "  if label_schema is None:\n    return None, None\n\n  # Find the domain\n  if label_schema.HasField('int_domain'):\n    label_domain = label_schema.int_domain\n  elif label_schema.HasField('float_domain'):\n",
                    "rendered": {
                      "text": "  if label_schema is None:\n    return None, None\n\n  # Find the domain\n  if label_schema.HasField('int_domain'):\n    label_domain = label_schema.int_domain\n  elif label_schema.HasField('float_domain'):\n",
                      "markdown": "`  if label_schema is None:\n    return None, None\n\n  # Find the domain\n  if label_schema.HasField('int_domain'):\n    label_domain = label_schema.int_domain\n  elif label_schema.HasField('float_domain'):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/calibration_histogram_test.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/object_detection_confusion_matrix"
                },
                "region": {
                  "startLine": 494,
                  "startColumn": 24,
                  "endLine": 494,
                  "endColumn": 28,
                  "snippet": {
                    "text": "  The metric uses true positives and false negatives to compute recall by\n  dividing the true positives by the sum of true positives and false negatives.\n\n  Effectively the recall at threshold = epsilon(1.0e-12). It is equilvalent\n  to the recall defined in COCO metrics.\n\n  If `sample_weight` is `None`, weights default to 1.\n",
                    "rendered": {
                      "text": "  The metric uses true positives and false negatives to compute recall by\n  dividing the true positives by the sum of true positives and false negatives.\n\n  Effectively the recall at threshold = epsilon(1.0e-12). It is equilvalent\n  to the recall defined in COCO metrics.\n\n  If `sample_weight` is `None`, weights default to 1.\n",
                      "markdown": "`  The metric uses true positives and false negatives to compute recall by\n  dividing the true positives by the sum of true positives and false negatives.\n\n  Effectively the recall at threshold = epsilon(1.0e-12). It is equilvalent\n  to the recall defined in COCO metrics.\n\n  If `sample_weight` is `None`, weights default to 1.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/object_detection_confusion_matrix"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/object_detection_confusion_matrix"
                },
                "region": {
                  "startLine": 687,
                  "startColumn": 63,
                  "endLine": 687,
                  "endColumn": 69,
                  "snippet": {
                    "text": "        names. The desired format is [left bounadary, top boudnary, right\n        boundary, bottom boundary, class id, confidence score]. e.g. ['xmin',\n        'ymin', 'xmax', 'ymax', 'class_id', 'scores']\n      num_detections_key: (Optional) An output name in which to find the number\n        of detections to use for evaluation for a given example. It does nothing\n        if predictions_to_stack is not set. The value for this output should be\n        a scalar value or a single-value tensor. The stacked predicitions will\n",
                    "rendered": {
                      "text": "        names. The desired format is [left bounadary, top boudnary, right\n        boundary, bottom boundary, class id, confidence score]. e.g. ['xmin',\n        'ymin', 'xmax', 'ymax', 'class_id', 'scores']\n      num_detections_key: (Optional) An output name in which to find the number\n        of detections to use for evaluation for a given example. It does nothing\n        if predictions_to_stack is not set. The value for this output should be\n        a scalar value or a single-value tensor. The stacked predicitions will\n",
                      "markdown": "`        names. The desired format is [left bounadary, top boudnary, right\n        boundary, bottom boundary, class id, confidence score]. e.g. ['xmin',\n        'ymin', 'xmax', 'ymax', 'class_id', 'scores']\n      num_detections_key: (Optional) An output name in which to find the number\n        of detections to use for evaluation for a given example. It does nothing\n        if predictions_to_stack is not set. The value for this output should be\n        a scalar value or a single-value tensor. The stacked predicitions will\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/object_detection_confusion_matrix"
                },
                "region": {
                  "startLine": 684,
                  "startColumn": 53,
                  "endLine": 684,
                  "endColumn": 58,
                  "snippet": {
                    "text": "        'ymin', 'xmax', 'ymax', 'class_id']\n      predictions_to_stack: (Optional) Output names for columns to be stacked as\n        a single numpy array as the prediction. It should be the model's output\n        names. The desired format is [left bounadary, top boudnary, right\n        boundary, bottom boundary, class id, confidence score]. e.g. ['xmin',\n        'ymin', 'xmax', 'ymax', 'class_id', 'scores']\n      num_detections_key: (Optional) An output name in which to find the number\n",
                    "rendered": {
                      "text": "        'ymin', 'xmax', 'ymax', 'class_id']\n      predictions_to_stack: (Optional) Output names for columns to be stacked as\n        a single numpy array as the prediction. It should be the model's output\n        names. The desired format is [left bounadary, top boudnary, right\n        boundary, bottom boundary, class id, confidence score]. e.g. ['xmin',\n        'ymin', 'xmax', 'ymax', 'class_id', 'scores']\n      num_detections_key: (Optional) An output name in which to find the number\n",
                      "markdown": "`        'ymin', 'xmax', 'ymax', 'class_id']\n      predictions_to_stack: (Optional) Output names for columns to be stacked as\n        a single numpy array as the prediction. It should be the model's output\n        names. The desired format is [left bounadary, top boudnary, right\n        boundary, bottom boundary, class id, confidence score]. e.g. ['xmin',\n        'ymin', 'xmax', 'ymax', 'class_id', 'scores']\n      num_detections_key: (Optional) An output name in which to find the number\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/object_detection_confusion_matrix"
                },
                "region": {
                  "startLine": 679,
                  "startColumn": 72,
                  "endLine": 680,
                  "snippet": {
                    "text": "        single image. Default to None.\n      labels_to_stack: (Optional) Keys for columns to be stacked as a single\n        numpy array as the labels. It is searched under the key labels, features\n        and transformed features. The desired format is [left bounadary, top\n        boudnary, right boundary, bottom boundary, class id]. e.g. ['xmin',\n        'ymin', 'xmax', 'ymax', 'class_id']\n      predictions_to_stack: (Optional) Output names for columns to be stacked as\n        a single numpy array as the prediction. It should be the model's output\n",
                    "rendered": {
                      "text": "        single image. Default to None.\n      labels_to_stack: (Optional) Keys for columns to be stacked as a single\n        numpy array as the labels. It is searched under the key labels, features\n        and transformed features. The desired format is [left bounadary, top\n        boudnary, right boundary, bottom boundary, class id]. e.g. ['xmin',\n        'ymin', 'xmax', 'ymax', 'class_id']\n      predictions_to_stack: (Optional) Output names for columns to be stacked as\n        a single numpy array as the prediction. It should be the model's output\n",
                      "markdown": "`        single image. Default to None.\n      labels_to_stack: (Optional) Keys for columns to be stacked as a single\n        numpy array as the labels. It is searched under the key labels, features\n        and transformed features. The desired format is [left bounadary, top\n        boudnary, right boundary, bottom boundary, class id]. e.g. ['xmin',\n        'ymin', 'xmax', 'ymax', 'class_id']\n      predictions_to_stack: (Optional) Output names for columns to be stacked as\n        a single numpy array as the prediction. It should be the model's output\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/object_detection_confusion_matrix"
                },
                "region": {
                  "startLine": 542,
                  "startColumn": 63,
                  "endLine": 542,
                  "endColumn": 69,
                  "snippet": {
                    "text": "        names. The desired format is [left bounadary, top boudnary, right\n        boundary, bottom boundary, class id, confidence score]. e.g. ['xmin',\n        'ymin', 'xmax', 'ymax', 'class_id', 'scores']\n      num_detections_key: (Optional) An output name in which to find the number\n        of detections to use for evaluation for a given example. It does nothing\n        if predictions_to_stack is not set. The value for this output should be\n        a scalar value or a single-value tensor. The stacked predicitions will\n",
                    "rendered": {
                      "text": "        names. The desired format is [left bounadary, top boudnary, right\n        boundary, bottom boundary, class id, confidence score]. e.g. ['xmin',\n        'ymin', 'xmax', 'ymax', 'class_id', 'scores']\n      num_detections_key: (Optional) An output name in which to find the number\n        of detections to use for evaluation for a given example. It does nothing\n        if predictions_to_stack is not set. The value for this output should be\n        a scalar value or a single-value tensor. The stacked predicitions will\n",
                      "markdown": "`        names. The desired format is [left bounadary, top boudnary, right\n        boundary, bottom boundary, class id, confidence score]. e.g. ['xmin',\n        'ymin', 'xmax', 'ymax', 'class_id', 'scores']\n      num_detections_key: (Optional) An output name in which to find the number\n        of detections to use for evaluation for a given example. It does nothing\n        if predictions_to_stack is not set. The value for this output should be\n        a scalar value or a single-value tensor. The stacked predicitions will\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/object_detection_confusion_matrix"
                },
                "region": {
                  "startLine": 539,
                  "startColumn": 53,
                  "endLine": 539,
                  "endColumn": 58,
                  "snippet": {
                    "text": "        'ymin', 'xmax', 'ymax', 'class_id']\n      predictions_to_stack: (Optional) Output names for columns to be stacked as\n        a single numpy array as the prediction. It should be the model's output\n        names. The desired format is [left bounadary, top boudnary, right\n        boundary, bottom boundary, class id, confidence score]. e.g. ['xmin',\n        'ymin', 'xmax', 'ymax', 'class_id', 'scores']\n      num_detections_key: (Optional) An output name in which to find the number\n",
                    "rendered": {
                      "text": "        'ymin', 'xmax', 'ymax', 'class_id']\n      predictions_to_stack: (Optional) Output names for columns to be stacked as\n        a single numpy array as the prediction. It should be the model's output\n        names. The desired format is [left bounadary, top boudnary, right\n        boundary, bottom boundary, class id, confidence score]. e.g. ['xmin',\n        'ymin', 'xmax', 'ymax', 'class_id', 'scores']\n      num_detections_key: (Optional) An output name in which to find the number\n",
                      "markdown": "`        'ymin', 'xmax', 'ymax', 'class_id']\n      predictions_to_stack: (Optional) Output names for columns to be stacked as\n        a single numpy array as the prediction. It should be the model's output\n        names. The desired format is [left bounadary, top boudnary, right\n        boundary, bottom boundary, class id, confidence score]. e.g. ['xmin',\n        'ymin', 'xmax', 'ymax', 'class_id', 'scores']\n      num_detections_key: (Optional) An output name in which to find the number\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/object_detection_confusion_matrix"
                },
                "region": {
                  "startLine": 534,
                  "startColumn": 72,
                  "endLine": 535,
                  "snippet": {
                    "text": "        single image. Default to None.\n      labels_to_stack: (Optional) Keys for columns to be stacked as a single\n        numpy array as the labels. It is searched under the key labels, features\n        and transformed features. The desired format is [left bounadary, top\n        boudnary, right boundary, bottom boundary, class id]. e.g. ['xmin',\n        'ymin', 'xmax', 'ymax', 'class_id']\n      predictions_to_stack: (Optional) Output names for columns to be stacked as\n        a single numpy array as the prediction. It should be the model's output\n",
                    "rendered": {
                      "text": "        single image. Default to None.\n      labels_to_stack: (Optional) Keys for columns to be stacked as a single\n        numpy array as the labels. It is searched under the key labels, features\n        and transformed features. The desired format is [left bounadary, top\n        boudnary, right boundary, bottom boundary, class id]. e.g. ['xmin',\n        'ymin', 'xmax', 'ymax', 'class_id']\n      predictions_to_stack: (Optional) Output names for columns to be stacked as\n        a single numpy array as the prediction. It should be the model's output\n",
                      "markdown": "`        single image. Default to None.\n      labels_to_stack: (Optional) Keys for columns to be stacked as a single\n        numpy array as the labels. It is searched under the key labels, features\n        and transformed features. The desired format is [left bounadary, top\n        boudnary, right boundary, bottom boundary, class id]. e.g. ['xmin',\n        'ymin', 'xmax', 'ymax', 'class_id']\n      predictions_to_stack: (Optional) Output names for columns to be stacked as\n        a single numpy array as the prediction. It should be the model's output\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/object_detection_confusion_matrix"
                },
                "region": {
                  "startLine": 399,
                  "startColumn": 63,
                  "endLine": 399,
                  "endColumn": 69,
                  "snippet": {
                    "text": "        names. The desired format is [left bounadary, top boudnary, right\n        boundary, bottom boundary, class id, confidence score]. e.g. ['xmin',\n        'ymin', 'xmax', 'ymax', 'class_id', 'scores']\n      num_detections_key: (Optional) An output name in which to find the number\n        of detections to use for evaluation for a given example. It does nothing\n        if predictions_to_stack is not set. The value for this output should be\n        a scalar value or a single-value tensor. The stacked predicitions will\n",
                    "rendered": {
                      "text": "        names. The desired format is [left bounadary, top boudnary, right\n        boundary, bottom boundary, class id, confidence score]. e.g. ['xmin',\n        'ymin', 'xmax', 'ymax', 'class_id', 'scores']\n      num_detections_key: (Optional) An output name in which to find the number\n        of detections to use for evaluation for a given example. It does nothing\n        if predictions_to_stack is not set. The value for this output should be\n        a scalar value or a single-value tensor. The stacked predicitions will\n",
                      "markdown": "`        names. The desired format is [left bounadary, top boudnary, right\n        boundary, bottom boundary, class id, confidence score]. e.g. ['xmin',\n        'ymin', 'xmax', 'ymax', 'class_id', 'scores']\n      num_detections_key: (Optional) An output name in which to find the number\n        of detections to use for evaluation for a given example. It does nothing\n        if predictions_to_stack is not set. The value for this output should be\n        a scalar value or a single-value tensor. The stacked predicitions will\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/object_detection_confusion_matrix"
                },
                "region": {
                  "startLine": 396,
                  "startColumn": 53,
                  "endLine": 396,
                  "endColumn": 58,
                  "snippet": {
                    "text": "        'ymin', 'xmax', 'ymax', 'class_id']\n      predictions_to_stack: (Optional) Output names for columns to be stacked as\n        a single numpy array as the prediction. It should be the model's output\n        names. The desired format is [left bounadary, top boudnary, right\n        boundary, bottom boundary, class id, confidence score]. e.g. ['xmin',\n        'ymin', 'xmax', 'ymax', 'class_id', 'scores']\n      num_detections_key: (Optional) An output name in which to find the number\n",
                    "rendered": {
                      "text": "        'ymin', 'xmax', 'ymax', 'class_id']\n      predictions_to_stack: (Optional) Output names for columns to be stacked as\n        a single numpy array as the prediction. It should be the model's output\n        names. The desired format is [left bounadary, top boudnary, right\n        boundary, bottom boundary, class id, confidence score]. e.g. ['xmin',\n        'ymin', 'xmax', 'ymax', 'class_id', 'scores']\n      num_detections_key: (Optional) An output name in which to find the number\n",
                      "markdown": "`        'ymin', 'xmax', 'ymax', 'class_id']\n      predictions_to_stack: (Optional) Output names for columns to be stacked as\n        a single numpy array as the prediction. It should be the model's output\n        names. The desired format is [left bounadary, top boudnary, right\n        boundary, bottom boundary, class id, confidence score]. e.g. ['xmin',\n        'ymin', 'xmax', 'ymax', 'class_id', 'scores']\n      num_detections_key: (Optional) An output name in which to find the number\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/object_detection_confusion_matrix"
                },
                "region": {
                  "startLine": 391,
                  "startColumn": 72,
                  "endLine": 392,
                  "snippet": {
                    "text": "        single image. Default to None.\n      labels_to_stack: (Optional) Keys for columns to be stacked as a single\n        numpy array as the labels. It is searched under the key labels, features\n        and transformed features. The desired format is [left bounadary, top\n        boudnary, right boundary, bottom boundary, class id]. e.g. ['xmin',\n        'ymin', 'xmax', 'ymax', 'class_id']\n      predictions_to_stack: (Optional) Output names for columns to be stacked as\n        a single numpy array as the prediction. It should be the model's output\n",
                    "rendered": {
                      "text": "        single image. Default to None.\n      labels_to_stack: (Optional) Keys for columns to be stacked as a single\n        numpy array as the labels. It is searched under the key labels, features\n        and transformed features. The desired format is [left bounadary, top\n        boudnary, right boundary, bottom boundary, class id]. e.g. ['xmin',\n        'ymin', 'xmax', 'ymax', 'class_id']\n      predictions_to_stack: (Optional) Output names for columns to be stacked as\n        a single numpy array as the prediction. It should be the model's output\n",
                      "markdown": "`        single image. Default to None.\n      labels_to_stack: (Optional) Keys for columns to be stacked as a single\n        numpy array as the labels. It is searched under the key labels, features\n        and transformed features. The desired format is [left bounadary, top\n        boudnary, right boundary, bottom boundary, class id]. e.g. ['xmin',\n        'ymin', 'xmax', 'ymax', 'class_id']\n      predictions_to_stack: (Optional) Output names for columns to be stacked as\n        a single numpy array as the prediction. It should be the model's output\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/object_detection_confusion_matrix"
                },
                "region": {
                  "startLine": 252,
                  "startColumn": 63,
                  "endLine": 252,
                  "endColumn": 69,
                  "snippet": {
                    "text": "        names. The desired format is [left bounadary, top boudnary, right\n        boundary, bottom boundary, class id, confidence score]. e.g. ['xmin',\n        'ymin', 'xmax', 'ymax', 'class_id', 'scores']\n      num_detections_key: (Optional) An output name in which to find the number\n        of detections to use for evaluation for a given example. It does nothing\n        if predictions_to_stack is not set. The value for this output should be\n        a scalar value or a single-value tensor. The stacked predicitions will\n",
                    "rendered": {
                      "text": "        names. The desired format is [left bounadary, top boudnary, right\n        boundary, bottom boundary, class id, confidence score]. e.g. ['xmin',\n        'ymin', 'xmax', 'ymax', 'class_id', 'scores']\n      num_detections_key: (Optional) An output name in which to find the number\n        of detections to use for evaluation for a given example. It does nothing\n        if predictions_to_stack is not set. The value for this output should be\n        a scalar value or a single-value tensor. The stacked predicitions will\n",
                      "markdown": "`        names. The desired format is [left bounadary, top boudnary, right\n        boundary, bottom boundary, class id, confidence score]. e.g. ['xmin',\n        'ymin', 'xmax', 'ymax', 'class_id', 'scores']\n      num_detections_key: (Optional) An output name in which to find the number\n        of detections to use for evaluation for a given example. It does nothing\n        if predictions_to_stack is not set. The value for this output should be\n        a scalar value or a single-value tensor. The stacked predicitions will\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/object_detection_confusion_matrix"
                },
                "region": {
                  "startLine": 249,
                  "startColumn": 53,
                  "endLine": 249,
                  "endColumn": 58,
                  "snippet": {
                    "text": "        'ymin', 'xmax', 'ymax', 'class_id']\n      predictions_to_stack: (Optional) Output names for columns to be stacked as\n        a single numpy array as the prediction. It should be the model's output\n        names. The desired format is [left bounadary, top boudnary, right\n        boundary, bottom boundary, class id, confidence score]. e.g. ['xmin',\n        'ymin', 'xmax', 'ymax', 'class_id', 'scores']\n      num_detections_key: (Optional) An output name in which to find the number\n",
                    "rendered": {
                      "text": "        'ymin', 'xmax', 'ymax', 'class_id']\n      predictions_to_stack: (Optional) Output names for columns to be stacked as\n        a single numpy array as the prediction. It should be the model's output\n        names. The desired format is [left bounadary, top boudnary, right\n        boundary, bottom boundary, class id, confidence score]. e.g. ['xmin',\n        'ymin', 'xmax', 'ymax', 'class_id', 'scores']\n      num_detections_key: (Optional) An output name in which to find the number\n",
                      "markdown": "`        'ymin', 'xmax', 'ymax', 'class_id']\n      predictions_to_stack: (Optional) Output names for columns to be stacked as\n        a single numpy array as the prediction. It should be the model's output\n        names. The desired format is [left bounadary, top boudnary, right\n        boundary, bottom boundary, class id, confidence score]. e.g. ['xmin',\n        'ymin', 'xmax', 'ymax', 'class_id', 'scores']\n      num_detections_key: (Optional) An output name in which to find the number\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/object_detection_confusion_matrix"
                },
                "region": {
                  "startLine": 244,
                  "startColumn": 72,
                  "endLine": 245,
                  "snippet": {
                    "text": "        single image. Default to None.\n      labels_to_stack: (Optional) Keys for columns to be stacked as a single\n        numpy array as the labels. It is searched under the key labels, features\n        and transformed features. The desired format is [left bounadary, top\n        boudnary, right boundary, bottom boundary, class id]. e.g. ['xmin',\n        'ymin', 'xmax', 'ymax', 'class_id']\n      predictions_to_stack: (Optional) Output names for columns to be stacked as\n        a single numpy array as the prediction. It should be the model's output\n",
                    "rendered": {
                      "text": "        single image. Default to None.\n      labels_to_stack: (Optional) Keys for columns to be stacked as a single\n        numpy array as the labels. It is searched under the key labels, features\n        and transformed features. The desired format is [left bounadary, top\n        boudnary, right boundary, bottom boundary, class id]. e.g. ['xmin',\n        'ymin', 'xmax', 'ymax', 'class_id']\n      predictions_to_stack: (Optional) Output names for columns to be stacked as\n        a single numpy array as the prediction. It should be the model's output\n",
                      "markdown": "`        single image. Default to None.\n      labels_to_stack: (Optional) Keys for columns to be stacked as a single\n        numpy array as the labels. It is searched under the key labels, features\n        and transformed features. The desired format is [left bounadary, top\n        boudnary, right boundary, bottom boundary, class id]. e.g. ['xmin',\n        'ymin', 'xmax', 'ymax', 'class_id']\n      predictions_to_stack: (Optional) Output names for columns to be stacked as\n        a single numpy array as the prediction. It should be the model's output\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/object_detection_confusion_matrix"
                },
                "region": {
                  "startLine": 96,
                  "startColumn": 63,
                  "endLine": 96,
                  "endColumn": 69,
                  "snippet": {
                    "text": "        names. The desired format is [left bounadary, top boudnary, right\n        boundary, bottom boundary, class id, confidence score]. e.g. ['xmin',\n        'ymin', 'xmax', 'ymax', 'class_id', 'scores']\n      num_detections_key: (Optional) An output name in which to find the number\n        of detections to use for evaluation for a given example. It does nothing\n        if predictions_to_stack is not set. The value for this output should be\n        a scalar value or a single-value tensor. The stacked predicitions will\n",
                    "rendered": {
                      "text": "        names. The desired format is [left bounadary, top boudnary, right\n        boundary, bottom boundary, class id, confidence score]. e.g. ['xmin',\n        'ymin', 'xmax', 'ymax', 'class_id', 'scores']\n      num_detections_key: (Optional) An output name in which to find the number\n        of detections to use for evaluation for a given example. It does nothing\n        if predictions_to_stack is not set. The value for this output should be\n        a scalar value or a single-value tensor. The stacked predicitions will\n",
                      "markdown": "`        names. The desired format is [left bounadary, top boudnary, right\n        boundary, bottom boundary, class id, confidence score]. e.g. ['xmin',\n        'ymin', 'xmax', 'ymax', 'class_id', 'scores']\n      num_detections_key: (Optional) An output name in which to find the number\n        of detections to use for evaluation for a given example. It does nothing\n        if predictions_to_stack is not set. The value for this output should be\n        a scalar value or a single-value tensor. The stacked predicitions will\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/object_detection_confusion_matrix"
                },
                "region": {
                  "startLine": 93,
                  "startColumn": 53,
                  "endLine": 93,
                  "endColumn": 58,
                  "snippet": {
                    "text": "        'ymin', 'xmax', 'ymax', 'class_id']\n      predictions_to_stack: (Optional) Output names for columns to be stacked as\n        a single numpy array as the prediction. It should be the model's output\n        names. The desired format is [left bounadary, top boudnary, right\n        boundary, bottom boundary, class id, confidence score]. e.g. ['xmin',\n        'ymin', 'xmax', 'ymax', 'class_id', 'scores']\n      num_detections_key: (Optional) An output name in which to find the number\n",
                    "rendered": {
                      "text": "        'ymin', 'xmax', 'ymax', 'class_id']\n      predictions_to_stack: (Optional) Output names for columns to be stacked as\n        a single numpy array as the prediction. It should be the model's output\n        names. The desired format is [left bounadary, top boudnary, right\n        boundary, bottom boundary, class id, confidence score]. e.g. ['xmin',\n        'ymin', 'xmax', 'ymax', 'class_id', 'scores']\n      num_detections_key: (Optional) An output name in which to find the number\n",
                      "markdown": "`        'ymin', 'xmax', 'ymax', 'class_id']\n      predictions_to_stack: (Optional) Output names for columns to be stacked as\n        a single numpy array as the prediction. It should be the model's output\n        names. The desired format is [left bounadary, top boudnary, right\n        boundary, bottom boundary, class id, confidence score]. e.g. ['xmin',\n        'ymin', 'xmax', 'ymax', 'class_id', 'scores']\n      num_detections_key: (Optional) An output name in which to find the number\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/object_detection_confusion_matrix"
                },
                "region": {
                  "startLine": 88,
                  "startColumn": 72,
                  "endLine": 89,
                  "snippet": {
                    "text": "        single image. Default to None.\n      labels_to_stack: (Optional) Keys for columns to be stacked as a single\n        numpy array as the labels. It is searched under the key labels, features\n        and transformed features. The desired format is [left bounadary, top\n        boudnary, right boundary, bottom boundary, class id]. e.g. ['xmin',\n        'ymin', 'xmax', 'ymax', 'class_id']\n      predictions_to_stack: (Optional) Output names for columns to be stacked as\n        a single numpy array as the prediction. It should be the model's output\n",
                    "rendered": {
                      "text": "        single image. Default to None.\n      labels_to_stack: (Optional) Keys for columns to be stacked as a single\n        numpy array as the labels. It is searched under the key labels, features\n        and transformed features. The desired format is [left bounadary, top\n        boudnary, right boundary, bottom boundary, class id]. e.g. ['xmin',\n        'ymin', 'xmax', 'ymax', 'class_id']\n      predictions_to_stack: (Optional) Output names for columns to be stacked as\n        a single numpy array as the prediction. It should be the model's output\n",
                      "markdown": "`        single image. Default to None.\n      labels_to_stack: (Optional) Keys for columns to be stacked as a single\n        numpy array as the labels. It is searched under the key labels, features\n        and transformed features. The desired format is [left bounadary, top\n        boudnary, right boundary, bottom boundary, class id]. e.g. ['xmin',\n        'ymin', 'xmax', 'ymax', 'class_id']\n      predictions_to_stack: (Optional) Output names for columns to be stacked as\n        a single numpy array as the prediction. It should be the model's output\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/ndcg_test.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/ndcg.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/ndcg.py"
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 28,
                  "endLine": 57,
                  "endColumn": 33,
                  "snippet": {
                    "text": "\n    Args:\n      gain_key: Key of feature in features dictionary that holds gain values.\n      top_k_list: Values for top k. This can also be set using the\n        tfma.MetricsSpec.binarize.top_k_list associated with the metric.\n      name: Metric name.\n    \"\"\"\n",
                    "rendered": {
                      "text": "\n    Args:\n      gain_key: Key of feature in features dictionary that holds gain values.\n      top_k_list: Values for top k. This can also be set using the\n        tfma.MetricsSpec.binarize.top_k_list associated with the metric.\n      name: Metric name.\n    \"\"\"\n",
                      "markdown": "`\n    Args:\n      gain_key: Key of feature in features dictionary that holds gain values.\n      top_k_list: Values for top k. This can also be set using the\n        tfma.MetricsSpec.binarize.top_k_list associated with the metric.\n      name: Metric name.\n    \"\"\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/multi_label_confusion_matrix_plot"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 41,
                  "endLine": 14,
                  "endColumn": 45,
                  "snippet": {
                    "text": "# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\"\"\"Tests for multi-label confusion matrix at thresholds.\"\"\"\n\nfrom absl.testing import parameterized\nimport apache_beam as beam\n",
                    "rendered": {
                      "text": "# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\"\"\"Tests for multi-label confusion matrix at thresholds.\"\"\"\n\nfrom absl.testing import parameterized\nimport apache_beam as beam\n",
                      "markdown": "`# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\"\"\"Tests for multi-label confusion matrix at thresholds.\"\"\"\n\nfrom absl.testing import parameterized\nimport apache_beam as beam\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/multi_label_confusion_matrix_plot"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/evaluators/keras_util.py"
                },
                "region": {
                  "startLine": 230,
                  "startColumn": 11,
                  "endLine": 230,
                  "endColumn": 15,
                  "snippet": {
                    "text": "    self._update_state(accumulator)\n    # For metrics stored with the model, the outputs get encoded in the\n    # metric names so we will use a single output for the weights and parse the\n    # names at the end to separate metrics by output.\n    for metric_index, metric in enumerate(self._metrics()):\n      accumulator.add_weights(0, metric_index, metric.get_weights())\n    accumulator.clear_inputs()\n",
                    "rendered": {
                      "text": "    self._update_state(accumulator)\n    # For metrics stored with the model, the outputs get encoded in the\n    # metric names so we will use a single output for the weights and parse the\n    # names at the end to separate metrics by output.\n    for metric_index, metric in enumerate(self._metrics()):\n      accumulator.add_weights(0, metric_index, metric.get_weights())\n    accumulator.clear_inputs()\n",
                      "markdown": "`    self._update_state(accumulator)\n    # For metrics stored with the model, the outputs get encoded in the\n    # metric names so we will use a single output for the weights and parse the\n    # names at the end to separate metrics by output.\n    for metric_index, metric in enumerate(self._metrics()):\n      accumulator.add_weights(0, metric_index, metric.get_weights())\n    accumulator.clear_inputs()\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/evaluators/keras_util.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/evaluators/jackknife_test.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/evaluators/jackknife.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/evaluators/evaluator_test.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/evaluators/evaluator.py"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 66,
                  "endLine": 38,
                  "endColumn": 70,
                  "snippet": {
                    "text": "        ('ptransform', beam.PTransform)\n    ])\n\n# An Evaluation represents the output from evaluating the Extracts at a\n# particular point in the pipeline. The evaluation outputs are keyed by their\n# associated output type. For example, the serialized protos from evaluating\n# metrics and plots might be stored under \"metrics\" and \"plots\" respectively.\n",
                    "rendered": {
                      "text": "        ('ptransform', beam.PTransform)\n    ])\n\n# An Evaluation represents the output from evaluating the Extracts at a\n# particular point in the pipeline. The evaluation outputs are keyed by their\n# associated output type. For example, the serialized protos from evaluating\n# metrics and plots might be stored under \"metrics\" and \"plots\" respectively.\n",
                      "markdown": "`        ('ptransform', beam.PTransform)\n    ])\n\n# An Evaluation represents the output from evaluating the Extracts at a\n# particular point in the pipeline. The evaluation outputs are keyed by their\n# associated output type. For example, the serialized protos from evaluating\n# metrics and plots might be stored under \"metrics\" and \"plots\" respectively.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/evaluators/evaluator.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/evaluators/eval_saved_model_util_test.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/evaluators/eval_saved_model_util.py"
                },
                "region": {
                  "startLine": 198,
                  "startColumn": 30,
                  "endLine": 198,
                  "endColumn": 38,
                  "snippet": {
                    "text": "  def _maybe_do_batch(self,\n                      accumulator: _AggState,\n                      force: bool = False) -> None:\n    \"\"\"Maybe intro metrics and update accumulator in place.\n\n    Checks if accumulator has enough FPLs for a batch, and if so, does the\n    intro metrics for the batch and updates accumulator in place.\n",
                    "rendered": {
                      "text": "  def _maybe_do_batch(self,\n                      accumulator: _AggState,\n                      force: bool = False) -> None:\n    \"\"\"Maybe intro metrics and update accumulator in place.\n\n    Checks if accumulator has enough FPLs for a batch, and if so, does the\n    intro metrics for the batch and updates accumulator in place.\n",
                      "markdown": "`  def _maybe_do_batch(self,\n                      accumulator: _AggState,\n                      force: bool = False) -> None:\n    \"\"\"Maybe intro metrics and update accumulator in place.\n\n    Checks if accumulator has enough FPLs for a batch, and if so, does the\n    intro metrics for the batch and updates accumulator in place.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/evaluators/eval_saved_model_util.py"
                },
                "region": {
                  "startLine": 168,
                  "startColumn": 43,
                  "endLine": 168,
                  "endColumn": 47,
                  "snippet": {
                    "text": "  partial reduction (intro metrics), and actual combining, all in one.\n\n  We do this by accumulating FeaturesPredictionsLabels in the combine state\n  until we accumulate a large enough batch, at which point we send them\n  through the \"intro metrics\" step. When merging, we merge the metric variables\n  and accumulate FeaturesPredictionsLabels accordingly. We do one final\n  \"intro metrics\" and merge step before producing the final output value.\n",
                    "rendered": {
                      "text": "  partial reduction (intro metrics), and actual combining, all in one.\n\n  We do this by accumulating FeaturesPredictionsLabels in the combine state\n  until we accumulate a large enough batch, at which point we send them\n  through the \"intro metrics\" step. When merging, we merge the metric variables\n  and accumulate FeaturesPredictionsLabels accordingly. We do one final\n  \"intro metrics\" and merge step before producing the final output value.\n",
                      "markdown": "`  partial reduction (intro metrics), and actual combining, all in one.\n\n  We do this by accumulating FeaturesPredictionsLabels in the combine state\n  until we accumulate a large enough batch, at which point we send them\n  through the \"intro metrics\" step. When merging, we merge the metric variables\n  and accumulate FeaturesPredictionsLabels accordingly. We do one final\n  \"intro metrics\" and merge step before producing the final output value.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/evaluators/eval_saved_model_util.py"
                },
                "region": {
                  "startLine": 72,
                  "startColumn": 42,
                  "endLine": 72,
                  "endColumn": 46,
                  "snippet": {
                    "text": "  \"\"\"Returns metrics grouped by output name.\"\"\"\n  # If an output (head) name is used in an estimator, the metric names are of\n  # the form \"<metric_name>/<head>\". This code checks for the existence of a '/'\n  # where the trailing suffix is shared by at least three metrics. This\n  # seemingly random choice of three was choose to avoid standard cases such as\n  # 'label/mean' and 'prediction/mean' that are used by estimators but are not\n  # indicative of a multi-headed model.\n",
                    "rendered": {
                      "text": "  \"\"\"Returns metrics grouped by output name.\"\"\"\n  # If an output (head) name is used in an estimator, the metric names are of\n  # the form \"<metric_name>/<head>\". This code checks for the existence of a '/'\n  # where the trailing suffix is shared by at least three metrics. This\n  # seemingly random choice of three was choose to avoid standard cases such as\n  # 'label/mean' and 'prediction/mean' that are used by estimators but are not\n  # indicative of a multi-headed model.\n",
                      "markdown": "`  \"\"\"Returns metrics grouped by output name.\"\"\"\n  # If an output (head) name is used in an estimator, the metric names are of\n  # the form \"<metric_name>/<head>\". This code checks for the existence of a '/'\n  # where the trailing suffix is shared by at least three metrics. This\n  # seemingly random choice of three was choose to avoid standard cases such as\n  # 'label/mean' and 'prediction/mean' that are used by estimators but are not\n  # indicative of a multi-headed model.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/evaluators/eval_saved_model_util.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/evaluators/counter_util_test.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/eval_saved_model/example_trainers/linear_"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/eval_saved_model/example_trainers/linear_"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/eval_saved_model/example_trainers/linear_"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/eval_saved_model/example_trainers/fixed_p"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/api/types.py"
                },
                "region": {
                  "startLine": 485,
                  "startColumn": 49,
                  "endLine": 485,
                  "endColumn": 53,
                  "snippet": {
                    "text": "    example_weight_key: Example weight key (single-output model) or dict of\n      example weight keys (multi-output model) keyed by output_name.\n    additional_fetches: Prefixes of additional tensors stored in\n      signature_def.inputs that should be fetched at prediction time. The\n      \"features\" and \"labels\" tensors are handled automatically and should not\n      be included in this list.\n    model_loader: Model loader.\n",
                    "rendered": {
                      "text": "    example_weight_key: Example weight key (single-output model) or dict of\n      example weight keys (multi-output model) keyed by output_name.\n    additional_fetches: Prefixes of additional tensors stored in\n      signature_def.inputs that should be fetched at prediction time. The\n      \"features\" and \"labels\" tensors are handled automatically and should not\n      be included in this list.\n    model_loader: Model loader.\n",
                      "markdown": "`    example_weight_key: Example weight key (single-output model) or dict of\n      example weight keys (multi-output model) keyed by output_name.\n    additional_fetches: Prefixes of additional tensors stored in\n      signature_def.inputs that should be fetched at prediction time. The\n      \"features\" and \"labels\" tensors are handled automatically and should not\n      be included in this list.\n    model_loader: Model loader.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/api/types.py"
                },
                "region": {
                  "startLine": 215,
                  "startColumn": 37,
                  "endLine": 215,
                  "endColumn": 46,
                  "snippet": {
                    "text": "class StructuredMetricValue(abc.ABC):\n  \"\"\"The base class for all structured metrics used within TFMA.\n\n  This class allows custom metrics to control how proto serialization happens,\n  and how to handle basic algebraic operations used in computing confidence\n  intervals and model diffs. By implementing the _apply_binary_op methods,\n  subclasses can then be treated like primitive numeric types.\n",
                    "rendered": {
                      "text": "class StructuredMetricValue(abc.ABC):\n  \"\"\"The base class for all structured metrics used within TFMA.\n\n  This class allows custom metrics to control how proto serialization happens,\n  and how to handle basic algebraic operations used in computing confidence\n  intervals and model diffs. By implementing the _apply_binary_op methods,\n  subclasses can then be treated like primitive numeric types.\n",
                      "markdown": "`class StructuredMetricValue(abc.ABC):\n  \"\"\"The base class for all structured metrics used within TFMA.\n\n  This class allows custom metrics to control how proto serialization happens,\n  and how to handle basic algebraic operations used in computing confidence\n  intervals and model diffs. By implementing the _apply_binary_op methods,\n  subclasses can then be treated like primitive numeric types.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/api/types.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/api/types.py"
                },
                "region": {
                  "startLine": 492,
                  "startColumn": 29,
                  "endLine": 492,
                  "endColumn": 35,
                  "snippet": {
                    "text": "    model_name: Model name (should align with ModelSpecs.name).\n    model_type: Model type (tfma.TF_KERAS, tfma.TF_LITE, tfma.TF_ESTIMATOR, ..).\n    rubber_stamp: True if this model is being rubber stamped. When a\n      model is rubber stamped diff thresholds will be ignored if an associated\n      baseline model is not passed.\n    is_baseline: The model is the baseline for comparison or not.\n    resource_hints: The beam resource hints to apply to the PTransform which\n",
                    "rendered": {
                      "text": "    model_name: Model name (should align with ModelSpecs.name).\n    model_type: Model type (tfma.TF_KERAS, tfma.TF_LITE, tfma.TF_ESTIMATOR, ..).\n    rubber_stamp: True if this model is being rubber stamped. When a\n      model is rubber stamped diff thresholds will be ignored if an associated\n      baseline model is not passed.\n    is_baseline: The model is the baseline for comparison or not.\n    resource_hints: The beam resource hints to apply to the PTransform which\n",
                      "markdown": "`    model_name: Model name (should align with ModelSpecs.name).\n    model_type: Model type (tfma.TF_KERAS, tfma.TF_LITE, tfma.TF_ESTIMATOR, ..).\n    rubber_stamp: True if this model is being rubber stamped. When a\n      model is rubber stamped diff thresholds will be ignored if an associated\n      baseline model is not passed.\n    is_baseline: The model is the baseline for comparison or not.\n    resource_hints: The beam resource hints to apply to the PTransform which\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/api/types.py"
                },
                "region": {
                  "startLine": 436,
                  "startColumn": 50,
                  "endLine": 436,
                  "endColumn": 56,
                  "snippet": {
                    "text": "  def _construct_fn_with_load_time(\n      self, model_load_time_callback: Callable[[int],\n                                               None]) -> Callable[[], Any]:\n    \"\"\"Wraps actual construct fn to allow for load time metrics.\"\"\"\n\n    def with_load_times():\n      start_time = datetime.datetime.now()\n",
                    "rendered": {
                      "text": "  def _construct_fn_with_load_time(\n      self, model_load_time_callback: Callable[[int],\n                                               None]) -> Callable[[], Any]:\n    \"\"\"Wraps actual construct fn to allow for load time metrics.\"\"\"\n\n    def with_load_times():\n      start_time = datetime.datetime.now()\n",
                      "markdown": "`  def _construct_fn_with_load_time(\n      self, model_load_time_callback: Callable[[int],\n                                               None]) -> Callable[[], Any]:\n    \"\"\"Wraps actual construct fn to allow for load time metrics.\"\"\"\n\n    def with_load_times():\n      start_time = datetime.datetime.now()\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/api/types.py"
                },
                "region": {
                  "startLine": 231,
                  "startColumn": 68,
                  "endLine": 232,
                  "snippet": {
                    "text": "      op: Callable[[float, float], float]) -> ConcreteStructuredMetricValue:\n    \"\"\"Applies the binary operator elementwise on self and `other`.\n\n    Given two structures of the same type, this function's job is to find\n    corresponding pairs of elements within both structures, invoke `op` on each\n    pair, and store the result in a corresponding location within a new\n    structure. For example, to implement for a list, this function could be\n    implemented as:\n",
                    "rendered": {
                      "text": "      op: Callable[[float, float], float]) -> ConcreteStructuredMetricValue:\n    \"\"\"Applies the binary operator elementwise on self and `other`.\n\n    Given two structures of the same type, this function's job is to find\n    corresponding pairs of elements within both structures, invoke `op` on each\n    pair, and store the result in a corresponding location within a new\n    structure. For example, to implement for a list, this function could be\n    implemented as:\n",
                      "markdown": "`      op: Callable[[float, float], float]) -> ConcreteStructuredMetricValue:\n    \"\"\"Applies the binary operator elementwise on self and `other`.\n\n    Given two structures of the same type, this function's job is to find\n    corresponding pairs of elements within both structures, invoke `op` on each\n    pair, and store the result in a corresponding location within a new\n    structure. For example, to implement for a list, this function could be\n    implemented as:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/view/__init__.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/version.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/validators/validator.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/validators/__init__.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/utils/util_test.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/utils/util.py"
                },
                "region": {
                  "startLine": 959,
                  "startColumn": 47,
                  "endLine": 959,
                  "endColumn": 55,
                  "snippet": {
                    "text": "        if key not in parent:\n          parent[key] = {}\n        parent = parent[key]\n      # In order avoid losing type information, expand the dims if values shape\n      # is (n,). For example, np.array([a, ...]) will become np.array([[a], ...)\n      # Without this step, to_tensor_value would be passed 'a' instead of\n      # np.array([a]) and a new np.array with default dtype would be created.\n",
                    "rendered": {
                      "text": "        if key not in parent:\n          parent[key] = {}\n        parent = parent[key]\n      # In order avoid losing type information, expand the dims if values shape\n      # is (n,). For example, np.array([a, ...]) will become np.array([[a], ...)\n      # Without this step, to_tensor_value would be passed 'a' instead of\n      # np.array([a]) and a new np.array with default dtype would be created.\n",
                      "markdown": "`        if key not in parent:\n          parent[key] = {}\n        parent = parent[key]\n      # In order avoid losing type information, expand the dims if values shape\n      # is (n,). For example, np.array([a, ...]) will become np.array([[a], ...)\n      # Without this step, to_tensor_value would be passed 'a' instead of\n      # np.array([a]) and a new np.array with default dtype would be created.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/utils/util.py"
                },
                "region": {
                  "startLine": 808,
                  "startColumn": 21,
                  "endLine": 808,
                  "endColumn": 25,
                  "snippet": {
                    "text": "\n    Args:\n     target: The extract to store all merged all the data.\n     index: The index at which the value should be stored. It is in accordance\n       with the order of extracts in the batch.\n     key: The key of the key-value pair to store in the target.\n     value: The value of the key-value pair to store in the target.\n",
                    "rendered": {
                      "text": "\n    Args:\n     target: The extract to store all merged all the data.\n     index: The index at which the value should be stored. It is in accordance\n       with the order of extracts in the batch.\n     key: The key of the key-value pair to store in the target.\n     value: The value of the key-value pair to store in the target.\n",
                      "markdown": "`\n    Args:\n     target: The extract to store all merged all the data.\n     index: The index at which the value should be stored. It is in accordance\n       with the order of extracts in the batch.\n     key: The key of the key-value pair to store in the target.\n     value: The value of the key-value pair to store in the target.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/utils/util.py"
                },
                "region": {
                  "startLine": 549,
                  "startColumn": 56,
                  "endLine": 549,
                  "endColumn": 60,
                  "snippet": {
                    "text": "                 value: Any) -> None:\n  \"\"\"Sets value under the given key path in (possibly multi-level) dict.\"\"\"\n  if not keys:\n    raise ValueError('_set_by_keys() must be called with at least one key.')\n  if not isinstance(root, MutableMapping):\n    raise ValueError(f'Cannot set keys ({keys}) on a non-mapping root. This '\n                     'can happen when a value was previously set for a prefix '\n",
                    "rendered": {
                      "text": "                 value: Any) -> None:\n  \"\"\"Sets value under the given key path in (possibly multi-level) dict.\"\"\"\n  if not keys:\n    raise ValueError('_set_by_keys() must be called with at least one key.')\n  if not isinstance(root, MutableMapping):\n    raise ValueError(f'Cannot set keys ({keys}) on a non-mapping root. This '\n                     'can happen when a value was previously set for a prefix '\n",
                      "markdown": "`                 value: Any) -> None:\n  \"\"\"Sets value under the given key path in (possibly multi-level) dict.\"\"\"\n  if not keys:\n    raise ValueError('_set_by_keys() must be called with at least one key.')\n  if not isinstance(root, MutableMapping):\n    raise ValueError(f'Cannot set keys ({keys}) on a non-mapping root. This '\n                     'can happen when a value was previously set for a prefix '\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/utils/util.py"
                },
                "region": {
                  "startLine": 207,
                  "startColumn": 59,
                  "endLine": 207,
                  "endColumn": 63,
                  "snippet": {
                    "text": "      if (isinstance(specs, tf.TypeSpec) and\n          not specs.is_compatible_with(tensor)):\n        logging.warning(\n            'Tensor %s is not compatible with %s \\n\\nFailed at key %s in %s '\n            'and specs %s', tensor, specs, keys, all_values, all_specs)\n      return tensor\n\n",
                    "rendered": {
                      "text": "      if (isinstance(specs, tf.TypeSpec) and\n          not specs.is_compatible_with(tensor)):\n        logging.warning(\n            'Tensor %s is not compatible with %s \\n\\nFailed at key %s in %s '\n            'and specs %s', tensor, specs, keys, all_values, all_specs)\n      return tensor\n\n",
                      "markdown": "`      if (isinstance(specs, tf.TypeSpec) and\n          not specs.is_compatible_with(tensor)):\n        logging.warning(\n            'Tensor %s is not compatible with %s \\n\\nFailed at key %s in %s '\n            'and specs %s', tensor, specs, keys, all_values, all_specs)\n      return tensor\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/utils/util.py"
                },
                "region": {
                  "startLine": 190,
                  "startColumn": 22,
                  "endLine": 190,
                  "endColumn": 26,
                  "snippet": {
                    "text": "        if key not in values:\n          raise ValueError(\n              f'Tensor value for {key} not found in {values}: \\n\\n'\n              f'Failed at key {keys} in {all_values} and specs {all_specs}')\n        result[key] = to_tensors(values[key], specs[key] if specs else None,\n                                 keys + [key])\n      return (\n",
                    "rendered": {
                      "text": "        if key not in values:\n          raise ValueError(\n              f'Tensor value for {key} not found in {values}: \\n\\n'\n              f'Failed at key {keys} in {all_values} and specs {all_specs}')\n        result[key] = to_tensors(values[key], specs[key] if specs else None,\n                                 keys + [key])\n      return (\n",
                      "markdown": "`        if key not in values:\n          raise ValueError(\n              f'Tensor value for {key} not found in {values}: \\n\\n'\n              f'Failed at key {keys} in {all_values} and specs {all_specs}')\n        result[key] = to_tensors(values[key], specs[key] if specs else None,\n                                 keys + [key])\n      return (\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/utils/util.py"
                },
                "region": {
                  "startLine": 182,
                  "startColumn": 18,
                  "endLine": 182,
                  "endColumn": 22,
                  "snippet": {
                    "text": "         (not isinstance(specs, Mapping) and isinstance(values, Mapping)))):\n      raise ValueError(\n          f'incompatible types: values = {values} and specs = {specs} \\n\\n'\n          f'Failed at key {keys} in {all_values} and specs {all_specs}')\n\n    if isinstance(values, Mapping):\n      result = {}\n",
                    "rendered": {
                      "text": "         (not isinstance(specs, Mapping) and isinstance(values, Mapping)))):\n      raise ValueError(\n          f'incompatible types: values = {values} and specs = {specs} \\n\\n'\n          f'Failed at key {keys} in {all_values} and specs {all_specs}')\n\n    if isinstance(values, Mapping):\n      result = {}\n",
                      "markdown": "`         (not isinstance(specs, Mapping) and isinstance(values, Mapping)))):\n      raise ValueError(\n          f'incompatible types: values = {values} and specs = {specs} \\n\\n'\n          f'Failed at key {keys} in {all_values} and specs {all_specs}')\n\n    if isinstance(values, Mapping):\n      result = {}\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/utils/util.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/utils/util.py"
                },
                "region": {
                  "startLine": 959,
                  "startColumn": 47,
                  "endLine": 959,
                  "endColumn": 55,
                  "snippet": {
                    "text": "        if key not in parent:\n          parent[key] = {}\n        parent = parent[key]\n      # In order avoid losing type information, expand the dims if values shape\n      # is (n,). For example, np.array([a, ...]) will become np.array([[a], ...)\n      # Without this step, to_tensor_value would be passed 'a' instead of\n      # np.array([a]) and a new np.array with default dtype would be created.\n",
                    "rendered": {
                      "text": "        if key not in parent:\n          parent[key] = {}\n        parent = parent[key]\n      # In order avoid losing type information, expand the dims if values shape\n      # is (n,). For example, np.array([a, ...]) will become np.array([[a], ...)\n      # Without this step, to_tensor_value would be passed 'a' instead of\n      # np.array([a]) and a new np.array with default dtype would be created.\n",
                      "markdown": "`        if key not in parent:\n          parent[key] = {}\n        parent = parent[key]\n      # In order avoid losing type information, expand the dims if values shape\n      # is (n,). For example, np.array([a, ...]) will become np.array([[a], ...)\n      # Without this step, to_tensor_value would be passed 'a' instead of\n      # np.array([a]) and a new np.array with default dtype would be created.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/utils/util.py"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 34,
                  "endLine": 42,
                  "endColumn": 39,
                  "snippet": {
                    "text": "KEY_SEPARATOR = '__'\n# Suffix for keys representing the top k keys associated with a sparse item.\nKEYS_SUFFIX = 'keys'\n# Suffix for keys representing the top k values associated with a sparse item.\nVALUES_SUFFIX = 'values'\n\n\n",
                    "rendered": {
                      "text": "KEY_SEPARATOR = '__'\n# Suffix for keys representing the top k keys associated with a sparse item.\nKEYS_SUFFIX = 'keys'\n# Suffix for keys representing the top k values associated with a sparse item.\nVALUES_SUFFIX = 'values'\n\n\n",
                      "markdown": "`KEY_SEPARATOR = '__'\n# Suffix for keys representing the top k keys associated with a sparse item.\nKEYS_SUFFIX = 'keys'\n# Suffix for keys representing the top k values associated with a sparse item.\nVALUES_SUFFIX = 'values'\n\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/utils/util.py"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 34,
                  "endLine": 40,
                  "endColumn": 39,
                  "snippet": {
                    "text": "# output gets written to a table backed by a proto based schema which limits the\n# characters that can be used to [a-zA-Z_].\nKEY_SEPARATOR = '__'\n# Suffix for keys representing the top k keys associated with a sparse item.\nKEYS_SUFFIX = 'keys'\n# Suffix for keys representing the top k values associated with a sparse item.\nVALUES_SUFFIX = 'values'\n",
                    "rendered": {
                      "text": "# output gets written to a table backed by a proto based schema which limits the\n# characters that can be used to [a-zA-Z_].\nKEY_SEPARATOR = '__'\n# Suffix for keys representing the top k keys associated with a sparse item.\nKEYS_SUFFIX = 'keys'\n# Suffix for keys representing the top k values associated with a sparse item.\nVALUES_SUFFIX = 'values'\n",
                      "markdown": "`# output gets written to a table backed by a proto based schema which limits the\n# characters that can be used to [a-zA-Z_].\nKEY_SEPARATOR = '__'\n# Suffix for keys representing the top k keys associated with a sparse item.\nKEYS_SUFFIX = 'keys'\n# Suffix for keys representing the top k values associated with a sparse item.\nVALUES_SUFFIX = 'values'\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/utils/size_estimator_test.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/utils/size_estimator.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/preprocessors/set_match_preproces"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/preprocessors/object_detection_pr"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 11,
                  "endLine": 29,
                  "endColumn": 15,
                  "snippet": {
                    "text": "\n# This is a binary classification case, the iou matrix should be:\n# [[0.5, 1., 0.], [7 / 87, 2 / 9, 0.]]\n# The match at iou_threshold = 0.5 is\n# gt_matches: [[0, -1]] dt_matches: [[0, -1, -1]]\n_BOXMATCH_CASE1_BINARY = util.StandardExtracts({\n    constants.LABELS_KEY:\n",
                    "rendered": {
                      "text": "\n# This is a binary classification case, the iou matrix should be:\n# [[0.5, 1., 0.], [7 / 87, 2 / 9, 0.]]\n# The match at iou_threshold = 0.5 is\n# gt_matches: [[0, -1]] dt_matches: [[0, -1, -1]]\n_BOXMATCH_CASE1_BINARY = util.StandardExtracts({\n    constants.LABELS_KEY:\n",
                      "markdown": "`\n# This is a binary classification case, the iou matrix should be:\n# [[0.5, 1., 0.], [7 / 87, 2 / 9, 0.]]\n# The match at iou_threshold = 0.5 is\n# gt_matches: [[0, -1]] dt_matches: [[0, -1, -1]]\n_BOXMATCH_CASE1_BINARY = util.StandardExtracts({\n    constants.LABELS_KEY:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/preprocessors/object_detection_pr"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/preprocessors/object_detection_pr"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/preprocessors/object_detection_pr"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 53,
                  "endLine": 77,
                  "endColumn": 58,
                  "snippet": {
                    "text": "        'ymin', 'xmax', 'ymax', 'class_id']\n      predictions_to_stack: (Optional) Keys for columns to be stacked as a\n        single numpy array as the prediction. It should be the model's output\n        names. The desired format is [left bounadary, top boudnary, right\n        boundary, bottom boundary, class id, confidence score]. e.g. ['xmin',\n        'ymin', 'xmax', 'ymax', 'class_id', 'scores']\n      num_detections_key: (Optional) Number of detections in each column except\n",
                    "rendered": {
                      "text": "        'ymin', 'xmax', 'ymax', 'class_id']\n      predictions_to_stack: (Optional) Keys for columns to be stacked as a\n        single numpy array as the prediction. It should be the model's output\n        names. The desired format is [left bounadary, top boudnary, right\n        boundary, bottom boundary, class id, confidence score]. e.g. ['xmin',\n        'ymin', 'xmax', 'ymax', 'class_id', 'scores']\n      num_detections_key: (Optional) Number of detections in each column except\n",
                      "markdown": "`        'ymin', 'xmax', 'ymax', 'class_id']\n      predictions_to_stack: (Optional) Keys for columns to be stacked as a\n        single numpy array as the prediction. It should be the model's output\n        names. The desired format is [left bounadary, top boudnary, right\n        boundary, bottom boundary, class id, confidence score]. e.g. ['xmin',\n        'ymin', 'xmax', 'ymax', 'class_id', 'scores']\n      num_detections_key: (Optional) Number of detections in each column except\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/preprocessors/object_detection_pr"
                },
                "region": {
                  "startLine": 72,
                  "startColumn": 72,
                  "endLine": 73,
                  "snippet": {
                    "text": "      name: (Optional) name for the preprocessor.\n      labels_to_stack: (Optional) Keys for columns to be stacked as a single\n        numpy array as the labels. It is searched under the key labels, features\n        and transformed features. The desired format is [left bounadary, top\n        boudnary, right boundary, bottom boundary, class id]. e.g. ['xmin',\n        'ymin', 'xmax', 'ymax', 'class_id']\n      predictions_to_stack: (Optional) Keys for columns to be stacked as a\n        single numpy array as the prediction. It should be the model's output\n",
                    "rendered": {
                      "text": "      name: (Optional) name for the preprocessor.\n      labels_to_stack: (Optional) Keys for columns to be stacked as a single\n        numpy array as the labels. It is searched under the key labels, features\n        and transformed features. The desired format is [left bounadary, top\n        boudnary, right boundary, bottom boundary, class id]. e.g. ['xmin',\n        'ymin', 'xmax', 'ymax', 'class_id']\n      predictions_to_stack: (Optional) Keys for columns to be stacked as a\n        single numpy array as the prediction. It should be the model's output\n",
                      "markdown": "`      name: (Optional) name for the preprocessor.\n      labels_to_stack: (Optional) Keys for columns to be stacked as a single\n        numpy array as the labels. It is searched under the key labels, features\n        and transformed features. The desired format is [left bounadary, top\n        boudnary, right boundary, bottom boundary, class id]. e.g. ['xmin',\n        'ymin', 'xmax', 'ymax', 'class_id']\n      predictions_to_stack: (Optional) Keys for columns to be stacked as a\n        single numpy array as the prediction. It should be the model's output\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/preprocessors/image_preprocessors"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/preprocessors/image_preprocessors"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/preprocessors/__init__.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/prediction_difference_metrics_tes"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/prediction_difference_metrics.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/prediction_difference_metrics.py"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 52,
                  "endLine": 30,
                  "endColumn": 58,
                  "snippet": {
                    "text": "\n\nclass SymmetricPredictionDifference(metric_types.Metric):\n  \"\"\"PredictionDifference computes the avg pointwise diff between models.\"\"\"\n\n  def __init__(self, name: str = SYMMETRIC_PREDICITON_DIFFERENCE_NAME):\n    \"\"\"Initializes PredictionDifference metric.\n",
                    "rendered": {
                      "text": "\n\nclass SymmetricPredictionDifference(metric_types.Metric):\n  \"\"\"PredictionDifference computes the avg pointwise diff between models.\"\"\"\n\n  def __init__(self, name: str = SYMMETRIC_PREDICITON_DIFFERENCE_NAME):\n    \"\"\"Initializes PredictionDifference metric.\n",
                      "markdown": "`\n\nclass SymmetricPredictionDifference(metric_types.Metric):\n  \"\"\"PredictionDifference computes the avg pointwise diff between models.\"\"\"\n\n  def __init__(self, name: str = SYMMETRIC_PREDICITON_DIFFERENCE_NAME):\n    \"\"\"Initializes PredictionDifference metric.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/object_detection_metrics_test.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/extractors/legacy_meta_feature_extractor."
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 21,
                  "endLine": 54,
                  "endColumn": 26,
                  "snippet": {
                    "text": "\ndef get_fpl_copy(extracts: types.Extracts) -> types.FeaturesPredictionsLabels:\n  \"\"\"Get a copy of the FPL in the extracts of extracts.\"\"\"\n  fpl_orig = extracts.get(constants.FEATURES_PREDICTIONS_LABELS_KEY)\n  if not fpl_orig:\n    raise RuntimeError('FPL missing, Please ensure _Predict() was called.')\n\n",
                    "rendered": {
                      "text": "\ndef get_fpl_copy(extracts: types.Extracts) -> types.FeaturesPredictionsLabels:\n  \"\"\"Get a copy of the FPL in the extracts of extracts.\"\"\"\n  fpl_orig = extracts.get(constants.FEATURES_PREDICTIONS_LABELS_KEY)\n  if not fpl_orig:\n    raise RuntimeError('FPL missing, Please ensure _Predict() was called.')\n\n",
                      "markdown": "`\ndef get_fpl_copy(extracts: types.Extracts) -> types.FeaturesPredictionsLabels:\n  \"\"\"Get a copy of the FPL in the extracts of extracts.\"\"\"\n  fpl_orig = extracts.get(constants.FEATURES_PREDICTIONS_LABELS_KEY)\n  if not fpl_orig:\n    raise RuntimeError('FPL missing, Please ensure _Predict() was called.')\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/extractors/legacy_meta_feature_extractor."
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/extractors/legacy_input_extractor_test.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/extractors/legacy_input_extractor.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/extractors/legacy_feature_extractor_test."
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/extractors/legacy_feature_extractor.py"
                },
                "region": {
                  "startLine": 185,
                  "startColumn": 31,
                  "endLine": 185,
                  "endColumn": 36,
                  "snippet": {
                    "text": "    # pytype: enable=attribute-error\n    return result\n  elif source == constants.INPUT_KEY:\n    serialized_example = result.get(constants.INPUT_KEY)\n    if not serialized_example:\n      raise RuntimeError('tf.Example missing. Ensure extracts contain '\n                         'serialized tf.Example.')\n",
                    "rendered": {
                      "text": "    # pytype: enable=attribute-error\n    return result\n  elif source == constants.INPUT_KEY:\n    serialized_example = result.get(constants.INPUT_KEY)\n    if not serialized_example:\n      raise RuntimeError('tf.Example missing. Ensure extracts contain '\n                         'serialized tf.Example.')\n",
                      "markdown": "`    # pytype: enable=attribute-error\n    return result\n  elif source == constants.INPUT_KEY:\n    serialized_example = result.get(constants.INPUT_KEY)\n    if not serialized_example:\n      raise RuntimeError('tf.Example missing. Ensure extracts contain '\n                         'serialized tf.Example.')\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/extractors/legacy_feature_extractor.py"
                },
                "region": {
                  "startLine": 166,
                  "startColumn": 16,
                  "endLine": 166,
                  "endColumn": 21,
                  "snippet": {
                    "text": "        _AugmentExtracts(result[key], key, excludes, result)\n\n  if source == constants.FEATURES_PREDICTIONS_LABELS_KEY:\n    fpl = result.get(constants.FEATURES_PREDICTIONS_LABELS_KEY)\n    if not fpl:\n      raise RuntimeError('FPL missing. Ensure PredictExtractor was called.')\n\n",
                    "rendered": {
                      "text": "        _AugmentExtracts(result[key], key, excludes, result)\n\n  if source == constants.FEATURES_PREDICTIONS_LABELS_KEY:\n    fpl = result.get(constants.FEATURES_PREDICTIONS_LABELS_KEY)\n    if not fpl:\n      raise RuntimeError('FPL missing. Ensure PredictExtractor was called.')\n\n",
                      "markdown": "`        _AugmentExtracts(result[key], key, excludes, result)\n\n  if source == constants.FEATURES_PREDICTIONS_LABELS_KEY:\n    fpl = result.get(constants.FEATURES_PREDICTIONS_LABELS_KEY)\n    if not fpl:\n      raise RuntimeError('FPL missing. Ensure PredictExtractor was called.')\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/extractors/legacy_feature_extractor.py"
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 15,
                  "endLine": 70,
                  "endColumn": 20,
                  "snippet": {
                    "text": "    # If data originated from FeaturesPredictionsLabels, then the value will be\n    # stored under a 'node' key.\n    if isinstance(val, dict) and encoding.NODE_SUFFIX in val:\n      val = val.get(encoding.NODE_SUFFIX)\n\n    if name in (prefix, util.KEY_SEPARATOR + prefix):\n      col_name = prefix\n",
                    "rendered": {
                      "text": "    # If data originated from FeaturesPredictionsLabels, then the value will be\n    # stored under a 'node' key.\n    if isinstance(val, dict) and encoding.NODE_SUFFIX in val:\n      val = val.get(encoding.NODE_SUFFIX)\n\n    if name in (prefix, util.KEY_SEPARATOR + prefix):\n      col_name = prefix\n",
                      "markdown": "`    # If data originated from FeaturesPredictionsLabels, then the value will be\n    # stored under a 'node' key.\n    if isinstance(val, dict) and encoding.NODE_SUFFIX in val:\n      val = val.get(encoding.NODE_SUFFIX)\n\n    if name in (prefix, util.KEY_SEPARATOR + prefix):\n      col_name = prefix\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/extractors/legacy_feature_extractor.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/extractors/legacy_feature_extractor.py"
                },
                "region": {
                  "startLine": 76,
                  "startColumn": 40,
                  "endLine": 76,
                  "endColumn": 46,
                  "snippet": {
                    "text": "      col_name = prefix\n    elif prefix not in ('features', 'predictions', 'labels'):\n      # Names used by additional extracts should be properly escaped already so\n      # avoid escaping the name a second time by manually combining the prefix.\n      col_name = prefix + util.KEY_SEPARATOR + name\n    else:\n      col_name = util.compound_key([prefix, name])\n",
                    "rendered": {
                      "text": "      col_name = prefix\n    elif prefix not in ('features', 'predictions', 'labels'):\n      # Names used by additional extracts should be properly escaped already so\n      # avoid escaping the name a second time by manually combining the prefix.\n      col_name = prefix + util.KEY_SEPARATOR + name\n    else:\n      col_name = util.compound_key([prefix, name])\n",
                      "markdown": "`      col_name = prefix\n    elif prefix not in ('features', 'predictions', 'labels'):\n      # Names used by additional extracts should be properly escaped already so\n      # avoid escaping the name a second time by manually combining the prefix.\n      col_name = prefix + util.KEY_SEPARATOR + name\n    else:\n      col_name = util.compound_key([prefix, name])\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/extractors/labels_extractor_test.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/extractors/labels_extractor.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/extractors/inference_base_test.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/eval_saved_model/graph_ref_test.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/eval_saved_model/graph_ref.py"
                },
                "region": {
                  "startLine": 369,
                  "startColumn": 50,
                  "endLine": 369,
                  "endColumn": 55,
                  "snippet": {
                    "text": "  node_lists = []\n  for node_suffix in node_suffixes:\n    collection_def_name = encoding.with_suffix(prefix, node_suffix)\n    collection_def = meta_graph_def.collection_def.get(collection_def_name)\n    if collection_def is None:\n      # If we can't find the CollectionDef, append an empty list.\n      #\n",
                    "rendered": {
                      "text": "  node_lists = []\n  for node_suffix in node_suffixes:\n    collection_def_name = encoding.with_suffix(prefix, node_suffix)\n    collection_def = meta_graph_def.collection_def.get(collection_def_name)\n    if collection_def is None:\n      # If we can't find the CollectionDef, append an empty list.\n      #\n",
                      "markdown": "`  node_lists = []\n  for node_suffix in node_suffixes:\n    collection_def_name = encoding.with_suffix(prefix, node_suffix)\n    collection_def = meta_graph_def.collection_def.get(collection_def_name)\n    if collection_def is None:\n      # If we can't find the CollectionDef, append an empty list.\n      #\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/eval_saved_model/graph_ref.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/eval_saved_model/graph_ref.py"
                },
                "region": {
                  "startLine": 458,
                  "startColumn": 7,
                  "endLine": 458,
                  "endColumn": 13,
                  "snippet": {
                    "text": "     graph: TensorFlow graph to lookup the nodes in.\n\n  Returns:\n    The node in the graph with the name returned by\n    get_node_wrapped_tensor_info.\n  \"\"\"\n  return encoding.decode_tensor_node(\n",
                    "rendered": {
                      "text": "     graph: TensorFlow graph to lookup the nodes in.\n\n  Returns:\n    The node in the graph with the name returned by\n    get_node_wrapped_tensor_info.\n  \"\"\"\n  return encoding.decode_tensor_node(\n",
                      "markdown": "`     graph: TensorFlow graph to lookup the nodes in.\n\n  Returns:\n    The node in the graph with the name returned by\n    get_node_wrapped_tensor_info.\n  \"\"\"\n  return encoding.decode_tensor_node(\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/eval_saved_model/graph_ref.py"
                },
                "region": {
                  "startLine": 454,
                  "startColumn": 48,
                  "endLine": 454,
                  "endColumn": 54,
                  "snippet": {
                    "text": "  Args:\n     meta_graph_def: MetaGraphDef containing the CollectionDefs to extract the\n       node name from.\n     path: Name of the collection containing the node name.\n     graph: TensorFlow graph to lookup the nodes in.\n\n  Returns:\n",
                    "rendered": {
                      "text": "  Args:\n     meta_graph_def: MetaGraphDef containing the CollectionDefs to extract the\n       node name from.\n     path: Name of the collection containing the node name.\n     graph: TensorFlow graph to lookup the nodes in.\n\n  Returns:\n",
                      "markdown": "`  Args:\n     meta_graph_def: MetaGraphDef containing the CollectionDefs to extract the\n       node name from.\n     path: Name of the collection containing the node name.\n     graph: TensorFlow graph to lookup the nodes in.\n\n  Returns:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/eval_saved_model/graph_ref.py"
                },
                "region": {
                  "startLine": 453,
                  "startColumn": 6,
                  "endLine": 453,
                  "endColumn": 12,
                  "snippet": {
                    "text": "\n  Args:\n     meta_graph_def: MetaGraphDef containing the CollectionDefs to extract the\n       node name from.\n     path: Name of the collection containing the node name.\n     graph: TensorFlow graph to lookup the nodes in.\n\n",
                    "rendered": {
                      "text": "\n  Args:\n     meta_graph_def: MetaGraphDef containing the CollectionDefs to extract the\n       node name from.\n     path: Name of the collection containing the node name.\n     graph: TensorFlow graph to lookup the nodes in.\n\n",
                      "markdown": "`\n  Args:\n     meta_graph_def: MetaGraphDef containing the CollectionDefs to extract the\n       node name from.\n     path: Name of the collection containing the node name.\n     graph: TensorFlow graph to lookup the nodes in.\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/eval_saved_model/graph_ref.py"
                },
                "region": {
                  "startLine": 449,
                  "startColumn": 56,
                  "endLine": 449,
                  "endColumn": 62,
                  "snippet": {
                    "text": "\ndef get_node_in_graph(meta_graph_def: meta_graph_pb2.MetaGraphDef, path: str,\n                      graph: tf.Graph) -> types.TensorType:\n  \"\"\"Like get_node_wrapped_tensor_info, but looks up the node in the graph.\n\n  Args:\n     meta_graph_def: MetaGraphDef containing the CollectionDefs to extract the\n",
                    "rendered": {
                      "text": "\ndef get_node_in_graph(meta_graph_def: meta_graph_pb2.MetaGraphDef, path: str,\n                      graph: tf.Graph) -> types.TensorType:\n  \"\"\"Like get_node_wrapped_tensor_info, but looks up the node in the graph.\n\n  Args:\n     meta_graph_def: MetaGraphDef containing the CollectionDefs to extract the\n",
                      "markdown": "`\ndef get_node_in_graph(meta_graph_def: meta_graph_pb2.MetaGraphDef, path: str,\n                      graph: tf.Graph) -> types.TensorType:\n  \"\"\"Like get_node_wrapped_tensor_info, but looks up the node in the graph.\n\n  Args:\n     meta_graph_def: MetaGraphDef containing the CollectionDefs to extract the\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/eval_saved_model/graph_ref.py"
                },
                "region": {
                  "startLine": 438,
                  "startColumn": 29,
                  "endLine": 438,
                  "endColumn": 35,
                  "snippet": {
                    "text": "      not have length 1.\n  \"\"\"\n  if path not in meta_graph_def.collection_def:\n    raise KeyError('could not find path %s in collection defs. meta_graph_def '\n                   'was %s' % (path, meta_graph_def))\n  if len(meta_graph_def.collection_def[path].any_list.value) != 1:\n    raise ValueError(\n",
                    "rendered": {
                      "text": "      not have length 1.\n  \"\"\"\n  if path not in meta_graph_def.collection_def:\n    raise KeyError('could not find path %s in collection defs. meta_graph_def '\n                   'was %s' % (path, meta_graph_def))\n  if len(meta_graph_def.collection_def[path].any_list.value) != 1:\n    raise ValueError(\n",
                      "markdown": "`      not have length 1.\n  \"\"\"\n  if path not in meta_graph_def.collection_def:\n    raise KeyError('could not find path %s in collection defs. meta_graph_def '\n                   'was %s' % (path, meta_graph_def))\n  if len(meta_graph_def.collection_def[path].any_list.value) != 1:\n    raise ValueError(\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/eval_saved_model/graph_ref.py"
                },
                "region": {
                  "startLine": 430,
                  "startColumn": 38,
                  "endLine": 430,
                  "endColumn": 44,
                  "snippet": {
                    "text": "     path: Name of the collection containing the node name.\n\n  Returns:\n    The Any-wrapped TensorInfo for the node retrieved from the CollectionDef.\n\n  Raises:\n    KeyError: There was no CollectionDef with the given name (path).\n",
                    "rendered": {
                      "text": "     path: Name of the collection containing the node name.\n\n  Returns:\n    The Any-wrapped TensorInfo for the node retrieved from the CollectionDef.\n\n  Raises:\n    KeyError: There was no CollectionDef with the given name (path).\n",
                      "markdown": "`     path: Name of the collection containing the node name.\n\n  Returns:\n    The Any-wrapped TensorInfo for the node retrieved from the CollectionDef.\n\n  Raises:\n    KeyError: There was no CollectionDef with the given name (path).\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/eval_saved_model/graph_ref.py"
                },
                "region": {
                  "startLine": 427,
                  "startColumn": 48,
                  "endLine": 427,
                  "endColumn": 54,
                  "snippet": {
                    "text": "  Args:\n     meta_graph_def: MetaGraphDef containing the CollectionDefs to extract the\n       node name from.\n     path: Name of the collection containing the node name.\n\n  Returns:\n    The Any-wrapped TensorInfo for the node retrieved from the CollectionDef.\n",
                    "rendered": {
                      "text": "  Args:\n     meta_graph_def: MetaGraphDef containing the CollectionDefs to extract the\n       node name from.\n     path: Name of the collection containing the node name.\n\n  Returns:\n    The Any-wrapped TensorInfo for the node retrieved from the CollectionDef.\n",
                      "markdown": "`  Args:\n     meta_graph_def: MetaGraphDef containing the CollectionDefs to extract the\n       node name from.\n     path: Name of the collection containing the node name.\n\n  Returns:\n    The Any-wrapped TensorInfo for the node retrieved from the CollectionDef.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/eval_saved_model/graph_ref.py"
                },
                "region": {
                  "startLine": 426,
                  "startColumn": 6,
                  "endLine": 426,
                  "endColumn": 12,
                  "snippet": {
                    "text": "\n  Args:\n     meta_graph_def: MetaGraphDef containing the CollectionDefs to extract the\n       node name from.\n     path: Name of the collection containing the node name.\n\n  Returns:\n",
                    "rendered": {
                      "text": "\n  Args:\n     meta_graph_def: MetaGraphDef containing the CollectionDefs to extract the\n       node name from.\n     path: Name of the collection containing the node name.\n\n  Returns:\n",
                      "markdown": "`\n  Args:\n     meta_graph_def: MetaGraphDef containing the CollectionDefs to extract the\n       node name from.\n     path: Name of the collection containing the node name.\n\n  Returns:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/eval_saved_model/graph_ref.py"
                },
                "region": {
                  "startLine": 422,
                  "startColumn": 43,
                  "endLine": 422,
                  "endColumn": 49,
                  "snippet": {
                    "text": "\ndef get_node_wrapped_tensor_info(meta_graph_def: meta_graph_pb2.MetaGraphDef,\n                                 path: str) -> any_pb2.Any:\n  \"\"\"Get the Any-wrapped TensorInfo for the node from the meta_graph_def.\n\n  Args:\n     meta_graph_def: MetaGraphDef containing the CollectionDefs to extract the\n",
                    "rendered": {
                      "text": "\ndef get_node_wrapped_tensor_info(meta_graph_def: meta_graph_pb2.MetaGraphDef,\n                                 path: str) -> any_pb2.Any:\n  \"\"\"Get the Any-wrapped TensorInfo for the node from the meta_graph_def.\n\n  Args:\n     meta_graph_def: MetaGraphDef containing the CollectionDefs to extract the\n",
                      "markdown": "`\ndef get_node_wrapped_tensor_info(meta_graph_def: meta_graph_pb2.MetaGraphDef,\n                                 path: str) -> any_pb2.Any:\n  \"\"\"Get the Any-wrapped TensorInfo for the node from the meta_graph_def.\n\n  Args:\n     meta_graph_def: MetaGraphDef containing the CollectionDefs to extract the\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/eval_saved_model/graph_ref.py"
                },
                "region": {
                  "startLine": 371,
                  "startColumn": 19,
                  "endLine": 371,
                  "endColumn": 25,
                  "snippet": {
                    "text": "    collection_def_name = encoding.with_suffix(prefix, node_suffix)\n    collection_def = meta_graph_def.collection_def.get(collection_def_name)\n    if collection_def is None:\n      # If we can't find the CollectionDef, append an empty list.\n      #\n      # Either all the CollectionDefs are missing, in which case we correctly\n      # return an empty dict, or some of the CollectionDefs are non-empty,\n",
                    "rendered": {
                      "text": "    collection_def_name = encoding.with_suffix(prefix, node_suffix)\n    collection_def = meta_graph_def.collection_def.get(collection_def_name)\n    if collection_def is None:\n      # If we can't find the CollectionDef, append an empty list.\n      #\n      # Either all the CollectionDefs are missing, in which case we correctly\n      # return an empty dict, or some of the CollectionDefs are non-empty,\n",
                      "markdown": "`    collection_def_name = encoding.with_suffix(prefix, node_suffix)\n    collection_def = meta_graph_def.collection_def.get(collection_def_name)\n    if collection_def is None:\n      # If we can't find the CollectionDef, append an empty list.\n      #\n      # Either all the CollectionDefs are missing, in which case we correctly\n      # return an empty dict, or some of the CollectionDefs are non-empty,\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/eval_saved_model/graph_ref.py"
                },
                "region": {
                  "startLine": 363,
                  "startColumn": 34,
                  "endLine": 363,
                  "endColumn": 40,
                  "snippet": {
                    "text": "    A dictionary of dictionaries, as described in the example above.\n\n  Raises:\n    ValueError: The length of some node list did not match length of the key\n    list.\n  \"\"\"\n  node_lists = []\n",
                    "rendered": {
                      "text": "    A dictionary of dictionaries, as described in the example above.\n\n  Raises:\n    ValueError: The length of some node list did not match length of the key\n    list.\n  \"\"\"\n  node_lists = []\n",
                      "markdown": "`    A dictionary of dictionaries, as described in the example above.\n\n  Raises:\n    ValueError: The length of some node list did not match length of the key\n    list.\n  \"\"\"\n  node_lists = []\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/eval_saved_model/graph_ref.py"
                },
                "region": {
                  "startLine": 324,
                  "startColumn": 8,
                  "endLine": 324,
                  "endColumn": 14,
                  "snippet": {
                    "text": "    meta_graph_def: meta_graph_pb2.MetaGraphDef, prefix: str,\n    node_suffixes: List[str]\n) -> Dict[types.FPLKeyType, Dict[str, CollectionDefValueType]]:\n  \"\"\"Get node map from meta_graph_def.\n\n  This is designed to extract structures of the following form from the\n  meta_graph_def collection_def:\n",
                    "rendered": {
                      "text": "    meta_graph_def: meta_graph_pb2.MetaGraphDef, prefix: str,\n    node_suffixes: List[str]\n) -> Dict[types.FPLKeyType, Dict[str, CollectionDefValueType]]:\n  \"\"\"Get node map from meta_graph_def.\n\n  This is designed to extract structures of the following form from the\n  meta_graph_def collection_def:\n",
                      "markdown": "`    meta_graph_def: meta_graph_pb2.MetaGraphDef, prefix: str,\n    node_suffixes: List[str]\n) -> Dict[types.FPLKeyType, Dict[str, CollectionDefValueType]]:\n  \"\"\"Get node map from meta_graph_def.\n\n  This is designed to extract structures of the following form from the\n  meta_graph_def collection_def:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/eval_saved_model/graph_ref.py"
                },
                "region": {
                  "startLine": 314,
                  "startColumn": 51,
                  "endLine": 315,
                  "snippet": {
                    "text": "      metrics_map[key][encoding.VALUE_OP_SUFFIX] = node\n    elif k.endswith('/' + constants.METRIC_UPDATE_SUFFIX):\n      key = k[:-len(constants.METRIC_UPDATE_SUFFIX) - 1]\n      metrics_map[key][encoding.UPDATE_OP_SUFFIX] = node\n    else:\n      raise ValueError('unrecognised suffix for metric. key was: %s' % k)\n  return metrics_map\n\n",
                    "rendered": {
                      "text": "      metrics_map[key][encoding.VALUE_OP_SUFFIX] = node\n    elif k.endswith('/' + constants.METRIC_UPDATE_SUFFIX):\n      key = k[:-len(constants.METRIC_UPDATE_SUFFIX) - 1]\n      metrics_map[key][encoding.UPDATE_OP_SUFFIX] = node\n    else:\n      raise ValueError('unrecognised suffix for metric. key was: %s' % k)\n  return metrics_map\n\n",
                      "markdown": "`      metrics_map[key][encoding.VALUE_OP_SUFFIX] = node\n    elif k.endswith('/' + constants.METRIC_UPDATE_SUFFIX):\n      key = k[:-len(constants.METRIC_UPDATE_SUFFIX) - 1]\n      metrics_map[key][encoding.UPDATE_OP_SUFFIX] = node\n    else:\n      raise ValueError('unrecognised suffix for metric. key was: %s' % k)\n  return metrics_map\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/eval_saved_model/graph_ref.py"
                },
                "region": {
                  "startLine": 311,
                  "startColumn": 50,
                  "endLine": 312,
                  "snippet": {
                    "text": "\n    if k.endswith('/' + constants.METRIC_VALUE_SUFFIX):\n      key = k[:-len(constants.METRIC_VALUE_SUFFIX) - 1]\n      metrics_map[key][encoding.VALUE_OP_SUFFIX] = node\n    elif k.endswith('/' + constants.METRIC_UPDATE_SUFFIX):\n      key = k[:-len(constants.METRIC_UPDATE_SUFFIX) - 1]\n      metrics_map[key][encoding.UPDATE_OP_SUFFIX] = node\n    else:\n",
                    "rendered": {
                      "text": "\n    if k.endswith('/' + constants.METRIC_VALUE_SUFFIX):\n      key = k[:-len(constants.METRIC_VALUE_SUFFIX) - 1]\n      metrics_map[key][encoding.VALUE_OP_SUFFIX] = node\n    elif k.endswith('/' + constants.METRIC_UPDATE_SUFFIX):\n      key = k[:-len(constants.METRIC_UPDATE_SUFFIX) - 1]\n      metrics_map[key][encoding.UPDATE_OP_SUFFIX] = node\n    else:\n",
                      "markdown": "`\n    if k.endswith('/' + constants.METRIC_VALUE_SUFFIX):\n      key = k[:-len(constants.METRIC_VALUE_SUFFIX) - 1]\n      metrics_map[key][encoding.VALUE_OP_SUFFIX] = node\n    elif k.endswith('/' + constants.METRIC_UPDATE_SUFFIX):\n      key = k[:-len(constants.METRIC_UPDATE_SUFFIX) - 1]\n      metrics_map[key][encoding.UPDATE_OP_SUFFIX] = node\n    else:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/eval_saved_model/graph_ref.py"
                },
                "region": {
                  "startLine": 307,
                  "startColumn": 3,
                  "endLine": 307,
                  "endColumn": 9,
                  "snippet": {
                    "text": "      constants.METRICS_NAME, signature_def.outputs)\n  metrics_map = collections.defaultdict(dict)\n  for k, v in metrics.items():\n    node = tf.compat.v1.saved_model.utils.get_tensor_from_tensor_info(v, graph)\n\n    if k.endswith('/' + constants.METRIC_VALUE_SUFFIX):\n      key = k[:-len(constants.METRIC_VALUE_SUFFIX) - 1]\n",
                    "rendered": {
                      "text": "      constants.METRICS_NAME, signature_def.outputs)\n  metrics_map = collections.defaultdict(dict)\n  for k, v in metrics.items():\n    node = tf.compat.v1.saved_model.utils.get_tensor_from_tensor_info(v, graph)\n\n    if k.endswith('/' + constants.METRIC_VALUE_SUFFIX):\n      key = k[:-len(constants.METRIC_VALUE_SUFFIX) - 1]\n",
                      "markdown": "`      constants.METRICS_NAME, signature_def.outputs)\n  metrics_map = collections.defaultdict(dict)\n  for k, v in metrics.items():\n    node = tf.compat.v1.saved_model.utils.get_tensor_from_tensor_info(v, graph)\n\n    if k.endswith('/' + constants.METRIC_VALUE_SUFFIX):\n      key = k[:-len(constants.METRIC_VALUE_SUFFIX) - 1]\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/eval_saved_model/graph_ref.py"
                },
                "region": {
                  "startLine": 209,
                  "startColumn": 3,
                  "endLine": 209,
                  "endColumn": 9,
                  "snippet": {
                    "text": "  if not inputs:\n    raise ValueError('no inputs found in signature_def: %s' % signature_def)\n  inputs_map = collections.OrderedDict()\n  # Sort by key name so stable ordering is used when passing to feed_list.\n  for k in sorted(inputs):\n    inputs_map[k] = tf.compat.v1.saved_model.utils.get_tensor_from_tensor_info(\n        inputs[k], graph)\n",
                    "rendered": {
                      "text": "  if not inputs:\n    raise ValueError('no inputs found in signature_def: %s' % signature_def)\n  inputs_map = collections.OrderedDict()\n  # Sort by key name so stable ordering is used when passing to feed_list.\n  for k in sorted(inputs):\n    inputs_map[k] = tf.compat.v1.saved_model.utils.get_tensor_from_tensor_info(\n        inputs[k], graph)\n",
                      "markdown": "`  if not inputs:\n    raise ValueError('no inputs found in signature_def: %s' % signature_def)\n  inputs_map = collections.OrderedDict()\n  # Sort by key name so stable ordering is used when passing to feed_list.\n  for k in sorted(inputs):\n    inputs_map[k] = tf.compat.v1.saved_model.utils.get_tensor_from_tensor_info(\n        inputs[k], graph)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/eval_saved_model/graph_ref.py"
                },
                "region": {
                  "startLine": 173,
                  "startColumn": 41,
                  "endLine": 173,
                  "endColumn": 47,
                  "snippet": {
                    "text": "\n  Args:\n    signature_def: SignatureDef to lookup node in.\n    graph: TensorFlow graph to lookup the node in.\n\n  Returns:\n    TFMA version tensor.\n",
                    "rendered": {
                      "text": "\n  Args:\n    signature_def: SignatureDef to lookup node in.\n    graph: TensorFlow graph to lookup the node in.\n\n  Returns:\n    TFMA version tensor.\n",
                      "markdown": "`\n  Args:\n    signature_def: SignatureDef to lookup node in.\n    graph: TensorFlow graph to lookup the node in.\n\n  Returns:\n    TFMA version tensor.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/eval_saved_model/graph_ref.py"
                },
                "region": {
                  "startLine": 172,
                  "startColumn": 41,
                  "endLine": 172,
                  "endColumn": 47,
                  "snippet": {
                    "text": "  \"\"\"Loads TFMA version information from signature_def.inputs.\n\n  Args:\n    signature_def: SignatureDef to lookup node in.\n    graph: TensorFlow graph to lookup the node in.\n\n  Returns:\n",
                    "rendered": {
                      "text": "  \"\"\"Loads TFMA version information from signature_def.inputs.\n\n  Args:\n    signature_def: SignatureDef to lookup node in.\n    graph: TensorFlow graph to lookup the node in.\n\n  Returns:\n",
                      "markdown": "`  \"\"\"Loads TFMA version information from signature_def.inputs.\n\n  Args:\n    signature_def: SignatureDef to lookup node in.\n    graph: TensorFlow graph to lookup the node in.\n\n  Returns:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/eval_saved_model/graph_ref.py"
                },
                "region": {
                  "startLine": 119,
                  "startColumn": 17,
                  "endLine": 119,
                  "endColumn": 23,
                  "snippet": {
                    "text": "    input_refs_node = get_node_in_graph(meta_graph_def,\n                                        encoding.EXAMPLE_REF_COLLECTION, graph)\n  except KeyError:\n    # If we can't find the ExampleRef collection, then this is probably a model\n    # created before we introduced the ExampleRef parameter to\n    # EvalInputReceiver. In that case, we default to a tensor of range(0,\n    # len(input_example)).\n",
                    "rendered": {
                      "text": "    input_refs_node = get_node_in_graph(meta_graph_def,\n                                        encoding.EXAMPLE_REF_COLLECTION, graph)\n  except KeyError:\n    # If we can't find the ExampleRef collection, then this is probably a model\n    # created before we introduced the ExampleRef parameter to\n    # EvalInputReceiver. In that case, we default to a tensor of range(0,\n    # len(input_example)).\n",
                      "markdown": "`    input_refs_node = get_node_in_graph(meta_graph_def,\n                                        encoding.EXAMPLE_REF_COLLECTION, graph)\n  except KeyError:\n    # If we can't find the ExampleRef collection, then this is probably a model\n    # created before we introduced the ExampleRef parameter to\n    # EvalInputReceiver. In that case, we default to a tensor of range(0,\n    # len(input_example)).\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/eval_saved_model/exporter_test.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/eval_saved_model/exporter.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/eval_saved_model/export_test.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/eval_saved_model/export.py"
                },
                "region": {
                  "startLine": 190,
                  "startColumn": 66,
                  "endLine": 191,
                  "snippet": {
                    "text": "  # identity-wrapped features and labels to model_fn, but we have to feed\n  # the non-identity wrapped Tensors during evaluation.\n  #\n  # Also note that we can't wrap predictions, so metrics that have control\n  # dependencies on predictions will cause the predictions to be recomputed\n  # during their evaluation.\n  wrapped_features = util.wrap_tensor_or_dict_of_tensors_in_identity(features)\n  if labels is not None:\n",
                    "rendered": {
                      "text": "  # identity-wrapped features and labels to model_fn, but we have to feed\n  # the non-identity wrapped Tensors during evaluation.\n  #\n  # Also note that we can't wrap predictions, so metrics that have control\n  # dependencies on predictions will cause the predictions to be recomputed\n  # during their evaluation.\n  wrapped_features = util.wrap_tensor_or_dict_of_tensors_in_identity(features)\n  if labels is not None:\n",
                      "markdown": "`  # identity-wrapped features and labels to model_fn, but we have to feed\n  # the non-identity wrapped Tensors during evaluation.\n  #\n  # Also note that we can't wrap predictions, so metrics that have control\n  # dependencies on predictions will cause the predictions to be recomputed\n  # during their evaluation.\n  wrapped_features = util.wrap_tensor_or_dict_of_tensors_in_identity(features)\n  if labels is not None:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/eval_saved_model/export.py"
                },
                "region": {
                  "startLine": 133,
                  "startColumn": 66,
                  "endLine": 134,
                  "snippet": {
                    "text": "  # identity-wrapped features and labels to model_fn, but we have to feed\n  # the non-identity wrapped Tensors during evaluation.\n  #\n  # Also note that we can't wrap predictions, so metrics that have control\n  # dependencies on predictions will cause the predictions to be recomputed\n  # during their evaluation.\n  wrapped_features = util.wrap_tensor_or_dict_of_tensors_in_identity(features)\n  if labels is not None:\n",
                    "rendered": {
                      "text": "  # identity-wrapped features and labels to model_fn, but we have to feed\n  # the non-identity wrapped Tensors during evaluation.\n  #\n  # Also note that we can't wrap predictions, so metrics that have control\n  # dependencies on predictions will cause the predictions to be recomputed\n  # during their evaluation.\n  wrapped_features = util.wrap_tensor_or_dict_of_tensors_in_identity(features)\n  if labels is not None:\n",
                      "markdown": "`  # identity-wrapped features and labels to model_fn, but we have to feed\n  # the non-identity wrapped Tensors during evaluation.\n  #\n  # Also note that we can't wrap predictions, so metrics that have control\n  # dependencies on predictions will cause the predictions to be recomputed\n  # during their evaluation.\n  wrapped_features = util.wrap_tensor_or_dict_of_tensors_in_identity(features)\n  if labels is not None:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/eval_saved_model/export.py"
                },
                "region": {
                  "startLine": 86,
                  "startColumn": 53,
                  "endLine": 86,
                  "endColumn": 57,
                  "snippet": {
                    "text": "      intended to be used by models that cannot handle a single large input due\n      to memory resource constraints. For example, a model that takes a\n      tf.train.SequenceExample record as input but only processes smaller\n      batches of examples within the overall sequence at a time. The caller is\n      responsible for setting the input_refs appropriately (i.e. all examples\n      belonging to the same tf.train.Sequence should have the same input_ref).\n\n",
                    "rendered": {
                      "text": "      intended to be used by models that cannot handle a single large input due\n      to memory resource constraints. For example, a model that takes a\n      tf.train.SequenceExample record as input but only processes smaller\n      batches of examples within the overall sequence at a time. The caller is\n      responsible for setting the input_refs appropriately (i.e. all examples\n      belonging to the same tf.train.Sequence should have the same input_ref).\n\n",
                      "markdown": "`      intended to be used by models that cannot handle a single large input due\n      to memory resource constraints. For example, a model that takes a\n      tf.train.SequenceExample record as input but only processes smaller\n      batches of examples within the overall sequence at a time. The caller is\n      responsible for setting the input_refs appropriately (i.e. all examples\n      belonging to the same tf.train.Sequence should have the same input_ref).\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/eval_saved_model/export.py"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 12,
                  "endLine": 50,
                  "endColumn": 16,
                  "snippet": {
                    "text": "\n  This is a wrapper around TensorFlow's InputReceiver that adds additional\n  entries and prefixes to the input tensors so that features and labels can be\n  discovered at evaluation time. It also wraps the features and labels tensors\n  in identity to workaround TensorFlow issue #17568.\n\n  The resulting signature_def.inputs will have the following form:\n",
                    "rendered": {
                      "text": "\n  This is a wrapper around TensorFlow's InputReceiver that adds additional\n  entries and prefixes to the input tensors so that features and labels can be\n  discovered at evaluation time. It also wraps the features and labels tensors\n  in identity to workaround TensorFlow issue #17568.\n\n  The resulting signature_def.inputs will have the following form:\n",
                      "markdown": "`\n  This is a wrapper around TensorFlow's InputReceiver that adds additional\n  entries and prefixes to the input tensors so that features and labels can be\n  discovered at evaluation time. It also wraps the features and labels tensors\n  in identity to workaround TensorFlow issue #17568.\n\n  The resulting signature_def.inputs will have the following form:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/eval_saved_model/export.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/eval_saved_model/export.py"
                },
                "region": {
                  "startLine": 345,
                  "startColumn": 25,
                  "endLine": 345,
                  "endColumn": 31,
                  "snippet": {
                    "text": "    Path to the directory where the EvalSavedModel was exported.\n\n  Raises:\n    ValueError: Could not find a checkpoint to export.\n  \"\"\"\n  path = util.export_legacy_eval_savedmodel(\n      estimator=estimator,\n",
                    "rendered": {
                      "text": "    Path to the directory where the EvalSavedModel was exported.\n\n  Raises:\n    ValueError: Could not find a checkpoint to export.\n  \"\"\"\n  path = util.export_legacy_eval_savedmodel(\n      estimator=estimator,\n",
                      "markdown": "`    Path to the directory where the EvalSavedModel was exported.\n\n  Raises:\n    ValueError: Could not find a checkpoint to export.\n  \"\"\"\n  path = util.export_legacy_eval_savedmodel(\n      estimator=estimator,\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/eval_saved_model/export.py"
                },
                "region": {
                  "startLine": 168,
                  "startColumn": 48,
                  "endLine": 168,
                  "endColumn": 54,
                  "snippet": {
                    "text": "      model is an unsupervised model whose `model_fn` does not accept a `labels`\n      argument, you may pass None instead.\n    receiver_tensors: A dict of string to `Tensor` containing exactly key named\n      'examples', which maps to the single input node that the receiver expects\n      to be fed by default. Typically this is a placeholder expecting serialized\n      `tf.Example` protos.\n    input_refs: Optional. A 1-D integer `Tensor` that is batch-aligned with\n",
                    "rendered": {
                      "text": "      model is an unsupervised model whose `model_fn` does not accept a `labels`\n      argument, you may pass None instead.\n    receiver_tensors: A dict of string to `Tensor` containing exactly key named\n      'examples', which maps to the single input node that the receiver expects\n      to be fed by default. Typically this is a placeholder expecting serialized\n      `tf.Example` protos.\n    input_refs: Optional. A 1-D integer `Tensor` that is batch-aligned with\n",
                      "markdown": "`      model is an unsupervised model whose `model_fn` does not accept a `labels`\n      argument, you may pass None instead.\n    receiver_tensors: A dict of string to `Tensor` containing exactly key named\n      'examples', which maps to the single input node that the receiver expects\n      to be fed by default. Typically this is a placeholder expecting serialized\n      `tf.Example` protos.\n    input_refs: Optional. A 1-D integer `Tensor` that is batch-aligned with\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/eval_saved_model/export.py"
                },
                "region": {
                  "startLine": 73,
                  "startColumn": 48,
                  "endLine": 73,
                  "endColumn": 54,
                  "snippet": {
                    "text": "      model is an unsupervised model whose `model_fn` does not accept a `labels`\n      argument, you may pass None instead.\n    receiver_tensors: A dict of string to `Tensor` containing exactly key named\n      'examples', which maps to the single input node that the receiver expects\n      to be fed by default. Typically this is a placeholder expecting serialized\n      `tf.Example` protos.\n    input_refs: Optional (unless iterator_initializer used). A 1-D integer\n",
                    "rendered": {
                      "text": "      model is an unsupervised model whose `model_fn` does not accept a `labels`\n      argument, you may pass None instead.\n    receiver_tensors: A dict of string to `Tensor` containing exactly key named\n      'examples', which maps to the single input node that the receiver expects\n      to be fed by default. Typically this is a placeholder expecting serialized\n      `tf.Example` protos.\n    input_refs: Optional (unless iterator_initializer used). A 1-D integer\n",
                      "markdown": "`      model is an unsupervised model whose `model_fn` does not accept a `labels`\n      argument, you may pass None instead.\n    receiver_tensors: A dict of string to `Tensor` containing exactly key named\n      'examples', which maps to the single input node that the receiver expects\n      to be fed by default. Typically this is a placeholder expecting serialized\n      `tf.Example` protos.\n    input_refs: Optional (unless iterator_initializer used). A 1-D integer\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/eval_saved_model/example_trainers/util.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/eval_saved_model/example_trainers/multi_h"
                },
                "region": {
                  "startLine": 88,
                  "startColumn": 22,
                  "endLine": 88,
                  "endColumn": 30,
                  "snippet": {
                    "text": "  all_features = [age, language]\n  feature_spec = tf.feature_column.make_parse_example_spec(all_features)\n\n  # TODO(b/130299739): Update with tf.estimator.BinaryClassHead and\n  #   tf.estimator.MultiHead\n  english_head = binary_class_head.BinaryClassHead(name='english_head')\n  chinese_head = binary_class_head.BinaryClassHead(name='chinese_head')\n",
                    "rendered": {
                      "text": "  all_features = [age, language]\n  feature_spec = tf.feature_column.make_parse_example_spec(all_features)\n\n  # TODO(b/130299739): Update with tf.estimator.BinaryClassHead and\n  #   tf.estimator.MultiHead\n  english_head = binary_class_head.BinaryClassHead(name='english_head')\n  chinese_head = binary_class_head.BinaryClassHead(name='chinese_head')\n",
                      "markdown": "`  all_features = [age, language]\n  feature_spec = tf.feature_column.make_parse_example_spec(all_features)\n\n  # TODO(b/130299739): Update with tf.estimator.BinaryClassHead and\n  #   tf.estimator.MultiHead\n  english_head = binary_class_head.BinaryClassHead(name='english_head')\n  chinese_head = binary_class_head.BinaryClassHead(name='chinese_head')\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/eval_saved_model/example_trainers/multi_h"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/eval_saved_model/example_trainers/multi_h"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 28,
                  "endLine": 20,
                  "endColumn": 34,
                  "snippet": {
                    "text": "\nThe true model for the English head is language == 'english'.\nThe true model for the Chinese head is language == 'chinese'.\nThe true model for the Other head is language == 'other'.\n\"\"\"\n\nimport tensorflow as tf\n",
                    "rendered": {
                      "text": "\nThe true model for the English head is language == 'english'.\nThe true model for the Chinese head is language == 'chinese'.\nThe true model for the Other head is language == 'other'.\n\"\"\"\n\nimport tensorflow as tf\n",
                      "markdown": "`\nThe true model for the English head is language == 'english'.\nThe true model for the Chinese head is language == 'chinese'.\nThe true model for the Other head is language == 'other'.\n\"\"\"\n\nimport tensorflow as tf\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/eval_saved_model/example_trainers/multi_h"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 30,
                  "endLine": 19,
                  "endColumn": 36,
                  "snippet": {
                    "text": "Note that this model uses the CONTRIB estimators (not the CORE estimators).\n\nThe true model for the English head is language == 'english'.\nThe true model for the Chinese head is language == 'chinese'.\nThe true model for the Other head is language == 'other'.\n\"\"\"\n\n",
                    "rendered": {
                      "text": "Note that this model uses the CONTRIB estimators (not the CORE estimators).\n\nThe true model for the English head is language == 'english'.\nThe true model for the Chinese head is language == 'chinese'.\nThe true model for the Other head is language == 'other'.\n\"\"\"\n\n",
                      "markdown": "`Note that this model uses the CONTRIB estimators (not the CORE estimators).\n\nThe true model for the English head is language == 'english'.\nThe true model for the Chinese head is language == 'chinese'.\nThe true model for the Other head is language == 'other'.\n\"\"\"\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/eval_saved_model/example_trainers/multi_h"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 30,
                  "endLine": 18,
                  "endColumn": 36,
                  "snippet": {
                    "text": "\nNote that this model uses the CONTRIB estimators (not the CORE estimators).\n\nThe true model for the English head is language == 'english'.\nThe true model for the Chinese head is language == 'chinese'.\nThe true model for the Other head is language == 'other'.\n\"\"\"\n",
                    "rendered": {
                      "text": "\nNote that this model uses the CONTRIB estimators (not the CORE estimators).\n\nThe true model for the English head is language == 'english'.\nThe true model for the Chinese head is language == 'chinese'.\nThe true model for the Other head is language == 'other'.\n\"\"\"\n",
                      "markdown": "`\nNote that this model uses the CONTRIB estimators (not the CORE estimators).\n\nThe true model for the English head is language == 'english'.\nThe true model for the Chinese head is language == 'chinese'.\nThe true model for the Other head is language == 'other'.\n\"\"\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/eval_saved_model/example_trainers/__init_"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/contrib/aggregates/__init__.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/addons/fairness/metrics/lift_test.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/addons/fairness/metrics/lift.py"
                },
                "region": {
                  "startLine": 90,
                  "startColumn": 50,
                  "endLine": 90,
                  "endColumn": 54,
                  "snippet": {
                    "text": "  \"\"\"Returns computations for lift metrics.\"\"\"\n  if eval_config is None or not eval_config.cross_slicing_specs:\n    raise ValueError(\n        'tfma.CrossSlicingSpec with a baseline and at least one comparison '\n        'slicing spec must be provided for Lift metrics')\n\n  if num_buckets is None:\n",
                    "rendered": {
                      "text": "  \"\"\"Returns computations for lift metrics.\"\"\"\n  if eval_config is None or not eval_config.cross_slicing_specs:\n    raise ValueError(\n        'tfma.CrossSlicingSpec with a baseline and at least one comparison '\n        'slicing spec must be provided for Lift metrics')\n\n  if num_buckets is None:\n",
                      "markdown": "`  \"\"\"Returns computations for lift metrics.\"\"\"\n  if eval_config is None or not eval_config.cross_slicing_specs:\n    raise ValueError(\n        'tfma.CrossSlicingSpec with a baseline and at least one comparison '\n        'slicing spec must be provided for Lift metrics')\n\n  if num_buckets is None:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/addons/fairness/metrics/lift.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/writers/metrics_plots_and_validations_wri"
                },
                "region": {
                  "startLine": 72,
                  "startColumn": 41,
                  "endLine": 72,
                  "endColumn": 45,
                  "snippet": {
                    "text": "\n\ndef _match_all_files(file_path: str) -> str:\n  \"\"\"Return expression to match all files at given path.\"\"\"\n  return file_path + '*'\n\n\n",
                    "rendered": {
                      "text": "\n\ndef _match_all_files(file_path: str) -> str:\n  \"\"\"Return expression to match all files at given path.\"\"\"\n  return file_path + '*'\n\n\n",
                      "markdown": "`\n\ndef _match_all_files(file_path: str) -> str:\n  \"\"\"Return expression to match all files at given path.\"\"\"\n  return file_path + '*'\n\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/writers/metrics_plots_and_validations_wri"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/writers/metrics_plots_and_validations_wri"
                },
                "region": {
                  "startLine": 591,
                  "startColumn": 20,
                  "endLine": 591,
                  "endColumn": 26,
                  "snippet": {
                    "text": "      column 'serialized_value' which will contain a single serialized\n      ValidationResult proto.\n    rubber_stamp: True if this model is being rubber stamped. When a model is\n      rubber stamped diff thresholds will be ignored if an associated baseline\n      model is not passed.\n    stage_name: The stage name to use when this writer is added to the Beam\n      pipeline.\n",
                    "rendered": {
                      "text": "      column 'serialized_value' which will contain a single serialized\n      ValidationResult proto.\n    rubber_stamp: True if this model is being rubber stamped. When a model is\n      rubber stamped diff thresholds will be ignored if an associated baseline\n      model is not passed.\n    stage_name: The stage name to use when this writer is added to the Beam\n      pipeline.\n",
                      "markdown": "`      column 'serialized_value' which will contain a single serialized\n      ValidationResult proto.\n    rubber_stamp: True if this model is being rubber stamped. When a model is\n      rubber stamped diff thresholds will be ignored if an associated baseline\n      model is not passed.\n    stage_name: The stage name to use when this writer is added to the Beam\n      pipeline.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/writers/eval_config_writer_test.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/writers/eval_config_writer.py"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 27,
                  "endLine": 71,
                  "endColumn": 31,
                  "snippet": {
                    "text": "\n  Returns:\n    Tuple of (EvalConfig, data location, file format, model locations). If an\n    EvalConfig is not found at the given path, None will be returned.\n  \"\"\"\n  if filename is None:\n    filename = EVAL_CONFIG_FILE + '.' + output_file_format\n",
                    "rendered": {
                      "text": "\n  Returns:\n    Tuple of (EvalConfig, data location, file format, model locations). If an\n    EvalConfig is not found at the given path, None will be returned.\n  \"\"\"\n  if filename is None:\n    filename = EVAL_CONFIG_FILE + '.' + output_file_format\n",
                      "markdown": "`\n  Returns:\n    Tuple of (EvalConfig, data location, file format, model locations). If an\n    EvalConfig is not found at the given path, None will be returned.\n  \"\"\"\n  if filename is None:\n    filename = EVAL_CONFIG_FILE + '.' + output_file_format\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/writers/eval_config_writer.py"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 13,
                  "endLine": 39,
                  "endColumn": 17,
                  "snippet": {
                    "text": "  if not version:\n    raise ValueError(\n        'could not find TFMA version in raw deserialized dictionary for '\n        'file at %s' % path)\n  # We don't actually do any checking for now, since we don't have any\n  # compatibility issues.\n\n",
                    "rendered": {
                      "text": "  if not version:\n    raise ValueError(\n        'could not find TFMA version in raw deserialized dictionary for '\n        'file at %s' % path)\n  # We don't actually do any checking for now, since we don't have any\n  # compatibility issues.\n\n",
                      "markdown": "`  if not version:\n    raise ValueError(\n        'could not find TFMA version in raw deserialized dictionary for '\n        'file at %s' % path)\n  # We don't actually do any checking for now, since we don't have any\n  # compatibility issues.\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/writers/eval_config_writer.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/writers/eval_config_writer.py"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 18,
                  "endLine": 38,
                  "endColumn": 24,
                  "snippet": {
                    "text": "def _check_version(version: str, path: str):\n  if not version:\n    raise ValueError(\n        'could not find TFMA version in raw deserialized dictionary for '\n        'file at %s' % path)\n  # We don't actually do any checking for now, since we don't have any\n  # compatibility issues.\n",
                    "rendered": {
                      "text": "def _check_version(version: str, path: str):\n  if not version:\n    raise ValueError(\n        'could not find TFMA version in raw deserialized dictionary for '\n        'file at %s' % path)\n  # We don't actually do any checking for now, since we don't have any\n  # compatibility issues.\n",
                      "markdown": "`def _check_version(version: str, path: str):\n  if not version:\n    raise ValueError(\n        'could not find TFMA version in raw deserialized dictionary for '\n        'file at %s' % path)\n  # We don't actually do any checking for now, since we don't have any\n  # compatibility issues.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/writers/__init__.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/view/widget_view.py"
                },
                "region": {
                  "startLine": 106,
                  "startColumn": 39,
                  "endLine": 106,
                  "endColumn": 43,
                  "snippet": {
                    "text": "    output_name: A string representing the output name.\n    class_id: A number representing the class id if multi class.\n    top_k: The k used to compute prediction in the top k position.\n    k: The k used to compute prediciton at the kth position.\n    label: A partial label used to match a set of plots in the results.\n\n  Returns:\n",
                    "rendered": {
                      "text": "    output_name: A string representing the output name.\n    class_id: A number representing the class id if multi class.\n    top_k: The k used to compute prediction in the top k position.\n    k: The k used to compute prediciton at the kth position.\n    label: A partial label used to match a set of plots in the results.\n\n  Returns:\n",
                      "markdown": "`    output_name: A string representing the output name.\n    class_id: A number representing the class id if multi class.\n    top_k: The k used to compute prediction in the top k position.\n    k: The k used to compute prediciton at the kth position.\n    label: A partial label used to match a set of plots in the results.\n\n  Returns:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/view/widget_view.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/view/widget_view.py"
                },
                "region": {
                  "startLine": 105,
                  "startColumn": 50,
                  "endLine": 105,
                  "endColumn": 55,
                  "snippet": {
                    "text": "      unset.\n    output_name: A string representing the output name.\n    class_id: A number representing the class id if multi class.\n    top_k: The k used to compute prediction in the top k position.\n    k: The k used to compute prediciton at the kth position.\n    label: A partial label used to match a set of plots in the results.\n\n",
                    "rendered": {
                      "text": "      unset.\n    output_name: A string representing the output name.\n    class_id: A number representing the class id if multi class.\n    top_k: The k used to compute prediction in the top k position.\n    k: The k used to compute prediciton at the kth position.\n    label: A partial label used to match a set of plots in the results.\n\n",
                      "markdown": "`      unset.\n    output_name: A string representing the output name.\n    class_id: A number representing the class id if multi class.\n    top_k: The k used to compute prediction in the top k position.\n    k: The k used to compute prediciton at the kth position.\n    label: A partial label used to match a set of plots in the results.\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/view/widget_view.py"
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 66,
                  "endLine": 70,
                  "endColumn": 72,
                  "snippet": {
                    "text": "\n  Args:\n    results: An tfma.EvalResults.\n    slicing_spec: A tfma.SlicingSpec determining the slice to show time series\n      on. Show overall if not set.\n    display_full_path: Whether to display the full path to model / data in the\n      visualization or just show file name.\n",
                    "rendered": {
                      "text": "\n  Args:\n    results: An tfma.EvalResults.\n    slicing_spec: A tfma.SlicingSpec determining the slice to show time series\n      on. Show overall if not set.\n    display_full_path: Whether to display the full path to model / data in the\n      visualization or just show file name.\n",
                      "markdown": "`\n  Args:\n    results: An tfma.EvalResults.\n    slicing_spec: A tfma.SlicingSpec determining the slice to show time series\n      on. Show overall if not set.\n    display_full_path: Whether to display the full path to model / data in the\n      visualization or just show file name.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/view/widget_view.py"
                },
                "region": {
                  "startLine": 66,
                  "startColumn": 16,
                  "endLine": 66,
                  "endColumn": 22,
                  "snippet": {
                    "text": "                                 config_pb2.SlicingSpec]] = None,\n    display_full_path: bool = False\n) -> Optional[visualization.TimeSeriesViewer]:  # pytype: disable=invalid-annotation\n  \"\"\"Renders the time series view as widget.\n\n  Args:\n    results: An tfma.EvalResults.\n",
                    "rendered": {
                      "text": "                                 config_pb2.SlicingSpec]] = None,\n    display_full_path: bool = False\n) -> Optional[visualization.TimeSeriesViewer]:  # pytype: disable=invalid-annotation\n  \"\"\"Renders the time series view as widget.\n\n  Args:\n    results: An tfma.EvalResults.\n",
                      "markdown": "`                                 config_pb2.SlicingSpec]] = None,\n    display_full_path: bool = False\n) -> Optional[visualization.TimeSeriesViewer]:  # pytype: disable=invalid-annotation\n  \"\"\"Renders the time series view as widget.\n\n  Args:\n    results: An tfma.EvalResults.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/view/view_types_test.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/view/view_types.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/view/util_test.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/view/util.py"
                },
                "region": {
                  "startLine": 340,
                  "startColumn": 39,
                  "endLine": 340,
                  "endColumn": 43,
                  "snippet": {
                    "text": "          % (label, ', '.join([key for key, _ in plot_data])))\n    plot_data = plot_set\n  else:\n    # Make sure that we are not looking at actual plot data instead of a map of\n    # plot.\n    contains_supported_plot_data = False\n    for key in plot_data:\n",
                    "rendered": {
                      "text": "          % (label, ', '.join([key for key, _ in plot_data])))\n    plot_data = plot_set\n  else:\n    # Make sure that we are not looking at actual plot data instead of a map of\n    # plot.\n    contains_supported_plot_data = False\n    for key in plot_data:\n",
                      "markdown": "`          % (label, ', '.join([key for key, _ in plot_data])))\n    plot_data = plot_set\n  else:\n    # Make sure that we are not looking at actual plot data instead of a map of\n    # plot.\n    contains_supported_plot_data = False\n    for key in plot_data:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/view/util.py"
                },
                "region": {
                  "startLine": 245,
                  "startColumn": 39,
                  "endLine": 245,
                  "endColumn": 43,
                  "snippet": {
                    "text": "    output_name: The name of the output.\n    class_id: An int representing the class id if model is multi-class.\n    top_k: The k used to compute prediction in the top k position.\n    k: The k used to compute prediciton at the kth position.\n    label: A partial label used to match a set of plots in the results. This is\n      kept for backward compatibility.\n\n",
                    "rendered": {
                      "text": "    output_name: The name of the output.\n    class_id: An int representing the class id if model is multi-class.\n    top_k: The k used to compute prediction in the top k position.\n    k: The k used to compute prediciton at the kth position.\n    label: A partial label used to match a set of plots in the results. This is\n      kept for backward compatibility.\n\n",
                      "markdown": "`    output_name: The name of the output.\n    class_id: An int representing the class id if model is multi-class.\n    top_k: The k used to compute prediction in the top k position.\n    k: The k used to compute prediciton at the kth position.\n    label: A partial label used to match a set of plots in the results. This is\n      kept for backward compatibility.\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/view/util.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/view/util.py"
                },
                "region": {
                  "startLine": 681,
                  "startColumn": 29,
                  "endLine": 681,
                  "endColumn": 35,
                  "snippet": {
                    "text": "    metrics_map = model_metrics_map[keys[0]]\n  elif keys:\n    # No match found.\n    raise ValueError('Fail to find attribution metrics for model name: %s . '\n                     'Available model names are [%s]' %\n                     (model_name, ', '.join(keys)))\n\n",
                    "rendered": {
                      "text": "    metrics_map = model_metrics_map[keys[0]]\n  elif keys:\n    # No match found.\n    raise ValueError('Fail to find attribution metrics for model name: %s . '\n                     'Available model names are [%s]' %\n                     (model_name, ', '.join(keys)))\n\n",
                      "markdown": "`    metrics_map = model_metrics_map[keys[0]]\n  elif keys:\n    # No match found.\n    raise ValueError('Fail to find attribution metrics for model name: %s . '\n                     'Available model names are [%s]' %\n                     (model_name, ', '.join(keys)))\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/view/util.py"
                },
                "region": {
                  "startLine": 627,
                  "startColumn": 16,
                  "endLine": 627,
                  "endColumn": 22,
                  "snippet": {
                    "text": "  elif keys:\n    # No match found.\n    logging.warning(\n        'Fail to find plots for model name: %s . '\n        'Available model names are [%s]', model_name, ', '.join(keys))\n    return None\n\n",
                    "rendered": {
                      "text": "  elif keys:\n    # No match found.\n    logging.warning(\n        'Fail to find plots for model name: %s . '\n        'Available model names are [%s]', model_name, ', '.join(keys))\n    return None\n\n",
                      "markdown": "`  elif keys:\n    # No match found.\n    logging.warning(\n        'Fail to find plots for model name: %s . '\n        'Available model names are [%s]', model_name, ', '.join(keys))\n    return None\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/view/util.py"
                },
                "region": {
                  "startLine": 569,
                  "startColumn": 16,
                  "endLine": 569,
                  "endColumn": 22,
                  "snippet": {
                    "text": "  elif keys:\n    # No match found.\n    logging.warning(\n        'Fail to find metrics for model name: %s . '\n        'Available model names are [%s]', model_name, ', '.join(keys))\n    return None\n\n",
                    "rendered": {
                      "text": "  elif keys:\n    # No match found.\n    logging.warning(\n        'Fail to find metrics for model name: %s . '\n        'Available model names are [%s]', model_name, ', '.join(keys))\n    return None\n\n",
                      "markdown": "`  elif keys:\n    # No match found.\n    logging.warning(\n        'Fail to find metrics for model name: %s . '\n        'Available model names are [%s]', model_name, ', '.join(keys))\n    return None\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/view/util.py"
                },
                "region": {
                  "startLine": 264,
                  "startColumn": 55,
                  "endLine": 264,
                  "endColumn": 60,
                  "snippet": {
                    "text": "  \"\"\"\n  if label is not None and (output_name is not None or class_id is not None or\n                            top_k is not None or k is not None):\n    # Plot key (specified by output_name and class_id / top k / k) and label (\n    # for backward compatibiility only) should not be provided together.\n    raise ValueError('Do not specify both label and output_name / class_id')\n\n",
                    "rendered": {
                      "text": "  \"\"\"\n  if label is not None and (output_name is not None or class_id is not None or\n                            top_k is not None or k is not None):\n    # Plot key (specified by output_name and class_id / top k / k) and label (\n    # for backward compatibiility only) should not be provided together.\n    raise ValueError('Do not specify both label and output_name / class_id')\n\n",
                      "markdown": "`  \"\"\"\n  if label is not None and (output_name is not None or class_id is not None or\n                            top_k is not None or k is not None):\n    # Plot key (specified by output_name and class_id / top k / k) and label (\n    # for backward compatibiility only) should not be provided together.\n    raise ValueError('Do not specify both label and output_name / class_id')\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/view/util.py"
                },
                "region": {
                  "startLine": 244,
                  "startColumn": 50,
                  "endLine": 244,
                  "endColumn": 55,
                  "snippet": {
                    "text": "      for.\n    output_name: The name of the output.\n    class_id: An int representing the class id if model is multi-class.\n    top_k: The k used to compute prediction in the top k position.\n    k: The k used to compute prediciton at the kth position.\n    label: A partial label used to match a set of plots in the results. This is\n      kept for backward compatibility.\n",
                    "rendered": {
                      "text": "      for.\n    output_name: The name of the output.\n    class_id: An int representing the class id if model is multi-class.\n    top_k: The k used to compute prediction in the top k position.\n    k: The k used to compute prediciton at the kth position.\n    label: A partial label used to match a set of plots in the results. This is\n      kept for backward compatibility.\n",
                      "markdown": "`      for.\n    output_name: The name of the output.\n    class_id: An int representing the class id if model is multi-class.\n    top_k: The k used to compute prediction in the top k position.\n    k: The k used to compute prediciton at the kth position.\n    label: A partial label used to match a set of plots in the results. This is\n      kept for backward compatibility.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/view/util.py"
                },
                "region": {
                  "startLine": 116,
                  "startColumn": 62,
                  "endLine": 116,
                  "endColumn": 68,
                  "snippet": {
                    "text": "  Args:\n    results: A collection of EvalResult whose metrics should be visualized in a\n      time series.\n    slicing_spec: The spec specifying the slice to show in the time series.\n    display_full_path: Whether to display the full path or just the file name.\n\n  Returns:\n",
                    "rendered": {
                      "text": "  Args:\n    results: A collection of EvalResult whose metrics should be visualized in a\n      time series.\n    slicing_spec: The spec specifying the slice to show in the time series.\n    display_full_path: Whether to display the full path or just the file name.\n\n  Returns:\n",
                      "markdown": "`  Args:\n    results: A collection of EvalResult whose metrics should be visualized in a\n      time series.\n    slicing_spec: The spec specifying the slice to show in the time series.\n    display_full_path: Whether to display the full path or just the file name.\n\n  Returns:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/view/util.py"
                },
                "region": {
                  "startLine": 115,
                  "startColumn": 5,
                  "endLine": 115,
                  "endColumn": 11,
                  "snippet": {
                    "text": "\n  Args:\n    results: A collection of EvalResult whose metrics should be visualized in a\n      time series.\n    slicing_spec: The spec specifying the slice to show in the time series.\n    display_full_path: Whether to display the full path or just the file name.\n\n",
                    "rendered": {
                      "text": "\n  Args:\n    results: A collection of EvalResult whose metrics should be visualized in a\n      time series.\n    slicing_spec: The spec specifying the slice to show in the time series.\n    display_full_path: Whether to display the full path or just the file name.\n\n",
                      "markdown": "`\n  Args:\n    results: A collection of EvalResult whose metrics should be visualized in a\n      time series.\n    slicing_spec: The spec specifying the slice to show in the time series.\n    display_full_path: Whether to display the full path or just the file name.\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/view/util.py"
                },
                "region": {
                  "startLine": 111,
                  "startColumn": 32,
                  "endLine": 111,
                  "endColumn": 38,
                  "snippet": {
                    "text": "    results: view_types.EvalResults, slicing_spec: slicer.SingleSliceSpec,\n    display_full_path: bool\n) -> List[Dict[str, Union[Dict[Union[float, str], Any], str]]]:\n  \"\"\"Util function that extracts time series data for the specified slice.\n\n  Args:\n    results: A collection of EvalResult whose metrics should be visualized in a\n",
                    "rendered": {
                      "text": "    results: view_types.EvalResults, slicing_spec: slicer.SingleSliceSpec,\n    display_full_path: bool\n) -> List[Dict[str, Union[Dict[Union[float, str], Any], str]]]:\n  \"\"\"Util function that extracts time series data for the specified slice.\n\n  Args:\n    results: A collection of EvalResult whose metrics should be visualized in a\n",
                      "markdown": "`    results: view_types.EvalResults, slicing_spec: slicer.SingleSliceSpec,\n    display_full_path: bool\n) -> List[Dict[str, Union[Dict[Union[float, str], Any], str]]]:\n  \"\"\"Util function that extracts time series data for the specified slice.\n\n  Args:\n    results: A collection of EvalResult whose metrics should be visualized in a\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/notebook/colab/util.py"
                },
                "region": {
                  "startLine": 97,
                  "startColumn": 9,
                  "endLine": 97,
                  "endColumn": 15,
                  "snippet": {
                    "text": "    base64-encoded string of JSON\n  \"\"\"\n  json_string = json.dumps(obj)\n  return base64.b64encode(json_string.encode('utf-8')).decode('utf-8')\n\n\ndef generate_html_for_tfma_component(\n",
                    "rendered": {
                      "text": "    base64-encoded string of JSON\n  \"\"\"\n  json_string = json.dumps(obj)\n  return base64.b64encode(json_string.encode('utf-8')).decode('utf-8')\n\n\ndef generate_html_for_tfma_component(\n",
                      "markdown": "`    base64-encoded string of JSON\n  \"\"\"\n  json_string = json.dumps(obj)\n  return base64.b64encode(json_string.encode('utf-8')).decode('utf-8')\n\n\ndef generate_html_for_tfma_component(\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/notebook/colab/util.py"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 4,
                  "endLine": 94,
                  "endColumn": 10,
                  "snippet": {
                    "text": "    obj: any Python object serializable to JSON\n\n  Returns:\n    base64-encoded string of JSON\n  \"\"\"\n  json_string = json.dumps(obj)\n  return base64.b64encode(json_string.encode('utf-8')).decode('utf-8')\n",
                    "rendered": {
                      "text": "    obj: any Python object serializable to JSON\n\n  Returns:\n    base64-encoded string of JSON\n  \"\"\"\n  json_string = json.dumps(obj)\n  return base64.b64encode(json_string.encode('utf-8')).decode('utf-8')\n",
                      "markdown": "`    obj: any Python object serializable to JSON\n\n  Returns:\n    base64-encoded string of JSON\n  \"\"\"\n  json_string = json.dumps(obj)\n  return base64.b64encode(json_string.encode('utf-8')).decode('utf-8')\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/notebook/colab/util.py"
                },
                "region": {
                  "startLine": 88,
                  "startColumn": 37,
                  "endLine": 88,
                  "endColumn": 43,
                  "snippet": {
                    "text": "\n  When embedding JSON inline inside HTML, serialize it to a JSON string in\n  Python and base64 encode that string to escape it so that it's safe to render\n  inside HTML.  Then on the JS side, base64 decode it and parse it as JSON.\n\n  Args:\n    obj: any Python object serializable to JSON\n",
                    "rendered": {
                      "text": "\n  When embedding JSON inline inside HTML, serialize it to a JSON string in\n  Python and base64 encode that string to escape it so that it's safe to render\n  inside HTML.  Then on the JS side, base64 decode it and parse it as JSON.\n\n  Args:\n    obj: any Python object serializable to JSON\n",
                      "markdown": "`\n  When embedding JSON inline inside HTML, serialize it to a JSON string in\n  Python and base64 encode that string to escape it so that it's safe to render\n  inside HTML.  Then on the JS side, base64 decode it and parse it as JSON.\n\n  Args:\n    obj: any Python object serializable to JSON\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/notebook/colab/util.py"
                },
                "region": {
                  "startLine": 87,
                  "startColumn": 13,
                  "endLine": 87,
                  "endColumn": 19,
                  "snippet": {
                    "text": "  \"\"\"Encode a Python object as a base64-endoded JSON string.\n\n  When embedding JSON inline inside HTML, serialize it to a JSON string in\n  Python and base64 encode that string to escape it so that it's safe to render\n  inside HTML.  Then on the JS side, base64 decode it and parse it as JSON.\n\n  Args:\n",
                    "rendered": {
                      "text": "  \"\"\"Encode a Python object as a base64-endoded JSON string.\n\n  When embedding JSON inline inside HTML, serialize it to a JSON string in\n  Python and base64 encode that string to escape it so that it's safe to render\n  inside HTML.  Then on the JS side, base64 decode it and parse it as JSON.\n\n  Args:\n",
                      "markdown": "`  \"\"\"Encode a Python object as a base64-endoded JSON string.\n\n  When embedding JSON inline inside HTML, serialize it to a JSON string in\n  Python and base64 encode that string to escape it so that it's safe to render\n  inside HTML.  Then on the JS side, base64 decode it and parse it as JSON.\n\n  Args:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/notebook/colab/util.py"
                },
                "region": {
                  "startLine": 84,
                  "startColumn": 33,
                  "endLine": 84,
                  "endColumn": 39,
                  "snippet": {
                    "text": "\n\ndef to_base64_encoded_json(obj) -> str:\n  \"\"\"Encode a Python object as a base64-endoded JSON string.\n\n  When embedding JSON inline inside HTML, serialize it to a JSON string in\n  Python and base64 encode that string to escape it so that it's safe to render\n",
                    "rendered": {
                      "text": "\n\ndef to_base64_encoded_json(obj) -> str:\n  \"\"\"Encode a Python object as a base64-endoded JSON string.\n\n  When embedding JSON inline inside HTML, serialize it to a JSON string in\n  Python and base64 encode that string to escape it so that it's safe to render\n",
                      "markdown": "`\n\ndef to_base64_encoded_json(obj) -> str:\n  \"\"\"Encode a Python object as a base64-endoded JSON string.\n\n  When embedding JSON inline inside HTML, serialize it to a JSON string in\n  Python and base64 encode that string to escape it so that it's safe to render\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/notebook/colab/util.py"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 7,
                  "endLine": 16,
                  "endColumn": 13,
                  "snippet": {
                    "text": "# limitations under the License.\n\"\"\"Utility for Colab TFMA renderer API.\"\"\"\n\nimport base64\nimport json\nfrom typing import Any, Callable, Dict, List, Optional, Union\nfrom google.colab import output\n",
                    "rendered": {
                      "text": "# limitations under the License.\n\"\"\"Utility for Colab TFMA renderer API.\"\"\"\n\nimport base64\nimport json\nfrom typing import Any, Callable, Dict, List, Optional, Union\nfrom google.colab import output\n",
                      "markdown": "`# limitations under the License.\n\"\"\"Utility for Colab TFMA renderer API.\"\"\"\n\nimport base64\nimport json\nfrom typing import Any, Callable, Dict, List, Optional, Union\nfrom google.colab import output\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/notebook/colab/util.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/notebook/colab/util.py"
                },
                "region": {
                  "startLine": 168,
                  "startColumn": 27,
                  "endLine": 168,
                  "endColumn": 35,
                  "snippet": {
                    "text": "    config: A dictionary containing the configuration.\n    trusted_html_for_vulcanized_tfma_js: Optional string of trusted HTML that is\n      rendered unescaped.  This can be a script tag referencing a trusted\n      external JS file or a script tag with trusted JS inline.\n    event_handlers: Handlers for events on the js side.\n  \"\"\"\n\n",
                    "rendered": {
                      "text": "    config: A dictionary containing the configuration.\n    trusted_html_for_vulcanized_tfma_js: Optional string of trusted HTML that is\n      rendered unescaped.  This can be a script tag referencing a trusted\n      external JS file or a script tag with trusted JS inline.\n    event_handlers: Handlers for events on the js side.\n  \"\"\"\n\n",
                      "markdown": "`    config: A dictionary containing the configuration.\n    trusted_html_for_vulcanized_tfma_js: Optional string of trusted HTML that is\n      rendered unescaped.  This can be a script tag referencing a trusted\n      external JS file or a script tag with trusted JS inline.\n    event_handlers: Handlers for events on the js side.\n  \"\"\"\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/notebook/colab/util.py"
                },
                "region": {
                  "startLine": 167,
                  "startColumn": 40,
                  "endLine": 167,
                  "endColumn": 48,
                  "snippet": {
                    "text": "    data: A dictionary containing data for visualization.\n    config: A dictionary containing the configuration.\n    trusted_html_for_vulcanized_tfma_js: Optional string of trusted HTML that is\n      rendered unescaped.  This can be a script tag referencing a trusted\n      external JS file or a script tag with trusted JS inline.\n    event_handlers: Handlers for events on the js side.\n  \"\"\"\n",
                    "rendered": {
                      "text": "    data: A dictionary containing data for visualization.\n    config: A dictionary containing the configuration.\n    trusted_html_for_vulcanized_tfma_js: Optional string of trusted HTML that is\n      rendered unescaped.  This can be a script tag referencing a trusted\n      external JS file or a script tag with trusted JS inline.\n    event_handlers: Handlers for events on the js side.\n  \"\"\"\n",
                      "markdown": "`    data: A dictionary containing data for visualization.\n    config: A dictionary containing the configuration.\n    trusted_html_for_vulcanized_tfma_js: Optional string of trusted HTML that is\n      rendered unescaped.  This can be a script tag referencing a trusted\n      external JS file or a script tag with trusted JS inline.\n    event_handlers: Handlers for events on the js side.\n  \"\"\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/notebook/colab/util.py"
                },
                "region": {
                  "startLine": 116,
                  "startColumn": 27,
                  "endLine": 116,
                  "endColumn": 35,
                  "snippet": {
                    "text": "    config: A dictionary containing the configuration.\n    trusted_html_for_vulcanized_tfma_js: Optional string of trusted HTML that is\n      rendered unescaped.  This can be a script tag referencing a trusted\n      external JS file or a script tag with trusted JS inline.\n    event_handlers: Handlers for events on the js side.\n\n  Returns:\n",
                    "rendered": {
                      "text": "    config: A dictionary containing the configuration.\n    trusted_html_for_vulcanized_tfma_js: Optional string of trusted HTML that is\n      rendered unescaped.  This can be a script tag referencing a trusted\n      external JS file or a script tag with trusted JS inline.\n    event_handlers: Handlers for events on the js side.\n\n  Returns:\n",
                      "markdown": "`    config: A dictionary containing the configuration.\n    trusted_html_for_vulcanized_tfma_js: Optional string of trusted HTML that is\n      rendered unescaped.  This can be a script tag referencing a trusted\n      external JS file or a script tag with trusted JS inline.\n    event_handlers: Handlers for events on the js side.\n\n  Returns:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/notebook/colab/util.py"
                },
                "region": {
                  "startLine": 115,
                  "startColumn": 40,
                  "endLine": 115,
                  "endColumn": 48,
                  "snippet": {
                    "text": "    data: A dictionary containing data for visualization.\n    config: A dictionary containing the configuration.\n    trusted_html_for_vulcanized_tfma_js: Optional string of trusted HTML that is\n      rendered unescaped.  This can be a script tag referencing a trusted\n      external JS file or a script tag with trusted JS inline.\n    event_handlers: Handlers for events on the js side.\n\n",
                    "rendered": {
                      "text": "    data: A dictionary containing data for visualization.\n    config: A dictionary containing the configuration.\n    trusted_html_for_vulcanized_tfma_js: Optional string of trusted HTML that is\n      rendered unescaped.  This can be a script tag referencing a trusted\n      external JS file or a script tag with trusted JS inline.\n    event_handlers: Handlers for events on the js side.\n\n",
                      "markdown": "`    data: A dictionary containing data for visualization.\n    config: A dictionary containing the configuration.\n    trusted_html_for_vulcanized_tfma_js: Optional string of trusted HTML that is\n      rendered unescaped.  This can be a script tag referencing a trusted\n      external JS file or a script tag with trusted JS inline.\n    event_handlers: Handlers for events on the js side.\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/notebook/colab/util.py"
                },
                "region": {
                  "startLine": 88,
                  "startColumn": 36,
                  "endLine": 88,
                  "endColumn": 44,
                  "snippet": {
                    "text": "\n  When embedding JSON inline inside HTML, serialize it to a JSON string in\n  Python and base64 encode that string to escape it so that it's safe to render\n  inside HTML.  Then on the JS side, base64 decode it and parse it as JSON.\n\n  Args:\n    obj: any Python object serializable to JSON\n",
                    "rendered": {
                      "text": "\n  When embedding JSON inline inside HTML, serialize it to a JSON string in\n  Python and base64 encode that string to escape it so that it's safe to render\n  inside HTML.  Then on the JS side, base64 decode it and parse it as JSON.\n\n  Args:\n    obj: any Python object serializable to JSON\n",
                      "markdown": "`\n  When embedding JSON inline inside HTML, serialize it to a JSON string in\n  Python and base64 encode that string to escape it so that it's safe to render\n  inside HTML.  Then on the JS side, base64 decode it and parse it as JSON.\n\n  Args:\n    obj: any Python object serializable to JSON\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/notebook/colab/util.py"
                },
                "region": {
                  "startLine": 87,
                  "startColumn": 12,
                  "endLine": 87,
                  "endColumn": 20,
                  "snippet": {
                    "text": "  \"\"\"Encode a Python object as a base64-endoded JSON string.\n\n  When embedding JSON inline inside HTML, serialize it to a JSON string in\n  Python and base64 encode that string to escape it so that it's safe to render\n  inside HTML.  Then on the JS side, base64 decode it and parse it as JSON.\n\n  Args:\n",
                    "rendered": {
                      "text": "  \"\"\"Encode a Python object as a base64-endoded JSON string.\n\n  When embedding JSON inline inside HTML, serialize it to a JSON string in\n  Python and base64 encode that string to escape it so that it's safe to render\n  inside HTML.  Then on the JS side, base64 decode it and parse it as JSON.\n\n  Args:\n",
                      "markdown": "`  \"\"\"Encode a Python object as a base64-endoded JSON string.\n\n  When embedding JSON inline inside HTML, serialize it to a JSON string in\n  Python and base64 encode that string to escape it so that it's safe to render\n  inside HTML.  Then on the JS side, base64 decode it and parse it as JSON.\n\n  Args:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/notebook/colab/util.py"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 6,
                  "endLine": 17,
                  "snippet": {
                    "text": "# limitations under the License.\n\"\"\"Utility for Colab TFMA renderer API.\"\"\"\n\nimport base64\nimport json\nfrom typing import Any, Callable, Dict, List, Optional, Union\nfrom google.colab import output\nfrom IPython import display\n",
                    "rendered": {
                      "text": "# limitations under the License.\n\"\"\"Utility for Colab TFMA renderer API.\"\"\"\n\nimport base64\nimport json\nfrom typing import Any, Callable, Dict, List, Optional, Union\nfrom google.colab import output\nfrom IPython import display\n",
                      "markdown": "`# limitations under the License.\n\"\"\"Utility for Colab TFMA renderer API.\"\"\"\n\nimport base64\nimport json\nfrom typing import Any, Callable, Dict, List, Optional, Union\nfrom google.colab import output\nfrom IPython import display\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/notebook/colab/renderer.py"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 9,
                  "endLine": 21,
                  "endColumn": 13,
                  "snippet": {
                    "text": "\n\n# See also `loadVulcanizedTemplate` in JS, which adjusts the script path\n# further at runtime, depending on the environment.\ndef get_trusted_html_for_vulcanized_js():\n  \"\"\"Returns a trusted string of HTML that will load vulcanized_tfma.js.\"\"\"\n  return \"\"\"\n",
                    "rendered": {
                      "text": "\n\n# See also `loadVulcanizedTemplate` in JS, which adjusts the script path\n# further at runtime, depending on the environment.\ndef get_trusted_html_for_vulcanized_js():\n  \"\"\"Returns a trusted string of HTML that will load vulcanized_tfma.js.\"\"\"\n  return \"\"\"\n",
                      "markdown": "`\n\n# See also `loadVulcanizedTemplate` in JS, which adjusts the script path\n# further at runtime, depending on the environment.\ndef get_trusted_html_for_vulcanized_js():\n  \"\"\"Returns a trusted string of HTML that will load vulcanized_tfma.js.\"\"\"\n  return \"\"\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/notebook/colab/renderer.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/notebook/colab/renderer.py"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 16,
                  "endLine": 53,
                  "endColumn": 22,
                  "snippet": {
                    "text": "def render_time_series(data: List[Dict[str, Union[Dict[Union[float, str], Any],\n                                                  str]]],\n                       config: Dict[str, bool]) -> None:\n  \"\"\"Renders the time series view in Colab.\n\n  Args:\n    data: A list of dictionary containing metrics for different evaluation runs.\n",
                    "rendered": {
                      "text": "def render_time_series(data: List[Dict[str, Union[Dict[Union[float, str], Any],\n                                                  str]]],\n                       config: Dict[str, bool]) -> None:\n  \"\"\"Renders the time series view in Colab.\n\n  Args:\n    data: A list of dictionary containing metrics for different evaluation runs.\n",
                      "markdown": "`def render_time_series(data: List[Dict[str, Union[Dict[Union[float, str], Any],\n                                                  str]]],\n                       config: Dict[str, bool]) -> None:\n  \"\"\"Renders the time series view in Colab.\n\n  Args:\n    data: A list of dictionary containing metrics for different evaluation runs.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/notebook/colab/renderer.py"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 60,
                  "endLine": 20,
                  "endColumn": 68,
                  "snippet": {
                    "text": "from tensorflow_model_analysis.notebook.colab import util\n\n\n# See also `loadVulcanizedTemplate` in JS, which adjusts the script path\n# further at runtime, depending on the environment.\ndef get_trusted_html_for_vulcanized_js():\n  \"\"\"Returns a trusted string of HTML that will load vulcanized_tfma.js.\"\"\"\n",
                    "rendered": {
                      "text": "from tensorflow_model_analysis.notebook.colab import util\n\n\n# See also `loadVulcanizedTemplate` in JS, which adjusts the script path\n# further at runtime, depending on the environment.\ndef get_trusted_html_for_vulcanized_js():\n  \"\"\"Returns a trusted string of HTML that will load vulcanized_tfma.js.\"\"\"\n",
                      "markdown": "`from tensorflow_model_analysis.notebook.colab import util\n\n\n# See also `loadVulcanizedTemplate` in JS, which adjusts the script path\n# further at runtime, depending on the environment.\ndef get_trusted_html_for_vulcanized_js():\n  \"\"\"Returns a trusted string of HTML that will load vulcanized_tfma.js.\"\"\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/notebook/colab/__init__.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/notebook/__init__.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/model_agnostic_eval/model_agnostic_predic"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the 'License');\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the 'License');\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the 'License');\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/model_agnostic_eval/model_agnostic_predic"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/model_agnostic_eval/model_agnostic_predic"
                },
                "region": {
                  "startLine": 191,
                  "startColumn": 5,
                  "endLine": 191,
                  "endColumn": 11,
                  "snippet": {
                    "text": "            len(split_features[key]))\n\n    # Sort out the examples into individual FPLs: one example -> one FPL.\n    # Sort them into Features, Predictions, or Labels according to the input\n    # config.\n    result = []\n    for i in range(num_examples):\n",
                    "rendered": {
                      "text": "            len(split_features[key]))\n\n    # Sort out the examples into individual FPLs: one example -> one FPL.\n    # Sort them into Features, Predictions, or Labels according to the input\n    # config.\n    result = []\n    for i in range(num_examples):\n",
                      "markdown": "`            len(split_features[key]))\n\n    # Sort out the examples into individual FPLs: one example -> one FPL.\n    # Sort them into Features, Predictions, or Labels according to the input\n    # config.\n    result = []\n    for i in range(num_examples):\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/model_agnostic_eval/model_agnostic_predic"
                },
                "region": {
                  "startLine": 190,
                  "startColumn": 5,
                  "endLine": 190,
                  "endColumn": 11,
                  "snippet": {
                    "text": "            'examples. Key %s unexpectedly had %s elements.' % key,\n            len(split_features[key]))\n\n    # Sort out the examples into individual FPLs: one example -> one FPL.\n    # Sort them into Features, Predictions, or Labels according to the input\n    # config.\n    result = []\n",
                    "rendered": {
                      "text": "            'examples. Key %s unexpectedly had %s elements.' % key,\n            len(split_features[key]))\n\n    # Sort out the examples into individual FPLs: one example -> one FPL.\n    # Sort them into Features, Predictions, or Labels according to the input\n    # config.\n    result = []\n",
                      "markdown": "`            'examples. Key %s unexpectedly had %s elements.' % key,\n            len(split_features[key]))\n\n    # Sort out the examples into individual FPLs: one example -> one FPL.\n    # Sort them into Features, Predictions, or Labels according to the input\n    # config.\n    result = []\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/model_agnostic_eval/model_agnostic_extrac"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/model_agnostic_eval/model_agnostic_extrac"
                },
                "region": {
                  "startLine": 152,
                  "startColumn": 10,
                  "endLine": 152,
                  "endColumn": 18,
                  "snippet": {
                    "text": "      yield element_copy\n\n  def finish_bundle(self):\n    # Must update distribution in finish_bundle instead of setup\n    # because Beam metrics are not supported in setup.\n    if self._model_load_seconds is not None:\n      self._model_load_seconds_distribution.update(self._model_load_seconds)\n",
                    "rendered": {
                      "text": "      yield element_copy\n\n  def finish_bundle(self):\n    # Must update distribution in finish_bundle instead of setup\n    # because Beam metrics are not supported in setup.\n    if self._model_load_seconds is not None:\n      self._model_load_seconds_distribution.update(self._model_load_seconds)\n",
                      "markdown": "`      yield element_copy\n\n  def finish_bundle(self):\n    # Must update distribution in finish_bundle instead of setup\n    # because Beam metrics are not supported in setup.\n    if self._model_load_seconds is not None:\n      self._model_load_seconds_distribution.update(self._model_load_seconds)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/model_agnostic_eval/model_agnostic_extrac"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/model_agnostic_eval/model_agnostic_evalua"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the 'License');\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the 'License');\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the 'License');\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/model_agnostic_eval/model_agnostic_evalua"
                },
                "region": {
                  "startLine": 200,
                  "startColumn": 29,
                  "endLine": 200,
                  "endColumn": 35,
                  "snippet": {
                    "text": "          ])\n      ]\n\n      # Set up the metrics we wish to calculate via a metric callback. In\n      # particular, this metric calculates the mean and sum of all labels.\n      eval_shared_model = types.EvalSharedModel(\n          add_metrics_callbacks=[add_mean_callback],\n",
                    "rendered": {
                      "text": "          ])\n      ]\n\n      # Set up the metrics we wish to calculate via a metric callback. In\n      # particular, this metric calculates the mean and sum of all labels.\n      eval_shared_model = types.EvalSharedModel(\n          add_metrics_callbacks=[add_mean_callback],\n",
                      "markdown": "`          ])\n      ]\n\n      # Set up the metrics we wish to calculate via a metric callback. In\n      # particular, this metric calculates the mean and sum of all labels.\n      eval_shared_model = types.EvalSharedModel(\n          add_metrics_callbacks=[add_mean_callback],\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/model_agnostic_eval/model_agnostic_evalua"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/evaluators/query_metrics/__init__.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/evaluators/poisson_bootstrap_test.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/evaluators/poisson_bootstrap.py"
                },
                "region": {
                  "startLine": 101,
                  "startColumn": 6,
                  "endLine": 101,
                  "endColumn": 49,
                  "snippet": {
                    "text": "          _BootstrapCombineFn(computations_combine_fn,\n                              seed)).with_hot_key_fanout(hot_key_fanout)\n      |\n      'AddSampledDerivedCrossSliceAndDiffMetrics' >> derived_metrics_ptransform\n      | 'AddSampleIdToValue' >> beam.MapTuple(\n          _add_sample_id, sample_id=sample_id))\n\n",
                    "rendered": {
                      "text": "          _BootstrapCombineFn(computations_combine_fn,\n                              seed)).with_hot_key_fanout(hot_key_fanout)\n      |\n      'AddSampledDerivedCrossSliceAndDiffMetrics' >> derived_metrics_ptransform\n      | 'AddSampleIdToValue' >> beam.MapTuple(\n          _add_sample_id, sample_id=sample_id))\n\n",
                      "markdown": "`          _BootstrapCombineFn(computations_combine_fn,\n                              seed)).with_hot_key_fanout(hot_key_fanout)\n      |\n      'AddSampledDerivedCrossSliceAndDiffMetrics' >> derived_metrics_ptransform\n      | 'AddSampleIdToValue' >> beam.MapTuple(\n          _add_sample_id, sample_id=sample_id))\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/evaluators/poisson_bootstrap.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/evaluators/metrics_validator_test.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/evaluators/metrics_validator_test.py"
                },
                "region": {
                  "startLine": 881,
                  "startColumn": 25,
                  "endLine": 881,
                  "endColumn": 31,
                  "snippet": {
                    "text": "                metrics=[\n                    config_pb2.MetricConfig(\n                        class_name='MeanPrediction',\n                        # Diff = -.333 > 0, NOT OK.\n                        threshold=threshold if slicing_specs is None else None,\n                        per_slice_thresholds=[\n                            config_pb2.PerSliceMetricThreshold(\n",
                    "rendered": {
                      "text": "                metrics=[\n                    config_pb2.MetricConfig(\n                        class_name='MeanPrediction',\n                        # Diff = -.333 > 0, NOT OK.\n                        threshold=threshold if slicing_specs is None else None,\n                        per_slice_thresholds=[\n                            config_pb2.PerSliceMetricThreshold(\n",
                      "markdown": "`                metrics=[\n                    config_pb2.MetricConfig(\n                        class_name='MeanPrediction',\n                        # Diff = -.333 > 0, NOT OK.\n                        threshold=threshold if slicing_specs is None else None,\n                        per_slice_thresholds=[\n                            config_pb2.PerSliceMetricThreshold(\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/evaluators/metrics_validator_test.py"
                },
                "region": {
                  "startLine": 794,
                  "startColumn": 25,
                  "endLine": 794,
                  "endColumn": 31,
                  "snippet": {
                    "text": "                        ]),\n                    config_pb2.MetricConfig(\n                        class_name='MeanLabel',\n                        # Diff = -.333 == -.333, OK.\n                        threshold=threshold2 if slicing_specs is None else None,\n                        per_slice_thresholds=[\n                            config_pb2.PerSliceMetricThreshold(\n",
                    "rendered": {
                      "text": "                        ]),\n                    config_pb2.MetricConfig(\n                        class_name='MeanLabel',\n                        # Diff = -.333 == -.333, OK.\n                        threshold=threshold2 if slicing_specs is None else None,\n                        per_slice_thresholds=[\n                            config_pb2.PerSliceMetricThreshold(\n",
                      "markdown": "`                        ]),\n                    config_pb2.MetricConfig(\n                        class_name='MeanLabel',\n                        # Diff = -.333 == -.333, OK.\n                        threshold=threshold2 if slicing_specs is None else None,\n                        per_slice_thresholds=[\n                            config_pb2.PerSliceMetricThreshold(\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/evaluators/metrics_validator_test.py"
                },
                "region": {
                  "startLine": 785,
                  "startColumn": 25,
                  "endLine": 785,
                  "endColumn": 31,
                  "snippet": {
                    "text": "                metrics=[\n                    config_pb2.MetricConfig(\n                        class_name='MeanPrediction',\n                        # Diff = -.333 == -.333, OK.\n                        threshold=threshold1 if slicing_specs is None else None,\n                        per_slice_thresholds=[\n                            config_pb2.PerSliceMetricThreshold(\n",
                    "rendered": {
                      "text": "                metrics=[\n                    config_pb2.MetricConfig(\n                        class_name='MeanPrediction',\n                        # Diff = -.333 == -.333, OK.\n                        threshold=threshold1 if slicing_specs is None else None,\n                        per_slice_thresholds=[\n                            config_pb2.PerSliceMetricThreshold(\n",
                      "markdown": "`                metrics=[\n                    config_pb2.MetricConfig(\n                        class_name='MeanPrediction',\n                        # Diff = -.333 == -.333, OK.\n                        threshold=threshold1 if slicing_specs is None else None,\n                        per_slice_thresholds=[\n                            config_pb2.PerSliceMetricThreshold(\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/evaluators/metrics_validator_test.py"
                },
                "region": {
                  "startLine": 730,
                  "startColumn": 25,
                  "endLine": 730,
                  "endColumn": 31,
                  "snippet": {
                    "text": "                metrics=[\n                    config_pb2.MetricConfig(\n                        class_name='MeanPrediction',\n                        # Diff = -.333 > -1, OK.\n                        threshold=threshold if slicing_specs is None else None,\n                        per_slice_thresholds=[\n                            config_pb2.PerSliceMetricThreshold(\n",
                    "rendered": {
                      "text": "                metrics=[\n                    config_pb2.MetricConfig(\n                        class_name='MeanPrediction',\n                        # Diff = -.333 > -1, OK.\n                        threshold=threshold if slicing_specs is None else None,\n                        per_slice_thresholds=[\n                            config_pb2.PerSliceMetricThreshold(\n",
                      "markdown": "`                metrics=[\n                    config_pb2.MetricConfig(\n                        class_name='MeanPrediction',\n                        # Diff = -.333 > -1, OK.\n                        threshold=threshold if slicing_specs is None else None,\n                        per_slice_thresholds=[\n                            config_pb2.PerSliceMetricThreshold(\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/evaluators/metrics_validator_test.py"
                },
                "region": {
                  "startLine": 688,
                  "startColumn": 25,
                  "endLine": 688,
                  "endColumn": 31,
                  "snippet": {
                    "text": "                metrics=[\n                    config_pb2.MetricConfig(\n                        class_name='MeanPrediction',\n                        # Diff = -.333\n                        # Diff% = -.333/.333 = -100% < 0%, OK.\n                        threshold=threshold if slicing_specs is None else None,\n                        per_slice_thresholds=[\n",
                    "rendered": {
                      "text": "                metrics=[\n                    config_pb2.MetricConfig(\n                        class_name='MeanPrediction',\n                        # Diff = -.333\n                        # Diff% = -.333/.333 = -100% < 0%, OK.\n                        threshold=threshold if slicing_specs is None else None,\n                        per_slice_thresholds=[\n",
                      "markdown": "`                metrics=[\n                    config_pb2.MetricConfig(\n                        class_name='MeanPrediction',\n                        # Diff = -.333\n                        # Diff% = -.333/.333 = -100% < 0%, OK.\n                        threshold=threshold if slicing_specs is None else None,\n                        per_slice_thresholds=[\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/evaluators/metrics_validator_test.py"
                },
                "region": {
                  "startLine": 647,
                  "startColumn": 25,
                  "endLine": 647,
                  "endColumn": 31,
                  "snippet": {
                    "text": "                metrics=[\n                    config_pb2.MetricConfig(\n                        class_name='MeanPrediction',\n                        # Diff = 0 - .333 = -.333 < 0, OK.\n                        threshold=threshold if slicing_specs is None else None,\n                        per_slice_thresholds=[\n                            config_pb2.PerSliceMetricThreshold(\n",
                    "rendered": {
                      "text": "                metrics=[\n                    config_pb2.MetricConfig(\n                        class_name='MeanPrediction',\n                        # Diff = 0 - .333 = -.333 < 0, OK.\n                        threshold=threshold if slicing_specs is None else None,\n                        per_slice_thresholds=[\n                            config_pb2.PerSliceMetricThreshold(\n",
                      "markdown": "`                metrics=[\n                    config_pb2.MetricConfig(\n                        class_name='MeanPrediction',\n                        # Diff = 0 - .333 = -.333 < 0, OK.\n                        threshold=threshold if slicing_specs is None else None,\n                        per_slice_thresholds=[\n                            config_pb2.PerSliceMetricThreshold(\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/evaluators/metrics_validator_test.py"
                },
                "region": {
                  "startLine": 605,
                  "startColumn": 25,
                  "endLine": 605,
                  "endColumn": 31,
                  "snippet": {
                    "text": "                metrics=[\n                    config_pb2.MetricConfig(\n                        class_name='MeanPrediction',\n                        # Diff = -.333\n                        # Diff% = -.333/.333 = -100% < -200%, NOT OK.\n                        threshold=threshold if slicing_specs is None else None,\n                        per_slice_thresholds=[\n",
                    "rendered": {
                      "text": "                metrics=[\n                    config_pb2.MetricConfig(\n                        class_name='MeanPrediction',\n                        # Diff = -.333\n                        # Diff% = -.333/.333 = -100% < -200%, NOT OK.\n                        threshold=threshold if slicing_specs is None else None,\n                        per_slice_thresholds=[\n",
                      "markdown": "`                metrics=[\n                    config_pb2.MetricConfig(\n                        class_name='MeanPrediction',\n                        # Diff = -.333\n                        # Diff% = -.333/.333 = -100% < -200%, NOT OK.\n                        threshold=threshold if slicing_specs is None else None,\n                        per_slice_thresholds=[\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/evaluators/metrics_validator_test.py"
                },
                "region": {
                  "startLine": 564,
                  "startColumn": 25,
                  "endLine": 564,
                  "endColumn": 31,
                  "snippet": {
                    "text": "                metrics=[\n                    config_pb2.MetricConfig(\n                        class_name='MeanPrediction',\n                        # Diff = 0 - .333 = -.333 < -1, NOT OK.\n                        threshold=threshold if slicing_specs is None else None,\n                        per_slice_thresholds=[\n                            config_pb2.PerSliceMetricThreshold(\n",
                    "rendered": {
                      "text": "                metrics=[\n                    config_pb2.MetricConfig(\n                        class_name='MeanPrediction',\n                        # Diff = 0 - .333 = -.333 < -1, NOT OK.\n                        threshold=threshold if slicing_specs is None else None,\n                        per_slice_thresholds=[\n                            config_pb2.PerSliceMetricThreshold(\n",
                      "markdown": "`                metrics=[\n                    config_pb2.MetricConfig(\n                        class_name='MeanPrediction',\n                        # Diff = 0 - .333 = -.333 < -1, NOT OK.\n                        threshold=threshold if slicing_specs is None else None,\n                        per_slice_thresholds=[\n                            config_pb2.PerSliceMetricThreshold(\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/evaluators/metrics_validator.py"
                },
                "region": {
                  "startLine": 84,
                  "startColumn": 14,
                  "endLine": 84,
                  "endColumn": 20,
                  "snippet": {
                    "text": "      if threshold.direction == config_pb2.MetricDirection.LOWER_IS_BETTER:\n        return diff <= absolute and ratio <= relative\n      elif threshold.direction == config_pb2.MetricDirection.HIGHER_IS_BETTER:\n        return diff >= absolute and ratio >= relative\n    else:\n      raise ValueError('Unknown threshold: {}'.format(threshold))\n\n",
                    "rendered": {
                      "text": "      if threshold.direction == config_pb2.MetricDirection.LOWER_IS_BETTER:\n        return diff <= absolute and ratio <= relative\n      elif threshold.direction == config_pb2.MetricDirection.HIGHER_IS_BETTER:\n        return diff >= absolute and ratio >= relative\n    else:\n      raise ValueError('Unknown threshold: {}'.format(threshold))\n\n",
                      "markdown": "`      if threshold.direction == config_pb2.MetricDirection.LOWER_IS_BETTER:\n        return diff <= absolute and ratio <= relative\n      elif threshold.direction == config_pb2.MetricDirection.HIGHER_IS_BETTER:\n        return diff >= absolute and ratio >= relative\n    else:\n      raise ValueError('Unknown threshold: {}'.format(threshold))\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/evaluators/metrics_validator.py"
                },
                "region": {
                  "startLine": 82,
                  "startColumn": 14,
                  "endLine": 82,
                  "endColumn": 20,
                  "snippet": {
                    "text": "      if threshold.HasField('relative'):\n        relative = threshold.relative.value\n      if threshold.direction == config_pb2.MetricDirection.LOWER_IS_BETTER:\n        return diff <= absolute and ratio <= relative\n      elif threshold.direction == config_pb2.MetricDirection.HIGHER_IS_BETTER:\n        return diff >= absolute and ratio >= relative\n    else:\n",
                    "rendered": {
                      "text": "      if threshold.HasField('relative'):\n        relative = threshold.relative.value\n      if threshold.direction == config_pb2.MetricDirection.LOWER_IS_BETTER:\n        return diff <= absolute and ratio <= relative\n      elif threshold.direction == config_pb2.MetricDirection.HIGHER_IS_BETTER:\n        return diff >= absolute and ratio >= relative\n    else:\n",
                      "markdown": "`      if threshold.HasField('relative'):\n        relative = threshold.relative.value\n      if threshold.direction == config_pb2.MetricDirection.LOWER_IS_BETTER:\n        return diff <= absolute and ratio <= relative\n      elif threshold.direction == config_pb2.MetricDirection.HIGHER_IS_BETTER:\n        return diff >= absolute and ratio >= relative\n    else:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/evaluators/metrics_validator.py"
                },
                "region": {
                  "startLine": 69,
                  "startColumn": 15,
                  "endLine": 69,
                  "endColumn": 21,
                  "snippet": {
                    "text": "      if math.isclose(metric_baseline, 0.0):\n        ratio = float('nan')\n      else:\n        ratio = diff / metric_baseline\n      if threshold.direction == config_pb2.MetricDirection.LOWER_IS_BETTER:\n        absolute, relative = np.inf, np.inf\n      elif threshold.direction == config_pb2.MetricDirection.HIGHER_IS_BETTER:\n",
                    "rendered": {
                      "text": "      if math.isclose(metric_baseline, 0.0):\n        ratio = float('nan')\n      else:\n        ratio = diff / metric_baseline\n      if threshold.direction == config_pb2.MetricDirection.LOWER_IS_BETTER:\n        absolute, relative = np.inf, np.inf\n      elif threshold.direction == config_pb2.MetricDirection.HIGHER_IS_BETTER:\n",
                      "markdown": "`      if math.isclose(metric_baseline, 0.0):\n        ratio = float('nan')\n      else:\n        ratio = diff / metric_baseline\n      if threshold.direction == config_pb2.MetricDirection.LOWER_IS_BETTER:\n        absolute, relative = np.inf, np.inf\n      elif threshold.direction == config_pb2.MetricDirection.HIGHER_IS_BETTER:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/evaluators/metrics_validator.py"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 5,
                  "endLine": 63,
                  "endColumn": 11,
                  "snippet": {
                    "text": "        upper_bound = threshold.upper_bound.value\n      return metric >= lower_bound and metric <= upper_bound\n    elif isinstance(threshold, config_pb2.GenericChangeThreshold):\n      diff = metric\n      metric_baseline = float(\n          metrics[key.make_baseline_key(baseline_model_name)])\n      if math.isclose(metric_baseline, 0.0):\n",
                    "rendered": {
                      "text": "        upper_bound = threshold.upper_bound.value\n      return metric >= lower_bound and metric <= upper_bound\n    elif isinstance(threshold, config_pb2.GenericChangeThreshold):\n      diff = metric\n      metric_baseline = float(\n          metrics[key.make_baseline_key(baseline_model_name)])\n      if math.isclose(metric_baseline, 0.0):\n",
                      "markdown": "`        upper_bound = threshold.upper_bound.value\n      return metric >= lower_bound and metric <= upper_bound\n    elif isinstance(threshold, config_pb2.GenericChangeThreshold):\n      diff = metric\n      metric_baseline = float(\n          metrics[key.make_baseline_key(baseline_model_name)])\n      if math.isclose(metric_baseline, 0.0):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/evaluators/metrics_validator.py"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 3,
                  "endLine": 42,
                  "endColumn": 9,
                  "snippet": {
                    "text": "                               Any]], eval_config: config_pb2.EvalConfig\n) -> validation_result_pb2.ValidationResult:\n  \"\"\"Check the metrics and check whether they should be validated.\"\"\"\n  # Find out which model is baseline.\n  baseline_spec = model_util.get_baseline_model_spec(eval_config)\n  baseline_model_name = baseline_spec.name if baseline_spec else None\n\n",
                    "rendered": {
                      "text": "                               Any]], eval_config: config_pb2.EvalConfig\n) -> validation_result_pb2.ValidationResult:\n  \"\"\"Check the metrics and check whether they should be validated.\"\"\"\n  # Find out which model is baseline.\n  baseline_spec = model_util.get_baseline_model_spec(eval_config)\n  baseline_model_name = baseline_spec.name if baseline_spec else None\n\n",
                      "markdown": "`                               Any]], eval_config: config_pb2.EvalConfig\n) -> validation_result_pb2.ValidationResult:\n  \"\"\"Check the metrics and check whether they should be validated.\"\"\"\n  # Find out which model is baseline.\n  baseline_spec = model_util.get_baseline_model_spec(eval_config)\n  baseline_model_name = baseline_spec.name if baseline_spec else None\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/evaluators/metrics_validator.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/evaluators/metrics_plots_and_validations_"
                },
                "region": {
                  "startLine": 795,
                  "startColumn": 15,
                  "endLine": 795,
                  "endColumn": 19,
                  "snippet": {
                    "text": "    # NOTE: This test does not actually test that confidence intervals are\n    #   accurate it only tests that the proto output by the test is well formed.\n    #   This test would pass if the confidence interval implementation did\n    #   nothing at all except compute the unsampled value.\n    temp_export_dir = self._getExportDir()\n    _, export_dir = (\n        fixed_prediction_estimator_extra_fields\n",
                    "rendered": {
                      "text": "    # NOTE: This test does not actually test that confidence intervals are\n    #   accurate it only tests that the proto output by the test is well formed.\n    #   This test would pass if the confidence interval implementation did\n    #   nothing at all except compute the unsampled value.\n    temp_export_dir = self._getExportDir()\n    _, export_dir = (\n        fixed_prediction_estimator_extra_fields\n",
                      "markdown": "`    # NOTE: This test does not actually test that confidence intervals are\n    #   accurate it only tests that the proto output by the test is well formed.\n    #   This test would pass if the confidence interval implementation did\n    #   nothing at all except compute the unsampled value.\n    temp_export_dir = self._getExportDir()\n    _, export_dir = (\n        fixed_prediction_estimator_extra_fields\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/evaluators/metrics_plots_and_validations_"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/evaluators/metrics_plots_and_validations_"
                },
                "region": {
                  "startLine": 1178,
                  "startColumn": 26,
                  "endLine": 1178,
                  "endColumn": 32,
                  "snippet": {
                    "text": "          self.assertLen(got, 1)\n          got_slice_key, got_metrics = got[0]\n          self.assertEqual(got_slice_key, ())\n          # check only the diff metrics.\n          weighted_example_count_key = metric_types.MetricKey(\n              name='weighted_example_count',\n              model_name='candidate',\n",
                    "rendered": {
                      "text": "          self.assertLen(got, 1)\n          got_slice_key, got_metrics = got[0]\n          self.assertEqual(got_slice_key, ())\n          # check only the diff metrics.\n          weighted_example_count_key = metric_types.MetricKey(\n              name='weighted_example_count',\n              model_name='candidate',\n",
                      "markdown": "`          self.assertLen(got, 1)\n          got_slice_key, got_metrics = got[0]\n          self.assertEqual(got_slice_key, ())\n          # check only the diff metrics.\n          weighted_example_count_key = metric_types.MetricKey(\n              name='weighted_example_count',\n              model_name='candidate',\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/evaluators/metrics_plots_and_validations_"
                },
                "region": {
                  "startLine": 568,
                  "startColumn": 26,
                  "endLine": 568,
                  "endColumn": 32,
                  "snippet": {
                    "text": "          self.assertLen(got, 1)\n          got_slice_key, got_metrics = got[0]\n          self.assertEqual(got_slice_key, ())\n          # check only the diff metrics.\n          weighted_example_count_key = metric_types.MetricKey(\n              name='weighted_example_count',\n              model_name='candidate',\n",
                    "rendered": {
                      "text": "          self.assertLen(got, 1)\n          got_slice_key, got_metrics = got[0]\n          self.assertEqual(got_slice_key, ())\n          # check only the diff metrics.\n          weighted_example_count_key = metric_types.MetricKey(\n              name='weighted_example_count',\n              model_name='candidate',\n",
                      "markdown": "`          self.assertLen(got, 1)\n          got_slice_key, got_metrics = got[0]\n          self.assertEqual(got_slice_key, ())\n          # check only the diff metrics.\n          weighted_example_count_key = metric_types.MetricKey(\n              name='weighted_example_count',\n              model_name='candidate',\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/evaluators/metrics_plots_and_validations_"
                },
                "region": {
                  "startLine": 289,
                  "startColumn": 25,
                  "endLine": 289,
                  "endColumn": 31,
                  "snippet": {
                    "text": "                        class_name='MeanPrediction',\n                        # -.01 < 0 < .01, OK.\n                        # Diff% = -.333/.333 = -100% < -99%, OK.\n                        # Diff = 0 - .333 = -.333 < 0, OK.\n                        threshold=config_pb2.MetricThreshold(\n                            value_threshold=config_pb2.GenericValueThreshold(\n                                upper_bound={'value': .01},\n",
                    "rendered": {
                      "text": "                        class_name='MeanPrediction',\n                        # -.01 < 0 < .01, OK.\n                        # Diff% = -.333/.333 = -100% < -99%, OK.\n                        # Diff = 0 - .333 = -.333 < 0, OK.\n                        threshold=config_pb2.MetricThreshold(\n                            value_threshold=config_pb2.GenericValueThreshold(\n                                upper_bound={'value': .01},\n",
                      "markdown": "`                        class_name='MeanPrediction',\n                        # -.01 < 0 < .01, OK.\n                        # Diff% = -.333/.333 = -100% < -99%, OK.\n                        # Diff = 0 - .333 = -.333 < 0, OK.\n                        threshold=config_pb2.MetricThreshold(\n                            value_threshold=config_pb2.GenericValueThreshold(\n                                upper_bound={'value': .01},\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/evaluators/metrics_plots_and_validations_"
                },
                "region": {
                  "startLine": 127,
                  "startColumn": 55,
                  "endLine": 127,
                  "endColumn": 59,
                  "snippet": {
                    "text": "  those combiners have run. Filtering is required because\n  DerivedMetricComputations and CrossSliceMetricComputations typically include\n  copies of the MetricComputations that they depend on in order to avoid having\n  to pre-construct and pass around all the dependencies at the time the metrics\n  are constructed. Instead, each derived metric creates a version of the metric\n  it depends on and then this code de-dups computations that are identical so\n  only one gets computed.\n",
                    "rendered": {
                      "text": "  those combiners have run. Filtering is required because\n  DerivedMetricComputations and CrossSliceMetricComputations typically include\n  copies of the MetricComputations that they depend on in order to avoid having\n  to pre-construct and pass around all the dependencies at the time the metrics\n  are constructed. Instead, each derived metric creates a version of the metric\n  it depends on and then this code de-dups computations that are identical so\n  only one gets computed.\n",
                      "markdown": "`  those combiners have run. Filtering is required because\n  DerivedMetricComputations and CrossSliceMetricComputations typically include\n  copies of the MetricComputations that they depend on in order to avoid having\n  to pre-construct and pass around all the dependencies at the time the metrics\n  are constructed. Instead, each derived metric creates a version of the metric\n  it depends on and then this code de-dups computations that are identical so\n  only one gets computed.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/evaluators/metrics_plots_and_validations_"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/evaluators/metrics_plots_and_validations_"
                },
                "region": {
                  "startLine": 744,
                  "startColumn": 3,
                  "endLine": 744,
                  "endColumn": 9,
                  "snippet": {
                    "text": "          metrics_specs, eval_config=eval_config, schema=schema))\n  computations.extend(metric_computations.non_derived_computations)\n\n  # Find out which model is baseline.\n  baseline_spec = model_util.get_baseline_model_spec(eval_config)\n  baseline_model_name = baseline_spec.name if baseline_spec else None\n\n",
                    "rendered": {
                      "text": "          metrics_specs, eval_config=eval_config, schema=schema))\n  computations.extend(metric_computations.non_derived_computations)\n\n  # Find out which model is baseline.\n  baseline_spec = model_util.get_baseline_model_spec(eval_config)\n  baseline_model_name = baseline_spec.name if baseline_spec else None\n\n",
                      "markdown": "`          metrics_specs, eval_config=eval_config, schema=schema))\n  computations.extend(metric_computations.non_derived_computations)\n\n  # Find out which model is baseline.\n  baseline_spec = model_util.get_baseline_model_spec(eval_config)\n  baseline_model_name = baseline_spec.name if baseline_spec else None\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/evaluators/metrics_plots_and_validations_"
                },
                "region": {
                  "startLine": 578,
                  "startColumn": 46,
                  "endLine": 578,
                  "endColumn": 52,
                  "snippet": {
                    "text": "        if _is_private_metrics(k):\n          continue\n        if k.is_diff:\n          # For metrics which directly produce diff metrics, we skip this step\n          continue\n        if k.model_name != baseline_model_name and k.make_baseline_key(\n            baseline_model_name) in result:\n",
                    "rendered": {
                      "text": "        if _is_private_metrics(k):\n          continue\n        if k.is_diff:\n          # For metrics which directly produce diff metrics, we skip this step\n          continue\n        if k.model_name != baseline_model_name and k.make_baseline_key(\n            baseline_model_name) in result:\n",
                      "markdown": "`        if _is_private_metrics(k):\n          continue\n        if k.is_diff:\n          # For metrics which directly produce diff metrics, we skip this step\n          continue\n        if k.model_name != baseline_model_name and k.make_baseline_key(\n            baseline_model_name) in result:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/evaluators/metrics_plots_and_validations_"
                },
                "region": {
                  "startLine": 567,
                  "startColumn": 10,
                  "endLine": 567,
                  "endColumn": 16,
                  "snippet": {
                    "text": "                            Dict[metric_types.MetricKey, Any]],\n      baseline_model_name: Optional[str],\n  ) -> Tuple[slicer.SliceKeyType, Dict[metric_types.MetricKey, Any]]:\n    \"\"\"Add diff metrics if there is a baseline model.\"\"\"\n\n    slice_key, metrics = sliced_metrics\n    result = copy.copy(metrics)\n",
                    "rendered": {
                      "text": "                            Dict[metric_types.MetricKey, Any]],\n      baseline_model_name: Optional[str],\n  ) -> Tuple[slicer.SliceKeyType, Dict[metric_types.MetricKey, Any]]:\n    \"\"\"Add diff metrics if there is a baseline model.\"\"\"\n\n    slice_key, metrics = sliced_metrics\n    result = copy.copy(metrics)\n",
                      "markdown": "`                            Dict[metric_types.MetricKey, Any]],\n      baseline_model_name: Optional[str],\n  ) -> Tuple[slicer.SliceKeyType, Dict[metric_types.MetricKey, Any]]:\n    \"\"\"Add diff metrics if there is a baseline model.\"\"\"\n\n    slice_key, metrics = sliced_metrics\n    result = copy.copy(metrics)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/evaluators/metrics_plots_and_validations_"
                },
                "region": {
                  "startLine": 547,
                  "startColumn": 59,
                  "endLine": 547,
                  "endColumn": 65,
                  "snippet": {
                    "text": "\n  Returns:\n    PCollection of sliced dict of metrics, containing all base metrics (that are\n    non-private), derived metrics, cross-slice metrics, and diff metrics.\n  \"\"\"\n\n  def add_derived_metrics(\n",
                    "rendered": {
                      "text": "\n  Returns:\n    PCollection of sliced dict of metrics, containing all base metrics (that are\n    non-private), derived metrics, cross-slice metrics, and diff metrics.\n  \"\"\"\n\n  def add_derived_metrics(\n",
                      "markdown": "`\n  Returns:\n    PCollection of sliced dict of metrics, containing all base metrics (that are\n    non-private), derived metrics, cross-slice metrics, and diff metrics.\n  \"\"\"\n\n  def add_derived_metrics(\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/evaluators/metrics_plots_and_validations_"
                },
                "region": {
                  "startLine": 539,
                  "startColumn": 64,
                  "endLine": 539,
                  "endColumn": 70,
                  "snippet": {
                    "text": "\n  Args:\n    sliced_base_metrics: A PCollection of per-slice MetricsDicts containing the\n      metrics to be used as inputs for derived, cross-slice, and diff metrics.\n    derived_computations: List of DerivedMetricComputations.\n    cross_slice_computations: List of CrossSliceMetricComputation.\n    cross_slice_specs: List of CrossSlicingSpec.\n",
                    "rendered": {
                      "text": "\n  Args:\n    sliced_base_metrics: A PCollection of per-slice MetricsDicts containing the\n      metrics to be used as inputs for derived, cross-slice, and diff metrics.\n    derived_computations: List of DerivedMetricComputations.\n    cross_slice_computations: List of CrossSliceMetricComputation.\n    cross_slice_specs: List of CrossSlicingSpec.\n",
                      "markdown": "`\n  Args:\n    sliced_base_metrics: A PCollection of per-slice MetricsDicts containing the\n      metrics to be used as inputs for derived, cross-slice, and diff metrics.\n    derived_computations: List of DerivedMetricComputations.\n    cross_slice_computations: List of CrossSliceMetricComputation.\n    cross_slice_specs: List of CrossSlicingSpec.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/evaluators/metrics_plots_and_validations_"
                },
                "region": {
                  "startLine": 532,
                  "startColumn": 60,
                  "endLine": 532,
                  "endColumn": 66,
                  "snippet": {
                    "text": "  \"\"\"A PTransform for adding cross slice and derived metrics.\n\n  This PTransform uses the input PCollection of sliced metrics to compute\n  derived metrics, cross-slice diff metrics, and cross-model diff metrics, in\n  that order. This means that cross-slice metrics are computed for base and\n  derived metrics, and that cross-model diffs are computed for base and derived\n  metrics corresponding to both single slices and cross-slice pairs.\n",
                    "rendered": {
                      "text": "  \"\"\"A PTransform for adding cross slice and derived metrics.\n\n  This PTransform uses the input PCollection of sliced metrics to compute\n  derived metrics, cross-slice diff metrics, and cross-model diff metrics, in\n  that order. This means that cross-slice metrics are computed for base and\n  derived metrics, and that cross-model diffs are computed for base and derived\n  metrics corresponding to both single slices and cross-slice pairs.\n",
                      "markdown": "`  \"\"\"A PTransform for adding cross slice and derived metrics.\n\n  This PTransform uses the input PCollection of sliced metrics to compute\n  derived metrics, cross-slice diff metrics, and cross-model diff metrics, in\n  that order. This means that cross-slice metrics are computed for base and\n  derived metrics, and that cross-model diffs are computed for base and derived\n  metrics corresponding to both single slices and cross-slice pairs.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/evaluators/metrics_plots_and_validations_"
                },
                "region": {
                  "startLine": 532,
                  "startColumn": 30,
                  "endLine": 532,
                  "endColumn": 36,
                  "snippet": {
                    "text": "  \"\"\"A PTransform for adding cross slice and derived metrics.\n\n  This PTransform uses the input PCollection of sliced metrics to compute\n  derived metrics, cross-slice diff metrics, and cross-model diff metrics, in\n  that order. This means that cross-slice metrics are computed for base and\n  derived metrics, and that cross-model diffs are computed for base and derived\n  metrics corresponding to both single slices and cross-slice pairs.\n",
                    "rendered": {
                      "text": "  \"\"\"A PTransform for adding cross slice and derived metrics.\n\n  This PTransform uses the input PCollection of sliced metrics to compute\n  derived metrics, cross-slice diff metrics, and cross-model diff metrics, in\n  that order. This means that cross-slice metrics are computed for base and\n  derived metrics, and that cross-model diffs are computed for base and derived\n  metrics corresponding to both single slices and cross-slice pairs.\n",
                      "markdown": "`  \"\"\"A PTransform for adding cross slice and derived metrics.\n\n  This PTransform uses the input PCollection of sliced metrics to compute\n  derived metrics, cross-slice diff metrics, and cross-model diff metrics, in\n  that order. This means that cross-slice metrics are computed for base and\n  derived metrics, and that cross-model diffs are computed for base and derived\n  metrics corresponding to both single slices and cross-slice pairs.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/evaluators/metrics_plots_and_validations_"
                },
                "region": {
                  "startLine": 127,
                  "startColumn": 62,
                  "endLine": 127,
                  "endColumn": 68,
                  "snippet": {
                    "text": "  those combiners have run. Filtering is required because\n  DerivedMetricComputations and CrossSliceMetricComputations typically include\n  copies of the MetricComputations that they depend on in order to avoid having\n  to pre-construct and pass around all the dependencies at the time the metrics\n  are constructed. Instead, each derived metric creates a version of the metric\n  it depends on and then this code de-dups computations that are identical so\n  only one gets computed.\n",
                    "rendered": {
                      "text": "  those combiners have run. Filtering is required because\n  DerivedMetricComputations and CrossSliceMetricComputations typically include\n  copies of the MetricComputations that they depend on in order to avoid having\n  to pre-construct and pass around all the dependencies at the time the metrics\n  are constructed. Instead, each derived metric creates a version of the metric\n  it depends on and then this code de-dups computations that are identical so\n  only one gets computed.\n",
                      "markdown": "`  those combiners have run. Filtering is required because\n  DerivedMetricComputations and CrossSliceMetricComputations typically include\n  copies of the MetricComputations that they depend on in order to avoid having\n  to pre-construct and pass around all the dependencies at the time the metrics\n  are constructed. Instead, each derived metric creates a version of the metric\n  it depends on and then this code de-dups computations that are identical so\n  only one gets computed.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/evaluators/metrics_plots_and_validations_"
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 40,
                  "endLine": 54,
                  "endColumn": 46,
                  "snippet": {
                    "text": "\n# A fanout of 8 is used here to reduce stragglers that occur during the merger\n# of large datasets such as histogram buckets. This has little effect on the\n# msec profiles, but can impact the wall time and memory usage. If experiencing\n# significantly extended run times due to stragglers, try bumping this to a\n# larger number.\n# TODO(b/151283457): replace hard-coded value with dynamic estimate.\n",
                    "rendered": {
                      "text": "\n# A fanout of 8 is used here to reduce stragglers that occur during the merger\n# of large datasets such as histogram buckets. This has little effect on the\n# msec profiles, but can impact the wall time and memory usage. If experiencing\n# significantly extended run times due to stragglers, try bumping this to a\n# larger number.\n# TODO(b/151283457): replace hard-coded value with dynamic estimate.\n",
                      "markdown": "`\n# A fanout of 8 is used here to reduce stragglers that occur during the merger\n# of large datasets such as histogram buckets. This has little effect on the\n# msec profiles, but can impact the wall time and memory usage. If experiencing\n# significantly extended run times due to stragglers, try bumping this to a\n# larger number.\n# TODO(b/151283457): replace hard-coded value with dynamic estimate.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/evaluators/legacy_query_based_metrics_eva"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/eval_saved_model/example_trainers/dnn_cla"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/eval_saved_model/example_trainers/custom_"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/eval_saved_model/example_trainers/csv_lin"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/eval_saved_model/example_trainers/control"
                },
                "region": {
                  "startLine": 109,
                  "startColumn": 24,
                  "endLine": 109,
                  "endColumn": 33,
                  "snippet": {
                    "text": "          'control_dependency_on_var_int_label':\n              control_dependency_metric(1000.0, labels['var_int'].values),\n          # Note that TFMA does *not* wrap predictions, so in most cases\n          # if there's a control dependency on predictions they will be\n          # recomputed.\n          'control_dependency_on_prediction':\n              control_dependency_metric(10000.0, predictions),\n",
                    "rendered": {
                      "text": "          'control_dependency_on_var_int_label':\n              control_dependency_metric(1000.0, labels['var_int'].values),\n          # Note that TFMA does *not* wrap predictions, so in most cases\n          # if there's a control dependency on predictions they will be\n          # recomputed.\n          'control_dependency_on_prediction':\n              control_dependency_metric(10000.0, predictions),\n",
                      "markdown": "`          'control_dependency_on_var_int_label':\n              control_dependency_metric(1000.0, labels['var_int'].values),\n          # Note that TFMA does *not* wrap predictions, so in most cases\n          # if there's a control dependency on predictions they will be\n          # recomputed.\n          'control_dependency_on_prediction':\n              control_dependency_metric(10000.0, predictions),\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/eval_saved_model/example_trainers/control"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 37,
                  "endLine": 49,
                  "endColumn": 46,
                  "snippet": {
                    "text": "    Args:\n      increment: Amount to increment the value by each time the metric is\n        called.\n      target: Tensor to introduce the control dependency on.\n\n    Returns:\n      value_op, update_op for the metric.\n",
                    "rendered": {
                      "text": "    Args:\n      increment: Amount to increment the value by each time the metric is\n        called.\n      target: Tensor to introduce the control dependency on.\n\n    Returns:\n      value_op, update_op for the metric.\n",
                      "markdown": "`    Args:\n      increment: Amount to increment the value by each time the metric is\n        called.\n      target: Tensor to introduce the control dependency on.\n\n    Returns:\n      value_op, update_op for the metric.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/eval_saved_model/example_trainers/control"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 31,
                  "endLine": 40,
                  "endColumn": 40,
                  "snippet": {
                    "text": "  \"\"\"Exports a simple estimator with control dependencies.\"\"\"\n\n  def control_dependency_metric(increment, target):\n    \"\"\"Metric that introduces a control dependency on target.\n\n    The value is incremented by increment each time the metric is called\n    (so the value can vary depending on how things are batched). This is mainly\n",
                    "rendered": {
                      "text": "  \"\"\"Exports a simple estimator with control dependencies.\"\"\"\n\n  def control_dependency_metric(increment, target):\n    \"\"\"Metric that introduces a control dependency on target.\n\n    The value is incremented by increment each time the metric is called\n    (so the value can vary depending on how things are batched). This is mainly\n",
                      "markdown": "`  \"\"\"Exports a simple estimator with control dependencies.\"\"\"\n\n  def control_dependency_metric(increment, target):\n    \"\"\"Metric that introduces a control dependency on target.\n\n    The value is incremented by increment each time the metric is called\n    (so the value can vary depending on how things are batched). This is mainly\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/eval_saved_model/example_trainers/control"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 36,
                  "endLine": 37,
                  "endColumn": 45,
                  "snippet": {
                    "text": "\n\ndef simple_control_dependency_estimator(export_path, eval_export_path):\n  \"\"\"Exports a simple estimator with control dependencies.\"\"\"\n\n  def control_dependency_metric(increment, target):\n    \"\"\"Metric that introduces a control dependency on target.\n",
                    "rendered": {
                      "text": "\n\ndef simple_control_dependency_estimator(export_path, eval_export_path):\n  \"\"\"Exports a simple estimator with control dependencies.\"\"\"\n\n  def control_dependency_metric(increment, target):\n    \"\"\"Metric that introduces a control dependency on target.\n",
                      "markdown": "`\n\ndef simple_control_dependency_estimator(export_path, eval_export_path):\n  \"\"\"Exports a simple estimator with control dependencies.\"\"\"\n\n  def control_dependency_metric(increment, target):\n    \"\"\"Metric that introduces a control dependency on target.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/eval_saved_model/example_trainers/control"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 12,
                  "endLine": 17,
                  "endColumn": 21,
                  "snippet": {
                    "text": "\"\"\"Exports a simple estimator with control dependencies using tf.Learn.\n\nThis is the fixed prediction estimator with extra fields, but it creates\nmetrics with control dependencies on the features, predictions and labels.\nThis is for use in tests to verify that TFMA correctly works around the\nTensorFlow issue #17568.\n\n",
                    "rendered": {
                      "text": "\"\"\"Exports a simple estimator with control dependencies using tf.Learn.\n\nThis is the fixed prediction estimator with extra fields, but it creates\nmetrics with control dependencies on the features, predictions and labels.\nThis is for use in tests to verify that TFMA correctly works around the\nTensorFlow issue #17568.\n\n",
                      "markdown": "`\"\"\"Exports a simple estimator with control dependencies using tf.Learn.\n\nThis is the fixed prediction estimator with extra fields, but it creates\nmetrics with control dependencies on the features, predictions and labels.\nThis is for use in tests to verify that TFMA correctly works around the\nTensorFlow issue #17568.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/eval_saved_model/example_trainers/control"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 34,
                  "endLine": 14,
                  "endColumn": 43,
                  "snippet": {
                    "text": "# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\"\"\"Exports a simple estimator with control dependencies using tf.Learn.\n\nThis is the fixed prediction estimator with extra fields, but it creates\nmetrics with control dependencies on the features, predictions and labels.\n",
                    "rendered": {
                      "text": "# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\"\"\"Exports a simple estimator with control dependencies using tf.Learn.\n\nThis is the fixed prediction estimator with extra fields, but it creates\nmetrics with control dependencies on the features, predictions and labels.\n",
                      "markdown": "`# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\"\"\"Exports a simple estimator with control dependencies using tf.Learn.\n\nThis is the fixed prediction estimator with extra fields, but it creates\nmetrics with control dependencies on the features, predictions and labels.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/eval_saved_model/example_trainers/control"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/eval_saved_model/example_trainers/control"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 54,
                  "endLine": 47,
                  "endColumn": 60,
                  "snippet": {
                    "text": "    to verify that the metric was called.\n\n    Args:\n      increment: Amount to increment the value by each time the metric is\n        called.\n      target: Tensor to introduce the control dependency on.\n\n",
                    "rendered": {
                      "text": "    to verify that the metric was called.\n\n    Args:\n      increment: Amount to increment the value by each time the metric is\n        called.\n      target: Tensor to introduce the control dependency on.\n\n",
                      "markdown": "`    to verify that the metric was called.\n\n    Args:\n      increment: Amount to increment the value by each time the metric is\n        called.\n      target: Tensor to introduce the control dependency on.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/eval_saved_model/example_trainers/control"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 46,
                  "endLine": 42,
                  "endColumn": 52,
                  "snippet": {
                    "text": "  def control_dependency_metric(increment, target):\n    \"\"\"Metric that introduces a control dependency on target.\n\n    The value is incremented by increment each time the metric is called\n    (so the value can vary depending on how things are batched). This is mainly\n    to verify that the metric was called.\n\n",
                    "rendered": {
                      "text": "  def control_dependency_metric(increment, target):\n    \"\"\"Metric that introduces a control dependency on target.\n\n    The value is incremented by increment each time the metric is called\n    (so the value can vary depending on how things are batched). This is mainly\n    to verify that the metric was called.\n\n",
                      "markdown": "`  def control_dependency_metric(increment, target):\n    \"\"\"Metric that introduces a control dependency on target.\n\n    The value is incremented by increment each time the metric is called\n    (so the value can vary depending on how things are batched). This is mainly\n    to verify that the metric was called.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/eval_saved_model/example_trainers/batch_s"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/constants.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/addons/fairness/post_export_metrics/__ini"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/addons/fairness/metrics/fairness_indicato"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/model_agnostic_eval/__init__.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/weighted_example_count.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/tjur_discrimination_test.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/tjur_discrimination.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/tf_metric_wrapper_test.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/tf_metric_wrapper.py"
                },
                "region": {
                  "startLine": 540,
                  "startColumn": 48,
                  "endLine": 540,
                  "endColumn": 56,
                  "snippet": {
                    "text": "          metric.update_state(*inputs)\n        except Exception as e:\n          raise ValueError(\n              f'TF Metric {metric.name} fails to update with inputs:\\n{inputs},'\n              f'\\nMetric full config: {metric.get_config()}'\n          ) from e\n        accumulator.add_weights(output_index, metric_index,\n",
                    "rendered": {
                      "text": "          metric.update_state(*inputs)\n        except Exception as e:\n          raise ValueError(\n              f'TF Metric {metric.name} fails to update with inputs:\\n{inputs},'\n              f'\\nMetric full config: {metric.get_config()}'\n          ) from e\n        accumulator.add_weights(output_index, metric_index,\n",
                      "markdown": "`          metric.update_state(*inputs)\n        except Exception as e:\n          raise ValueError(\n              f'TF Metric {metric.name} fails to update with inputs:\\n{inputs},'\n              f'\\nMetric full config: {metric.get_config()}'\n          ) from e\n        accumulator.add_weights(output_index, metric_index,\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/tf_metric_wrapper.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/tf_metric_accumulators_test.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/tf_metric_accumulators.py"
                },
                "region": {
                  "startLine": 197,
                  "startColumn": 58,
                  "endLine": 197,
                  "endColumn": 62,
                  "snippet": {
                    "text": "\n  def get_inputs(\n      self, output_index: int) -> Tuple[np.ndarray, np.ndarray, np.ndarray]:\n    \"\"\"Returns labels, predictions, and weights for output at given offset.\"\"\"\n    labels, preds, example_weights = super().get_inputs(output_index)\n    if self._pad:\n\n",
                    "rendered": {
                      "text": "\n  def get_inputs(\n      self, output_index: int) -> Tuple[np.ndarray, np.ndarray, np.ndarray]:\n    \"\"\"Returns labels, predictions, and weights for output at given offset.\"\"\"\n    labels, preds, example_weights = super().get_inputs(output_index)\n    if self._pad:\n\n",
                      "markdown": "`\n  def get_inputs(\n      self, output_index: int) -> Tuple[np.ndarray, np.ndarray, np.ndarray]:\n    \"\"\"Returns labels, predictions, and weights for output at given offset.\"\"\"\n    labels, preds, example_weights = super().get_inputs(output_index)\n    if self._pad:\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/tf_metric_accumulators.py"
                },
                "region": {
                  "startLine": 106,
                  "startColumn": 30,
                  "endLine": 106,
                  "endColumn": 34,
                  "snippet": {
                    "text": "\n  def add_weights(self, output_index: int, metric_index: int,\n                  weights: np.ndarray):\n    \"\"\"Adds weights for metric at given metric_index and output_index.\"\"\"\n    cur_weights = self._weights[output_index][metric_index]\n    if cur_weights is None:\n      self._weights[output_index][metric_index] = weights\n",
                    "rendered": {
                      "text": "\n  def add_weights(self, output_index: int, metric_index: int,\n                  weights: np.ndarray):\n    \"\"\"Adds weights for metric at given metric_index and output_index.\"\"\"\n    cur_weights = self._weights[output_index][metric_index]\n    if cur_weights is None:\n      self._weights[output_index][metric_index] = weights\n",
                      "markdown": "`\n  def add_weights(self, output_index: int, metric_index: int,\n                  weights: np.ndarray):\n    \"\"\"Adds weights for metric at given metric_index and output_index.\"\"\"\n    cur_weights = self._weights[output_index][metric_index]\n    if cur_weights is None:\n      self._weights[output_index][metric_index] = weights\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/tf_metric_accumulators.py"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 36,
                  "endLine": 94,
                  "endColumn": 40,
                  "snippet": {
                    "text": "        self._size_estimator.update(v)\n\n  def get_inputs(self, output_index: int) -> Any:\n    \"\"\"Returns input args for output at given offset.\"\"\"\n    return self._inputs[output_index]\n\n  def clear_inputs(self):\n",
                    "rendered": {
                      "text": "        self._size_estimator.update(v)\n\n  def get_inputs(self, output_index: int) -> Any:\n    \"\"\"Returns input args for output at given offset.\"\"\"\n    return self._inputs[output_index]\n\n  def clear_inputs(self):\n",
                      "markdown": "`        self._size_estimator.update(v)\n\n  def get_inputs(self, output_index: int) -> Any:\n    \"\"\"Returns input args for output at given offset.\"\"\"\n    return self._inputs[output_index]\n\n  def clear_inputs(self):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/tf_metric_accumulators.py"
                },
                "region": {
                  "startLine": 87,
                  "startColumn": 56,
                  "endLine": 87,
                  "endColumn": 60,
                  "snippet": {
                    "text": "    return len(self._inputs[0][0])\n\n  def add_input(self, output_index: int, *args):\n    \"\"\"Adds new inputs to the lists of input args stored at output_index.\"\"\"\n    for i, v in enumerate(args):\n      self._inputs[output_index][i].append(v)\n      if v is not None:\n",
                    "rendered": {
                      "text": "    return len(self._inputs[0][0])\n\n  def add_input(self, output_index: int, *args):\n    \"\"\"Adds new inputs to the lists of input args stored at output_index.\"\"\"\n    for i, v in enumerate(args):\n      self._inputs[output_index][i].append(v)\n      if v is not None:\n",
                      "markdown": "`    return len(self._inputs[0][0])\n\n  def add_input(self, output_index: int, *args):\n    \"\"\"Adds new inputs to the lists of input args stored at output_index.\"\"\"\n    for i, v in enumerate(args):\n      self._inputs[output_index][i].append(v)\n      if v is not None:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/tf_metric_accumulators.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/stats_test.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/stats.py"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 5,
                  "endLine": 77,
                  "endColumn": 13,
                  "snippet": {
                    "text": "      )\n      example_weight = example_weights[0]\n\n    # Update accumulator\n    accumulator.count += example_weight\n    accumulator.total += example_weight * features[0]\n\n",
                    "rendered": {
                      "text": "      )\n      example_weight = example_weights[0]\n\n    # Update accumulator\n    accumulator.count += example_weight\n    accumulator.total += example_weight * features[0]\n\n",
                      "markdown": "`      )\n      example_weight = example_weights[0]\n\n    # Update accumulator\n    accumulator.count += example_weight\n    accumulator.total += example_weight * features[0]\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/stats.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/squared_pearson_correlation_test."
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/preprocessors/utils/__init__.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/preprocessors/set_match_preproces"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/extractors/inference_base.py"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 24,
                  "endLine": 94,
                  "endColumn": 28,
                  "snippet": {
                    "text": "        'inference.') from e\n  if not isinstance(model_input, bytes):\n    raise ValueError(\n        f'Extracts value at key: \"{constants.INPUT_KEY}\" is not of '\n        'type bytes. Only serialized tf.Examples and serialized '\n        'tf.SequenceExamples are currently supported. The value '\n        f'is {model_input} and type {type(model_input)}.')\n",
                    "rendered": {
                      "text": "        'inference.') from e\n  if not isinstance(model_input, bytes):\n    raise ValueError(\n        f'Extracts value at key: \"{constants.INPUT_KEY}\" is not of '\n        'type bytes. Only serialized tf.Examples and serialized '\n        'tf.SequenceExamples are currently supported. The value '\n        f'is {model_input} and type {type(model_input)}.')\n",
                      "markdown": "`        'inference.') from e\n  if not isinstance(model_input, bytes):\n    raise ValueError(\n        f'Extracts value at key: \"{constants.INPUT_KEY}\" is not of '\n        'type bytes. Only serialized tf.Examples and serialized '\n        'tf.SequenceExamples are currently supported. The value '\n        f'is {model_input} and type {type(model_input)}.')\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/extractors/inference_base.py"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 65,
                  "endLine": 40,
                  "endColumn": 69,
                  "snippet": {
                    "text": "  eval_shared_models = model_util.verify_and_update_eval_shared_models(\n      eval_shared_model)\n  if eval_shared_models is None:\n    logging.warning('Invalid Bulk Inference Config: There must be at least one '\n                    'eval_shared_model to run servo/tfx-bsl bulk inference.')\n    return False\n  for eval_shared_model in eval_shared_models:\n",
                    "rendered": {
                      "text": "  eval_shared_models = model_util.verify_and_update_eval_shared_models(\n      eval_shared_model)\n  if eval_shared_models is None:\n    logging.warning('Invalid Bulk Inference Config: There must be at least one '\n                    'eval_shared_model to run servo/tfx-bsl bulk inference.')\n    return False\n  for eval_shared_model in eval_shared_models:\n",
                      "markdown": "`  eval_shared_models = model_util.verify_and_update_eval_shared_models(\n      eval_shared_model)\n  if eval_shared_models is None:\n    logging.warning('Invalid Bulk Inference Config: There must be at least one '\n                    'eval_shared_model to run servo/tfx-bsl bulk inference.')\n    return False\n  for eval_shared_model in eval_shared_models:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/extractors/inference_base.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/extractors/features_extractor_test.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/extractors/features_extractor.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/extractors/extractor_test.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/extractors/extractor.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/extractors/example_weights_extractor_test"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/extractors/example_weights_extractor.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/extractors/counterfactual_predictions_ext"
                },
                "region": {
                  "startLine": 78,
                  "startColumn": 48,
                  "endLine": 78,
                  "endColumn": 52,
                  "snippet": {
                    "text": "                  model_path='', model_type=constants.TF_KERAS)\n          ],\n          'cf_configs': {},\n          'expected_exception_regex': r'requires at least one cf_configs'\n      }, {\n          'testcase_name': 'unsupported_type',\n          'eval_shared_models': [\n",
                    "rendered": {
                      "text": "                  model_path='', model_type=constants.TF_KERAS)\n          ],\n          'cf_configs': {},\n          'expected_exception_regex': r'requires at least one cf_configs'\n      }, {\n          'testcase_name': 'unsupported_type',\n          'eval_shared_models': [\n",
                      "markdown": "`                  model_path='', model_type=constants.TF_KERAS)\n          ],\n          'cf_configs': {},\n          'expected_exception_regex': r'requires at least one cf_configs'\n      }, {\n          'testcase_name': 'unsupported_type',\n          'eval_shared_models': [\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/extractors/counterfactual_predictions_ext"
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 48,
                  "endLine": 70,
                  "endColumn": 52,
                  "snippet": {
                    "text": "          'testcase_name': 'empty_eval_shared_models',\n          'eval_shared_models': [],\n          'cf_configs': {},\n          'expected_exception_regex': r'requires at least one EvalSharedModel'\n      }, {\n          'testcase_name': 'empty_cf_configs',\n          'eval_shared_models': [\n",
                    "rendered": {
                      "text": "          'testcase_name': 'empty_eval_shared_models',\n          'eval_shared_models': [],\n          'cf_configs': {},\n          'expected_exception_regex': r'requires at least one EvalSharedModel'\n      }, {\n          'testcase_name': 'empty_cf_configs',\n          'eval_shared_models': [\n",
                      "markdown": "`          'testcase_name': 'empty_eval_shared_models',\n          'eval_shared_models': [],\n          'cf_configs': {},\n          'expected_exception_regex': r'requires at least one EvalSharedModel'\n      }, {\n          'testcase_name': 'empty_cf_configs',\n          'eval_shared_models': [\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/extractors/counterfactual_predictions_ext"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/extractors/__init__.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/export_only/__init__.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/evaluators/counter_util.py"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 33,
                  "endLine": 14,
                  "endColumn": 41,
                  "snippet": {
                    "text": "# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\"\"\"Utility for evaluator to add / update beam counters.\"\"\"\n\nfrom typing import List, Set\n\n",
                    "rendered": {
                      "text": "# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\"\"\"Utility for evaluator to add / update beam counters.\"\"\"\n\nfrom typing import List, Set\n\n",
                      "markdown": "`# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\"\"\"Utility for evaluator to add / update beam counters.\"\"\"\n\nfrom typing import List, Set\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/evaluators/counter_util.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/evaluators/confidence_intervals_util_test"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/evaluators/confidence_intervals_util_test"
                },
                "region": {
                  "startLine": 236,
                  "startColumn": 10,
                  "endLine": 236,
                  "endColumn": 18,
                  "snippet": {
                    "text": "      util.assert_that(result, check_result)\n\n      runner_result = pipeline.run()\n      # we expect one missing samples counter increment for slice2, since we\n      # expected 2 samples, but only saw 1.\n      metric_filter = beam.metrics.metric.MetricsFilter().with_name(\n          'num_slices_missing_samples')\n",
                    "rendered": {
                      "text": "      util.assert_that(result, check_result)\n\n      runner_result = pipeline.run()\n      # we expect one missing samples counter increment for slice2, since we\n      # expected 2 samples, but only saw 1.\n      metric_filter = beam.metrics.metric.MetricsFilter().with_name(\n          'num_slices_missing_samples')\n",
                      "markdown": "`      util.assert_that(result, check_result)\n\n      runner_result = pipeline.run()\n      # we expect one missing samples counter increment for slice2, since we\n      # expected 2 samples, but only saw 1.\n      metric_filter = beam.metrics.metric.MetricsFilter().with_name(\n          'num_slices_missing_samples')\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/evaluators/confidence_intervals_util.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/evaluators/analysis_table_evaluator_test."
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/evaluators/__init__.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/eval_saved_model/util_test.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/contrib/export.py"
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 37,
                  "endLine": 62,
                  "endColumn": 42,
                  "snippet": {
                    "text": "\n    callargs = inspect.getcallargs(old_call_fn, self, *args, **kwargs)\n    features = callargs['features']\n    cols_to_output_tensors = callargs.get('cols_to_output_tensors')\n\n    local_cols_to_output_tensors = {}\n    if cols_to_output_tensors is not None:\n",
                    "rendered": {
                      "text": "\n    callargs = inspect.getcallargs(old_call_fn, self, *args, **kwargs)\n    features = callargs['features']\n    cols_to_output_tensors = callargs.get('cols_to_output_tensors')\n\n    local_cols_to_output_tensors = {}\n    if cols_to_output_tensors is not None:\n",
                      "markdown": "`\n    callargs = inspect.getcallargs(old_call_fn, self, *args, **kwargs)\n    features = callargs['features']\n    cols_to_output_tensors = callargs.get('cols_to_output_tensors')\n\n    local_cols_to_output_tensors = {}\n    if cols_to_output_tensors is not None:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/contrib/export.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/contrib/export.py"
                },
                "region": {
                  "startLine": 309,
                  "startColumn": 24,
                  "endLine": 309,
                  "endColumn": 30,
                  "snippet": {
                    "text": "\n  # Write feature metadata as an asset to model after export has been done.\n  # It would be cleaner to write this as an asset during export, but there\n  # doesn't seem to be a nice way to do this given how we are monkey-patching\n  # to observe/capture the information we need.\n  if not export_path:\n    raise ValueError('export appears to have failed. export_path was: %s' %\n",
                    "rendered": {
                      "text": "\n  # Write feature metadata as an asset to model after export has been done.\n  # It would be cleaner to write this as an asset during export, but there\n  # doesn't seem to be a nice way to do this given how we are monkey-patching\n  # to observe/capture the information we need.\n  if not export_path:\n    raise ValueError('export appears to have failed. export_path was: %s' %\n",
                      "markdown": "`\n  # Write feature metadata as an asset to model after export has been done.\n  # It would be cleaner to write this as an asset during export, but there\n  # doesn't seem to be a nice way to do this given how we are monkey-patching\n  # to observe/capture the information we need.\n  if not export_path:\n    raise ValueError('export appears to have failed. export_path was: %s' %\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/contrib/aggregates/binary_confusion_matri"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/contrib/aggregates/binary_confusion_matri"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/addons/fairness/view/widget_view_test.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/addons/fairness/view/widget_view.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/addons/fairness/notebook/jupyter/renderer"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/addons/fairness/metrics/counterfactual_fa"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/utils/model_util_test.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/utils/model_util.py"
                },
                "region": {
                  "startLine": 1020,
                  "startColumn": 51,
                  "endLine": 1020,
                  "endColumn": 59,
                  "snippet": {
                    "text": "          if not required:\n            continue\n          raise ValueError(\n              'Unable to find %s function needed to update %s'\n              % (signature_name, self._output_keypath)\n          )\n        try:\n",
                    "rendered": {
                      "text": "          if not required:\n            continue\n          raise ValueError(\n              'Unable to find %s function needed to update %s'\n              % (signature_name, self._output_keypath)\n          )\n        try:\n",
                      "markdown": "`          if not required:\n            continue\n          raise ValueError(\n              'Unable to find %s function needed to update %s'\n              % (signature_name, self._output_keypath)\n          )\n        try:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/utils/model_util.py"
                },
                "region": {
                  "startLine": 899,
                  "startColumn": 6,
                  "endLine": 899,
                  "endColumn": 14,
                  "snippet": {
                    "text": "\n      signature_names: {'predictions': {'model1': ['fn1'], 'model2': ['fn2']}}\n\n    3) Update 'features' using 'tft_layer' callable\n\n      signature_names: {'features': {'': ['tft_layer']}}\n\n",
                    "rendered": {
                      "text": "\n      signature_names: {'predictions': {'model1': ['fn1'], 'model2': ['fn2']}}\n\n    3) Update 'features' using 'tft_layer' callable\n\n      signature_names: {'features': {'': ['tft_layer']}}\n\n",
                      "markdown": "`\n      signature_names: {'predictions': {'model1': ['fn1'], 'model2': ['fn2']}}\n\n    3) Update 'features' using 'tft_layer' callable\n\n      signature_names: {'features': {'': ['tft_layer']}}\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/utils/model_util.py"
                },
                "region": {
                  "startLine": 895,
                  "startColumn": 6,
                  "endLine": 895,
                  "endColumn": 14,
                  "snippet": {
                    "text": "\n      signature_names: {'predictions': {'': [None]}}\n\n    2) Update 'predictions' using custom callables\n\n      signature_names: {'predictions': {'model1': ['fn1'], 'model2': ['fn2']}}\n\n",
                    "rendered": {
                      "text": "\n      signature_names: {'predictions': {'': [None]}}\n\n    2) Update 'predictions' using custom callables\n\n      signature_names: {'predictions': {'model1': ['fn1'], 'model2': ['fn2']}}\n\n",
                      "markdown": "`\n      signature_names: {'predictions': {'': [None]}}\n\n    2) Update 'predictions' using custom callables\n\n      signature_names: {'predictions': {'model1': ['fn1'], 'model2': ['fn2']}}\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/utils/model_util.py"
                },
                "region": {
                  "startLine": 891,
                  "startColumn": 6,
                  "endLine": 891,
                  "endColumn": 14,
                  "snippet": {
                    "text": "    Examples of combinations of signature_names and default_signatures that\n    might be used:\n\n    1) Update 'predictions' using default callable on a single model.\n\n      signature_names: {'predictions': {'': [None]}}\n\n",
                    "rendered": {
                      "text": "    Examples of combinations of signature_names and default_signatures that\n    might be used:\n\n    1) Update 'predictions' using default callable on a single model.\n\n      signature_names: {'predictions': {'': [None]}}\n\n",
                      "markdown": "`    Examples of combinations of signature_names and default_signatures that\n    might be used:\n\n    1) Update 'predictions' using default callable on a single model.\n\n      signature_names: {'predictions': {'': [None]}}\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/utils/model_util.py"
                },
                "region": {
                  "startLine": 830,
                  "startColumn": 42,
                  "endLine": 830,
                  "endColumn": 46,
                  "snippet": {
                    "text": "\n  This DoFn operates on batched features as input. This DoFn will try to use a\n  large batch size at first. If a functional failure is caught, an attempt will\n  be made to process the elements serially at batch size 1.\n  \"\"\"\n\n  def __init__(self, model_loaders: Dict[str, types.ModelLoader]):\n",
                    "rendered": {
                      "text": "\n  This DoFn operates on batched features as input. This DoFn will try to use a\n  large batch size at first. If a functional failure is caught, an attempt will\n  be made to process the elements serially at batch size 1.\n  \"\"\"\n\n  def __init__(self, model_loaders: Dict[str, types.ModelLoader]):\n",
                      "markdown": "`\n  This DoFn operates on batched features as input. This DoFn will try to use a\n  large batch size at first. If a functional failure is caught, an attempt will\n  be made to process the elements serially at batch size 1.\n  \"\"\"\n\n  def __init__(self, model_loaders: Dict[str, types.ModelLoader]):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/utils/model_util.py"
                },
                "region": {
                  "startLine": 829,
                  "startColumn": 18,
                  "endLine": 829,
                  "endColumn": 22,
                  "snippet": {
                    "text": "  \"\"\"Abstract class for DoFns that need the shared models.\n\n  This DoFn operates on batched features as input. This DoFn will try to use a\n  large batch size at first. If a functional failure is caught, an attempt will\n  be made to process the elements serially at batch size 1.\n  \"\"\"\n\n",
                    "rendered": {
                      "text": "  \"\"\"Abstract class for DoFns that need the shared models.\n\n  This DoFn operates on batched features as input. This DoFn will try to use a\n  large batch size at first. If a functional failure is caught, an attempt will\n  be made to process the elements serially at batch size 1.\n  \"\"\"\n\n",
                      "markdown": "`  \"\"\"Abstract class for DoFns that need the shared models.\n\n  This DoFn operates on batched features as input. This DoFn will try to use a\n  large batch size at first. If a functional failure is caught, an attempt will\n  be made to process the elements serially at batch size 1.\n  \"\"\"\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/utils/model_util.py"
                },
                "region": {
                  "startLine": 784,
                  "startColumn": 1,
                  "endLine": 784,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\n  This DoFn will try to use large batch size at first. If a functional failure\n  is caught, an attempt will be made to process the elements serially\n  at batch size 1.\n  \"\"\"\n\n  def __init__(self, model_loaders: Dict[str, types.ModelLoader]):\n",
                    "rendered": {
                      "text": "\n  This DoFn will try to use large batch size at first. If a functional failure\n  is caught, an attempt will be made to process the elements serially\n  at batch size 1.\n  \"\"\"\n\n  def __init__(self, model_loaders: Dict[str, types.ModelLoader]):\n",
                      "markdown": "`\n  This DoFn will try to use large batch size at first. If a functional failure\n  is caught, an attempt will be made to process the elements serially\n  at batch size 1.\n  \"\"\"\n\n  def __init__(self, model_loaders: Dict[str, types.ModelLoader]):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/utils/model_util.py"
                },
                "region": {
                  "startLine": 782,
                  "startColumn": 44,
                  "endLine": 782,
                  "endColumn": 48,
                  "snippet": {
                    "text": "class BatchReducibleDoFnWithModels(DoFnWithModels):\n  \"\"\"Abstract class for DoFns that need the shared models.\n\n  This DoFn will try to use large batch size at first. If a functional failure\n  is caught, an attempt will be made to process the elements serially\n  at batch size 1.\n  \"\"\"\n",
                    "rendered": {
                      "text": "class BatchReducibleDoFnWithModels(DoFnWithModels):\n  \"\"\"Abstract class for DoFns that need the shared models.\n\n  This DoFn will try to use large batch size at first. If a functional failure\n  is caught, an attempt will be made to process the elements serially\n  at batch size 1.\n  \"\"\"\n",
                      "markdown": "`class BatchReducibleDoFnWithModels(DoFnWithModels):\n  \"\"\"Abstract class for DoFns that need the shared models.\n\n  This DoFn will try to use large batch size at first. If a functional failure\n  is caught, an attempt will be made to process the elements serially\n  at batch size 1.\n  \"\"\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/utils/model_util.py"
                },
                "region": {
                  "startLine": 768,
                  "startColumn": 10,
                  "endLine": 768,
                  "endColumn": 18,
                  "snippet": {
                    "text": "    raise NotImplementedError('Subclasses are expected to override this.')\n\n  def finish_bundle(self):\n    # Must update distribution in finish_bundle instead of setup\n    # because Beam metrics are not supported in setup.\n    if self._model_load_seconds is not None:\n      self._model_load_seconds_distribution.update(self._model_load_seconds)\n",
                    "rendered": {
                      "text": "    raise NotImplementedError('Subclasses are expected to override this.')\n\n  def finish_bundle(self):\n    # Must update distribution in finish_bundle instead of setup\n    # because Beam metrics are not supported in setup.\n    if self._model_load_seconds is not None:\n      self._model_load_seconds_distribution.update(self._model_load_seconds)\n",
                      "markdown": "`    raise NotImplementedError('Subclasses are expected to override this.')\n\n  def finish_bundle(self):\n    # Must update distribution in finish_bundle instead of setup\n    # because Beam metrics are not supported in setup.\n    if self._model_load_seconds is not None:\n      self._model_load_seconds_distribution.update(self._model_load_seconds)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/utils/model_util.py"
                },
                "region": {
                  "startLine": 474,
                  "startColumn": 13,
                  "endLine": 474,
                  "endColumn": 17,
                  "snippet": {
                    "text": "  \"\"\"Returns callable associated with given signature or None if not callable.\n\n  The available callables are defined by the model.signatures attribute which\n  are defined at the time the model is saved. For keras based models, the\n  model itself can also be used as can a callable attribute on the model named\n  after the signature_name.\n\n",
                    "rendered": {
                      "text": "  \"\"\"Returns callable associated with given signature or None if not callable.\n\n  The available callables are defined by the model.signatures attribute which\n  are defined at the time the model is saved. For keras based models, the\n  model itself can also be used as can a callable attribute on the model named\n  after the signature_name.\n\n",
                      "markdown": "`  \"\"\"Returns callable associated with given signature or None if not callable.\n\n  The available callables are defined by the model.signatures attribute which\n  are defined at the time the model is saved. For keras based models, the\n  model itself can also be used as can a callable attribute on the model named\n  after the signature_name.\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/utils/model_util.py"
                },
                "region": {
                  "startLine": 289,
                  "startColumn": 64,
                  "endLine": 289,
                  "endColumn": 68,
                  "snippet": {
                    "text": "      be used as the value).\n\n  Returns:\n    Feature values stored at given key (or feature values stored at each output\n    keyed by output name if field containing map of feature keys was used). If\n    multiple models are used the value(s) will be stored in a dict keyed by\n    model name. If no values are found and allow_missing is False then None\n",
                    "rendered": {
                      "text": "      be used as the value).\n\n  Returns:\n    Feature values stored at given key (or feature values stored at each output\n    keyed by output name if field containing map of feature keys was used). If\n    multiple models are used the value(s) will be stored in a dict keyed by\n    model name. If no values are found and allow_missing is False then None\n",
                      "markdown": "`      be used as the value).\n\n  Returns:\n    Feature values stored at given key (or feature values stored at each output\n    keyed by output name if field containing map of feature keys was used). If\n    multiple models are used the value(s) will be stored in a dict keyed by\n    model name. If no values are found and allow_missing is False then None\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/utils/model_util.py"
                },
                "region": {
                  "startLine": 289,
                  "startColumn": 25,
                  "endLine": 289,
                  "endColumn": 29,
                  "snippet": {
                    "text": "      be used as the value).\n\n  Returns:\n    Feature values stored at given key (or feature values stored at each output\n    keyed by output name if field containing map of feature keys was used). If\n    multiple models are used the value(s) will be stored in a dict keyed by\n    model name. If no values are found and allow_missing is False then None\n",
                    "rendered": {
                      "text": "      be used as the value).\n\n  Returns:\n    Feature values stored at given key (or feature values stored at each output\n    keyed by output name if field containing map of feature keys was used). If\n    multiple models are used the value(s) will be stored in a dict keyed by\n    model name. If no values are found and allow_missing is False then None\n",
                      "markdown": "`      be used as the value).\n\n  Returns:\n    Feature values stored at given key (or feature values stored at each output\n    keyed by output name if field containing map of feature keys was used). If\n    multiple models are used the value(s) will be stored in a dict keyed by\n    model name. If no values are found and allow_missing is False then None\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/utils/model_util.py"
                },
                "region": {
                  "startLine": 282,
                  "startColumn": 35,
                  "endLine": 282,
                  "endColumn": 39,
                  "snippet": {
                    "text": "    multi_output_field: Optional name of field used to store multi-output\n      versions of the features. This should be an attribute on the ModelSpec\n      such as \"label_keys\", \"example_weight_keys\", or \"prediction_keys\". This\n      field is only used if a value at field is not found.\n    batched_extracts: Extracts containing batched features keyed by\n      tfma.FEATURES_KEY and optionally tfma.TRANSFORMED_FEATURES_KEY.\n    allow_missing: True if the feature may be missing (in which case None will\n",
                    "rendered": {
                      "text": "    multi_output_field: Optional name of field used to store multi-output\n      versions of the features. This should be an attribute on the ModelSpec\n      such as \"label_keys\", \"example_weight_keys\", or \"prediction_keys\". This\n      field is only used if a value at field is not found.\n    batched_extracts: Extracts containing batched features keyed by\n      tfma.FEATURES_KEY and optionally tfma.TRANSFORMED_FEATURES_KEY.\n    allow_missing: True if the feature may be missing (in which case None will\n",
                      "markdown": "`    multi_output_field: Optional name of field used to store multi-output\n      versions of the features. This should be an attribute on the ModelSpec\n      such as \"label_keys\", \"example_weight_keys\", or \"prediction_keys\". This\n      field is only used if a value at field is not found.\n    batched_extracts: Extracts containing batched features keyed by\n      tfma.FEATURES_KEY and optionally tfma.TRANSFORMED_FEATURES_KEY.\n    allow_missing: True if the feature may be missing (in which case None will\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/utils/model_util.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/utils/model_util.py"
                },
                "region": {
                  "startLine": 1020,
                  "startColumn": 24,
                  "endLine": 1020,
                  "endColumn": 30,
                  "snippet": {
                    "text": "          if not required:\n            continue\n          raise ValueError(\n              'Unable to find %s function needed to update %s'\n              % (signature_name, self._output_keypath)\n          )\n        try:\n",
                    "rendered": {
                      "text": "          if not required:\n            continue\n          raise ValueError(\n              'Unable to find %s function needed to update %s'\n              % (signature_name, self._output_keypath)\n          )\n        try:\n",
                      "markdown": "`          if not required:\n            continue\n          raise ValueError(\n              'Unable to find %s function needed to update %s'\n              % (signature_name, self._output_keypath)\n          )\n        try:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/utils/model_util.py"
                },
                "region": {
                  "startLine": 626,
                  "startColumn": 18,
                  "endLine": 626,
                  "endColumn": 24,
                  "snippet": {
                    "text": ") -> Optional[Mapping[str, types.TensorType]]:\n  \"\"\"Filters dict by input names.\n\n  In case we don't find the specified input name in the dict, we assume we are\n  feeding serialized examples to the model and return None.\n\n  Args:\n",
                    "rendered": {
                      "text": ") -> Optional[Mapping[str, types.TensorType]]:\n  \"\"\"Filters dict by input names.\n\n  In case we don't find the specified input name in the dict, we assume we are\n  feeding serialized examples to the model and return None.\n\n  Args:\n",
                      "markdown": "`) -> Optional[Mapping[str, types.TensorType]]:\n  \"\"\"Filters dict by input names.\n\n  In case we don't find the specified input name in the dict, we assume we are\n  feeding serialized examples to the model and return None.\n\n  Args:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/utils/model_util.py"
                },
                "region": {
                  "startLine": 474,
                  "startColumn": 20,
                  "endLine": 474,
                  "endColumn": 26,
                  "snippet": {
                    "text": "  \"\"\"Returns callable associated with given signature or None if not callable.\n\n  The available callables are defined by the model.signatures attribute which\n  are defined at the time the model is saved. For keras based models, the\n  model itself can also be used as can a callable attribute on the model named\n  after the signature_name.\n\n",
                    "rendered": {
                      "text": "  \"\"\"Returns callable associated with given signature or None if not callable.\n\n  The available callables are defined by the model.signatures attribute which\n  are defined at the time the model is saved. For keras based models, the\n  model itself can also be used as can a callable attribute on the model named\n  after the signature_name.\n\n",
                      "markdown": "`  \"\"\"Returns callable associated with given signature or None if not callable.\n\n  The available callables are defined by the model.signatures attribute which\n  are defined at the time the model is saved. For keras based models, the\n  model itself can also be used as can a callable attribute on the model named\n  after the signature_name.\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/utils/math_util_test.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/utils/math_util.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/utils/keras_lib.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/utils/config_util_test.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/utils/config_util.py"
                },
                "region": {
                  "startLine": 96,
                  "startColumn": 4,
                  "endLine": 96,
                  "endColumn": 12,
                  "snippet": {
                    "text": "  a) Add or remove a model_spec according to \"has_baseline\".\n  b) Fix the model names (model_spec.name) to tfma.CANDIDATE_KEY and\n     tfma.BASELINE_KEY.\n  c) Update the metrics_specs with the fixed model name.\n\n  Args:\n    eval_config: Original eval config.\n",
                    "rendered": {
                      "text": "  a) Add or remove a model_spec according to \"has_baseline\".\n  b) Fix the model names (model_spec.name) to tfma.CANDIDATE_KEY and\n     tfma.BASELINE_KEY.\n  c) Update the metrics_specs with the fixed model name.\n\n  Args:\n    eval_config: Original eval config.\n",
                      "markdown": "`  a) Add or remove a model_spec according to \"has_baseline\".\n  b) Fix the model names (model_spec.name) to tfma.CANDIDATE_KEY and\n     tfma.BASELINE_KEY.\n  c) Update the metrics_specs with the fixed model name.\n\n  Args:\n    eval_config: Original eval config.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/utils/config_util.py"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 15,
                  "endLine": 44,
                  "endColumn": 19,
                  "snippet": {
                    "text": "    if spec.example_weight_key and spec.example_weight_keys:\n      raise ValueError(\n          'only one of example_weight_key or example_weight_keys should be '\n          'used at a time: model_spec=\\n{}'.format(spec))\n    if spec.name in eval_config.model_specs:\n      raise ValueError(\n          'more than one model_spec found for model \"{}\": {}'.format(\n",
                    "rendered": {
                      "text": "    if spec.example_weight_key and spec.example_weight_keys:\n      raise ValueError(\n          'only one of example_weight_key or example_weight_keys should be '\n          'used at a time: model_spec=\\n{}'.format(spec))\n    if spec.name in eval_config.model_specs:\n      raise ValueError(\n          'more than one model_spec found for model \"{}\": {}'.format(\n",
                      "markdown": "`    if spec.example_weight_key and spec.example_weight_keys:\n      raise ValueError(\n          'only one of example_weight_key or example_weight_keys should be '\n          'used at a time: model_spec=\\n{}'.format(spec))\n    if spec.name in eval_config.model_specs:\n      raise ValueError(\n          'more than one model_spec found for model \"{}\": {}'.format(\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/utils/config_util.py"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 71,
                  "endLine": 39,
                  "endColumn": 75,
                  "snippet": {
                    "text": "                       'a time: model_spec=\\n{}'.format(spec))\n    if spec.prediction_key and spec.prediction_keys:\n      raise ValueError(\n          'only one of prediction_key or prediction_keys should be used at '\n          'a time: model_spec=\\n{}'.format(spec))\n    if spec.example_weight_key and spec.example_weight_keys:\n      raise ValueError(\n",
                    "rendered": {
                      "text": "                       'a time: model_spec=\\n{}'.format(spec))\n    if spec.prediction_key and spec.prediction_keys:\n      raise ValueError(\n          'only one of prediction_key or prediction_keys should be used at '\n          'a time: model_spec=\\n{}'.format(spec))\n    if spec.example_weight_key and spec.example_weight_keys:\n      raise ValueError(\n",
                      "markdown": "`                       'a time: model_spec=\\n{}'.format(spec))\n    if spec.prediction_key and spec.prediction_keys:\n      raise ValueError(\n          'only one of prediction_key or prediction_keys should be used at '\n          'a time: model_spec=\\n{}'.format(spec))\n    if spec.example_weight_key and spec.example_weight_keys:\n      raise ValueError(\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/utils/config_util.py"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 74,
                  "endLine": 35,
                  "endColumn": 78,
                  "snippet": {
                    "text": "  baseline = None\n  for spec in eval_config.model_specs:\n    if spec.label_key and spec.label_keys:\n      raise ValueError('only one of label_key or label_keys should be used at '\n                       'a time: model_spec=\\n{}'.format(spec))\n    if spec.prediction_key and spec.prediction_keys:\n      raise ValueError(\n",
                    "rendered": {
                      "text": "  baseline = None\n  for spec in eval_config.model_specs:\n    if spec.label_key and spec.label_keys:\n      raise ValueError('only one of label_key or label_keys should be used at '\n                       'a time: model_spec=\\n{}'.format(spec))\n    if spec.prediction_key and spec.prediction_keys:\n      raise ValueError(\n",
                      "markdown": "`  baseline = None\n  for spec in eval_config.model_specs:\n    if spec.label_key and spec.label_keys:\n      raise ValueError('only one of label_key or label_keys should be used at '\n                       'a time: model_spec=\\n{}'.format(spec))\n    if spec.prediction_key and spec.prediction_keys:\n      raise ValueError(\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/utils/config_util.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/utils/config_util.py"
                },
                "region": {
                  "startLine": 120,
                  "startColumn": 20,
                  "endLine": 120,
                  "endColumn": 26,
                  "snippet": {
                    "text": "      baseline also removes any change thresholds. Only one of has_baseline or\n      maybe_remove_baseline should be used.\n    rubber_stamp: True if this model is being rubber stamped. When a model is\n      rubber stamped diff thresholds will be ignored if an associated baseline\n      model is not passed.\n\n  Raises:\n",
                    "rendered": {
                      "text": "      baseline also removes any change thresholds. Only one of has_baseline or\n      maybe_remove_baseline should be used.\n    rubber_stamp: True if this model is being rubber stamped. When a model is\n      rubber stamped diff thresholds will be ignored if an associated baseline\n      model is not passed.\n\n  Raises:\n",
                      "markdown": "`      baseline also removes any change thresholds. Only one of has_baseline or\n      maybe_remove_baseline should be used.\n    rubber_stamp: True if this model is being rubber stamped. When a model is\n      rubber stamped diff thresholds will be ignored if an associated baseline\n      model is not passed.\n\n  Raises:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/utils/beam_util_test.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/sample_metrics_test.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/sample_metrics.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/rouge_test.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/rouge.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/query_statistics_test.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/query_statistics.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/preprocessors/utils/object_detect"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/preprocessors/utils/object_detect"
                },
                "region": {
                  "startLine": 171,
                  "startColumn": 47,
                  "endLine": 172,
                  "snippet": {
                    "text": "   extracts: TFMA extracts that stores the keys.\n   num_rows_key: Number of rows in each column except the paddings. For\n     multi-dimensional input, it will truncate on the first dimension.\n   array_to_truncate: the array to be truncated te\n   model_name: The name of the model for outputs.\n   allow_missing_key: (Optional) If true, it will do nothing instead of\n     raising errors when col_names are not found.\n\n",
                    "rendered": {
                      "text": "   extracts: TFMA extracts that stores the keys.\n   num_rows_key: Number of rows in each column except the paddings. For\n     multi-dimensional input, it will truncate on the first dimension.\n   array_to_truncate: the array to be truncated te\n   model_name: The name of the model for outputs.\n   allow_missing_key: (Optional) If true, it will do nothing instead of\n     raising errors when col_names are not found.\n\n",
                      "markdown": "`   extracts: TFMA extracts that stores the keys.\n   num_rows_key: Number of rows in each column except the paddings. For\n     multi-dimensional input, it will truncate on the first dimension.\n   array_to_truncate: the array to be truncated te\n   model_name: The name of the model for outputs.\n   allow_missing_key: (Optional) If true, it will do nothing instead of\n     raising errors when col_names are not found.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/preprocessors/utils/object_detect"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/__init__.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/extractors/unbatch_extractor_test.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/extractors/unbatch_extractor.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/extractors/transformed_features_extractor"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/extractors/transformed_features_extractor"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/extractors/tfx_bsl_predictions_extractor_"
                },
                "region": {
                  "startLine": 446,
                  "startColumn": 7,
                  "endLine": 446,
                  "endColumn": 51,
                  "snippet": {
                    "text": "       'classification'), ('TFXBSLBulkInferenceUnspecifiedSignature', True, ''),\n      ('TFXBSLBulkInferencePredictSignature', True, 'predict'),\n      ('TFXBSLBulkInferenceServingDefaultSignature', True, 'serving_default'),\n      ('TFXBSLBulkInferenceClassificationSignature', True, 'classification'))\n  def testMultiClassModel(self, experimental_bulk_inference, signature_name):\n    temp_export_dir = self._getExportDir()\n    num_classes = 3\n",
                    "rendered": {
                      "text": "       'classification'), ('TFXBSLBulkInferenceUnspecifiedSignature', True, ''),\n      ('TFXBSLBulkInferencePredictSignature', True, 'predict'),\n      ('TFXBSLBulkInferenceServingDefaultSignature', True, 'serving_default'),\n      ('TFXBSLBulkInferenceClassificationSignature', True, 'classification'))\n  def testMultiClassModel(self, experimental_bulk_inference, signature_name):\n    temp_export_dir = self._getExportDir()\n    num_classes = 3\n",
                      "markdown": "`       'classification'), ('TFXBSLBulkInferenceUnspecifiedSignature', True, ''),\n      ('TFXBSLBulkInferencePredictSignature', True, 'predict'),\n      ('TFXBSLBulkInferenceServingDefaultSignature', True, 'serving_default'),\n      ('TFXBSLBulkInferenceClassificationSignature', True, 'classification'))\n  def testMultiClassModel(self, experimental_bulk_inference, signature_name):\n    temp_export_dir = self._getExportDir()\n    num_classes = 3\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/extractors/tfx_bsl_predictions_extractor_"
                },
                "region": {
                  "startLine": 445,
                  "startColumn": 7,
                  "endLine": 445,
                  "endColumn": 51,
                  "snippet": {
                    "text": "      ('ModelSignaturesDoFnInferenceClassificationSignature', False,\n       'classification'), ('TFXBSLBulkInferenceUnspecifiedSignature', True, ''),\n      ('TFXBSLBulkInferencePredictSignature', True, 'predict'),\n      ('TFXBSLBulkInferenceServingDefaultSignature', True, 'serving_default'),\n      ('TFXBSLBulkInferenceClassificationSignature', True, 'classification'))\n  def testMultiClassModel(self, experimental_bulk_inference, signature_name):\n    temp_export_dir = self._getExportDir()\n",
                    "rendered": {
                      "text": "      ('ModelSignaturesDoFnInferenceClassificationSignature', False,\n       'classification'), ('TFXBSLBulkInferenceUnspecifiedSignature', True, ''),\n      ('TFXBSLBulkInferencePredictSignature', True, 'predict'),\n      ('TFXBSLBulkInferenceServingDefaultSignature', True, 'serving_default'),\n      ('TFXBSLBulkInferenceClassificationSignature', True, 'classification'))\n  def testMultiClassModel(self, experimental_bulk_inference, signature_name):\n    temp_export_dir = self._getExportDir()\n",
                      "markdown": "`      ('ModelSignaturesDoFnInferenceClassificationSignature', False,\n       'classification'), ('TFXBSLBulkInferenceUnspecifiedSignature', True, ''),\n      ('TFXBSLBulkInferencePredictSignature', True, 'predict'),\n      ('TFXBSLBulkInferenceServingDefaultSignature', True, 'serving_default'),\n      ('TFXBSLBulkInferenceClassificationSignature', True, 'classification'))\n  def testMultiClassModel(self, experimental_bulk_inference, signature_name):\n    temp_export_dir = self._getExportDir()\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/extractors/tfx_bsl_predictions_extractor_"
                },
                "region": {
                  "startLine": 442,
                  "startColumn": 7,
                  "endLine": 442,
                  "endColumn": 60,
                  "snippet": {
                    "text": "      ('ModelSignaturesDoFnInferencePredictSignature', False, 'predict'),\n      ('ModelSignaturesDoFnInferenceServingDefaultSignature', False,\n       'serving_default'),\n      ('ModelSignaturesDoFnInferenceClassificationSignature', False,\n       'classification'), ('TFXBSLBulkInferenceUnspecifiedSignature', True, ''),\n      ('TFXBSLBulkInferencePredictSignature', True, 'predict'),\n      ('TFXBSLBulkInferenceServingDefaultSignature', True, 'serving_default'),\n",
                    "rendered": {
                      "text": "      ('ModelSignaturesDoFnInferencePredictSignature', False, 'predict'),\n      ('ModelSignaturesDoFnInferenceServingDefaultSignature', False,\n       'serving_default'),\n      ('ModelSignaturesDoFnInferenceClassificationSignature', False,\n       'classification'), ('TFXBSLBulkInferenceUnspecifiedSignature', True, ''),\n      ('TFXBSLBulkInferencePredictSignature', True, 'predict'),\n      ('TFXBSLBulkInferenceServingDefaultSignature', True, 'serving_default'),\n",
                      "markdown": "`      ('ModelSignaturesDoFnInferencePredictSignature', False, 'predict'),\n      ('ModelSignaturesDoFnInferenceServingDefaultSignature', False,\n       'serving_default'),\n      ('ModelSignaturesDoFnInferenceClassificationSignature', False,\n       'classification'), ('TFXBSLBulkInferenceUnspecifiedSignature', True, ''),\n      ('TFXBSLBulkInferencePredictSignature', True, 'predict'),\n      ('TFXBSLBulkInferenceServingDefaultSignature', True, 'serving_default'),\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/extractors/tfx_bsl_predictions_extractor_"
                },
                "region": {
                  "startLine": 440,
                  "startColumn": 7,
                  "endLine": 440,
                  "endColumn": 60,
                  "snippet": {
                    "text": "  @parameterized.named_parameters(\n      ('ModelSignaturesDoFnInferenceUnspecifiedSignature', False, ''),\n      ('ModelSignaturesDoFnInferencePredictSignature', False, 'predict'),\n      ('ModelSignaturesDoFnInferenceServingDefaultSignature', False,\n       'serving_default'),\n      ('ModelSignaturesDoFnInferenceClassificationSignature', False,\n       'classification'), ('TFXBSLBulkInferenceUnspecifiedSignature', True, ''),\n",
                    "rendered": {
                      "text": "  @parameterized.named_parameters(\n      ('ModelSignaturesDoFnInferenceUnspecifiedSignature', False, ''),\n      ('ModelSignaturesDoFnInferencePredictSignature', False, 'predict'),\n      ('ModelSignaturesDoFnInferenceServingDefaultSignature', False,\n       'serving_default'),\n      ('ModelSignaturesDoFnInferenceClassificationSignature', False,\n       'classification'), ('TFXBSLBulkInferenceUnspecifiedSignature', True, ''),\n",
                      "markdown": "`  @parameterized.named_parameters(\n      ('ModelSignaturesDoFnInferenceUnspecifiedSignature', False, ''),\n      ('ModelSignaturesDoFnInferencePredictSignature', False, 'predict'),\n      ('ModelSignaturesDoFnInferenceServingDefaultSignature', False,\n       'serving_default'),\n      ('ModelSignaturesDoFnInferenceClassificationSignature', False,\n       'classification'), ('TFXBSLBulkInferenceUnspecifiedSignature', True, ''),\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/extractors/tfx_bsl_predictions_extractor_"
                },
                "region": {
                  "startLine": 439,
                  "startColumn": 7,
                  "endLine": 439,
                  "endColumn": 53,
                  "snippet": {
                    "text": "\n  @parameterized.named_parameters(\n      ('ModelSignaturesDoFnInferenceUnspecifiedSignature', False, ''),\n      ('ModelSignaturesDoFnInferencePredictSignature', False, 'predict'),\n      ('ModelSignaturesDoFnInferenceServingDefaultSignature', False,\n       'serving_default'),\n      ('ModelSignaturesDoFnInferenceClassificationSignature', False,\n",
                    "rendered": {
                      "text": "\n  @parameterized.named_parameters(\n      ('ModelSignaturesDoFnInferenceUnspecifiedSignature', False, ''),\n      ('ModelSignaturesDoFnInferencePredictSignature', False, 'predict'),\n      ('ModelSignaturesDoFnInferenceServingDefaultSignature', False,\n       'serving_default'),\n      ('ModelSignaturesDoFnInferenceClassificationSignature', False,\n",
                      "markdown": "`\n  @parameterized.named_parameters(\n      ('ModelSignaturesDoFnInferenceUnspecifiedSignature', False, ''),\n      ('ModelSignaturesDoFnInferencePredictSignature', False, 'predict'),\n      ('ModelSignaturesDoFnInferenceServingDefaultSignature', False,\n       'serving_default'),\n      ('ModelSignaturesDoFnInferenceClassificationSignature', False,\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/extractors/tfx_bsl_predictions_extractor_"
                },
                "region": {
                  "startLine": 438,
                  "startColumn": 7,
                  "endLine": 438,
                  "endColumn": 57,
                  "snippet": {
                    "text": "      util.assert_that(result, check_result)\n\n  @parameterized.named_parameters(\n      ('ModelSignaturesDoFnInferenceUnspecifiedSignature', False, ''),\n      ('ModelSignaturesDoFnInferencePredictSignature', False, 'predict'),\n      ('ModelSignaturesDoFnInferenceServingDefaultSignature', False,\n       'serving_default'),\n",
                    "rendered": {
                      "text": "      util.assert_that(result, check_result)\n\n  @parameterized.named_parameters(\n      ('ModelSignaturesDoFnInferenceUnspecifiedSignature', False, ''),\n      ('ModelSignaturesDoFnInferencePredictSignature', False, 'predict'),\n      ('ModelSignaturesDoFnInferenceServingDefaultSignature', False,\n       'serving_default'),\n",
                      "markdown": "`      util.assert_that(result, check_result)\n\n  @parameterized.named_parameters(\n      ('ModelSignaturesDoFnInferenceUnspecifiedSignature', False, ''),\n      ('ModelSignaturesDoFnInferencePredictSignature', False, 'predict'),\n      ('ModelSignaturesDoFnInferenceServingDefaultSignature', False,\n       'serving_default'),\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/extractors/tfx_bsl_predictions_extractor_"
                },
                "region": {
                  "startLine": 352,
                  "startColumn": 7,
                  "endLine": 352,
                  "endColumn": 51,
                  "snippet": {
                    "text": "       'classification'), ('TFXBSLBulkInferenceUnspecifiedSignature', True, ''),\n      ('TFXBSLBulkInferencePredictSignature', True, 'predict'),\n      ('TFXBSLBulkInferenceServingDefaultSignature', True, 'serving_default'),\n      ('TFXBSLBulkInferenceClassificationSignature', True, 'classification'))\n  def testBinaryClassificationModel(\n      self, experimental_bulk_inference, signature_name):\n    temp_export_dir = self._getExportDir()\n",
                    "rendered": {
                      "text": "       'classification'), ('TFXBSLBulkInferenceUnspecifiedSignature', True, ''),\n      ('TFXBSLBulkInferencePredictSignature', True, 'predict'),\n      ('TFXBSLBulkInferenceServingDefaultSignature', True, 'serving_default'),\n      ('TFXBSLBulkInferenceClassificationSignature', True, 'classification'))\n  def testBinaryClassificationModel(\n      self, experimental_bulk_inference, signature_name):\n    temp_export_dir = self._getExportDir()\n",
                      "markdown": "`       'classification'), ('TFXBSLBulkInferenceUnspecifiedSignature', True, ''),\n      ('TFXBSLBulkInferencePredictSignature', True, 'predict'),\n      ('TFXBSLBulkInferenceServingDefaultSignature', True, 'serving_default'),\n      ('TFXBSLBulkInferenceClassificationSignature', True, 'classification'))\n  def testBinaryClassificationModel(\n      self, experimental_bulk_inference, signature_name):\n    temp_export_dir = self._getExportDir()\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/extractors/tfx_bsl_predictions_extractor_"
                },
                "region": {
                  "startLine": 351,
                  "startColumn": 7,
                  "endLine": 351,
                  "endColumn": 51,
                  "snippet": {
                    "text": "      ('ModelSignaturesDoFnInferenceClassificationSignature', False,\n       'classification'), ('TFXBSLBulkInferenceUnspecifiedSignature', True, ''),\n      ('TFXBSLBulkInferencePredictSignature', True, 'predict'),\n      ('TFXBSLBulkInferenceServingDefaultSignature', True, 'serving_default'),\n      ('TFXBSLBulkInferenceClassificationSignature', True, 'classification'))\n  def testBinaryClassificationModel(\n      self, experimental_bulk_inference, signature_name):\n",
                    "rendered": {
                      "text": "      ('ModelSignaturesDoFnInferenceClassificationSignature', False,\n       'classification'), ('TFXBSLBulkInferenceUnspecifiedSignature', True, ''),\n      ('TFXBSLBulkInferencePredictSignature', True, 'predict'),\n      ('TFXBSLBulkInferenceServingDefaultSignature', True, 'serving_default'),\n      ('TFXBSLBulkInferenceClassificationSignature', True, 'classification'))\n  def testBinaryClassificationModel(\n      self, experimental_bulk_inference, signature_name):\n",
                      "markdown": "`      ('ModelSignaturesDoFnInferenceClassificationSignature', False,\n       'classification'), ('TFXBSLBulkInferenceUnspecifiedSignature', True, ''),\n      ('TFXBSLBulkInferencePredictSignature', True, 'predict'),\n      ('TFXBSLBulkInferenceServingDefaultSignature', True, 'serving_default'),\n      ('TFXBSLBulkInferenceClassificationSignature', True, 'classification'))\n  def testBinaryClassificationModel(\n      self, experimental_bulk_inference, signature_name):\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/extractors/tfx_bsl_predictions_extractor_"
                },
                "region": {
                  "startLine": 348,
                  "startColumn": 7,
                  "endLine": 348,
                  "endColumn": 60,
                  "snippet": {
                    "text": "      ('ModelSignaturesDoFnInferencePredictSignature', False, 'predict'),\n      ('ModelSignaturesDoFnInferenceServingDefaultSignature', False,\n       'serving_default'),\n      ('ModelSignaturesDoFnInferenceClassificationSignature', False,\n       'classification'), ('TFXBSLBulkInferenceUnspecifiedSignature', True, ''),\n      ('TFXBSLBulkInferencePredictSignature', True, 'predict'),\n      ('TFXBSLBulkInferenceServingDefaultSignature', True, 'serving_default'),\n",
                    "rendered": {
                      "text": "      ('ModelSignaturesDoFnInferencePredictSignature', False, 'predict'),\n      ('ModelSignaturesDoFnInferenceServingDefaultSignature', False,\n       'serving_default'),\n      ('ModelSignaturesDoFnInferenceClassificationSignature', False,\n       'classification'), ('TFXBSLBulkInferenceUnspecifiedSignature', True, ''),\n      ('TFXBSLBulkInferencePredictSignature', True, 'predict'),\n      ('TFXBSLBulkInferenceServingDefaultSignature', True, 'serving_default'),\n",
                      "markdown": "`      ('ModelSignaturesDoFnInferencePredictSignature', False, 'predict'),\n      ('ModelSignaturesDoFnInferenceServingDefaultSignature', False,\n       'serving_default'),\n      ('ModelSignaturesDoFnInferenceClassificationSignature', False,\n       'classification'), ('TFXBSLBulkInferenceUnspecifiedSignature', True, ''),\n      ('TFXBSLBulkInferencePredictSignature', True, 'predict'),\n      ('TFXBSLBulkInferenceServingDefaultSignature', True, 'serving_default'),\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/extractors/tfx_bsl_predictions_extractor_"
                },
                "region": {
                  "startLine": 346,
                  "startColumn": 7,
                  "endLine": 346,
                  "endColumn": 60,
                  "snippet": {
                    "text": "  @parameterized.named_parameters(\n      ('ModelSignaturesDoFnInferenceUnspecifiedSignature', False, ''),\n      ('ModelSignaturesDoFnInferencePredictSignature', False, 'predict'),\n      ('ModelSignaturesDoFnInferenceServingDefaultSignature', False,\n       'serving_default'),\n      ('ModelSignaturesDoFnInferenceClassificationSignature', False,\n       'classification'), ('TFXBSLBulkInferenceUnspecifiedSignature', True, ''),\n",
                    "rendered": {
                      "text": "  @parameterized.named_parameters(\n      ('ModelSignaturesDoFnInferenceUnspecifiedSignature', False, ''),\n      ('ModelSignaturesDoFnInferencePredictSignature', False, 'predict'),\n      ('ModelSignaturesDoFnInferenceServingDefaultSignature', False,\n       'serving_default'),\n      ('ModelSignaturesDoFnInferenceClassificationSignature', False,\n       'classification'), ('TFXBSLBulkInferenceUnspecifiedSignature', True, ''),\n",
                      "markdown": "`  @parameterized.named_parameters(\n      ('ModelSignaturesDoFnInferenceUnspecifiedSignature', False, ''),\n      ('ModelSignaturesDoFnInferencePredictSignature', False, 'predict'),\n      ('ModelSignaturesDoFnInferenceServingDefaultSignature', False,\n       'serving_default'),\n      ('ModelSignaturesDoFnInferenceClassificationSignature', False,\n       'classification'), ('TFXBSLBulkInferenceUnspecifiedSignature', True, ''),\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/extractors/tfx_bsl_predictions_extractor_"
                },
                "region": {
                  "startLine": 345,
                  "startColumn": 7,
                  "endLine": 345,
                  "endColumn": 53,
                  "snippet": {
                    "text": "\n  @parameterized.named_parameters(\n      ('ModelSignaturesDoFnInferenceUnspecifiedSignature', False, ''),\n      ('ModelSignaturesDoFnInferencePredictSignature', False, 'predict'),\n      ('ModelSignaturesDoFnInferenceServingDefaultSignature', False,\n       'serving_default'),\n      ('ModelSignaturesDoFnInferenceClassificationSignature', False,\n",
                    "rendered": {
                      "text": "\n  @parameterized.named_parameters(\n      ('ModelSignaturesDoFnInferenceUnspecifiedSignature', False, ''),\n      ('ModelSignaturesDoFnInferencePredictSignature', False, 'predict'),\n      ('ModelSignaturesDoFnInferenceServingDefaultSignature', False,\n       'serving_default'),\n      ('ModelSignaturesDoFnInferenceClassificationSignature', False,\n",
                      "markdown": "`\n  @parameterized.named_parameters(\n      ('ModelSignaturesDoFnInferenceUnspecifiedSignature', False, ''),\n      ('ModelSignaturesDoFnInferencePredictSignature', False, 'predict'),\n      ('ModelSignaturesDoFnInferenceServingDefaultSignature', False,\n       'serving_default'),\n      ('ModelSignaturesDoFnInferenceClassificationSignature', False,\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/extractors/tfx_bsl_predictions_extractor_"
                },
                "region": {
                  "startLine": 344,
                  "startColumn": 7,
                  "endLine": 344,
                  "endColumn": 57,
                  "snippet": {
                    "text": "              equals_fn=np.isclose))\n\n  @parameterized.named_parameters(\n      ('ModelSignaturesDoFnInferenceUnspecifiedSignature', False, ''),\n      ('ModelSignaturesDoFnInferencePredictSignature', False, 'predict'),\n      ('ModelSignaturesDoFnInferenceServingDefaultSignature', False,\n       'serving_default'),\n",
                    "rendered": {
                      "text": "              equals_fn=np.isclose))\n\n  @parameterized.named_parameters(\n      ('ModelSignaturesDoFnInferenceUnspecifiedSignature', False, ''),\n      ('ModelSignaturesDoFnInferencePredictSignature', False, 'predict'),\n      ('ModelSignaturesDoFnInferenceServingDefaultSignature', False,\n       'serving_default'),\n",
                      "markdown": "`              equals_fn=np.isclose))\n\n  @parameterized.named_parameters(\n      ('ModelSignaturesDoFnInferenceUnspecifiedSignature', False, ''),\n      ('ModelSignaturesDoFnInferencePredictSignature', False, 'predict'),\n      ('ModelSignaturesDoFnInferenceServingDefaultSignature', False,\n       'serving_default'),\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/extractors/tfx_bsl_predictions_extractor_"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/extractors/tfx_bsl_predictions_extractor."
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/experimental/preprocessing_functions/__in"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/addons/fairness/post_export_metrics/fairn"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/addons/fairness/post_export_metrics/fairn"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 62,
                  "endLine": 43,
                  "endColumn": 66,
                  "snippet": {
                    "text": "      Equality of Opportunity attempts to match the True Positive* rate\n      (aka recall) of different data slices.\n    * Equality of Odds\n      In addition to looking at Equality of Opportunity, looks at equalizing the\n      False Positive* rates of slices as well.\n\n  The choice to focus on these metrics as a starting point is based primarily on\n",
                    "rendered": {
                      "text": "      Equality of Opportunity attempts to match the True Positive* rate\n      (aka recall) of different data slices.\n    * Equality of Odds\n      In addition to looking at Equality of Opportunity, looks at equalizing the\n      False Positive* rates of slices as well.\n\n  The choice to focus on these metrics as a starting point is based primarily on\n",
                      "markdown": "`      Equality of Opportunity attempts to match the True Positive* rate\n      (aka recall) of different data slices.\n    * Equality of Odds\n      In addition to looking at Equality of Opportunity, looks at equalizing the\n      False Positive* rates of slices as well.\n\n  The choice to focus on these metrics as a starting point is based primarily on\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/addons/fairness/post_export_metrics/fairn"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 28,
                  "endLine": 43,
                  "endColumn": 32,
                  "snippet": {
                    "text": "      Equality of Opportunity attempts to match the True Positive* rate\n      (aka recall) of different data slices.\n    * Equality of Odds\n      In addition to looking at Equality of Opportunity, looks at equalizing the\n      False Positive* rates of slices as well.\n\n  The choice to focus on these metrics as a starting point is based primarily on\n",
                    "rendered": {
                      "text": "      Equality of Opportunity attempts to match the True Positive* rate\n      (aka recall) of different data slices.\n    * Equality of Odds\n      In addition to looking at Equality of Opportunity, looks at equalizing the\n      False Positive* rates of slices as well.\n\n  The choice to focus on these metrics as a starting point is based primarily on\n",
                      "markdown": "`      Equality of Opportunity attempts to match the True Positive* rate\n      (aka recall) of different data slices.\n    * Equality of Odds\n      In addition to looking at Equality of Opportunity, looks at equalizing the\n      False Positive* rates of slices as well.\n\n  The choice to focus on these metrics as a starting point is based primarily on\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/addons/fairness/post_export_metrics/fairn"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/addons/fairness/notebook/jupyter/__init__"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/addons/fairness/metrics/counterfactual_fa"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/addons/fairness/metrics/counterfactual_fa"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/multi_class_confusion_matrix_metr"
                },
                "region": {
                  "startLine": 199,
                  "startColumn": 35,
                  "endLine": 199,
                  "endColumn": 40,
                  "snippet": {
                    "text": "      all_entry_keys = set(self_entries).union(other_entries)\n      for entry_key in all_entry_keys:\n        self_count = self_entries.get(entry_key, 0)\n        other_count = other_entries.get(entry_key, 0)\n        result[threshold][entry_key] = op(self_count, other_count)\n    return result\n\n",
                    "rendered": {
                      "text": "      all_entry_keys = set(self_entries).union(other_entries)\n      for entry_key in all_entry_keys:\n        self_count = self_entries.get(entry_key, 0)\n        other_count = other_entries.get(entry_key, 0)\n        result[threshold][entry_key] = op(self_count, other_count)\n    return result\n\n",
                      "markdown": "`      all_entry_keys = set(self_entries).union(other_entries)\n      for entry_key in all_entry_keys:\n        self_count = self_entries.get(entry_key, 0)\n        other_count = other_entries.get(entry_key, 0)\n        result[threshold][entry_key] = op(self_count, other_count)\n    return result\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/multi_class_confusion_matrix_metr"
                },
                "region": {
                  "startLine": 198,
                  "startColumn": 33,
                  "endLine": 198,
                  "endColumn": 38,
                  "snippet": {
                    "text": "      result[threshold] = {}\n      all_entry_keys = set(self_entries).union(other_entries)\n      for entry_key in all_entry_keys:\n        self_count = self_entries.get(entry_key, 0)\n        other_count = other_entries.get(entry_key, 0)\n        result[threshold][entry_key] = op(self_count, other_count)\n    return result\n",
                    "rendered": {
                      "text": "      result[threshold] = {}\n      all_entry_keys = set(self_entries).union(other_entries)\n      for entry_key in all_entry_keys:\n        self_count = self_entries.get(entry_key, 0)\n        other_count = other_entries.get(entry_key, 0)\n        result[threshold][entry_key] = op(self_count, other_count)\n    return result\n",
                      "markdown": "`      result[threshold] = {}\n      all_entry_keys = set(self_entries).union(other_entries)\n      for entry_key in all_entry_keys:\n        self_count = self_entries.get(entry_key, 0)\n        other_count = other_entries.get(entry_key, 0)\n        result[threshold][entry_key] = op(self_count, other_count)\n    return result\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/multi_class_confusion_matrix_metr"
                },
                "region": {
                  "startLine": 194,
                  "startColumn": 27,
                  "endLine": 194,
                  "endColumn": 32,
                  "snippet": {
                    "text": "    all_thresholds = set(self).union(other)\n    for threshold in all_thresholds:\n      self_entries = self.get(threshold, {})\n      other_entries = other.get(threshold, {})\n      result[threshold] = {}\n      all_entry_keys = set(self_entries).union(other_entries)\n      for entry_key in all_entry_keys:\n",
                    "rendered": {
                      "text": "    all_thresholds = set(self).union(other)\n    for threshold in all_thresholds:\n      self_entries = self.get(threshold, {})\n      other_entries = other.get(threshold, {})\n      result[threshold] = {}\n      all_entry_keys = set(self_entries).union(other_entries)\n      for entry_key in all_entry_keys:\n",
                      "markdown": "`    all_thresholds = set(self).union(other)\n    for threshold in all_thresholds:\n      self_entries = self.get(threshold, {})\n      other_entries = other.get(threshold, {})\n      result[threshold] = {}\n      all_entry_keys = set(self_entries).union(other_entries)\n      for entry_key in all_entry_keys:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/multi_class_confusion_matrix_metr"
                },
                "region": {
                  "startLine": 193,
                  "startColumn": 25,
                  "endLine": 193,
                  "endColumn": 30,
                  "snippet": {
                    "text": "    result = Matrices()\n    all_thresholds = set(self).union(other)\n    for threshold in all_thresholds:\n      self_entries = self.get(threshold, {})\n      other_entries = other.get(threshold, {})\n      result[threshold] = {}\n      all_entry_keys = set(self_entries).union(other_entries)\n",
                    "rendered": {
                      "text": "    result = Matrices()\n    all_thresholds = set(self).union(other)\n    for threshold in all_thresholds:\n      self_entries = self.get(threshold, {})\n      other_entries = other.get(threshold, {})\n      result[threshold] = {}\n      all_entry_keys = set(self_entries).union(other_entries)\n",
                      "markdown": "`    result = Matrices()\n    all_thresholds = set(self).union(other)\n    for threshold in all_thresholds:\n      self_entries = self.get(threshold, {})\n      other_entries = other.get(threshold, {})\n      result[threshold] = {}\n      all_entry_keys = set(self_entries).union(other_entries)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/multi_class_confusion_matrix_metr"
                },
                "region": {
                  "startLine": 235,
                  "startColumn": 41,
                  "endLine": 235,
                  "endColumn": 45,
                  "snippet": {
                    "text": "\n\nclass _MultiClassConfusionMatrixCombiner(beam.CombineFn):\n  \"\"\"Creates multi-class confusion matrix at thresholds from standard inputs.\"\"\"\n\n  def __init__(self, key: metric_types.MetricKey,\n               eval_config: Optional[config_pb2.EvalConfig],\n",
                    "rendered": {
                      "text": "\n\nclass _MultiClassConfusionMatrixCombiner(beam.CombineFn):\n  \"\"\"Creates multi-class confusion matrix at thresholds from standard inputs.\"\"\"\n\n  def __init__(self, key: metric_types.MetricKey,\n               eval_config: Optional[config_pb2.EvalConfig],\n",
                      "markdown": "`\n\nclass _MultiClassConfusionMatrixCombiner(beam.CombineFn):\n  \"\"\"Creates multi-class confusion matrix at thresholds from standard inputs.\"\"\"\n\n  def __init__(self, key: metric_types.MetricKey,\n               eval_config: Optional[config_pb2.EvalConfig],\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/multi_class_confusion_matrix_metr"
                },
                "region": {
                  "startLine": 146,
                  "startColumn": 60,
                  "endLine": 146,
                  "endColumn": 64,
                  "snippet": {
                    "text": "  \"\"\"\n  if num_thresholds is not None and thresholds is not None:\n    raise ValueError(\n        'only one of thresholds or num_thresholds can be set at a time')\n  if num_thresholds is None and thresholds is None:\n    thresholds = [0.0]\n  if num_thresholds is not None:\n",
                    "rendered": {
                      "text": "  \"\"\"\n  if num_thresholds is not None and thresholds is not None:\n    raise ValueError(\n        'only one of thresholds or num_thresholds can be set at a time')\n  if num_thresholds is None and thresholds is None:\n    thresholds = [0.0]\n  if num_thresholds is not None:\n",
                      "markdown": "`  \"\"\"\n  if num_thresholds is not None and thresholds is not None:\n    raise ValueError(\n        'only one of thresholds or num_thresholds can be set at a time')\n  if num_thresholds is None and thresholds is None:\n    thresholds = [0.0]\n  if num_thresholds is not None:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/multi_class_confusion_matrix_metr"
                },
                "region": {
                  "startLine": 142,
                  "startColumn": 61,
                  "endLine": 142,
                  "endColumn": 65,
                  "snippet": {
                    "text": "    example_weighted: True if example weights should be applied.\n\n  Raises:\n    ValueError: If both num_thresholds and thresholds are set at the same time.\n  \"\"\"\n  if num_thresholds is not None and thresholds is not None:\n    raise ValueError(\n",
                    "rendered": {
                      "text": "    example_weighted: True if example weights should be applied.\n\n  Raises:\n    ValueError: If both num_thresholds and thresholds are set at the same time.\n  \"\"\"\n  if num_thresholds is not None and thresholds is not None:\n    raise ValueError(\n",
                      "markdown": "`    example_weighted: True if example weights should be applied.\n\n  Raises:\n    ValueError: If both num_thresholds and thresholds are set at the same time.\n  \"\"\"\n  if num_thresholds is not None and thresholds is not None:\n    raise ValueError(\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/multi_class_confusion_matrix_metr"
                },
                "region": {
                  "startLine": 131,
                  "startColumn": 18,
                  "endLine": 131,
                  "endColumn": 22,
                  "snippet": {
                    "text": "      num_thresholds or thresholds should be used.\n    num_thresholds: Number of thresholds to use. Thresholds will be calculated\n      using linear interpolation between 0.0 and 1.0 with equidistant values and\n      bondardaries at -epsilon and 1.0+epsilon. Values must be > 0. Only one of\n      num_thresholds or thresholds should be used.\n    name: Metric name.\n    extract_label_prediction_and_weight: User-provided function argument that\n",
                    "rendered": {
                      "text": "      num_thresholds or thresholds should be used.\n    num_thresholds: Number of thresholds to use. Thresholds will be calculated\n      using linear interpolation between 0.0 and 1.0 with equidistant values and\n      bondardaries at -epsilon and 1.0+epsilon. Values must be > 0. Only one of\n      num_thresholds or thresholds should be used.\n    name: Metric name.\n    extract_label_prediction_and_weight: User-provided function argument that\n",
                      "markdown": "`      num_thresholds or thresholds should be used.\n    num_thresholds: Number of thresholds to use. Thresholds will be calculated\n      using linear interpolation between 0.0 and 1.0 with equidistant values and\n      bondardaries at -epsilon and 1.0+epsilon. Values must be > 0. Only one of\n      num_thresholds or thresholds should be used.\n    name: Metric name.\n    extract_label_prediction_and_weight: User-provided function argument that\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/multi_class_confusion_matrix_metr"
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 58,
                  "endLine": 70,
                  "endColumn": 62,
                  "snippet": {
                    "text": "    model_name: str = '',\n    output_name: str = '',\n    example_weighted: bool = False) -> metric_types.MetricComputations:\n  \"\"\"Returns computations for multi-class confusion matrix at thresholds.\"\"\"\n  if not thresholds:\n    thresholds = [0.5]\n\n",
                    "rendered": {
                      "text": "    model_name: str = '',\n    output_name: str = '',\n    example_weighted: bool = False) -> metric_types.MetricComputations:\n  \"\"\"Returns computations for multi-class confusion matrix at thresholds.\"\"\"\n  if not thresholds:\n    thresholds = [0.5]\n\n",
                      "markdown": "`    model_name: str = '',\n    output_name: str = '',\n    example_weighted: bool = False) -> metric_types.MetricComputations:\n  \"\"\"Returns computations for multi-class confusion matrix at thresholds.\"\"\"\n  if not thresholds:\n    thresholds = [0.5]\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/multi_class_confusion_matrix_metr"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 28,
                  "endLine": 37,
                  "endColumn": 32,
                  "snippet": {
                    "text": "  predicted classes.\n\n  The inputs are assumed to contain a single positive label per example (i.e.\n  only one class can be true at a time) while the predictions are assumed to sum\n  to 1.0.\n  \"\"\"\n\n",
                    "rendered": {
                      "text": "  predicted classes.\n\n  The inputs are assumed to contain a single positive label per example (i.e.\n  only one class can be true at a time) while the predictions are assumed to sum\n  to 1.0.\n  \"\"\"\n\n",
                      "markdown": "`  predicted classes.\n\n  The inputs are assumed to contain a single positive label per example (i.e.\n  only one class can be true at a time) while the predictions are assumed to sum\n  to 1.0.\n  \"\"\"\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/multi_class_confusion_matrix_metr"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 41,
                  "endLine": 31,
                  "endColumn": 45,
                  "snippet": {
                    "text": "\n\nclass MultiClassConfusionMatrixAtThresholds(metric_types.Metric):\n  \"\"\"Multi-class confusion matrix metrics at thresholds.\n\n  Computes weighted example counts for all combinations of actual / (top)\n  predicted classes.\n",
                    "rendered": {
                      "text": "\n\nclass MultiClassConfusionMatrixAtThresholds(metric_types.Metric):\n  \"\"\"Multi-class confusion matrix metrics at thresholds.\n\n  Computes weighted example counts for all combinations of actual / (top)\n  predicted classes.\n",
                      "markdown": "`\n\nclass MultiClassConfusionMatrixAtThresholds(metric_types.Metric):\n  \"\"\"Multi-class confusion matrix metrics at thresholds.\n\n  Computes weighted example counts for all combinations of actual / (top)\n  predicted classes.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/multi_class_confusion_matrix_metr"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 39,
                  "endLine": 14,
                  "endColumn": 43,
                  "snippet": {
                    "text": "# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\"\"\"Multi-class confusion matrix metrics at thresholds.\"\"\"\n\nfrom typing import Any, Callable, Dict, Iterable, Iterator, List, NamedTuple, Optional, Tuple\n\n",
                    "rendered": {
                      "text": "# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\"\"\"Multi-class confusion matrix metrics at thresholds.\"\"\"\n\nfrom typing import Any, Callable, Dict, Iterable, Iterator, List, NamedTuple, Optional, Tuple\n\n",
                      "markdown": "`# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n\"\"\"Multi-class confusion matrix metrics at thresholds.\"\"\"\n\nfrom typing import Any, Callable, Dict, Iterable, Iterator, List, NamedTuple, Optional, Tuple\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/multi_class_confusion_matrix_metr"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/multi_class_confusion_matrix_metr"
                },
                "region": {
                  "startLine": 108,
                  "startColumn": 5,
                  "endLine": 108,
                  "endColumn": 10,
                  "snippet": {
                    "text": "_EPSILON = 1e-7\n\n# Class ID used when no prediction was made because a threshold was given and\n# the top prediction was less than the threshold.\nNO_PREDICTED_CLASS_ID = -1\n\n\n",
                    "rendered": {
                      "text": "_EPSILON = 1e-7\n\n# Class ID used when no prediction was made because a threshold was given and\n# the top prediction was less than the threshold.\nNO_PREDICTED_CLASS_ID = -1\n\n\n",
                      "markdown": "`_EPSILON = 1e-7\n\n# Class ID used when no prediction was made because a threshold was given and\n# the top prediction was less than the threshold.\nNO_PREDICTED_CLASS_ID = -1\n\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/multi_class_confusion_matrix_metr"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 7,
                  "endLine": 48,
                  "endColumn": 12,
                  "snippet": {
                    "text": "\n    Args:\n      thresholds: Optional thresholds, defaults to 0.5 if not specified. If the\n        top prediction is less than a threshold then the associated example will\n        be assumed to have no prediction associated with it (the\n        predicted_class_id will be set to NO_PREDICTED_CLASS_ID).\n      name: Metric name.\n",
                    "rendered": {
                      "text": "\n    Args:\n      thresholds: Optional thresholds, defaults to 0.5 if not specified. If the\n        top prediction is less than a threshold then the associated example will\n        be assumed to have no prediction associated with it (the\n        predicted_class_id will be set to NO_PREDICTED_CLASS_ID).\n      name: Metric name.\n",
                      "markdown": "`\n    Args:\n      thresholds: Optional thresholds, defaults to 0.5 if not specified. If the\n        top prediction is less than a threshold then the associated example will\n        be assumed to have no prediction associated with it (the\n        predicted_class_id will be set to NO_PREDICTED_CLASS_ID).\n      name: Metric name.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/min_label_position_test.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/min_label_position.py"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 12,
                  "endLine": 33,
                  "endColumn": 16,
                  "snippet": {
                    "text": "\n  Calculates the least index in a query which has a positive label. The final\n  returned value is the weighted average over all queries in the evaluation set\n  which have at least one labeled entry. Note, ranking is indexed from one, so\n  the optimal value for this metric is one. If there are no labeled rows in the\n  evaluation set, the final output will be zero.\n\n",
                    "rendered": {
                      "text": "\n  Calculates the least index in a query which has a positive label. The final\n  returned value is the weighted average over all queries in the evaluation set\n  which have at least one labeled entry. Note, ranking is indexed from one, so\n  the optimal value for this metric is one. If there are no labeled rows in the\n  evaluation set, the final output will be zero.\n\n",
                      "markdown": "`\n  Calculates the least index in a query which has a positive label. The final\n  returned value is the weighted average over all queries in the evaluation set\n  which have at least one labeled entry. Note, ranking is indexed from one, so\n  the optimal value for this metric is one. If there are no labeled rows in the\n  evaluation set, the final output will be zero.\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/min_label_position.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/metric_util_test.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/metric_util.py"
                },
                "region": {
                  "startLine": 1016,
                  "startColumn": 10,
                  "endLine": 1016,
                  "endColumn": 18,
                  "snippet": {
                    "text": "    # encoded as a list object which doesn't accurately reflect the shape (i.e.\n    # np.array([[1, 2], [3]]) has shape (2,). As such we will assume that all\n    # multi-label use cases will use one-hot encodings (e.g. [0, 1. 1, ...]) and\n    # will update this if/when RaggedTensorValue and SparseTensorValue value\n    # types are supported in addition to np.ndarray.\n    if sparse_labels is not None and not sparse_labels:\n      raise ValueError(\n",
                    "rendered": {
                      "text": "    # encoded as a list object which doesn't accurately reflect the shape (i.e.\n    # np.array([[1, 2], [3]]) has shape (2,). As such we will assume that all\n    # multi-label use cases will use one-hot encodings (e.g. [0, 1. 1, ...]) and\n    # will update this if/when RaggedTensorValue and SparseTensorValue value\n    # types are supported in addition to np.ndarray.\n    if sparse_labels is not None and not sparse_labels:\n      raise ValueError(\n",
                      "markdown": "`    # encoded as a list object which doesn't accurately reflect the shape (i.e.\n    # np.array([[1, 2], [3]]) has shape (2,). As such we will assume that all\n    # multi-label use cases will use one-hot encodings (e.g. [0, 1. 1, ...]) and\n    # will update this if/when RaggedTensorValue and SparseTensorValue value\n    # types are supported in addition to np.ndarray.\n    if sparse_labels is not None and not sparse_labels:\n      raise ValueError(\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/metric_util.py"
                },
                "region": {
                  "startLine": 871,
                  "startColumn": 67,
                  "endLine": 871,
                  "endColumn": 71,
                  "snippet": {
                    "text": "        # If vocab is used then the values will be the indices into the vocab\n        # and we should use multi-hot encoding to store the output. We can\n        # accomplish this by passing 1's for the values and using the values\n        # converted from the vocab as the indices to insert the 1's at the\n        # proper offsets in the resulting multi-hot vector.\n        labels = _to_dense_tensor(\n            np.ones(values.shape), values, predictions.shape)\n",
                    "rendered": {
                      "text": "        # If vocab is used then the values will be the indices into the vocab\n        # and we should use multi-hot encoding to store the output. We can\n        # accomplish this by passing 1's for the values and using the values\n        # converted from the vocab as the indices to insert the 1's at the\n        # proper offsets in the resulting multi-hot vector.\n        labels = _to_dense_tensor(\n            np.ones(values.shape), values, predictions.shape)\n",
                      "markdown": "`        # If vocab is used then the values will be the indices into the vocab\n        # and we should use multi-hot encoding to store the output. We can\n        # accomplish this by passing 1's for the values and using the values\n        # converted from the vocab as the indices to insert the 1's at the\n        # proper offsets in the resulting multi-hot vector.\n        labels = _to_dense_tensor(\n            np.ones(values.shape), values, predictions.shape)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/metric_util.py"
                },
                "region": {
                  "startLine": 359,
                  "startColumn": 31,
                  "endLine": 359,
                  "endColumn": 35,
                  "snippet": {
                    "text": "def select_indices(\n    arr: np.ndarray,\n    indices: Union[np.ndarray, Tuple[np.ndarray, np.ndarray]]) -> np.ndarray:\n  \"\"\"Selects values from tensor at given indices.\n\n  Args:\n    arr: Array to select values from.\n",
                    "rendered": {
                      "text": "def select_indices(\n    arr: np.ndarray,\n    indices: Union[np.ndarray, Tuple[np.ndarray, np.ndarray]]) -> np.ndarray:\n  \"\"\"Selects values from tensor at given indices.\n\n  Args:\n    arr: Array to select values from.\n",
                      "markdown": "`def select_indices(\n    arr: np.ndarray,\n    indices: Union[np.ndarray, Tuple[np.ndarray, np.ndarray]]) -> np.ndarray:\n  \"\"\"Selects values from tensor at given indices.\n\n  Args:\n    arr: Array to select values from.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/metric_util.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/metric_util.py"
                },
                "region": {
                  "startLine": 471,
                  "startColumn": 70,
                  "endLine": 471,
                  "endColumn": 75,
                  "snippet": {
                    "text": "    Input  : labels=[0, 0, 1] predictions=[0.3, 0.1, 0.6]\n    Output : (np.array([0, 0, 1]), np.array([0.3, -inf, 0.6]), np.array([1.0]))\n\n    # sub_key.top_k=2 and aggregation_type is not None (i.e. aggregate top 2).\n    #\n    # Multi-class classification w/ sparse labels\n    Input  : labels=[2] predictions=[0.3, 0.6, 0.1]\n",
                    "rendered": {
                      "text": "    Input  : labels=[0, 0, 1] predictions=[0.3, 0.1, 0.6]\n    Output : (np.array([0, 0, 1]), np.array([0.3, -inf, 0.6]), np.array([1.0]))\n\n    # sub_key.top_k=2 and aggregation_type is not None (i.e. aggregate top 2).\n    #\n    # Multi-class classification w/ sparse labels\n    Input  : labels=[2] predictions=[0.3, 0.6, 0.1]\n",
                      "markdown": "`    Input  : labels=[0, 0, 1] predictions=[0.3, 0.1, 0.6]\n    Output : (np.array([0, 0, 1]), np.array([0.3, -inf, 0.6]), np.array([1.0]))\n\n    # sub_key.top_k=2 and aggregation_type is not None (i.e. aggregate top 2).\n    #\n    # Multi-class classification w/ sparse labels\n    Input  : labels=[2] predictions=[0.3, 0.6, 0.1]\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/metric_util.py"
                },
                "region": {
                  "startLine": 462,
                  "startColumn": 72,
                  "endLine": 462,
                  "endColumn": 77,
                  "snippet": {
                    "text": "    Input  : labels=[0, 0, 1] predictions=[0.3, 0.6, 0.1]\n    Output : (np.array([1]), np.array([0.1]), np.array([1.0]))\n\n    # sub_key.top_k=2 and aggregation_type is None (i.e. binarization of top 2).\n    #\n    # Multi-class classification w/ sparse labels\n    Input  : labels=[2] predictions=[0.3, 0.6, 0.1]\n",
                    "rendered": {
                      "text": "    Input  : labels=[0, 0, 1] predictions=[0.3, 0.6, 0.1]\n    Output : (np.array([1]), np.array([0.1]), np.array([1.0]))\n\n    # sub_key.top_k=2 and aggregation_type is None (i.e. binarization of top 2).\n    #\n    # Multi-class classification w/ sparse labels\n    Input  : labels=[2] predictions=[0.3, 0.6, 0.1]\n",
                      "markdown": "`    Input  : labels=[0, 0, 1] predictions=[0.3, 0.6, 0.1]\n    Output : (np.array([1]), np.array([0.1]), np.array([1.0]))\n\n    # sub_key.top_k=2 and aggregation_type is None (i.e. binarization of top 2).\n    #\n    # Multi-class classification w/ sparse labels\n    Input  : labels=[2] predictions=[0.3, 0.6, 0.1]\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/metric_util.py"
                },
                "region": {
                  "startLine": 424,
                  "startColumn": 30,
                  "endLine": 424,
                  "endColumn": 35,
                  "snippet": {
                    "text": "\n  Note that for top_k without aggregation, the non-top_k prediction values will\n  be set to float('-inf'), but for top_k with aggregation the values will be\n  truncated to only return the top k values.\n\n  Examples:\n\n",
                    "rendered": {
                      "text": "\n  Note that for top_k without aggregation, the non-top_k prediction values will\n  be set to float('-inf'), but for top_k with aggregation the values will be\n  truncated to only return the top k values.\n\n  Examples:\n\n",
                      "markdown": "`\n  Note that for top_k without aggregation, the non-top_k prediction values will\n  be set to float('-inf'), but for top_k with aggregation the values will be\n  truncated to only return the top k values.\n\n  Examples:\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/metric_util.py"
                },
                "region": {
                  "startLine": 419,
                  "startColumn": 65,
                  "endLine": 419,
                  "endColumn": 70,
                  "snippet": {
                    "text": "  provided (default behavior) unless (1) flatten is True in which case a series\n  of values (one per class ID) will be returned with last dimension of size 1 or\n  (2) a sub_key is used in which case the last dimension may be re-shaped to\n  match the new number of outputs (1 for class_id or k, top_k for top k with\n  aggregation).\n\n  Note that for top_k without aggregation, the non-top_k prediction values will\n",
                    "rendered": {
                      "text": "  provided (default behavior) unless (1) flatten is True in which case a series\n  of values (one per class ID) will be returned with last dimension of size 1 or\n  (2) a sub_key is used in which case the last dimension may be re-shaped to\n  match the new number of outputs (1 for class_id or k, top_k for top k with\n  aggregation).\n\n  Note that for top_k without aggregation, the non-top_k prediction values will\n",
                      "markdown": "`  provided (default behavior) unless (1) flatten is True in which case a series\n  of values (one per class ID) will be returned with last dimension of size 1 or\n  (2) a sub_key is used in which case the last dimension may be re-shaped to\n  match the new number of outputs (1 for class_id or k, top_k for top k with\n  aggregation).\n\n  Note that for top_k without aggregation, the non-top_k prediction values will\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/metric_util.py"
                },
                "region": {
                  "startLine": 406,
                  "startColumn": 32,
                  "endLine": 406,
                  "endColumn": 37,
                  "snippet": {
                    "text": "  \"\"\"Yields label, prediction, and example weights for use in calculations.\n\n  Where applicable this function will perform model and output name lookups as\n  well as any required class ID, top K, etc conversions. It will also apply\n  prediction keys and label vocabularies given the necessary information is\n  provided as part of the EvalConfig (or standard estimator based naming is\n  used). The sparseness of labels will be inferred from the shapes of the labels\n",
                    "rendered": {
                      "text": "  \"\"\"Yields label, prediction, and example weights for use in calculations.\n\n  Where applicable this function will perform model and output name lookups as\n  well as any required class ID, top K, etc conversions. It will also apply\n  prediction keys and label vocabularies given the necessary information is\n  provided as part of the EvalConfig (or standard estimator based naming is\n  used). The sparseness of labels will be inferred from the shapes of the labels\n",
                      "markdown": "`  \"\"\"Yields label, prediction, and example weights for use in calculations.\n\n  Where applicable this function will perform model and output name lookups as\n  well as any required class ID, top K, etc conversions. It will also apply\n  prediction keys and label vocabularies given the necessary information is\n  provided as part of the EvalConfig (or standard estimator based naming is\n  used). The sparseness of labels will be inferred from the shapes of the labels\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/metric_util.py"
                },
                "region": {
                  "startLine": 344,
                  "startColumn": 58,
                  "endLine": 344,
                  "endColumn": 63,
                  "snippet": {
                    "text": "    #      ...\n    #   ]\n    # However numpy indexing wants the index to be be a 2-tuple of where the\n    # first tuple value contains the row indices (repeated top k times for each\n    # row) and the second tuple value contains the column values.\n    #   (row1, row1, ..., row2, ...), (row1_top_k_index1, row1_top_index_2,...)\n    if sort:\n",
                    "rendered": {
                      "text": "    #      ...\n    #   ]\n    # However numpy indexing wants the index to be be a 2-tuple of where the\n    # first tuple value contains the row indices (repeated top k times for each\n    # row) and the second tuple value contains the column values.\n    #   (row1, row1, ..., row2, ...), (row1_top_k_index1, row1_top_index_2,...)\n    if sort:\n",
                      "markdown": "`    #      ...\n    #   ]\n    # However numpy indexing wants the index to be be a 2-tuple of where the\n    # first tuple value contains the row indices (repeated top k times for each\n    # row) and the second tuple value contains the column values.\n    #   (row1, row1, ..., row2, ...), (row1_top_k_index1, row1_top_index_2,...)\n    if sort:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/metric_util.py"
                },
                "region": {
                  "startLine": 323,
                  "startColumn": 25,
                  "endLine": 323,
                  "endColumn": 30,
                  "snippet": {
                    "text": "  if scores.shape[-1] < top_k:\n    raise ValueError(\n        'not enough values were provided to perform the requested '\n        f'calcuations for top k. The requested value for k is {top_k}, but the '\n        f'values are {scores}\\n\\nThis may be caused by a metric configuration '\n        'error or an error in the pipeline.')\n\n",
                    "rendered": {
                      "text": "  if scores.shape[-1] < top_k:\n    raise ValueError(\n        'not enough values were provided to perform the requested '\n        f'calcuations for top k. The requested value for k is {top_k}, but the '\n        f'values are {scores}\\n\\nThis may be caused by a metric configuration '\n        'error or an error in the pipeline.')\n\n",
                      "markdown": "`  if scores.shape[-1] < top_k:\n    raise ValueError(\n        'not enough values were provided to perform the requested '\n        f'calcuations for top k. The requested value for k is {top_k}, but the '\n        f'values are {scores}\\n\\nThis may be caused by a metric configuration '\n        'error or an error in the pipeline.')\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/metric_util.py"
                },
                "region": {
                  "startLine": 314,
                  "startColumn": 15,
                  "endLine": 314,
                  "endColumn": 20,
                  "snippet": {
                    "text": "  Returns:\n    An array of indices into scores that can be used with either 1D or 2D\n    arrays. If sort was True the indices will be returned in descending order of\n    score (i.e. top score first).\n\n  Raises:\n    ValueError: If top_k doesn't match scores or input has more than 2 dims.\n",
                    "rendered": {
                      "text": "  Returns:\n    An array of indices into scores that can be used with either 1D or 2D\n    arrays. If sort was True the indices will be returned in descending order of\n    score (i.e. top score first).\n\n  Raises:\n    ValueError: If top_k doesn't match scores or input has more than 2 dims.\n",
                      "markdown": "`  Returns:\n    An array of indices into scores that can be used with either 1D or 2D\n    arrays. If sort was True the indices will be returned in descending order of\n    score (i.e. top score first).\n\n  Raises:\n    ValueError: If top_k doesn't match scores or input has more than 2 dims.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/metric_util.py"
                },
                "region": {
                  "startLine": 313,
                  "startColumn": 14,
                  "endLine": 313,
                  "endColumn": 20,
                  "snippet": {
                    "text": "\n  Returns:\n    An array of indices into scores that can be used with either 1D or 2D\n    arrays. If sort was True the indices will be returned in descending order of\n    score (i.e. top score first).\n\n  Raises:\n",
                    "rendered": {
                      "text": "\n  Returns:\n    An array of indices into scores that can be used with either 1D or 2D\n    arrays. If sort was True the indices will be returned in descending order of\n    score (i.e. top score first).\n\n  Raises:\n",
                      "markdown": "`\n  Returns:\n    An array of indices into scores that can be used with either 1D or 2D\n    arrays. If sort was True the indices will be returned in descending order of\n    score (i.e. top score first).\n\n  Raises:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/metric_util.py"
                },
                "region": {
                  "startLine": 307,
                  "startColumn": 20,
                  "endLine": 307,
                  "endColumn": 25,
                  "snippet": {
                    "text": "     scores[indices].reshape(scores.shape[:-1] + (top_k,))\n\n  Args:\n    top_k: Number of top k values to return.\n    scores: Array or list of scores for computing the top_k indices.\n    sort: True if the indices should be sorted (in descending order).\n\n",
                    "rendered": {
                      "text": "     scores[indices].reshape(scores.shape[:-1] + (top_k,))\n\n  Args:\n    top_k: Number of top k values to return.\n    scores: Array or list of scores for computing the top_k indices.\n    sort: True if the indices should be sorted (in descending order).\n\n",
                      "markdown": "`     scores[indices].reshape(scores.shape[:-1] + (top_k,))\n\n  Args:\n    top_k: Number of top k values to return.\n    scores: Array or list of scores for computing the top_k indices.\n    sort: True if the indices should be sorted (in descending order).\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/metric_util.py"
                },
                "region": {
                  "startLine": 93,
                  "startColumn": 3,
                  "endLine": 93,
                  "endColumn": 9,
                  "snippet": {
                    "text": "    # tfma treats metrics starting with '_' as private and does not show it to\n    # users.\n    name = '_' + name\n  # sort the arguments in alphabetical order so that it generates the same name\n  # for the same group of arguments.\n  if kwargs is not None:\n    name = name + ':' + ','.join(k + '=' + str(kwargs[k])\n",
                    "rendered": {
                      "text": "    # tfma treats metrics starting with '_' as private and does not show it to\n    # users.\n    name = '_' + name\n  # sort the arguments in alphabetical order so that it generates the same name\n  # for the same group of arguments.\n  if kwargs is not None:\n    name = name + ':' + ','.join(k + '=' + str(kwargs[k])\n",
                      "markdown": "`    # tfma treats metrics starting with '_' as private and does not show it to\n    # users.\n    name = '_' + name\n  # sort the arguments in alphabetical order so that it generates the same name\n  # for the same group of arguments.\n  if kwargs is not None:\n    name = name + ':' + ','.join(k + '=' + str(kwargs[k])\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/metric_types_test.py"
                },
                "region": {
                  "startLine": 111,
                  "startColumn": 47,
                  "endLine": 111,
                  "endColumn": 51,
                  "snippet": {
                    "text": "      str(metric_types.SubKey(k=2, top_k=2))\n    with self.assertRaises(\n        ValueError,\n        msg=('k and class_id cannot both be set at the same time',),\n    ):\n      str(metric_types.SubKey(k=2, class_id=2))\n\n",
                    "rendered": {
                      "text": "      str(metric_types.SubKey(k=2, top_k=2))\n    with self.assertRaises(\n        ValueError,\n        msg=('k and class_id cannot both be set at the same time',),\n    ):\n      str(metric_types.SubKey(k=2, class_id=2))\n\n",
                      "markdown": "`      str(metric_types.SubKey(k=2, top_k=2))\n    with self.assertRaises(\n        ValueError,\n        msg=('k and class_id cannot both be set at the same time',),\n    ):\n      str(metric_types.SubKey(k=2, class_id=2))\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/metric_types_test.py"
                },
                "region": {
                  "startLine": 106,
                  "startColumn": 44,
                  "endLine": 106,
                  "endColumn": 48,
                  "snippet": {
                    "text": "      str(metric_types.SubKey())\n    with self.assertRaises(\n        ValueError,\n        msg=('k and top_k cannot both be set at the same time',),\n    ):\n      str(metric_types.SubKey(k=2, top_k=2))\n    with self.assertRaises(\n",
                    "rendered": {
                      "text": "      str(metric_types.SubKey())\n    with self.assertRaises(\n        ValueError,\n        msg=('k and top_k cannot both be set at the same time',),\n    ):\n      str(metric_types.SubKey(k=2, top_k=2))\n    with self.assertRaises(\n",
                      "markdown": "`      str(metric_types.SubKey())\n    with self.assertRaises(\n        ValueError,\n        msg=('k and top_k cannot both be set at the same time',),\n    ):\n      str(metric_types.SubKey(k=2, top_k=2))\n    with self.assertRaises(\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/metric_types_test.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/metric_types.py"
                },
                "region": {
                  "startLine": 803,
                  "startColumn": 21,
                  "endLine": 803,
                  "endColumn": 25,
                  "snippet": {
                    "text": "  Calling computations creates the metric computations. The parameters passed to\n  __init__ will be combined with the parameters passed to the computations\n  method. This allows some of the parameters (e.g. model_names, output_names,\n  sub_keys) to be set at the time the computations are created instead of when\n  the metric is defined.\n  \"\"\"\n\n",
                    "rendered": {
                      "text": "  Calling computations creates the metric computations. The parameters passed to\n  __init__ will be combined with the parameters passed to the computations\n  method. This allows some of the parameters (e.g. model_names, output_names,\n  sub_keys) to be set at the time the computations are created instead of when\n  the metric is defined.\n  \"\"\"\n\n",
                      "markdown": "`  Calling computations creates the metric computations. The parameters passed to\n  __init__ will be combined with the parameters passed to the computations\n  method. This allows some of the parameters (e.g. model_names, output_names,\n  sub_keys) to be set at the time the computations are created instead of when\n  the metric is defined.\n  \"\"\"\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/metric_types.py"
                },
                "region": {
                  "startLine": 737,
                  "startColumn": 60,
                  "endLine": 737,
                  "endColumn": 68,
                  "snippet": {
                    "text": "\n  Each metric's create_computations_fn is invoked with a variable set of\n  parameters, depending on the argument names of the callable. If an argument\n  name matches one of the reserved names, this function will update the kwargs\n  with the appropriate value for that arg.\n\n  Args:\n",
                    "rendered": {
                      "text": "\n  Each metric's create_computations_fn is invoked with a variable set of\n  parameters, depending on the argument names of the callable. If an argument\n  name matches one of the reserved names, this function will update the kwargs\n  with the appropriate value for that arg.\n\n  Args:\n",
                      "markdown": "`\n  Each metric's create_computations_fn is invoked with a variable set of\n  parameters, depending on the argument names of the callable. If an argument\n  name matches one of the reserved names, this function will update the kwargs\n  with the appropriate value for that arg.\n\n  Args:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/metric_types.py"
                },
                "region": {
                  "startLine": 643,
                  "startColumn": 72,
                  "endLine": 643,
                  "endColumn": 76,
                  "snippet": {
                    "text": "\n  It is used for metrics which are based upon cross slice comparison.\n  When creating these metric computations it is recommended (but not required)\n  that the underlying MetricComputations that they depend on are defined at the\n  same time. This is to avoid having to pre-construct and pass around all the\n  required dependencies in order to construct a derived metric. The evaluation\n  pipeline is responsible for de-duplicating overlapping MetricComputations so\n",
                    "rendered": {
                      "text": "\n  It is used for metrics which are based upon cross slice comparison.\n  When creating these metric computations it is recommended (but not required)\n  that the underlying MetricComputations that they depend on are defined at the\n  same time. This is to avoid having to pre-construct and pass around all the\n  required dependencies in order to construct a derived metric. The evaluation\n  pipeline is responsible for de-duplicating overlapping MetricComputations so\n",
                      "markdown": "`\n  It is used for metrics which are based upon cross slice comparison.\n  When creating these metric computations it is recommended (but not required)\n  that the underlying MetricComputations that they depend on are defined at the\n  same time. This is to avoid having to pre-construct and pass around all the\n  required dependencies in order to construct a derived metric. The evaluation\n  pipeline is responsible for de-duplicating overlapping MetricComputations so\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/metric_types.py"
                },
                "region": {
                  "startLine": 582,
                  "startColumn": 72,
                  "endLine": 582,
                  "endColumn": 76,
                  "snippet": {
                    "text": "  \"\"\"DerivedMetricComputation derives its result from other computations.\n\n  When creating derived metric computations it is recommended (but not required)\n  that the underlying MetricComputations that they depend on are defined at the\n  same time. This is to avoid having to pre-construct and pass around all the\n  required dependencies in order to construct a derived metric. The evaluation\n  pipeline is responsible for de-duplicating overlapping MetricComputations so\n",
                    "rendered": {
                      "text": "  \"\"\"DerivedMetricComputation derives its result from other computations.\n\n  When creating derived metric computations it is recommended (but not required)\n  that the underlying MetricComputations that they depend on are defined at the\n  same time. This is to avoid having to pre-construct and pass around all the\n  required dependencies in order to construct a derived metric. The evaluation\n  pipeline is responsible for de-duplicating overlapping MetricComputations so\n",
                      "markdown": "`  \"\"\"DerivedMetricComputation derives its result from other computations.\n\n  When creating derived metric computations it is recommended (but not required)\n  that the underlying MetricComputations that they depend on are defined at the\n  same time. This is to avoid having to pre-construct and pass around all the\n  required dependencies in order to construct a derived metric. The evaluation\n  pipeline is responsible for de-duplicating overlapping MetricComputations so\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/metric_types.py"
                },
                "region": {
                  "startLine": 152,
                  "startColumn": 1,
                  "endLine": 152,
                  "endColumn": 5,
                  "snippet": {
                    "text": "  \"\"\"AggregationType identifies aggregation types used with AggregationOptions.\n\n  Only one of micro_average, macro_average, or weighted_macro_average can be set\n  at a time.\n\n  Attributes:\n    micro_average: True of macro averaging used.\n",
                    "rendered": {
                      "text": "  \"\"\"AggregationType identifies aggregation types used with AggregationOptions.\n\n  Only one of micro_average, macro_average, or weighted_macro_average can be set\n  at a time.\n\n  Attributes:\n    micro_average: True of macro averaging used.\n",
                      "markdown": "`  \"\"\"AggregationType identifies aggregation types used with AggregationOptions.\n\n  Only one of micro_average, macro_average, or weighted_macro_average can be set\n  at a time.\n\n  Attributes:\n    micro_average: True of macro averaging used.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/metric_types.py"
                },
                "region": {
                  "startLine": 66,
                  "startColumn": 46,
                  "endLine": 66,
                  "endColumn": 50,
                  "snippet": {
                    "text": "        )\n      if class_id is not None:\n        raise ValueError(\n            'k and class_id cannot both be set at the same time: '\n            f'k={k}, class_id={class_id}'\n        )\n    if k is not None and k < 1:\n",
                    "rendered": {
                      "text": "        )\n      if class_id is not None:\n        raise ValueError(\n            'k and class_id cannot both be set at the same time: '\n            f'k={k}, class_id={class_id}'\n        )\n    if k is not None and k < 1:\n",
                      "markdown": "`        )\n      if class_id is not None:\n        raise ValueError(\n            'k and class_id cannot both be set at the same time: '\n            f'k={k}, class_id={class_id}'\n        )\n    if k is not None and k < 1:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/metric_types.py"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 43,
                  "endLine": 61,
                  "endColumn": 47,
                  "snippet": {
                    "text": "    if k is not None:\n      if top_k is not None:\n        raise ValueError(\n            'k and top_k cannot both be set at the same time: '\n            f'k={k}, top_k={top_k}'\n        )\n      if class_id is not None:\n",
                    "rendered": {
                      "text": "    if k is not None:\n      if top_k is not None:\n        raise ValueError(\n            'k and top_k cannot both be set at the same time: '\n            f'k={k}, top_k={top_k}'\n        )\n      if class_id is not None:\n",
                      "markdown": "`    if k is not None:\n      if top_k is not None:\n        raise ValueError(\n            'k and top_k cannot both be set at the same time: '\n            f'k={k}, top_k={top_k}'\n        )\n      if class_id is not None:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/metric_types.py"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 46,
                  "endLine": 42,
                  "endColumn": 50,
                  "snippet": {
                    "text": "):\n  \"\"\"A SubKey identifies a sub-types of metrics and plots.\n\n  Only one of class_id, k, or top_k can be set at a time.\n\n  Attributes:\n    class_id: Used with multi-class metrics to identify a specific class ID.\n",
                    "rendered": {
                      "text": "):\n  \"\"\"A SubKey identifies a sub-types of metrics and plots.\n\n  Only one of class_id, k, or top_k can be set at a time.\n\n  Attributes:\n    class_id: Used with multi-class metrics to identify a specific class ID.\n",
                      "markdown": "`):\n  \"\"\"A SubKey identifies a sub-types of metrics and plots.\n\n  Only one of class_id, k, or top_k can be set at a time.\n\n  Attributes:\n    class_id: Used with multi-class metrics to identify a specific class ID.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/metric_types.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/metric_types.py"
                },
                "region": {
                  "startLine": 803,
                  "startColumn": 28,
                  "endLine": 803,
                  "endColumn": 34,
                  "snippet": {
                    "text": "  Calling computations creates the metric computations. The parameters passed to\n  __init__ will be combined with the parameters passed to the computations\n  method. This allows some of the parameters (e.g. model_names, output_names,\n  sub_keys) to be set at the time the computations are created instead of when\n  the metric is defined.\n  \"\"\"\n\n",
                    "rendered": {
                      "text": "  Calling computations creates the metric computations. The parameters passed to\n  __init__ will be combined with the parameters passed to the computations\n  method. This allows some of the parameters (e.g. model_names, output_names,\n  sub_keys) to be set at the time the computations are created instead of when\n  the metric is defined.\n  \"\"\"\n\n",
                      "markdown": "`  Calling computations creates the metric computations. The parameters passed to\n  __init__ will be combined with the parameters passed to the computations\n  method. This allows some of the parameters (e.g. model_names, output_names,\n  sub_keys) to be set at the time the computations are created instead of when\n  the metric is defined.\n  \"\"\"\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/metric_types.py"
                },
                "region": {
                  "startLine": 267,
                  "startColumn": 64,
                  "endLine": 267,
                  "endColumn": 70,
                  "snippet": {
                    "text": "    sub_key: Optional sub key.\n    aggregation_type: Optional Aggregation type.\n    example_weighted: Indicates whether this metric was weighted by examples.\n    is_diff: Optional flag to indicate whether this metrics is a diff metric.\n  \"\"\"\n\n  def __new__(\n",
                    "rendered": {
                      "text": "    sub_key: Optional sub key.\n    aggregation_type: Optional Aggregation type.\n    example_weighted: Indicates whether this metric was weighted by examples.\n    is_diff: Optional flag to indicate whether this metrics is a diff metric.\n  \"\"\"\n\n  def __new__(\n",
                      "markdown": "`    sub_key: Optional sub key.\n    aggregation_type: Optional Aggregation type.\n    example_weighted: Indicates whether this metric was weighted by examples.\n    is_diff: Optional flag to indicate whether this metrics is a diff metric.\n  \"\"\"\n\n  def __new__(\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/metric_specs_test.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/metric_specs.py"
                },
                "region": {
                  "startLine": 239,
                  "startColumn": 56,
                  "endLine": 239,
                  "endColumn": 61,
                  "snippet": {
                    "text": "      specs.extend(\n          specs_from_metrics(\n              metrics_dict.get(output_name),\n              unweighted_metrics=unweighted_metrics_dict.get(output_name),\n              model_names=model_names,\n              output_names=[output_name],\n              binarize=binarize,\n",
                    "rendered": {
                      "text": "      specs.extend(\n          specs_from_metrics(\n              metrics_dict.get(output_name),\n              unweighted_metrics=unweighted_metrics_dict.get(output_name),\n              model_names=model_names,\n              output_names=[output_name],\n              binarize=binarize,\n",
                      "markdown": "`      specs.extend(\n          specs_from_metrics(\n              metrics_dict.get(output_name),\n              unweighted_metrics=unweighted_metrics_dict.get(output_name),\n              model_names=model_names,\n              output_names=[output_name],\n              binarize=binarize,\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/metric_specs.py"
                },
                "region": {
                  "startLine": 238,
                  "startColumn": 26,
                  "endLine": 238,
                  "endColumn": 31,
                  "snippet": {
                    "text": "    for output_name in sorted(output_names):\n      specs.extend(\n          specs_from_metrics(\n              metrics_dict.get(output_name),\n              unweighted_metrics=unweighted_metrics_dict.get(output_name),\n              model_names=model_names,\n              output_names=[output_name],\n",
                    "rendered": {
                      "text": "    for output_name in sorted(output_names):\n      specs.extend(\n          specs_from_metrics(\n              metrics_dict.get(output_name),\n              unweighted_metrics=unweighted_metrics_dict.get(output_name),\n              model_names=model_names,\n              output_names=[output_name],\n",
                      "markdown": "`    for output_name in sorted(output_names):\n      specs.extend(\n          specs_from_metrics(\n              metrics_dict.get(output_name),\n              unweighted_metrics=unweighted_metrics_dict.get(output_name),\n              model_names=model_names,\n              output_names=[output_name],\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/metric_specs.py"
                },
                "region": {
                  "startLine": 1083,
                  "startColumn": 61,
                  "endLine": 1083,
                  "endColumn": 65,
                  "snippet": {
                    "text": "\n\ndef _class_weights(spec: config_pb2.MetricsSpec) -> Optional[Dict[int, float]]:\n  \"\"\"Returns class weights associated with AggregationOptions at offset.\"\"\"\n  if spec.aggregate.HasField('top_k_list'):\n    if spec.aggregate.class_weights:\n      raise ValueError('class_weights are not supported when top_k_list used: '\n",
                    "rendered": {
                      "text": "\n\ndef _class_weights(spec: config_pb2.MetricsSpec) -> Optional[Dict[int, float]]:\n  \"\"\"Returns class weights associated with AggregationOptions at offset.\"\"\"\n  if spec.aggregate.HasField('top_k_list'):\n    if spec.aggregate.class_weights:\n      raise ValueError('class_weights are not supported when top_k_list used: '\n",
                      "markdown": "`\n\ndef _class_weights(spec: config_pb2.MetricsSpec) -> Optional[Dict[int, float]]:\n  \"\"\"Returns class weights associated with AggregationOptions at offset.\"\"\"\n  if spec.aggregate.HasField('top_k_list'):\n    if spec.aggregate.class_weights:\n      raise ValueError('class_weights are not supported when top_k_list used: '\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/metric_specs.py"
                },
                "region": {
                  "startLine": 1072,
                  "startColumn": 63,
                  "endLine": 1072,
                  "endColumn": 67,
                  "snippet": {
                    "text": "\ndef _aggregation_type(\n    spec: config_pb2.MetricsSpec) -> Optional[metric_types.AggregationType]:\n  \"\"\"Returns AggregationType associated with AggregationOptions at offset.\"\"\"\n  if spec.aggregate.micro_average:\n    return metric_types.AggregationType(micro_average=True)\n  if spec.aggregate.macro_average:\n",
                    "rendered": {
                      "text": "\ndef _aggregation_type(\n    spec: config_pb2.MetricsSpec) -> Optional[metric_types.AggregationType]:\n  \"\"\"Returns AggregationType associated with AggregationOptions at offset.\"\"\"\n  if spec.aggregate.micro_average:\n    return metric_types.AggregationType(micro_average=True)\n  if spec.aggregate.macro_average:\n",
                      "markdown": "`\ndef _aggregation_type(\n    spec: config_pb2.MetricsSpec) -> Optional[metric_types.AggregationType]:\n  \"\"\"Returns AggregationType associated with AggregationOptions at offset.\"\"\"\n  if spec.aggregate.micro_average:\n    return metric_types.AggregationType(micro_average=True)\n  if spec.aggregate.macro_average:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/metric_specs.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/mean_regression_error_test.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/mean_regression_error.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/flip_metrics_test.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/flip_metrics.py"
                },
                "region": {
                  "startLine": 579,
                  "startColumn": 44,
                  "endLine": 579,
                  "endColumn": 48,
                  "snippet": {
                    "text": "      match, regardless of the direction of the flip.\n  - negative-to-positive flip rate: The rate at which the baseline model's\n      boolean prediction is negative but the candidate model's is positive.\n  - positive-to-negative flip rate: The rate at which the baseline model's\n      boolean prediction is positive but the candidate model's is negative.\n  \"\"\"\n\n",
                    "rendered": {
                      "text": "      match, regardless of the direction of the flip.\n  - negative-to-positive flip rate: The rate at which the baseline model's\n      boolean prediction is negative but the candidate model's is positive.\n  - positive-to-negative flip rate: The rate at which the baseline model's\n      boolean prediction is positive but the candidate model's is negative.\n  \"\"\"\n\n",
                      "markdown": "`      match, regardless of the direction of the flip.\n  - negative-to-positive flip rate: The rate at which the baseline model's\n      boolean prediction is negative but the candidate model's is positive.\n  - positive-to-negative flip rate: The rate at which the baseline model's\n      boolean prediction is positive but the candidate model's is negative.\n  \"\"\"\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/flip_metrics.py"
                },
                "region": {
                  "startLine": 577,
                  "startColumn": 44,
                  "endLine": 577,
                  "endColumn": 48,
                  "snippet": {
                    "text": "\n  - (symmetric) flip rate: The number of times the boolean predictions don't\n      match, regardless of the direction of the flip.\n  - negative-to-positive flip rate: The rate at which the baseline model's\n      boolean prediction is negative but the candidate model's is positive.\n  - positive-to-negative flip rate: The rate at which the baseline model's\n      boolean prediction is positive but the candidate model's is negative.\n",
                    "rendered": {
                      "text": "\n  - (symmetric) flip rate: The number of times the boolean predictions don't\n      match, regardless of the direction of the flip.\n  - negative-to-positive flip rate: The rate at which the baseline model's\n      boolean prediction is negative but the candidate model's is positive.\n  - positive-to-negative flip rate: The rate at which the baseline model's\n      boolean prediction is positive but the candidate model's is negative.\n",
                      "markdown": "`\n  - (symmetric) flip rate: The number of times the boolean predictions don't\n      match, regardless of the direction of the flip.\n  - negative-to-positive flip rate: The rate at which the baseline model's\n      boolean prediction is negative but the candidate model's is positive.\n  - positive-to-negative flip rate: The rate at which the baseline model's\n      boolean prediction is positive but the candidate model's is negative.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/flip_metrics.py"
                },
                "region": {
                  "startLine": 569,
                  "startColumn": 25,
                  "endLine": 569,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\n\nclass BooleanFlipRates(metric_types.Metric):\n  \"\"\"FlipRate is the rate at which predictions between models switch.\n\n  Given a pair of models and a threshold for converting continuous model outputs\n  into boolean predictions, this metric will produce three numbers (keyed by\n",
                    "rendered": {
                      "text": "\n\nclass BooleanFlipRates(metric_types.Metric):\n  \"\"\"FlipRate is the rate at which predictions between models switch.\n\n  Given a pair of models and a threshold for converting continuous model outputs\n  into boolean predictions, this metric will produce three numbers (keyed by\n",
                      "markdown": "`\n\nclass BooleanFlipRates(metric_types.Metric):\n  \"\"\"FlipRate is the rate at which predictions between models switch.\n\n  Given a pair of models and a threshold for converting continuous model outputs\n  into boolean predictions, this metric will produce three numbers (keyed by\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/flip_metrics.py"
                },
                "region": {
                  "startLine": 464,
                  "startColumn": 16,
                  "endLine": 464,
                  "endColumn": 20,
                  "snippet": {
                    "text": "\n  Given a pair of models and a threshold for converting continuous model outputs\n  into boolean predictions, this metric will produce the pos-to-pos flip rate\n  (i.e. the rate at which the baseline model's and the candidate model's\n  predictions are both positive).\n  \"\"\"\n\n",
                    "rendered": {
                      "text": "\n  Given a pair of models and a threshold for converting continuous model outputs\n  into boolean predictions, this metric will produce the pos-to-pos flip rate\n  (i.e. the rate at which the baseline model's and the candidate model's\n  predictions are both positive).\n  \"\"\"\n\n",
                      "markdown": "`\n  Given a pair of models and a threshold for converting continuous model outputs\n  into boolean predictions, this metric will produce the pos-to-pos flip rate\n  (i.e. the rate at which the baseline model's and the candidate model's\n  predictions are both positive).\n  \"\"\"\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/flip_metrics.py"
                },
                "region": {
                  "startLine": 460,
                  "startColumn": 25,
                  "endLine": 460,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\n\nclass PosToPosFlipRate(_FlipRateBase):\n  \"\"\"FlipRate is the rate at which predictions between models switch.\n\n  Given a pair of models and a threshold for converting continuous model outputs\n  into boolean predictions, this metric will produce the pos-to-pos flip rate\n",
                    "rendered": {
                      "text": "\n\nclass PosToPosFlipRate(_FlipRateBase):\n  \"\"\"FlipRate is the rate at which predictions between models switch.\n\n  Given a pair of models and a threshold for converting continuous model outputs\n  into boolean predictions, this metric will produce the pos-to-pos flip rate\n",
                      "markdown": "`\n\nclass PosToPosFlipRate(_FlipRateBase):\n  \"\"\"FlipRate is the rate at which predictions between models switch.\n\n  Given a pair of models and a threshold for converting continuous model outputs\n  into boolean predictions, this metric will produce the pos-to-pos flip rate\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/flip_metrics.py"
                },
                "region": {
                  "startLine": 431,
                  "startColumn": 16,
                  "endLine": 431,
                  "endColumn": 20,
                  "snippet": {
                    "text": "\n  Given a pair of models and a threshold for converting continuous model outputs\n  into boolean predictions, this metric will produce the pos-to-neg flip rate\n  (i.e. the rate at which the baseline model's boolean prediction is positive\n  and the candidate model's is negative).\n  \"\"\"\n\n",
                    "rendered": {
                      "text": "\n  Given a pair of models and a threshold for converting continuous model outputs\n  into boolean predictions, this metric will produce the pos-to-neg flip rate\n  (i.e. the rate at which the baseline model's boolean prediction is positive\n  and the candidate model's is negative).\n  \"\"\"\n\n",
                      "markdown": "`\n  Given a pair of models and a threshold for converting continuous model outputs\n  into boolean predictions, this metric will produce the pos-to-neg flip rate\n  (i.e. the rate at which the baseline model's boolean prediction is positive\n  and the candidate model's is negative).\n  \"\"\"\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/flip_metrics.py"
                },
                "region": {
                  "startLine": 427,
                  "startColumn": 25,
                  "endLine": 427,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\n\nclass PosToNegFlipRate(_FlipRateBase):\n  \"\"\"FlipRate is the rate at which predictions between models switch.\n\n  Given a pair of models and a threshold for converting continuous model outputs\n  into boolean predictions, this metric will produce the pos-to-neg flip rate\n",
                    "rendered": {
                      "text": "\n\nclass PosToNegFlipRate(_FlipRateBase):\n  \"\"\"FlipRate is the rate at which predictions between models switch.\n\n  Given a pair of models and a threshold for converting continuous model outputs\n  into boolean predictions, this metric will produce the pos-to-neg flip rate\n",
                      "markdown": "`\n\nclass PosToNegFlipRate(_FlipRateBase):\n  \"\"\"FlipRate is the rate at which predictions between models switch.\n\n  Given a pair of models and a threshold for converting continuous model outputs\n  into boolean predictions, this metric will produce the pos-to-neg flip rate\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/flip_metrics.py"
                },
                "region": {
                  "startLine": 398,
                  "startColumn": 16,
                  "endLine": 398,
                  "endColumn": 20,
                  "snippet": {
                    "text": "\n  Given a pair of models and a threshold for converting continuous model outputs\n  into boolean predictions, this metric will produce the neg-to-pos flip rate\n  (i.e. the rate at which the baseline model's boolean prediction is negative\n  and the candidate model's is positive).\n  \"\"\"\n\n",
                    "rendered": {
                      "text": "\n  Given a pair of models and a threshold for converting continuous model outputs\n  into boolean predictions, this metric will produce the neg-to-pos flip rate\n  (i.e. the rate at which the baseline model's boolean prediction is negative\n  and the candidate model's is positive).\n  \"\"\"\n\n",
                      "markdown": "`\n  Given a pair of models and a threshold for converting continuous model outputs\n  into boolean predictions, this metric will produce the neg-to-pos flip rate\n  (i.e. the rate at which the baseline model's boolean prediction is negative\n  and the candidate model's is positive).\n  \"\"\"\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/flip_metrics.py"
                },
                "region": {
                  "startLine": 394,
                  "startColumn": 25,
                  "endLine": 394,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\n\nclass NegToPosFlipRate(_FlipRateBase):\n  \"\"\"FlipRate is the rate at which predictions between models switch.\n\n  Given a pair of models and a threshold for converting continuous model outputs\n  into boolean predictions, this metric will produce the neg-to-pos flip rate\n",
                    "rendered": {
                      "text": "\n\nclass NegToPosFlipRate(_FlipRateBase):\n  \"\"\"FlipRate is the rate at which predictions between models switch.\n\n  Given a pair of models and a threshold for converting continuous model outputs\n  into boolean predictions, this metric will produce the neg-to-pos flip rate\n",
                      "markdown": "`\n\nclass NegToPosFlipRate(_FlipRateBase):\n  \"\"\"FlipRate is the rate at which predictions between models switch.\n\n  Given a pair of models and a threshold for converting continuous model outputs\n  into boolean predictions, this metric will produce the neg-to-pos flip rate\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/flip_metrics.py"
                },
                "region": {
                  "startLine": 365,
                  "startColumn": 16,
                  "endLine": 365,
                  "endColumn": 20,
                  "snippet": {
                    "text": "\n  Given a pair of models and a threshold for converting continuous model outputs\n  into boolean predictions, this metric will produce the neg-to-neg flip rate\n  (i.e. the rate at which the baseline model's and the candidate model's\n  predictions are both negative).\n  \"\"\"\n\n",
                    "rendered": {
                      "text": "\n  Given a pair of models and a threshold for converting continuous model outputs\n  into boolean predictions, this metric will produce the neg-to-neg flip rate\n  (i.e. the rate at which the baseline model's and the candidate model's\n  predictions are both negative).\n  \"\"\"\n\n",
                      "markdown": "`\n  Given a pair of models and a threshold for converting continuous model outputs\n  into boolean predictions, this metric will produce the neg-to-neg flip rate\n  (i.e. the rate at which the baseline model's and the candidate model's\n  predictions are both negative).\n  \"\"\"\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/flip_metrics.py"
                },
                "region": {
                  "startLine": 361,
                  "startColumn": 25,
                  "endLine": 361,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\n\nclass NegToNegFlipRate(_FlipRateBase):\n  \"\"\"FlipRate is the rate at which predictions between models switch.\n\n  Given a pair of models and a threshold for converting continuous model outputs\n  into boolean predictions, this metric will produce the neg-to-neg flip rate\n",
                    "rendered": {
                      "text": "\n\nclass NegToNegFlipRate(_FlipRateBase):\n  \"\"\"FlipRate is the rate at which predictions between models switch.\n\n  Given a pair of models and a threshold for converting continuous model outputs\n  into boolean predictions, this metric will produce the neg-to-neg flip rate\n",
                      "markdown": "`\n\nclass NegToNegFlipRate(_FlipRateBase):\n  \"\"\"FlipRate is the rate at which predictions between models switch.\n\n  Given a pair of models and a threshold for converting continuous model outputs\n  into boolean predictions, this metric will produce the neg-to-neg flip rate\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/flip_metrics.py"
                },
                "region": {
                  "startLine": 327,
                  "startColumn": 25,
                  "endLine": 327,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\n\nclass SymmetricFlipRate(_FlipRateBase):\n  \"\"\"FlipRate is the rate at which predictions between models switch.\n\n  Given a pair of models and a threshold for converting continuous model outputs\n  into boolean predictions, this metric will produce the symmetric flip rate\n",
                    "rendered": {
                      "text": "\n\nclass SymmetricFlipRate(_FlipRateBase):\n  \"\"\"FlipRate is the rate at which predictions between models switch.\n\n  Given a pair of models and a threshold for converting continuous model outputs\n  into boolean predictions, this metric will produce the symmetric flip rate\n",
                      "markdown": "`\n\nclass SymmetricFlipRate(_FlipRateBase):\n  \"\"\"FlipRate is the rate at which predictions between models switch.\n\n  Given a pair of models and a threshold for converting continuous model outputs\n  into boolean predictions, this metric will produce the symmetric flip rate\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/flip_metrics.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/example_count_test.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/example_count.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/example_count.py"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 41,
                  "endLine": 48,
                  "endColumn": 47,
                  "snippet": {
                    "text": "    \"\"\"Always disable confidence intervals for ExampleCount.\n\n    Confidence intervals capture uncertainty in a metric if it were computed on\n    more examples. For ExampleCount, this sort of uncertainty is not meaningful,\n    so confidence intervals are disabled.\n\n    Returns:\n",
                    "rendered": {
                      "text": "    \"\"\"Always disable confidence intervals for ExampleCount.\n\n    Confidence intervals capture uncertainty in a metric if it were computed on\n    more examples. For ExampleCount, this sort of uncertainty is not meaningful,\n    so confidence intervals are disabled.\n\n    Returns:\n",
                      "markdown": "`    \"\"\"Always disable confidence intervals for ExampleCount.\n\n    Confidence intervals capture uncertainty in a metric if it were computed on\n    more examples. For ExampleCount, this sort of uncertainty is not meaningful,\n    so confidence intervals are disabled.\n\n    Returns:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/exact_match_test.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/evaluators/legacy_query_based_metrics_eva"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/evaluators/legacy_query_based_metrics_eva"
                },
                "region": {
                  "startLine": 125,
                  "startColumn": 5,
                  "endLine": 125,
                  "endColumn": 11,
                  "snippet": {
                    "text": "    if not unsorted_fpls:\n      return query_types.QueryFPL(fpls=[], query_id='')\n\n    # Sort result in descending order of prediction\n    sort_keys = np.array(\n        [x['predictions'][self._prediction_key][0][0] for x in unsorted_fpls])\n    sort_indices = np.argsort(sort_keys)[::-1]\n",
                    "rendered": {
                      "text": "    if not unsorted_fpls:\n      return query_types.QueryFPL(fpls=[], query_id='')\n\n    # Sort result in descending order of prediction\n    sort_keys = np.array(\n        [x['predictions'][self._prediction_key][0][0] for x in unsorted_fpls])\n    sort_indices = np.argsort(sort_keys)[::-1]\n",
                      "markdown": "`    if not unsorted_fpls:\n      return query_types.QueryFPL(fpls=[], query_id='')\n\n    # Sort result in descending order of prediction\n    sort_keys = np.array(\n        [x['predictions'][self._prediction_key][0][0] for x in unsorted_fpls])\n    sort_indices = np.argsort(sort_keys)[::-1]\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/evaluators/legacy_poisson_bootstrap_test."
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/evaluators/legacy_poisson_bootstrap.py"
                },
                "region": {
                  "startLine": 142,
                  "startColumn": 46,
                  "endLine": 142,
                  "endColumn": 51,
                  "snippet": {
                    "text": "          metrics_dict[metrics_name] = []\n        metrics_dict[metrics_name].append(metric[metrics_name])\n\n    unsampled_metrics_dict = unsampled_results.get(slice_key, {})\n\n    # The key set of the two metrics dicts must be identical.\n    if set(metrics_dict.keys()) != set(unsampled_metrics_dict.keys()):\n",
                    "rendered": {
                      "text": "          metrics_dict[metrics_name] = []\n        metrics_dict[metrics_name].append(metric[metrics_name])\n\n    unsampled_metrics_dict = unsampled_results.get(slice_key, {})\n\n    # The key set of the two metrics dicts must be identical.\n    if set(metrics_dict.keys()) != set(unsampled_metrics_dict.keys()):\n",
                      "markdown": "`          metrics_dict[metrics_name] = []\n        metrics_dict[metrics_name].append(metric[metrics_name])\n\n    unsampled_metrics_dict = unsampled_results.get(slice_key, {})\n\n    # The key set of the two metrics dicts must be identical.\n    if set(metrics_dict.keys()) != set(unsampled_metrics_dict.keys()):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/evaluators/legacy_poisson_bootstrap.py"
                },
                "region": {
                  "startLine": 67,
                  "startColumn": 52,
                  "endLine": 67,
                  "endColumn": 56,
                  "snippet": {
                    "text": "  \"\"\"\n  if not num_bootstrap_samples:\n    num_bootstrap_samples = 1\n  # TODO(ckuhn): Cap the number of bootstrap samples at 20.\n  if num_bootstrap_samples < 1:\n    raise ValueError('num_bootstrap_samples should be > 0, got %d' %\n                     num_bootstrap_samples)\n",
                    "rendered": {
                      "text": "  \"\"\"\n  if not num_bootstrap_samples:\n    num_bootstrap_samples = 1\n  # TODO(ckuhn): Cap the number of bootstrap samples at 20.\n  if num_bootstrap_samples < 1:\n    raise ValueError('num_bootstrap_samples should be > 0, got %d' %\n                     num_bootstrap_samples)\n",
                      "markdown": "`  \"\"\"\n  if not num_bootstrap_samples:\n    num_bootstrap_samples = 1\n  # TODO(ckuhn): Cap the number of bootstrap samples at 20.\n  if num_bootstrap_samples < 1:\n    raise ValueError('num_bootstrap_samples should be > 0, got %d' %\n                     num_bootstrap_samples)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/evaluators/legacy_poisson_bootstrap.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/evaluators/legacy_metrics_and_plots_evalu"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/evaluators/legacy_metrics_and_plots_evalu"
                },
                "region": {
                  "startLine": 124,
                  "startColumn": 26,
                  "endLine": 124,
                  "endColumn": 30,
                  "snippet": {
                    "text": "          constants.SLICE_KEY_TYPES_KEY,\n          constants.INPUT_KEY,\n      ])\n      # Input: one example at a time, with slice keys in extracts.\n      # Output: one fpl example per slice key (notice that the example turns\n      #         into n logical examples, references to which are replicated once\n      #         per applicable slice key).\n",
                    "rendered": {
                      "text": "          constants.SLICE_KEY_TYPES_KEY,\n          constants.INPUT_KEY,\n      ])\n      # Input: one example at a time, with slice keys in extracts.\n      # Output: one fpl example per slice key (notice that the example turns\n      #         into n logical examples, references to which are replicated once\n      #         per applicable slice key).\n",
                      "markdown": "`          constants.SLICE_KEY_TYPES_KEY,\n          constants.INPUT_KEY,\n      ])\n      # Input: one example at a time, with slice keys in extracts.\n      # Output: one fpl example per slice key (notice that the example turns\n      #         into n logical examples, references to which are replicated once\n      #         per applicable slice key).\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/evaluators/legacy_metrics_and_plots_evalu"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/evaluators/legacy_aggregate_test.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/evaluators/legacy_aggregate.py"
                },
                "region": {
                  "startLine": 215,
                  "startColumn": 30,
                  "endLine": 215,
                  "endColumn": 38,
                  "snippet": {
                    "text": "  def _maybe_do_batch(self,\n                      accumulator: _AggState,\n                      force: bool = False) -> None:\n    \"\"\"Maybe intro metrics and update accumulator in place.\n\n    Checks if accumulator has enough FPLs for a batch, and if so, does the\n    intro metrics for the batch and updates accumulator in place.\n",
                    "rendered": {
                      "text": "  def _maybe_do_batch(self,\n                      accumulator: _AggState,\n                      force: bool = False) -> None:\n    \"\"\"Maybe intro metrics and update accumulator in place.\n\n    Checks if accumulator has enough FPLs for a batch, and if so, does the\n    intro metrics for the batch and updates accumulator in place.\n",
                      "markdown": "`  def _maybe_do_batch(self,\n                      accumulator: _AggState,\n                      force: bool = False) -> None:\n    \"\"\"Maybe intro metrics and update accumulator in place.\n\n    Checks if accumulator has enough FPLs for a batch, and if so, does the\n    intro metrics for the batch and updates accumulator in place.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/evaluators/legacy_aggregate.py"
                },
                "region": {
                  "startLine": 150,
                  "startColumn": 43,
                  "endLine": 150,
                  "endColumn": 47,
                  "snippet": {
                    "text": "  partial reduction (intro metrics), and actual combining, all in one.\n\n  We do this by accumulating FeaturesPredictionsLabels in the combine state\n  until we accumulate a large enough batch, at which point we send them\n  through the \"intro metrics\" step. When merging, we merge the metric variables\n  and accumulate FeaturesPredictionsLabels accordingly. We do one final\n  \"intro metrics\" and merge step before producing the final output value.\n",
                    "rendered": {
                      "text": "  partial reduction (intro metrics), and actual combining, all in one.\n\n  We do this by accumulating FeaturesPredictionsLabels in the combine state\n  until we accumulate a large enough batch, at which point we send them\n  through the \"intro metrics\" step. When merging, we merge the metric variables\n  and accumulate FeaturesPredictionsLabels accordingly. We do one final\n  \"intro metrics\" and merge step before producing the final output value.\n",
                      "markdown": "`  partial reduction (intro metrics), and actual combining, all in one.\n\n  We do this by accumulating FeaturesPredictionsLabels in the combine state\n  until we accumulate a large enough batch, at which point we send them\n  through the \"intro metrics\" step. When merging, we merge the metric variables\n  and accumulate FeaturesPredictionsLabels accordingly. We do one final\n  \"intro metrics\" and merge step before producing the final output value.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/evaluators/legacy_aggregate.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/evaluators/keras_util_test.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/eval_saved_model/example_trainers/fixed_p"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/eval_saved_model/example_trainers/fake_se"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/eval_saved_model/example_trainers/fake_mu"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/eval_saved_model/example_trainers/dnn_reg"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/eval_saved_model/__init__.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/eval_metrics_graph/eval_metrics_graph.py"
                },
                "region": {
                  "startLine": 315,
                  "startColumn": 20,
                  "endLine": 315,
                  "endColumn": 28,
                  "snippet": {
                    "text": "    return (features, predictions, labels)\n\n  def _perform_metrics_update_list(self, examples_list: List[Any]) -> None:\n    \"\"\"Run a metrics update on a list of examples.\"\"\"\n    try:\n      if self._perform_metrics_update_fn is None:\n        raise ValueError('_perform_metrics_update_fn is None.')\n",
                    "rendered": {
                      "text": "    return (features, predictions, labels)\n\n  def _perform_metrics_update_list(self, examples_list: List[Any]) -> None:\n    \"\"\"Run a metrics update on a list of examples.\"\"\"\n    try:\n      if self._perform_metrics_update_fn is None:\n        raise ValueError('_perform_metrics_update_fn is None.')\n",
                      "markdown": "`    return (features, predictions, labels)\n\n  def _perform_metrics_update_list(self, examples_list: List[Any]) -> None:\n    \"\"\"Run a metrics update on a list of examples.\"\"\"\n    try:\n      if self._perform_metrics_update_fn is None:\n        raise ValueError('_perform_metrics_update_fn is None.')\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/eval_metrics_graph/eval_metrics_graph.py"
                },
                "region": {
                  "startLine": 208,
                  "startColumn": 5,
                  "endLine": 208,
                  "endColumn": 13,
                  "snippet": {
                    "text": "      self._metric_value_ops.append(value_op)\n      self._metric_update_ops.append(update_op)\n\n    # Update metric variables incrementally with only the new elements in the\n    # metric_variables collection.\n    collection = self._graph.get_collection(\n        tf.compat.v1.GraphKeys.METRIC_VARIABLES)\n",
                    "rendered": {
                      "text": "      self._metric_value_ops.append(value_op)\n      self._metric_update_ops.append(update_op)\n\n    # Update metric variables incrementally with only the new elements in the\n    # metric_variables collection.\n    collection = self._graph.get_collection(\n        tf.compat.v1.GraphKeys.METRIC_VARIABLES)\n",
                      "markdown": "`      self._metric_value_ops.append(value_op)\n      self._metric_update_ops.append(update_op)\n\n    # Update metric variables incrementally with only the new elements in the\n    # metric_variables collection.\n    collection = self._graph.get_collection(\n        tf.compat.v1.GraphKeys.METRIC_VARIABLES)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/eval_metrics_graph/eval_metrics_graph.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/eval_metrics_graph/eval_metrics_graph.py"
                },
                "region": {
                  "startLine": 219,
                  "startColumn": 7,
                  "endLine": 219,
                  "endColumn": 13,
                  "snippet": {
                    "text": "    #\n    # As such, we also use graph.get_tensor_by_name directly, instead of\n    # TFMA's version which expects names encoded by TFMA.\n    for node in collection:\n      self._metric_variable_nodes.append(node)\n      with self._graph.as_default():\n        placeholder = tf.compat.v1.placeholder(\n",
                    "rendered": {
                      "text": "    #\n    # As such, we also use graph.get_tensor_by_name directly, instead of\n    # TFMA's version which expects names encoded by TFMA.\n    for node in collection:\n      self._metric_variable_nodes.append(node)\n      with self._graph.as_default():\n        placeholder = tf.compat.v1.placeholder(\n",
                      "markdown": "`    #\n    # As such, we also use graph.get_tensor_by_name directly, instead of\n    # TFMA's version which expects names encoded by TFMA.\n    for node in collection:\n      self._metric_variable_nodes.append(node)\n      with self._graph.as_default():\n        placeholder = tf.compat.v1.placeholder(\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/addons/fairness/notebook/visualization.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/addons/fairness/notebook/jupyter/widget.p"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/addons/fairness/notebook/colab/__init__.p"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/addons/fairness/notebook/__init__.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/addons/__init__.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 559272,
                  "endLine": 1,
                  "endColumn": 559277,
                  "snippet": {
                    "text": "undefined` resolved values.\\n     * @returns {*} Returns the resolved value.\\n     * @example\\n     *\\n     * var object = { 'a': [{ 'b': { 'c': 3 } }] };\\n     *\\n     * _.get(object, 'a[0].b.c');\\n     * // => 3\\n     *\\n     * _.get(object, ['a', '0', 'b', 'c']);\\n     * // => 3\\n     *\\n     * _.get(object, 'a.b.c', 'default');\\n     * // => 'default'\\n     */\\n    function get(object, path, defaultValue) {\\n      var result = object == null ? undefined : baseGet(object, path);\\n      return result === undefined ? defaultValue : result;\\n    }\\n\\n    /**\\n     * Checks if `path` is a direct pro",
                    "rendered": {
                      "text": "undefined` resolved values.\\n     * @returns {*} Returns the resolved value.\\n     * @example\\n     *\\n     * var object = { 'a': [{ 'b': { 'c': 3 } }] };\\n     *\\n     * _.get(object, 'a[0].b.c');\\n     * // => 3\\n     *\\n     * _.get(object, ['a', '0', 'b', 'c']);\\n     * // => 3\\n     *\\n     * _.get(object, 'a.b.c', 'default');\\n     * // => 'default'\\n     */\\n    function get(object, path, defaultValue) {\\n      var result = object == null ? undefined : baseGet(object, path);\\n      return result === undefined ? defaultValue : result;\\n    }\\n\\n    /**\\n     * Checks if `path` is a direct pro",
                      "markdown": "`undefined` resolved values.\\n     * @returns {*} Returns the resolved value.\\n     * @example\\n     *\\n     * var object = { 'a': [{ 'b': { 'c': 3 } }] };\\n     *\\n     * _.get(object, 'a[0].b.c');\\n     * // => 3\\n     *\\n     * _.get(object, ['a', '0', 'b', 'c']);\\n     * // => 3\\n     *\\n     * _.get(object, 'a.b.c', 'default');\\n     * // => 'default'\\n     */\\n    function get(object, path, defaultValue) {\\n      var result = object == null ? undefined : baseGet(object, path);\\n      return result === undefined ? defaultValue : result;\\n    }\\n\\n    /**\\n     * Checks if `path` is a direct pro`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 559203,
                  "endLine": 1,
                  "endColumn": 559208,
                  "snippet": {
                    "text": "ty to get.\\n     * @param {*} [defaultValue] The value returned for `undefined` resolved values.\\n     * @returns {*} Returns the resolved value.\\n     * @example\\n     *\\n     * var object = { 'a': [{ 'b': { 'c': 3 } }] };\\n     *\\n     * _.get(object, 'a[0].b.c');\\n     * // => 3\\n     *\\n     * _.get(object, ['a', '0', 'b', 'c']);\\n     * // => 3\\n     *\\n     * _.get(object, 'a.b.c', 'default');\\n     * // => 'default'\\n     */\\n    function get(object, path, defaultValue) {\\n      var result = object == null ? undefined : baseGet(object, path);\\n      return result === undefined ? defaultValue",
                    "rendered": {
                      "text": "ty to get.\\n     * @param {*} [defaultValue] The value returned for `undefined` resolved values.\\n     * @returns {*} Returns the resolved value.\\n     * @example\\n     *\\n     * var object = { 'a': [{ 'b': { 'c': 3 } }] };\\n     *\\n     * _.get(object, 'a[0].b.c');\\n     * // => 3\\n     *\\n     * _.get(object, ['a', '0', 'b', 'c']);\\n     * // => 3\\n     *\\n     * _.get(object, 'a.b.c', 'default');\\n     * // => 'default'\\n     */\\n    function get(object, path, defaultValue) {\\n      var result = object == null ? undefined : baseGet(object, path);\\n      return result === undefined ? defaultValue",
                      "markdown": "`ty to get.\\n     * @param {*} [defaultValue] The value returned for `undefined` resolved values.\\n     * @returns {*} Returns the resolved value.\\n     * @example\\n     *\\n     * var object = { 'a': [{ 'b': { 'c': 3 } }] };\\n     *\\n     * _.get(object, 'a[0].b.c');\\n     * // => 3\\n     *\\n     * _.get(object, ['a', '0', 'b', 'c']);\\n     * // => 3\\n     *\\n     * _.get(object, 'a.b.c', 'default');\\n     * // => 'default'\\n     */\\n    function get(object, path, defaultValue) {\\n      var result = object == null ? undefined : baseGet(object, path);\\n      return result === undefined ? defaultValue`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 559144,
                  "endLine": 1,
                  "endColumn": 559149,
                  "snippet": {
                    "text": ".\\n     * @param {Array|string} path The path of the property to get.\\n     * @param {*} [defaultValue] The value returned for `undefined` resolved values.\\n     * @returns {*} Returns the resolved value.\\n     * @example\\n     *\\n     * var object = { 'a': [{ 'b': { 'c': 3 } }] };\\n     *\\n     * _.get(object, 'a[0].b.c');\\n     * // => 3\\n     *\\n     * _.get(object, ['a', '0', 'b', 'c']);\\n     * // => 3\\n     *\\n     * _.get(object, 'a.b.c', 'default');\\n     * // => 'default'\\n     */\\n    function get(object, path, defaultValue) {\\n      var result = object == null ? undefined : baseGet(objec",
                    "rendered": {
                      "text": ".\\n     * @param {Array|string} path The path of the property to get.\\n     * @param {*} [defaultValue] The value returned for `undefined` resolved values.\\n     * @returns {*} Returns the resolved value.\\n     * @example\\n     *\\n     * var object = { 'a': [{ 'b': { 'c': 3 } }] };\\n     *\\n     * _.get(object, 'a[0].b.c');\\n     * // => 3\\n     *\\n     * _.get(object, ['a', '0', 'b', 'c']);\\n     * // => 3\\n     *\\n     * _.get(object, 'a.b.c', 'default');\\n     * // => 'default'\\n     */\\n    function get(object, path, defaultValue) {\\n      var result = object == null ? undefined : baseGet(objec",
                      "markdown": "`.\\n     * @param {Array|string} path The path of the property to get.\\n     * @param {*} [defaultValue] The value returned for `undefined` resolved values.\\n     * @returns {*} Returns the resolved value.\\n     * @example\\n     *\\n     * var object = { 'a': [{ 'b': { 'c': 3 } }] };\\n     *\\n     * _.get(object, 'a[0].b.c');\\n     * // => 3\\n     *\\n     * _.get(object, ['a', '0', 'b', 'c']);\\n     * // => 3\\n     *\\n     * _.get(object, 'a.b.c', 'default');\\n     * // => 'default'\\n     */\\n    function get(object, path, defaultValue) {\\n      var result = object == null ? undefined : baseGet(objec`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 482561,
                  "endLine": 1,
                  "endColumn": 482566,
                  "snippet": {
                    "text": "= 'function')) {\\n        throw new TypeError(FUNC_ERROR_TEXT);\\n      }\\n      var memoized = function() {\\n        var args = arguments,\\n            key = resolver ? resolver.apply(this, args) : args[0],\\n            cache = memoized.cache;\\n\\n        if (cache.has(key)) {\\n          return cache.get(key);\\n        }\\n        var result = func.apply(this, args);\\n        memoized.cache = cache.set(key, result) || cache;\\n        return result;\\n      };\\n      memoized.cache = new (memoize.Cache || MapCache);\\n      return memoized;\\n    }\\n\\n    // Expose `MapCache`.\\n    memoize.Cache = MapCac",
                    "rendered": {
                      "text": "= 'function')) {\\n        throw new TypeError(FUNC_ERROR_TEXT);\\n      }\\n      var memoized = function() {\\n        var args = arguments,\\n            key = resolver ? resolver.apply(this, args) : args[0],\\n            cache = memoized.cache;\\n\\n        if (cache.has(key)) {\\n          return cache.get(key);\\n        }\\n        var result = func.apply(this, args);\\n        memoized.cache = cache.set(key, result) || cache;\\n        return result;\\n      };\\n      memoized.cache = new (memoize.Cache || MapCache);\\n      return memoized;\\n    }\\n\\n    // Expose `MapCache`.\\n    memoize.Cache = MapCac",
                      "markdown": "`= 'function')) {\\n        throw new TypeError(FUNC_ERROR_TEXT);\\n      }\\n      var memoized = function() {\\n        var args = arguments,\\n            key = resolver ? resolver.apply(this, args) : args[0],\\n            cache = memoized.cache;\\n\\n        if (cache.has(key)) {\\n          return cache.get(key);\\n        }\\n        var result = func.apply(this, args);\\n        memoized.cache = cache.set(key, result) || cache;\\n        return result;\\n      };\\n      memoized.cache = new (memoize.Cache || MapCache);\\n      return memoized;\\n    }\\n\\n    // Expose `MapCache`.\\n    memoize.Cache = MapCac`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 327767,
                  "endLine": 1,
                  "endColumn": 327772,
                  "snippet": {
                    "text": "object, keysIn, getSymbolsIn);\\n    }\\n\\n    /**\\n     * Gets metadata for `func`.\\n     *\\n     * @private\\n     * @param {Function} func The function to query.\\n     * @returns {*} Returns the metadata for `func`.\\n     */\\n    var getData = !metaMap ? noop : function(func) {\\n      return metaMap.get(func);\\n    };\\n\\n    /**\\n     * Gets the name of `func`.\\n     *\\n     * @private\\n     * @param {Function} func The function to query.\\n     * @returns {string} Returns the function name.\\n     */\\n    function getFuncName(func) {\\n      var result = (func.name + ''),\\n          array = realNames",
                    "rendered": {
                      "text": "object, keysIn, getSymbolsIn);\\n    }\\n\\n    /**\\n     * Gets metadata for `func`.\\n     *\\n     * @private\\n     * @param {Function} func The function to query.\\n     * @returns {*} Returns the metadata for `func`.\\n     */\\n    var getData = !metaMap ? noop : function(func) {\\n      return metaMap.get(func);\\n    };\\n\\n    /**\\n     * Gets the name of `func`.\\n     *\\n     * @private\\n     * @param {Function} func The function to query.\\n     * @returns {string} Returns the function name.\\n     */\\n    function getFuncName(func) {\\n      var result = (func.name + ''),\\n          array = realNames",
                      "markdown": "`object, keysIn, getSymbolsIn);\\n    }\\n\\n    /**\\n     * Gets metadata for `func`.\\n     *\\n     * @private\\n     * @param {Function} func The function to query.\\n     * @returns {*} Returns the metadata for `func`.\\n     */\\n    var getData = !metaMap ? noop : function(func) {\\n      return metaMap.get(func);\\n    };\\n\\n    /**\\n     * Gets the name of `func`.\\n     *\\n     * @private\\n     * @param {Function} func The function to query.\\n     * @returns {string} Returns the function name.\\n     */\\n    function getFuncName(func) {\\n      var result = (func.name + ''),\\n          array = realNames`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 324815,
                  "endLine": 1,
                  "endColumn": 324820,
                  "snippet": {
                    "text": "     while (index--) {\\n        var key = objProps[index];\\n        if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {\\n          return false;\\n        }\\n      }\\n      // Check that cyclic values are equal.\\n      var objStacked = stack.get(object);\\n      var othStacked = stack.get(other);\\n      if (objStacked && othStacked) {\\n        return objStacked == other && othStacked == object;\\n      }\\n      var result = true;\\n      stack.set(object, other);\\n      stack.set(other, object);\\n\\n      var skipCtor = isPartial;\\n      while (++index < objLength) {\\n        key = objP",
                    "rendered": {
                      "text": "     while (index--) {\\n        var key = objProps[index];\\n        if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {\\n          return false;\\n        }\\n      }\\n      // Check that cyclic values are equal.\\n      var objStacked = stack.get(object);\\n      var othStacked = stack.get(other);\\n      if (objStacked && othStacked) {\\n        return objStacked == other && othStacked == object;\\n      }\\n      var result = true;\\n      stack.set(object, other);\\n      stack.set(other, object);\\n\\n      var skipCtor = isPartial;\\n      while (++index < objLength) {\\n        key = objP",
                      "markdown": "`     while (index--) {\\n        var key = objProps[index];\\n        if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {\\n          return false;\\n        }\\n      }\\n      // Check that cyclic values are equal.\\n      var objStacked = stack.get(object);\\n      var othStacked = stack.get(other);\\n      if (objStacked && othStacked) {\\n        return objStacked == other && othStacked == object;\\n      }\\n      var result = true;\\n      stack.set(object, other);\\n      stack.set(other, object);\\n\\n      var skipCtor = isPartial;\\n      while (++index < objLength) {\\n        key = objP`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 324772,
                  "endLine": 1,
                  "endColumn": 324777,
                  "snippet": {
                    "text": ";\\n      }\\n      var index = objLength;\\n      while (index--) {\\n        var key = objProps[index];\\n        if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {\\n          return false;\\n        }\\n      }\\n      // Check that cyclic values are equal.\\n      var objStacked = stack.get(object);\\n      var othStacked = stack.get(other);\\n      if (objStacked && othStacked) {\\n        return objStacked == other && othStacked == object;\\n      }\\n      var result = true;\\n      stack.set(object, other);\\n      stack.set(other, object);\\n\\n      var skipCtor = isPartial;\\n      while ",
                    "rendered": {
                      "text": ";\\n      }\\n      var index = objLength;\\n      while (index--) {\\n        var key = objProps[index];\\n        if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {\\n          return false;\\n        }\\n      }\\n      // Check that cyclic values are equal.\\n      var objStacked = stack.get(object);\\n      var othStacked = stack.get(other);\\n      if (objStacked && othStacked) {\\n        return objStacked == other && othStacked == object;\\n      }\\n      var result = true;\\n      stack.set(object, other);\\n      stack.set(other, object);\\n\\n      var skipCtor = isPartial;\\n      while ",
                      "markdown": "`;\\n      }\\n      var index = objLength;\\n      while (index--) {\\n        var key = objProps[index];\\n        if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {\\n          return false;\\n        }\\n      }\\n      // Check that cyclic values are equal.\\n      var objStacked = stack.get(object);\\n      var othStacked = stack.get(other);\\n      if (objStacked && othStacked) {\\n        return objStacked == other && othStacked == object;\\n      }\\n      var result = true;\\n      stack.set(object, other);\\n      stack.set(other, object);\\n\\n      var skipCtor = isPartial;\\n      while `"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 322802,
                  "endLine": 1,
                  "endColumn": 322807,
                  "snippet": {
                    "text": "      case setTag:\\n          var isPartial = bitmask & COMPARE_PARTIAL_FLAG;\\n          convert || (convert = setToArray);\\n\\n          if (object.size != other.size && !isPartial) {\\n            return false;\\n          }\\n          // Assume cyclic values are equal.\\n          var stacked = stack.get(object);\\n          if (stacked) {\\n            return stacked == other;\\n          }\\n          bitmask |= COMPARE_UNORDERED_FLAG;\\n\\n          // Recursively compare objects (susceptible to call stack limits).\\n          stack.set(object, other);\\n          var result = equalArrays(convert(object)",
                    "rendered": {
                      "text": "      case setTag:\\n          var isPartial = bitmask & COMPARE_PARTIAL_FLAG;\\n          convert || (convert = setToArray);\\n\\n          if (object.size != other.size && !isPartial) {\\n            return false;\\n          }\\n          // Assume cyclic values are equal.\\n          var stacked = stack.get(object);\\n          if (stacked) {\\n            return stacked == other;\\n          }\\n          bitmask |= COMPARE_UNORDERED_FLAG;\\n\\n          // Recursively compare objects (susceptible to call stack limits).\\n          stack.set(object, other);\\n          var result = equalArrays(convert(object)",
                      "markdown": "`      case setTag:\\n          var isPartial = bitmask & COMPARE_PARTIAL_FLAG;\\n          convert || (convert = setToArray);\\n\\n          if (object.size != other.size && !isPartial) {\\n            return false;\\n          }\\n          // Assume cyclic values are equal.\\n          var stacked = stack.get(object);\\n          if (stacked) {\\n            return stacked == other;\\n          }\\n          bitmask |= COMPARE_UNORDERED_FLAG;\\n\\n          // Recursively compare objects (susceptible to call stack limits).\\n          stack.set(object, other);\\n          var result = equalArrays(convert(object)`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 318655,
                  "endLine": 1,
                  "endColumn": 318660,
                  "snippet": {
                    "text": "        arrLength = array.length,\\n          othLength = other.length;\\n\\n      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\\n        return false;\\n      }\\n      // Check that cyclic values are equal.\\n      var arrStacked = stack.get(array);\\n      var othStacked = stack.get(other);\\n      if (arrStacked && othStacked) {\\n        return arrStacked == other && othStacked == array;\\n      }\\n      var index = -1,\\n          result = true,\\n          seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;\\n\\n      stack.set(array, other);\\n      stack.set(oth",
                    "rendered": {
                      "text": "        arrLength = array.length,\\n          othLength = other.length;\\n\\n      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\\n        return false;\\n      }\\n      // Check that cyclic values are equal.\\n      var arrStacked = stack.get(array);\\n      var othStacked = stack.get(other);\\n      if (arrStacked && othStacked) {\\n        return arrStacked == other && othStacked == array;\\n      }\\n      var index = -1,\\n          result = true,\\n          seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;\\n\\n      stack.set(array, other);\\n      stack.set(oth",
                      "markdown": "`        arrLength = array.length,\\n          othLength = other.length;\\n\\n      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\\n        return false;\\n      }\\n      // Check that cyclic values are equal.\\n      var arrStacked = stack.get(array);\\n      var othStacked = stack.get(other);\\n      if (arrStacked && othStacked) {\\n        return arrStacked == other && othStacked == array;\\n      }\\n      var index = -1,\\n          result = true,\\n          seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;\\n\\n      stack.set(array, other);\\n      stack.set(oth`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 318613,
                  "endLine": 1,
                  "endColumn": 318618,
                  "snippet": {
                    "text": "tial = bitmask & COMPARE_PARTIAL_FLAG,\\n          arrLength = array.length,\\n          othLength = other.length;\\n\\n      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\\n        return false;\\n      }\\n      // Check that cyclic values are equal.\\n      var arrStacked = stack.get(array);\\n      var othStacked = stack.get(other);\\n      if (arrStacked && othStacked) {\\n        return arrStacked == other && othStacked == array;\\n      }\\n      var index = -1,\\n          result = true,\\n          seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;\\n\\n      sta",
                    "rendered": {
                      "text": "tial = bitmask & COMPARE_PARTIAL_FLAG,\\n          arrLength = array.length,\\n          othLength = other.length;\\n\\n      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\\n        return false;\\n      }\\n      // Check that cyclic values are equal.\\n      var arrStacked = stack.get(array);\\n      var othStacked = stack.get(other);\\n      if (arrStacked && othStacked) {\\n        return arrStacked == other && othStacked == array;\\n      }\\n      var index = -1,\\n          result = true,\\n          seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;\\n\\n      sta",
                      "markdown": "`tial = bitmask & COMPARE_PARTIAL_FLAG,\\n          arrLength = array.length,\\n          othLength = other.length;\\n\\n      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {\\n        return false;\\n      }\\n      // Check that cyclic values are equal.\\n      var arrStacked = stack.get(array);\\n      var othStacked = stack.get(other);\\n      if (arrStacked && othStacked) {\\n        return arrStacked == other && othStacked == array;\\n      }\\n      var index = -1,\\n          result = true,\\n          seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;\\n\\n      sta`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 248704,
                  "endLine": 1,
                  "endColumn": 248709,
                  "snippet": {
                    "text": "bject} [stack] Tracks traversed source values and their merged\\n     *  counterparts.\\n     */\\n    function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {\\n      var objValue = safeGet(object, key),\\n          srcValue = safeGet(source, key),\\n          stacked = stack.get(srcValue);\\n\\n      if (stacked) {\\n        assignMergeValue(object, key, stacked);\\n        return;\\n      }\\n      var newValue = customizer\\n        ? customizer(objValue, srcValue, (key + ''), object, source, stack)\\n        : undefined;\\n\\n      var isCommon = newValue === undefined;\\n\\n      i",
                    "rendered": {
                      "text": "bject} [stack] Tracks traversed source values and their merged\\n     *  counterparts.\\n     */\\n    function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {\\n      var objValue = safeGet(object, key),\\n          srcValue = safeGet(source, key),\\n          stacked = stack.get(srcValue);\\n\\n      if (stacked) {\\n        assignMergeValue(object, key, stacked);\\n        return;\\n      }\\n      var newValue = customizer\\n        ? customizer(objValue, srcValue, (key + ''), object, source, stack)\\n        : undefined;\\n\\n      var isCommon = newValue === undefined;\\n\\n      i",
                      "markdown": "`bject} [stack] Tracks traversed source values and their merged\\n     *  counterparts.\\n     */\\n    function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {\\n      var objValue = safeGet(object, key),\\n          srcValue = safeGet(source, key),\\n          stacked = stack.get(srcValue);\\n\\n      if (stacked) {\\n        assignMergeValue(object, key, stacked);\\n        return;\\n      }\\n      var newValue = customizer\\n        ? customizer(objValue, srcValue, (key + ''), object, source, stack)\\n        : undefined;\\n\\n      var isCommon = newValue === undefined;\\n\\n      i`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 214657,
                  "endLine": 1,
                  "endColumn": 214662,
                  "snippet": {
                    "text": "    if (!cloneableTags[tag]) {\\n            return object ? value : {};\\n          }\\n          result = initCloneByTag(value, tag, isDeep);\\n        }\\n      }\\n      // Check for circular references and return its corresponding clone.\\n      stack || (stack = new Stack);\\n      var stacked = stack.get(value);\\n      if (stacked) {\\n        return stacked;\\n      }\\n      stack.set(value, result);\\n\\n      if (isSet(value)) {\\n        value.forEach(function(subValue) {\\n          result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));\\n        });\\n      } else if (isMap(valu",
                    "rendered": {
                      "text": "    if (!cloneableTags[tag]) {\\n            return object ? value : {};\\n          }\\n          result = initCloneByTag(value, tag, isDeep);\\n        }\\n      }\\n      // Check for circular references and return its corresponding clone.\\n      stack || (stack = new Stack);\\n      var stacked = stack.get(value);\\n      if (stacked) {\\n        return stacked;\\n      }\\n      stack.set(value, result);\\n\\n      if (isSet(value)) {\\n        value.forEach(function(subValue) {\\n          result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));\\n        });\\n      } else if (isMap(valu",
                      "markdown": "`    if (!cloneableTags[tag]) {\\n            return object ? value : {};\\n          }\\n          result = initCloneByTag(value, tag, isDeep);\\n        }\\n      }\\n      // Check for circular references and return its corresponding clone.\\n      stack || (stack = new Stack);\\n      var stacked = stack.get(value);\\n      if (stacked) {\\n        return stacked;\\n      }\\n      stack.set(value, result);\\n\\n      if (isSet(value)) {\\n        value.forEach(function(subValue) {\\n          result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));\\n        });\\n      } else if (isMap(valu`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 203231,
                  "endLine": 1,
                  "endColumn": 203236,
                  "snippet": {
                    "text": "sult;\\n    }\\n\\n    /**\\n     * Gets the stack value for `key`.\\n     *\\n     * @private\\n     * @name get\\n     * @memberOf Stack\\n     * @param {string} key The key of the value to get.\\n     * @returns {*} Returns the entry value.\\n     */\\n    function stackGet(key) {\\n      return this.__data__.get(key);\\n    }\\n\\n    /**\\n     * Checks if a stack value for `key` exists.\\n     *\\n     * @private\\n     * @name has\\n     * @memberOf Stack\\n     * @param {string} key The key of the entry to check.\\n     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\\n     */\\n    ",
                    "rendered": {
                      "text": "sult;\\n    }\\n\\n    /**\\n     * Gets the stack value for `key`.\\n     *\\n     * @private\\n     * @name get\\n     * @memberOf Stack\\n     * @param {string} key The key of the value to get.\\n     * @returns {*} Returns the entry value.\\n     */\\n    function stackGet(key) {\\n      return this.__data__.get(key);\\n    }\\n\\n    /**\\n     * Checks if a stack value for `key` exists.\\n     *\\n     * @private\\n     * @name has\\n     * @memberOf Stack\\n     * @param {string} key The key of the entry to check.\\n     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\\n     */\\n    ",
                      "markdown": "`sult;\\n    }\\n\\n    /**\\n     * Gets the stack value for `key`.\\n     *\\n     * @private\\n     * @name get\\n     * @memberOf Stack\\n     * @param {string} key The key of the value to get.\\n     * @returns {*} Returns the entry value.\\n     */\\n    function stackGet(key) {\\n      return this.__data__.get(key);\\n    }\\n\\n    /**\\n     * Checks if a stack value for `key` exists.\\n     *\\n     * @private\\n     * @name has\\n     * @memberOf Stack\\n     * @param {string} key The key of the entry to check.\\n     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\\n     */\\n    `"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 199332,
                  "endLine": 1,
                  "endColumn": 199337,
                  "snippet": {
                    "text": "\\n\\n    /**\\n     * Gets the map value for `key`.\\n     *\\n     * @private\\n     * @name get\\n     * @memberOf MapCache\\n     * @param {string} key The key of the value to get.\\n     * @returns {*} Returns the entry value.\\n     */\\n    function mapCacheGet(key) {\\n      return getMapData(this, key).get(key);\\n    }\\n\\n    /**\\n     * Checks if a map value for `key` exists.\\n     *\\n     * @private\\n     * @name has\\n     * @memberOf MapCache\\n     * @param {string} key The key of the entry to check.\\n     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\\n     */\\n   ",
                    "rendered": {
                      "text": "\\n\\n    /**\\n     * Gets the map value for `key`.\\n     *\\n     * @private\\n     * @name get\\n     * @memberOf MapCache\\n     * @param {string} key The key of the value to get.\\n     * @returns {*} Returns the entry value.\\n     */\\n    function mapCacheGet(key) {\\n      return getMapData(this, key).get(key);\\n    }\\n\\n    /**\\n     * Checks if a map value for `key` exists.\\n     *\\n     * @private\\n     * @name has\\n     * @memberOf MapCache\\n     * @param {string} key The key of the entry to check.\\n     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\\n     */\\n   ",
                      "markdown": "`\\n\\n    /**\\n     * Gets the map value for `key`.\\n     *\\n     * @private\\n     * @name get\\n     * @memberOf MapCache\\n     * @param {string} key The key of the value to get.\\n     * @returns {*} Returns the entry value.\\n     */\\n    function mapCacheGet(key) {\\n      return getMapData(this, key).get(key);\\n    }\\n\\n    /**\\n     * Checks if a map value for `key` exists.\\n     *\\n     * @private\\n     * @name has\\n     * @memberOf MapCache\\n     * @param {string} key The key of the entry to check.\\n     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\\n     */\\n   `"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 123395,
                  "endLine": 1,
                  "endColumn": 123400,
                  "snippet": {
                    "text": "ompare = this.model.get('evalNameCompare');\\n  },\\n});\\n\\n/**\\n * Handler for events of type \\\"tfma-event\\\" for the given view element.\\n * @param {!Event} tfmaEvent\\n * @param {!Element} view\\n */\\nconst handleTfmaEvent = (tfmaEvent, view) => {\\n  const model = view.model;\\n  const jsEvents = model.get('js_events').slice();\\n  const detail = tfmaEvent.detail;\\n  jsEvents.push({'name': detail.type, 'detail': detail.detail});\\n  model.set('js_events', jsEvents);\\n  view.touch();\\n};\\n\\nmodule.exports = {\\n  [PLOT_MODEL_NAME]: PlotModel,\\n  [PLOT_VIEW_NAME]: PlotView,\\n  [SLICING_METRICS_MODEL_NAME]:",
                    "rendered": {
                      "text": "ompare = this.model.get('evalNameCompare');\\n  },\\n});\\n\\n/**\\n * Handler for events of type \\\"tfma-event\\\" for the given view element.\\n * @param {!Event} tfmaEvent\\n * @param {!Element} view\\n */\\nconst handleTfmaEvent = (tfmaEvent, view) => {\\n  const model = view.model;\\n  const jsEvents = model.get('js_events').slice();\\n  const detail = tfmaEvent.detail;\\n  jsEvents.push({'name': detail.type, 'detail': detail.detail});\\n  model.set('js_events', jsEvents);\\n  view.touch();\\n};\\n\\nmodule.exports = {\\n  [PLOT_MODEL_NAME]: PlotModel,\\n  [PLOT_VIEW_NAME]: PlotView,\\n  [SLICING_METRICS_MODEL_NAME]:",
                      "markdown": "`ompare = this.model.get('evalNameCompare');\\n  },\\n});\\n\\n/**\\n * Handler for events of type \\\"tfma-event\\\" for the given view element.\\n * @param {!Event} tfmaEvent\\n * @param {!Element} view\\n */\\nconst handleTfmaEvent = (tfmaEvent, view) => {\\n  const model = view.model;\\n  const jsEvents = model.get('js_events').slice();\\n  const detail = tfmaEvent.detail;\\n  jsEvents.push({'name': detail.type, 'detail': detail.detail});\\n  model.set('js_events', jsEvents);\\n  view.touch();\\n};\\n\\nmodule.exports = {\\n  [PLOT_MODEL_NAME]: PlotModel,\\n  [PLOT_VIEW_NAME]: PlotView,\\n  [SLICING_METRICS_MODEL_NAME]:`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 123114,
                  "endLine": 1,
                  "endColumn": 123119,
                  "snippet": {
                    "text": "icsCompareChanged_: function() {\\n    this.view_.slicingMetricsCompare = this.model.get('slicingMetricsCompare');\\n  },\\n  evalNameChanged_: function() {\\n    this.view_.evalName = this.model.get('evalName');\\n  },\\n  evalNameCompareChanged_: function() {\\n    this.view_.evalNameCompare = this.model.get('evalNameCompare');\\n  },\\n});\\n\\n/**\\n * Handler for events of type \\\"tfma-event\\\" for the given view element.\\n * @param {!Event} tfmaEvent\\n * @param {!Element} view\\n */\\nconst handleTfmaEvent = (tfmaEvent, view) => {\\n  const model = view.model;\\n  const jsEvents = model.get('js_events').slice(",
                    "rendered": {
                      "text": "icsCompareChanged_: function() {\\n    this.view_.slicingMetricsCompare = this.model.get('slicingMetricsCompare');\\n  },\\n  evalNameChanged_: function() {\\n    this.view_.evalName = this.model.get('evalName');\\n  },\\n  evalNameCompareChanged_: function() {\\n    this.view_.evalNameCompare = this.model.get('evalNameCompare');\\n  },\\n});\\n\\n/**\\n * Handler for events of type \\\"tfma-event\\\" for the given view element.\\n * @param {!Event} tfmaEvent\\n * @param {!Element} view\\n */\\nconst handleTfmaEvent = (tfmaEvent, view) => {\\n  const model = view.model;\\n  const jsEvents = model.get('js_events').slice(",
                      "markdown": "`icsCompareChanged_: function() {\\n    this.view_.slicingMetricsCompare = this.model.get('slicingMetricsCompare');\\n  },\\n  evalNameChanged_: function() {\\n    this.view_.evalName = this.model.get('evalName');\\n  },\\n  evalNameCompareChanged_: function() {\\n    this.view_.evalNameCompare = this.model.get('evalNameCompare');\\n  },\\n});\\n\\n/**\\n * Handler for events of type \\\"tfma-event\\\" for the given view element.\\n * @param {!Event} tfmaEvent\\n * @param {!Element} view\\n */\\nconst handleTfmaEvent = (tfmaEvent, view) => {\\n  const model = view.model;\\n  const jsEvents = model.get('js_events').slice(`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 123005,
                  "endLine": 1,
                  "endColumn": 123010,
                  "snippet": {
                    "text": "hanged_: function() {\\n    this.view_.slicingMetrics = this.model.get('slicingMetrics');\\n  },\\n  slicingMetricsCompareChanged_: function() {\\n    this.view_.slicingMetricsCompare = this.model.get('slicingMetricsCompare');\\n  },\\n  evalNameChanged_: function() {\\n    this.view_.evalName = this.model.get('evalName');\\n  },\\n  evalNameCompareChanged_: function() {\\n    this.view_.evalNameCompare = this.model.get('evalNameCompare');\\n  },\\n});\\n\\n/**\\n * Handler for events of type \\\"tfma-event\\\" for the given view element.\\n * @param {!Event} tfmaEvent\\n * @param {!Element} view\\n */\\nconst handleTfma",
                    "rendered": {
                      "text": "hanged_: function() {\\n    this.view_.slicingMetrics = this.model.get('slicingMetrics');\\n  },\\n  slicingMetricsCompareChanged_: function() {\\n    this.view_.slicingMetricsCompare = this.model.get('slicingMetricsCompare');\\n  },\\n  evalNameChanged_: function() {\\n    this.view_.evalName = this.model.get('evalName');\\n  },\\n  evalNameCompareChanged_: function() {\\n    this.view_.evalNameCompare = this.model.get('evalNameCompare');\\n  },\\n});\\n\\n/**\\n * Handler for events of type \\\"tfma-event\\\" for the given view element.\\n * @param {!Event} tfmaEvent\\n * @param {!Element} view\\n */\\nconst handleTfma",
                      "markdown": "`hanged_: function() {\\n    this.view_.slicingMetrics = this.model.get('slicingMetrics');\\n  },\\n  slicingMetricsCompareChanged_: function() {\\n    this.view_.slicingMetricsCompare = this.model.get('slicingMetricsCompare');\\n  },\\n  evalNameChanged_: function() {\\n    this.view_.evalName = this.model.get('evalName');\\n  },\\n  evalNameCompareChanged_: function() {\\n    this.view_.evalNameCompare = this.model.get('evalNameCompare');\\n  },\\n});\\n\\n/**\\n * Handler for events of type \\\"tfma-event\\\" for the given view element.\\n * @param {!Event} tfmaEvent\\n * @param {!Element} view\\n */\\nconst handleTfma`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 122897,
                  "endLine": 1,
                  "endColumn": 122902,
                  "snippet": {
                    "text": "\\n          'change:evalNameCompare', this.evalNameCompareChanged_, this);\\n    });\\n  },\\n  slicingMetricsChanged_: function() {\\n    this.view_.slicingMetrics = this.model.get('slicingMetrics');\\n  },\\n  slicingMetricsCompareChanged_: function() {\\n    this.view_.slicingMetricsCompare = this.model.get('slicingMetricsCompare');\\n  },\\n  evalNameChanged_: function() {\\n    this.view_.evalName = this.model.get('evalName');\\n  },\\n  evalNameCompareChanged_: function() {\\n    this.view_.evalNameCompare = this.model.get('evalNameCompare');\\n  },\\n});\\n\\n/**\\n * Handler for events of type \\\"tfma-event\\\"",
                    "rendered": {
                      "text": "\\n          'change:evalNameCompare', this.evalNameCompareChanged_, this);\\n    });\\n  },\\n  slicingMetricsChanged_: function() {\\n    this.view_.slicingMetrics = this.model.get('slicingMetrics');\\n  },\\n  slicingMetricsCompareChanged_: function() {\\n    this.view_.slicingMetricsCompare = this.model.get('slicingMetricsCompare');\\n  },\\n  evalNameChanged_: function() {\\n    this.view_.evalName = this.model.get('evalName');\\n  },\\n  evalNameCompareChanged_: function() {\\n    this.view_.evalNameCompare = this.model.get('evalNameCompare');\\n  },\\n});\\n\\n/**\\n * Handler for events of type \\\"tfma-event\\\"",
                      "markdown": "`\\n          'change:evalNameCompare', this.evalNameCompareChanged_, this);\\n    });\\n  },\\n  slicingMetricsChanged_: function() {\\n    this.view_.slicingMetrics = this.model.get('slicingMetrics');\\n  },\\n  slicingMetricsCompareChanged_: function() {\\n    this.view_.slicingMetricsCompare = this.model.get('slicingMetricsCompare');\\n  },\\n  evalNameChanged_: function() {\\n    this.view_.evalName = this.model.get('evalName');\\n  },\\n  evalNameCompareChanged_: function() {\\n    this.view_.evalNameCompare = this.model.get('evalNameCompare');\\n  },\\n});\\n\\n/**\\n * Handler for events of type \\\"tfma-event\\\"`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 122770,
                  "endLine": 1,
                  "endColumn": 122775,
                  "snippet": {
                    "text": "sCompareChanged_,\\n          this);\\n      this.model.on('change:evalName', this.evalNameChanged_, this);\\n      this.model.on(\\n          'change:evalNameCompare', this.evalNameCompareChanged_, this);\\n    });\\n  },\\n  slicingMetricsChanged_: function() {\\n    this.view_.slicingMetrics = this.model.get('slicingMetrics');\\n  },\\n  slicingMetricsCompareChanged_: function() {\\n    this.view_.slicingMetricsCompare = this.model.get('slicingMetricsCompare');\\n  },\\n  evalNameChanged_: function() {\\n    this.view_.evalName = this.model.get('evalName');\\n  },\\n  evalNameCompareChanged_: function() {\\n    ",
                    "rendered": {
                      "text": "sCompareChanged_,\\n          this);\\n      this.model.on('change:evalName', this.evalNameChanged_, this);\\n      this.model.on(\\n          'change:evalNameCompare', this.evalNameCompareChanged_, this);\\n    });\\n  },\\n  slicingMetricsChanged_: function() {\\n    this.view_.slicingMetrics = this.model.get('slicingMetrics');\\n  },\\n  slicingMetricsCompareChanged_: function() {\\n    this.view_.slicingMetricsCompare = this.model.get('slicingMetricsCompare');\\n  },\\n  evalNameChanged_: function() {\\n    this.view_.evalName = this.model.get('evalName');\\n  },\\n  evalNameCompareChanged_: function() {\\n    ",
                      "markdown": "`sCompareChanged_,\\n          this);\\n      this.model.on('change:evalName', this.evalNameChanged_, this);\\n      this.model.on(\\n          'change:evalNameCompare', this.evalNameCompareChanged_, this);\\n    });\\n  },\\n  slicingMetricsChanged_: function() {\\n    this.view_.slicingMetrics = this.model.get('slicingMetrics');\\n  },\\n  slicingMetricsCompareChanged_: function() {\\n    this.view_.slicingMetricsCompare = this.model.get('slicingMetricsCompare');\\n  },\\n  evalNameChanged_: function() {\\n    this.view_.evalName = this.model.get('evalName');\\n  },\\n  evalNameCompareChanged_: function() {\\n    `"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 121248,
                  "endLine": 1,
                  "endColumn": 121253,
                  "snippet": {
                    "text": "ed_();\\n      this.model.on('change:config', this.configChanged_, this);\\n      this.model.on('change:data', this.dataChanged_, this);\\n    });\\n  },\\n  dataChanged_: function() {\\n    this.view_.data = this.model.get('data');\\n  },\\n  configChanged_: function() {\\n    this.view_.config = this.model.get('config');\\n  },\\n});\\n\\nconst FairnessIndicatorModel = widgets.DOMWidgetModel.extend({\\n  defaults: _.extend(widgets.DOMWidgetModel.prototype.defaults(), {\\n    _model_name: FAIRNESS_INDICATOR_MODEL_NAME,\\n    _view_name: FAIRNESS_INDICATOR_VIEW_NAME,\\n    _model_module: MODULE_NAME,\\n    _view_mod",
                    "rendered": {
                      "text": "ed_();\\n      this.model.on('change:config', this.configChanged_, this);\\n      this.model.on('change:data', this.dataChanged_, this);\\n    });\\n  },\\n  dataChanged_: function() {\\n    this.view_.data = this.model.get('data');\\n  },\\n  configChanged_: function() {\\n    this.view_.config = this.model.get('config');\\n  },\\n});\\n\\nconst FairnessIndicatorModel = widgets.DOMWidgetModel.extend({\\n  defaults: _.extend(widgets.DOMWidgetModel.prototype.defaults(), {\\n    _model_name: FAIRNESS_INDICATOR_MODEL_NAME,\\n    _view_name: FAIRNESS_INDICATOR_VIEW_NAME,\\n    _model_module: MODULE_NAME,\\n    _view_mod",
                      "markdown": "`ed_();\\n      this.model.on('change:config', this.configChanged_, this);\\n      this.model.on('change:data', this.dataChanged_, this);\\n    });\\n  },\\n  dataChanged_: function() {\\n    this.view_.data = this.model.get('data');\\n  },\\n  configChanged_: function() {\\n    this.view_.config = this.model.get('config');\\n  },\\n});\\n\\nconst FairnessIndicatorModel = widgets.DOMWidgetModel.extend({\\n  defaults: _.extend(widgets.DOMWidgetModel.prototype.defaults(), {\\n    _model_name: FAIRNESS_INDICATOR_MODEL_NAME,\\n    _view_name: FAIRNESS_INDICATOR_VIEW_NAME,\\n    _model_module: MODULE_NAME,\\n    _view_mod`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 121161,
                  "endLine": 1,
                  "endColumn": 121166,
                  "snippet": {
                    "text": "iew_);\\n\\n    delayedRender(() => {\\n      this.configChanged_();\\n      this.dataChanged_();\\n      this.model.on('change:config', this.configChanged_, this);\\n      this.model.on('change:data', this.dataChanged_, this);\\n    });\\n  },\\n  dataChanged_: function() {\\n    this.view_.data = this.model.get('data');\\n  },\\n  configChanged_: function() {\\n    this.view_.config = this.model.get('config');\\n  },\\n});\\n\\nconst FairnessIndicatorModel = widgets.DOMWidgetModel.extend({\\n  defaults: _.extend(widgets.DOMWidgetModel.prototype.defaults(), {\\n    _model_name: FAIRNESS_INDICATOR_MODEL_NAME,\\n    _v",
                    "rendered": {
                      "text": "iew_);\\n\\n    delayedRender(() => {\\n      this.configChanged_();\\n      this.dataChanged_();\\n      this.model.on('change:config', this.configChanged_, this);\\n      this.model.on('change:data', this.dataChanged_, this);\\n    });\\n  },\\n  dataChanged_: function() {\\n    this.view_.data = this.model.get('data');\\n  },\\n  configChanged_: function() {\\n    this.view_.config = this.model.get('config');\\n  },\\n});\\n\\nconst FairnessIndicatorModel = widgets.DOMWidgetModel.extend({\\n  defaults: _.extend(widgets.DOMWidgetModel.prototype.defaults(), {\\n    _model_name: FAIRNESS_INDICATOR_MODEL_NAME,\\n    _v",
                      "markdown": "`iew_);\\n\\n    delayedRender(() => {\\n      this.configChanged_();\\n      this.dataChanged_();\\n      this.model.on('change:config', this.configChanged_, this);\\n      this.model.on('change:data', this.dataChanged_, this);\\n    });\\n  },\\n  dataChanged_: function() {\\n    this.view_.data = this.model.get('data');\\n  },\\n  configChanged_: function() {\\n    this.view_.config = this.model.get('config');\\n  },\\n});\\n\\nconst FairnessIndicatorModel = widgets.DOMWidgetModel.extend({\\n  defaults: _.extend(widgets.DOMWidgetModel.prototype.defaults(), {\\n    _model_name: FAIRNESS_INDICATOR_MODEL_NAME,\\n    _v`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 120252,
                  "endLine": 1,
                  "endColumn": 120257,
                  "snippet": {
                    "text": "ed_();\\n      this.model.on('change:config', this.configChanged_, this);\\n      this.model.on('change:data', this.dataChanged_, this);\\n    });\\n  },\\n  dataChanged_: function() {\\n    this.view_.data = this.model.get('data');\\n  },\\n  configChanged_: function() {\\n    this.view_.config = this.model.get('config');\\n  },\\n});\\n\\nconst PlotModel = widgets.DOMWidgetModel.extend({\\n  defaults: _.extend(widgets.DOMWidgetModel.prototype.defaults(), {\\n    _model_name: PLOT_MODEL_NAME,\\n    _view_name: PLOT_VIEW_NAME,\\n    _model_module: MODULE_NAME,\\n    _view_module: MODULE_NAME,\\n    _model_module_vers",
                    "rendered": {
                      "text": "ed_();\\n      this.model.on('change:config', this.configChanged_, this);\\n      this.model.on('change:data', this.dataChanged_, this);\\n    });\\n  },\\n  dataChanged_: function() {\\n    this.view_.data = this.model.get('data');\\n  },\\n  configChanged_: function() {\\n    this.view_.config = this.model.get('config');\\n  },\\n});\\n\\nconst PlotModel = widgets.DOMWidgetModel.extend({\\n  defaults: _.extend(widgets.DOMWidgetModel.prototype.defaults(), {\\n    _model_name: PLOT_MODEL_NAME,\\n    _view_name: PLOT_VIEW_NAME,\\n    _model_module: MODULE_NAME,\\n    _view_module: MODULE_NAME,\\n    _model_module_vers",
                      "markdown": "`ed_();\\n      this.model.on('change:config', this.configChanged_, this);\\n      this.model.on('change:data', this.dataChanged_, this);\\n    });\\n  },\\n  dataChanged_: function() {\\n    this.view_.data = this.model.get('data');\\n  },\\n  configChanged_: function() {\\n    this.view_.config = this.model.get('config');\\n  },\\n});\\n\\nconst PlotModel = widgets.DOMWidgetModel.extend({\\n  defaults: _.extend(widgets.DOMWidgetModel.prototype.defaults(), {\\n    _model_name: PLOT_MODEL_NAME,\\n    _view_name: PLOT_VIEW_NAME,\\n    _model_module: MODULE_NAME,\\n    _view_module: MODULE_NAME,\\n    _model_module_vers`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 120165,
                  "endLine": 1,
                  "endColumn": 120170,
                  "snippet": {
                    "text": "iew_);\\n\\n    delayedRender(() => {\\n      this.configChanged_();\\n      this.dataChanged_();\\n      this.model.on('change:config', this.configChanged_, this);\\n      this.model.on('change:data', this.dataChanged_, this);\\n    });\\n  },\\n  dataChanged_: function() {\\n    this.view_.data = this.model.get('data');\\n  },\\n  configChanged_: function() {\\n    this.view_.config = this.model.get('config');\\n  },\\n});\\n\\nconst PlotModel = widgets.DOMWidgetModel.extend({\\n  defaults: _.extend(widgets.DOMWidgetModel.prototype.defaults(), {\\n    _model_name: PLOT_MODEL_NAME,\\n    _view_name: PLOT_VIEW_NAME,\\n",
                    "rendered": {
                      "text": "iew_);\\n\\n    delayedRender(() => {\\n      this.configChanged_();\\n      this.dataChanged_();\\n      this.model.on('change:config', this.configChanged_, this);\\n      this.model.on('change:data', this.dataChanged_, this);\\n    });\\n  },\\n  dataChanged_: function() {\\n    this.view_.data = this.model.get('data');\\n  },\\n  configChanged_: function() {\\n    this.view_.config = this.model.get('config');\\n  },\\n});\\n\\nconst PlotModel = widgets.DOMWidgetModel.extend({\\n  defaults: _.extend(widgets.DOMWidgetModel.prototype.defaults(), {\\n    _model_name: PLOT_MODEL_NAME,\\n    _view_name: PLOT_VIEW_NAME,\\n",
                      "markdown": "`iew_);\\n\\n    delayedRender(() => {\\n      this.configChanged_();\\n      this.dataChanged_();\\n      this.model.on('change:config', this.configChanged_, this);\\n      this.model.on('change:data', this.dataChanged_, this);\\n    });\\n  },\\n  dataChanged_: function() {\\n    this.view_.data = this.model.get('data');\\n  },\\n  configChanged_: function() {\\n    this.view_.config = this.model.get('config');\\n  },\\n});\\n\\nconst PlotModel = widgets.DOMWidgetModel.extend({\\n  defaults: _.extend(widgets.DOMWidgetModel.prototype.defaults(), {\\n    _model_name: PLOT_MODEL_NAME,\\n    _view_name: PLOT_VIEW_NAME,\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 119223,
                  "endLine": 1,
                  "endColumn": 119228,
                  "snippet": {
                    "text": "ed_();\\n      this.model.on('change:config', this.configChanged_, this);\\n      this.model.on('change:data', this.dataChanged_, this);\\n    });\\n  },\\n  dataChanged_: function() {\\n    this.view_.data = this.model.get('data');\\n  },\\n  configChanged_: function() {\\n    this.view_.config = this.model.get('config');\\n  },\\n});\\n\\nconst TimeSeriesModel = widgets.DOMWidgetModel.extend({\\n  defaults: _.extend(widgets.DOMWidgetModel.prototype.defaults(), {\\n    _model_name: TIME_SERIES_MODEL_NAME,\\n    _view_name: TIME_SERIES_VIEW_NAME,\\n    _model_module: MODULE_NAME,\\n    _view_module: MODULE_NAME,\\n  ",
                    "rendered": {
                      "text": "ed_();\\n      this.model.on('change:config', this.configChanged_, this);\\n      this.model.on('change:data', this.dataChanged_, this);\\n    });\\n  },\\n  dataChanged_: function() {\\n    this.view_.data = this.model.get('data');\\n  },\\n  configChanged_: function() {\\n    this.view_.config = this.model.get('config');\\n  },\\n});\\n\\nconst TimeSeriesModel = widgets.DOMWidgetModel.extend({\\n  defaults: _.extend(widgets.DOMWidgetModel.prototype.defaults(), {\\n    _model_name: TIME_SERIES_MODEL_NAME,\\n    _view_name: TIME_SERIES_VIEW_NAME,\\n    _model_module: MODULE_NAME,\\n    _view_module: MODULE_NAME,\\n  ",
                      "markdown": "`ed_();\\n      this.model.on('change:config', this.configChanged_, this);\\n      this.model.on('change:data', this.dataChanged_, this);\\n    });\\n  },\\n  dataChanged_: function() {\\n    this.view_.data = this.model.get('data');\\n  },\\n  configChanged_: function() {\\n    this.view_.config = this.model.get('config');\\n  },\\n});\\n\\nconst TimeSeriesModel = widgets.DOMWidgetModel.extend({\\n  defaults: _.extend(widgets.DOMWidgetModel.prototype.defaults(), {\\n    _model_name: TIME_SERIES_MODEL_NAME,\\n    _view_name: TIME_SERIES_VIEW_NAME,\\n    _model_module: MODULE_NAME,\\n    _view_module: MODULE_NAME,\\n  `"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 119136,
                  "endLine": 1,
                  "endColumn": 119141,
                  "snippet": {
                    "text": "   });\\n\\n    delayedRender(() => {\\n      this.configChanged_();\\n      this.dataChanged_();\\n      this.model.on('change:config', this.configChanged_, this);\\n      this.model.on('change:data', this.dataChanged_, this);\\n    });\\n  },\\n  dataChanged_: function() {\\n    this.view_.data = this.model.get('data');\\n  },\\n  configChanged_: function() {\\n    this.view_.config = this.model.get('config');\\n  },\\n});\\n\\nconst TimeSeriesModel = widgets.DOMWidgetModel.extend({\\n  defaults: _.extend(widgets.DOMWidgetModel.prototype.defaults(), {\\n    _model_name: TIME_SERIES_MODEL_NAME,\\n    _view_name: TIME",
                    "rendered": {
                      "text": "   });\\n\\n    delayedRender(() => {\\n      this.configChanged_();\\n      this.dataChanged_();\\n      this.model.on('change:config', this.configChanged_, this);\\n      this.model.on('change:data', this.dataChanged_, this);\\n    });\\n  },\\n  dataChanged_: function() {\\n    this.view_.data = this.model.get('data');\\n  },\\n  configChanged_: function() {\\n    this.view_.config = this.model.get('config');\\n  },\\n});\\n\\nconst TimeSeriesModel = widgets.DOMWidgetModel.extend({\\n  defaults: _.extend(widgets.DOMWidgetModel.prototype.defaults(), {\\n    _model_name: TIME_SERIES_MODEL_NAME,\\n    _view_name: TIME",
                      "markdown": "`   });\\n\\n    delayedRender(() => {\\n      this.configChanged_();\\n      this.dataChanged_();\\n      this.model.on('change:config', this.configChanged_, this);\\n      this.model.on('change:data', this.dataChanged_, this);\\n    });\\n  },\\n  dataChanged_: function() {\\n    this.view_.data = this.model.get('data');\\n  },\\n  configChanged_: function() {\\n    this.view_.config = this.model.get('config');\\n  },\\n});\\n\\nconst TimeSeriesModel = widgets.DOMWidgetModel.extend({\\n  defaults: _.extend(widgets.DOMWidgetModel.prototype.defaults(), {\\n    _model_name: TIME_SERIES_MODEL_NAME,\\n    _view_name: TIME`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 649869,
                  "endLine": 1,
                  "endColumn": 649873,
                  "snippet": {
                    "text": "objects, _.property(['a', 'b'])), 'a.b');\\n     * // => [1, 2]\\n     */\\n    function property(path) {\\n      return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);\\n    }\\n\\n    /**\\n     * The opposite of `_.property`; this method creates a function that returns\\n     * the value at a given path of `object`.\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 3.0.0\\n     * @category Util\\n     * @param {Object} object The object to query.\\n     * @returns {Function} Returns the new accessor function.\\n     * @example\\n     *\\n     * var array = [0, 1, 2],\\n     *     obj",
                    "rendered": {
                      "text": "objects, _.property(['a', 'b'])), 'a.b');\\n     * // => [1, 2]\\n     */\\n    function property(path) {\\n      return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);\\n    }\\n\\n    /**\\n     * The opposite of `_.property`; this method creates a function that returns\\n     * the value at a given path of `object`.\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 3.0.0\\n     * @category Util\\n     * @param {Object} object The object to query.\\n     * @returns {Function} Returns the new accessor function.\\n     * @example\\n     *\\n     * var array = [0, 1, 2],\\n     *     obj",
                      "markdown": "`objects, _.property(['a', 'b'])), 'a.b');\\n     * // => [1, 2]\\n     */\\n    function property(path) {\\n      return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);\\n    }\\n\\n    /**\\n     * The opposite of `_.property`; this method creates a function that returns\\n     * the value at a given path of `object`.\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 3.0.0\\n     * @category Util\\n     * @param {Object} object The object to query.\\n     * @returns {Function} Returns the new accessor function.\\n     * @example\\n     *\\n     * var array = [0, 1, 2],\\n     *     obj`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 649096,
                  "endLine": 1,
                  "endColumn": 649100,
                  "snippet": {
                    "text": "ue\\n     *\\n     * func(NaN);\\n     * // => false\\n     *\\n     * var matchesFunc = _.overSome([{ 'a': 1 }, { 'a': 2 }])\\n     * var matchesPropertyFunc = _.overSome([['a', 1], ['a', 2]])\\n     */\\n    var overSome = createOver(arraySome);\\n\\n    /**\\n     * Creates a function that returns the value at `path` of a given object.\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 2.4.0\\n     * @category Util\\n     * @param {Array|string} path The path of the property to get.\\n     * @returns {Function} Returns the new accessor function.\\n     * @example\\n     *\\n     * var objects = [\\n     ",
                    "rendered": {
                      "text": "ue\\n     *\\n     * func(NaN);\\n     * // => false\\n     *\\n     * var matchesFunc = _.overSome([{ 'a': 1 }, { 'a': 2 }])\\n     * var matchesPropertyFunc = _.overSome([['a', 1], ['a', 2]])\\n     */\\n    var overSome = createOver(arraySome);\\n\\n    /**\\n     * Creates a function that returns the value at `path` of a given object.\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 2.4.0\\n     * @category Util\\n     * @param {Array|string} path The path of the property to get.\\n     * @returns {Function} Returns the new accessor function.\\n     * @example\\n     *\\n     * var objects = [\\n     ",
                      "markdown": "`ue\\n     *\\n     * func(NaN);\\n     * // => false\\n     *\\n     * var matchesFunc = _.overSome([{ 'a': 1 }, { 'a': 2 }])\\n     * var matchesPropertyFunc = _.overSome([['a', 1], ['a', 2]])\\n     */\\n    var overSome = createOver(arraySome);\\n\\n    /**\\n     * Creates a function that returns the value at `path` of a given object.\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 2.4.0\\n     * @category Util\\n     * @param {Array|string} path The path of the property to get.\\n     * @returns {Function} Returns the new accessor function.\\n     * @example\\n     *\\n     * var objects = [\\n     `"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 645793,
                  "endLine": 1,
                  "endColumn": 645797,
                  "snippet": {
                    "text": "   * @static\\n     * @memberOf _\\n     * @since 2.3.0\\n     * @category Util\\n     * @example\\n     *\\n     * _.times(2, _.noop);\\n     * // => [undefined, undefined]\\n     */\\n    function noop() {\\n      // No operation performed.\\n    }\\n\\n    /**\\n     * Creates a function that gets the argument at index `n`. If `n` is negative,\\n     * the nth argument from the end is returned.\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 4.0.0\\n     * @category Util\\n     * @param {number} [n=0] The index of the argument to return.\\n     * @returns {Function} Returns the new pass-thru function.",
                    "rendered": {
                      "text": "   * @static\\n     * @memberOf _\\n     * @since 2.3.0\\n     * @category Util\\n     * @example\\n     *\\n     * _.times(2, _.noop);\\n     * // => [undefined, undefined]\\n     */\\n    function noop() {\\n      // No operation performed.\\n    }\\n\\n    /**\\n     * Creates a function that gets the argument at index `n`. If `n` is negative,\\n     * the nth argument from the end is returned.\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 4.0.0\\n     * @category Util\\n     * @param {number} [n=0] The index of the argument to return.\\n     * @returns {Function} Returns the new pass-thru function.",
                      "markdown": "`   * @static\\n     * @memberOf _\\n     * @since 2.3.0\\n     * @category Util\\n     * @example\\n     *\\n     * _.times(2, _.noop);\\n     * // => [undefined, undefined]\\n     */\\n    function noop() {\\n      // No operation performed.\\n    }\\n\\n    /**\\n     * Creates a function that gets the argument at index `n`. If `n` is negative,\\n     * the nth argument from the end is returned.\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 4.0.0\\n     * @category Util\\n     * @param {number} [n=0] The index of the argument to return.\\n     * @returns {Function} Returns the new pass-thru function.`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 641647,
                  "endLine": 1,
                  "endColumn": 641651,
                  "snippet": {
                    "text": "', 'b']));\\n     * // => [2, 1]\\n     */\\n    var method = baseRest(function(path, args) {\\n      return function(object) {\\n        return baseInvoke(object, path, args);\\n      };\\n    });\\n\\n    /**\\n     * The opposite of `_.method`; this method creates a function that invokes\\n     * the method at a given path of `object`. Any additional arguments are\\n     * provided to the invoked method.\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 3.7.0\\n     * @category Util\\n     * @param {Object} object The object to query.\\n     * @param {...*} [args] The arguments to invoke the method w",
                    "rendered": {
                      "text": "', 'b']));\\n     * // => [2, 1]\\n     */\\n    var method = baseRest(function(path, args) {\\n      return function(object) {\\n        return baseInvoke(object, path, args);\\n      };\\n    });\\n\\n    /**\\n     * The opposite of `_.method`; this method creates a function that invokes\\n     * the method at a given path of `object`. Any additional arguments are\\n     * provided to the invoked method.\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 3.7.0\\n     * @category Util\\n     * @param {Object} object The object to query.\\n     * @param {...*} [args] The arguments to invoke the method w",
                      "markdown": "`', 'b']));\\n     * // => [2, 1]\\n     */\\n    var method = baseRest(function(path, args) {\\n      return function(object) {\\n        return baseInvoke(object, path, args);\\n      };\\n    });\\n\\n    /**\\n     * The opposite of `_.method`; this method creates a function that invokes\\n     * the method at a given path of `object`. Any additional arguments are\\n     * provided to the invoked method.\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 3.7.0\\n     * @category Util\\n     * @param {Object} object The object to query.\\n     * @param {...*} [args] The arguments to invoke the method w`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 640701,
                  "endLine": 1,
                  "endColumn": 640705,
                  "snippet": {
                    "text": "chesProperty('a', 4)]));\\n     * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]\\n     */\\n    function matchesProperty(path, srcValue) {\\n      return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));\\n    }\\n\\n    /**\\n     * Creates a function that invokes the method at `path` of a given object.\\n     * Any additional arguments are provided to the invoked method.\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 3.7.0\\n     * @category Util\\n     * @param {Array|string} path The path of the method to invoke.\\n     * @param {...*} [args] The arguments to in",
                    "rendered": {
                      "text": "chesProperty('a', 4)]));\\n     * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]\\n     */\\n    function matchesProperty(path, srcValue) {\\n      return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));\\n    }\\n\\n    /**\\n     * Creates a function that invokes the method at `path` of a given object.\\n     * Any additional arguments are provided to the invoked method.\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 3.7.0\\n     * @category Util\\n     * @param {Array|string} path The path of the method to invoke.\\n     * @param {...*} [args] The arguments to in",
                      "markdown": "`chesProperty('a', 4)]));\\n     * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]\\n     */\\n    function matchesProperty(path, srcValue) {\\n      return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));\\n    }\\n\\n    /**\\n     * Creates a function that invokes the method at `path` of a given object.\\n     * Any additional arguments are provided to the invoked method.\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 3.7.0\\n     * @category Util\\n     * @param {Array|string} path The path of the method to invoke.\\n     * @param {...*} [args] The arguments to in`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 639316,
                  "endLine": 1,
                  "endColumn": 639320,
                  "snippet": {
                    "text": " 'a': 4 })]));\\n     * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]\\n     */\\n    function matches(source) {\\n      return baseMatches(baseClone(source, CLONE_DEEP_FLAG));\\n    }\\n\\n    /**\\n     * Creates a function that performs a partial deep comparison between the\\n     * value at `path` of a given object to `srcValue`, returning `true` if the\\n     * object value is equivalent, else `false`.\\n     *\\n     * **Note:** Partial comparisons will match empty array and empty object\\n     * `srcValue` values against any array or object value, respectively. See\\n     * `_.isEqual` f",
                    "rendered": {
                      "text": " 'a': 4 })]));\\n     * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]\\n     */\\n    function matches(source) {\\n      return baseMatches(baseClone(source, CLONE_DEEP_FLAG));\\n    }\\n\\n    /**\\n     * Creates a function that performs a partial deep comparison between the\\n     * value at `path` of a given object to `srcValue`, returning `true` if the\\n     * object value is equivalent, else `false`.\\n     *\\n     * **Note:** Partial comparisons will match empty array and empty object\\n     * `srcValue` values against any array or object value, respectively. See\\n     * `_.isEqual` f",
                      "markdown": "` 'a': 4 })]));\\n     * // => [{ 'a': 1, 'b': 2, 'c': 3 }, { 'a': 4, 'b': 5, 'c': 6 }]\\n     */\\n    function matches(source) {\\n      return baseMatches(baseClone(source, CLONE_DEEP_FLAG));\\n    }\\n\\n    /**\\n     * Creates a function that performs a partial deep comparison between the\\n     * value at `path` of a given object to `srcValue`, returning `true` if the\\n     * object value is equivalent, else `false`.\\n     *\\n     * **Note:** Partial comparisons will match empty array and empty object\\n     * `srcValue` values against any array or object value, respectively. See\\n     * `_.isEqual` f`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 581682,
                  "endLine": 1,
                  "endColumn": 581686,
                  "snippet": {
                    "text": "   }\\n        else {\\n          accumulator = {};\\n        }\\n      }\\n      (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object) {\\n        return iteratee(accumulator, value, index, object);\\n      });\\n      return accumulator;\\n    }\\n\\n    /**\\n     * Removes the property at `path` of `object`.\\n     *\\n     * **Note:** This method mutates `object`.\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 4.0.0\\n     * @category Object\\n     * @param {Object} object The object to modify.\\n     * @param {Array|string} path The path of the property to unset.\\n     * @re",
                    "rendered": {
                      "text": "   }\\n        else {\\n          accumulator = {};\\n        }\\n      }\\n      (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object) {\\n        return iteratee(accumulator, value, index, object);\\n      });\\n      return accumulator;\\n    }\\n\\n    /**\\n     * Removes the property at `path` of `object`.\\n     *\\n     * **Note:** This method mutates `object`.\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 4.0.0\\n     * @category Object\\n     * @param {Object} object The object to modify.\\n     * @param {Array|string} path The path of the property to unset.\\n     * @re",
                      "markdown": "`   }\\n        else {\\n          accumulator = {};\\n        }\\n      }\\n      (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object) {\\n        return iteratee(accumulator, value, index, object);\\n      });\\n      return accumulator;\\n    }\\n\\n    /**\\n     * Removes the property at `path` of `object`.\\n     *\\n     * **Note:** This method mutates `object`.\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 4.0.0\\n     * @category Object\\n     * @param {Object} object The object to modify.\\n     * @param {Array|string} path The path of the property to unset.\\n     * @re`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 575932,
                  "endLine": 1,
                  "endColumn": 575936,
                  "snippet": {
                    "text": "bject == null ? undefined : object[toKey(path[index])];\\n        if (value === undefined) {\\n          index = length;\\n          value = defaultValue;\\n        }\\n        object = isFunction(value) ? value.call(object) : value;\\n      }\\n      return object;\\n    }\\n\\n    /**\\n     * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,\\n     * it's created. Arrays are created for missing index properties while objects\\n     * are created for all other missing properties. Use `_.setWith` to customize\\n     * `path` creation.\\n     *\\n     * **Note:** This method mutates `obj",
                    "rendered": {
                      "text": "bject == null ? undefined : object[toKey(path[index])];\\n        if (value === undefined) {\\n          index = length;\\n          value = defaultValue;\\n        }\\n        object = isFunction(value) ? value.call(object) : value;\\n      }\\n      return object;\\n    }\\n\\n    /**\\n     * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,\\n     * it's created. Arrays are created for missing index properties while objects\\n     * are created for all other missing properties. Use `_.setWith` to customize\\n     * `path` creation.\\n     *\\n     * **Note:** This method mutates `obj",
                      "markdown": "`bject == null ? undefined : object[toKey(path[index])];\\n        if (value === undefined) {\\n          index = length;\\n          value = defaultValue;\\n        }\\n        object = isFunction(value) ? value.call(object) : value;\\n      }\\n      return object;\\n    }\\n\\n    /**\\n     * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,\\n     * it's created. Arrays are created for missing index properties while objects\\n     * are created for all other missing properties. Use `_.setWith` to customize\\n     * `path` creation.\\n     *\\n     * **Note:** This method mutates `obj`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 563344,
                  "endLine": 1,
                  "endColumn": 563348,
                  "snippet": {
                    "text": "typeof value.toString != 'function') {\\n        value = nativeObjectToString.call(value);\\n      }\\n\\n      if (hasOwnProperty.call(result, value)) {\\n        result[value].push(key);\\n      } else {\\n        result[value] = [key];\\n      }\\n    }, getIteratee);\\n\\n    /**\\n     * Invokes the method at `path` of `object`.\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 4.0.0\\n     * @category Object\\n     * @param {Object} object The object to query.\\n     * @param {Array|string} path The path of the method to invoke.\\n     * @param {...*} [args] The arguments to invoke the method with.",
                    "rendered": {
                      "text": "typeof value.toString != 'function') {\\n        value = nativeObjectToString.call(value);\\n      }\\n\\n      if (hasOwnProperty.call(result, value)) {\\n        result[value].push(key);\\n      } else {\\n        result[value] = [key];\\n      }\\n    }, getIteratee);\\n\\n    /**\\n     * Invokes the method at `path` of `object`.\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 4.0.0\\n     * @category Object\\n     * @param {Object} object The object to query.\\n     * @param {Array|string} path The path of the method to invoke.\\n     * @param {...*} [args] The arguments to invoke the method with.",
                      "markdown": "`typeof value.toString != 'function') {\\n        value = nativeObjectToString.call(value);\\n      }\\n\\n      if (hasOwnProperty.call(result, value)) {\\n        result[value].push(key);\\n      } else {\\n        result[value] = [key];\\n      }\\n    }, getIteratee);\\n\\n    /**\\n     * Invokes the method at `path` of `object`.\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 4.0.0\\n     * @category Object\\n     * @param {Object} object The object to query.\\n     * @param {Array|string} path The path of the method to invoke.\\n     * @param {...*} [args] The arguments to invoke the method with.`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 558589,
                  "endLine": 1,
                  "endColumn": 558593,
                  "snippet": {
                    "text": "nt('b');\\n     * }\\n     *\\n     * Foo.prototype.c = _.constant('c');\\n     *\\n     * _.functionsIn(new Foo);\\n     * // => ['a', 'b', 'c']\\n     */\\n    function functionsIn(object) {\\n      return object == null ? [] : baseFunctions(object, keysIn(object));\\n    }\\n\\n    /**\\n     * Gets the value at `path` of `object`. If the resolved value is\\n     * `undefined`, the `defaultValue` is returned in its place.\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 3.7.0\\n     * @category Object\\n     * @param {Object} object The object to query.\\n     * @param {Array|string} path The path of ",
                    "rendered": {
                      "text": "nt('b');\\n     * }\\n     *\\n     * Foo.prototype.c = _.constant('c');\\n     *\\n     * _.functionsIn(new Foo);\\n     * // => ['a', 'b', 'c']\\n     */\\n    function functionsIn(object) {\\n      return object == null ? [] : baseFunctions(object, keysIn(object));\\n    }\\n\\n    /**\\n     * Gets the value at `path` of `object`. If the resolved value is\\n     * `undefined`, the `defaultValue` is returned in its place.\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 3.7.0\\n     * @category Object\\n     * @param {Object} object The object to query.\\n     * @param {Array|string} path The path of ",
                      "markdown": "`nt('b');\\n     * }\\n     *\\n     * Foo.prototype.c = _.constant('c');\\n     *\\n     * _.functionsIn(new Foo);\\n     * // => ['a', 'b', 'c']\\n     */\\n    function functionsIn(object) {\\n      return object == null ? [] : baseFunctions(object, keysIn(object));\\n    }\\n\\n    /**\\n     * Gets the value at `path` of `object`. If the resolved value is\\n     * `undefined`, the `defaultValue` is returned in its place.\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 3.7.0\\n     * @category Object\\n     * @param {Object} object The object to query.\\n     * @param {Array|string} path The path of `"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 546951,
                  "endLine": 1,
                  "endColumn": 546955,
                  "snippet": {
                    "text": "r.\\n     * @param {...(string|string[])} [paths] The property paths to pick.\\n     * @returns {Array} Returns the picked values.\\n     * @example\\n     *\\n     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };\\n     *\\n     * _.at(object, ['a[0].b.c', 'a[1]']);\\n     * // => [3, 4]\\n     */\\n    var at = flatRest(baseAt);\\n\\n    /**\\n     * Creates an object that inherits from the `prototype` object. If a\\n     * `properties` object is given, its own enumerable string keyed properties\\n     * are assigned to the created object.\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 2.3.0\\n    ",
                    "rendered": {
                      "text": "r.\\n     * @param {...(string|string[])} [paths] The property paths to pick.\\n     * @returns {Array} Returns the picked values.\\n     * @example\\n     *\\n     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };\\n     *\\n     * _.at(object, ['a[0].b.c', 'a[1]']);\\n     * // => [3, 4]\\n     */\\n    var at = flatRest(baseAt);\\n\\n    /**\\n     * Creates an object that inherits from the `prototype` object. If a\\n     * `properties` object is given, its own enumerable string keyed properties\\n     * are assigned to the created object.\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 2.3.0\\n    ",
                      "markdown": "`r.\\n     * @param {...(string|string[])} [paths] The property paths to pick.\\n     * @returns {Array} Returns the picked values.\\n     * @example\\n     *\\n     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };\\n     *\\n     * _.at(object, ['a[0].b.c', 'a[1]']);\\n     * // => [3, 4]\\n     */\\n    var at = flatRest(baseAt);\\n\\n    /**\\n     * Creates an object that inherits from the `prototype` object. If a\\n     * `properties` object is given, its own enumerable string keyed properties\\n     * are assigned to the created object.\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 2.3.0\\n    `"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 492662,
                  "endLine": 1,
                  "endColumn": 492666,
                  "snippet": {
                    "text": " {\\n        var array = args[start],\\n            otherArgs = castSlice(args, 0, start);\\n\\n        if (array) {\\n          arrayPush(otherArgs, array);\\n        }\\n        return apply(func, this, otherArgs);\\n      });\\n    }\\n\\n    /**\\n     * Creates a throttled function that only invokes `func` at most once per\\n     * every `wait` milliseconds. The throttled function comes with a `cancel`\\n     * method to cancel delayed `func` invocations and a `flush` method to\\n     * immediately invoke them. Provide `options` to indicate whether `func`\\n     * should be invoked on the leading and/or trai",
                    "rendered": {
                      "text": " {\\n        var array = args[start],\\n            otherArgs = castSlice(args, 0, start);\\n\\n        if (array) {\\n          arrayPush(otherArgs, array);\\n        }\\n        return apply(func, this, otherArgs);\\n      });\\n    }\\n\\n    /**\\n     * Creates a throttled function that only invokes `func` at most once per\\n     * every `wait` milliseconds. The throttled function comes with a `cancel`\\n     * method to cancel delayed `func` invocations and a `flush` method to\\n     * immediately invoke them. Provide `options` to indicate whether `func`\\n     * should be invoked on the leading and/or trai",
                      "markdown": "` {\\n        var array = args[start],\\n            otherArgs = castSlice(args, 0, start);\\n\\n        if (array) {\\n          arrayPush(otherArgs, array);\\n        }\\n        return apply(func, this, otherArgs);\\n      });\\n    }\\n\\n    /**\\n     * Creates a throttled function that only invokes `func` at most once per\\n     * every `wait` milliseconds. The throttled function comes with a `cancel`\\n     * method to cancel delayed `func` invocations and a `flush` method to\\n     * immediately invoke them. Provide `options` to indicate whether `func`\\n     * should be invoked on the leading and/or trai`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 489139,
                  "endLine": 1,
                  "endColumn": 489143,
                  "snippet": {
                    "text": "c, WRAP_PARTIAL_RIGHT_FLAG, undefined, partials, holders);\\n    });\\n\\n    /**\\n     * Creates a function that invokes `func` with arguments arranged according\\n     * to the specified `indexes` where the argument value at the first index is\\n     * provided as the first argument, the argument value at the second index is\\n     * provided as the second argument, and so on.\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 3.0.0\\n     * @category Function\\n     * @param {Function} func The function to rearrange arguments for.\\n     * @param {...(number|number[])} indexes The arranged argum",
                    "rendered": {
                      "text": "c, WRAP_PARTIAL_RIGHT_FLAG, undefined, partials, holders);\\n    });\\n\\n    /**\\n     * Creates a function that invokes `func` with arguments arranged according\\n     * to the specified `indexes` where the argument value at the first index is\\n     * provided as the first argument, the argument value at the second index is\\n     * provided as the second argument, and so on.\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 3.0.0\\n     * @category Function\\n     * @param {Function} func The function to rearrange arguments for.\\n     * @param {...(number|number[])} indexes The arranged argum",
                      "markdown": "`c, WRAP_PARTIAL_RIGHT_FLAG, undefined, partials, holders);\\n    });\\n\\n    /**\\n     * Creates a function that invokes `func` with arguments arranged according\\n     * to the specified `indexes` where the argument value at the first index is\\n     * provided as the first argument, the argument value at the second index is\\n     * provided as the second argument, and so on.\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 3.0.0\\n     * @category Function\\n     * @param {Function} func The function to rearrange arguments for.\\n     * @param {...(number|number[])} indexes The arranged argum`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 489058,
                  "endLine": 1,
                  "endColumn": 489062,
                  "snippet": {
                    "text": "= replaceHolders(partials, getHolder(partialRight));\\n      return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined, partials, holders);\\n    });\\n\\n    /**\\n     * Creates a function that invokes `func` with arguments arranged according\\n     * to the specified `indexes` where the argument value at the first index is\\n     * provided as the first argument, the argument value at the second index is\\n     * provided as the second argument, and so on.\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 3.0.0\\n     * @category Function\\n     * @param {Function} func The function to rearrang",
                    "rendered": {
                      "text": "= replaceHolders(partials, getHolder(partialRight));\\n      return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined, partials, holders);\\n    });\\n\\n    /**\\n     * Creates a function that invokes `func` with arguments arranged according\\n     * to the specified `indexes` where the argument value at the first index is\\n     * provided as the first argument, the argument value at the second index is\\n     * provided as the second argument, and so on.\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 3.0.0\\n     * @category Function\\n     * @param {Function} func The function to rearrang",
                      "markdown": "`= replaceHolders(partials, getHolder(partialRight));\\n      return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined, partials, holders);\\n    });\\n\\n    /**\\n     * Creates a function that invokes `func` with arguments arranged according\\n     * to the specified `indexes` where the argument value at the first index is\\n     * provided as the first argument, the argument value at the second index is\\n     * provided as the second argument, and so on.\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 3.0.0\\n     * @category Function\\n     * @param {Function} func The function to rearrang`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 477124,
                  "endLine": 1,
                  "endColumn": 477128,
                  "snippet": {
                    "text": "ilingEdge(time);\\n        }\\n        // Restart the timer.\\n        timerId = setTimeout(timerExpired, remainingWait(time));\\n      }\\n\\n      function trailingEdge(time) {\\n        timerId = undefined;\\n\\n        // Only invoke if we have `lastArgs` which means `func` has been\\n        // debounced at least once.\\n        if (trailing && lastArgs) {\\n          return invokeFunc(time);\\n        }\\n        lastArgs = lastThis = undefined;\\n        return result;\\n      }\\n\\n      function cancel() {\\n        if (timerId !== undefined) {\\n          clearTimeout(timerId);\\n        }\\n        lastInvo",
                    "rendered": {
                      "text": "ilingEdge(time);\\n        }\\n        // Restart the timer.\\n        timerId = setTimeout(timerExpired, remainingWait(time));\\n      }\\n\\n      function trailingEdge(time) {\\n        timerId = undefined;\\n\\n        // Only invoke if we have `lastArgs` which means `func` has been\\n        // debounced at least once.\\n        if (trailing && lastArgs) {\\n          return invokeFunc(time);\\n        }\\n        lastArgs = lastThis = undefined;\\n        return result;\\n      }\\n\\n      function cancel() {\\n        if (timerId !== undefined) {\\n          clearTimeout(timerId);\\n        }\\n        lastInvo",
                      "markdown": "`ilingEdge(time);\\n        }\\n        // Restart the timer.\\n        timerId = setTimeout(timerExpired, remainingWait(time));\\n      }\\n\\n      function trailingEdge(time) {\\n        timerId = undefined;\\n\\n        // Only invoke if we have `lastArgs` which means `func` has been\\n        // debounced at least once.\\n        if (trailing && lastArgs) {\\n          return invokeFunc(time);\\n        }\\n        lastArgs = lastThis = undefined;\\n        return result;\\n      }\\n\\n      function cancel() {\\n        if (timerId !== undefined) {\\n          clearTimeout(timerId);\\n        }\\n        lastInvo`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 476376,
                  "endLine": 1,
                  "endColumn": 476380,
                  "snippet": {
                    "text": "aiting, maxWait - timeSinceLastInvoke)\\n          : timeWaiting;\\n      }\\n\\n      function shouldInvoke(time) {\\n        var timeSinceLastCall = time - lastCallTime,\\n            timeSinceLastInvoke = time - lastInvokeTime;\\n\\n        // Either this is the first call, activity has stopped and we're at the\\n        // trailing edge, the system time has gone backwards and we're treating\\n        // it as the trailing edge, or we've hit the `maxWait` limit.\\n        return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||\\n          (timeSinceLastCall < 0) || (maxing && timeSinceLastInvo",
                    "rendered": {
                      "text": "aiting, maxWait - timeSinceLastInvoke)\\n          : timeWaiting;\\n      }\\n\\n      function shouldInvoke(time) {\\n        var timeSinceLastCall = time - lastCallTime,\\n            timeSinceLastInvoke = time - lastInvokeTime;\\n\\n        // Either this is the first call, activity has stopped and we're at the\\n        // trailing edge, the system time has gone backwards and we're treating\\n        // it as the trailing edge, or we've hit the `maxWait` limit.\\n        return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||\\n          (timeSinceLastCall < 0) || (maxing && timeSinceLastInvo",
                      "markdown": "`aiting, maxWait - timeSinceLastInvoke)\\n          : timeWaiting;\\n      }\\n\\n      function shouldInvoke(time) {\\n        var timeSinceLastCall = time - lastCallTime,\\n            timeSinceLastInvoke = time - lastInvokeTime;\\n\\n        // Either this is the first call, activity has stopped and we're at the\\n        // trailing edge, the system time has gone backwards and we're treating\\n        // it as the trailing edge, or we've hit the `maxWait` limit.\\n        return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||\\n          (timeSinceLastCall < 0) || (maxing && timeSinceLastInvo`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 468796,
                  "endLine": 1,
                  "endColumn": 468800,
                  "snippet": {
                    "text": " replaceHolders(partials, getHolder(bindKey));\\n        bitmask |= WRAP_PARTIAL_FLAG;\\n      }\\n      return createWrap(key, bitmask, object, partials, holders);\\n    });\\n\\n    /**\\n     * Creates a function that accepts arguments of `func` and either invokes\\n     * `func` returning its result, if at least `arity` number of arguments have\\n     * been provided, or returns a function that accepts the remaining `func`\\n     * arguments, and so on. The arity of `func` may be specified if `func.length`\\n     * is not sufficient.\\n     *\\n     * The `_.curry.placeholder` value, which defaults to `_` ",
                    "rendered": {
                      "text": " replaceHolders(partials, getHolder(bindKey));\\n        bitmask |= WRAP_PARTIAL_FLAG;\\n      }\\n      return createWrap(key, bitmask, object, partials, holders);\\n    });\\n\\n    /**\\n     * Creates a function that accepts arguments of `func` and either invokes\\n     * `func` returning its result, if at least `arity` number of arguments have\\n     * been provided, or returns a function that accepts the remaining `func`\\n     * arguments, and so on. The arity of `func` may be specified if `func.length`\\n     * is not sufficient.\\n     *\\n     * The `_.curry.placeholder` value, which defaults to `_` ",
                      "markdown": "` replaceHolders(partials, getHolder(bindKey));\\n        bitmask |= WRAP_PARTIAL_FLAG;\\n      }\\n      return createWrap(key, bitmask, object, partials, holders);\\n    });\\n\\n    /**\\n     * Creates a function that accepts arguments of `func` and either invokes\\n     * `func` returning its result, if at least `arity` number of arguments have\\n     * been provided, or returns a function that accepts the remaining `func`\\n     * arguments, and so on. The arity of `func` may be specified if `func.length`\\n     * is not sufficient.\\n     *\\n     * The `_.curry.placeholder` value, which defaults to `_` `"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 466787,
                  "endLine": 1,
                  "endColumn": 466791,
                  "snippet": {
                    "text": " WRAP_BIND_FLAG;\\n      if (partials.length) {\\n        var holders = replaceHolders(partials, getHolder(bind));\\n        bitmask |= WRAP_PARTIAL_FLAG;\\n      }\\n      return createWrap(func, bitmask, thisArg, partials, holders);\\n    });\\n\\n    /**\\n     * Creates a function that invokes the method at `object[key]` with `partials`\\n     * prepended to the arguments it receives.\\n     *\\n     * This method differs from `_.bind` by allowing bound functions to reference\\n     * methods that may be redefined or don't yet exist. See\\n     * [Peter Michaux's article](http://peter.michaux.ca/articles/la",
                    "rendered": {
                      "text": " WRAP_BIND_FLAG;\\n      if (partials.length) {\\n        var holders = replaceHolders(partials, getHolder(bind));\\n        bitmask |= WRAP_PARTIAL_FLAG;\\n      }\\n      return createWrap(func, bitmask, thisArg, partials, holders);\\n    });\\n\\n    /**\\n     * Creates a function that invokes the method at `object[key]` with `partials`\\n     * prepended to the arguments it receives.\\n     *\\n     * This method differs from `_.bind` by allowing bound functions to reference\\n     * methods that may be redefined or don't yet exist. See\\n     * [Peter Michaux's article](http://peter.michaux.ca/articles/la",
                      "markdown": "` WRAP_BIND_FLAG;\\n      if (partials.length) {\\n        var holders = replaceHolders(partials, getHolder(bind));\\n        bitmask |= WRAP_PARTIAL_FLAG;\\n      }\\n      return createWrap(func, bitmask, thisArg, partials, holders);\\n    });\\n\\n    /**\\n     * Creates a function that invokes the method at `object[key]` with `partials`\\n     * prepended to the arguments it receives.\\n     *\\n     * This method differs from `_.bind` by allowing bound functions to reference\\n     * methods that may be redefined or don't yet exist. See\\n     * [Peter Michaux's article](http://peter.michaux.ca/articles/la`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 464468,
                  "endLine": 1,
                  "endColumn": 464472,
                  "snippet": {
                    "text": " of the created function, while it's called less than `n` times. Subsequent\\n     * calls to the created function return the result of the last `func` invocation.\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 3.0.0\\n     * @category Function\\n     * @param {number} n The number of calls at which `func` is no longer invoked.\\n     * @param {Function} func The function to restrict.\\n     * @returns {Function} Returns the new restricted function.\\n     * @example\\n     *\\n     * jQuery(element).on('click', _.before(5, addContactToList));\\n     * // => Allows adding up to 4 contacts to th",
                    "rendered": {
                      "text": " of the created function, while it's called less than `n` times. Subsequent\\n     * calls to the created function return the result of the last `func` invocation.\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 3.0.0\\n     * @category Function\\n     * @param {number} n The number of calls at which `func` is no longer invoked.\\n     * @param {Function} func The function to restrict.\\n     * @returns {Function} Returns the new restricted function.\\n     * @example\\n     *\\n     * jQuery(element).on('click', _.before(5, addContactToList));\\n     * // => Allows adding up to 4 contacts to th",
                      "markdown": "` of the created function, while it's called less than `n` times. Subsequent\\n     * calls to the created function return the result of the last `func` invocation.\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 3.0.0\\n     * @category Function\\n     * @param {number} n The number of calls at which `func` is no longer invoked.\\n     * @param {Function} func The function to restrict.\\n     * @returns {Function} Returns the new restricted function.\\n     * @example\\n     *\\n     * jQuery(element).on('click', _.before(5, addContactToList));\\n     * // => Allows adding up to 4 contacts to th`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 455646,
                  "endLine": 1,
                  "endColumn": 455650,
                  "snippet": {
                    "text": "ns {*} Returns the random element.\\n     * @example\\n     *\\n     * _.sample([1, 2, 3, 4]);\\n     * // => 2\\n     */\\n    function sample(collection) {\\n      var func = isArray(collection) ? arraySample : baseSample;\\n      return func(collection);\\n    }\\n\\n    /**\\n     * Gets `n` random elements at unique keys from `collection` up to the\\n     * size of `collection`.\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 4.0.0\\n     * @category Collection\\n     * @param {Array|Object} collection The collection to sample.\\n     * @param {number} [n=1] The number of elements to sample.\\n    ",
                    "rendered": {
                      "text": "ns {*} Returns the random element.\\n     * @example\\n     *\\n     * _.sample([1, 2, 3, 4]);\\n     * // => 2\\n     */\\n    function sample(collection) {\\n      var func = isArray(collection) ? arraySample : baseSample;\\n      return func(collection);\\n    }\\n\\n    /**\\n     * Gets `n` random elements at unique keys from `collection` up to the\\n     * size of `collection`.\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 4.0.0\\n     * @category Collection\\n     * @param {Array|Object} collection The collection to sample.\\n     * @param {number} [n=1] The number of elements to sample.\\n    ",
                      "markdown": "`ns {*} Returns the random element.\\n     * @example\\n     *\\n     * _.sample([1, 2, 3, 4]);\\n     * // => 2\\n     */\\n    function sample(collection) {\\n      var func = isArray(collection) ? arraySample : baseSample;\\n      return func(collection);\\n    }\\n\\n    /**\\n     * Gets `n` random elements at unique keys from `collection` up to the\\n     * size of `collection`.\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 4.0.0\\n     * @category Collection\\n     * @param {Array|Object} collection The collection to sample.\\n     * @param {number} [n=1] The number of elements to sample.\\n    `"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 443342,
                  "endLine": 1,
                  "endColumn": 443346,
                  "snippet": {
                    "text": " 0) {\\n        fromIndex = nativeMax(length + fromIndex, 0);\\n      }\\n      return isString(collection)\\n        ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)\\n        : (!!length && baseIndexOf(collection, value, fromIndex) > -1);\\n    }\\n\\n    /**\\n     * Invokes the method at `path` of each element in `collection`, returning\\n     * an array of the results of each invoked method. Any additional arguments\\n     * are provided to each invoked method. If `path` is a function, it's invoked\\n     * for, and `this` bound to, each element in `collection`.\\n     *\\n     * @stati",
                    "rendered": {
                      "text": " 0) {\\n        fromIndex = nativeMax(length + fromIndex, 0);\\n      }\\n      return isString(collection)\\n        ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)\\n        : (!!length && baseIndexOf(collection, value, fromIndex) > -1);\\n    }\\n\\n    /**\\n     * Invokes the method at `path` of each element in `collection`, returning\\n     * an array of the results of each invoked method. Any additional arguments\\n     * are provided to each invoked method. If `path` is a function, it's invoked\\n     * for, and `this` bound to, each element in `collection`.\\n     *\\n     * @stati",
                      "markdown": "` 0) {\\n        fromIndex = nativeMax(length + fromIndex, 0);\\n      }\\n      return isString(collection)\\n        ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)\\n        : (!!length && baseIndexOf(collection, value, fromIndex) > -1);\\n    }\\n\\n    /**\\n     * Invokes the method at `path` of each element in `collection`, returning\\n     * an array of the results of each invoked method. Any additional arguments\\n     * are provided to each invoked method. If `path` is a function, it's invoked\\n     * for, and `this` bound to, each element in `collection`.\\n     *\\n     * @stati`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 397262,
                  "endLine": 1,
                  "endColumn": 397266,
                  "snippet": {
                    "text": "tic\\n     * @memberOf _\\n     * @since 4.0.0\\n     * @category Array\\n     * @param {Array} array The sorted array to inspect.\\n     * @param {*} value The value to evaluate.\\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\\n     * @returns {number} Returns the index at which `value` should be inserted\\n     *  into `array`.\\n     * @example\\n     *\\n     * var objects = [{ 'x': 4 }, { 'x': 5 }];\\n     *\\n     * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });\\n     * // => 1\\n     *\\n     * // The `_.property` iteratee shorthand.\\n     * _.so",
                    "rendered": {
                      "text": "tic\\n     * @memberOf _\\n     * @since 4.0.0\\n     * @category Array\\n     * @param {Array} array The sorted array to inspect.\\n     * @param {*} value The value to evaluate.\\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\\n     * @returns {number} Returns the index at which `value` should be inserted\\n     *  into `array`.\\n     * @example\\n     *\\n     * var objects = [{ 'x': 4 }, { 'x': 5 }];\\n     *\\n     * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });\\n     * // => 1\\n     *\\n     * // The `_.property` iteratee shorthand.\\n     * _.so",
                      "markdown": "`tic\\n     * @memberOf _\\n     * @since 4.0.0\\n     * @category Array\\n     * @param {Array} array The sorted array to inspect.\\n     * @param {*} value The value to evaluate.\\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\\n     * @returns {number} Returns the index at which `value` should be inserted\\n     *  into `array`.\\n     * @example\\n     *\\n     * var objects = [{ 'x': 4 }, { 'x': 5 }];\\n     *\\n     * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });\\n     * // => 1\\n     *\\n     * // The `_.property` iteratee shorthand.\\n     * _.so`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 396432,
                  "endLine": 1,
                  "endColumn": 396436,
                  "snippet": {
                    "text": "ted into `array` in order to\\n     * maintain its sort order.\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 3.0.0\\n     * @category Array\\n     * @param {Array} array The sorted array to inspect.\\n     * @param {*} value The value to evaluate.\\n     * @returns {number} Returns the index at which `value` should be inserted\\n     *  into `array`.\\n     * @example\\n     *\\n     * _.sortedLastIndex([4, 5, 5, 5, 6], 5);\\n     * // => 4\\n     */\\n    function sortedLastIndex(array, value) {\\n      return baseSortedIndex(array, value, true);\\n    }\\n\\n    /**\\n     * This method is like `_.s",
                    "rendered": {
                      "text": "ted into `array` in order to\\n     * maintain its sort order.\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 3.0.0\\n     * @category Array\\n     * @param {Array} array The sorted array to inspect.\\n     * @param {*} value The value to evaluate.\\n     * @returns {number} Returns the index at which `value` should be inserted\\n     *  into `array`.\\n     * @example\\n     *\\n     * _.sortedLastIndex([4, 5, 5, 5, 6], 5);\\n     * // => 4\\n     */\\n    function sortedLastIndex(array, value) {\\n      return baseSortedIndex(array, value, true);\\n    }\\n\\n    /**\\n     * This method is like `_.s",
                      "markdown": "`ted into `array` in order to\\n     * maintain its sort order.\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 3.0.0\\n     * @category Array\\n     * @param {Array} array The sorted array to inspect.\\n     * @param {*} value The value to evaluate.\\n     * @returns {number} Returns the index at which `value` should be inserted\\n     *  into `array`.\\n     * @example\\n     *\\n     * _.sortedLastIndex([4, 5, 5, 5, 6], 5);\\n     * // => 4\\n     */\\n    function sortedLastIndex(array, value) {\\n      return baseSortedIndex(array, value, true);\\n    }\\n\\n    /**\\n     * This method is like `_.s`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 396099,
                  "endLine": 1,
                  "endColumn": 396103,
                  "snippet": {
                    "text": "   if (length) {\\n        var index = baseSortedIndex(array, value);\\n        if (index < length && eq(array[index], value)) {\\n          return index;\\n        }\\n      }\\n      return -1;\\n    }\\n\\n    /**\\n     * This method is like `_.sortedIndex` except that it returns the highest\\n     * index at which `value` should be inserted into `array` in order to\\n     * maintain its sort order.\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 3.0.0\\n     * @category Array\\n     * @param {Array} array The sorted array to inspect.\\n     * @param {*} value The value to evaluate.\\n     * @retur",
                    "rendered": {
                      "text": "   if (length) {\\n        var index = baseSortedIndex(array, value);\\n        if (index < length && eq(array[index], value)) {\\n          return index;\\n        }\\n      }\\n      return -1;\\n    }\\n\\n    /**\\n     * This method is like `_.sortedIndex` except that it returns the highest\\n     * index at which `value` should be inserted into `array` in order to\\n     * maintain its sort order.\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 3.0.0\\n     * @category Array\\n     * @param {Array} array The sorted array to inspect.\\n     * @param {*} value The value to evaluate.\\n     * @retur",
                      "markdown": "`   if (length) {\\n        var index = baseSortedIndex(array, value);\\n        if (index < length && eq(array[index], value)) {\\n          return index;\\n        }\\n      }\\n      return -1;\\n    }\\n\\n    /**\\n     * This method is like `_.sortedIndex` except that it returns the highest\\n     * index at which `value` should be inserted into `array` in order to\\n     * maintain its sort order.\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 3.0.0\\n     * @category Array\\n     * @param {Array} array The sorted array to inspect.\\n     * @param {*} value The value to evaluate.\\n     * @retur`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 394717,
                  "endLine": 1,
                  "endColumn": 394721,
                  "snippet": {
                    "text": "tic\\n     * @memberOf _\\n     * @since 4.0.0\\n     * @category Array\\n     * @param {Array} array The sorted array to inspect.\\n     * @param {*} value The value to evaluate.\\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\\n     * @returns {number} Returns the index at which `value` should be inserted\\n     *  into `array`.\\n     * @example\\n     *\\n     * var objects = [{ 'x': 4 }, { 'x': 5 }];\\n     *\\n     * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });\\n     * // => 0\\n     *\\n     * // The `_.property` iteratee shorthand.\\n     * _.sorted",
                    "rendered": {
                      "text": "tic\\n     * @memberOf _\\n     * @since 4.0.0\\n     * @category Array\\n     * @param {Array} array The sorted array to inspect.\\n     * @param {*} value The value to evaluate.\\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\\n     * @returns {number} Returns the index at which `value` should be inserted\\n     *  into `array`.\\n     * @example\\n     *\\n     * var objects = [{ 'x': 4 }, { 'x': 5 }];\\n     *\\n     * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });\\n     * // => 0\\n     *\\n     * // The `_.property` iteratee shorthand.\\n     * _.sorted",
                      "markdown": "`tic\\n     * @memberOf _\\n     * @since 4.0.0\\n     * @category Array\\n     * @param {Array} array The sorted array to inspect.\\n     * @param {*} value The value to evaluate.\\n     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.\\n     * @returns {number} Returns the index at which `value` should be inserted\\n     *  into `array`.\\n     * @example\\n     *\\n     * var objects = [{ 'x': 4 }, { 'x': 5 }];\\n     *\\n     * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });\\n     * // => 0\\n     *\\n     * // The `_.property` iteratee shorthand.\\n     * _.sorted`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 393911,
                  "endLine": 1,
                  "endColumn": 393915,
                  "snippet": {
                    "text": "be inserted into `array` in order to maintain its sort order.\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 0.1.0\\n     * @category Array\\n     * @param {Array} array The sorted array to inspect.\\n     * @param {*} value The value to evaluate.\\n     * @returns {number} Returns the index at which `value` should be inserted\\n     *  into `array`.\\n     * @example\\n     *\\n     * _.sortedIndex([30, 50], 40);\\n     * // => 1\\n     */\\n    function sortedIndex(array, value) {\\n      return baseSortedIndex(array, value);\\n    }\\n\\n    /**\\n     * This method is like `_.sortedIndex` except t",
                    "rendered": {
                      "text": "be inserted into `array` in order to maintain its sort order.\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 0.1.0\\n     * @category Array\\n     * @param {Array} array The sorted array to inspect.\\n     * @param {*} value The value to evaluate.\\n     * @returns {number} Returns the index at which `value` should be inserted\\n     *  into `array`.\\n     * @example\\n     *\\n     * _.sortedIndex([30, 50], 40);\\n     * // => 1\\n     */\\n    function sortedIndex(array, value) {\\n      return baseSortedIndex(array, value);\\n    }\\n\\n    /**\\n     * This method is like `_.sortedIndex` except t",
                      "markdown": "`be inserted into `array` in order to maintain its sort order.\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 0.1.0\\n     * @category Array\\n     * @param {Array} array The sorted array to inspect.\\n     * @param {*} value The value to evaluate.\\n     * @returns {number} Returns the index at which `value` should be inserted\\n     *  into `array`.\\n     * @example\\n     *\\n     * _.sortedIndex([30, 50], 40);\\n     * // => 1\\n     */\\n    function sortedIndex(array, value) {\\n      return baseSortedIndex(array, value);\\n    }\\n\\n    /**\\n     * This method is like `_.sortedIndex` except t`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 393578,
                  "endLine": 1,
                  "endColumn": 393582,
                  "snippet": {
                    "text": "tart = 0;\\n        end = length;\\n      }\\n      else {\\n        start = start == null ? 0 : toInteger(start);\\n        end = end === undefined ? length : toInteger(end);\\n      }\\n      return baseSlice(array, start, end);\\n    }\\n\\n    /**\\n     * Uses a binary search to determine the lowest index at which `value`\\n     * should be inserted into `array` in order to maintain its sort order.\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 0.1.0\\n     * @category Array\\n     * @param {Array} array The sorted array to inspect.\\n     * @param {*} value The value to evaluate.\\n     * @retur",
                    "rendered": {
                      "text": "tart = 0;\\n        end = length;\\n      }\\n      else {\\n        start = start == null ? 0 : toInteger(start);\\n        end = end === undefined ? length : toInteger(end);\\n      }\\n      return baseSlice(array, start, end);\\n    }\\n\\n    /**\\n     * Uses a binary search to determine the lowest index at which `value`\\n     * should be inserted into `array` in order to maintain its sort order.\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 0.1.0\\n     * @category Array\\n     * @param {Array} array The sorted array to inspect.\\n     * @param {*} value The value to evaluate.\\n     * @retur",
                      "markdown": "`tart = 0;\\n        end = length;\\n      }\\n      else {\\n        start = start == null ? 0 : toInteger(start);\\n        end = end === undefined ? length : toInteger(end);\\n      }\\n      return baseSlice(array, start, end);\\n    }\\n\\n    /**\\n     * Uses a binary search to determine the lowest index at which `value`\\n     * should be inserted into `array` in order to maintain its sort order.\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 0.1.0\\n     * @category Array\\n     * @param {Array} array The sorted array to inspect.\\n     * @param {*} value The value to evaluate.\\n     * @retur`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 384830,
                  "endLine": 1,
                  "endColumn": 384834,
                  "snippet": {
                    "text": "toInteger(fromIndex);\\n        index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);\\n      }\\n      return value === value\\n        ? strictLastIndexOf(array, value, index)\\n        : baseFindIndex(array, baseIsNaN, index, true);\\n    }\\n\\n    /**\\n     * Gets the element at index `n` of `array`. If `n` is negative, the nth\\n     * element from the end is returned.\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 4.11.0\\n     * @category Array\\n     * @param {Array} array The array to query.\\n     * @param {number} [n=0] The index of the element to return.\\n  ",
                    "rendered": {
                      "text": "toInteger(fromIndex);\\n        index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);\\n      }\\n      return value === value\\n        ? strictLastIndexOf(array, value, index)\\n        : baseFindIndex(array, baseIsNaN, index, true);\\n    }\\n\\n    /**\\n     * Gets the element at index `n` of `array`. If `n` is negative, the nth\\n     * element from the end is returned.\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 4.11.0\\n     * @category Array\\n     * @param {Array} array The array to query.\\n     * @param {number} [n=0] The index of the element to return.\\n  ",
                      "markdown": "`toInteger(fromIndex);\\n        index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);\\n      }\\n      return value === value\\n        ? strictLastIndexOf(array, value, index)\\n        : baseFindIndex(array, baseIsNaN, index, true);\\n    }\\n\\n    /**\\n     * Gets the element at index `n` of `array`. If `n` is negative, the nth\\n     * element from the end is returned.\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 4.11.0\\n     * @category Array\\n     * @param {Array} array The array to query.\\n     * @param {number} [n=0] The index of the element to return.\\n  `"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 377489,
                  "endLine": 1,
                  "endColumn": 377493,
                  "snippet": {
                    "text": "*} Returns the first element of `array`.\\n     * @example\\n     *\\n     * _.head([1, 2, 3]);\\n     * // => 1\\n     *\\n     * _.head([]);\\n     * // => undefined\\n     */\\n    function head(array) {\\n      return (array && array.length) ? array[0] : undefined;\\n    }\\n\\n    /**\\n     * Gets the index at which the first occurrence of `value` is found in `array`\\n     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\\n     * for equality comparisons. If `fromIndex` is negative, it's used as the\\n     * offset from the end of `array`.\\n     *\\n     * @static\\n   ",
                    "rendered": {
                      "text": "*} Returns the first element of `array`.\\n     * @example\\n     *\\n     * _.head([1, 2, 3]);\\n     * // => 1\\n     *\\n     * _.head([]);\\n     * // => undefined\\n     */\\n    function head(array) {\\n      return (array && array.length) ? array[0] : undefined;\\n    }\\n\\n    /**\\n     * Gets the index at which the first occurrence of `value` is found in `array`\\n     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\\n     * for equality comparisons. If `fromIndex` is negative, it's used as the\\n     * offset from the end of `array`.\\n     *\\n     * @static\\n   ",
                      "markdown": "`*} Returns the first element of `array`.\\n     * @example\\n     *\\n     * _.head([1, 2, 3]);\\n     * // => 1\\n     *\\n     * _.head([]);\\n     * // => undefined\\n     */\\n    function head(array) {\\n      return (array && array.length) ? array[0] : undefined;\\n    }\\n\\n    /**\\n     * Gets the index at which the first occurrence of `value` is found in `array`\\n     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\\n     * for equality comparisons. If `fromIndex` is negative, it's used as the\\n     * offset from the end of `array`.\\n     *\\n     * @static\\n   `"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 353503,
                  "endLine": 1,
                  "endColumn": 353507,
                  "snippet": {
                    "text": "dify.\\n     * @param {Function} string The `toString` result.\\n     * @returns {Function} Returns `func`.\\n     */\\n    var setToString = shortOut(baseSetToString);\\n\\n    /**\\n     * Sets the `toString` method of `wrapper` to mimic the source of `reference`\\n     * with wrapper details in a comment at the top of the source body.\\n     *\\n     * @private\\n     * @param {Function} wrapper The function to modify.\\n     * @param {Function} reference The reference function.\\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\\n     * @returns {Function} Returns `wrappe",
                    "rendered": {
                      "text": "dify.\\n     * @param {Function} string The `toString` result.\\n     * @returns {Function} Returns `func`.\\n     */\\n    var setToString = shortOut(baseSetToString);\\n\\n    /**\\n     * Sets the `toString` method of `wrapper` to mimic the source of `reference`\\n     * with wrapper details in a comment at the top of the source body.\\n     *\\n     * @private\\n     * @param {Function} wrapper The function to modify.\\n     * @param {Function} reference The reference function.\\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\\n     * @returns {Function} Returns `wrappe",
                      "markdown": "`dify.\\n     * @param {Function} string The `toString` result.\\n     * @returns {Function} Returns `func`.\\n     */\\n    var setToString = shortOut(baseSetToString);\\n\\n    /**\\n     * Sets the `toString` method of `wrapper` to mimic the source of `reference`\\n     * with wrapper details in a comment at the top of the source body.\\n     *\\n     * @private\\n     * @param {Function} wrapper The function to modify.\\n     * @param {Function} reference The reference function.\\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\\n     * @returns {Function} Returns `wrappe`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 351506,
                  "endLine": 1,
                  "endColumn": 351510,
                  "snippet": {
                    "text": "h = nativeMin(indexes.length, arrLength),\\n          oldArray = copyArray(array);\\n\\n      while (length--) {\\n        var index = indexes[length];\\n        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;\\n      }\\n      return array;\\n    }\\n\\n    /**\\n     * Gets the value at `key`, unless `key` is \\\"__proto__\\\" or \\\"constructor\\\".\\n     *\\n     * @private\\n     * @param {Object} object The object to query.\\n     * @param {string} key The key of the property to get.\\n     * @returns {*} Returns the property value.\\n     */\\n    function safeGet(object, key) {\\n      if (",
                    "rendered": {
                      "text": "h = nativeMin(indexes.length, arrLength),\\n          oldArray = copyArray(array);\\n\\n      while (length--) {\\n        var index = indexes[length];\\n        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;\\n      }\\n      return array;\\n    }\\n\\n    /**\\n     * Gets the value at `key`, unless `key` is \\\"__proto__\\\" or \\\"constructor\\\".\\n     *\\n     * @private\\n     * @param {Object} object The object to query.\\n     * @param {string} key The key of the property to get.\\n     * @returns {*} Returns the property value.\\n     */\\n    function safeGet(object, key) {\\n      if (",
                      "markdown": "`h = nativeMin(indexes.length, arrLength),\\n          oldArray = copyArray(array);\\n\\n      while (length--) {\\n        var index = indexes[length];\\n        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;\\n      }\\n      return array;\\n    }\\n\\n    /**\\n     * Gets the value at `key`, unless `key` is \\\"__proto__\\\" or \\\"constructor\\\".\\n     *\\n     * @private\\n     * @param {Object} object The object to query.\\n     * @param {string} key The key of the property to get.\\n     * @returns {*} Returns the property value.\\n     */\\n    function safeGet(object, key) {\\n      if (`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 350344,
                  "endLine": 1,
                  "endColumn": 350348,
                  "snippet": {
                    "text": "       index = -1;\\n        var otherArgs = Array(start + 1);\\n        while (++index < start) {\\n          otherArgs[index] = args[index];\\n        }\\n        otherArgs[start] = transform(array);\\n        return apply(func, this, otherArgs);\\n      };\\n    }\\n\\n    /**\\n     * Gets the parent value at `path` of `object`.\\n     *\\n     * @private\\n     * @param {Object} object The object to query.\\n     * @param {Array} path The path to get the parent value of.\\n     * @returns {*} Returns the parent value.\\n     */\\n    function parent(object, path) {\\n      return path.length < 2 ? object : base",
                    "rendered": {
                      "text": "       index = -1;\\n        var otherArgs = Array(start + 1);\\n        while (++index < start) {\\n          otherArgs[index] = args[index];\\n        }\\n        otherArgs[start] = transform(array);\\n        return apply(func, this, otherArgs);\\n      };\\n    }\\n\\n    /**\\n     * Gets the parent value at `path` of `object`.\\n     *\\n     * @private\\n     * @param {Object} object The object to query.\\n     * @param {Array} path The path to get the parent value of.\\n     * @returns {*} Returns the parent value.\\n     */\\n    function parent(object, path) {\\n      return path.length < 2 ? object : base",
                      "markdown": "`       index = -1;\\n        var otherArgs = Array(start + 1);\\n        while (++index < start) {\\n          otherArgs[index] = args[index];\\n        }\\n        otherArgs[start] = transform(array);\\n        return apply(func, this, otherArgs);\\n      };\\n    }\\n\\n    /**\\n     * Gets the parent value at `path` of `object`.\\n     *\\n     * @private\\n     * @param {Object} object The object to query.\\n     * @param {Array} path The path to get the parent value of.\\n     * @returns {*} Returns the parent value.\\n     */\\n    function parent(object, path) {\\n      return path.length < 2 ? object : base`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 338589,
                  "endLine": 1,
                  "endColumn": 338593,
                  "snippet": {
                    "text": "ngTag:\\n          return new Ctor(object);\\n\\n        case regexpTag:\\n          return cloneRegExp(object);\\n\\n        case setTag:\\n          return new Ctor;\\n\\n        case symbolTag:\\n          return cloneSymbol(object);\\n      }\\n    }\\n\\n    /**\\n     * Inserts wrapper `details` in a comment at the top of the `source` body.\\n     *\\n     * @private\\n     * @param {string} source The source to modify.\\n     * @returns {Array} details The details to insert.\\n     * @returns {string} Returns the modified source.\\n     */\\n    function insertWrapDetails(source, details) {\\n      var length = d",
                    "rendered": {
                      "text": "ngTag:\\n          return new Ctor(object);\\n\\n        case regexpTag:\\n          return cloneRegExp(object);\\n\\n        case setTag:\\n          return new Ctor;\\n\\n        case symbolTag:\\n          return cloneSymbol(object);\\n      }\\n    }\\n\\n    /**\\n     * Inserts wrapper `details` in a comment at the top of the `source` body.\\n     *\\n     * @private\\n     * @param {string} source The source to modify.\\n     * @returns {Array} details The details to insert.\\n     * @returns {string} Returns the modified source.\\n     */\\n    function insertWrapDetails(source, details) {\\n      var length = d",
                      "markdown": "`ngTag:\\n          return new Ctor(object);\\n\\n        case regexpTag:\\n          return cloneRegExp(object);\\n\\n        case setTag:\\n          return new Ctor;\\n\\n        case symbolTag:\\n          return cloneSymbol(object);\\n      }\\n    }\\n\\n    /**\\n     * Inserts wrapper `details` in a comment at the top of the `source` body.\\n     *\\n     * @private\\n     * @param {string} source The source to modify.\\n     * @returns {Array} details The details to insert.\\n     * @returns {string} Returns the modified source.\\n     */\\n    function insertWrapDetails(source, details) {\\n      var length = d`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 330491,
                  "endLine": 1,
                  "endColumn": 330495,
                  "snippet": {
                    "text": "t = keys(object),\\n          length = result.length;\\n\\n      while (length--) {\\n        var key = result[length],\\n            value = object[key];\\n\\n        result[length] = [key, value, isStrictComparable(value)];\\n      }\\n      return result;\\n    }\\n\\n    /**\\n     * Gets the native function at `key` of `object`.\\n     *\\n     * @private\\n     * @param {Object} object The object to query.\\n     * @param {string} key The key of the method to get.\\n     * @returns {*} Returns the function if it's native, else `undefined`.\\n     */\\n    function getNative(object, key) {\\n      var value = get",
                    "rendered": {
                      "text": "t = keys(object),\\n          length = result.length;\\n\\n      while (length--) {\\n        var key = result[length],\\n            value = object[key];\\n\\n        result[length] = [key, value, isStrictComparable(value)];\\n      }\\n      return result;\\n    }\\n\\n    /**\\n     * Gets the native function at `key` of `object`.\\n     *\\n     * @private\\n     * @param {Object} object The object to query.\\n     * @param {string} key The key of the method to get.\\n     * @returns {*} Returns the function if it's native, else `undefined`.\\n     */\\n    function getNative(object, key) {\\n      var value = get",
                      "markdown": "`t = keys(object),\\n          length = result.length;\\n\\n      while (length--) {\\n        var key = result[length],\\n            value = object[key];\\n\\n        result[length] = [key, value, isStrictComparable(value)];\\n      }\\n      return result;\\n    }\\n\\n    /**\\n     * Gets the native function at `key` of `object`.\\n     *\\n     * @private\\n     * @param {Object} object The object to query.\\n     * @param {string} key The key of the method to get.\\n     * @returns {*} Returns the function if it's native, else `undefined`.\\n     */\\n    function getNative(object, key) {\\n      var value = get`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 265253,
                  "endLine": 1,
                  "endColumn": 265257,
                  "snippet": {
                    "text": "   * @param {Array} array The sorted array to inspect.\\n     * @param {*} value The value to evaluate.\\n     * @param {Function} iteratee The iteratee invoked per element.\\n     * @param {boolean} [retHighest] Specify returning the highest qualified index.\\n     * @returns {number} Returns the index at which `value` should be inserted\\n     *  into `array`.\\n     */\\n    function baseSortedIndexBy(array, value, iteratee, retHighest) {\\n      var low = 0,\\n          high = array == null ? 0 : array.length;\\n      if (high === 0) {\\n        return 0;\\n      }\\n\\n      value = iteratee(value);\\n     ",
                    "rendered": {
                      "text": "   * @param {Array} array The sorted array to inspect.\\n     * @param {*} value The value to evaluate.\\n     * @param {Function} iteratee The iteratee invoked per element.\\n     * @param {boolean} [retHighest] Specify returning the highest qualified index.\\n     * @returns {number} Returns the index at which `value` should be inserted\\n     *  into `array`.\\n     */\\n    function baseSortedIndexBy(array, value, iteratee, retHighest) {\\n      var low = 0,\\n          high = array == null ? 0 : array.length;\\n      if (high === 0) {\\n        return 0;\\n      }\\n\\n      value = iteratee(value);\\n     ",
                      "markdown": "`   * @param {Array} array The sorted array to inspect.\\n     * @param {*} value The value to evaluate.\\n     * @param {Function} iteratee The iteratee invoked per element.\\n     * @param {boolean} [retHighest] Specify returning the highest qualified index.\\n     * @returns {number} Returns the index at which `value` should be inserted\\n     *  into `array`.\\n     */\\n    function baseSortedIndexBy(array, value, iteratee, retHighest) {\\n      var low = 0,\\n          high = array == null ? 0 : array.length;\\n      if (high === 0) {\\n        return 0;\\n      }\\n\\n      value = iteratee(value);\\n     `"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 263929,
                  "endLine": 1,
                  "endColumn": 263933,
                  "snippet": {
                    "text": "ay` in order to maintain its sort order.\\n     *\\n     * @private\\n     * @param {Array} array The sorted array to inspect.\\n     * @param {*} value The value to evaluate.\\n     * @param {boolean} [retHighest] Specify returning the highest qualified index.\\n     * @returns {number} Returns the index at which `value` should be inserted\\n     *  into `array`.\\n     */\\n    function baseSortedIndex(array, value, retHighest) {\\n      var low = 0,\\n          high = array == null ? low : array.length;\\n\\n      if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {\\n        w",
                    "rendered": {
                      "text": "ay` in order to maintain its sort order.\\n     *\\n     * @private\\n     * @param {Array} array The sorted array to inspect.\\n     * @param {*} value The value to evaluate.\\n     * @param {boolean} [retHighest] Specify returning the highest qualified index.\\n     * @returns {number} Returns the index at which `value` should be inserted\\n     *  into `array`.\\n     */\\n    function baseSortedIndex(array, value, retHighest) {\\n      var low = 0,\\n          high = array == null ? low : array.length;\\n\\n      if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {\\n        w",
                      "markdown": "`ay` in order to maintain its sort order.\\n     *\\n     * @private\\n     * @param {Array} array The sorted array to inspect.\\n     * @param {*} value The value to evaluate.\\n     * @param {boolean} [retHighest] Specify returning the highest qualified index.\\n     * @returns {number} Returns the index at which `value` should be inserted\\n     *  into `array`.\\n     */\\n    function baseSortedIndex(array, value, retHighest) {\\n      var low = 0,\\n          high = array == null ? low : array.length;\\n\\n      if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {\\n        w`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 263575,
                  "endLine": 1,
                  "endColumn": 263579,
                  "snippet": {
                    "text": "ndex, collection) {\\n        result = predicate(value, index, collection);\\n        return !result;\\n      });\\n      return !!result;\\n    }\\n\\n    /**\\n     * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which\\n     * performs a binary search of `array` to determine the index at which `value`\\n     * should be inserted into `array` in order to maintain its sort order.\\n     *\\n     * @private\\n     * @param {Array} array The sorted array to inspect.\\n     * @param {*} value The value to evaluate.\\n     * @param {boolean} [retHighest] Specify returning the highest qualified ",
                    "rendered": {
                      "text": "ndex, collection) {\\n        result = predicate(value, index, collection);\\n        return !result;\\n      });\\n      return !!result;\\n    }\\n\\n    /**\\n     * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which\\n     * performs a binary search of `array` to determine the index at which `value`\\n     * should be inserted into `array` in order to maintain its sort order.\\n     *\\n     * @private\\n     * @param {Array} array The sorted array to inspect.\\n     * @param {*} value The value to evaluate.\\n     * @param {boolean} [retHighest] Specify returning the highest qualified ",
                      "markdown": "`ndex, collection) {\\n        result = predicate(value, index, collection);\\n        return !result;\\n      });\\n      return !!result;\\n    }\\n\\n    /**\\n     * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which\\n     * performs a binary search of `array` to determine the index at which `value`\\n     * should be inserted into `array` in order to maintain its sort order.\\n     *\\n     * @private\\n     * @param {Array} array The sorted array to inspect.\\n     * @param {*} value The value to evaluate.\\n     * @param {boolean} [retHighest] Specify returning the highest qualified `"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 208472,
                  "endLine": 1,
                  "endColumn": 208476,
                  "snippet": {
                    "text": "nction assignValue(object, key, value) {\\n      var objValue = object[key];\\n      if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||\\n          (value === undefined && !(key in object))) {\\n        baseAssignValue(object, key, value);\\n      }\\n    }\\n\\n    /**\\n     * Gets the index at which the `key` is found in `array` of key-value pairs.\\n     *\\n     * @private\\n     * @param {Array} array The array to inspect.\\n     * @param {*} key The key to search for.\\n     * @returns {number} Returns the index of the matched value, else `-1`.\\n     */\\n    function assocIndexOf(array, ke",
                    "rendered": {
                      "text": "nction assignValue(object, key, value) {\\n      var objValue = object[key];\\n      if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||\\n          (value === undefined && !(key in object))) {\\n        baseAssignValue(object, key, value);\\n      }\\n    }\\n\\n    /**\\n     * Gets the index at which the `key` is found in `array` of key-value pairs.\\n     *\\n     * @private\\n     * @param {Array} array The array to inspect.\\n     * @param {*} key The key to search for.\\n     * @returns {number} Returns the index of the matched value, else `-1`.\\n     */\\n    function assocIndexOf(array, ke",
                      "markdown": "`nction assignValue(object, key, value) {\\n      var objValue = object[key];\\n      if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||\\n          (value === undefined && !(key in object))) {\\n        baseAssignValue(object, key, value);\\n      }\\n    }\\n\\n    /**\\n     * Gets the index at which the `key` is found in `array` of key-value pairs.\\n     *\\n     * @private\\n     * @param {Array} array The array to inspect.\\n     * @param {*} key The key to search for.\\n     * @returns {number} Returns the index of the matched value, else `-1`.\\n     */\\n    function assocIndexOf(array, ke`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 165293,
                  "endLine": 1,
                  "endColumn": 165297,
                  "snippet": {
                    "text": "ers for inclusion in compiled string literals.\\n   *\\n   * @private\\n   * @param {string} chr The matched character to escape.\\n   * @returns {string} Returns the escaped character.\\n   */\\n  function escapeStringChar(chr) {\\n    return '\\\\\\\\' + stringEscapes[chr];\\n  }\\n\\n  /**\\n   * Gets the value at `key` of `object`.\\n   *\\n   * @private\\n   * @param {Object} [object] The object to query.\\n   * @param {string} key The key of the property to get.\\n   * @returns {*} Returns the property value.\\n   */\\n  function getValue(object, key) {\\n    return object == null ? undefined : object[key];\\n  }\\n",
                    "rendered": {
                      "text": "ers for inclusion in compiled string literals.\\n   *\\n   * @private\\n   * @param {string} chr The matched character to escape.\\n   * @returns {string} Returns the escaped character.\\n   */\\n  function escapeStringChar(chr) {\\n    return '\\\\\\\\' + stringEscapes[chr];\\n  }\\n\\n  /**\\n   * Gets the value at `key` of `object`.\\n   *\\n   * @private\\n   * @param {Object} [object] The object to query.\\n   * @param {string} key The key of the property to get.\\n   * @returns {*} Returns the property value.\\n   */\\n  function getValue(object, key) {\\n    return object == null ? undefined : object[key];\\n  }\\n",
                      "markdown": "`ers for inclusion in compiled string literals.\\n   *\\n   * @private\\n   * @param {string} chr The matched character to escape.\\n   * @returns {string} Returns the escaped character.\\n   */\\n  function escapeStringChar(chr) {\\n    return '\\\\\\\\' + stringEscapes[chr];\\n  }\\n\\n  /**\\n   * Gets the value at `key` of `object`.\\n   *\\n   * @private\\n   * @param {Object} [object] The object to query.\\n   * @param {string} key The key of the property to get.\\n   * @returns {*} Returns the property value.\\n   */\\n  function getValue(object, key) {\\n    return object == null ? undefined : object[key];\\n  }\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 685539,
                  "endLine": 1,
                  "endColumn": 685547,
                  "snippet": {
                    "text": "ort lodash.\\n  var _ = runInContext();\\n\\n  // Some AMD build optimizers, like r.js, check for condition patterns like:\\n  if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {\\n    // Expose Lodash on the global object to prevent errors when Lodash is\\n    // loaded by a script tag in the presence of an AMD loader.\\n    // See http://requirejs.org/docs/errors.html#mismatch for more details.\\n    // Use `_.noConflict` to remove Lodash from the global object.\\n    root._ = _;\\n\\n    // Define as an anonymous module so, through path mapping, it can be\\n    // referenced as th",
                    "rendered": {
                      "text": "ort lodash.\\n  var _ = runInContext();\\n\\n  // Some AMD build optimizers, like r.js, check for condition patterns like:\\n  if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {\\n    // Expose Lodash on the global object to prevent errors when Lodash is\\n    // loaded by a script tag in the presence of an AMD loader.\\n    // See http://requirejs.org/docs/errors.html#mismatch for more details.\\n    // Use `_.noConflict` to remove Lodash from the global object.\\n    root._ = _;\\n\\n    // Define as an anonymous module so, through path mapping, it can be\\n    // referenced as th",
                      "markdown": "`ort lodash.\\n  var _ = runInContext();\\n\\n  // Some AMD build optimizers, like r.js, check for condition patterns like:\\n  if (typeof define == 'function' && typeof define.amd == 'object' && define.amd) {\\n    // Expose Lodash on the global object to prevent errors when Lodash is\\n    // loaded by a script tag in the presence of an AMD loader.\\n    // See http://requirejs.org/docs/errors.html#mismatch for more details.\\n    // Use `_.noConflict` to remove Lodash from the global object.\\n    root._ = _;\\n\\n    // Define as an anonymous module so, through path mapping, it can be\\n    // referenced as th`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 615798,
                  "endLine": 1,
                  "endColumn": 615803,
                  "snippet": {
                    "text": "dded in Adobe products needs `match` returned in\\n        // order to produce the correct `offset` value.\\n        return match;\\n      });\\n\\n      source += \\\"';\\\\n\\\";\\n\\n      // If `variable` is not specified wrap a with-statement around the generated\\n      // code to add the data object to the top of the scope chain.\\n      var variable = hasOwnProperty.call(options, 'variable') && options.variable;\\n      if (!variable) {\\n        source = 'with (obj) {\\\\n' + source + '\\\\n}\\\\n';\\n      }\\n      // Throw an error if a forbidden character was found in `variable`, to prevent\\n      // potential",
                    "rendered": {
                      "text": "dded in Adobe products needs `match` returned in\\n        // order to produce the correct `offset` value.\\n        return match;\\n      });\\n\\n      source += \\\"';\\\\n\\\";\\n\\n      // If `variable` is not specified wrap a with-statement around the generated\\n      // code to add the data object to the top of the scope chain.\\n      var variable = hasOwnProperty.call(options, 'variable') && options.variable;\\n      if (!variable) {\\n        source = 'with (obj) {\\\\n' + source + '\\\\n}\\\\n';\\n      }\\n      // Throw an error if a forbidden character was found in `variable`, to prevent\\n      // potential",
                      "markdown": "`dded in Adobe products needs `match` returned in\\n        // order to produce the correct `offset` value.\\n        return match;\\n      });\\n\\n      source += \\\"';\\\\n\\\";\\n\\n      // If `variable` is not specified wrap a with-statement around the generated\\n      // code to add the data object to the top of the scope chain.\\n      var variable = hasOwnProperty.call(options, 'variable') && options.variable;\\n      if (!variable) {\\n        source = 'with (obj) {\\\\n' + source + '\\\\n}\\\\n';\\n      }\\n      // Throw an error if a forbidden character was found in `variable`, to prevent\\n      // potential`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 611774,
                  "endLine": 1,
                  "endColumn": 611780,
                  "snippet": {
                    "text": "s': ['fred', 'barney'] });\\n     * // => '<li>fred</li><li>barney</li>'\\n     *\\n     * // Use the `sourceURL` option to specify a custom sourceURL for the template.\\n     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });\\n     * compiled(data);\\n     * // => Find the source of \\\"greeting.jst\\\" under the Sources tab or Resources panel of the web inspector.\\n     *\\n     * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.\\n     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });\\n     * compil",
                    "rendered": {
                      "text": "s': ['fred', 'barney'] });\\n     * // => '<li>fred</li><li>barney</li>'\\n     *\\n     * // Use the `sourceURL` option to specify a custom sourceURL for the template.\\n     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });\\n     * compiled(data);\\n     * // => Find the source of \\\"greeting.jst\\\" under the Sources tab or Resources panel of the web inspector.\\n     *\\n     * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.\\n     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });\\n     * compil",
                      "markdown": "`s': ['fred', 'barney'] });\\n     * // => '<li>fred</li><li>barney</li>'\\n     *\\n     * // Use the `sourceURL` option to specify a custom sourceURL for the template.\\n     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });\\n     * compiled(data);\\n     * // => Find the source of \\\"greeting.jst\\\" under the Sources tab or Resources panel of the web inspector.\\n     *\\n     * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.\\n     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });\\n     * compil`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 493576,
                  "endLine": 1,
                  "endColumn": 493585,
                  "snippet": {
                    "text": "` is\\n     * invoked on the trailing edge of the timeout only if the throttled function\\n     * is invoked more than once during the `wait` timeout.\\n     *\\n     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\\n     * until to the next tick, similar to `setTimeout` with a timeout of `0`.\\n     *\\n     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\\n     * for details over the differences between `_.throttle` and `_.debounce`.\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 0.1.0\\n     * @category Function\\n     *",
                    "rendered": {
                      "text": "` is\\n     * invoked on the trailing edge of the timeout only if the throttled function\\n     * is invoked more than once during the `wait` timeout.\\n     *\\n     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\\n     * until to the next tick, similar to `setTimeout` with a timeout of `0`.\\n     *\\n     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\\n     * for details over the differences between `_.throttle` and `_.debounce`.\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 0.1.0\\n     * @category Function\\n     *",
                      "markdown": "`` is\\n     * invoked on the trailing edge of the timeout only if the throttled function\\n     * is invoked more than once during the `wait` timeout.\\n     *\\n     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\\n     * until to the next tick, similar to `setTimeout` with a timeout of `0`.\\n     *\\n     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\\n     * for details over the differences between `_.throttle` and `_.debounce`.\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 0.1.0\\n     * @category Function\\n     *`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 493324,
                  "endLine": 1,
                  "endColumn": 493333,
                  "snippet": {
                    "text": "oked with the last arguments provided to the\\n     * throttled function. Subsequent calls to the throttled function return the\\n     * result of the last `func` invocation.\\n     *\\n     * **Note:** If `leading` and `trailing` options are `true`, `func` is\\n     * invoked on the trailing edge of the timeout only if the throttled function\\n     * is invoked more than once during the `wait` timeout.\\n     *\\n     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\\n     * until to the next tick, similar to `setTimeout` with a timeout of `0`.\\n     *\\n     * See [David Corbacho's ar",
                    "rendered": {
                      "text": "oked with the last arguments provided to the\\n     * throttled function. Subsequent calls to the throttled function return the\\n     * result of the last `func` invocation.\\n     *\\n     * **Note:** If `leading` and `trailing` options are `true`, `func` is\\n     * invoked on the trailing edge of the timeout only if the throttled function\\n     * is invoked more than once during the `wait` timeout.\\n     *\\n     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\\n     * until to the next tick, similar to `setTimeout` with a timeout of `0`.\\n     *\\n     * See [David Corbacho's ar",
                      "markdown": "`oked with the last arguments provided to the\\n     * throttled function. Subsequent calls to the throttled function return the\\n     * result of the last `func` invocation.\\n     *\\n     * **Note:** If `leading` and `trailing` options are `true`, `func` is\\n     * invoked on the trailing edge of the timeout only if the throttled function\\n     * is invoked more than once during the `wait` timeout.\\n     *\\n     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\\n     * until to the next tick, similar to `setTimeout` with a timeout of `0`.\\n     *\\n     * See [David Corbacho's ar`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 477667,
                  "endLine": 1,
                  "endColumn": 477673,
                  "snippet": {
                    "text": "          clearTimeout(timerId);\\n        }\\n        lastInvokeTime = 0;\\n        lastArgs = lastCallTime = lastThis = timerId = undefined;\\n      }\\n\\n      function flush() {\\n        return timerId === undefined ? result : trailingEdge(now());\\n      }\\n\\n      function debounced() {\\n        var time = now(),\\n            isInvoking = shouldInvoke(time);\\n\\n        lastArgs = arguments;\\n        lastThis = this;\\n        lastCallTime = time;\\n\\n        if (isInvoking) {\\n          if (timerId === undefined) {\\n            return leadingEdge(lastCallTime);\\n          }\\n          if (maxing) {\\n ",
                    "rendered": {
                      "text": "          clearTimeout(timerId);\\n        }\\n        lastInvokeTime = 0;\\n        lastArgs = lastCallTime = lastThis = timerId = undefined;\\n      }\\n\\n      function flush() {\\n        return timerId === undefined ? result : trailingEdge(now());\\n      }\\n\\n      function debounced() {\\n        var time = now(),\\n            isInvoking = shouldInvoke(time);\\n\\n        lastArgs = arguments;\\n        lastThis = this;\\n        lastCallTime = time;\\n\\n        if (isInvoking) {\\n          if (timerId === undefined) {\\n            return leadingEdge(lastCallTime);\\n          }\\n          if (maxing) {\\n ",
                      "markdown": "`          clearTimeout(timerId);\\n        }\\n        lastInvokeTime = 0;\\n        lastArgs = lastCallTime = lastThis = timerId = undefined;\\n      }\\n\\n      function flush() {\\n        return timerId === undefined ? result : trailingEdge(now());\\n      }\\n\\n      function debounced() {\\n        var time = now(),\\n            isInvoking = shouldInvoke(time);\\n\\n        lastArgs = arguments;\\n        lastThis = this;\\n        lastCallTime = time;\\n\\n        if (isInvoking) {\\n          if (timerId === undefined) {\\n            return leadingEdge(lastCallTime);\\n          }\\n          if (maxing) {\\n `"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 476753,
                  "endLine": 1,
                  "endColumn": 476759,
                  "snippet": {
                    "text": "re treating\\n        // it as the trailing edge, or we've hit the `maxWait` limit.\\n        return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||\\n          (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));\\n      }\\n\\n      function timerExpired() {\\n        var time = now();\\n        if (shouldInvoke(time)) {\\n          return trailingEdge(time);\\n        }\\n        // Restart the timer.\\n        timerId = setTimeout(timerExpired, remainingWait(time));\\n      }\\n\\n      function trailingEdge(time) {\\n        timerId = undefined;\\n\\n        // Only invoke if we ",
                    "rendered": {
                      "text": "re treating\\n        // it as the trailing edge, or we've hit the `maxWait` limit.\\n        return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||\\n          (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));\\n      }\\n\\n      function timerExpired() {\\n        var time = now();\\n        if (shouldInvoke(time)) {\\n          return trailingEdge(time);\\n        }\\n        // Restart the timer.\\n        timerId = setTimeout(timerExpired, remainingWait(time));\\n      }\\n\\n      function trailingEdge(time) {\\n        timerId = undefined;\\n\\n        // Only invoke if we ",
                      "markdown": "`re treating\\n        // it as the trailing edge, or we've hit the `maxWait` limit.\\n        return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||\\n          (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));\\n      }\\n\\n      function timerExpired() {\\n        var time = now();\\n        if (shouldInvoke(time)) {\\n          return trailingEdge(time);\\n        }\\n        // Restart the timer.\\n        timerId = setTimeout(timerExpired, remainingWait(time));\\n      }\\n\\n      function trailingEdge(time) {\\n        timerId = undefined;\\n\\n        // Only invoke if we `"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 476421,
                  "endLine": 1,
                  "endColumn": 476427,
                  "snippet": {
                    "text": "     : timeWaiting;\\n      }\\n\\n      function shouldInvoke(time) {\\n        var timeSinceLastCall = time - lastCallTime,\\n            timeSinceLastInvoke = time - lastInvokeTime;\\n\\n        // Either this is the first call, activity has stopped and we're at the\\n        // trailing edge, the system time has gone backwards and we're treating\\n        // it as the trailing edge, or we've hit the `maxWait` limit.\\n        return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||\\n          (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));\\n      }\\n\\n      function tim",
                    "rendered": {
                      "text": "     : timeWaiting;\\n      }\\n\\n      function shouldInvoke(time) {\\n        var timeSinceLastCall = time - lastCallTime,\\n            timeSinceLastInvoke = time - lastInvokeTime;\\n\\n        // Either this is the first call, activity has stopped and we're at the\\n        // trailing edge, the system time has gone backwards and we're treating\\n        // it as the trailing edge, or we've hit the `maxWait` limit.\\n        return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||\\n          (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));\\n      }\\n\\n      function tim",
                      "markdown": "`     : timeWaiting;\\n      }\\n\\n      function shouldInvoke(time) {\\n        var timeSinceLastCall = time - lastCallTime,\\n            timeSinceLastInvoke = time - lastInvokeTime;\\n\\n        // Either this is the first call, activity has stopped and we're at the\\n        // trailing edge, the system time has gone backwards and we're treating\\n        // it as the trailing edge, or we've hit the `maxWait` limit.\\n        return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||\\n          (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));\\n      }\\n\\n      function tim`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 476277,
                  "endLine": 1,
                  "endColumn": 476283,
                  "snippet": {
                    "text": "      timeWaiting = wait - timeSinceLastCall;\\n\\n        return maxing\\n          ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)\\n          : timeWaiting;\\n      }\\n\\n      function shouldInvoke(time) {\\n        var timeSinceLastCall = time - lastCallTime,\\n            timeSinceLastInvoke = time - lastInvokeTime;\\n\\n        // Either this is the first call, activity has stopped and we're at the\\n        // trailing edge, the system time has gone backwards and we're treating\\n        // it as the trailing edge, or we've hit the `maxWait` limit.\\n        return (lastCallTime === undefined || ",
                    "rendered": {
                      "text": "      timeWaiting = wait - timeSinceLastCall;\\n\\n        return maxing\\n          ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)\\n          : timeWaiting;\\n      }\\n\\n      function shouldInvoke(time) {\\n        var timeSinceLastCall = time - lastCallTime,\\n            timeSinceLastInvoke = time - lastInvokeTime;\\n\\n        // Either this is the first call, activity has stopped and we're at the\\n        // trailing edge, the system time has gone backwards and we're treating\\n        // it as the trailing edge, or we've hit the `maxWait` limit.\\n        return (lastCallTime === undefined || ",
                      "markdown": "`      timeWaiting = wait - timeSinceLastCall;\\n\\n        return maxing\\n          ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)\\n          : timeWaiting;\\n      }\\n\\n      function shouldInvoke(time) {\\n        var timeSinceLastCall = time - lastCallTime,\\n            timeSinceLastInvoke = time - lastInvokeTime;\\n\\n        // Either this is the first call, activity has stopped and we're at the\\n        // trailing edge, the system time has gone backwards and we're treating\\n        // it as the trailing edge, or we've hit the `maxWait` limit.\\n        return (lastCallTime === undefined || `"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 476221,
                  "endLine": 1,
                  "endColumn": 476227,
                  "snippet": {
                    "text": "    timeSinceLastInvoke = time - lastInvokeTime,\\n            timeWaiting = wait - timeSinceLastCall;\\n\\n        return maxing\\n          ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)\\n          : timeWaiting;\\n      }\\n\\n      function shouldInvoke(time) {\\n        var timeSinceLastCall = time - lastCallTime,\\n            timeSinceLastInvoke = time - lastInvokeTime;\\n\\n        // Either this is the first call, activity has stopped and we're at the\\n        // trailing edge, the system time has gone backwards and we're treating\\n        // it as the trailing edge, or we've hit the `maxWait",
                    "rendered": {
                      "text": "    timeSinceLastInvoke = time - lastInvokeTime,\\n            timeWaiting = wait - timeSinceLastCall;\\n\\n        return maxing\\n          ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)\\n          : timeWaiting;\\n      }\\n\\n      function shouldInvoke(time) {\\n        var timeSinceLastCall = time - lastCallTime,\\n            timeSinceLastInvoke = time - lastInvokeTime;\\n\\n        // Either this is the first call, activity has stopped and we're at the\\n        // trailing edge, the system time has gone backwards and we're treating\\n        // it as the trailing edge, or we've hit the `maxWait",
                      "markdown": "`    timeSinceLastInvoke = time - lastInvokeTime,\\n            timeWaiting = wait - timeSinceLastCall;\\n\\n        return maxing\\n          ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)\\n          : timeWaiting;\\n      }\\n\\n      function shouldInvoke(time) {\\n        var timeSinceLastCall = time - lastCallTime,\\n            timeSinceLastInvoke = time - lastInvokeTime;\\n\\n        // Either this is the first call, activity has stopped and we're at the\\n        // trailing edge, the system time has gone backwards and we're treating\\n        // it as the trailing edge, or we've hit the `maxWait`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 475946,
                  "endLine": 1,
                  "endColumn": 475952,
                  "snippet": {
                    "text": "or the trailing edge.\\n        timerId = setTimeout(timerExpired, wait);\\n        // Invoke the leading edge.\\n        return leading ? invokeFunc(time) : result;\\n      }\\n\\n      function remainingWait(time) {\\n        var timeSinceLastCall = time - lastCallTime,\\n            timeSinceLastInvoke = time - lastInvokeTime,\\n            timeWaiting = wait - timeSinceLastCall;\\n\\n        return maxing\\n          ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)\\n          : timeWaiting;\\n      }\\n\\n      function shouldInvoke(time) {\\n        var timeSinceLastCall = time - lastCallTime,\\n        ",
                    "rendered": {
                      "text": "or the trailing edge.\\n        timerId = setTimeout(timerExpired, wait);\\n        // Invoke the leading edge.\\n        return leading ? invokeFunc(time) : result;\\n      }\\n\\n      function remainingWait(time) {\\n        var timeSinceLastCall = time - lastCallTime,\\n            timeSinceLastInvoke = time - lastInvokeTime,\\n            timeWaiting = wait - timeSinceLastCall;\\n\\n        return maxing\\n          ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)\\n          : timeWaiting;\\n      }\\n\\n      function shouldInvoke(time) {\\n        var timeSinceLastCall = time - lastCallTime,\\n        ",
                      "markdown": "`or the trailing edge.\\n        timerId = setTimeout(timerExpired, wait);\\n        // Invoke the leading edge.\\n        return leading ? invokeFunc(time) : result;\\n      }\\n\\n      function remainingWait(time) {\\n        var timeSinceLastCall = time - lastCallTime,\\n            timeSinceLastInvoke = time - lastInvokeTime,\\n            timeWaiting = wait - timeSinceLastCall;\\n\\n        return maxing\\n          ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)\\n          : timeWaiting;\\n      }\\n\\n      function shouldInvoke(time) {\\n        var timeSinceLastCall = time - lastCallTime,\\n        `"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 475890,
                  "endLine": 1,
                  "endColumn": 475896,
                  "snippet": {
                    "text": "    lastInvokeTime = time;\\n        // Start the timer for the trailing edge.\\n        timerId = setTimeout(timerExpired, wait);\\n        // Invoke the leading edge.\\n        return leading ? invokeFunc(time) : result;\\n      }\\n\\n      function remainingWait(time) {\\n        var timeSinceLastCall = time - lastCallTime,\\n            timeSinceLastInvoke = time - lastInvokeTime,\\n            timeWaiting = wait - timeSinceLastCall;\\n\\n        return maxing\\n          ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)\\n          : timeWaiting;\\n      }\\n\\n      function shouldInvoke(time) {\\n      ",
                    "rendered": {
                      "text": "    lastInvokeTime = time;\\n        // Start the timer for the trailing edge.\\n        timerId = setTimeout(timerExpired, wait);\\n        // Invoke the leading edge.\\n        return leading ? invokeFunc(time) : result;\\n      }\\n\\n      function remainingWait(time) {\\n        var timeSinceLastCall = time - lastCallTime,\\n            timeSinceLastInvoke = time - lastInvokeTime,\\n            timeWaiting = wait - timeSinceLastCall;\\n\\n        return maxing\\n          ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)\\n          : timeWaiting;\\n      }\\n\\n      function shouldInvoke(time) {\\n      ",
                      "markdown": "`    lastInvokeTime = time;\\n        // Start the timer for the trailing edge.\\n        timerId = setTimeout(timerExpired, wait);\\n        // Invoke the leading edge.\\n        return leading ? invokeFunc(time) : result;\\n      }\\n\\n      function remainingWait(time) {\\n        var timeSinceLastCall = time - lastCallTime,\\n            timeSinceLastInvoke = time - lastInvokeTime,\\n            timeWaiting = wait - timeSinceLastCall;\\n\\n        return maxing\\n          ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)\\n          : timeWaiting;\\n      }\\n\\n      function shouldInvoke(time) {\\n      `"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 473555,
                  "endLine": 1,
                  "endColumn": 473561,
                  "snippet": {
                    "text": "n     * @param {number} [wait=0] The number of milliseconds to delay.\\n     * @param {Object} [options={}] The options object.\\n     * @param {boolean} [options.leading=false]\\n     *  Specify invoking on the leading edge of the timeout.\\n     * @param {number} [options.maxWait]\\n     *  The maximum time `func` is allowed to be delayed before it's invoked.\\n     * @param {boolean} [options.trailing=true]\\n     *  Specify invoking on the trailing edge of the timeout.\\n     * @returns {Function} Returns the new debounced function.\\n     * @example\\n     *\\n     * // Avoid costly calculations while the",
                    "rendered": {
                      "text": "n     * @param {number} [wait=0] The number of milliseconds to delay.\\n     * @param {Object} [options={}] The options object.\\n     * @param {boolean} [options.leading=false]\\n     *  Specify invoking on the leading edge of the timeout.\\n     * @param {number} [options.maxWait]\\n     *  The maximum time `func` is allowed to be delayed before it's invoked.\\n     * @param {boolean} [options.trailing=true]\\n     *  Specify invoking on the trailing edge of the timeout.\\n     * @returns {Function} Returns the new debounced function.\\n     * @example\\n     *\\n     * // Avoid costly calculations while the",
                      "markdown": "`n     * @param {number} [wait=0] The number of milliseconds to delay.\\n     * @param {Object} [options={}] The options object.\\n     * @param {boolean} [options.leading=false]\\n     *  Specify invoking on the leading edge of the timeout.\\n     * @param {number} [options.maxWait]\\n     *  The maximum time `func` is allowed to be delayed before it's invoked.\\n     * @param {boolean} [options.trailing=true]\\n     *  Specify invoking on the trailing edge of the timeout.\\n     * @returns {Function} Returns the new debounced function.\\n     * @example\\n     *\\n     * // Avoid costly calculations while the`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 472896,
                  "endLine": 1,
                  "endColumn": 472905,
                  "snippet": {
                    "text": "` is\\n     * invoked on the trailing edge of the timeout only if the debounced function\\n     * is invoked more than once during the `wait` timeout.\\n     *\\n     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\\n     * until to the next tick, similar to `setTimeout` with a timeout of `0`.\\n     *\\n     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\\n     * for details over the differences between `_.debounce` and `_.throttle`.\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 0.1.0\\n     * @category Function\\n     *",
                    "rendered": {
                      "text": "` is\\n     * invoked on the trailing edge of the timeout only if the debounced function\\n     * is invoked more than once during the `wait` timeout.\\n     *\\n     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\\n     * until to the next tick, similar to `setTimeout` with a timeout of `0`.\\n     *\\n     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\\n     * for details over the differences between `_.debounce` and `_.throttle`.\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 0.1.0\\n     * @category Function\\n     *",
                      "markdown": "`` is\\n     * invoked on the trailing edge of the timeout only if the debounced function\\n     * is invoked more than once during the `wait` timeout.\\n     *\\n     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\\n     * until to the next tick, similar to `setTimeout` with a timeout of `0`.\\n     *\\n     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\\n     * for details over the differences between `_.debounce` and `_.throttle`.\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 0.1.0\\n     * @category Function\\n     *`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 472644,
                  "endLine": 1,
                  "endColumn": 472653,
                  "snippet": {
                    "text": "   * with the last arguments provided to the debounced function. Subsequent\\n     * calls to the debounced function return the result of the last `func`\\n     * invocation.\\n     *\\n     * **Note:** If `leading` and `trailing` options are `true`, `func` is\\n     * invoked on the trailing edge of the timeout only if the debounced function\\n     * is invoked more than once during the `wait` timeout.\\n     *\\n     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\\n     * until to the next tick, similar to `setTimeout` with a timeout of `0`.\\n     *\\n     * See [David Corbacho's ar",
                    "rendered": {
                      "text": "   * with the last arguments provided to the debounced function. Subsequent\\n     * calls to the debounced function return the result of the last `func`\\n     * invocation.\\n     *\\n     * **Note:** If `leading` and `trailing` options are `true`, `func` is\\n     * invoked on the trailing edge of the timeout only if the debounced function\\n     * is invoked more than once during the `wait` timeout.\\n     *\\n     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\\n     * until to the next tick, similar to `setTimeout` with a timeout of `0`.\\n     *\\n     * See [David Corbacho's ar",
                      "markdown": "`   * with the last arguments provided to the debounced function. Subsequent\\n     * calls to the debounced function return the result of the last `func`\\n     * invocation.\\n     *\\n     * **Note:** If `leading` and `trailing` options are `true`, `func` is\\n     * invoked on the trailing edge of the timeout only if the debounced function\\n     * is invoked more than once during the `wait` timeout.\\n     *\\n     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\\n     * until to the next tick, similar to `setTimeout` with a timeout of `0`.\\n     *\\n     * See [David Corbacho's ar`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 471985,
                  "endLine": 1,
                  "endColumn": 471991,
                  "snippet": {
                    "text": "_RIGHT_FLAG, undefined, undefined, undefined, undefined, undefined, arity);\\n      result.placeholder = curryRight.placeholder;\\n      return result;\\n    }\\n\\n    /**\\n     * Creates a debounced function that delays invoking `func` until after `wait`\\n     * milliseconds have elapsed since the last time the debounced function was\\n     * invoked. The debounced function comes with a `cancel` method to cancel\\n     * delayed `func` invocations and a `flush` method to immediately invoke them.\\n     * Provide `options` to indicate whether `func` should be invoked on the\\n     * leading and/or trailing ",
                    "rendered": {
                      "text": "_RIGHT_FLAG, undefined, undefined, undefined, undefined, undefined, arity);\\n      result.placeholder = curryRight.placeholder;\\n      return result;\\n    }\\n\\n    /**\\n     * Creates a debounced function that delays invoking `func` until after `wait`\\n     * milliseconds have elapsed since the last time the debounced function was\\n     * invoked. The debounced function comes with a `cancel` method to cancel\\n     * delayed `func` invocations and a `flush` method to immediately invoke them.\\n     * Provide `options` to indicate whether `func` should be invoked on the\\n     * leading and/or trailing ",
                      "markdown": "`_RIGHT_FLAG, undefined, undefined, undefined, undefined, undefined, arity);\\n      result.placeholder = curryRight.placeholder;\\n      return result;\\n    }\\n\\n    /**\\n     * Creates a debounced function that delays invoking `func` until after `wait`\\n     * milliseconds have elapsed since the last time the debounced function was\\n     * invoked. The debounced function comes with a `cancel` method to cancel\\n     * delayed `func` invocations and a `flush` method to immediately invoke them.\\n     * Provide `options` to indicate whether `func` should be invoked on the\\n     * leading and/or trailing `"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 460330,
                  "endLine": 1,
                  "endColumn": 460336,
                  "snippet": {
                    "text": " are invoked with one argument: (value).\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 0.1.0\\n     * @category Collection\\n     * @param {Array|Object} collection The collection to iterate over.\\n     * @param {...(Function|Function[])} [iteratees=[_.identity]]\\n     *  The iteratees to sort by.\\n     * @returns {Array} Returns the new sorted array.\\n     * @example\\n     *\\n     * var users = [\\n     *   { 'user': 'fred',   'age': 48 },\\n     *   { 'user': 'barney', 'age': 36 },\\n     *   { 'user': 'fred',   'age': 30 },\\n     *   { 'user': 'barney', 'age': 34 }\\n     * ];\\n     *\\n   ",
                    "rendered": {
                      "text": " are invoked with one argument: (value).\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 0.1.0\\n     * @category Collection\\n     * @param {Array|Object} collection The collection to iterate over.\\n     * @param {...(Function|Function[])} [iteratees=[_.identity]]\\n     *  The iteratees to sort by.\\n     * @returns {Array} Returns the new sorted array.\\n     * @example\\n     *\\n     * var users = [\\n     *   { 'user': 'fred',   'age': 48 },\\n     *   { 'user': 'barney', 'age': 36 },\\n     *   { 'user': 'fred',   'age': 30 },\\n     *   { 'user': 'barney', 'age': 34 }\\n     * ];\\n     *\\n   ",
                      "markdown": "` are invoked with one argument: (value).\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 0.1.0\\n     * @category Collection\\n     * @param {Array|Object} collection The collection to iterate over.\\n     * @param {...(Function|Function[])} [iteratees=[_.identity]]\\n     *  The iteratees to sort by.\\n     * @returns {Array} Returns the new sorted array.\\n     * @example\\n     *\\n     * var users = [\\n     *   { 'user': 'fred',   'age': 48 },\\n     *   { 'user': 'barney', 'age': 36 },\\n     *   { 'user': 'fred',   'age': 30 },\\n     *   { 'user': 'barney', 'age': 34 }\\n     * ];\\n     *\\n   `"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 459978,
                  "endLine": 1,
                  "endColumn": 459984,
                  "snippet": {
                    "text": "     return func(collection, getIteratee(predicate, 3));\\n    }\\n\\n    /**\\n     * Creates an array of elements, sorted in ascending order by the results of\\n     * running each element in a collection thru each iteratee. This method\\n     * performs a stable sort, that is, it preserves the original sort order of\\n     * equal elements. The iteratees are invoked with one argument: (value).\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 0.1.0\\n     * @category Collection\\n     * @param {Array|Object} collection The collection to iterate over.\\n     * @param {...(Function|Function[])} [ite",
                    "rendered": {
                      "text": "     return func(collection, getIteratee(predicate, 3));\\n    }\\n\\n    /**\\n     * Creates an array of elements, sorted in ascending order by the results of\\n     * running each element in a collection thru each iteratee. This method\\n     * performs a stable sort, that is, it preserves the original sort order of\\n     * equal elements. The iteratees are invoked with one argument: (value).\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 0.1.0\\n     * @category Collection\\n     * @param {Array|Object} collection The collection to iterate over.\\n     * @param {...(Function|Function[])} [ite",
                      "markdown": "`     return func(collection, getIteratee(predicate, 3));\\n    }\\n\\n    /**\\n     * Creates an array of elements, sorted in ascending order by the results of\\n     * running each element in a collection thru each iteratee. This method\\n     * performs a stable sort, that is, it preserves the original sort order of\\n     * equal elements. The iteratees are invoked with one argument: (value).\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 0.1.0\\n     * @category Collection\\n     * @param {Array|Object} collection The collection to iterate over.\\n     * @param {...(Function|Function[])} [ite`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 448643,
                  "endLine": 1,
                  "endColumn": 448649,
                  "snippet": {
                    "text": "    * @returns {Array} Returns the new sorted array.\\n     * @example\\n     *\\n     * var users = [\\n     *   { 'user': 'fred',   'age': 48 },\\n     *   { 'user': 'barney', 'age': 34 },\\n     *   { 'user': 'fred',   'age': 40 },\\n     *   { 'user': 'barney', 'age': 36 }\\n     * ];\\n     *\\n     * // Sort by `user` in ascending order and by `age` in descending order.\\n     * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);\\n     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]\\n     */\\n    function orderBy(collection, iteratees, orders, guard) {\\n      if (collecti",
                    "rendered": {
                      "text": "    * @returns {Array} Returns the new sorted array.\\n     * @example\\n     *\\n     * var users = [\\n     *   { 'user': 'fred',   'age': 48 },\\n     *   { 'user': 'barney', 'age': 34 },\\n     *   { 'user': 'fred',   'age': 40 },\\n     *   { 'user': 'barney', 'age': 36 }\\n     * ];\\n     *\\n     * // Sort by `user` in ascending order and by `age` in descending order.\\n     * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);\\n     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]\\n     */\\n    function orderBy(collection, iteratees, orders, guard) {\\n      if (collecti",
                      "markdown": "`    * @returns {Array} Returns the new sorted array.\\n     * @example\\n     *\\n     * var users = [\\n     *   { 'user': 'fred',   'age': 48 },\\n     *   { 'user': 'barney', 'age': 34 },\\n     *   { 'user': 'fred',   'age': 40 },\\n     *   { 'user': 'barney', 'age': 36 }\\n     * ];\\n     *\\n     * // Sort by `user` in ascending order and by `age` in descending order.\\n     * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);\\n     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]\\n     */\\n    function orderBy(collection, iteratees, orders, guard) {\\n      if (collecti`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 448223,
                  "endLine": 1,
                  "endColumn": 448229,
                  "snippet": {
                    "text": "atic\\n     * @memberOf _\\n     * @since 4.0.0\\n     * @category Collection\\n     * @param {Array|Object} collection The collection to iterate over.\\n     * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]\\n     *  The iteratees to sort by.\\n     * @param {string[]} [orders] The sort orders of `iteratees`.\\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.\\n     * @returns {Array} Returns the new sorted array.\\n     * @example\\n     *\\n     * var users = [\\n     *   { 'user': 'fred',   'age': 48 },\\n     *   { 'user': 'barney', 'age': 34 },\\",
                    "rendered": {
                      "text": "atic\\n     * @memberOf _\\n     * @since 4.0.0\\n     * @category Collection\\n     * @param {Array|Object} collection The collection to iterate over.\\n     * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]\\n     *  The iteratees to sort by.\\n     * @param {string[]} [orders] The sort orders of `iteratees`.\\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.\\n     * @returns {Array} Returns the new sorted array.\\n     * @example\\n     *\\n     * var users = [\\n     *   { 'user': 'fred',   'age': 48 },\\n     *   { 'user': 'barney', 'age': 34 },\\",
                      "markdown": "`atic\\n     * @memberOf _\\n     * @since 4.0.0\\n     * @category Collection\\n     * @param {Array|Object} collection The collection to iterate over.\\n     * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]\\n     *  The iteratees to sort by.\\n     * @param {string[]} [orders] The sort orders of `iteratees`.\\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.\\n     * @returns {Array} Returns the new sorted array.\\n     * @example\\n     *\\n     * var users = [\\n     *   { 'user': 'fred',   'age': 48 },\\n     *   { 'user': 'barney', 'age': 34 },\\`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 448175,
                  "endLine": 1,
                  "endColumn": 448181,
                  "snippet": {
                    "text": "der of corresponding values.\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 4.0.0\\n     * @category Collection\\n     * @param {Array|Object} collection The collection to iterate over.\\n     * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]\\n     *  The iteratees to sort by.\\n     * @param {string[]} [orders] The sort orders of `iteratees`.\\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.\\n     * @returns {Array} Returns the new sorted array.\\n     * @example\\n     *\\n     * var users = [\\n     *   { 'user': 'fred',   'age': 4",
                    "rendered": {
                      "text": "der of corresponding values.\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 4.0.0\\n     * @category Collection\\n     * @param {Array|Object} collection The collection to iterate over.\\n     * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]\\n     *  The iteratees to sort by.\\n     * @param {string[]} [orders] The sort orders of `iteratees`.\\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.\\n     * @returns {Array} Returns the new sorted array.\\n     * @example\\n     *\\n     * var users = [\\n     *   { 'user': 'fred',   'age': 4",
                      "markdown": "`der of corresponding values.\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 4.0.0\\n     * @category Collection\\n     * @param {Array|Object} collection The collection to iterate over.\\n     * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]\\n     *  The iteratees to sort by.\\n     * @param {string[]} [orders] The sort orders of `iteratees`.\\n     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.\\n     * @returns {Array} Returns the new sorted array.\\n     * @example\\n     *\\n     * var users = [\\n     *   { 'user': 'fred',   'age': 4`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 447867,
                  "endLine": 1,
                  "endColumn": 447873,
                  "snippet": {
                    "text": "\\n    /**\\n     * This method is like `_.sortBy` except that it allows specifying the sort\\n     * orders of the iteratees to sort by. If `orders` is unspecified, all values\\n     * are sorted in ascending order. Otherwise, specify an order of \\\"desc\\\" for\\n     * descending or \\\"asc\\\" for ascending sort order of corresponding values.\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 4.0.0\\n     * @category Collection\\n     * @param {Array|Object} collection The collection to iterate over.\\n     * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]\\n     *  The iteratees ",
                    "rendered": {
                      "text": "\\n    /**\\n     * This method is like `_.sortBy` except that it allows specifying the sort\\n     * orders of the iteratees to sort by. If `orders` is unspecified, all values\\n     * are sorted in ascending order. Otherwise, specify an order of \\\"desc\\\" for\\n     * descending or \\\"asc\\\" for ascending sort order of corresponding values.\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 4.0.0\\n     * @category Collection\\n     * @param {Array|Object} collection The collection to iterate over.\\n     * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]\\n     *  The iteratees ",
                      "markdown": "`\\n    /**\\n     * This method is like `_.sortBy` except that it allows specifying the sort\\n     * orders of the iteratees to sort by. If `orders` is unspecified, all values\\n     * are sorted in ascending order. Otherwise, specify an order of \\\"desc\\\" for\\n     * descending or \\\"asc\\\" for ascending sort order of corresponding values.\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 4.0.0\\n     * @category Collection\\n     * @param {Array|Object} collection The collection to iterate over.\\n     * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]\\n     *  The iteratees `"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 447692,
                  "endLine": 1,
                  "endColumn": 447698,
                  "snippet": {
                    "text": "    */\\n    function map(collection, iteratee) {\\n      var func = isArray(collection) ? arrayMap : baseMap;\\n      return func(collection, getIteratee(iteratee, 3));\\n    }\\n\\n    /**\\n     * This method is like `_.sortBy` except that it allows specifying the sort\\n     * orders of the iteratees to sort by. If `orders` is unspecified, all values\\n     * are sorted in ascending order. Otherwise, specify an order of \\\"desc\\\" for\\n     * descending or \\\"asc\\\" for ascending sort order of corresponding values.\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 4.0.0\\n     * @category Collection\\",
                    "rendered": {
                      "text": "    */\\n    function map(collection, iteratee) {\\n      var func = isArray(collection) ? arrayMap : baseMap;\\n      return func(collection, getIteratee(iteratee, 3));\\n    }\\n\\n    /**\\n     * This method is like `_.sortBy` except that it allows specifying the sort\\n     * orders of the iteratees to sort by. If `orders` is unspecified, all values\\n     * are sorted in ascending order. Otherwise, specify an order of \\\"desc\\\" for\\n     * descending or \\\"asc\\\" for ascending sort order of corresponding values.\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 4.0.0\\n     * @category Collection\\",
                      "markdown": "`    */\\n    function map(collection, iteratee) {\\n      var func = isArray(collection) ? arrayMap : baseMap;\\n      return func(collection, getIteratee(iteratee, 3));\\n    }\\n\\n    /**\\n     * This method is like `_.sortBy` except that it allows specifying the sort\\n     * orders of the iteratees to sort by. If `orders` is unspecified, all values\\n     * are sorted in ascending order. Otherwise, specify an order of \\\"desc\\\" for\\n     * descending or \\\"asc\\\" for ascending sort order of corresponding values.\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 4.0.0\\n     * @category Collection\\`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 435077,
                  "endLine": 1,
                  "endColumn": 435083,
                  "snippet": {
                    "text": "> object for 'pebbles'\\n     *\\n     * // The `_.matchesProperty` iteratee shorthand.\\n     * _.find(users, ['active', false]);\\n     * // => object for 'fred'\\n     *\\n     * // The `_.property` iteratee shorthand.\\n     * _.find(users, 'active');\\n     * // => object for 'barney'\\n     */\\n    var find = createFind(findIndex);\\n\\n    /**\\n     * This method is like `_.find` except that it iterates over elements of\\n     * `collection` from right to left.\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 2.0.0\\n     * @category Collection\\n     * @param {Array|Object} collection The collec",
                    "rendered": {
                      "text": "> object for 'pebbles'\\n     *\\n     * // The `_.matchesProperty` iteratee shorthand.\\n     * _.find(users, ['active', false]);\\n     * // => object for 'fred'\\n     *\\n     * // The `_.property` iteratee shorthand.\\n     * _.find(users, 'active');\\n     * // => object for 'barney'\\n     */\\n    var find = createFind(findIndex);\\n\\n    /**\\n     * This method is like `_.find` except that it iterates over elements of\\n     * `collection` from right to left.\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 2.0.0\\n     * @category Collection\\n     * @param {Array|Object} collection The collec",
                      "markdown": "`> object for 'pebbles'\\n     *\\n     * // The `_.matchesProperty` iteratee shorthand.\\n     * _.find(users, ['active', false]);\\n     * // => object for 'fred'\\n     *\\n     * // The `_.property` iteratee shorthand.\\n     * _.find(users, 'active');\\n     * // => object for 'barney'\\n     */\\n    var find = createFind(findIndex);\\n\\n    /**\\n     * This method is like `_.find` except that it iterates over elements of\\n     * `collection` from right to left.\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 2.0.0\\n     * @category Collection\\n     * @param {Array|Object} collection The collec`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 396875,
                  "endLine": 1,
                  "endColumn": 396881,
                  "snippet": {
                    "text": "=> 4\\n     */\\n    function sortedLastIndex(array, value) {\\n      return baseSortedIndex(array, value, true);\\n    }\\n\\n    /**\\n     * This method is like `_.sortedLastIndex` except that it accepts `iteratee`\\n     * which is invoked for `value` and each element of `array` to compute their\\n     * sort ranking. The iteratee is invoked with one argument: (value).\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 4.0.0\\n     * @category Array\\n     * @param {Array} array The sorted array to inspect.\\n     * @param {*} value The value to evaluate.\\n     * @param {Function} [iteratee=_.identi",
                    "rendered": {
                      "text": "=> 4\\n     */\\n    function sortedLastIndex(array, value) {\\n      return baseSortedIndex(array, value, true);\\n    }\\n\\n    /**\\n     * This method is like `_.sortedLastIndex` except that it accepts `iteratee`\\n     * which is invoked for `value` and each element of `array` to compute their\\n     * sort ranking. The iteratee is invoked with one argument: (value).\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 4.0.0\\n     * @category Array\\n     * @param {Array} array The sorted array to inspect.\\n     * @param {*} value The value to evaluate.\\n     * @param {Function} [iteratee=_.identi",
                      "markdown": "`=> 4\\n     */\\n    function sortedLastIndex(array, value) {\\n      return baseSortedIndex(array, value, true);\\n    }\\n\\n    /**\\n     * This method is like `_.sortedLastIndex` except that it accepts `iteratee`\\n     * which is invoked for `value` and each element of `array` to compute their\\n     * sort ranking. The iteratee is invoked with one argument: (value).\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 4.0.0\\n     * @category Array\\n     * @param {Array} array The sorted array to inspect.\\n     * @param {*} value The value to evaluate.\\n     * @param {Function} [iteratee=_.identi`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 396181,
                  "endLine": 1,
                  "endColumn": 396187,
                  "snippet": {
                    "text": "index < length && eq(array[index], value)) {\\n          return index;\\n        }\\n      }\\n      return -1;\\n    }\\n\\n    /**\\n     * This method is like `_.sortedIndex` except that it returns the highest\\n     * index at which `value` should be inserted into `array` in order to\\n     * maintain its sort order.\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 3.0.0\\n     * @category Array\\n     * @param {Array} array The sorted array to inspect.\\n     * @param {*} value The value to evaluate.\\n     * @returns {number} Returns the index at which `value` should be inserted\\n     *  into `arr",
                    "rendered": {
                      "text": "index < length && eq(array[index], value)) {\\n          return index;\\n        }\\n      }\\n      return -1;\\n    }\\n\\n    /**\\n     * This method is like `_.sortedIndex` except that it returns the highest\\n     * index at which `value` should be inserted into `array` in order to\\n     * maintain its sort order.\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 3.0.0\\n     * @category Array\\n     * @param {Array} array The sorted array to inspect.\\n     * @param {*} value The value to evaluate.\\n     * @returns {number} Returns the index at which `value` should be inserted\\n     *  into `arr",
                      "markdown": "`index < length && eq(array[index], value)) {\\n          return index;\\n        }\\n      }\\n      return -1;\\n    }\\n\\n    /**\\n     * This method is like `_.sortedIndex` except that it returns the highest\\n     * index at which `value` should be inserted into `array` in order to\\n     * maintain its sort order.\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 3.0.0\\n     * @category Array\\n     * @param {Array} array The sorted array to inspect.\\n     * @param {*} value The value to evaluate.\\n     * @returns {number} Returns the index at which `value` should be inserted\\n     *  into `arr`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 394330,
                  "endLine": 1,
                  "endColumn": 394336,
                  "snippet": {
                    "text": ");\\n     * // => 1\\n     */\\n    function sortedIndex(array, value) {\\n      return baseSortedIndex(array, value);\\n    }\\n\\n    /**\\n     * This method is like `_.sortedIndex` except that it accepts `iteratee`\\n     * which is invoked for `value` and each element of `array` to compute their\\n     * sort ranking. The iteratee is invoked with one argument: (value).\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 4.0.0\\n     * @category Array\\n     * @param {Array} array The sorted array to inspect.\\n     * @param {*} value The value to evaluate.\\n     * @param {Function} [iteratee=_.identi",
                    "rendered": {
                      "text": ");\\n     * // => 1\\n     */\\n    function sortedIndex(array, value) {\\n      return baseSortedIndex(array, value);\\n    }\\n\\n    /**\\n     * This method is like `_.sortedIndex` except that it accepts `iteratee`\\n     * which is invoked for `value` and each element of `array` to compute their\\n     * sort ranking. The iteratee is invoked with one argument: (value).\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 4.0.0\\n     * @category Array\\n     * @param {Array} array The sorted array to inspect.\\n     * @param {*} value The value to evaluate.\\n     * @param {Function} [iteratee=_.identi",
                      "markdown": "`);\\n     * // => 1\\n     */\\n    function sortedIndex(array, value) {\\n      return baseSortedIndex(array, value);\\n    }\\n\\n    /**\\n     * This method is like `_.sortedIndex` except that it accepts `iteratee`\\n     * which is invoked for `value` and each element of `array` to compute their\\n     * sort ranking. The iteratee is invoked with one argument: (value).\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 4.0.0\\n     * @category Array\\n     * @param {Array} array The sorted array to inspect.\\n     * @param {*} value The value to evaluate.\\n     * @param {Function} [iteratee=_.identi`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 393660,
                  "endLine": 1,
                  "endColumn": 393666,
                  "snippet": {
                    "text": "null ? 0 : toInteger(start);\\n        end = end === undefined ? length : toInteger(end);\\n      }\\n      return baseSlice(array, start, end);\\n    }\\n\\n    /**\\n     * Uses a binary search to determine the lowest index at which `value`\\n     * should be inserted into `array` in order to maintain its sort order.\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 0.1.0\\n     * @category Array\\n     * @param {Array} array The sorted array to inspect.\\n     * @param {*} value The value to evaluate.\\n     * @returns {number} Returns the index at which `value` should be inserted\\n     *  into `arr",
                    "rendered": {
                      "text": "null ? 0 : toInteger(start);\\n        end = end === undefined ? length : toInteger(end);\\n      }\\n      return baseSlice(array, start, end);\\n    }\\n\\n    /**\\n     * Uses a binary search to determine the lowest index at which `value`\\n     * should be inserted into `array` in order to maintain its sort order.\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 0.1.0\\n     * @category Array\\n     * @param {Array} array The sorted array to inspect.\\n     * @param {*} value The value to evaluate.\\n     * @returns {number} Returns the index at which `value` should be inserted\\n     *  into `arr",
                      "markdown": "`null ? 0 : toInteger(start);\\n        end = end === undefined ? length : toInteger(end);\\n      }\\n      return baseSlice(array, start, end);\\n    }\\n\\n    /**\\n     * Uses a binary search to determine the lowest index at which `value`\\n     * should be inserted into `array` in order to maintain its sort order.\\n     *\\n     * @static\\n     * @memberOf _\\n     * @since 0.1.0\\n     * @category Array\\n     * @param {Array} array The sorted array to inspect.\\n     * @param {*} value The value to evaluate.\\n     * @returns {number} Returns the index at which `value` should be inserted\\n     *  into `arr`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 353510,
                  "endLine": 1,
                  "endColumn": 353515,
                  "snippet": {
                    "text": "     * @param {Function} string The `toString` result.\\n     * @returns {Function} Returns `func`.\\n     */\\n    var setToString = shortOut(baseSetToString);\\n\\n    /**\\n     * Sets the `toString` method of `wrapper` to mimic the source of `reference`\\n     * with wrapper details in a comment at the top of the source body.\\n     *\\n     * @private\\n     * @param {Function} wrapper The function to modify.\\n     * @param {Function} reference The reference function.\\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\\n     * @returns {Function} Returns `wrapper`.\\n   ",
                    "rendered": {
                      "text": "     * @param {Function} string The `toString` result.\\n     * @returns {Function} Returns `func`.\\n     */\\n    var setToString = shortOut(baseSetToString);\\n\\n    /**\\n     * Sets the `toString` method of `wrapper` to mimic the source of `reference`\\n     * with wrapper details in a comment at the top of the source body.\\n     *\\n     * @private\\n     * @param {Function} wrapper The function to modify.\\n     * @param {Function} reference The reference function.\\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\\n     * @returns {Function} Returns `wrapper`.\\n   ",
                      "markdown": "`     * @param {Function} string The `toString` result.\\n     * @returns {Function} Returns `func`.\\n     */\\n    var setToString = shortOut(baseSetToString);\\n\\n    /**\\n     * Sets the `toString` method of `wrapper` to mimic the source of `reference`\\n     * with wrapper details in a comment at the top of the source body.\\n     *\\n     * @private\\n     * @param {Function} wrapper The function to modify.\\n     * @param {Function} reference The reference function.\\n     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.\\n     * @returns {Function} Returns `wrapper`.\\n   `"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 352914,
                  "endLine": 1,
                  "endColumn": 352923,
                  "snippet": {
                    "text": "*\\n     * A simple wrapper around the global [`setTimeout`](https://mdn.io/setTimeout).\\n     *\\n     * @private\\n     * @param {Function} func The function to delay.\\n     * @param {number} wait The number of milliseconds to delay invocation.\\n     * @returns {number|Object} Returns the timer id or timeout object.\\n     */\\n    var setTimeout = ctxSetTimeout || function(func, wait) {\\n      return root.setTimeout(func, wait);\\n    };\\n\\n    /**\\n     * Sets the `toString` method of `func` to return `string`.\\n     *\\n     * @private\\n     * @param {Function} func The function to modify.\\n     * @param",
                    "rendered": {
                      "text": "*\\n     * A simple wrapper around the global [`setTimeout`](https://mdn.io/setTimeout).\\n     *\\n     * @private\\n     * @param {Function} func The function to delay.\\n     * @param {number} wait The number of milliseconds to delay invocation.\\n     * @returns {number|Object} Returns the timer id or timeout object.\\n     */\\n    var setTimeout = ctxSetTimeout || function(func, wait) {\\n      return root.setTimeout(func, wait);\\n    };\\n\\n    /**\\n     * Sets the `toString` method of `func` to return `string`.\\n     *\\n     * @private\\n     * @param {Function} func The function to modify.\\n     * @param",
                      "markdown": "`*\\n     * A simple wrapper around the global [`setTimeout`](https://mdn.io/setTimeout).\\n     *\\n     * @private\\n     * @param {Function} func The function to delay.\\n     * @param {number} wait The number of milliseconds to delay invocation.\\n     * @returns {number|Object} Returns the timer id or timeout object.\\n     */\\n    var setTimeout = ctxSetTimeout || function(func, wait) {\\n      return root.setTimeout(func, wait);\\n    };\\n\\n    /**\\n     * Sets the `toString` method of `func` to return `string`.\\n     *\\n     * @private\\n     * @param {Function} func The function to modify.\\n     * @param`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 338596,
                  "endLine": 1,
                  "endColumn": 338601,
                  "snippet": {
                    "text": "n          return new Ctor(object);\\n\\n        case regexpTag:\\n          return cloneRegExp(object);\\n\\n        case setTag:\\n          return new Ctor;\\n\\n        case symbolTag:\\n          return cloneSymbol(object);\\n      }\\n    }\\n\\n    /**\\n     * Inserts wrapper `details` in a comment at the top of the `source` body.\\n     *\\n     * @private\\n     * @param {string} source The source to modify.\\n     * @returns {Array} details The details to insert.\\n     * @returns {string} Returns the modified source.\\n     */\\n    function insertWrapDetails(source, details) {\\n      var length = details.l",
                    "rendered": {
                      "text": "n          return new Ctor(object);\\n\\n        case regexpTag:\\n          return cloneRegExp(object);\\n\\n        case setTag:\\n          return new Ctor;\\n\\n        case symbolTag:\\n          return cloneSymbol(object);\\n      }\\n    }\\n\\n    /**\\n     * Inserts wrapper `details` in a comment at the top of the `source` body.\\n     *\\n     * @private\\n     * @param {string} source The source to modify.\\n     * @returns {Array} details The details to insert.\\n     * @returns {string} Returns the modified source.\\n     */\\n    function insertWrapDetails(source, details) {\\n      var length = details.l",
                      "markdown": "`n          return new Ctor(object);\\n\\n        case regexpTag:\\n          return cloneRegExp(object);\\n\\n        case setTag:\\n          return new Ctor;\\n\\n        case symbolTag:\\n          return cloneSymbol(object);\\n      }\\n    }\\n\\n    /**\\n     * Inserts wrapper `details` in a comment at the top of the `source` body.\\n     *\\n     * @private\\n     * @param {string} source The source to modify.\\n     * @returns {Array} details The details to insert.\\n     * @returns {string} Returns the modified source.\\n     */\\n    function insertWrapDetails(source, details) {\\n      var length = details.l`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 296895,
                  "endLine": 1,
                  "endColumn": 296901,
                  "snippet": {
                    "text": " func;\\n        return apply(fn, this, args);\\n      }\\n      return wrapper;\\n    }\\n\\n    /**\\n     * Creates a `_.find` or `_.findLast` function.\\n     *\\n     * @private\\n     * @param {Function} findIndexFunc The function to find the collection index.\\n     * @returns {Function} Returns the new find function.\\n     */\\n    function createFind(findIndexFunc) {\\n      return function(collection, predicate, fromIndex) {\\n        var iterable = Object(collection);\\n        if (!isArrayLike(collection)) {\\n          var iteratee = getIteratee(predicate, 3);\\n          collection = keys(collection);\\",
                    "rendered": {
                      "text": " func;\\n        return apply(fn, this, args);\\n      }\\n      return wrapper;\\n    }\\n\\n    /**\\n     * Creates a `_.find` or `_.findLast` function.\\n     *\\n     * @private\\n     * @param {Function} findIndexFunc The function to find the collection index.\\n     * @returns {Function} Returns the new find function.\\n     */\\n    function createFind(findIndexFunc) {\\n      return function(collection, predicate, fromIndex) {\\n        var iterable = Object(collection);\\n        if (!isArrayLike(collection)) {\\n          var iteratee = getIteratee(predicate, 3);\\n          collection = keys(collection);\\",
                      "markdown": "` func;\\n        return apply(fn, this, args);\\n      }\\n      return wrapper;\\n    }\\n\\n    /**\\n     * Creates a `_.find` or `_.findLast` function.\\n     *\\n     * @private\\n     * @param {Function} findIndexFunc The function to find the collection index.\\n     * @returns {Function} Returns the new find function.\\n     */\\n    function createFind(findIndexFunc) {\\n      return function(collection, predicate, fromIndex) {\\n        var iterable = Object(collection);\\n        if (!isArrayLike(collection)) {\\n          var iteratee = getIteratee(predicate, 3);\\n          collection = keys(collection);\\`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 296824,
                  "endLine": 1,
                  "endColumn": 296830,
                  "snippet": {
                    "text": "   var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;\\n        return apply(fn, this, args);\\n      }\\n      return wrapper;\\n    }\\n\\n    /**\\n     * Creates a `_.find` or `_.findLast` function.\\n     *\\n     * @private\\n     * @param {Function} findIndexFunc The function to find the collection index.\\n     * @returns {Function} Returns the new find function.\\n     */\\n    function createFind(findIndexFunc) {\\n      return function(collection, predicate, fromIndex) {\\n        var iterable = Object(collection);\\n        if (!isArrayLike(collection)) {\\n          var iteratee ",
                    "rendered": {
                      "text": "   var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;\\n        return apply(fn, this, args);\\n      }\\n      return wrapper;\\n    }\\n\\n    /**\\n     * Creates a `_.find` or `_.findLast` function.\\n     *\\n     * @private\\n     * @param {Function} findIndexFunc The function to find the collection index.\\n     * @returns {Function} Returns the new find function.\\n     */\\n    function createFind(findIndexFunc) {\\n      return function(collection, predicate, fromIndex) {\\n        var iterable = Object(collection);\\n        if (!isArrayLike(collection)) {\\n          var iteratee ",
                      "markdown": "`   var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;\\n        return apply(fn, this, args);\\n      }\\n      return wrapper;\\n    }\\n\\n    /**\\n     * Creates a `_.find` or `_.findLast` function.\\n     *\\n     * @private\\n     * @param {Function} findIndexFunc The function to find the collection index.\\n     * @returns {Function} Returns the new find function.\\n     */\\n    function createFind(findIndexFunc) {\\n      return function(collection, predicate, fromIndex) {\\n        var iterable = Object(collection);\\n        if (!isArrayLike(collection)) {\\n          var iteratee `"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 283286,
                  "endLine": 1,
                  "endColumn": 283292,
                  "snippet": {
                    "text": "t` bug in the JS engine embedded in Adobe applications\\n      // that causes it, under certain circumstances, to provide the same value for\\n      // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247\\n      // for more details.\\n      //\\n      // This also ensures a stable sort in V8 and other engines.\\n      // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.\\n      return object.index - other.index;\\n    }\\n\\n    /**\\n     * Creates an array that is the composition of partially applied arguments,\\n     * placeholders, and provided arguments into a",
                    "rendered": {
                      "text": "t` bug in the JS engine embedded in Adobe applications\\n      // that causes it, under certain circumstances, to provide the same value for\\n      // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247\\n      // for more details.\\n      //\\n      // This also ensures a stable sort in V8 and other engines.\\n      // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.\\n      return object.index - other.index;\\n    }\\n\\n    /**\\n     * Creates an array that is the composition of partially applied arguments,\\n     * placeholders, and provided arguments into a",
                      "markdown": "`t` bug in the JS engine embedded in Adobe applications\\n      // that causes it, under certain circumstances, to provide the same value for\\n      // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247\\n      // for more details.\\n      //\\n      // This also ensures a stable sort in V8 and other engines.\\n      // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.\\n      return object.index - other.index;\\n    }\\n\\n    /**\\n     * Creates an array that is the composition of partially applied arguments,\\n     * placeholders, and provided arguments into a`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 282337,
                  "endLine": 1,
                  "endColumn": 282343,
                  "snippet": {
                    "text": "rt order\\n     * of corresponding values.\\n     *\\n     * @private\\n     * @param {Object} object The object to compare.\\n     * @param {Object} other The other object to compare.\\n     * @param {boolean[]|string[]} orders The order to sort by for each property.\\n     * @returns {number} Returns the sort order indicator for `object`.\\n     */\\n    function compareMultiple(object, other, orders) {\\n      var index = -1,\\n          objCriteria = object.criteria,\\n          othCriteria = other.criteria,\\n          length = objCriteria.length,\\n          ordersLength = orders.length;\\n\\n      while (++i",
                    "rendered": {
                      "text": "rt order\\n     * of corresponding values.\\n     *\\n     * @private\\n     * @param {Object} object The object to compare.\\n     * @param {Object} other The other object to compare.\\n     * @param {boolean[]|string[]} orders The order to sort by for each property.\\n     * @returns {number} Returns the sort order indicator for `object`.\\n     */\\n    function compareMultiple(object, other, orders) {\\n      var index = -1,\\n          objCriteria = object.criteria,\\n          othCriteria = other.criteria,\\n          length = objCriteria.length,\\n          ordersLength = orders.length;\\n\\n      while (++i",
                      "markdown": "`rt order\\n     * of corresponding values.\\n     *\\n     * @private\\n     * @param {Object} object The object to compare.\\n     * @param {Object} other The other object to compare.\\n     * @param {boolean[]|string[]} orders The order to sort by for each property.\\n     * @returns {number} Returns the sort order indicator for `object`.\\n     */\\n    function compareMultiple(object, other, orders) {\\n      var index = -1,\\n          objCriteria = object.criteria,\\n          othCriteria = other.criteria,\\n          length = objCriteria.length,\\n          ordersLength = orders.length;\\n\\n      while (++i`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 282272,
                  "endLine": 1,
                  "endColumn": 282278,
                  "snippet": {
                    "text": "y an order of \\\"desc\\\" for descending or \\\"asc\\\" for ascending sort order\\n     * of corresponding values.\\n     *\\n     * @private\\n     * @param {Object} object The object to compare.\\n     * @param {Object} other The other object to compare.\\n     * @param {boolean[]|string[]} orders The order to sort by for each property.\\n     * @returns {number} Returns the sort order indicator for `object`.\\n     */\\n    function compareMultiple(object, other, orders) {\\n      var index = -1,\\n          objCriteria = object.criteria,\\n          othCriteria = other.criteria,\\n          length = objCriteria.len",
                    "rendered": {
                      "text": "y an order of \\\"desc\\\" for descending or \\\"asc\\\" for ascending sort order\\n     * of corresponding values.\\n     *\\n     * @private\\n     * @param {Object} object The object to compare.\\n     * @param {Object} other The other object to compare.\\n     * @param {boolean[]|string[]} orders The order to sort by for each property.\\n     * @returns {number} Returns the sort order indicator for `object`.\\n     */\\n    function compareMultiple(object, other, orders) {\\n      var index = -1,\\n          objCriteria = object.criteria,\\n          othCriteria = other.criteria,\\n          length = objCriteria.len",
                      "markdown": "`y an order of \\\"desc\\\" for descending or \\\"asc\\\" for ascending sort order\\n     * of corresponding values.\\n     *\\n     * @private\\n     * @param {Object} object The object to compare.\\n     * @param {Object} other The other object to compare.\\n     * @param {boolean[]|string[]} orders The order to sort by for each property.\\n     * @returns {number} Returns the sort order indicator for `object`.\\n     */\\n    function compareMultiple(object, other, orders) {\\n      var index = -1,\\n          objCriteria = object.criteria,\\n          othCriteria = other.criteria,\\n          length = objCriteria.len`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 282034,
                  "endLine": 1,
                  "endColumn": 282040,
                  "snippet": {
                    "text": "   }\\n\\n    /**\\n     * Used by `_.orderBy` to compare multiple properties of a value to another\\n     * and stable sort them.\\n     *\\n     * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,\\n     * specify an order of \\\"desc\\\" for descending or \\\"asc\\\" for ascending sort order\\n     * of corresponding values.\\n     *\\n     * @private\\n     * @param {Object} object The object to compare.\\n     * @param {Object} other The other object to compare.\\n     * @param {boolean[]|string[]} orders The order to sort by for each property.\\n     * @returns {number} Returns the so",
                    "rendered": {
                      "text": "   }\\n\\n    /**\\n     * Used by `_.orderBy` to compare multiple properties of a value to another\\n     * and stable sort them.\\n     *\\n     * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,\\n     * specify an order of \\\"desc\\\" for descending or \\\"asc\\\" for ascending sort order\\n     * of corresponding values.\\n     *\\n     * @private\\n     * @param {Object} object The object to compare.\\n     * @param {Object} other The other object to compare.\\n     * @param {boolean[]|string[]} orders The order to sort by for each property.\\n     * @returns {number} Returns the so",
                      "markdown": "`   }\\n\\n    /**\\n     * Used by `_.orderBy` to compare multiple properties of a value to another\\n     * and stable sort them.\\n     *\\n     * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,\\n     * specify an order of \\\"desc\\\" for descending or \\\"asc\\\" for ascending sort order\\n     * of corresponding values.\\n     *\\n     * @private\\n     * @param {Object} object The object to compare.\\n     * @param {Object} other The other object to compare.\\n     * @param {boolean[]|string[]} orders The order to sort by for each property.\\n     * @returns {number} Returns the so`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 281849,
                  "endLine": 1,
                  "endColumn": 281855,
                  "snippet": {
                    "text": "ull && valIsDefined && valIsReflexive) ||\\n            (!othIsDefined && valIsReflexive) ||\\n            !othIsReflexive) {\\n          return -1;\\n        }\\n      }\\n      return 0;\\n    }\\n\\n    /**\\n     * Used by `_.orderBy` to compare multiple properties of a value to another\\n     * and stable sort them.\\n     *\\n     * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,\\n     * specify an order of \\\"desc\\\" for descending or \\\"asc\\\" for ascending sort order\\n     * of corresponding values.\\n     *\\n     * @private\\n     * @param {Object} object The object to compar",
                    "rendered": {
                      "text": "ull && valIsDefined && valIsReflexive) ||\\n            (!othIsDefined && valIsReflexive) ||\\n            !othIsReflexive) {\\n          return -1;\\n        }\\n      }\\n      return 0;\\n    }\\n\\n    /**\\n     * Used by `_.orderBy` to compare multiple properties of a value to another\\n     * and stable sort them.\\n     *\\n     * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,\\n     * specify an order of \\\"desc\\\" for descending or \\\"asc\\\" for ascending sort order\\n     * of corresponding values.\\n     *\\n     * @private\\n     * @param {Object} object The object to compar",
                      "markdown": "`ull && valIsDefined && valIsReflexive) ||\\n            (!othIsDefined && valIsReflexive) ||\\n            !othIsReflexive) {\\n          return -1;\\n        }\\n      }\\n      return 0;\\n    }\\n\\n    /**\\n     * Used by `_.orderBy` to compare multiple properties of a value to another\\n     * and stable sort them.\\n     *\\n     * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,\\n     * specify an order of \\\"desc\\\" for descending or \\\"asc\\\" for ascending sort order\\n     * of corresponding values.\\n     *\\n     * @private\\n     * @param {Object} object The object to compar`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 280522,
                  "endLine": 1,
                  "endColumn": 280528,
                  "snippet": {
                    "text": "constructor(buffer, typedArray.byteOffset, typedArray.length);\\n    }\\n\\n    /**\\n     * Compares values to sort them in ascending order.\\n     *\\n     * @private\\n     * @param {*} value The value to compare.\\n     * @param {*} other The other value to compare.\\n     * @returns {number} Returns the sort order indicator for `value`.\\n     */\\n    function compareAscending(value, other) {\\n      if (value !== other) {\\n        var valIsDefined = value !== undefined,\\n            valIsNull = value === null,\\n            valIsReflexive = value === value,\\n            valIsSymbol = isSymbol(value);\\n\\n ",
                    "rendered": {
                      "text": "constructor(buffer, typedArray.byteOffset, typedArray.length);\\n    }\\n\\n    /**\\n     * Compares values to sort them in ascending order.\\n     *\\n     * @private\\n     * @param {*} value The value to compare.\\n     * @param {*} other The other value to compare.\\n     * @returns {number} Returns the sort order indicator for `value`.\\n     */\\n    function compareAscending(value, other) {\\n      if (value !== other) {\\n        var valIsDefined = value !== undefined,\\n            valIsNull = value === null,\\n            valIsReflexive = value === value,\\n            valIsSymbol = isSymbol(value);\\n\\n ",
                      "markdown": "`constructor(buffer, typedArray.byteOffset, typedArray.length);\\n    }\\n\\n    /**\\n     * Compares values to sort them in ascending order.\\n     *\\n     * @private\\n     * @param {*} value The value to compare.\\n     * @param {*} other The other value to compare.\\n     * @returns {number} Returns the sort order indicator for `value`.\\n     */\\n    function compareAscending(value, other) {\\n      if (value !== other) {\\n        var valIsDefined = value !== undefined,\\n            valIsNull = value === null,\\n            valIsReflexive = value === value,\\n            valIsSymbol = isSymbol(value);\\n\\n `"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 280329,
                  "endLine": 1,
                  "endColumn": 280335,
                  "snippet": {
                    "text": "ned typed array.\\n     */\\n    function cloneTypedArray(typedArray, isDeep) {\\n      var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;\\n      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);\\n    }\\n\\n    /**\\n     * Compares values to sort them in ascending order.\\n     *\\n     * @private\\n     * @param {*} value The value to compare.\\n     * @param {*} other The other value to compare.\\n     * @returns {number} Returns the sort order indicator for `value`.\\n     */\\n    function compareAscending(value, other) {\\n      if (value !== o",
                    "rendered": {
                      "text": "ned typed array.\\n     */\\n    function cloneTypedArray(typedArray, isDeep) {\\n      var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;\\n      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);\\n    }\\n\\n    /**\\n     * Compares values to sort them in ascending order.\\n     *\\n     * @private\\n     * @param {*} value The value to compare.\\n     * @param {*} other The other value to compare.\\n     * @returns {number} Returns the sort order indicator for `value`.\\n     */\\n    function compareAscending(value, other) {\\n      if (value !== o",
                      "markdown": "`ned typed array.\\n     */\\n    function cloneTypedArray(typedArray, isDeep) {\\n      var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;\\n      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);\\n    }\\n\\n    /**\\n     * Compares values to sort them in ascending order.\\n     *\\n     * @private\\n     * @param {*} value The value to compare.\\n     * @param {*} other The other value to compare.\\n     * @returns {number} Returns the sort order indicator for `value`.\\n     */\\n    function compareAscending(value, other) {\\n      if (value !== o`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 277497,
                  "endLine": 1,
                  "endColumn": 277506,
                  "snippet": {
                    "text": "d = end === undefined ? length : end;\\n      return (!start && end >= length) ? array : baseSlice(array, start, end);\\n    }\\n\\n    /**\\n     * A simple wrapper around the global [`clearTimeout`](https://mdn.io/clearTimeout).\\n     *\\n     * @private\\n     * @param {number|Object} id The timer id or timeout object of the timer to clear.\\n     */\\n    var clearTimeout = ctxClearTimeout || function(id) {\\n      return root.clearTimeout(id);\\n    };\\n\\n    /**\\n     * Creates a clone of  `buffer`.\\n     *\\n     * @private\\n     * @param {Buffer} buffer The buffer to clone.\\n     * @param {boolean} [isDeep",
                    "rendered": {
                      "text": "d = end === undefined ? length : end;\\n      return (!start && end >= length) ? array : baseSlice(array, start, end);\\n    }\\n\\n    /**\\n     * A simple wrapper around the global [`clearTimeout`](https://mdn.io/clearTimeout).\\n     *\\n     * @private\\n     * @param {number|Object} id The timer id or timeout object of the timer to clear.\\n     */\\n    var clearTimeout = ctxClearTimeout || function(id) {\\n      return root.clearTimeout(id);\\n    };\\n\\n    /**\\n     * Creates a clone of  `buffer`.\\n     *\\n     * @private\\n     * @param {Buffer} buffer The buffer to clone.\\n     * @param {boolean} [isDeep",
                      "markdown": "`d = end === undefined ? length : end;\\n      return (!start && end >= length) ? array : baseSlice(array, start, end);\\n    }\\n\\n    /**\\n     * A simple wrapper around the global [`clearTimeout`](https://mdn.io/clearTimeout).\\n     *\\n     * @private\\n     * @param {number|Object} id The timer id or timeout object of the timer to clear.\\n     */\\n    var clearTimeout = ctxClearTimeout || function(id) {\\n      return root.clearTimeout(id);\\n    };\\n\\n    /**\\n     * Creates a clone of  `buffer`.\\n     *\\n     * @private\\n     * @param {Buffer} buffer The buffer to clone.\\n     * @param {boolean} [isDeep`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 264858,
                  "endLine": 1,
                  "endColumn": 264864,
                  "snippet": {
                    "text": "    }\\n        return high;\\n      }\\n      return baseSortedIndexBy(array, value, identity, retHighest);\\n    }\\n\\n    /**\\n     * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`\\n     * which invokes `iteratee` for `value` and each element of `array` to compute\\n     * their sort ranking. The iteratee is invoked with one argument; (value).\\n     *\\n     * @private\\n     * @param {Array} array The sorted array to inspect.\\n     * @param {*} value The value to evaluate.\\n     * @param {Function} iteratee The iteratee invoked per element.\\n     * @param {boolean} [retHighest] S",
                    "rendered": {
                      "text": "    }\\n        return high;\\n      }\\n      return baseSortedIndexBy(array, value, identity, retHighest);\\n    }\\n\\n    /**\\n     * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`\\n     * which invokes `iteratee` for `value` and each element of `array` to compute\\n     * their sort ranking. The iteratee is invoked with one argument; (value).\\n     *\\n     * @private\\n     * @param {Array} array The sorted array to inspect.\\n     * @param {*} value The value to evaluate.\\n     * @param {Function} iteratee The iteratee invoked per element.\\n     * @param {boolean} [retHighest] S",
                      "markdown": "`    }\\n        return high;\\n      }\\n      return baseSortedIndexBy(array, value, identity, retHighest);\\n    }\\n\\n    /**\\n     * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`\\n     * which invokes `iteratee` for `value` and each element of `array` to compute\\n     * their sort ranking. The iteratee is invoked with one argument; (value).\\n     *\\n     * @private\\n     * @param {Array} array The sorted array to inspect.\\n     * @param {*} value The value to evaluate.\\n     * @param {Function} iteratee The iteratee invoked per element.\\n     * @param {boolean} [retHighest] S`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 263657,
                  "endLine": 1,
                  "endColumn": 263663,
                  "snippet": {
                    "text": "  return !result;\\n      });\\n      return !!result;\\n    }\\n\\n    /**\\n     * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which\\n     * performs a binary search of `array` to determine the index at which `value`\\n     * should be inserted into `array` in order to maintain its sort order.\\n     *\\n     * @private\\n     * @param {Array} array The sorted array to inspect.\\n     * @param {*} value The value to evaluate.\\n     * @param {boolean} [retHighest] Specify returning the highest qualified index.\\n     * @returns {number} Returns the index at which `value` should be insert",
                    "rendered": {
                      "text": "  return !result;\\n      });\\n      return !!result;\\n    }\\n\\n    /**\\n     * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which\\n     * performs a binary search of `array` to determine the index at which `value`\\n     * should be inserted into `array` in order to maintain its sort order.\\n     *\\n     * @private\\n     * @param {Array} array The sorted array to inspect.\\n     * @param {*} value The value to evaluate.\\n     * @param {boolean} [retHighest] Specify returning the highest qualified index.\\n     * @returns {number} Returns the index at which `value` should be insert",
                      "markdown": "`  return !result;\\n      });\\n      return !!result;\\n    }\\n\\n    /**\\n     * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which\\n     * performs a binary search of `array` to determine the index at which `value`\\n     * should be inserted into `array` in order to maintain its sort order.\\n     *\\n     * @private\\n     * @param {Array} array The sorted array to inspect.\\n     * @param {*} value The value to evaluate.\\n     * @param {boolean} [retHighest] Specify returning the highest qualified index.\\n     * @returns {number} Returns the index at which `value` should be insert`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 251304,
                  "endLine": 1,
                  "endColumn": 251310,
                  "snippet": {
                    "text": "  }\\n\\n    /**\\n     * The base implementation of `_.orderBy` without param guards.\\n     *\\n     * @private\\n     * @param {Array|Object} collection The collection to iterate over.\\n     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.\\n     * @param {string[]} orders The sort orders of `iteratees`.\\n     * @returns {Array} Returns the new sorted array.\\n     */\\n    function baseOrderBy(collection, iteratees, orders) {\\n      if (iteratees.length) {\\n        iteratees = arrayMap(iteratees, function(iteratee) {\\n          if (isArray(iteratee)) {\\n            return funct",
                    "rendered": {
                      "text": "  }\\n\\n    /**\\n     * The base implementation of `_.orderBy` without param guards.\\n     *\\n     * @private\\n     * @param {Array|Object} collection The collection to iterate over.\\n     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.\\n     * @param {string[]} orders The sort orders of `iteratees`.\\n     * @returns {Array} Returns the new sorted array.\\n     */\\n    function baseOrderBy(collection, iteratees, orders) {\\n      if (iteratees.length) {\\n        iteratees = arrayMap(iteratees, function(iteratee) {\\n          if (isArray(iteratee)) {\\n            return funct",
                      "markdown": "`  }\\n\\n    /**\\n     * The base implementation of `_.orderBy` without param guards.\\n     *\\n     * @private\\n     * @param {Array|Object} collection The collection to iterate over.\\n     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.\\n     * @param {string[]} orders The sort orders of `iteratees`.\\n     * @returns {Array} Returns the new sorted array.\\n     */\\n    function baseOrderBy(collection, iteratees, orders) {\\n      if (iteratees.length) {\\n        iteratees = arrayMap(iteratees, function(iteratee) {\\n          if (isArray(iteratee)) {\\n            return funct`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 251258,
                  "endLine": 1,
                  "endColumn": 251264,
                  "snippet": {
                    "text": "isIndex(n, length) ? array[n] : undefined;\\n    }\\n\\n    /**\\n     * The base implementation of `_.orderBy` without param guards.\\n     *\\n     * @private\\n     * @param {Array|Object} collection The collection to iterate over.\\n     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.\\n     * @param {string[]} orders The sort orders of `iteratees`.\\n     * @returns {Array} Returns the new sorted array.\\n     */\\n    function baseOrderBy(collection, iteratees, orders) {\\n      if (iteratees.length) {\\n        iteratees = arrayMap(iteratees, function(iteratee) {\\n          if (",
                    "rendered": {
                      "text": "isIndex(n, length) ? array[n] : undefined;\\n    }\\n\\n    /**\\n     * The base implementation of `_.orderBy` without param guards.\\n     *\\n     * @private\\n     * @param {Array|Object} collection The collection to iterate over.\\n     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.\\n     * @param {string[]} orders The sort orders of `iteratees`.\\n     * @returns {Array} Returns the new sorted array.\\n     */\\n    function baseOrderBy(collection, iteratees, orders) {\\n      if (iteratees.length) {\\n        iteratees = arrayMap(iteratees, function(iteratee) {\\n          if (",
                      "markdown": "`isIndex(n, length) ? array[n] : undefined;\\n    }\\n\\n    /**\\n     * The base implementation of `_.orderBy` without param guards.\\n     *\\n     * @private\\n     * @param {Array|Object} collection The collection to iterate over.\\n     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.\\n     * @param {string[]} orders The sort orders of `iteratees`.\\n     * @returns {Array} Returns the new sorted array.\\n     */\\n    function baseOrderBy(collection, iteratees, orders) {\\n      if (iteratees.length) {\\n        iteratees = arrayMap(iteratees, function(iteratee) {\\n          if (`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 217307,
                  "endLine": 1,
                  "endColumn": 217316,
                  "snippet": {
                    "text": "* to provide to `func`.\\n     *\\n     * @private\\n     * @param {Function} func The function to delay.\\n     * @param {number} wait The number of milliseconds to delay invocation.\\n     * @param {Array} args The arguments to provide to `func`.\\n     * @returns {number|Object} Returns the timer id or timeout object.\\n     */\\n    function baseDelay(func, wait, args) {\\n      if (typeof func != 'function') {\\n        throw new TypeError(FUNC_ERROR_TEXT);\\n      }\\n      return setTimeout(function() { func.apply(undefined, args); }, wait);\\n    }\\n\\n    /**\\n     * The base implementation of methods like ",
                    "rendered": {
                      "text": "* to provide to `func`.\\n     *\\n     * @private\\n     * @param {Function} func The function to delay.\\n     * @param {number} wait The number of milliseconds to delay invocation.\\n     * @param {Array} args The arguments to provide to `func`.\\n     * @returns {number|Object} Returns the timer id or timeout object.\\n     */\\n    function baseDelay(func, wait, args) {\\n      if (typeof func != 'function') {\\n        throw new TypeError(FUNC_ERROR_TEXT);\\n      }\\n      return setTimeout(function() { func.apply(undefined, args); }, wait);\\n    }\\n\\n    /**\\n     * The base implementation of methods like ",
                      "markdown": "`* to provide to `func`.\\n     *\\n     * @private\\n     * @param {Function} func The function to delay.\\n     * @param {number} wait The number of milliseconds to delay invocation.\\n     * @param {Array} args The arguments to provide to `func`.\\n     * @returns {number|Object} Returns the timer id or timeout object.\\n     */\\n    function baseDelay(func, wait, args) {\\n      if (typeof func != 'function') {\\n        throw new TypeError(FUNC_ERROR_TEXT);\\n      }\\n      return setTimeout(function() { func.apply(undefined, args); }, wait);\\n    }\\n\\n    /**\\n     * The base implementation of methods like `"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 186525,
                  "endLine": 1,
                  "endColumn": 186531,
                  "snippet": {
                    "text": "Wrapper(value, chainAll) {\\n      this.__wrapped__ = value;\\n      this.__actions__ = [];\\n      this.__chain__ = !!chainAll;\\n      this.__index__ = 0;\\n      this.__values__ = undefined;\\n    }\\n\\n    /**\\n     * By default, the template delimiters used by lodash are like those in\\n     * embedded Ruby (ERB) as well as ES2015 template strings. Change the\\n     * following template settings to use alternative delimiters.\\n     *\\n     * @static\\n     * @memberOf _\\n     * @type {Object}\\n     */\\n    lodash.templateSettings = {\\n\\n      /**\\n       * Used to detect `data` property values to be HTML",
                    "rendered": {
                      "text": "Wrapper(value, chainAll) {\\n      this.__wrapped__ = value;\\n      this.__actions__ = [];\\n      this.__chain__ = !!chainAll;\\n      this.__index__ = 0;\\n      this.__values__ = undefined;\\n    }\\n\\n    /**\\n     * By default, the template delimiters used by lodash are like those in\\n     * embedded Ruby (ERB) as well as ES2015 template strings. Change the\\n     * following template settings to use alternative delimiters.\\n     *\\n     * @static\\n     * @memberOf _\\n     * @type {Object}\\n     */\\n    lodash.templateSettings = {\\n\\n      /**\\n       * Used to detect `data` property values to be HTML",
                      "markdown": "`Wrapper(value, chainAll) {\\n      this.__wrapped__ = value;\\n      this.__actions__ = [];\\n      this.__chain__ = !!chainAll;\\n      this.__index__ = 0;\\n      this.__values__ = undefined;\\n    }\\n\\n    /**\\n     * By default, the template delimiters used by lodash are like those in\\n     * embedded Ruby (ERB) as well as ES2015 template strings. Change the\\n     * following template settings to use alternative delimiters.\\n     *\\n     * @static\\n     * @memberOf _\\n     * @type {Object}\\n     */\\n    lodash.templateSettings = {\\n\\n      /**\\n       * Used to detect `data` property values to be HTML`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 159222,
                  "endLine": 1,
                  "endColumn": 159228,
                  "snippet": {
                    "text": "\\n   * The base implementation of `_.sortBy` which uses `comparer` to define the\\n   * sort order of `array` and replaces criteria objects with their corresponding\\n   * values.\\n   *\\n   * @private\\n   * @param {Array} array The array to sort.\\n   * @param {Function} comparer The function to define sort order.\\n   * @returns {Array} Returns `array`.\\n   */\\n  function baseSortBy(array, comparer) {\\n    var length = array.length;\\n\\n    array.sort(comparer);\\n    while (length--) {\\n      array[length] = array[length].value;\\n    }\\n    return array;\\n  }\\n\\n  /**\\n   * The base implementation of `_",
                    "rendered": {
                      "text": "\\n   * The base implementation of `_.sortBy` which uses `comparer` to define the\\n   * sort order of `array` and replaces criteria objects with their corresponding\\n   * values.\\n   *\\n   * @private\\n   * @param {Array} array The array to sort.\\n   * @param {Function} comparer The function to define sort order.\\n   * @returns {Array} Returns `array`.\\n   */\\n  function baseSortBy(array, comparer) {\\n    var length = array.length;\\n\\n    array.sort(comparer);\\n    while (length--) {\\n      array[length] = array[length].value;\\n    }\\n    return array;\\n  }\\n\\n  /**\\n   * The base implementation of `_",
                      "markdown": "`\\n   * The base implementation of `_.sortBy` which uses `comparer` to define the\\n   * sort order of `array` and replaces criteria objects with their corresponding\\n   * values.\\n   *\\n   * @private\\n   * @param {Array} array The array to sort.\\n   * @param {Function} comparer The function to define sort order.\\n   * @returns {Array} Returns `array`.\\n   */\\n  function baseSortBy(array, comparer) {\\n    var length = array.length;\\n\\n    array.sort(comparer);\\n    while (length--) {\\n      array[length] = array[length].value;\\n    }\\n    return array;\\n  }\\n\\n  /**\\n   * The base implementation of `_`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 159008,
                  "endLine": 1,
                  "endColumn": 159014,
                  "snippet": {
                    "text": " function(value, index, collection) {\\n      accumulator = initAccum\\n        ? (initAccum = false, value)\\n        : iteratee(accumulator, value, index, collection);\\n    });\\n    return accumulator;\\n  }\\n\\n  /**\\n   * The base implementation of `_.sortBy` which uses `comparer` to define the\\n   * sort order of `array` and replaces criteria objects with their corresponding\\n   * values.\\n   *\\n   * @private\\n   * @param {Array} array The array to sort.\\n   * @param {Function} comparer The function to define sort order.\\n   * @returns {Array} Returns `array`.\\n   */\\n  function baseSortBy(array, co",
                    "rendered": {
                      "text": " function(value, index, collection) {\\n      accumulator = initAccum\\n        ? (initAccum = false, value)\\n        : iteratee(accumulator, value, index, collection);\\n    });\\n    return accumulator;\\n  }\\n\\n  /**\\n   * The base implementation of `_.sortBy` which uses `comparer` to define the\\n   * sort order of `array` and replaces criteria objects with their corresponding\\n   * values.\\n   *\\n   * @private\\n   * @param {Array} array The array to sort.\\n   * @param {Function} comparer The function to define sort order.\\n   * @returns {Array} Returns `array`.\\n   */\\n  function baseSortBy(array, co",
                      "markdown": "` function(value, index, collection) {\\n      accumulator = initAccum\\n        ? (initAccum = false, value)\\n        : iteratee(accumulator, value, index, collection);\\n    });\\n    return accumulator;\\n  }\\n\\n  /**\\n   * The base implementation of `_.sortBy` which uses `comparer` to define the\\n   * sort order of `array` and replaces criteria objects with their corresponding\\n   * values.\\n   *\\n   * @private\\n   * @param {Array} array The array to sort.\\n   * @param {Function} comparer The function to define sort order.\\n   * @returns {Array} Returns `array`.\\n   */\\n  function baseSortBy(array, co`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/index.js.map"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 116980,
                  "endLine": 1,
                  "endColumn": 116988,
                  "snippet": {
                    "text": "atePath = __webpack_public_path__;\\n  }\\n  // templatePath ends with a slash.\\n  const templateLocation = `${templatePath}vulcanized_tfma.js`;\\n\\n  // If the vulcanizes tempalets are not loaded yet, load it now.\\n  if (!document.querySelector('script[src=\\\"' + templateLocation + '\\\"]')) {\\n    const script = document.createElement('script');\\n    script.setAttribute('src', templateLocation);\\n    document.head.appendChild(script);\\n  }\\n}\\n\\n/**\\n * HACK: Calls the render callback in a setTimeout. This delay avoids some\\n * rendering artifacts.\\n * @param {!Function} cb\\n */\\nfunction delayedRender(cb",
                    "rendered": {
                      "text": "atePath = __webpack_public_path__;\\n  }\\n  // templatePath ends with a slash.\\n  const templateLocation = `${templatePath}vulcanized_tfma.js`;\\n\\n  // If the vulcanizes tempalets are not loaded yet, load it now.\\n  if (!document.querySelector('script[src=\\\"' + templateLocation + '\\\"]')) {\\n    const script = document.createElement('script');\\n    script.setAttribute('src', templateLocation);\\n    document.head.appendChild(script);\\n  }\\n}\\n\\n/**\\n * HACK: Calls the render callback in a setTimeout. This delay avoids some\\n * rendering artifacts.\\n * @param {!Function} cb\\n */\\nfunction delayedRender(cb",
                      "markdown": "`atePath = __webpack_public_path__;\\n  }\\n  // templatePath ends with a slash.\\n  const templateLocation = `${templatePath}vulcanized_tfma.js`;\\n\\n  // If the vulcanizes tempalets are not loaded yet, load it now.\\n  if (!document.querySelector('script[src=\\\"' + templateLocation + '\\\"]')) {\\n    const script = document.createElement('script');\\n    script.setAttribute('src', templateLocation);\\n    document.head.appendChild(script);\\n  }\\n}\\n\\n/**\\n * HACK: Calls the render callback in a setTimeout. This delay avoids some\\n * rendering artifacts.\\n * @param {!Function} cb\\n */\\nfunction delayedRender(cb`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/index.js"
                },
                "region": {
                  "startLine": 13575,
                  "startColumn": 8,
                  "endLine": 13575,
                  "endColumn": 13,
                  "snippet": {
                    "text": "     * _.get(object, ['a', '0', 'b', 'c']);\n     * // => 3\n     *\n     * _.get(object, 'a.b.c', 'default');\n     * // => 'default'\n     */\n    function get(object, path, defaultValue) {\n",
                    "rendered": {
                      "text": "     * _.get(object, ['a', '0', 'b', 'c']);\n     * // => 3\n     *\n     * _.get(object, 'a.b.c', 'default');\n     * // => 'default'\n     */\n    function get(object, path, defaultValue) {\n",
                      "markdown": "`     * _.get(object, ['a', '0', 'b', 'c']);\n     * // => 3\n     *\n     * _.get(object, 'a.b.c', 'default');\n     * // => 'default'\n     */\n    function get(object, path, defaultValue) {\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/index.js"
                },
                "region": {
                  "startLine": 13572,
                  "startColumn": 8,
                  "endLine": 13572,
                  "endColumn": 13,
                  "snippet": {
                    "text": "     * _.get(object, 'a[0].b.c');\n     * // => 3\n     *\n     * _.get(object, ['a', '0', 'b', 'c']);\n     * // => 3\n     *\n     * _.get(object, 'a.b.c', 'default');\n",
                    "rendered": {
                      "text": "     * _.get(object, 'a[0].b.c');\n     * // => 3\n     *\n     * _.get(object, ['a', '0', 'b', 'c']);\n     * // => 3\n     *\n     * _.get(object, 'a.b.c', 'default');\n",
                      "markdown": "`     * _.get(object, 'a[0].b.c');\n     * // => 3\n     *\n     * _.get(object, ['a', '0', 'b', 'c']);\n     * // => 3\n     *\n     * _.get(object, 'a.b.c', 'default');\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/index.js"
                },
                "region": {
                  "startLine": 13569,
                  "startColumn": 8,
                  "endLine": 13569,
                  "endColumn": 13,
                  "snippet": {
                    "text": "     *\n     * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n     *\n     * _.get(object, 'a[0].b.c');\n     * // => 3\n     *\n     * _.get(object, ['a', '0', 'b', 'c']);\n",
                    "rendered": {
                      "text": "     *\n     * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n     *\n     * _.get(object, 'a[0].b.c');\n     * // => 3\n     *\n     * _.get(object, ['a', '0', 'b', 'c']);\n",
                      "markdown": "`     *\n     * var object = { 'a': [{ 'b': { 'c': 3 } }] };\n     *\n     * _.get(object, 'a[0].b.c');\n     * // => 3\n     *\n     * _.get(object, ['a', '0', 'b', 'c']);\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/index.js"
                },
                "region": {
                  "startLine": 11002,
                  "startColumn": 22,
                  "endLine": 11002,
                  "endColumn": 27,
                  "snippet": {
                    "text": "            cache = memoized.cache;\n\n        if (cache.has(key)) {\n          return cache.get(key);\n        }\n        var result = func.apply(this, args);\n        memoized.cache = cache.set(key, result) || cache;\n",
                    "rendered": {
                      "text": "            cache = memoized.cache;\n\n        if (cache.has(key)) {\n          return cache.get(key);\n        }\n        var result = func.apply(this, args);\n        memoized.cache = cache.set(key, result) || cache;\n",
                      "markdown": "`            cache = memoized.cache;\n\n        if (cache.has(key)) {\n          return cache.get(key);\n        }\n        var result = func.apply(this, args);\n        memoized.cache = cache.set(key, result) || cache;\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/index.js"
                },
                "region": {
                  "startLine": 6323,
                  "startColumn": 20,
                  "endLine": 6323,
                  "endColumn": 25,
                  "snippet": {
                    "text": "     * @returns {*} Returns the metadata for `func`.\n     */\n    var getData = !metaMap ? noop : function(func) {\n      return metaMap.get(func);\n    };\n\n    /**\n",
                    "rendered": {
                      "text": "     * @returns {*} Returns the metadata for `func`.\n     */\n    var getData = !metaMap ? noop : function(func) {\n      return metaMap.get(func);\n    };\n\n    /**\n",
                      "markdown": "`     * @returns {*} Returns the metadata for `func`.\n     */\n    var getData = !metaMap ? noop : function(func) {\n      return metaMap.get(func);\n    };\n\n    /**\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/index.js"
                },
                "region": {
                  "startLine": 6235,
                  "startColumn": 28,
                  "endLine": 6235,
                  "endColumn": 33,
                  "snippet": {
                    "text": "      }\n      // Check that cyclic values are equal.\n      var objStacked = stack.get(object);\n      var othStacked = stack.get(other);\n      if (objStacked && othStacked) {\n        return objStacked == other && othStacked == object;\n      }\n",
                    "rendered": {
                      "text": "      }\n      // Check that cyclic values are equal.\n      var objStacked = stack.get(object);\n      var othStacked = stack.get(other);\n      if (objStacked && othStacked) {\n        return objStacked == other && othStacked == object;\n      }\n",
                      "markdown": "`      }\n      // Check that cyclic values are equal.\n      var objStacked = stack.get(object);\n      var othStacked = stack.get(other);\n      if (objStacked && othStacked) {\n        return objStacked == other && othStacked == object;\n      }\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/index.js"
                },
                "region": {
                  "startLine": 6234,
                  "startColumn": 28,
                  "endLine": 6234,
                  "endColumn": 33,
                  "snippet": {
                    "text": "        }\n      }\n      // Check that cyclic values are equal.\n      var objStacked = stack.get(object);\n      var othStacked = stack.get(other);\n      if (objStacked && othStacked) {\n        return objStacked == other && othStacked == object;\n",
                    "rendered": {
                      "text": "        }\n      }\n      // Check that cyclic values are equal.\n      var objStacked = stack.get(object);\n      var othStacked = stack.get(other);\n      if (objStacked && othStacked) {\n        return objStacked == other && othStacked == object;\n",
                      "markdown": "`        }\n      }\n      // Check that cyclic values are equal.\n      var objStacked = stack.get(object);\n      var othStacked = stack.get(other);\n      if (objStacked && othStacked) {\n        return objStacked == other && othStacked == object;\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/index.js"
                },
                "region": {
                  "startLine": 6183,
                  "startColumn": 29,
                  "endLine": 6183,
                  "endColumn": 34,
                  "snippet": {
                    "text": "            return false;\n          }\n          // Assume cyclic values are equal.\n          var stacked = stack.get(object);\n          if (stacked) {\n            return stacked == other;\n          }\n",
                    "rendered": {
                      "text": "            return false;\n          }\n          // Assume cyclic values are equal.\n          var stacked = stack.get(object);\n          if (stacked) {\n            return stacked == other;\n          }\n",
                      "markdown": "`            return false;\n          }\n          // Assume cyclic values are equal.\n          var stacked = stack.get(object);\n          if (stacked) {\n            return stacked == other;\n          }\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/index.js"
                },
                "region": {
                  "startLine": 6069,
                  "startColumn": 28,
                  "endLine": 6069,
                  "endColumn": 33,
                  "snippet": {
                    "text": "      }\n      // Check that cyclic values are equal.\n      var arrStacked = stack.get(array);\n      var othStacked = stack.get(other);\n      if (arrStacked && othStacked) {\n        return arrStacked == other && othStacked == array;\n      }\n",
                    "rendered": {
                      "text": "      }\n      // Check that cyclic values are equal.\n      var arrStacked = stack.get(array);\n      var othStacked = stack.get(other);\n      if (arrStacked && othStacked) {\n        return arrStacked == other && othStacked == array;\n      }\n",
                      "markdown": "`      }\n      // Check that cyclic values are equal.\n      var arrStacked = stack.get(array);\n      var othStacked = stack.get(other);\n      if (arrStacked && othStacked) {\n        return arrStacked == other && othStacked == array;\n      }\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/index.js"
                },
                "region": {
                  "startLine": 6068,
                  "startColumn": 28,
                  "endLine": 6068,
                  "endColumn": 33,
                  "snippet": {
                    "text": "        return false;\n      }\n      // Check that cyclic values are equal.\n      var arrStacked = stack.get(array);\n      var othStacked = stack.get(other);\n      if (arrStacked && othStacked) {\n        return arrStacked == other && othStacked == array;\n",
                    "rendered": {
                      "text": "        return false;\n      }\n      // Check that cyclic values are equal.\n      var arrStacked = stack.get(array);\n      var othStacked = stack.get(other);\n      if (arrStacked && othStacked) {\n        return arrStacked == other && othStacked == array;\n",
                      "markdown": "`        return false;\n      }\n      // Check that cyclic values are equal.\n      var arrStacked = stack.get(array);\n      var othStacked = stack.get(other);\n      if (arrStacked && othStacked) {\n        return arrStacked == other && othStacked == array;\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/index.js"
                },
                "region": {
                  "startLine": 4062,
                  "startColumn": 25,
                  "endLine": 4062,
                  "endColumn": 30,
                  "snippet": {
                    "text": "    function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {\n      var objValue = safeGet(object, key),\n          srcValue = safeGet(source, key),\n          stacked = stack.get(srcValue);\n\n      if (stacked) {\n        assignMergeValue(object, key, stacked);\n",
                    "rendered": {
                      "text": "    function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {\n      var objValue = safeGet(object, key),\n          srcValue = safeGet(source, key),\n          stacked = stack.get(srcValue);\n\n      if (stacked) {\n        assignMergeValue(object, key, stacked);\n",
                      "markdown": "`    function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {\n      var objValue = safeGet(object, key),\n          srcValue = safeGet(source, key),\n          stacked = stack.get(srcValue);\n\n      if (stacked) {\n        assignMergeValue(object, key, stacked);\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/index.js"
                },
                "region": {
                  "startLine": 3090,
                  "startColumn": 25,
                  "endLine": 3090,
                  "endColumn": 30,
                  "snippet": {
                    "text": "      }\n      // Check for circular references and return its corresponding clone.\n      stack || (stack = new Stack);\n      var stacked = stack.get(value);\n      if (stacked) {\n        return stacked;\n      }\n",
                    "rendered": {
                      "text": "      }\n      // Check for circular references and return its corresponding clone.\n      stack || (stack = new Stack);\n      var stacked = stack.get(value);\n      if (stacked) {\n        return stacked;\n      }\n",
                      "markdown": "`      }\n      // Check for circular references and return its corresponding clone.\n      stack || (stack = new Stack);\n      var stacked = stack.get(value);\n      if (stacked) {\n        return stacked;\n      }\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/index.js"
                },
                "region": {
                  "startLine": 2750,
                  "startColumn": 26,
                  "endLine": 2750,
                  "endColumn": 31,
                  "snippet": {
                    "text": "     * @returns {*} Returns the entry value.\n     */\n    function stackGet(key) {\n      return this.__data__.get(key);\n    }\n\n    /**\n",
                    "rendered": {
                      "text": "     * @returns {*} Returns the entry value.\n     */\n    function stackGet(key) {\n      return this.__data__.get(key);\n    }\n\n    /**\n",
                      "markdown": "`     * @returns {*} Returns the entry value.\n     */\n    function stackGet(key) {\n      return this.__data__.get(key);\n    }\n\n    /**\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/index.js"
                },
                "region": {
                  "startLine": 2603,
                  "startColumn": 34,
                  "endLine": 2603,
                  "endColumn": 39,
                  "snippet": {
                    "text": "     * @returns {*} Returns the entry value.\n     */\n    function mapCacheGet(key) {\n      return getMapData(this, key).get(key);\n    }\n\n    /**\n",
                    "rendered": {
                      "text": "     * @returns {*} Returns the entry value.\n     */\n    function mapCacheGet(key) {\n      return getMapData(this, key).get(key);\n    }\n\n    /**\n",
                      "markdown": "`     * @returns {*} Returns the entry value.\n     */\n    function mapCacheGet(key) {\n      return getMapData(this, key).get(key);\n    }\n\n    /**\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/index.js"
                },
                "region": {
                  "startLine": 356,
                  "startColumn": 24,
                  "endLine": 356,
                  "endColumn": 29,
                  "snippet": {
                    "text": " */\nconst handleTfmaEvent = (tfmaEvent, view) => {\n  const model = view.model;\n  const jsEvents = model.get('js_events').slice();\n  const detail = tfmaEvent.detail;\n  jsEvents.push({'name': detail.type, 'detail': detail.detail});\n  model.set('js_events', jsEvents);\n",
                    "rendered": {
                      "text": " */\nconst handleTfmaEvent = (tfmaEvent, view) => {\n  const model = view.model;\n  const jsEvents = model.get('js_events').slice();\n  const detail = tfmaEvent.detail;\n  jsEvents.push({'name': detail.type, 'detail': detail.detail});\n  model.set('js_events', jsEvents);\n",
                      "markdown": "` */\nconst handleTfmaEvent = (tfmaEvent, view) => {\n  const model = view.model;\n  const jsEvents = model.get('js_events').slice();\n  const detail = tfmaEvent.detail;\n  jsEvents.push({'name': detail.type, 'detail': detail.detail});\n  model.set('js_events', jsEvents);\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/index.js"
                },
                "region": {
                  "startLine": 345,
                  "startColumn": 43,
                  "endLine": 345,
                  "endColumn": 48,
                  "snippet": {
                    "text": "    this.view_.evalName = this.model.get('evalName');\n  },\n  evalNameCompareChanged_: function() {\n    this.view_.evalNameCompare = this.model.get('evalNameCompare');\n  },\n});\n\n",
                    "rendered": {
                      "text": "    this.view_.evalName = this.model.get('evalName');\n  },\n  evalNameCompareChanged_: function() {\n    this.view_.evalNameCompare = this.model.get('evalNameCompare');\n  },\n});\n\n",
                      "markdown": "`    this.view_.evalName = this.model.get('evalName');\n  },\n  evalNameCompareChanged_: function() {\n    this.view_.evalNameCompare = this.model.get('evalNameCompare');\n  },\n});\n\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/index.js"
                },
                "region": {
                  "startLine": 342,
                  "startColumn": 36,
                  "endLine": 342,
                  "endColumn": 41,
                  "snippet": {
                    "text": "    this.view_.slicingMetricsCompare = this.model.get('slicingMetricsCompare');\n  },\n  evalNameChanged_: function() {\n    this.view_.evalName = this.model.get('evalName');\n  },\n  evalNameCompareChanged_: function() {\n    this.view_.evalNameCompare = this.model.get('evalNameCompare');\n",
                    "rendered": {
                      "text": "    this.view_.slicingMetricsCompare = this.model.get('slicingMetricsCompare');\n  },\n  evalNameChanged_: function() {\n    this.view_.evalName = this.model.get('evalName');\n  },\n  evalNameCompareChanged_: function() {\n    this.view_.evalNameCompare = this.model.get('evalNameCompare');\n",
                      "markdown": "`    this.view_.slicingMetricsCompare = this.model.get('slicingMetricsCompare');\n  },\n  evalNameChanged_: function() {\n    this.view_.evalName = this.model.get('evalName');\n  },\n  evalNameCompareChanged_: function() {\n    this.view_.evalNameCompare = this.model.get('evalNameCompare');\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/index.js"
                },
                "region": {
                  "startLine": 339,
                  "startColumn": 49,
                  "endLine": 339,
                  "endColumn": 54,
                  "snippet": {
                    "text": "    this.view_.slicingMetrics = this.model.get('slicingMetrics');\n  },\n  slicingMetricsCompareChanged_: function() {\n    this.view_.slicingMetricsCompare = this.model.get('slicingMetricsCompare');\n  },\n  evalNameChanged_: function() {\n    this.view_.evalName = this.model.get('evalName');\n",
                    "rendered": {
                      "text": "    this.view_.slicingMetrics = this.model.get('slicingMetrics');\n  },\n  slicingMetricsCompareChanged_: function() {\n    this.view_.slicingMetricsCompare = this.model.get('slicingMetricsCompare');\n  },\n  evalNameChanged_: function() {\n    this.view_.evalName = this.model.get('evalName');\n",
                      "markdown": "`    this.view_.slicingMetrics = this.model.get('slicingMetrics');\n  },\n  slicingMetricsCompareChanged_: function() {\n    this.view_.slicingMetricsCompare = this.model.get('slicingMetricsCompare');\n  },\n  evalNameChanged_: function() {\n    this.view_.evalName = this.model.get('evalName');\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/index.js"
                },
                "region": {
                  "startLine": 336,
                  "startColumn": 42,
                  "endLine": 336,
                  "endColumn": 47,
                  "snippet": {
                    "text": "    });\n  },\n  slicingMetricsChanged_: function() {\n    this.view_.slicingMetrics = this.model.get('slicingMetrics');\n  },\n  slicingMetricsCompareChanged_: function() {\n    this.view_.slicingMetricsCompare = this.model.get('slicingMetricsCompare');\n",
                    "rendered": {
                      "text": "    });\n  },\n  slicingMetricsChanged_: function() {\n    this.view_.slicingMetrics = this.model.get('slicingMetrics');\n  },\n  slicingMetricsCompareChanged_: function() {\n    this.view_.slicingMetricsCompare = this.model.get('slicingMetricsCompare');\n",
                      "markdown": "`    });\n  },\n  slicingMetricsChanged_: function() {\n    this.view_.slicingMetrics = this.model.get('slicingMetrics');\n  },\n  slicingMetricsCompareChanged_: function() {\n    this.view_.slicingMetricsCompare = this.model.get('slicingMetricsCompare');\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/index.js"
                },
                "region": {
                  "startLine": 290,
                  "startColumn": 34,
                  "endLine": 290,
                  "endColumn": 39,
                  "snippet": {
                    "text": "    this.view_.data = this.model.get('data');\n  },\n  configChanged_: function() {\n    this.view_.config = this.model.get('config');\n  },\n});\n\n",
                    "rendered": {
                      "text": "    this.view_.data = this.model.get('data');\n  },\n  configChanged_: function() {\n    this.view_.config = this.model.get('config');\n  },\n});\n\n",
                      "markdown": "`    this.view_.data = this.model.get('data');\n  },\n  configChanged_: function() {\n    this.view_.config = this.model.get('config');\n  },\n});\n\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/index.js"
                },
                "region": {
                  "startLine": 287,
                  "startColumn": 32,
                  "endLine": 287,
                  "endColumn": 37,
                  "snippet": {
                    "text": "    });\n  },\n  dataChanged_: function() {\n    this.view_.data = this.model.get('data');\n  },\n  configChanged_: function() {\n    this.view_.config = this.model.get('config');\n",
                    "rendered": {
                      "text": "    });\n  },\n  dataChanged_: function() {\n    this.view_.data = this.model.get('data');\n  },\n  configChanged_: function() {\n    this.view_.config = this.model.get('config');\n",
                      "markdown": "`    });\n  },\n  dataChanged_: function() {\n    this.view_.data = this.model.get('data');\n  },\n  configChanged_: function() {\n    this.view_.config = this.model.get('config');\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/index.js"
                },
                "region": {
                  "startLine": 255,
                  "startColumn": 34,
                  "endLine": 255,
                  "endColumn": 39,
                  "snippet": {
                    "text": "    this.view_.data = this.model.get('data');\n  },\n  configChanged_: function() {\n    this.view_.config = this.model.get('config');\n  },\n});\n\n",
                    "rendered": {
                      "text": "    this.view_.data = this.model.get('data');\n  },\n  configChanged_: function() {\n    this.view_.config = this.model.get('config');\n  },\n});\n\n",
                      "markdown": "`    this.view_.data = this.model.get('data');\n  },\n  configChanged_: function() {\n    this.view_.config = this.model.get('config');\n  },\n});\n\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/index.js"
                },
                "region": {
                  "startLine": 252,
                  "startColumn": 32,
                  "endLine": 252,
                  "endColumn": 37,
                  "snippet": {
                    "text": "    });\n  },\n  dataChanged_: function() {\n    this.view_.data = this.model.get('data');\n  },\n  configChanged_: function() {\n    this.view_.config = this.model.get('config');\n",
                    "rendered": {
                      "text": "    });\n  },\n  dataChanged_: function() {\n    this.view_.data = this.model.get('data');\n  },\n  configChanged_: function() {\n    this.view_.config = this.model.get('config');\n",
                      "markdown": "`    });\n  },\n  dataChanged_: function() {\n    this.view_.data = this.model.get('data');\n  },\n  configChanged_: function() {\n    this.view_.config = this.model.get('config');\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/index.js"
                },
                "region": {
                  "startLine": 220,
                  "startColumn": 34,
                  "endLine": 220,
                  "endColumn": 39,
                  "snippet": {
                    "text": "    this.view_.data = this.model.get('data');\n  },\n  configChanged_: function() {\n    this.view_.config = this.model.get('config');\n  },\n});\n\n",
                    "rendered": {
                      "text": "    this.view_.data = this.model.get('data');\n  },\n  configChanged_: function() {\n    this.view_.config = this.model.get('config');\n  },\n});\n\n",
                      "markdown": "`    this.view_.data = this.model.get('data');\n  },\n  configChanged_: function() {\n    this.view_.config = this.model.get('config');\n  },\n});\n\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/index.js"
                },
                "region": {
                  "startLine": 217,
                  "startColumn": 32,
                  "endLine": 217,
                  "endColumn": 37,
                  "snippet": {
                    "text": "    });\n  },\n  dataChanged_: function() {\n    this.view_.data = this.model.get('data');\n  },\n  configChanged_: function() {\n    this.view_.config = this.model.get('config');\n",
                    "rendered": {
                      "text": "    });\n  },\n  dataChanged_: function() {\n    this.view_.data = this.model.get('data');\n  },\n  configChanged_: function() {\n    this.view_.config = this.model.get('config');\n",
                      "markdown": "`    });\n  },\n  dataChanged_: function() {\n    this.view_.data = this.model.get('data');\n  },\n  configChanged_: function() {\n    this.view_.config = this.model.get('config');\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/index.js"
                },
                "region": {
                  "startLine": 13176,
                  "startColumn": 7,
                  "endLine": 13176,
                  "endColumn": 11,
                  "snippet": {
                    "text": "     * _.at(object, ['a[0].b.c', 'a[1]']);\n     * // => [3, 4]\n     */\n    var at = flatRest(baseAt);\n\n    /**\n     * Creates an object that inherits from the `prototype` object. If a\n",
                    "rendered": {
                      "text": "     * _.at(object, ['a[0].b.c', 'a[1]']);\n     * // => [3, 4]\n     */\n    var at = flatRest(baseAt);\n\n    /**\n     * Creates an object that inherits from the `prototype` object. If a\n",
                      "markdown": "`     * _.at(object, ['a[0].b.c', 'a[1]']);\n     * // => [3, 4]\n     */\n    var at = flatRest(baseAt);\n\n    /**\n     * Creates an object that inherits from the `prototype` object. If a\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/index.js"
                },
                "region": {
                  "startLine": 10853,
                  "startColumn": 11,
                  "endLine": 10853,
                  "endColumn": 17,
                  "snippet": {
                    "text": "      }\n\n      function debounced() {\n        var time = now(),\n            isInvoking = shouldInvoke(time);\n\n        lastArgs = arguments;\n",
                    "rendered": {
                      "text": "      }\n\n      function debounced() {\n        var time = now(),\n            isInvoking = shouldInvoke(time);\n\n        lastArgs = arguments;\n",
                      "markdown": "`      }\n\n      function debounced() {\n        var time = now(),\n            isInvoking = shouldInvoke(time);\n\n        lastArgs = arguments;\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/index.js"
                },
                "region": {
                  "startLine": 10820,
                  "startColumn": 11,
                  "endLine": 10820,
                  "endColumn": 17,
                  "snippet": {
                    "text": "      }\n\n      function timerExpired() {\n        var time = now();\n        if (shouldInvoke(time)) {\n          return trailingEdge(time);\n        }\n",
                    "rendered": {
                      "text": "      }\n\n      function timerExpired() {\n        var time = now();\n        if (shouldInvoke(time)) {\n          return trailingEdge(time);\n        }\n",
                      "markdown": "`      }\n\n      function timerExpired() {\n        var time = now();\n        if (shouldInvoke(time)) {\n          return trailingEdge(time);\n        }\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/index.js"
                },
                "region": {
                  "startLine": 10810,
                  "startColumn": 33,
                  "endLine": 10810,
                  "endColumn": 39,
                  "snippet": {
                    "text": "\n      function shouldInvoke(time) {\n        var timeSinceLastCall = time - lastCallTime,\n            timeSinceLastInvoke = time - lastInvokeTime;\n\n        // Either this is the first call, activity has stopped and we're at the\n        // trailing edge, the system time has gone backwards and we're treating\n",
                    "rendered": {
                      "text": "\n      function shouldInvoke(time) {\n        var timeSinceLastCall = time - lastCallTime,\n            timeSinceLastInvoke = time - lastInvokeTime;\n\n        // Either this is the first call, activity has stopped and we're at the\n        // trailing edge, the system time has gone backwards and we're treating\n",
                      "markdown": "`\n      function shouldInvoke(time) {\n        var timeSinceLastCall = time - lastCallTime,\n            timeSinceLastInvoke = time - lastInvokeTime;\n\n        // Either this is the first call, activity has stopped and we're at the\n        // trailing edge, the system time has gone backwards and we're treating\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/index.js"
                },
                "region": {
                  "startLine": 10809,
                  "startColumn": 31,
                  "endLine": 10809,
                  "endColumn": 37,
                  "snippet": {
                    "text": "      }\n\n      function shouldInvoke(time) {\n        var timeSinceLastCall = time - lastCallTime,\n            timeSinceLastInvoke = time - lastInvokeTime;\n\n        // Either this is the first call, activity has stopped and we're at the\n",
                    "rendered": {
                      "text": "      }\n\n      function shouldInvoke(time) {\n        var timeSinceLastCall = time - lastCallTime,\n            timeSinceLastInvoke = time - lastInvokeTime;\n\n        // Either this is the first call, activity has stopped and we're at the\n",
                      "markdown": "`      }\n\n      function shouldInvoke(time) {\n        var timeSinceLastCall = time - lastCallTime,\n            timeSinceLastInvoke = time - lastInvokeTime;\n\n        // Either this is the first call, activity has stopped and we're at the\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/index.js"
                },
                "region": {
                  "startLine": 10800,
                  "startColumn": 33,
                  "endLine": 10800,
                  "endColumn": 39,
                  "snippet": {
                    "text": "\n      function remainingWait(time) {\n        var timeSinceLastCall = time - lastCallTime,\n            timeSinceLastInvoke = time - lastInvokeTime,\n            timeWaiting = wait - timeSinceLastCall;\n\n        return maxing\n",
                    "rendered": {
                      "text": "\n      function remainingWait(time) {\n        var timeSinceLastCall = time - lastCallTime,\n            timeSinceLastInvoke = time - lastInvokeTime,\n            timeWaiting = wait - timeSinceLastCall;\n\n        return maxing\n",
                      "markdown": "`\n      function remainingWait(time) {\n        var timeSinceLastCall = time - lastCallTime,\n            timeSinceLastInvoke = time - lastInvokeTime,\n            timeWaiting = wait - timeSinceLastCall;\n\n        return maxing\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/index.js"
                },
                "region": {
                  "startLine": 10799,
                  "startColumn": 31,
                  "endLine": 10799,
                  "endColumn": 37,
                  "snippet": {
                    "text": "      }\n\n      function remainingWait(time) {\n        var timeSinceLastCall = time - lastCallTime,\n            timeSinceLastInvoke = time - lastInvokeTime,\n            timeWaiting = wait - timeSinceLastCall;\n\n",
                    "rendered": {
                      "text": "      }\n\n      function remainingWait(time) {\n        var timeSinceLastCall = time - lastCallTime,\n            timeSinceLastInvoke = time - lastInvokeTime,\n            timeWaiting = wait - timeSinceLastCall;\n\n",
                      "markdown": "`      }\n\n      function remainingWait(time) {\n        var timeSinceLastCall = time - lastCallTime,\n            timeSinceLastInvoke = time - lastInvokeTime,\n            timeWaiting = wait - timeSinceLastCall;\n\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/index.js"
                },
                "region": {
                  "startLine": 9664,
                  "startColumn": 7,
                  "endLine": 9664,
                  "endColumn": 13,
                  "snippet": {
                    "text": "     * _.find(users, 'active');\n     * // => object for 'barney'\n     */\n    var find = createFind(findIndex);\n\n    /**\n     * This method is like `_.find` except that it iterates over elements of\n",
                    "rendered": {
                      "text": "     * _.find(users, 'active');\n     * // => object for 'barney'\n     */\n    var find = createFind(findIndex);\n\n    /**\n     * This method is like `_.find` except that it iterates over elements of\n",
                      "markdown": "`     * _.find(users, 'active');\n     * // => object for 'barney'\n     */\n    var find = createFind(findIndex);\n\n    /**\n     * This method is like `_.find` except that it iterates over elements of\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/share/jupyter/nbextensions/tensorflow_model_analysis/index.js"
                },
                "region": {
                  "startLine": 153,
                  "startColumn": 9,
                  "endLine": 153,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\n  // If the vulcanizes tempalets are not loaded yet, load it now.\n  if (!document.querySelector('script[src=\"' + templateLocation + '\"]')) {\n    const script = document.createElement('script');\n    script.setAttribute('src', templateLocation);\n    document.head.appendChild(script);\n  }\n",
                    "rendered": {
                      "text": "\n  // If the vulcanizes tempalets are not loaded yet, load it now.\n  if (!document.querySelector('script[src=\"' + templateLocation + '\"]')) {\n    const script = document.createElement('script');\n    script.setAttribute('src', templateLocation);\n    document.head.appendChild(script);\n  }\n",
                      "markdown": "`\n  // If the vulcanizes tempalets are not loaded yet, load it now.\n  if (!document.querySelector('script[src=\"' + templateLocation + '\"]')) {\n    const script = document.createElement('script');\n    script.setAttribute('src', templateLocation);\n    document.head.appendChild(script);\n  }\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/utils/beam_util.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/utils/beam_util.py"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 20,
                  "endLine": 38,
                  "endColumn": 26,
                  "snippet": {
                    "text": "  as otherwise the contract would be broken and calls to the DelegatingCombineFn\n  would not be forwarded to the wrapped CombineFn.\n\n  TODO(b/194704747): Find ways to mitigate risk of future CombineFn API changes.\n  \"\"\"\n\n  def __init__(self, combine_fn: beam.CombineFn):\n",
                    "rendered": {
                      "text": "  as otherwise the contract would be broken and calls to the DelegatingCombineFn\n  would not be forwarded to the wrapped CombineFn.\n\n  TODO(b/194704747): Find ways to mitigate risk of future CombineFn API changes.\n  \"\"\"\n\n  def __init__(self, combine_fn: beam.CombineFn):\n",
                      "markdown": "`  as otherwise the contract would be broken and calls to the DelegatingCombineFn\n  would not be forwarded to the wrapped CombineFn.\n\n  TODO(b/194704747): Find ways to mitigate risk of future CombineFn API changes.\n  \"\"\"\n\n  def __init__(self, combine_fn: beam.CombineFn):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/utils/__init__.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/extractors/tflite_predict_extractor_test."
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/extractors/tflite_predict_extractor.py"
                },
                "region": {
                  "startLine": 88,
                  "startColumn": 65,
                  "endLine": 88,
                  "endColumn": 69,
                  "snippet": {
                    "text": "      Input name. The signature key prefix and argument postfix will be removed.\n    \"\"\"\n    input_name = input_detail['name']\n    # TFLite saved model converter inserts the signature key name at beginning\n    # of the input names. TFLite rewriter assumes that the default signature key\n    # ('serving_default') will be used as an exported name when saving.\n    if input_name.startswith('serving_default_'):\n",
                    "rendered": {
                      "text": "      Input name. The signature key prefix and argument postfix will be removed.\n    \"\"\"\n    input_name = input_detail['name']\n    # TFLite saved model converter inserts the signature key name at beginning\n    # of the input names. TFLite rewriter assumes that the default signature key\n    # ('serving_default') will be used as an exported name when saving.\n    if input_name.startswith('serving_default_'):\n",
                      "markdown": "`      Input name. The signature key prefix and argument postfix will be removed.\n    \"\"\"\n    input_name = input_detail['name']\n    # TFLite saved model converter inserts the signature key name at beginning\n    # of the input names. TFLite rewriter assumes that the default signature key\n    # ('serving_default') will be used as an exported name when saving.\n    if input_name.startswith('serving_default_'):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/extractors/tflite_predict_extractor.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/extractors/tflite_predict_extractor.py"
                },
                "region": {
                  "startLine": 144,
                  "startColumn": 68,
                  "endLine": 144,
                  "endColumn": 74,
                  "snippet": {
                    "text": "      input_features = collections.defaultdict(list)\n      for i in input_details:\n        input_name = self._get_input_name_from_input_detail(i)\n        # The batch dimension is the specific batch size of the last time the\n        # model was invoked. Set it to 1 to \"reset\".\n        input_shape = [1] + list(i['shape'])[1:]\n        input_type = i[_DTYPE]\n",
                    "rendered": {
                      "text": "      input_features = collections.defaultdict(list)\n      for i in input_details:\n        input_name = self._get_input_name_from_input_detail(i)\n        # The batch dimension is the specific batch size of the last time the\n        # model was invoked. Set it to 1 to \"reset\".\n        input_shape = [1] + list(i['shape'])[1:]\n        input_type = i[_DTYPE]\n",
                      "markdown": "`      input_features = collections.defaultdict(list)\n      for i in input_details:\n        input_name = self._get_input_name_from_input_detail(i)\n        # The batch dimension is the specific batch size of the last time the\n        # model was invoked. Set it to 1 to \"reset\".\n        input_shape = [1] + list(i['shape'])[1:]\n        input_type = i[_DTYPE]\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/extractors/tfjs_predict_extractor_util.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/extractors/tfjs_predict_extractor_test.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/extractors/tfjs_predict_extractor.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/extractors/tfjs_predict_extractor.py"
                },
                "region": {
                  "startLine": 206,
                  "startColumn": 22,
                  "endLine": 206,
                  "endColumn": 28,
                  "snippet": {
                    "text": "          shape = json.load(f)\n      except (FileNotFoundError, tf.errors.NotFoundError) as e:\n        raise FileNotFoundError(\n            'Unable to find files containing inference result. This likely '\n            'means that inference did not succeed. Error {}.\\n Inference failed'\n            ' with status {}\\nstdout:\\n{}\\nstderr:\\n{}'.format(\n                e, popen.returncode, stdout, stderr))\n",
                    "rendered": {
                      "text": "          shape = json.load(f)\n      except (FileNotFoundError, tf.errors.NotFoundError) as e:\n        raise FileNotFoundError(\n            'Unable to find files containing inference result. This likely '\n            'means that inference did not succeed. Error {}.\\n Inference failed'\n            ' with status {}\\nstdout:\\n{}\\nstderr:\\n{}'.format(\n                e, popen.returncode, stdout, stderr))\n",
                      "markdown": "`          shape = json.load(f)\n      except (FileNotFoundError, tf.errors.NotFoundError) as e:\n        raise FileNotFoundError(\n            'Unable to find files containing inference result. This likely '\n            'means that inference did not succeed. Error {}.\\n Inference failed'\n            ' with status {}\\nstdout:\\n{}\\nstderr:\\n{}'.format(\n                e, popen.returncode, stdout, stderr))\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/extractors/sql_slice_key_extractor_test.p"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/extractors/sql_slice_key_extractor.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/extractors/slice_key_extractor_test.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/extractors/slice_key_extractor.py"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 29,
                  "endLine": 42,
                  "endColumn": 33,
                  "snippet": {
                    "text": "  and optionally under tfma.TRANSFORMED_FEATURES.\n\n  The extractor's PTransform yields a copy of the Extracts input with an\n  additional extract pointing at the list of SliceKeyType values keyed by\n  tfma.SLICE_KEY_TYPES_KEY. If materialize is True then a materialized version\n  of the slice keys will be added under the key tfma.SLICE_KEYS_KEY.\n\n",
                    "rendered": {
                      "text": "  and optionally under tfma.TRANSFORMED_FEATURES.\n\n  The extractor's PTransform yields a copy of the Extracts input with an\n  additional extract pointing at the list of SliceKeyType values keyed by\n  tfma.SLICE_KEY_TYPES_KEY. If materialize is True then a materialized version\n  of the slice keys will be added under the key tfma.SLICE_KEYS_KEY.\n\n",
                      "markdown": "`  and optionally under tfma.TRANSFORMED_FEATURES.\n\n  The extractor's PTransform yields a copy of the Extracts input with an\n  additional extract pointing at the list of SliceKeyType values keyed by\n  tfma.SLICE_KEY_TYPES_KEY. If materialize is True then a materialized version\n  of the slice keys will be added under the key tfma.SLICE_KEYS_KEY.\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/extractors/slice_key_extractor.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/extractors/predictions_extractor_test.py"
                },
                "region": {
                  "startLine": 710,
                  "startColumn": 7,
                  "endLine": 710,
                  "endColumn": 51,
                  "snippet": {
                    "text": "  # bulk inference APIs which only support serialized input right now.\n  @parameterized.named_parameters(\n      ('ModelSignaturesDoFnInferenceCallableModel', ''),\n      ('ModelSignaturesDoFnInferenceServingDefault', 'serving_default'))\n  def testPredictionsExtractorWithSequentialKerasModel(self, signature_name):\n    # Note that the input will be called 'test_input'\n    model = tf_keras.models.Sequential([\n",
                    "rendered": {
                      "text": "  # bulk inference APIs which only support serialized input right now.\n  @parameterized.named_parameters(\n      ('ModelSignaturesDoFnInferenceCallableModel', ''),\n      ('ModelSignaturesDoFnInferenceServingDefault', 'serving_default'))\n  def testPredictionsExtractorWithSequentialKerasModel(self, signature_name):\n    # Note that the input will be called 'test_input'\n    model = tf_keras.models.Sequential([\n",
                      "markdown": "`  # bulk inference APIs which only support serialized input right now.\n  @parameterized.named_parameters(\n      ('ModelSignaturesDoFnInferenceCallableModel', ''),\n      ('ModelSignaturesDoFnInferenceServingDefault', 'serving_default'))\n  def testPredictionsExtractorWithSequentialKerasModel(self, signature_name):\n    # Note that the input will be called 'test_input'\n    model = tf_keras.models.Sequential([\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/extractors/predictions_extractor_test.py"
                },
                "region": {
                  "startLine": 709,
                  "startColumn": 7,
                  "endLine": 709,
                  "endColumn": 50,
                  "snippet": {
                    "text": "  # accepts serialized input (i.e. string). This is a requirement for using the\n  # bulk inference APIs which only support serialized input right now.\n  @parameterized.named_parameters(\n      ('ModelSignaturesDoFnInferenceCallableModel', ''),\n      ('ModelSignaturesDoFnInferenceServingDefault', 'serving_default'))\n  def testPredictionsExtractorWithSequentialKerasModel(self, signature_name):\n    # Note that the input will be called 'test_input'\n",
                    "rendered": {
                      "text": "  # accepts serialized input (i.e. string). This is a requirement for using the\n  # bulk inference APIs which only support serialized input right now.\n  @parameterized.named_parameters(\n      ('ModelSignaturesDoFnInferenceCallableModel', ''),\n      ('ModelSignaturesDoFnInferenceServingDefault', 'serving_default'))\n  def testPredictionsExtractorWithSequentialKerasModel(self, signature_name):\n    # Note that the input will be called 'test_input'\n",
                      "markdown": "`  # accepts serialized input (i.e. string). This is a requirement for using the\n  # bulk inference APIs which only support serialized input right now.\n  @parameterized.named_parameters(\n      ('ModelSignaturesDoFnInferenceCallableModel', ''),\n      ('ModelSignaturesDoFnInferenceServingDefault', 'serving_default'))\n  def testPredictionsExtractorWithSequentialKerasModel(self, signature_name):\n    # Note that the input will be called 'test_input'\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/extractors/predictions_extractor_test.py"
                },
                "region": {
                  "startLine": 594,
                  "startColumn": 7,
                  "endLine": 594,
                  "endColumn": 51,
                  "snippet": {
                    "text": "  # only support serialized input right now.\n  @parameterized.named_parameters(\n      ('ModelSignaturesDoFnInferenceCallableModel', ''),\n      ('ModelSignaturesDoFnInferenceServingDefault', 'serving_default'))\n  def testPredictionsExtractorWithKerasModel(self, signature_name):\n    input1 = tf_keras.layers.Input(shape=(2,), name='input1')\n    input2 = tf_keras.layers.Input(shape=(2,), name='input2')\n",
                    "rendered": {
                      "text": "  # only support serialized input right now.\n  @parameterized.named_parameters(\n      ('ModelSignaturesDoFnInferenceCallableModel', ''),\n      ('ModelSignaturesDoFnInferenceServingDefault', 'serving_default'))\n  def testPredictionsExtractorWithKerasModel(self, signature_name):\n    input1 = tf_keras.layers.Input(shape=(2,), name='input1')\n    input2 = tf_keras.layers.Input(shape=(2,), name='input2')\n",
                      "markdown": "`  # only support serialized input right now.\n  @parameterized.named_parameters(\n      ('ModelSignaturesDoFnInferenceCallableModel', ''),\n      ('ModelSignaturesDoFnInferenceServingDefault', 'serving_default'))\n  def testPredictionsExtractorWithKerasModel(self, signature_name):\n    input1 = tf_keras.layers.Input(shape=(2,), name='input1')\n    input2 = tf_keras.layers.Input(shape=(2,), name='input2')\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/extractors/predictions_extractor_test.py"
                },
                "region": {
                  "startLine": 593,
                  "startColumn": 7,
                  "endLine": 593,
                  "endColumn": 50,
                  "snippet": {
                    "text": "  # (i.e. string). This is a requirement for using the bulk inference APIs which\n  # only support serialized input right now.\n  @parameterized.named_parameters(\n      ('ModelSignaturesDoFnInferenceCallableModel', ''),\n      ('ModelSignaturesDoFnInferenceServingDefault', 'serving_default'))\n  def testPredictionsExtractorWithKerasModel(self, signature_name):\n    input1 = tf_keras.layers.Input(shape=(2,), name='input1')\n",
                    "rendered": {
                      "text": "  # (i.e. string). This is a requirement for using the bulk inference APIs which\n  # only support serialized input right now.\n  @parameterized.named_parameters(\n      ('ModelSignaturesDoFnInferenceCallableModel', ''),\n      ('ModelSignaturesDoFnInferenceServingDefault', 'serving_default'))\n  def testPredictionsExtractorWithKerasModel(self, signature_name):\n    input1 = tf_keras.layers.Input(shape=(2,), name='input1')\n",
                      "markdown": "`  # (i.e. string). This is a requirement for using the bulk inference APIs which\n  # only support serialized input right now.\n  @parameterized.named_parameters(\n      ('ModelSignaturesDoFnInferenceCallableModel', ''),\n      ('ModelSignaturesDoFnInferenceServingDefault', 'serving_default'))\n  def testPredictionsExtractorWithKerasModel(self, signature_name):\n    input1 = tf_keras.layers.Input(shape=(2,), name='input1')\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/extractors/predictions_extractor_test.py"
                },
                "region": {
                  "startLine": 314,
                  "startColumn": 7,
                  "endLine": 314,
                  "endColumn": 60,
                  "snippet": {
                    "text": "      ('ModelSignaturesDoFnInferencePredictSignature', 'predict'),\n      ('ModelSignaturesDoFnInferenceServingDefaultSignature',\n       'serving_default'),\n      ('ModelSignaturesDoFnInferenceClassificationSignature', 'classification'))\n  def testPredictionsExtractorWithMultiClassModel(self, signature_name):\n    temp_export_dir = self._getExportDir()\n    num_classes = 3\n",
                    "rendered": {
                      "text": "      ('ModelSignaturesDoFnInferencePredictSignature', 'predict'),\n      ('ModelSignaturesDoFnInferenceServingDefaultSignature',\n       'serving_default'),\n      ('ModelSignaturesDoFnInferenceClassificationSignature', 'classification'))\n  def testPredictionsExtractorWithMultiClassModel(self, signature_name):\n    temp_export_dir = self._getExportDir()\n    num_classes = 3\n",
                      "markdown": "`      ('ModelSignaturesDoFnInferencePredictSignature', 'predict'),\n      ('ModelSignaturesDoFnInferenceServingDefaultSignature',\n       'serving_default'),\n      ('ModelSignaturesDoFnInferenceClassificationSignature', 'classification'))\n  def testPredictionsExtractorWithMultiClassModel(self, signature_name):\n    temp_export_dir = self._getExportDir()\n    num_classes = 3\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/extractors/predictions_extractor_test.py"
                },
                "region": {
                  "startLine": 312,
                  "startColumn": 7,
                  "endLine": 312,
                  "endColumn": 60,
                  "snippet": {
                    "text": "  @parameterized.named_parameters(\n      ('ModelSignaturesDoFnInferenceUnspecifiedSignature', ''),\n      ('ModelSignaturesDoFnInferencePredictSignature', 'predict'),\n      ('ModelSignaturesDoFnInferenceServingDefaultSignature',\n       'serving_default'),\n      ('ModelSignaturesDoFnInferenceClassificationSignature', 'classification'))\n  def testPredictionsExtractorWithMultiClassModel(self, signature_name):\n",
                    "rendered": {
                      "text": "  @parameterized.named_parameters(\n      ('ModelSignaturesDoFnInferenceUnspecifiedSignature', ''),\n      ('ModelSignaturesDoFnInferencePredictSignature', 'predict'),\n      ('ModelSignaturesDoFnInferenceServingDefaultSignature',\n       'serving_default'),\n      ('ModelSignaturesDoFnInferenceClassificationSignature', 'classification'))\n  def testPredictionsExtractorWithMultiClassModel(self, signature_name):\n",
                      "markdown": "`  @parameterized.named_parameters(\n      ('ModelSignaturesDoFnInferenceUnspecifiedSignature', ''),\n      ('ModelSignaturesDoFnInferencePredictSignature', 'predict'),\n      ('ModelSignaturesDoFnInferenceServingDefaultSignature',\n       'serving_default'),\n      ('ModelSignaturesDoFnInferenceClassificationSignature', 'classification'))\n  def testPredictionsExtractorWithMultiClassModel(self, signature_name):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/extractors/predictions_extractor_test.py"
                },
                "region": {
                  "startLine": 311,
                  "startColumn": 7,
                  "endLine": 311,
                  "endColumn": 53,
                  "snippet": {
                    "text": "\n  @parameterized.named_parameters(\n      ('ModelSignaturesDoFnInferenceUnspecifiedSignature', ''),\n      ('ModelSignaturesDoFnInferencePredictSignature', 'predict'),\n      ('ModelSignaturesDoFnInferenceServingDefaultSignature',\n       'serving_default'),\n      ('ModelSignaturesDoFnInferenceClassificationSignature', 'classification'))\n",
                    "rendered": {
                      "text": "\n  @parameterized.named_parameters(\n      ('ModelSignaturesDoFnInferenceUnspecifiedSignature', ''),\n      ('ModelSignaturesDoFnInferencePredictSignature', 'predict'),\n      ('ModelSignaturesDoFnInferenceServingDefaultSignature',\n       'serving_default'),\n      ('ModelSignaturesDoFnInferenceClassificationSignature', 'classification'))\n",
                      "markdown": "`\n  @parameterized.named_parameters(\n      ('ModelSignaturesDoFnInferenceUnspecifiedSignature', ''),\n      ('ModelSignaturesDoFnInferencePredictSignature', 'predict'),\n      ('ModelSignaturesDoFnInferenceServingDefaultSignature',\n       'serving_default'),\n      ('ModelSignaturesDoFnInferenceClassificationSignature', 'classification'))\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/extractors/predictions_extractor_test.py"
                },
                "region": {
                  "startLine": 310,
                  "startColumn": 7,
                  "endLine": 310,
                  "endColumn": 57,
                  "snippet": {
                    "text": "      util.assert_that(result, check_result)\n\n  @parameterized.named_parameters(\n      ('ModelSignaturesDoFnInferenceUnspecifiedSignature', ''),\n      ('ModelSignaturesDoFnInferencePredictSignature', 'predict'),\n      ('ModelSignaturesDoFnInferenceServingDefaultSignature',\n       'serving_default'),\n",
                    "rendered": {
                      "text": "      util.assert_that(result, check_result)\n\n  @parameterized.named_parameters(\n      ('ModelSignaturesDoFnInferenceUnspecifiedSignature', ''),\n      ('ModelSignaturesDoFnInferencePredictSignature', 'predict'),\n      ('ModelSignaturesDoFnInferenceServingDefaultSignature',\n       'serving_default'),\n",
                      "markdown": "`      util.assert_that(result, check_result)\n\n  @parameterized.named_parameters(\n      ('ModelSignaturesDoFnInferenceUnspecifiedSignature', ''),\n      ('ModelSignaturesDoFnInferencePredictSignature', 'predict'),\n      ('ModelSignaturesDoFnInferenceServingDefaultSignature',\n       'serving_default'),\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/extractors/predictions_extractor_test.py"
                },
                "region": {
                  "startLine": 230,
                  "startColumn": 7,
                  "endLine": 230,
                  "endColumn": 60,
                  "snippet": {
                    "text": "      ('ModelSignaturesDoFnInferencePredictSignature', 'predict'),\n      ('ModelSignaturesDoFnInferenceServingDefaultSignature',\n       'serving_default'),\n      ('ModelSignaturesDoFnInferenceClassificationSignature', 'classification'))\n  def testPredictionsExtractorWithBinaryClassificationModel(\n      self, signature_name):\n    temp_export_dir = self._getExportDir()\n",
                    "rendered": {
                      "text": "      ('ModelSignaturesDoFnInferencePredictSignature', 'predict'),\n      ('ModelSignaturesDoFnInferenceServingDefaultSignature',\n       'serving_default'),\n      ('ModelSignaturesDoFnInferenceClassificationSignature', 'classification'))\n  def testPredictionsExtractorWithBinaryClassificationModel(\n      self, signature_name):\n    temp_export_dir = self._getExportDir()\n",
                      "markdown": "`      ('ModelSignaturesDoFnInferencePredictSignature', 'predict'),\n      ('ModelSignaturesDoFnInferenceServingDefaultSignature',\n       'serving_default'),\n      ('ModelSignaturesDoFnInferenceClassificationSignature', 'classification'))\n  def testPredictionsExtractorWithBinaryClassificationModel(\n      self, signature_name):\n    temp_export_dir = self._getExportDir()\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/extractors/predictions_extractor_test.py"
                },
                "region": {
                  "startLine": 228,
                  "startColumn": 7,
                  "endLine": 228,
                  "endColumn": 60,
                  "snippet": {
                    "text": "  @parameterized.named_parameters(\n      ('ModelSignaturesDoFnInferenceUnspecifiedSignature', ''),\n      ('ModelSignaturesDoFnInferencePredictSignature', 'predict'),\n      ('ModelSignaturesDoFnInferenceServingDefaultSignature',\n       'serving_default'),\n      ('ModelSignaturesDoFnInferenceClassificationSignature', 'classification'))\n  def testPredictionsExtractorWithBinaryClassificationModel(\n",
                    "rendered": {
                      "text": "  @parameterized.named_parameters(\n      ('ModelSignaturesDoFnInferenceUnspecifiedSignature', ''),\n      ('ModelSignaturesDoFnInferencePredictSignature', 'predict'),\n      ('ModelSignaturesDoFnInferenceServingDefaultSignature',\n       'serving_default'),\n      ('ModelSignaturesDoFnInferenceClassificationSignature', 'classification'))\n  def testPredictionsExtractorWithBinaryClassificationModel(\n",
                      "markdown": "`  @parameterized.named_parameters(\n      ('ModelSignaturesDoFnInferenceUnspecifiedSignature', ''),\n      ('ModelSignaturesDoFnInferencePredictSignature', 'predict'),\n      ('ModelSignaturesDoFnInferenceServingDefaultSignature',\n       'serving_default'),\n      ('ModelSignaturesDoFnInferenceClassificationSignature', 'classification'))\n  def testPredictionsExtractorWithBinaryClassificationModel(\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/extractors/predictions_extractor_test.py"
                },
                "region": {
                  "startLine": 227,
                  "startColumn": 7,
                  "endLine": 227,
                  "endColumn": 53,
                  "snippet": {
                    "text": "\n  @parameterized.named_parameters(\n      ('ModelSignaturesDoFnInferenceUnspecifiedSignature', ''),\n      ('ModelSignaturesDoFnInferencePredictSignature', 'predict'),\n      ('ModelSignaturesDoFnInferenceServingDefaultSignature',\n       'serving_default'),\n      ('ModelSignaturesDoFnInferenceClassificationSignature', 'classification'))\n",
                    "rendered": {
                      "text": "\n  @parameterized.named_parameters(\n      ('ModelSignaturesDoFnInferenceUnspecifiedSignature', ''),\n      ('ModelSignaturesDoFnInferencePredictSignature', 'predict'),\n      ('ModelSignaturesDoFnInferenceServingDefaultSignature',\n       'serving_default'),\n      ('ModelSignaturesDoFnInferenceClassificationSignature', 'classification'))\n",
                      "markdown": "`\n  @parameterized.named_parameters(\n      ('ModelSignaturesDoFnInferenceUnspecifiedSignature', ''),\n      ('ModelSignaturesDoFnInferencePredictSignature', 'predict'),\n      ('ModelSignaturesDoFnInferenceServingDefaultSignature',\n       'serving_default'),\n      ('ModelSignaturesDoFnInferenceClassificationSignature', 'classification'))\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/extractors/predictions_extractor_test.py"
                },
                "region": {
                  "startLine": 226,
                  "startColumn": 7,
                  "endLine": 226,
                  "endColumn": 57,
                  "snippet": {
                    "text": "              equals_fn=np.isclose))\n\n  @parameterized.named_parameters(\n      ('ModelSignaturesDoFnInferenceUnspecifiedSignature', ''),\n      ('ModelSignaturesDoFnInferencePredictSignature', 'predict'),\n      ('ModelSignaturesDoFnInferenceServingDefaultSignature',\n       'serving_default'),\n",
                    "rendered": {
                      "text": "              equals_fn=np.isclose))\n\n  @parameterized.named_parameters(\n      ('ModelSignaturesDoFnInferenceUnspecifiedSignature', ''),\n      ('ModelSignaturesDoFnInferencePredictSignature', 'predict'),\n      ('ModelSignaturesDoFnInferenceServingDefaultSignature',\n       'serving_default'),\n",
                      "markdown": "`              equals_fn=np.isclose))\n\n  @parameterized.named_parameters(\n      ('ModelSignaturesDoFnInferenceUnspecifiedSignature', ''),\n      ('ModelSignaturesDoFnInferencePredictSignature', 'predict'),\n      ('ModelSignaturesDoFnInferenceServingDefaultSignature',\n       'serving_default'),\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/extractors/predictions_extractor_test.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/extractors/predictions_extractor.py"
                },
                "region": {
                  "startLine": 64,
                  "startColumn": 15,
                  "endLine": 64,
                  "endColumn": 23,
                  "snippet": {
                    "text": "    logging.warning(\n        'Calling the PredictionsExtractor with eval_shared_model=None is '\n        'deprecated and no longer supported. This will break in version 1.0. '\n        'Please update your implementation to call '\n        'MaterializedPredictionsExtractor directly.')\n    _, ptransform = (\n        materialized_predictions_extractor.MaterializedPredictionsExtractor(\n",
                    "rendered": {
                      "text": "    logging.warning(\n        'Calling the PredictionsExtractor with eval_shared_model=None is '\n        'deprecated and no longer supported. This will break in version 1.0. '\n        'Please update your implementation to call '\n        'MaterializedPredictionsExtractor directly.')\n    _, ptransform = (\n        materialized_predictions_extractor.MaterializedPredictionsExtractor(\n",
                      "markdown": "`    logging.warning(\n        'Calling the PredictionsExtractor with eval_shared_model=None is '\n        'deprecated and no longer supported. This will break in version 1.0. '\n        'Please update your implementation to call '\n        'MaterializedPredictionsExtractor directly.')\n    _, ptransform = (\n        materialized_predictions_extractor.MaterializedPredictionsExtractor(\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/extractors/predictions_extractor.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/extractors/predictions_extractor.py"
                },
                "region": {
                  "startLine": 72,
                  "startColumn": 13,
                  "endLine": 72,
                  "endColumn": 21,
                  "snippet": {
                    "text": "        )\n    )\n    # Note we are changing the stage name here for backwards compatibility. Old\n    # clients expect these code paths to have the same stage name. New clients\n    # should never reference the private stage name.\n    return extractor.Extractor(\n        stage_name=PREDICTIONS_EXTRACTOR_STAGE_NAME, ptransform=ptransform)\n",
                    "rendered": {
                      "text": "        )\n    )\n    # Note we are changing the stage name here for backwards compatibility. Old\n    # clients expect these code paths to have the same stage name. New clients\n    # should never reference the private stage name.\n    return extractor.Extractor(\n        stage_name=PREDICTIONS_EXTRACTOR_STAGE_NAME, ptransform=ptransform)\n",
                      "markdown": "`        )\n    )\n    # Note we are changing the stage name here for backwards compatibility. Old\n    # clients expect these code paths to have the same stage name. New clients\n    # should never reference the private stage name.\n    return extractor.Extractor(\n        stage_name=PREDICTIONS_EXTRACTOR_STAGE_NAME, ptransform=ptransform)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/extractors/materialized_predictions_extra"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/extractors/materialized_predictions_extra"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/extractors/legacy_predict_extractor_test."
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/extractors/legacy_predict_extractor.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/extractors/legacy_meta_feature_extractor_"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/experimental/__init__.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/evaluators/query_metrics/query_types.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/evaluators/query_metrics/query_statistics"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/evaluators/query_metrics/ndcg.py"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 27,
                  "endLine": 48,
                  "endColumn": 32,
                  "snippet": {
                    "text": "  Returns:\n    The singular value of the feature.\n  \"\"\"\n  feature = fpl['features'].get(key)\n  if feature is None:\n    raise ValueError('feature %s not found in features %s' %\n                     (key, fpl['features']))\n",
                    "rendered": {
                      "text": "  Returns:\n    The singular value of the feature.\n  \"\"\"\n  feature = fpl['features'].get(key)\n  if feature is None:\n    raise ValueError('feature %s not found in features %s' %\n                     (key, fpl['features']))\n",
                      "markdown": "`  Returns:\n    The singular value of the feature.\n  \"\"\"\n  feature = fpl['features'].get(key)\n  if feature is None:\n    raise ValueError('feature %s not found in features %s' %\n                     (key, fpl['features']))\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/evaluators/query_metrics/ndcg.py"
                },
                "region": {
                  "startLine": 158,
                  "startColumn": 7,
                  "endLine": 158,
                  "endColumn": 11,
                  "snippet": {
                    "text": "\n  def extract_output(self, accumulator: _State) -> Dict[str, Any]:\n    avg_dict = {}\n    for at in self._at_vals:\n      if accumulator.weight > 0:\n        avg_ndcg = accumulator.ndcg[at] / accumulator.weight\n      else:\n",
                    "rendered": {
                      "text": "\n  def extract_output(self, accumulator: _State) -> Dict[str, Any]:\n    avg_dict = {}\n    for at in self._at_vals:\n      if accumulator.weight > 0:\n        avg_ndcg = accumulator.ndcg[at] / accumulator.weight\n      else:\n",
                      "markdown": "`\n  def extract_output(self, accumulator: _State) -> Dict[str, Any]:\n    avg_dict = {}\n    for at in self._at_vals:\n      if accumulator.weight > 0:\n        avg_ndcg = accumulator.ndcg[at] / accumulator.weight\n      else:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/evaluators/query_metrics/ndcg.py"
                },
                "region": {
                  "startLine": 142,
                  "startColumn": 7,
                  "endLine": 142,
                  "endColumn": 11,
                  "snippet": {
                    "text": "        weight = weights[0]\n\n    ndcg_dict = {}\n    for at in self._at_vals:\n      rank_gain = [(pos + 1, float(_get_feature_value(fpl, self._gain_key)))\n                   for pos, fpl in enumerate(query_fpl.fpls)]\n      ndcg_dict[at] = self._calculate_ndcg(rank_gain, at) * weight\n",
                    "rendered": {
                      "text": "        weight = weights[0]\n\n    ndcg_dict = {}\n    for at in self._at_vals:\n      rank_gain = [(pos + 1, float(_get_feature_value(fpl, self._gain_key)))\n                   for pos, fpl in enumerate(query_fpl.fpls)]\n      ndcg_dict[at] = self._calculate_ndcg(rank_gain, at) * weight\n",
                      "markdown": "`        weight = weights[0]\n\n    ndcg_dict = {}\n    for at in self._at_vals:\n      rank_gain = [(pos + 1, float(_get_feature_value(fpl, self._gain_key)))\n                   for pos, fpl in enumerate(query_fpl.fpls)]\n      ndcg_dict[at] = self._calculate_ndcg(rank_gain, at) * weight\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/evaluators/query_metrics/ndcg.py"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 7,
                  "endLine": 122,
                  "endColumn": 11,
                  "snippet": {
                    "text": "\n  def _add_states(self, left: _State, right: _State) -> _State:\n    ndcg_dict = self._new_ndcg_dict()\n    for at in self._at_vals:\n      ndcg_dict[at] = left.ndcg[at] + right.ndcg[at]\n    return _State(ndcg_dict, left.weight + right.weight)\n\n",
                    "rendered": {
                      "text": "\n  def _add_states(self, left: _State, right: _State) -> _State:\n    ndcg_dict = self._new_ndcg_dict()\n    for at in self._at_vals:\n      ndcg_dict[at] = left.ndcg[at] + right.ndcg[at]\n    return _State(ndcg_dict, left.weight + right.weight)\n\n",
                      "markdown": "`\n  def _add_states(self, left: _State, right: _State) -> _State:\n    ndcg_dict = self._new_ndcg_dict()\n    for at in self._at_vals:\n      ndcg_dict[at] = left.ndcg[at] + right.ndcg[at]\n    return _State(ndcg_dict, left.weight + right.weight)\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/evaluators/query_metrics/ndcg.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/evaluators/query_metrics/min_label_positi"
                },
                "region": {
                  "startLine": 80,
                  "startColumn": 26,
                  "endLine": 80,
                  "endColumn": 31,
                  "snippet": {
                    "text": "    self._weight_key = weight_key\n\n  def _get_label(self, fpl: query_types.FPL) -> float:\n    result = fpl['labels'].get(self._label_key)\n    if result is None:\n      return 0.0\n    return result\n",
                    "rendered": {
                      "text": "    self._weight_key = weight_key\n\n  def _get_label(self, fpl: query_types.FPL) -> float:\n    result = fpl['labels'].get(self._label_key)\n    if result is None:\n      return 0.0\n    return result\n",
                      "markdown": "`    self._weight_key = weight_key\n\n  def _get_label(self, fpl: query_types.FPL) -> float:\n    result = fpl['labels'].get(self._label_key)\n    if result is None:\n      return 0.0\n    return result\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/evaluators/query_metrics/min_label_positi"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 27,
                  "endLine": 46,
                  "endColumn": 32,
                  "snippet": {
                    "text": "  Returns:\n    The singular value of the feature.\n  \"\"\"\n  feature = fpl['features'].get(key)\n  if feature is None:\n    raise ValueError('feature %s not found in features %s' %\n                     (key, fpl['features']))\n",
                    "rendered": {
                      "text": "  Returns:\n    The singular value of the feature.\n  \"\"\"\n  feature = fpl['features'].get(key)\n  if feature is None:\n    raise ValueError('feature %s not found in features %s' %\n                     (key, fpl['features']))\n",
                      "markdown": "`  Returns:\n    The singular value of the feature.\n  \"\"\"\n  feature = fpl['features'].get(key)\n  if feature is None:\n    raise ValueError('feature %s not found in features %s' %\n                     (key, fpl['features']))\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/evaluators/query_metrics/min_label_positi"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 10,
                  "endLine": 18,
                  "endColumn": 14,
                  "snippet": {
                    "text": "\nCalculates the least index in a query which has a positive label. The final\nreturned value is the weighted average over all queries in the evaluation set\nwhich have at least one labeled entry. Note, ranking is indexed from one, so the\noptimal value for this metric is one. If there are no labeled rows in the\nevaluation set, the final output will be zero.\n\"\"\"\n",
                    "rendered": {
                      "text": "\nCalculates the least index in a query which has a positive label. The final\nreturned value is the weighted average over all queries in the evaluation set\nwhich have at least one labeled entry. Note, ranking is indexed from one, so the\noptimal value for this metric is one. If there are no labeled rows in the\nevaluation set, the final output will be zero.\n\"\"\"\n",
                      "markdown": "`\nCalculates the least index in a query which has a positive label. The final\nreturned value is the weighted average over all queries in the evaluation set\nwhich have at least one labeled entry. Note, ranking is indexed from one, so the\noptimal value for this metric is one. If there are no labeled rows in the\nevaluation set, the final output will be zero.\n\"\"\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/evaluators/query_metrics/min_label_positi"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/evaluators/analysis_table_evaluator.py"
                },
                "region": {
                  "startLine": 86,
                  "startColumn": 36,
                  "endLine": 86,
                  "endColumn": 40,
                  "snippet": {
                    "text": "    extracts: PCollection of Extracts.\n    key: Name to use for key in Evaluation output.\n    include: List or map of keys to include in output. Keys starting with '_'\n      are automatically filtered out at write time. If a map of keys is passed\n      then the keys and sub-keys that exist in the map will be included in the\n      output. An empty dict behaves as a wildcard matching all keys or the value\n      itself. Since matching on feature values is not currently supported, an\n",
                    "rendered": {
                      "text": "    extracts: PCollection of Extracts.\n    key: Name to use for key in Evaluation output.\n    include: List or map of keys to include in output. Keys starting with '_'\n      are automatically filtered out at write time. If a map of keys is passed\n      then the keys and sub-keys that exist in the map will be included in the\n      output. An empty dict behaves as a wildcard matching all keys or the value\n      itself. Since matching on feature values is not currently supported, an\n",
                      "markdown": "`    extracts: PCollection of Extracts.\n    key: Name to use for key in Evaluation output.\n    include: List or map of keys to include in output. Keys starting with '_'\n      are automatically filtered out at write time. If a map of keys is passed\n      then the keys and sub-keys that exist in the map will be included in the\n      output. An empty dict behaves as a wildcard matching all keys or the value\n      itself. Since matching on feature values is not currently supported, an\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/evaluators/analysis_table_evaluator.py"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 36,
                  "endLine": 40,
                  "endColumn": 40,
                  "snippet": {
                    "text": "    key: Name to use for key in Evaluation output.\n    run_after: Extractor to run after (None means before any extractors).\n    include: List or map of keys to include in output. Keys starting with '_'\n      are automatically filtered out at write time. If a map of keys is passed\n      then the keys and sub-keys that exist in the map will be included in the\n      output. An empty dict behaves as a wildcard matching all keys or the value\n      itself. Since matching on feature values is not currently supported, an\n",
                    "rendered": {
                      "text": "    key: Name to use for key in Evaluation output.\n    run_after: Extractor to run after (None means before any extractors).\n    include: List or map of keys to include in output. Keys starting with '_'\n      are automatically filtered out at write time. If a map of keys is passed\n      then the keys and sub-keys that exist in the map will be included in the\n      output. An empty dict behaves as a wildcard matching all keys or the value\n      itself. Since matching on feature values is not currently supported, an\n",
                      "markdown": "`    key: Name to use for key in Evaluation output.\n    run_after: Extractor to run after (None means before any extractors).\n    include: List or map of keys to include in output. Keys starting with '_'\n      are automatically filtered out at write time. If a map of keys is passed\n      then the keys and sub-keys that exist in the map will be included in the\n      output. An empty dict behaves as a wildcard matching all keys or the value\n      itself. Since matching on feature values is not currently supported, an\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/evaluators/analysis_table_evaluator.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/eval_saved_model/example_trainers/fixed_p"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/eval_saved_model/example_trainers/fixed_p"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/eval_saved_model/example_trainers/fixed_p"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/eval_saved_model/example_trainers/fixed_p"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/eval_metrics_graph/__init__.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/contrib/model_eval_lib_test.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/contrib/model_eval_lib_test.py"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 11,
                  "endLine": 65,
                  "endColumn": 17,
                  "snippet": {
                    "text": "      if isinstance(expected_column.value, (np.ndarray, list)):\n        # verify the arrays are identical\n        if sort_values:\n          # sort got value for testing non-deterministic values\n          got_value = sorted(got_column.value)\n        else:\n          got_value = got_column.value\n",
                    "rendered": {
                      "text": "      if isinstance(expected_column.value, (np.ndarray, list)):\n        # verify the arrays are identical\n        if sort_values:\n          # sort got value for testing non-deterministic values\n          got_value = sorted(got_column.value)\n        else:\n          got_value = got_column.value\n",
                      "markdown": "`      if isinstance(expected_column.value, (np.ndarray, list)):\n        # verify the arrays are identical\n        if sort_values:\n          # sort got value for testing non-deterministic values\n          got_value = sorted(got_column.value)\n        else:\n          got_value = got_column.value\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/contrib/model_eval_lib.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/contrib/export_test.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/api/verifier_lib.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/api/types_test.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/addons/fairness/notebook/colab/util.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/addons/fairness/notebook/colab/util.py"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 7,
                  "endLine": 35,
                  "endColumn": 15,
                  "snippet": {
                    "text": "    ui_payload: A Python dictionary of data provided as attributes to the\n      <fairness-nb-container /> JS web component.\n    trusted_html_for_vulcanized_tfma_js: A trusted string of HTML which contains\n      a script tag inlining the vulcanized_tfma.js dependency, or a reference to\n      that script.  Callers are responsible for ensuring this HTML is trusted.\n    event_handlers: Dict of event keys and handler functions, for responding in\n      Python to events fired in the JS web component.  Used for WIT integration\n",
                    "rendered": {
                      "text": "    ui_payload: A Python dictionary of data provided as attributes to the\n      <fairness-nb-container /> JS web component.\n    trusted_html_for_vulcanized_tfma_js: A trusted string of HTML which contains\n      a script tag inlining the vulcanized_tfma.js dependency, or a reference to\n      that script.  Callers are responsible for ensuring this HTML is trusted.\n    event_handlers: Dict of event keys and handler functions, for responding in\n      Python to events fired in the JS web component.  Used for WIT integration\n",
                      "markdown": "`    ui_payload: A Python dictionary of data provided as attributes to the\n      <fairness-nb-container /> JS web component.\n    trusted_html_for_vulcanized_tfma_js: A trusted string of HTML which contains\n      a script tag inlining the vulcanized_tfma.js dependency, or a reference to\n      that script.  Callers are responsible for ensuring this HTML is trusted.\n    event_handlers: Dict of event keys and handler functions, for responding in\n      Python to events fired in the JS web component.  Used for WIT integration\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/addons/fairness/notebook/colab/renderer.p"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/addons/fairness/metrics/fairness_indicato"
                },
                "region": {
                  "startLine": 90,
                  "startColumn": 46,
                  "endLine": 90,
                  "endColumn": 50,
                  "snippet": {
                    "text": "    sub_key: Optional[metric_types.SubKey] = None,\n    class_weights: Optional[Dict[int, float]] = None,\n    example_weighted: bool = False) -> metric_types.MetricComputations:\n  \"\"\"Returns computations for fairness metrics at thresholds.\"\"\"\n  metric_key_by_name_by_threshold = collections.defaultdict(dict)\n  keys = []\n  digits_num = calculate_digits(thresholds)\n",
                    "rendered": {
                      "text": "    sub_key: Optional[metric_types.SubKey] = None,\n    class_weights: Optional[Dict[int, float]] = None,\n    example_weighted: bool = False) -> metric_types.MetricComputations:\n  \"\"\"Returns computations for fairness metrics at thresholds.\"\"\"\n  metric_key_by_name_by_threshold = collections.defaultdict(dict)\n  keys = []\n  digits_num = calculate_digits(thresholds)\n",
                      "markdown": "`    sub_key: Optional[metric_types.SubKey] = None,\n    class_weights: Optional[Dict[int, float]] = None,\n    example_weighted: bool = False) -> metric_types.MetricComputations:\n  \"\"\"Returns computations for fairness metrics at thresholds.\"\"\"\n  metric_key_by_name_by_threshold = collections.defaultdict(dict)\n  keys = []\n  digits_num = calculate_digits(thresholds)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/addons/fairness/metrics/fairness_indicato"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/addons/fairness/__init__.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/sdk.py"
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 34,
                  "endLine": 57,
                  "endColumn": 38,
                  "snippet": {
                    "text": "from tensorflow_model_analysis.constants import TFMA_EVAL\nfrom tensorflow_model_analysis.constants import VALIDATIONS_KEY\n\n# Allow proto types to be imported at the top-level since proto's live in\n# the tensorflow_model_analysis namespace.\n# pylint: disable=g-importing-member\nfrom tensorflow_model_analysis.proto.config_pb2 import AggregationOptions\n",
                    "rendered": {
                      "text": "from tensorflow_model_analysis.constants import TFMA_EVAL\nfrom tensorflow_model_analysis.constants import VALIDATIONS_KEY\n\n# Allow proto types to be imported at the top-level since proto's live in\n# the tensorflow_model_analysis namespace.\n# pylint: disable=g-importing-member\nfrom tensorflow_model_analysis.proto.config_pb2 import AggregationOptions\n",
                      "markdown": "`from tensorflow_model_analysis.constants import TFMA_EVAL\nfrom tensorflow_model_analysis.constants import VALIDATIONS_KEY\n\n# Allow proto types to be imported at the top-level since proto's live in\n# the tensorflow_model_analysis namespace.\n# pylint: disable=g-importing-member\nfrom tensorflow_model_analysis.proto.config_pb2 import AggregationOptions\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/sdk.py"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 32,
                  "endLine": 28,
                  "endColumn": 36,
                  "snippet": {
                    "text": "\n# pylint: disable=unused-import\n\n# Allow constants to be imported at the top-level since they live in root dir.\nfrom tensorflow_model_analysis.constants import ANALYSIS_KEY\nfrom tensorflow_model_analysis.constants import ARROW_INPUT_COLUMN\nfrom tensorflow_model_analysis.constants import ARROW_RECORD_BATCH_KEY\n",
                    "rendered": {
                      "text": "\n# pylint: disable=unused-import\n\n# Allow constants to be imported at the top-level since they live in root dir.\nfrom tensorflow_model_analysis.constants import ANALYSIS_KEY\nfrom tensorflow_model_analysis.constants import ARROW_INPUT_COLUMN\nfrom tensorflow_model_analysis.constants import ARROW_RECORD_BATCH_KEY\n",
                      "markdown": "`\n# pylint: disable=unused-import\n\n# Allow constants to be imported at the top-level since they live in root dir.\nfrom tensorflow_model_analysis.constants import ANALYSIS_KEY\nfrom tensorflow_model_analysis.constants import ARROW_INPUT_COLUMN\nfrom tensorflow_model_analysis.constants import ARROW_RECORD_BATCH_KEY\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/sdk.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000801"
          },
          "message": {
            "text": "Backdoor: Executing Obfuscated Code",
            "id": "BD000801"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/proto/metrics_for_slice_pb2.py"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 12821,
                  "endLine": 28,
                  "endColumn": 12841,
                  "snippet": {
                    "text": "orflow_model_analysis.AttributionsKey\\x12\\x64\\n\\x06values\\x18\\x02 \\x03(\\x0b\\x32T.tensorflow_model_analysis.AttributionsForSlice.AttributionsKeyAndValues.ValuesEntry\\x1aU\\n\\x0bValuesEntry\\x12\\x0b\\n\\x03key\\x18\\x01 \\x01(\\t\\x12\\x35\\n\\x05value\\x18\\x02 \\x01(\\x0b\\x32&.tensorflow_model_analysis.MetricValue:\\x02\\x38\\x01\\x42\\x14\\n\\x12slicing_spec_oneofb\\x06proto3')\n\n_globals = globals()\n_builder.BuildMessageAndEnumDescriptors(DESCRIPTOR, _globals)\n_builder.BuildTopDescriptorsAndMessages(DESCRIPTOR, 'tensorflow_model_analysis.proto.metrics_for_slice_pb2', _globals)\nif not _descriptor._USE_C_DESCRIPTORS:\n  DESCRIPTOR._loaded",
                    "rendered": {
                      "text": "orflow_model_analysis.AttributionsKey\\x12\\x64\\n\\x06values\\x18\\x02 \\x03(\\x0b\\x32T.tensorflow_model_analysis.AttributionsForSlice.AttributionsKeyAndValues.ValuesEntry\\x1aU\\n\\x0bValuesEntry\\x12\\x0b\\n\\x03key\\x18\\x01 \\x01(\\t\\x12\\x35\\n\\x05value\\x18\\x02 \\x01(\\x0b\\x32&.tensorflow_model_analysis.MetricValue:\\x02\\x38\\x01\\x42\\x14\\n\\x12slicing_spec_oneofb\\x06proto3')\n\n_globals = globals()\n_builder.BuildMessageAndEnumDescriptors(DESCRIPTOR, _globals)\n_builder.BuildTopDescriptorsAndMessages(DESCRIPTOR, 'tensorflow_model_analysis.proto.metrics_for_slice_pb2', _globals)\nif not _descriptor._USE_C_DESCRIPTORS:\n  DESCRIPTOR._loaded",
                      "markdown": "`orflow_model_analysis.AttributionsKey\\x12\\x64\\n\\x06values\\x18\\x02 \\x03(\\x0b\\x32T.tensorflow_model_analysis.AttributionsForSlice.AttributionsKeyAndValues.ValuesEntry\\x1aU\\n\\x0bValuesEntry\\x12\\x0b\\n\\x03key\\x18\\x01 \\x01(\\t\\x12\\x35\\n\\x05value\\x18\\x02 \\x01(\\x0b\\x32&.tensorflow_model_analysis.MetricValue:\\x02\\x38\\x01\\x42\\x14\\n\\x12slicing_spec_oneofb\\x06proto3')\n\n_globals = globals()\n_builder.BuildMessageAndEnumDescriptors(DESCRIPTOR, _globals)\n_builder.BuildTopDescriptorsAndMessages(DESCRIPTOR, 'tensorflow_model_analysis.proto.metrics_for_slice_pb2', _globals)\nif not _descriptor._USE_C_DESCRIPTORS:\n  DESCRIPTOR._loaded`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000801"
          },
          "message": {
            "text": "Backdoor: Executing Obfuscated Code",
            "id": "BD000801"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/proto/metrics_for_slice_pb2.py"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 11662,
                  "endLine": 28,
                  "endColumn": 11682,
                  "snippet": {
                    "text": "\\n\\x0fPlotKeyAndValue\\x12/\\n\\x03key\\x18\\x01 \\x01(\\x0b\\x32\\\".tensorflow_model_analysis.PlotKey\\x12\\x32\\n\\x05value\\x18\\x02 \\x01(\\x0b\\x32#.tensorflow_model_analysis.PlotData\\x1aQ\\n\\nPlotsEntry\\x12\\x0b\\n\\x03key\\x18\\x01 \\x01(\\t\\x12\\x32\\n\\x05value\\x18\\x02 \\x01(\\x0b\\x32#.tensorflow_model_analysis.PlotData:\\x02\\x38\\x01\\x42\\x14\\n\\x12slicing_spec_oneofJ\\x04\\x08\\t\\x10\\n\\\"\\xc3\\x01\\n\\x0f\\x41ttributionsKey\\x12\\x0c\\n\\x04name\\x18\\x01 \\x01(\\t\\x12\\x12\\n\\nmodel_name\\x18\\x02 \\x01(\\t\\x12\\x13\\n\\x0boutput_name\\x18\\x03 \\x01(\\t\\x12\\x32\\n\\x07sub_key\\x18\\x04 \\x01(\\x0b\\x32!.tensorflow_model_analysis.SubKey\\x12\\x34\\n\\x10\\x65xample_weighted\\x",
                    "rendered": {
                      "text": "\\n\\x0fPlotKeyAndValue\\x12/\\n\\x03key\\x18\\x01 \\x01(\\x0b\\x32\\\".tensorflow_model_analysis.PlotKey\\x12\\x32\\n\\x05value\\x18\\x02 \\x01(\\x0b\\x32#.tensorflow_model_analysis.PlotData\\x1aQ\\n\\nPlotsEntry\\x12\\x0b\\n\\x03key\\x18\\x01 \\x01(\\t\\x12\\x32\\n\\x05value\\x18\\x02 \\x01(\\x0b\\x32#.tensorflow_model_analysis.PlotData:\\x02\\x38\\x01\\x42\\x14\\n\\x12slicing_spec_oneofJ\\x04\\x08\\t\\x10\\n\\\"\\xc3\\x01\\n\\x0f\\x41ttributionsKey\\x12\\x0c\\n\\x04name\\x18\\x01 \\x01(\\t\\x12\\x12\\n\\nmodel_name\\x18\\x02 \\x01(\\t\\x12\\x13\\n\\x0boutput_name\\x18\\x03 \\x01(\\t\\x12\\x32\\n\\x07sub_key\\x18\\x04 \\x01(\\x0b\\x32!.tensorflow_model_analysis.SubKey\\x12\\x34\\n\\x10\\x65xample_weighted\\x",
                      "markdown": "`\\n\\x0fPlotKeyAndValue\\x12/\\n\\x03key\\x18\\x01 \\x01(\\x0b\\x32\\\".tensorflow_model_analysis.PlotKey\\x12\\x32\\n\\x05value\\x18\\x02 \\x01(\\x0b\\x32#.tensorflow_model_analysis.PlotData\\x1aQ\\n\\nPlotsEntry\\x12\\x0b\\n\\x03key\\x18\\x01 \\x01(\\t\\x12\\x32\\n\\x05value\\x18\\x02 \\x01(\\x0b\\x32#.tensorflow_model_analysis.PlotData:\\x02\\x38\\x01\\x42\\x14\\n\\x12slicing_spec_oneofJ\\x04\\x08\\t\\x10\\n\\\"\\xc3\\x01\\n\\x0f\\x41ttributionsKey\\x12\\x0c\\n\\x04name\\x18\\x01 \\x01(\\t\\x12\\x12\\n\\nmodel_name\\x18\\x02 \\x01(\\t\\x12\\x13\\n\\x0boutput_name\\x18\\x03 \\x01(\\t\\x12\\x32\\n\\x07sub_key\\x18\\x04 \\x01(\\x0b\\x32!.tensorflow_model_analysis.SubKey\\x12\\x34\\n\\x10\\x65xample_weighted\\x`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000801"
          },
          "message": {
            "text": "Backdoor: Executing Obfuscated Code",
            "id": "BD000801"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/proto/metrics_for_slice_pb2.py"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 11236,
                  "endLine": 28,
                  "endColumn": 11256,
                  "snippet": {
                    "text": "ceKeyH\\x00\\x12\\x43\\n\\x0f\\x63ross_slice_key\\x18\\x04 \\x01(\\x0b\\x32(.tensorflow_model_analysis.CrossSliceKeyH\\x00\\x12V\\n\\x14plot_keys_and_values\\x18\\x08 \\x03(\\x0b\\x32\\x38.tensorflow_model_analysis.PlotsForSlice.PlotKeyAndValue\\x12:\\n\\tplot_data\\x18\\x02 \\x01(\\x0b\\x32#.tensorflow_model_analysis.PlotDataB\\x02\\x18\\x01\\x12\\x46\\n\\x05plots\\x18\\x03 \\x03(\\x0b\\x32\\x33.tensorflow_model_analysis.PlotsForSlice.PlotsEntryB\\x02\\x18\\x01\\x1av\\n\\x0fPlotKeyAndValue\\x12/\\n\\x03key\\x18\\x01 \\x01(\\x0b\\x32\\\".tensorflow_model_analysis.PlotKey\\x12\\x32\\n\\x05value\\x18\\x02 \\x01(\\x0b\\x32#.tensorflow_model_analysis.PlotData\\x1aQ\\n\\nPlotsEntry\\x12\\",
                    "rendered": {
                      "text": "ceKeyH\\x00\\x12\\x43\\n\\x0f\\x63ross_slice_key\\x18\\x04 \\x01(\\x0b\\x32(.tensorflow_model_analysis.CrossSliceKeyH\\x00\\x12V\\n\\x14plot_keys_and_values\\x18\\x08 \\x03(\\x0b\\x32\\x38.tensorflow_model_analysis.PlotsForSlice.PlotKeyAndValue\\x12:\\n\\tplot_data\\x18\\x02 \\x01(\\x0b\\x32#.tensorflow_model_analysis.PlotDataB\\x02\\x18\\x01\\x12\\x46\\n\\x05plots\\x18\\x03 \\x03(\\x0b\\x32\\x33.tensorflow_model_analysis.PlotsForSlice.PlotsEntryB\\x02\\x18\\x01\\x1av\\n\\x0fPlotKeyAndValue\\x12/\\n\\x03key\\x18\\x01 \\x01(\\x0b\\x32\\\".tensorflow_model_analysis.PlotKey\\x12\\x32\\n\\x05value\\x18\\x02 \\x01(\\x0b\\x32#.tensorflow_model_analysis.PlotData\\x1aQ\\n\\nPlotsEntry\\x12\\",
                      "markdown": "`ceKeyH\\x00\\x12\\x43\\n\\x0f\\x63ross_slice_key\\x18\\x04 \\x01(\\x0b\\x32(.tensorflow_model_analysis.CrossSliceKeyH\\x00\\x12V\\n\\x14plot_keys_and_values\\x18\\x08 \\x03(\\x0b\\x32\\x38.tensorflow_model_analysis.PlotsForSlice.PlotKeyAndValue\\x12:\\n\\tplot_data\\x18\\x02 \\x01(\\x0b\\x32#.tensorflow_model_analysis.PlotDataB\\x02\\x18\\x01\\x12\\x46\\n\\x05plots\\x18\\x03 \\x03(\\x0b\\x32\\x33.tensorflow_model_analysis.PlotsForSlice.PlotsEntryB\\x02\\x18\\x01\\x1av\\n\\x0fPlotKeyAndValue\\x12/\\n\\x03key\\x18\\x01 \\x01(\\x0b\\x32\\\".tensorflow_model_analysis.PlotKey\\x12\\x32\\n\\x05value\\x18\\x02 \\x01(\\x0b\\x32#.tensorflow_model_analysis.PlotData\\x1aQ\\n\\nPlotsEntry\\x12\\`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000801"
          },
          "message": {
            "text": "Backdoor: Executing Obfuscated Code",
            "id": "BD000801"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/proto/metrics_for_slice_pb2.py"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 8021,
                  "endLine": 28,
                  "endColumn": 8041,
                  "snippet": {
                    "text": "lysis.MetricValue\\x12J\\n\\x13\\x63onfidence_interval\\x18\\x03 \\x01(\\x0b\\x32-.tensorflow_model_analysis.ConfidenceInterval\\x1aV\\n\\x0cMetricsEntry\\x12\\x0b\\n\\x03key\\x18\\x01 \\x01(\\t\\x12\\x35\\n\\x05value\\x18\\x02 \\x01(\\x0b\\x32&.tensorflow_model_analysis.MetricValue:\\x02\\x38\\x01\\x42\\x14\\n\\x12slicing_spec_oneofJ\\x04\\x08\\x35\\x10\\x36\\\"\\x80\\x03\\n\\x1b\\x43\\x61librationHistogramBuckets\\x12N\\n\\x07\\x62uckets\\x18\\x01 \\x03(\\x0b\\x32=.tensorflow_model_analysis.CalibrationHistogramBuckets.Bucket\\x1a\\x90\\x02\\n\\x06\\x42ucket\\x12!\\n\\x19lower_threshold_inclusive\\x18\\x01 \\x01(\\x01\\x12!\\n\\x19upper_threshold_exclusive\\x18\\x02 \\x01(\\x01\\x12;\\n\\x15",
                    "rendered": {
                      "text": "lysis.MetricValue\\x12J\\n\\x13\\x63onfidence_interval\\x18\\x03 \\x01(\\x0b\\x32-.tensorflow_model_analysis.ConfidenceInterval\\x1aV\\n\\x0cMetricsEntry\\x12\\x0b\\n\\x03key\\x18\\x01 \\x01(\\t\\x12\\x35\\n\\x05value\\x18\\x02 \\x01(\\x0b\\x32&.tensorflow_model_analysis.MetricValue:\\x02\\x38\\x01\\x42\\x14\\n\\x12slicing_spec_oneofJ\\x04\\x08\\x35\\x10\\x36\\\"\\x80\\x03\\n\\x1b\\x43\\x61librationHistogramBuckets\\x12N\\n\\x07\\x62uckets\\x18\\x01 \\x03(\\x0b\\x32=.tensorflow_model_analysis.CalibrationHistogramBuckets.Bucket\\x1a\\x90\\x02\\n\\x06\\x42ucket\\x12!\\n\\x19lower_threshold_inclusive\\x18\\x01 \\x01(\\x01\\x12!\\n\\x19upper_threshold_exclusive\\x18\\x02 \\x01(\\x01\\x12;\\n\\x15",
                      "markdown": "`lysis.MetricValue\\x12J\\n\\x13\\x63onfidence_interval\\x18\\x03 \\x01(\\x0b\\x32-.tensorflow_model_analysis.ConfidenceInterval\\x1aV\\n\\x0cMetricsEntry\\x12\\x0b\\n\\x03key\\x18\\x01 \\x01(\\t\\x12\\x35\\n\\x05value\\x18\\x02 \\x01(\\x0b\\x32&.tensorflow_model_analysis.MetricValue:\\x02\\x38\\x01\\x42\\x14\\n\\x12slicing_spec_oneofJ\\x04\\x08\\x35\\x10\\x36\\\"\\x80\\x03\\n\\x1b\\x43\\x61librationHistogramBuckets\\x12N\\n\\x07\\x62uckets\\x18\\x01 \\x03(\\x0b\\x32=.tensorflow_model_analysis.CalibrationHistogramBuckets.Bucket\\x1a\\x90\\x02\\n\\x06\\x42ucket\\x12!\\n\\x19lower_threshold_inclusive\\x18\\x01 \\x01(\\x01\\x12!\\n\\x19upper_threshold_exclusive\\x18\\x02 \\x01(\\x01\\x12;\\n\\x15`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000801"
          },
          "message": {
            "text": "Backdoor: Executing Obfuscated Code",
            "id": "BD000801"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/proto/metrics_for_slice_pb2.py"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 7976,
                  "endLine": 28,
                  "endColumn": 7996,
                  "snippet": {
                    "text": "e\\x18\\x02 \\x01(\\x0b\\x32&.tensorflow_model_analysis.MetricValue\\x12J\\n\\x13\\x63onfidence_interval\\x18\\x03 \\x01(\\x0b\\x32-.tensorflow_model_analysis.ConfidenceInterval\\x1aV\\n\\x0cMetricsEntry\\x12\\x0b\\n\\x03key\\x18\\x01 \\x01(\\t\\x12\\x35\\n\\x05value\\x18\\x02 \\x01(\\x0b\\x32&.tensorflow_model_analysis.MetricValue:\\x02\\x38\\x01\\x42\\x14\\n\\x12slicing_spec_oneofJ\\x04\\x08\\x35\\x10\\x36\\\"\\x80\\x03\\n\\x1b\\x43\\x61librationHistogramBuckets\\x12N\\n\\x07\\x62uckets\\x18\\x01 \\x03(\\x0b\\x32=.tensorflow_model_analysis.CalibrationHistogramBuckets.Bucket\\x1a\\x90\\x02\\n\\x06\\x42ucket\\x12!\\n\\x19lower_threshold_inclusive\\x18\\x01 \\x01(\\x01\\x12!\\n\\x19upper_thr",
                    "rendered": {
                      "text": "e\\x18\\x02 \\x01(\\x0b\\x32&.tensorflow_model_analysis.MetricValue\\x12J\\n\\x13\\x63onfidence_interval\\x18\\x03 \\x01(\\x0b\\x32-.tensorflow_model_analysis.ConfidenceInterval\\x1aV\\n\\x0cMetricsEntry\\x12\\x0b\\n\\x03key\\x18\\x01 \\x01(\\t\\x12\\x35\\n\\x05value\\x18\\x02 \\x01(\\x0b\\x32&.tensorflow_model_analysis.MetricValue:\\x02\\x38\\x01\\x42\\x14\\n\\x12slicing_spec_oneofJ\\x04\\x08\\x35\\x10\\x36\\\"\\x80\\x03\\n\\x1b\\x43\\x61librationHistogramBuckets\\x12N\\n\\x07\\x62uckets\\x18\\x01 \\x03(\\x0b\\x32=.tensorflow_model_analysis.CalibrationHistogramBuckets.Bucket\\x1a\\x90\\x02\\n\\x06\\x42ucket\\x12!\\n\\x19lower_threshold_inclusive\\x18\\x01 \\x01(\\x01\\x12!\\n\\x19upper_thr",
                      "markdown": "`e\\x18\\x02 \\x01(\\x0b\\x32&.tensorflow_model_analysis.MetricValue\\x12J\\n\\x13\\x63onfidence_interval\\x18\\x03 \\x01(\\x0b\\x32-.tensorflow_model_analysis.ConfidenceInterval\\x1aV\\n\\x0cMetricsEntry\\x12\\x0b\\n\\x03key\\x18\\x01 \\x01(\\t\\x12\\x35\\n\\x05value\\x18\\x02 \\x01(\\x0b\\x32&.tensorflow_model_analysis.MetricValue:\\x02\\x38\\x01\\x42\\x14\\n\\x12slicing_spec_oneofJ\\x04\\x08\\x35\\x10\\x36\\\"\\x80\\x03\\n\\x1b\\x43\\x61librationHistogramBuckets\\x12N\\n\\x07\\x62uckets\\x18\\x01 \\x03(\\x0b\\x32=.tensorflow_model_analysis.CalibrationHistogramBuckets.Bucket\\x1a\\x90\\x02\\n\\x06\\x42ucket\\x12!\\n\\x19lower_threshold_inclusive\\x18\\x01 \\x01(\\x01\\x12!\\n\\x19upper_thr`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000801"
          },
          "message": {
            "text": "Backdoor: Executing Obfuscated Code",
            "id": "BD000801"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/proto/metrics_for_slice_pb2.py"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 7535,
                  "endLine": 28,
                  "endColumn": 7559,
                  "snippet": {
                    "text": "3ross_slice_key\\x18\\x03 \\x01(\\x0b\\x32(.tensorflow_model_analysis.CrossSliceKeyH\\x00\\x12\\\\\\n\\x16metric_keys_and_values\\x18\\x33 \\x03(\\x0b\\x32<.tensorflow_model_analysis.MetricsForSlice.MetricKeyAndValue\\x12L\\n\\x07metrics\\x18\\x02 \\x03(\\x0b\\x32\\x37.tensorflow_model_analysis.MetricsForSlice.MetricsEntryB\\x02\\x18\\x01\\x1a\\xc9\\x01\\n\\x11MetricKeyAndValue\\x12\\x31\\n\\x03key\\x18\\x01 \\x01(\\x0b\\x32$.tensorflow_model_analysis.MetricKey\\x12\\x35\\n\\x05value\\x18\\x02 \\x01(\\x0b\\x32&.tensorflow_model_analysis.MetricValue\\x12J\\n\\x13\\x63onfidence_interval\\x18\\x03 \\x01(\\x0b\\x32-.tensorflow_model_analysis.ConfidenceInterval\\x1aV\\n\\x0cMetricsEn",
                    "rendered": {
                      "text": "3ross_slice_key\\x18\\x03 \\x01(\\x0b\\x32(.tensorflow_model_analysis.CrossSliceKeyH\\x00\\x12\\\\\\n\\x16metric_keys_and_values\\x18\\x33 \\x03(\\x0b\\x32<.tensorflow_model_analysis.MetricsForSlice.MetricKeyAndValue\\x12L\\n\\x07metrics\\x18\\x02 \\x03(\\x0b\\x32\\x37.tensorflow_model_analysis.MetricsForSlice.MetricsEntryB\\x02\\x18\\x01\\x1a\\xc9\\x01\\n\\x11MetricKeyAndValue\\x12\\x31\\n\\x03key\\x18\\x01 \\x01(\\x0b\\x32$.tensorflow_model_analysis.MetricKey\\x12\\x35\\n\\x05value\\x18\\x02 \\x01(\\x0b\\x32&.tensorflow_model_analysis.MetricValue\\x12J\\n\\x13\\x63onfidence_interval\\x18\\x03 \\x01(\\x0b\\x32-.tensorflow_model_analysis.ConfidenceInterval\\x1aV\\n\\x0cMetricsEn",
                      "markdown": "`3ross_slice_key\\x18\\x03 \\x01(\\x0b\\x32(.tensorflow_model_analysis.CrossSliceKeyH\\x00\\x12\\\\\\n\\x16metric_keys_and_values\\x18\\x33 \\x03(\\x0b\\x32<.tensorflow_model_analysis.MetricsForSlice.MetricKeyAndValue\\x12L\\n\\x07metrics\\x18\\x02 \\x03(\\x0b\\x32\\x37.tensorflow_model_analysis.MetricsForSlice.MetricsEntryB\\x02\\x18\\x01\\x1a\\xc9\\x01\\n\\x11MetricKeyAndValue\\x12\\x31\\n\\x03key\\x18\\x01 \\x01(\\x0b\\x32$.tensorflow_model_analysis.MetricKey\\x12\\x35\\n\\x05value\\x18\\x02 \\x01(\\x0b\\x32&.tensorflow_model_analysis.MetricValue\\x12J\\n\\x13\\x63onfidence_interval\\x18\\x03 \\x01(\\x0b\\x32-.tensorflow_model_analysis.ConfidenceInterval\\x1aV\\n\\x0cMetricsEn`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000801"
          },
          "message": {
            "text": "Backdoor: Executing Obfuscated Code",
            "id": "BD000801"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/proto/metrics_for_slice_pb2.py"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 6146,
                  "endLine": 28,
                  "endColumn": 6166,
                  "snippet": {
                    "text": "nknown_type\\x18\\x03 \\x01(\\x0b\\x32&.tensorflow_model_analysis.UnknownTypeH\\x00\\x12\\x15\\n\\x0b\\x62ytes_value\\x18\\x06 \\x01(\\x0cH\\x00\\x12<\\n\\x0b\\x61rray_value\\x18\\x07 \\x01(\\x0b\\x32%.tensorflow_model_analysis.ArrayValueH\\x00\\x12\\x17\\n\\rdebug_message\\x18\\n \\x01(\\tH\\x00\\x42\\x06\\n\\x04typeJ\\x04\\x08\\x08\\x10\\tJ\\x04\\x08\\x0e\\x10\\x0f\\\"m\\n\\x0eSingleSliceKey\\x12\\x0e\\n\\x06\\x63olumn\\x18\\x01 \\x01(\\t\\x12\\x15\\n\\x0b\\x62ytes_value\\x18\\x02 \\x01(\\x0cH\\x00\\x12\\x15\\n\\x0b\\x66loat_value\\x18\\x03 \\x01(\\x02H\\x00\\x12\\x15\\n\\x0bint64_value\\x18\\x04 \\x01(\\x03H\\x00\\x42\\x06\\n\\x04kind\\\"P\\n\\x08SliceKey\\x12\\x44\\n\\x11single_slice_keys\\x18\\x01 \\x03(\\x0b\\x32",
                    "rendered": {
                      "text": "nknown_type\\x18\\x03 \\x01(\\x0b\\x32&.tensorflow_model_analysis.UnknownTypeH\\x00\\x12\\x15\\n\\x0b\\x62ytes_value\\x18\\x06 \\x01(\\x0cH\\x00\\x12<\\n\\x0b\\x61rray_value\\x18\\x07 \\x01(\\x0b\\x32%.tensorflow_model_analysis.ArrayValueH\\x00\\x12\\x17\\n\\rdebug_message\\x18\\n \\x01(\\tH\\x00\\x42\\x06\\n\\x04typeJ\\x04\\x08\\x08\\x10\\tJ\\x04\\x08\\x0e\\x10\\x0f\\\"m\\n\\x0eSingleSliceKey\\x12\\x0e\\n\\x06\\x63olumn\\x18\\x01 \\x01(\\t\\x12\\x15\\n\\x0b\\x62ytes_value\\x18\\x02 \\x01(\\x0cH\\x00\\x12\\x15\\n\\x0b\\x66loat_value\\x18\\x03 \\x01(\\x02H\\x00\\x12\\x15\\n\\x0bint64_value\\x18\\x04 \\x01(\\x03H\\x00\\x42\\x06\\n\\x04kind\\\"P\\n\\x08SliceKey\\x12\\x44\\n\\x11single_slice_keys\\x18\\x01 \\x03(\\x0b\\x32",
                      "markdown": "`nknown_type\\x18\\x03 \\x01(\\x0b\\x32&.tensorflow_model_analysis.UnknownTypeH\\x00\\x12\\x15\\n\\x0b\\x62ytes_value\\x18\\x06 \\x01(\\x0cH\\x00\\x12<\\n\\x0b\\x61rray_value\\x18\\x07 \\x01(\\x0b\\x32%.tensorflow_model_analysis.ArrayValueH\\x00\\x12\\x17\\n\\rdebug_message\\x18\\n \\x01(\\tH\\x00\\x42\\x06\\n\\x04typeJ\\x04\\x08\\x08\\x10\\tJ\\x04\\x08\\x0e\\x10\\x0f\\\"m\\n\\x0eSingleSliceKey\\x12\\x0e\\n\\x06\\x63olumn\\x18\\x01 \\x01(\\t\\x12\\x15\\n\\x0b\\x62ytes_value\\x18\\x02 \\x01(\\x0cH\\x00\\x12\\x15\\n\\x0b\\x66loat_value\\x18\\x03 \\x01(\\x02H\\x00\\x12\\x15\\n\\x0bint64_value\\x18\\x04 \\x01(\\x03H\\x00\\x42\\x06\\n\\x04kind\\\"P\\n\\x08SliceKey\\x12\\x44\\n\\x11single_slice_keys\\x18\\x01 \\x03(\\x0b\\x32`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000801"
          },
          "message": {
            "text": "Backdoor: Executing Obfuscated Code",
            "id": "BD000801"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/proto/metrics_for_slice_pb2.py"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 3736,
                  "endLine": 28,
                  "endColumn": 3756,
                  "snippet": {
                    "text": "_false_positives\\x18\\n \\x01(\\x0b\\x32\\'.tensorflow_model_analysis.BoundedValueB\\x02\\x18\\x01\\x12K\\n\\x16\\x62ounded_true_positives\\x18\\x0b \\x01(\\x0b\\x32\\'.tensorflow_model_analysis.BoundedValueB\\x02\\x18\\x01\\x12\\x46\\n\\x11\\x62ounded_precision\\x18\\x0c \\x01(\\x0b\\x32\\'.tensorflow_model_analysis.BoundedValueB\\x02\\x18\\x01\\x12\\x43\\n\\x0e\\x62ounded_recall\\x18\\r \\x01(\\x0b\\x32\\'.tensorflow_model_analysis.BoundedValueB\\x02\\x18\\x01\\x12Y\\n\\x1et_distribution_false_negatives\\x18\\x0e \\x01(\\x0b\\x32-.tensorflow_model_analysis.TDistributionValueB\\x02\\x18\\x01\\x12X\\n\\x1dt_distribution_true_negatives\\x18\\x0f \\x01(\\x0b\\x32-.tensorflow_model_",
                    "rendered": {
                      "text": "_false_positives\\x18\\n \\x01(\\x0b\\x32\\'.tensorflow_model_analysis.BoundedValueB\\x02\\x18\\x01\\x12K\\n\\x16\\x62ounded_true_positives\\x18\\x0b \\x01(\\x0b\\x32\\'.tensorflow_model_analysis.BoundedValueB\\x02\\x18\\x01\\x12\\x46\\n\\x11\\x62ounded_precision\\x18\\x0c \\x01(\\x0b\\x32\\'.tensorflow_model_analysis.BoundedValueB\\x02\\x18\\x01\\x12\\x43\\n\\x0e\\x62ounded_recall\\x18\\r \\x01(\\x0b\\x32\\'.tensorflow_model_analysis.BoundedValueB\\x02\\x18\\x01\\x12Y\\n\\x1et_distribution_false_negatives\\x18\\x0e \\x01(\\x0b\\x32-.tensorflow_model_analysis.TDistributionValueB\\x02\\x18\\x01\\x12X\\n\\x1dt_distribution_true_negatives\\x18\\x0f \\x01(\\x0b\\x32-.tensorflow_model_",
                      "markdown": "`_false_positives\\x18\\n \\x01(\\x0b\\x32\\'.tensorflow_model_analysis.BoundedValueB\\x02\\x18\\x01\\x12K\\n\\x16\\x62ounded_true_positives\\x18\\x0b \\x01(\\x0b\\x32\\'.tensorflow_model_analysis.BoundedValueB\\x02\\x18\\x01\\x12\\x46\\n\\x11\\x62ounded_precision\\x18\\x0c \\x01(\\x0b\\x32\\'.tensorflow_model_analysis.BoundedValueB\\x02\\x18\\x01\\x12\\x43\\n\\x0e\\x62ounded_recall\\x18\\r \\x01(\\x0b\\x32\\'.tensorflow_model_analysis.BoundedValueB\\x02\\x18\\x01\\x12Y\\n\\x1et_distribution_false_negatives\\x18\\x0e \\x01(\\x0b\\x32-.tensorflow_model_analysis.TDistributionValueB\\x02\\x18\\x01\\x12X\\n\\x1dt_distribution_true_negatives\\x18\\x0f \\x01(\\x0b\\x32-.tensorflow_model_`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000801"
          },
          "message": {
            "text": "Backdoor: Executing Obfuscated Code",
            "id": "BD000801"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/proto/metrics_for_slice_pb2.py"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 3626,
                  "endLine": 28,
                  "endColumn": 3646,
                  "snippet": {
                    "text": "_true_negatives\\x18\\t \\x01(\\x0b\\x32\\'.tensorflow_model_analysis.BoundedValueB\\x02\\x18\\x01\\x12L\\n\\x17\\x62ounded_false_positives\\x18\\n \\x01(\\x0b\\x32\\'.tensorflow_model_analysis.BoundedValueB\\x02\\x18\\x01\\x12K\\n\\x16\\x62ounded_true_positives\\x18\\x0b \\x01(\\x0b\\x32\\'.tensorflow_model_analysis.BoundedValueB\\x02\\x18\\x01\\x12\\x46\\n\\x11\\x62ounded_precision\\x18\\x0c \\x01(\\x0b\\x32\\'.tensorflow_model_analysis.BoundedValueB\\x02\\x18\\x01\\x12\\x43\\n\\x0e\\x62ounded_recall\\x18\\r \\x01(\\x0b\\x32\\'.tensorflow_model_analysis.BoundedValueB\\x02\\x18\\x01\\x12Y\\n\\x1et_distribution_false_negatives\\x18\\x0e \\x01(\\x0b\\x32-.tensorflow_model_analysis.TD",
                    "rendered": {
                      "text": "_true_negatives\\x18\\t \\x01(\\x0b\\x32\\'.tensorflow_model_analysis.BoundedValueB\\x02\\x18\\x01\\x12L\\n\\x17\\x62ounded_false_positives\\x18\\n \\x01(\\x0b\\x32\\'.tensorflow_model_analysis.BoundedValueB\\x02\\x18\\x01\\x12K\\n\\x16\\x62ounded_true_positives\\x18\\x0b \\x01(\\x0b\\x32\\'.tensorflow_model_analysis.BoundedValueB\\x02\\x18\\x01\\x12\\x46\\n\\x11\\x62ounded_precision\\x18\\x0c \\x01(\\x0b\\x32\\'.tensorflow_model_analysis.BoundedValueB\\x02\\x18\\x01\\x12\\x43\\n\\x0e\\x62ounded_recall\\x18\\r \\x01(\\x0b\\x32\\'.tensorflow_model_analysis.BoundedValueB\\x02\\x18\\x01\\x12Y\\n\\x1et_distribution_false_negatives\\x18\\x0e \\x01(\\x0b\\x32-.tensorflow_model_analysis.TD",
                      "markdown": "`_true_negatives\\x18\\t \\x01(\\x0b\\x32\\'.tensorflow_model_analysis.BoundedValueB\\x02\\x18\\x01\\x12L\\n\\x17\\x62ounded_false_positives\\x18\\n \\x01(\\x0b\\x32\\'.tensorflow_model_analysis.BoundedValueB\\x02\\x18\\x01\\x12K\\n\\x16\\x62ounded_true_positives\\x18\\x0b \\x01(\\x0b\\x32\\'.tensorflow_model_analysis.BoundedValueB\\x02\\x18\\x01\\x12\\x46\\n\\x11\\x62ounded_precision\\x18\\x0c \\x01(\\x0b\\x32\\'.tensorflow_model_analysis.BoundedValueB\\x02\\x18\\x01\\x12\\x43\\n\\x0e\\x62ounded_recall\\x18\\r \\x01(\\x0b\\x32\\'.tensorflow_model_analysis.BoundedValueB\\x02\\x18\\x01\\x12Y\\n\\x1et_distribution_false_negatives\\x18\\x0e \\x01(\\x0b\\x32-.tensorflow_model_analysis.TD`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000801"
          },
          "message": {
            "text": "Backdoor: Executing Obfuscated Code",
            "id": "BD000801"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/proto/metrics_for_slice_pb2.py"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 3056,
                  "endLine": 28,
                  "endColumn": 3076,
                  "snippet": {
                    "text": "x02 \\x01(\\x01\\x12\\x16\\n\\x0etrue_negatives\\x18\\x03 \\x01(\\x01\\x12\\x17\\n\\x0f\\x66\\x61lse_positives\\x18\\x04 \\x01(\\x01\\x12\\x16\\n\\x0etrue_positives\\x18\\x05 \\x01(\\x01\\x12\\x11\\n\\tprecision\\x18\\x06 \\x01(\\x01\\x12\\x0e\\n\\x06recall\\x18\\x07 \\x01(\\x01\\x12\\x1b\\n\\x13\\x66\\x61lse_positive_rate\\x18\\x14 \\x01(\\x01\\x12\\n\\n\\x02\\x66\\x31\\x18\\x15 \\x01(\\x01\\x12\\x10\\n\\x08\\x61\\x63\\x63uracy\\x18\\x16 \\x01(\\x01\\x12\\x1b\\n\\x13\\x66\\x61lse_omission_rate\\x18\\x17 \\x01(\\x01\\x12L\\n\\x17\\x62ounded_false_negatives\\x18\\x08 \\x01(\\x0b\\x32\\'.tensorflow_model_analysis.BoundedValueB\\x02\\x18\\x01\\x12K\\n\\x16\\x62ounded_true_negatives\\x18\\t \\x01(\\x0b\\x32\\'.tensorflow_m",
                    "rendered": {
                      "text": "x02 \\x01(\\x01\\x12\\x16\\n\\x0etrue_negatives\\x18\\x03 \\x01(\\x01\\x12\\x17\\n\\x0f\\x66\\x61lse_positives\\x18\\x04 \\x01(\\x01\\x12\\x16\\n\\x0etrue_positives\\x18\\x05 \\x01(\\x01\\x12\\x11\\n\\tprecision\\x18\\x06 \\x01(\\x01\\x12\\x0e\\n\\x06recall\\x18\\x07 \\x01(\\x01\\x12\\x1b\\n\\x13\\x66\\x61lse_positive_rate\\x18\\x14 \\x01(\\x01\\x12\\n\\n\\x02\\x66\\x31\\x18\\x15 \\x01(\\x01\\x12\\x10\\n\\x08\\x61\\x63\\x63uracy\\x18\\x16 \\x01(\\x01\\x12\\x1b\\n\\x13\\x66\\x61lse_omission_rate\\x18\\x17 \\x01(\\x01\\x12L\\n\\x17\\x62ounded_false_negatives\\x18\\x08 \\x01(\\x0b\\x32\\'.tensorflow_model_analysis.BoundedValueB\\x02\\x18\\x01\\x12K\\n\\x16\\x62ounded_true_negatives\\x18\\t \\x01(\\x0b\\x32\\'.tensorflow_m",
                      "markdown": "`x02 \\x01(\\x01\\x12\\x16\\n\\x0etrue_negatives\\x18\\x03 \\x01(\\x01\\x12\\x17\\n\\x0f\\x66\\x61lse_positives\\x18\\x04 \\x01(\\x01\\x12\\x16\\n\\x0etrue_positives\\x18\\x05 \\x01(\\x01\\x12\\x11\\n\\tprecision\\x18\\x06 \\x01(\\x01\\x12\\x0e\\n\\x06recall\\x18\\x07 \\x01(\\x01\\x12\\x1b\\n\\x13\\x66\\x61lse_positive_rate\\x18\\x14 \\x01(\\x01\\x12\\n\\n\\x02\\x66\\x31\\x18\\x15 \\x01(\\x01\\x12\\x10\\n\\x08\\x61\\x63\\x63uracy\\x18\\x16 \\x01(\\x01\\x12\\x1b\\n\\x13\\x66\\x61lse_omission_rate\\x18\\x17 \\x01(\\x01\\x12L\\n\\x17\\x62ounded_false_negatives\\x18\\x08 \\x01(\\x0b\\x32\\'.tensorflow_model_analysis.BoundedValueB\\x02\\x18\\x01\\x12K\\n\\x16\\x62ounded_true_negatives\\x18\\t \\x01(\\x0b\\x32\\'.tensorflow_m`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000801"
          },
          "message": {
            "text": "Backdoor: Executing Obfuscated Code",
            "id": "BD000801"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/proto/config_pb2.py"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 8119,
                  "endLine": 28,
                  "endColumn": 8139,
                  "snippet": {
                    "text": "H\\n\\x13\\x63ross_slicing_specs\\x18\\x08 \\x03(\\x0b\\x32+.tensorflow_model_analysis.CrossSlicingSpec\\x12=\\n\\rmetrics_specs\\x18\\x05 \\x03(\\x0b\\x32&.tensorflow_model_analysis.MetricsSpec\\x12\\x33\\n\\x07options\\x18\\x06 \\x01(\\x0b\\x32\\\".tensorflow_model_analysis.OptionsJ\\x04\\x08\\x01\\x10\\x02J\\x04\\x08\\x03\\x10\\x04J\\x04\\x08\\x07\\x10\\x08\\\"%\\n\\x13RepeatedStringValue\\x12\\x0e\\n\\x06values\\x18\\x01 \\x03(\\t\\\"$\\n\\x12RepeatedInt32Value\\x12\\x0e\\n\\x06values\\x18\\x01 \\x03(\\x05\\\"c\\n\\x14\\x45valConfigAndVersion\\x12:\\n\\x0b\\x65val_config\\x18\\x01 \\x01(\\x0b\\x32%.tensorflow_model_analysis.EvalConfig\\x12\\x0f\\n\\x07version\\x18\\x02 \\x01(\\t\\\"\\x8a\\x02\\n\\x07\\",
                    "rendered": {
                      "text": "H\\n\\x13\\x63ross_slicing_specs\\x18\\x08 \\x03(\\x0b\\x32+.tensorflow_model_analysis.CrossSlicingSpec\\x12=\\n\\rmetrics_specs\\x18\\x05 \\x03(\\x0b\\x32&.tensorflow_model_analysis.MetricsSpec\\x12\\x33\\n\\x07options\\x18\\x06 \\x01(\\x0b\\x32\\\".tensorflow_model_analysis.OptionsJ\\x04\\x08\\x01\\x10\\x02J\\x04\\x08\\x03\\x10\\x04J\\x04\\x08\\x07\\x10\\x08\\\"%\\n\\x13RepeatedStringValue\\x12\\x0e\\n\\x06values\\x18\\x01 \\x03(\\t\\\"$\\n\\x12RepeatedInt32Value\\x12\\x0e\\n\\x06values\\x18\\x01 \\x03(\\x05\\\"c\\n\\x14\\x45valConfigAndVersion\\x12:\\n\\x0b\\x65val_config\\x18\\x01 \\x01(\\x0b\\x32%.tensorflow_model_analysis.EvalConfig\\x12\\x0f\\n\\x07version\\x18\\x02 \\x01(\\t\\\"\\x8a\\x02\\n\\x07\\",
                      "markdown": "`H\\n\\x13\\x63ross_slicing_specs\\x18\\x08 \\x03(\\x0b\\x32+.tensorflow_model_analysis.CrossSlicingSpec\\x12=\\n\\rmetrics_specs\\x18\\x05 \\x03(\\x0b\\x32&.tensorflow_model_analysis.MetricsSpec\\x12\\x33\\n\\x07options\\x18\\x06 \\x01(\\x0b\\x32\\\".tensorflow_model_analysis.OptionsJ\\x04\\x08\\x01\\x10\\x02J\\x04\\x08\\x03\\x10\\x04J\\x04\\x08\\x07\\x10\\x08\\\"%\\n\\x13RepeatedStringValue\\x12\\x0e\\n\\x06values\\x18\\x01 \\x03(\\t\\\"$\\n\\x12RepeatedInt32Value\\x12\\x0e\\n\\x06values\\x18\\x01 \\x03(\\x05\\\"c\\n\\x14\\x45valConfigAndVersion\\x12:\\n\\x0b\\x65val_config\\x18\\x01 \\x01(\\x0b\\x32%.tensorflow_model_analysis.EvalConfig\\x12\\x0f\\n\\x07version\\x18\\x02 \\x01(\\t\\\"\\x8a\\x02\\n\\x07\\`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000801"
          },
          "message": {
            "text": "Backdoor: Executing Obfuscated Code",
            "id": "BD000801"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/proto/config_pb2.py"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 8098,
                  "endLine": 28,
                  "endColumn": 8118,
                  "snippet": {
                    "text": "lysis.SlicingSpec\\x12H\\n\\x13\\x63ross_slicing_specs\\x18\\x08 \\x03(\\x0b\\x32+.tensorflow_model_analysis.CrossSlicingSpec\\x12=\\n\\rmetrics_specs\\x18\\x05 \\x03(\\x0b\\x32&.tensorflow_model_analysis.MetricsSpec\\x12\\x33\\n\\x07options\\x18\\x06 \\x01(\\x0b\\x32\\\".tensorflow_model_analysis.OptionsJ\\x04\\x08\\x01\\x10\\x02J\\x04\\x08\\x03\\x10\\x04J\\x04\\x08\\x07\\x10\\x08\\\"%\\n\\x13RepeatedStringValue\\x12\\x0e\\n\\x06values\\x18\\x01 \\x03(\\t\\\"$\\n\\x12RepeatedInt32Value\\x12\\x0e\\n\\x06values\\x18\\x01 \\x03(\\x05\\\"c\\n\\x14\\x45valConfigAndVersion\\x12:\\n\\x0b\\x65val_config\\x18\\x01 \\x01(\\x0b\\x32%.tensorflow_model_analysis.EvalConfig\\x12\\x0f\\n\\x07version\\x18\\x02 \\x0",
                    "rendered": {
                      "text": "lysis.SlicingSpec\\x12H\\n\\x13\\x63ross_slicing_specs\\x18\\x08 \\x03(\\x0b\\x32+.tensorflow_model_analysis.CrossSlicingSpec\\x12=\\n\\rmetrics_specs\\x18\\x05 \\x03(\\x0b\\x32&.tensorflow_model_analysis.MetricsSpec\\x12\\x33\\n\\x07options\\x18\\x06 \\x01(\\x0b\\x32\\\".tensorflow_model_analysis.OptionsJ\\x04\\x08\\x01\\x10\\x02J\\x04\\x08\\x03\\x10\\x04J\\x04\\x08\\x07\\x10\\x08\\\"%\\n\\x13RepeatedStringValue\\x12\\x0e\\n\\x06values\\x18\\x01 \\x03(\\t\\\"$\\n\\x12RepeatedInt32Value\\x12\\x0e\\n\\x06values\\x18\\x01 \\x03(\\x05\\\"c\\n\\x14\\x45valConfigAndVersion\\x12:\\n\\x0b\\x65val_config\\x18\\x01 \\x01(\\x0b\\x32%.tensorflow_model_analysis.EvalConfig\\x12\\x0f\\n\\x07version\\x18\\x02 \\x0",
                      "markdown": "`lysis.SlicingSpec\\x12H\\n\\x13\\x63ross_slicing_specs\\x18\\x08 \\x03(\\x0b\\x32+.tensorflow_model_analysis.CrossSlicingSpec\\x12=\\n\\rmetrics_specs\\x18\\x05 \\x03(\\x0b\\x32&.tensorflow_model_analysis.MetricsSpec\\x12\\x33\\n\\x07options\\x18\\x06 \\x01(\\x0b\\x32\\\".tensorflow_model_analysis.OptionsJ\\x04\\x08\\x01\\x10\\x02J\\x04\\x08\\x03\\x10\\x04J\\x04\\x08\\x07\\x10\\x08\\\"%\\n\\x13RepeatedStringValue\\x12\\x0e\\n\\x06values\\x18\\x01 \\x03(\\t\\\"$\\n\\x12RepeatedInt32Value\\x12\\x0e\\n\\x06values\\x18\\x01 \\x03(\\x05\\\"c\\n\\x14\\x45valConfigAndVersion\\x12:\\n\\x0b\\x65val_config\\x18\\x01 \\x01(\\x0b\\x32%.tensorflow_model_analysis.EvalConfig\\x12\\x0f\\n\\x07version\\x18\\x02 \\x0`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000801"
          },
          "message": {
            "text": "Backdoor: Executing Obfuscated Code",
            "id": "BD000801"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/proto/config_pb2.py"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 8077,
                  "endLine": 28,
                  "endColumn": 8097,
                  "snippet": {
                    "text": ".tensorflow_model_analysis.SlicingSpec\\x12H\\n\\x13\\x63ross_slicing_specs\\x18\\x08 \\x03(\\x0b\\x32+.tensorflow_model_analysis.CrossSlicingSpec\\x12=\\n\\rmetrics_specs\\x18\\x05 \\x03(\\x0b\\x32&.tensorflow_model_analysis.MetricsSpec\\x12\\x33\\n\\x07options\\x18\\x06 \\x01(\\x0b\\x32\\\".tensorflow_model_analysis.OptionsJ\\x04\\x08\\x01\\x10\\x02J\\x04\\x08\\x03\\x10\\x04J\\x04\\x08\\x07\\x10\\x08\\\"%\\n\\x13RepeatedStringValue\\x12\\x0e\\n\\x06values\\x18\\x01 \\x03(\\t\\\"$\\n\\x12RepeatedInt32Value\\x12\\x0e\\n\\x06values\\x18\\x01 \\x03(\\x05\\\"c\\n\\x14\\x45valConfigAndVersion\\x12:\\n\\x0b\\x65val_config\\x18\\x01 \\x01(\\x0b\\x32%.tensorflow_model_analysis.EvalConfig\\x12\\x0f\\n\\x",
                    "rendered": {
                      "text": ".tensorflow_model_analysis.SlicingSpec\\x12H\\n\\x13\\x63ross_slicing_specs\\x18\\x08 \\x03(\\x0b\\x32+.tensorflow_model_analysis.CrossSlicingSpec\\x12=\\n\\rmetrics_specs\\x18\\x05 \\x03(\\x0b\\x32&.tensorflow_model_analysis.MetricsSpec\\x12\\x33\\n\\x07options\\x18\\x06 \\x01(\\x0b\\x32\\\".tensorflow_model_analysis.OptionsJ\\x04\\x08\\x01\\x10\\x02J\\x04\\x08\\x03\\x10\\x04J\\x04\\x08\\x07\\x10\\x08\\\"%\\n\\x13RepeatedStringValue\\x12\\x0e\\n\\x06values\\x18\\x01 \\x03(\\t\\\"$\\n\\x12RepeatedInt32Value\\x12\\x0e\\n\\x06values\\x18\\x01 \\x03(\\x05\\\"c\\n\\x14\\x45valConfigAndVersion\\x12:\\n\\x0b\\x65val_config\\x18\\x01 \\x01(\\x0b\\x32%.tensorflow_model_analysis.EvalConfig\\x12\\x0f\\n\\x",
                      "markdown": "`.tensorflow_model_analysis.SlicingSpec\\x12H\\n\\x13\\x63ross_slicing_specs\\x18\\x08 \\x03(\\x0b\\x32+.tensorflow_model_analysis.CrossSlicingSpec\\x12=\\n\\rmetrics_specs\\x18\\x05 \\x03(\\x0b\\x32&.tensorflow_model_analysis.MetricsSpec\\x12\\x33\\n\\x07options\\x18\\x06 \\x01(\\x0b\\x32\\\".tensorflow_model_analysis.OptionsJ\\x04\\x08\\x01\\x10\\x02J\\x04\\x08\\x03\\x10\\x04J\\x04\\x08\\x07\\x10\\x08\\\"%\\n\\x13RepeatedStringValue\\x12\\x0e\\n\\x06values\\x18\\x01 \\x03(\\t\\\"$\\n\\x12RepeatedInt32Value\\x12\\x0e\\n\\x06values\\x18\\x01 \\x03(\\x05\\\"c\\n\\x14\\x45valConfigAndVersion\\x12:\\n\\x0b\\x65val_config\\x18\\x01 \\x01(\\x0b\\x32%.tensorflow_model_analysis.EvalConfig\\x12\\x0f\\n\\x`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000801"
          },
          "message": {
            "text": "Backdoor: Executing Obfuscated Code",
            "id": "BD000801"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/proto/config_pb2.py"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 7271,
                  "endLine": 28,
                  "endColumn": 7291,
                  "snippet": {
                    "text": "s\\x18\\t \\x01(\\x0b\\x32\\x34.tensorflow_model_analysis.ConfidenceIntervalOptions\\x12\\x33\\n\\x0emin_slice_size\\x18\\x03 \\x01(\\x0b\\x32\\x1b.google.protobuf.Int32Value\\x12H\\n\\x10\\x64isabled_outputs\\x18\\x07 \\x01(\\x0b\\x32..tensorflow_model_analysis.RepeatedStringValueJ\\x04\\x08\\x04\\x10\\x05J\\x04\\x08\\x05\\x10\\x06J\\x04\\x08\\x06\\x10\\x07J\\x04\\x08\\x08\\x10\\t\\\"\\xe4\\x01\\n\\x19\\x43onfidenceIntervalOptions\\x12]\\n\\x06method\\x18\\x01 \\x01(\\x0e\\x32M.tensorflow_model_analysis.ConfidenceIntervalOptions.ConfidenceIntervalMethod\\\"h\\n\\x18\\x43onfidenceIntervalMethod\\x12&\\n\\\"UNKNOWN_CONFIDENCE_INTERVAL_METHOD\\x10\\x00\\x12\\x15\\n\\x11POISSON_BOOTSTRAP\\x",
                    "rendered": {
                      "text": "s\\x18\\t \\x01(\\x0b\\x32\\x34.tensorflow_model_analysis.ConfidenceIntervalOptions\\x12\\x33\\n\\x0emin_slice_size\\x18\\x03 \\x01(\\x0b\\x32\\x1b.google.protobuf.Int32Value\\x12H\\n\\x10\\x64isabled_outputs\\x18\\x07 \\x01(\\x0b\\x32..tensorflow_model_analysis.RepeatedStringValueJ\\x04\\x08\\x04\\x10\\x05J\\x04\\x08\\x05\\x10\\x06J\\x04\\x08\\x06\\x10\\x07J\\x04\\x08\\x08\\x10\\t\\\"\\xe4\\x01\\n\\x19\\x43onfidenceIntervalOptions\\x12]\\n\\x06method\\x18\\x01 \\x01(\\x0e\\x32M.tensorflow_model_analysis.ConfidenceIntervalOptions.ConfidenceIntervalMethod\\\"h\\n\\x18\\x43onfidenceIntervalMethod\\x12&\\n\\\"UNKNOWN_CONFIDENCE_INTERVAL_METHOD\\x10\\x00\\x12\\x15\\n\\x11POISSON_BOOTSTRAP\\x",
                      "markdown": "`s\\x18\\t \\x01(\\x0b\\x32\\x34.tensorflow_model_analysis.ConfidenceIntervalOptions\\x12\\x33\\n\\x0emin_slice_size\\x18\\x03 \\x01(\\x0b\\x32\\x1b.google.protobuf.Int32Value\\x12H\\n\\x10\\x64isabled_outputs\\x18\\x07 \\x01(\\x0b\\x32..tensorflow_model_analysis.RepeatedStringValueJ\\x04\\x08\\x04\\x10\\x05J\\x04\\x08\\x05\\x10\\x06J\\x04\\x08\\x06\\x10\\x07J\\x04\\x08\\x08\\x10\\t\\\"\\xe4\\x01\\n\\x19\\x43onfidenceIntervalOptions\\x12]\\n\\x06method\\x18\\x01 \\x01(\\x0e\\x32M.tensorflow_model_analysis.ConfidenceIntervalOptions.ConfidenceIntervalMethod\\\"h\\n\\x18\\x43onfidenceIntervalMethod\\x12&\\n\\\"UNKNOWN_CONFIDENCE_INTERVAL_METHOD\\x10\\x00\\x12\\x15\\n\\x11POISSON_BOOTSTRAP\\x`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000801"
          },
          "message": {
            "text": "Backdoor: Executing Obfuscated Code",
            "id": "BD000801"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/proto/config_pb2.py"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 7250,
                  "endLine": 28,
                  "endColumn": 7270,
                  "snippet": {
                    "text": "x63onfidence_intervals\\x18\\t \\x01(\\x0b\\x32\\x34.tensorflow_model_analysis.ConfidenceIntervalOptions\\x12\\x33\\n\\x0emin_slice_size\\x18\\x03 \\x01(\\x0b\\x32\\x1b.google.protobuf.Int32Value\\x12H\\n\\x10\\x64isabled_outputs\\x18\\x07 \\x01(\\x0b\\x32..tensorflow_model_analysis.RepeatedStringValueJ\\x04\\x08\\x04\\x10\\x05J\\x04\\x08\\x05\\x10\\x06J\\x04\\x08\\x06\\x10\\x07J\\x04\\x08\\x08\\x10\\t\\\"\\xe4\\x01\\n\\x19\\x43onfidenceIntervalOptions\\x12]\\n\\x06method\\x18\\x01 \\x01(\\x0e\\x32M.tensorflow_model_analysis.ConfidenceIntervalOptions.ConfidenceIntervalMethod\\\"h\\n\\x18\\x43onfidenceIntervalMethod\\x12&\\n\\\"UNKNOWN_CONFIDENCE_INTERVAL_METHOD\\x10\\x00\\x12\\x15\\n\\x",
                    "rendered": {
                      "text": "x63onfidence_intervals\\x18\\t \\x01(\\x0b\\x32\\x34.tensorflow_model_analysis.ConfidenceIntervalOptions\\x12\\x33\\n\\x0emin_slice_size\\x18\\x03 \\x01(\\x0b\\x32\\x1b.google.protobuf.Int32Value\\x12H\\n\\x10\\x64isabled_outputs\\x18\\x07 \\x01(\\x0b\\x32..tensorflow_model_analysis.RepeatedStringValueJ\\x04\\x08\\x04\\x10\\x05J\\x04\\x08\\x05\\x10\\x06J\\x04\\x08\\x06\\x10\\x07J\\x04\\x08\\x08\\x10\\t\\\"\\xe4\\x01\\n\\x19\\x43onfidenceIntervalOptions\\x12]\\n\\x06method\\x18\\x01 \\x01(\\x0e\\x32M.tensorflow_model_analysis.ConfidenceIntervalOptions.ConfidenceIntervalMethod\\\"h\\n\\x18\\x43onfidenceIntervalMethod\\x12&\\n\\\"UNKNOWN_CONFIDENCE_INTERVAL_METHOD\\x10\\x00\\x12\\x15\\n\\x",
                      "markdown": "`x63onfidence_intervals\\x18\\t \\x01(\\x0b\\x32\\x34.tensorflow_model_analysis.ConfidenceIntervalOptions\\x12\\x33\\n\\x0emin_slice_size\\x18\\x03 \\x01(\\x0b\\x32\\x1b.google.protobuf.Int32Value\\x12H\\n\\x10\\x64isabled_outputs\\x18\\x07 \\x01(\\x0b\\x32..tensorflow_model_analysis.RepeatedStringValueJ\\x04\\x08\\x04\\x10\\x05J\\x04\\x08\\x05\\x10\\x06J\\x04\\x08\\x06\\x10\\x07J\\x04\\x08\\x08\\x10\\t\\\"\\xe4\\x01\\n\\x19\\x43onfidenceIntervalOptions\\x12]\\n\\x06method\\x18\\x01 \\x01(\\x0e\\x32M.tensorflow_model_analysis.ConfidenceIntervalOptions.ConfidenceIntervalMethod\\\"h\\n\\x18\\x43onfidenceIntervalMethod\\x12&\\n\\\"UNKNOWN_CONFIDENCE_INTERVAL_METHOD\\x10\\x00\\x12\\x15\\n\\x`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000801"
          },
          "message": {
            "text": "Backdoor: Executing Obfuscated Code",
            "id": "BD000801"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/proto/config_pb2.py"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 7229,
                  "endLine": 28,
                  "endColumn": 7249,
                  "snippet": {
                    "text": "BoolValue\\x12R\\n\\x14\\x63onfidence_intervals\\x18\\t \\x01(\\x0b\\x32\\x34.tensorflow_model_analysis.ConfidenceIntervalOptions\\x12\\x33\\n\\x0emin_slice_size\\x18\\x03 \\x01(\\x0b\\x32\\x1b.google.protobuf.Int32Value\\x12H\\n\\x10\\x64isabled_outputs\\x18\\x07 \\x01(\\x0b\\x32..tensorflow_model_analysis.RepeatedStringValueJ\\x04\\x08\\x04\\x10\\x05J\\x04\\x08\\x05\\x10\\x06J\\x04\\x08\\x06\\x10\\x07J\\x04\\x08\\x08\\x10\\t\\\"\\xe4\\x01\\n\\x19\\x43onfidenceIntervalOptions\\x12]\\n\\x06method\\x18\\x01 \\x01(\\x0e\\x32M.tensorflow_model_analysis.ConfidenceIntervalOptions.ConfidenceIntervalMethod\\\"h\\n\\x18\\x43onfidenceIntervalMethod\\x12&\\n\\\"UNKNOWN_CONFIDENCE_INTERVAL_METHO",
                    "rendered": {
                      "text": "BoolValue\\x12R\\n\\x14\\x63onfidence_intervals\\x18\\t \\x01(\\x0b\\x32\\x34.tensorflow_model_analysis.ConfidenceIntervalOptions\\x12\\x33\\n\\x0emin_slice_size\\x18\\x03 \\x01(\\x0b\\x32\\x1b.google.protobuf.Int32Value\\x12H\\n\\x10\\x64isabled_outputs\\x18\\x07 \\x01(\\x0b\\x32..tensorflow_model_analysis.RepeatedStringValueJ\\x04\\x08\\x04\\x10\\x05J\\x04\\x08\\x05\\x10\\x06J\\x04\\x08\\x06\\x10\\x07J\\x04\\x08\\x08\\x10\\t\\\"\\xe4\\x01\\n\\x19\\x43onfidenceIntervalOptions\\x12]\\n\\x06method\\x18\\x01 \\x01(\\x0e\\x32M.tensorflow_model_analysis.ConfidenceIntervalOptions.ConfidenceIntervalMethod\\\"h\\n\\x18\\x43onfidenceIntervalMethod\\x12&\\n\\\"UNKNOWN_CONFIDENCE_INTERVAL_METHO",
                      "markdown": "`BoolValue\\x12R\\n\\x14\\x63onfidence_intervals\\x18\\t \\x01(\\x0b\\x32\\x34.tensorflow_model_analysis.ConfidenceIntervalOptions\\x12\\x33\\n\\x0emin_slice_size\\x18\\x03 \\x01(\\x0b\\x32\\x1b.google.protobuf.Int32Value\\x12H\\n\\x10\\x64isabled_outputs\\x18\\x07 \\x01(\\x0b\\x32..tensorflow_model_analysis.RepeatedStringValueJ\\x04\\x08\\x04\\x10\\x05J\\x04\\x08\\x05\\x10\\x06J\\x04\\x08\\x06\\x10\\x07J\\x04\\x08\\x08\\x10\\t\\\"\\xe4\\x01\\n\\x19\\x43onfidenceIntervalOptions\\x12]\\n\\x06method\\x18\\x01 \\x01(\\x0e\\x32M.tensorflow_model_analysis.ConfidenceIntervalOptions.ConfidenceIntervalMethod\\\"h\\n\\x18\\x43onfidenceIntervalMethod\\x12&\\n\\\"UNKNOWN_CONFIDENCE_INTERVAL_METHO`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000801"
          },
          "message": {
            "text": "Backdoor: Executing Obfuscated Code",
            "id": "BD000801"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/proto/config_pb2.py"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 2808,
                  "endLine": 28,
                  "endColumn": 2828,
                  "snippet": {
                    "text": "@\\n\\tclass_ids\\x18\\x04 \\x01(\\x0b\\x32-.tensorflow_model_analysis.RepeatedInt32Value\\x12=\\n\\x06k_list\\x18\\x05 \\x01(\\x0b\\x32-.tensorflow_model_analysis.RepeatedInt32Value\\x12\\x41\\n\\ntop_k_list\\x18\\x06 \\x01(\\x0b\\x32-.tensorflow_model_analysis.RepeatedInt32ValueJ\\x04\\x08\\x01\\x10\\x02J\\x04\\x08\\x02\\x10\\x03J\\x04\\x08\\x03\\x10\\x04\\\"<\\n\\x14\\x45xampleWeightOptions\\x12\\x10\\n\\x08weighted\\x18\\x01 \\x01(\\x08\\x12\\x12\\n\\nunweighted\\x18\\x02 \\x01(\\x08\\\"\\xb9\\x01\\n\\x0ePaddingOptions\\x12\\x1b\\n\\x11label_int_padding\\x18\\x01 \\x01(\\x03H\\x00\\x12\\x1d\\n\\x13label_float_padding\\x18\\x02 \\x01(\\x02H\\x00\\x12 \\n\\x16prediction_int_padding\\x18\\x03 \\x01(\\",
                    "rendered": {
                      "text": "@\\n\\tclass_ids\\x18\\x04 \\x01(\\x0b\\x32-.tensorflow_model_analysis.RepeatedInt32Value\\x12=\\n\\x06k_list\\x18\\x05 \\x01(\\x0b\\x32-.tensorflow_model_analysis.RepeatedInt32Value\\x12\\x41\\n\\ntop_k_list\\x18\\x06 \\x01(\\x0b\\x32-.tensorflow_model_analysis.RepeatedInt32ValueJ\\x04\\x08\\x01\\x10\\x02J\\x04\\x08\\x02\\x10\\x03J\\x04\\x08\\x03\\x10\\x04\\\"<\\n\\x14\\x45xampleWeightOptions\\x12\\x10\\n\\x08weighted\\x18\\x01 \\x01(\\x08\\x12\\x12\\n\\nunweighted\\x18\\x02 \\x01(\\x08\\\"\\xb9\\x01\\n\\x0ePaddingOptions\\x12\\x1b\\n\\x11label_int_padding\\x18\\x01 \\x01(\\x03H\\x00\\x12\\x1d\\n\\x13label_float_padding\\x18\\x02 \\x01(\\x02H\\x00\\x12 \\n\\x16prediction_int_padding\\x18\\x03 \\x01(\\",
                      "markdown": "`@\\n\\tclass_ids\\x18\\x04 \\x01(\\x0b\\x32-.tensorflow_model_analysis.RepeatedInt32Value\\x12=\\n\\x06k_list\\x18\\x05 \\x01(\\x0b\\x32-.tensorflow_model_analysis.RepeatedInt32Value\\x12\\x41\\n\\ntop_k_list\\x18\\x06 \\x01(\\x0b\\x32-.tensorflow_model_analysis.RepeatedInt32ValueJ\\x04\\x08\\x01\\x10\\x02J\\x04\\x08\\x02\\x10\\x03J\\x04\\x08\\x03\\x10\\x04\\\"<\\n\\x14\\x45xampleWeightOptions\\x12\\x10\\n\\x08weighted\\x18\\x01 \\x01(\\x08\\x12\\x12\\n\\nunweighted\\x18\\x02 \\x01(\\x08\\\"\\xb9\\x01\\n\\x0ePaddingOptions\\x12\\x1b\\n\\x11label_int_padding\\x18\\x01 \\x01(\\x03H\\x00\\x12\\x1d\\n\\x13label_float_padding\\x18\\x02 \\x01(\\x02H\\x00\\x12 \\n\\x16prediction_int_padding\\x18\\x03 \\x01(\\`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000801"
          },
          "message": {
            "text": "Backdoor: Executing Obfuscated Code",
            "id": "BD000801"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/proto/config_pb2.py"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 2787,
                  "endLine": 28,
                  "endColumn": 2807,
                  "snippet": {
                    "text": "narizationOptions\\x12@\\n\\tclass_ids\\x18\\x04 \\x01(\\x0b\\x32-.tensorflow_model_analysis.RepeatedInt32Value\\x12=\\n\\x06k_list\\x18\\x05 \\x01(\\x0b\\x32-.tensorflow_model_analysis.RepeatedInt32Value\\x12\\x41\\n\\ntop_k_list\\x18\\x06 \\x01(\\x0b\\x32-.tensorflow_model_analysis.RepeatedInt32ValueJ\\x04\\x08\\x01\\x10\\x02J\\x04\\x08\\x02\\x10\\x03J\\x04\\x08\\x03\\x10\\x04\\\"<\\n\\x14\\x45xampleWeightOptions\\x12\\x10\\n\\x08weighted\\x18\\x01 \\x01(\\x08\\x12\\x12\\n\\nunweighted\\x18\\x02 \\x01(\\x08\\\"\\xb9\\x01\\n\\x0ePaddingOptions\\x12\\x1b\\n\\x11label_int_padding\\x18\\x01 \\x01(\\x03H\\x00\\x12\\x1d\\n\\x13label_float_padding\\x18\\x02 \\x01(\\x02H\\x00\\x12 \\n\\x16prediction_int_p",
                    "rendered": {
                      "text": "narizationOptions\\x12@\\n\\tclass_ids\\x18\\x04 \\x01(\\x0b\\x32-.tensorflow_model_analysis.RepeatedInt32Value\\x12=\\n\\x06k_list\\x18\\x05 \\x01(\\x0b\\x32-.tensorflow_model_analysis.RepeatedInt32Value\\x12\\x41\\n\\ntop_k_list\\x18\\x06 \\x01(\\x0b\\x32-.tensorflow_model_analysis.RepeatedInt32ValueJ\\x04\\x08\\x01\\x10\\x02J\\x04\\x08\\x02\\x10\\x03J\\x04\\x08\\x03\\x10\\x04\\\"<\\n\\x14\\x45xampleWeightOptions\\x12\\x10\\n\\x08weighted\\x18\\x01 \\x01(\\x08\\x12\\x12\\n\\nunweighted\\x18\\x02 \\x01(\\x08\\\"\\xb9\\x01\\n\\x0ePaddingOptions\\x12\\x1b\\n\\x11label_int_padding\\x18\\x01 \\x01(\\x03H\\x00\\x12\\x1d\\n\\x13label_float_padding\\x18\\x02 \\x01(\\x02H\\x00\\x12 \\n\\x16prediction_int_p",
                      "markdown": "`narizationOptions\\x12@\\n\\tclass_ids\\x18\\x04 \\x01(\\x0b\\x32-.tensorflow_model_analysis.RepeatedInt32Value\\x12=\\n\\x06k_list\\x18\\x05 \\x01(\\x0b\\x32-.tensorflow_model_analysis.RepeatedInt32Value\\x12\\x41\\n\\ntop_k_list\\x18\\x06 \\x01(\\x0b\\x32-.tensorflow_model_analysis.RepeatedInt32ValueJ\\x04\\x08\\x01\\x10\\x02J\\x04\\x08\\x02\\x10\\x03J\\x04\\x08\\x03\\x10\\x04\\\"<\\n\\x14\\x45xampleWeightOptions\\x12\\x10\\n\\x08weighted\\x18\\x01 \\x01(\\x08\\x12\\x12\\n\\nunweighted\\x18\\x02 \\x01(\\x08\\\"\\xb9\\x01\\n\\x0ePaddingOptions\\x12\\x1b\\n\\x11label_int_padding\\x18\\x01 \\x01(\\x03H\\x00\\x12\\x1d\\n\\x13label_float_padding\\x18\\x02 \\x01(\\x02H\\x00\\x12 \\n\\x16prediction_int_p`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000801"
          },
          "message": {
            "text": "Backdoor: Executing Obfuscated Code",
            "id": "BD000801"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/proto/config_pb2.py"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 2766,
                  "endLine": 28,
                  "endColumn": 2786,
                  "snippet": {
                    "text": "\\\"\\xeb\\x01\\n\\x13\\x42inarizationOptions\\x12@\\n\\tclass_ids\\x18\\x04 \\x01(\\x0b\\x32-.tensorflow_model_analysis.RepeatedInt32Value\\x12=\\n\\x06k_list\\x18\\x05 \\x01(\\x0b\\x32-.tensorflow_model_analysis.RepeatedInt32Value\\x12\\x41\\n\\ntop_k_list\\x18\\x06 \\x01(\\x0b\\x32-.tensorflow_model_analysis.RepeatedInt32ValueJ\\x04\\x08\\x01\\x10\\x02J\\x04\\x08\\x02\\x10\\x03J\\x04\\x08\\x03\\x10\\x04\\\"<\\n\\x14\\x45xampleWeightOptions\\x12\\x10\\n\\x08weighted\\x18\\x01 \\x01(\\x08\\x12\\x12\\n\\nunweighted\\x18\\x02 \\x01(\\x08\\\"\\xb9\\x01\\n\\x0ePaddingOptions\\x12\\x1b\\n\\x11label_int_padding\\x18\\x01 \\x01(\\x03H\\x00\\x12\\x1d\\n\\x13label_float_padding\\x18\\x02 \\x01(\\x02H\\x00\\x12 \\",
                    "rendered": {
                      "text": "\\\"\\xeb\\x01\\n\\x13\\x42inarizationOptions\\x12@\\n\\tclass_ids\\x18\\x04 \\x01(\\x0b\\x32-.tensorflow_model_analysis.RepeatedInt32Value\\x12=\\n\\x06k_list\\x18\\x05 \\x01(\\x0b\\x32-.tensorflow_model_analysis.RepeatedInt32Value\\x12\\x41\\n\\ntop_k_list\\x18\\x06 \\x01(\\x0b\\x32-.tensorflow_model_analysis.RepeatedInt32ValueJ\\x04\\x08\\x01\\x10\\x02J\\x04\\x08\\x02\\x10\\x03J\\x04\\x08\\x03\\x10\\x04\\\"<\\n\\x14\\x45xampleWeightOptions\\x12\\x10\\n\\x08weighted\\x18\\x01 \\x01(\\x08\\x12\\x12\\n\\nunweighted\\x18\\x02 \\x01(\\x08\\\"\\xb9\\x01\\n\\x0ePaddingOptions\\x12\\x1b\\n\\x11label_int_padding\\x18\\x01 \\x01(\\x03H\\x00\\x12\\x1d\\n\\x13label_float_padding\\x18\\x02 \\x01(\\x02H\\x00\\x12 \\",
                      "markdown": "`\\\"\\xeb\\x01\\n\\x13\\x42inarizationOptions\\x12@\\n\\tclass_ids\\x18\\x04 \\x01(\\x0b\\x32-.tensorflow_model_analysis.RepeatedInt32Value\\x12=\\n\\x06k_list\\x18\\x05 \\x01(\\x0b\\x32-.tensorflow_model_analysis.RepeatedInt32Value\\x12\\x41\\n\\ntop_k_list\\x18\\x06 \\x01(\\x0b\\x32-.tensorflow_model_analysis.RepeatedInt32ValueJ\\x04\\x08\\x01\\x10\\x02J\\x04\\x08\\x02\\x10\\x03J\\x04\\x08\\x03\\x10\\x04\\\"<\\n\\x14\\x45xampleWeightOptions\\x12\\x10\\n\\x08weighted\\x18\\x01 \\x01(\\x08\\x12\\x12\\n\\nunweighted\\x18\\x02 \\x01(\\x08\\\"\\xb9\\x01\\n\\x0ePaddingOptions\\x12\\x1b\\n\\x11label_int_padding\\x18\\x01 \\x01(\\x03H\\x00\\x12\\x1d\\n\\x13label_float_padding\\x18\\x02 \\x01(\\x02H\\x00\\x12 \\`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000801"
          },
          "message": {
            "text": "Backdoor: Executing Obfuscated Code",
            "id": "BD000801"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/proto/config_pb2.py"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 2436,
                  "endLine": 28,
                  "endColumn": 2456,
                  "snippet": {
                    "text": "2V\\n\\rclass_weights\\x18\\x04 \\x03(\\x0b\\x32?.tensorflow_model_analysis.AggregationOptions.ClassWeightsEntry\\x12\\x41\\n\\ntop_k_list\\x18\\x05 \\x01(\\x0b\\x32-.tensorflow_model_analysis.RepeatedInt32Value\\x1a\\x33\\n\\x11\\x43lassWeightsEntry\\x12\\x0b\\n\\x03key\\x18\\x01 \\x01(\\x05\\x12\\r\\n\\x05value\\x18\\x02 \\x01(\\x02:\\x02\\x38\\x01\\x42\\x06\\n\\x04type\\\"\\xeb\\x01\\n\\x13\\x42inarizationOptions\\x12@\\n\\tclass_ids\\x18\\x04 \\x01(\\x0b\\x32-.tensorflow_model_analysis.RepeatedInt32Value\\x12=\\n\\x06k_list\\x18\\x05 \\x01(\\x0b\\x32-.tensorflow_model_analysis.RepeatedInt32Value\\x12\\x41\\n\\ntop_k_list\\x18\\x06 \\x01(\\x0b\\x32-.tensorflow_model_analysis.RepeatedI",
                    "rendered": {
                      "text": "2V\\n\\rclass_weights\\x18\\x04 \\x03(\\x0b\\x32?.tensorflow_model_analysis.AggregationOptions.ClassWeightsEntry\\x12\\x41\\n\\ntop_k_list\\x18\\x05 \\x01(\\x0b\\x32-.tensorflow_model_analysis.RepeatedInt32Value\\x1a\\x33\\n\\x11\\x43lassWeightsEntry\\x12\\x0b\\n\\x03key\\x18\\x01 \\x01(\\x05\\x12\\r\\n\\x05value\\x18\\x02 \\x01(\\x02:\\x02\\x38\\x01\\x42\\x06\\n\\x04type\\\"\\xeb\\x01\\n\\x13\\x42inarizationOptions\\x12@\\n\\tclass_ids\\x18\\x04 \\x01(\\x0b\\x32-.tensorflow_model_analysis.RepeatedInt32Value\\x12=\\n\\x06k_list\\x18\\x05 \\x01(\\x0b\\x32-.tensorflow_model_analysis.RepeatedInt32Value\\x12\\x41\\n\\ntop_k_list\\x18\\x06 \\x01(\\x0b\\x32-.tensorflow_model_analysis.RepeatedI",
                      "markdown": "`2V\\n\\rclass_weights\\x18\\x04 \\x03(\\x0b\\x32?.tensorflow_model_analysis.AggregationOptions.ClassWeightsEntry\\x12\\x41\\n\\ntop_k_list\\x18\\x05 \\x01(\\x0b\\x32-.tensorflow_model_analysis.RepeatedInt32Value\\x1a\\x33\\n\\x11\\x43lassWeightsEntry\\x12\\x0b\\n\\x03key\\x18\\x01 \\x01(\\x05\\x12\\r\\n\\x05value\\x18\\x02 \\x01(\\x02:\\x02\\x38\\x01\\x42\\x06\\n\\x04type\\\"\\xeb\\x01\\n\\x13\\x42inarizationOptions\\x12@\\n\\tclass_ids\\x18\\x04 \\x01(\\x0b\\x32-.tensorflow_model_analysis.RepeatedInt32Value\\x12=\\n\\x06k_list\\x18\\x05 \\x01(\\x0b\\x32-.tensorflow_model_analysis.RepeatedInt32Value\\x12\\x41\\n\\ntop_k_list\\x18\\x06 \\x01(\\x0b\\x32-.tensorflow_model_analysis.RepeatedI`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000801"
          },
          "message": {
            "text": "Backdoor: Executing Obfuscated Code",
            "id": "BD000801"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/proto/config_pb2.py"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 1364,
                  "endLine": 28,
                  "endColumn": 1384,
                  "snippet": {
                    "text": "\\t\\x12\\r\\n\\x05value\\x18\\x02 \\x01(\\t:\\x02\\x38\\x01\\x1a\\x35\\n\\x13PredictionKeysEntry\\x12\\x0b\\n\\x03key\\x18\\x01 \\x01(\\t\\x12\\r\\n\\x05value\\x18\\x02 \\x01(\\t:\\x02\\x38\\x01\\x1a\\x38\\n\\x16\\x45xampleWeightKeysEntry\\x12\\x0b\\n\\x03key\\x18\\x01 \\x01(\\t\\x12\\r\\n\\x05value\\x18\\x02 \\x01(\\t:\\x02\\x38\\x01J\\x04\\x08\\x01\\x10\\x02J\\x04\\x08\\x04\\x10\\x05\\\"\\xc4\\x01\\n\\x0bSlicingSpec\\x12\\x14\\n\\x0c\\x66\\x65\\x61ture_keys\\x18\\x01 \\x03(\\t\\x12Q\\n\\x0e\\x66\\x65\\x61ture_values\\x18\\x02 \\x03(\\x0b\\x32\\x39.tensorflow_model_analysis.SlicingSpec.FeatureValuesEntry\\x12\\x16\\n\\x0eslice_keys_sql\\x18\\x03 \\x01(\\t\\x1a\\x34\\n\\x12\\x46\\x65\\x61tureValuesEntry\\x12\\x0b\\n\\x03key\\x1",
                    "rendered": {
                      "text": "\\t\\x12\\r\\n\\x05value\\x18\\x02 \\x01(\\t:\\x02\\x38\\x01\\x1a\\x35\\n\\x13PredictionKeysEntry\\x12\\x0b\\n\\x03key\\x18\\x01 \\x01(\\t\\x12\\r\\n\\x05value\\x18\\x02 \\x01(\\t:\\x02\\x38\\x01\\x1a\\x38\\n\\x16\\x45xampleWeightKeysEntry\\x12\\x0b\\n\\x03key\\x18\\x01 \\x01(\\t\\x12\\r\\n\\x05value\\x18\\x02 \\x01(\\t:\\x02\\x38\\x01J\\x04\\x08\\x01\\x10\\x02J\\x04\\x08\\x04\\x10\\x05\\\"\\xc4\\x01\\n\\x0bSlicingSpec\\x12\\x14\\n\\x0c\\x66\\x65\\x61ture_keys\\x18\\x01 \\x03(\\t\\x12Q\\n\\x0e\\x66\\x65\\x61ture_values\\x18\\x02 \\x03(\\x0b\\x32\\x39.tensorflow_model_analysis.SlicingSpec.FeatureValuesEntry\\x12\\x16\\n\\x0eslice_keys_sql\\x18\\x03 \\x01(\\t\\x1a\\x34\\n\\x12\\x46\\x65\\x61tureValuesEntry\\x12\\x0b\\n\\x03key\\x1",
                      "markdown": "`\\t\\x12\\r\\n\\x05value\\x18\\x02 \\x01(\\t:\\x02\\x38\\x01\\x1a\\x35\\n\\x13PredictionKeysEntry\\x12\\x0b\\n\\x03key\\x18\\x01 \\x01(\\t\\x12\\r\\n\\x05value\\x18\\x02 \\x01(\\t:\\x02\\x38\\x01\\x1a\\x38\\n\\x16\\x45xampleWeightKeysEntry\\x12\\x0b\\n\\x03key\\x18\\x01 \\x01(\\t\\x12\\r\\n\\x05value\\x18\\x02 \\x01(\\t:\\x02\\x38\\x01J\\x04\\x08\\x01\\x10\\x02J\\x04\\x08\\x04\\x10\\x05\\\"\\xc4\\x01\\n\\x0bSlicingSpec\\x12\\x14\\n\\x0c\\x66\\x65\\x61ture_keys\\x18\\x01 \\x03(\\t\\x12Q\\n\\x0e\\x66\\x65\\x61ture_values\\x18\\x02 \\x03(\\x0b\\x32\\x39.tensorflow_model_analysis.SlicingSpec.FeatureValuesEntry\\x12\\x16\\n\\x0eslice_keys_sql\\x18\\x03 \\x01(\\t\\x1a\\x34\\n\\x12\\x46\\x65\\x61tureValuesEntry\\x12\\x0b\\n\\x03key\\x1`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000801"
          },
          "message": {
            "text": "Backdoor: Executing Obfuscated Code",
            "id": "BD000801"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/proto/config_pb2.py"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 1343,
                  "endLine": 28,
                  "endColumn": 1363,
                  "snippet": {
                    "text": "\\x03key\\x18\\x01 \\x01(\\t\\x12\\r\\n\\x05value\\x18\\x02 \\x01(\\t:\\x02\\x38\\x01\\x1a\\x35\\n\\x13PredictionKeysEntry\\x12\\x0b\\n\\x03key\\x18\\x01 \\x01(\\t\\x12\\r\\n\\x05value\\x18\\x02 \\x01(\\t:\\x02\\x38\\x01\\x1a\\x38\\n\\x16\\x45xampleWeightKeysEntry\\x12\\x0b\\n\\x03key\\x18\\x01 \\x01(\\t\\x12\\r\\n\\x05value\\x18\\x02 \\x01(\\t:\\x02\\x38\\x01J\\x04\\x08\\x01\\x10\\x02J\\x04\\x08\\x04\\x10\\x05\\\"\\xc4\\x01\\n\\x0bSlicingSpec\\x12\\x14\\n\\x0c\\x66\\x65\\x61ture_keys\\x18\\x01 \\x03(\\t\\x12Q\\n\\x0e\\x66\\x65\\x61ture_values\\x18\\x02 \\x03(\\x0b\\x32\\x39.tensorflow_model_analysis.SlicingSpec.FeatureValuesEntry\\x12\\x16\\n\\x0eslice_keys_sql\\x18\\x03 \\x01(\\t\\x1a\\x34\\n\\x12\\x46\\x65\\x61tureValuesEntr",
                    "rendered": {
                      "text": "\\x03key\\x18\\x01 \\x01(\\t\\x12\\r\\n\\x05value\\x18\\x02 \\x01(\\t:\\x02\\x38\\x01\\x1a\\x35\\n\\x13PredictionKeysEntry\\x12\\x0b\\n\\x03key\\x18\\x01 \\x01(\\t\\x12\\r\\n\\x05value\\x18\\x02 \\x01(\\t:\\x02\\x38\\x01\\x1a\\x38\\n\\x16\\x45xampleWeightKeysEntry\\x12\\x0b\\n\\x03key\\x18\\x01 \\x01(\\t\\x12\\r\\n\\x05value\\x18\\x02 \\x01(\\t:\\x02\\x38\\x01J\\x04\\x08\\x01\\x10\\x02J\\x04\\x08\\x04\\x10\\x05\\\"\\xc4\\x01\\n\\x0bSlicingSpec\\x12\\x14\\n\\x0c\\x66\\x65\\x61ture_keys\\x18\\x01 \\x03(\\t\\x12Q\\n\\x0e\\x66\\x65\\x61ture_values\\x18\\x02 \\x03(\\x0b\\x32\\x39.tensorflow_model_analysis.SlicingSpec.FeatureValuesEntry\\x12\\x16\\n\\x0eslice_keys_sql\\x18\\x03 \\x01(\\t\\x1a\\x34\\n\\x12\\x46\\x65\\x61tureValuesEntr",
                      "markdown": "`\\x03key\\x18\\x01 \\x01(\\t\\x12\\r\\n\\x05value\\x18\\x02 \\x01(\\t:\\x02\\x38\\x01\\x1a\\x35\\n\\x13PredictionKeysEntry\\x12\\x0b\\n\\x03key\\x18\\x01 \\x01(\\t\\x12\\r\\n\\x05value\\x18\\x02 \\x01(\\t:\\x02\\x38\\x01\\x1a\\x38\\n\\x16\\x45xampleWeightKeysEntry\\x12\\x0b\\n\\x03key\\x18\\x01 \\x01(\\t\\x12\\r\\n\\x05value\\x18\\x02 \\x01(\\t:\\x02\\x38\\x01J\\x04\\x08\\x01\\x10\\x02J\\x04\\x08\\x04\\x10\\x05\\\"\\xc4\\x01\\n\\x0bSlicingSpec\\x12\\x14\\n\\x0c\\x66\\x65\\x61ture_keys\\x18\\x01 \\x03(\\t\\x12Q\\n\\x0e\\x66\\x65\\x61ture_values\\x18\\x02 \\x03(\\x0b\\x32\\x39.tensorflow_model_analysis.SlicingSpec.FeatureValuesEntry\\x12\\x16\\n\\x0eslice_keys_sql\\x18\\x03 \\x01(\\t\\x1a\\x34\\n\\x12\\x46\\x65\\x61tureValuesEntr`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000801"
          },
          "message": {
            "text": "Backdoor: Executing Obfuscated Code",
            "id": "BD000801"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/proto/config_pb2.py"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 1212,
                  "endLine": 28,
                  "endColumn": 1232,
                  "snippet": {
                    "text": ".tensorflow_model_analysis.PaddingOptions\\x12\\x1c\\n\\x14inference_batch_size\\x18\\x0f \\x01(\\x05\\x1a\\x30\\n\\x0eLabelKeysEntry\\x12\\x0b\\n\\x03key\\x18\\x01 \\x01(\\t\\x12\\r\\n\\x05value\\x18\\x02 \\x01(\\t:\\x02\\x38\\x01\\x1a\\x35\\n\\x13PredictionKeysEntry\\x12\\x0b\\n\\x03key\\x18\\x01 \\x01(\\t\\x12\\r\\n\\x05value\\x18\\x02 \\x01(\\t:\\x02\\x38\\x01\\x1a\\x38\\n\\x16\\x45xampleWeightKeysEntry\\x12\\x0b\\n\\x03key\\x18\\x01 \\x01(\\t\\x12\\r\\n\\x05value\\x18\\x02 \\x01(\\t:\\x02\\x38\\x01J\\x04\\x08\\x01\\x10\\x02J\\x04\\x08\\x04\\x10\\x05\\\"\\xc4\\x01\\n\\x0bSlicingSpec\\x12\\x14\\n\\x0c\\x66\\x65\\x61ture_keys\\x18\\x01 \\x03(\\t\\x12Q\\n\\x0e\\x66\\x65\\x61ture_values\\x18\\x02 \\x03(\\x0b\\x32\\x39.tensorflo",
                    "rendered": {
                      "text": ".tensorflow_model_analysis.PaddingOptions\\x12\\x1c\\n\\x14inference_batch_size\\x18\\x0f \\x01(\\x05\\x1a\\x30\\n\\x0eLabelKeysEntry\\x12\\x0b\\n\\x03key\\x18\\x01 \\x01(\\t\\x12\\r\\n\\x05value\\x18\\x02 \\x01(\\t:\\x02\\x38\\x01\\x1a\\x35\\n\\x13PredictionKeysEntry\\x12\\x0b\\n\\x03key\\x18\\x01 \\x01(\\t\\x12\\r\\n\\x05value\\x18\\x02 \\x01(\\t:\\x02\\x38\\x01\\x1a\\x38\\n\\x16\\x45xampleWeightKeysEntry\\x12\\x0b\\n\\x03key\\x18\\x01 \\x01(\\t\\x12\\r\\n\\x05value\\x18\\x02 \\x01(\\t:\\x02\\x38\\x01J\\x04\\x08\\x01\\x10\\x02J\\x04\\x08\\x04\\x10\\x05\\\"\\xc4\\x01\\n\\x0bSlicingSpec\\x12\\x14\\n\\x0c\\x66\\x65\\x61ture_keys\\x18\\x01 \\x03(\\t\\x12Q\\n\\x0e\\x66\\x65\\x61ture_values\\x18\\x02 \\x03(\\x0b\\x32\\x39.tensorflo",
                      "markdown": "`.tensorflow_model_analysis.PaddingOptions\\x12\\x1c\\n\\x14inference_batch_size\\x18\\x0f \\x01(\\x05\\x1a\\x30\\n\\x0eLabelKeysEntry\\x12\\x0b\\n\\x03key\\x18\\x01 \\x01(\\t\\x12\\r\\n\\x05value\\x18\\x02 \\x01(\\t:\\x02\\x38\\x01\\x1a\\x35\\n\\x13PredictionKeysEntry\\x12\\x0b\\n\\x03key\\x18\\x01 \\x01(\\t\\x12\\r\\n\\x05value\\x18\\x02 \\x01(\\t:\\x02\\x38\\x01\\x1a\\x38\\n\\x16\\x45xampleWeightKeysEntry\\x12\\x0b\\n\\x03key\\x18\\x01 \\x01(\\t\\x12\\r\\n\\x05value\\x18\\x02 \\x01(\\t:\\x02\\x38\\x01J\\x04\\x08\\x01\\x10\\x02J\\x04\\x08\\x04\\x10\\x05\\\"\\xc4\\x01\\n\\x0bSlicingSpec\\x12\\x14\\n\\x0c\\x66\\x65\\x61ture_keys\\x18\\x01 \\x03(\\t\\x12Q\\n\\x0e\\x66\\x65\\x61ture_values\\x18\\x02 \\x03(\\x0b\\x32\\x39.tensorflo`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000801"
          },
          "message": {
            "text": "Backdoor: Executing Obfuscated Code",
            "id": "BD000801"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/proto/config_pb2.py"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 1100,
                  "endLine": 28,
                  "endColumn": 1120,
                  "snippet": {
                    "text": "leWeightKeysEntry\\x12\\x13\\n\\x0bis_baseline\\x18\\x0b \\x01(\\x08\\x12\\x42\\n\\x0fpadding_options\\x18\\x0e \\x01(\\x0b\\x32).tensorflow_model_analysis.PaddingOptions\\x12\\x1c\\n\\x14inference_batch_size\\x18\\x0f \\x01(\\x05\\x1a\\x30\\n\\x0eLabelKeysEntry\\x12\\x0b\\n\\x03key\\x18\\x01 \\x01(\\t\\x12\\r\\n\\x05value\\x18\\x02 \\x01(\\t:\\x02\\x38\\x01\\x1a\\x35\\n\\x13PredictionKeysEntry\\x12\\x0b\\n\\x03key\\x18\\x01 \\x01(\\t\\x12\\r\\n\\x05value\\x18\\x02 \\x01(\\t:\\x02\\x38\\x01\\x1a\\x38\\n\\x16\\x45xampleWeightKeysEntry\\x12\\x0b\\n\\x03key\\x18\\x01 \\x01(\\t\\x12\\r\\n\\x05value\\x18\\x02 \\x01(\\t:\\x02\\x38\\x01J\\x04\\x08\\x01\\x10\\x02J\\x04\\x08\\x04\\x10\\x05\\\"\\xc4\\x01\\n\\x0bSlicingSpec\\x12\\x14\\",
                    "rendered": {
                      "text": "leWeightKeysEntry\\x12\\x13\\n\\x0bis_baseline\\x18\\x0b \\x01(\\x08\\x12\\x42\\n\\x0fpadding_options\\x18\\x0e \\x01(\\x0b\\x32).tensorflow_model_analysis.PaddingOptions\\x12\\x1c\\n\\x14inference_batch_size\\x18\\x0f \\x01(\\x05\\x1a\\x30\\n\\x0eLabelKeysEntry\\x12\\x0b\\n\\x03key\\x18\\x01 \\x01(\\t\\x12\\r\\n\\x05value\\x18\\x02 \\x01(\\t:\\x02\\x38\\x01\\x1a\\x35\\n\\x13PredictionKeysEntry\\x12\\x0b\\n\\x03key\\x18\\x01 \\x01(\\t\\x12\\r\\n\\x05value\\x18\\x02 \\x01(\\t:\\x02\\x38\\x01\\x1a\\x38\\n\\x16\\x45xampleWeightKeysEntry\\x12\\x0b\\n\\x03key\\x18\\x01 \\x01(\\t\\x12\\r\\n\\x05value\\x18\\x02 \\x01(\\t:\\x02\\x38\\x01J\\x04\\x08\\x01\\x10\\x02J\\x04\\x08\\x04\\x10\\x05\\\"\\xc4\\x01\\n\\x0bSlicingSpec\\x12\\x14\\",
                      "markdown": "`leWeightKeysEntry\\x12\\x13\\n\\x0bis_baseline\\x18\\x0b \\x01(\\x08\\x12\\x42\\n\\x0fpadding_options\\x18\\x0e \\x01(\\x0b\\x32).tensorflow_model_analysis.PaddingOptions\\x12\\x1c\\n\\x14inference_batch_size\\x18\\x0f \\x01(\\x05\\x1a\\x30\\n\\x0eLabelKeysEntry\\x12\\x0b\\n\\x03key\\x18\\x01 \\x01(\\t\\x12\\r\\n\\x05value\\x18\\x02 \\x01(\\t:\\x02\\x38\\x01\\x1a\\x35\\n\\x13PredictionKeysEntry\\x12\\x0b\\n\\x03key\\x18\\x01 \\x01(\\t\\x12\\r\\n\\x05value\\x18\\x02 \\x01(\\t:\\x02\\x38\\x01\\x1a\\x38\\n\\x16\\x45xampleWeightKeysEntry\\x12\\x0b\\n\\x03key\\x18\\x01 \\x01(\\t\\x12\\r\\n\\x05value\\x18\\x02 \\x01(\\t:\\x02\\x38\\x01J\\x04\\x08\\x01\\x10\\x02J\\x04\\x08\\x04\\x10\\x05\\\"\\xc4\\x01\\n\\x0bSlicingSpec\\x12\\x14\\`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/proto/__init__.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/post_export_metrics/post_export_metrics_t"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/post_export_metrics/post_export_metrics_t"
                },
                "region": {
                  "startLine": 3035,
                  "startColumn": 65,
                  "endLine": 3036,
                  "snippet": {
                    "text": "        .simple_fixed_prediction_estimator_extra_fields(None,\n                                                        temp_eval_export_dir))\n\n    # Same set of examples as in the unweighted case, except this time\n    # with weights.\n    examples = [\n        self._makeExample(\n            prediction=1.0000,\n",
                    "rendered": {
                      "text": "        .simple_fixed_prediction_estimator_extra_fields(None,\n                                                        temp_eval_export_dir))\n\n    # Same set of examples as in the unweighted case, except this time\n    # with weights.\n    examples = [\n        self._makeExample(\n            prediction=1.0000,\n",
                      "markdown": "`        .simple_fixed_prediction_estimator_extra_fields(None,\n                                                        temp_eval_export_dir))\n\n    # Same set of examples as in the unweighted case, except this time\n    # with weights.\n    examples = [\n        self._makeExample(\n            prediction=1.0000,\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/post_export_metrics/post_export_metrics_t"
                },
                "region": {
                  "startLine": 2870,
                  "startColumn": 65,
                  "endLine": 2871,
                  "snippet": {
                    "text": "        .simple_fixed_prediction_estimator_extra_fields(None,\n                                                        temp_eval_export_dir))\n\n    # Same set of examples as in the unweighted case, except this time\n    # with weights.\n    examples = [\n        self._makeExample(\n            prediction=1.0000,\n",
                    "rendered": {
                      "text": "        .simple_fixed_prediction_estimator_extra_fields(None,\n                                                        temp_eval_export_dir))\n\n    # Same set of examples as in the unweighted case, except this time\n    # with weights.\n    examples = [\n        self._makeExample(\n            prediction=1.0000,\n",
                      "markdown": "`        .simple_fixed_prediction_estimator_extra_fields(None,\n                                                        temp_eval_export_dir))\n\n    # Same set of examples as in the unweighted case, except this time\n    # with weights.\n    examples = [\n        self._makeExample(\n            prediction=1.0000,\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/post_export_metrics/post_export_metrics_t"
                },
                "region": {
                  "startLine": 2704,
                  "startColumn": 65,
                  "endLine": 2705,
                  "snippet": {
                    "text": "        .simple_fixed_prediction_estimator_extra_fields(None,\n                                                        temp_eval_export_dir))\n\n    # Same set of examples as in the unweighted case, except this time\n    # with weights.\n    examples = [\n        self._makeExample(\n            prediction=0.0000,\n",
                    "rendered": {
                      "text": "        .simple_fixed_prediction_estimator_extra_fields(None,\n                                                        temp_eval_export_dir))\n\n    # Same set of examples as in the unweighted case, except this time\n    # with weights.\n    examples = [\n        self._makeExample(\n            prediction=0.0000,\n",
                      "markdown": "`        .simple_fixed_prediction_estimator_extra_fields(None,\n                                                        temp_eval_export_dir))\n\n    # Same set of examples as in the unweighted case, except this time\n    # with weights.\n    examples = [\n        self._makeExample(\n            prediction=0.0000,\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/post_export_metrics/post_export_metrics_t"
                },
                "region": {
                  "startLine": 2288,
                  "startColumn": 65,
                  "endLine": 2289,
                  "snippet": {
                    "text": "        .simple_fixed_prediction_estimator_extra_fields(None,\n                                                        temp_eval_export_dir))\n\n    # Same set of examples as in the unweighted case, except this time\n    # with weights.\n    examples = [\n        self._makeExample(\n            prediction=0.0000,\n",
                    "rendered": {
                      "text": "        .simple_fixed_prediction_estimator_extra_fields(None,\n                                                        temp_eval_export_dir))\n\n    # Same set of examples as in the unweighted case, except this time\n    # with weights.\n    examples = [\n        self._makeExample(\n            prediction=0.0000,\n",
                      "markdown": "`        .simple_fixed_prediction_estimator_extra_fields(None,\n                                                        temp_eval_export_dir))\n\n    # Same set of examples as in the unweighted case, except this time\n    # with weights.\n    examples = [\n        self._makeExample(\n            prediction=0.0000,\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/post_export_metrics/post_export_metrics.p"
                },
                "region": {
                  "startLine": 129,
                  "startColumn": 27,
                  "endLine": 129,
                  "endColumn": 32,
                  "snippet": {
                    "text": "    return cast(types.TensorType, maybe_dict)\n\n  for key in key_precedence:\n    ref_tensor = maybe_dict.get(key)\n    if ref_tensor is not None:\n      return ref_tensor\n\n",
                    "rendered": {
                      "text": "    return cast(types.TensorType, maybe_dict)\n\n  for key in key_precedence:\n    ref_tensor = maybe_dict.get(key)\n    if ref_tensor is not None:\n      return ref_tensor\n\n",
                      "markdown": "`    return cast(types.TensorType, maybe_dict)\n\n  for key in key_precedence:\n    ref_tensor = maybe_dict.get(key)\n    if ref_tensor is not None:\n      return ref_tensor\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/post_export_metrics/post_export_metrics.p"
                },
                "region": {
                  "startLine": 1761,
                  "startColumn": 33,
                  "endLine": 1761,
                  "endColumn": 37,
                  "snippet": {
                    "text": "    \"\"\"Creates a metric that computes the recall at `k`.\n\n    Args:\n      cutoffs: List of `k` values at which to compute the precision and recall.\n        Use a value of `k` = 0 to indicate that all predictions should be\n        considered.\n      example_weight_key: The optional key of the example weight column in the\n",
                    "rendered": {
                      "text": "    \"\"\"Creates a metric that computes the recall at `k`.\n\n    Args:\n      cutoffs: List of `k` values at which to compute the precision and recall.\n        Use a value of `k` = 0 to indicate that all predictions should be\n        considered.\n      example_weight_key: The optional key of the example weight column in the\n",
                      "markdown": "`    \"\"\"Creates a metric that computes the recall at `k`.\n\n    Args:\n      cutoffs: List of `k` values at which to compute the precision and recall.\n        Use a value of `k` = 0 to indicate that all predictions should be\n        considered.\n      example_weight_key: The optional key of the example weight column in the\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/post_export_metrics/post_export_metrics.p"
                },
                "region": {
                  "startLine": 1758,
                  "startColumn": 48,
                  "endLine": 1758,
                  "endColumn": 52,
                  "snippet": {
                    "text": "               metric_tag: Optional[str] = None,\n               classes_key: Optional[str] = None,\n               probabilities_key: Optional[str] = None):\n    \"\"\"Creates a metric that computes the recall at `k`.\n\n    Args:\n      cutoffs: List of `k` values at which to compute the precision and recall.\n",
                    "rendered": {
                      "text": "               metric_tag: Optional[str] = None,\n               classes_key: Optional[str] = None,\n               probabilities_key: Optional[str] = None):\n    \"\"\"Creates a metric that computes the recall at `k`.\n\n    Args:\n      cutoffs: List of `k` values at which to compute the precision and recall.\n",
                      "markdown": "`               metric_tag: Optional[str] = None,\n               classes_key: Optional[str] = None,\n               probabilities_key: Optional[str] = None):\n    \"\"\"Creates a metric that computes the recall at `k`.\n\n    Args:\n      cutoffs: List of `k` values at which to compute the precision and recall.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/post_export_metrics/post_export_metrics.p"
                },
                "region": {
                  "startLine": 1736,
                  "startColumn": 38,
                  "endLine": 1736,
                  "endColumn": 42,
                  "snippet": {
                    "text": "class _RecallAtK(_PrecisionRecallAtK):\n  \"\"\"Metric that computes recall at K for classification models.\n\n  Create a metric that computes recall at K.\n\n  Predictions should be a dict containing the ALL_CLASSES key and PROBABILITIES\n  keys. Predictions should have the same size for all examples. The model\n",
                    "rendered": {
                      "text": "class _RecallAtK(_PrecisionRecallAtK):\n  \"\"\"Metric that computes recall at K for classification models.\n\n  Create a metric that computes recall at K.\n\n  Predictions should be a dict containing the ALL_CLASSES key and PROBABILITIES\n  keys. Predictions should have the same size for all examples. The model\n",
                      "markdown": "`class _RecallAtK(_PrecisionRecallAtK):\n  \"\"\"Metric that computes recall at K for classification models.\n\n  Create a metric that computes recall at K.\n\n  Predictions should be a dict containing the ALL_CLASSES key and PROBABILITIES\n  keys. Predictions should have the same size for all examples. The model\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/post_export_metrics/post_export_metrics.p"
                },
                "region": {
                  "startLine": 1734,
                  "startColumn": 32,
                  "endLine": 1734,
                  "endColumn": 36,
                  "snippet": {
                    "text": "\n@_export('recall_at_k')\nclass _RecallAtK(_PrecisionRecallAtK):\n  \"\"\"Metric that computes recall at K for classification models.\n\n  Create a metric that computes recall at K.\n\n",
                    "rendered": {
                      "text": "\n@_export('recall_at_k')\nclass _RecallAtK(_PrecisionRecallAtK):\n  \"\"\"Metric that computes recall at K for classification models.\n\n  Create a metric that computes recall at K.\n\n",
                      "markdown": "`\n@_export('recall_at_k')\nclass _RecallAtK(_PrecisionRecallAtK):\n  \"\"\"Metric that computes recall at K for classification models.\n\n  Create a metric that computes recall at K.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/post_export_metrics/post_export_metrics.p"
                },
                "region": {
                  "startLine": 1706,
                  "startColumn": 33,
                  "endLine": 1706,
                  "endColumn": 37,
                  "snippet": {
                    "text": "    \"\"\"Creates a metric that computes the precision at `k`.\n\n    Args:\n      cutoffs: List of `k` values at which to compute the precision and recall.\n        Use a value of `k` = 0 to indicate that all predictions should be\n        considered.\n      example_weight_key: The optional key of the example weight column in the\n",
                    "rendered": {
                      "text": "    \"\"\"Creates a metric that computes the precision at `k`.\n\n    Args:\n      cutoffs: List of `k` values at which to compute the precision and recall.\n        Use a value of `k` = 0 to indicate that all predictions should be\n        considered.\n      example_weight_key: The optional key of the example weight column in the\n",
                      "markdown": "`    \"\"\"Creates a metric that computes the precision at `k`.\n\n    Args:\n      cutoffs: List of `k` values at which to compute the precision and recall.\n        Use a value of `k` = 0 to indicate that all predictions should be\n        considered.\n      example_weight_key: The optional key of the example weight column in the\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/post_export_metrics/post_export_metrics.p"
                },
                "region": {
                  "startLine": 1703,
                  "startColumn": 51,
                  "endLine": 1703,
                  "endColumn": 55,
                  "snippet": {
                    "text": "               metric_tag: Optional[str] = None,\n               classes_key: Optional[str] = None,\n               probabilities_key: Optional[str] = None):\n    \"\"\"Creates a metric that computes the precision at `k`.\n\n    Args:\n      cutoffs: List of `k` values at which to compute the precision and recall.\n",
                    "rendered": {
                      "text": "               metric_tag: Optional[str] = None,\n               classes_key: Optional[str] = None,\n               probabilities_key: Optional[str] = None):\n    \"\"\"Creates a metric that computes the precision at `k`.\n\n    Args:\n      cutoffs: List of `k` values at which to compute the precision and recall.\n",
                      "markdown": "`               metric_tag: Optional[str] = None,\n               classes_key: Optional[str] = None,\n               probabilities_key: Optional[str] = None):\n    \"\"\"Creates a metric that computes the precision at `k`.\n\n    Args:\n      cutoffs: List of `k` values at which to compute the precision and recall.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/post_export_metrics/post_export_metrics.p"
                },
                "region": {
                  "startLine": 1681,
                  "startColumn": 41,
                  "endLine": 1681,
                  "endColumn": 45,
                  "snippet": {
                    "text": "class _PrecisionAtK(_PrecisionRecallAtK):\n  \"\"\"Metric that computes precision at K for classification models.\n\n  Create a metric that computes precision at K.\n\n  Predictions should be a dict containing the ALL_CLASSES key and PROBABILITIES\n  keys. Predictions should have the same size for all examples.  The model\n",
                    "rendered": {
                      "text": "class _PrecisionAtK(_PrecisionRecallAtK):\n  \"\"\"Metric that computes precision at K for classification models.\n\n  Create a metric that computes precision at K.\n\n  Predictions should be a dict containing the ALL_CLASSES key and PROBABILITIES\n  keys. Predictions should have the same size for all examples.  The model\n",
                      "markdown": "`class _PrecisionAtK(_PrecisionRecallAtK):\n  \"\"\"Metric that computes precision at K for classification models.\n\n  Create a metric that computes precision at K.\n\n  Predictions should be a dict containing the ALL_CLASSES key and PROBABILITIES\n  keys. Predictions should have the same size for all examples.  The model\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/post_export_metrics/post_export_metrics.p"
                },
                "region": {
                  "startLine": 1679,
                  "startColumn": 35,
                  "endLine": 1679,
                  "endColumn": 39,
                  "snippet": {
                    "text": "\n@_export('precision_at_k')\nclass _PrecisionAtK(_PrecisionRecallAtK):\n  \"\"\"Metric that computes precision at K for classification models.\n\n  Create a metric that computes precision at K.\n\n",
                    "rendered": {
                      "text": "\n@_export('precision_at_k')\nclass _PrecisionAtK(_PrecisionRecallAtK):\n  \"\"\"Metric that computes precision at K for classification models.\n\n  Create a metric that computes precision at K.\n\n",
                      "markdown": "`\n@_export('precision_at_k')\nclass _PrecisionAtK(_PrecisionRecallAtK):\n  \"\"\"Metric that computes precision at K for classification models.\n\n  Create a metric that computes precision at K.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/post_export_metrics/post_export_metrics.p"
                },
                "region": {
                  "startLine": 1620,
                  "startColumn": 42,
                  "endLine": 1620,
                  "endColumn": 50,
                  "snippet": {
                    "text": "\n    # To support canned Estimators which right now only expose the argmax class\n    # id, if labels are ints then then the classes are likely class_ids in\n    # string form, so we can automatically expand the classes to the full set\n    # for matching the labels (see b/113170729).\n    if labels.dtype == tf.int64:\n      classes = tf.case(\n",
                    "rendered": {
                      "text": "\n    # To support canned Estimators which right now only expose the argmax class\n    # id, if labels are ints then then the classes are likely class_ids in\n    # string form, so we can automatically expand the classes to the full set\n    # for matching the labels (see b/113170729).\n    if labels.dtype == tf.int64:\n      classes = tf.case(\n",
                      "markdown": "`\n    # To support canned Estimators which right now only expose the argmax class\n    # id, if labels are ints then then the classes are likely class_ids in\n    # string form, so we can automatically expand the classes to the full set\n    # for matching the labels (see b/113170729).\n    if labels.dtype == tf.int64:\n      classes = tf.case(\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/post_export_metrics/post_export_metrics.p"
                },
                "region": {
                  "startLine": 1604,
                  "startColumn": 5,
                  "endLine": 1604,
                  "endColumn": 13,
                  "snippet": {
                    "text": "      else:\n        labels = tf.sparse.to_dense(labels)\n\n    # Expand dims if necessary.\n    labels = tf.case(\n        [(tf.equal(tf.rank(labels), 1), lambda: tf.expand_dims(labels, -1))],\n        default=lambda: labels)\n",
                    "rendered": {
                      "text": "      else:\n        labels = tf.sparse.to_dense(labels)\n\n    # Expand dims if necessary.\n    labels = tf.case(\n        [(tf.equal(tf.rank(labels), 1), lambda: tf.expand_dims(labels, -1))],\n        default=lambda: labels)\n",
                      "markdown": "`      else:\n        labels = tf.sparse.to_dense(labels)\n\n    # Expand dims if necessary.\n    labels = tf.case(\n        [(tf.equal(tf.rank(labels), 1), lambda: tf.expand_dims(labels, -1))],\n        default=lambda: labels)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/post_export_metrics/post_export_metrics.p"
                },
                "region": {
                  "startLine": 1523,
                  "startColumn": 33,
                  "endLine": 1523,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\n    Args:\n      metric_name: Metric (PRECISION_AT_KEY or RECALL_AT_K) to compute.\n      cutoffs: List of `k` values at which to compute the precision and recall.\n        Use a value of `k` = 0 to indicate that all predictions should be\n        considered.\n      example_weight_key: The optional key of the example weight column in the\n",
                    "rendered": {
                      "text": "\n    Args:\n      metric_name: Metric (PRECISION_AT_KEY or RECALL_AT_K) to compute.\n      cutoffs: List of `k` values at which to compute the precision and recall.\n        Use a value of `k` = 0 to indicate that all predictions should be\n        considered.\n      example_weight_key: The optional key of the example weight column in the\n",
                      "markdown": "`\n    Args:\n      metric_name: Metric (PRECISION_AT_KEY or RECALL_AT_K) to compute.\n      cutoffs: List of `k` values at which to compute the precision and recall.\n        Use a value of `k` = 0 to indicate that all predictions should be\n        considered.\n      example_weight_key: The optional key of the example weight column in the\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/post_export_metrics/post_export_metrics.p"
                },
                "region": {
                  "startLine": 1519,
                  "startColumn": 64,
                  "endLine": 1519,
                  "endColumn": 68,
                  "snippet": {
                    "text": "               metric_tag: Optional[str] = None,\n               classes_key: Optional[str] = None,\n               probabilities_key: Optional[str] = None):\n    \"\"\"Creates a metric that computes either precision or recall at `k`.\n\n    Args:\n      metric_name: Metric (PRECISION_AT_KEY or RECALL_AT_K) to compute.\n",
                    "rendered": {
                      "text": "               metric_tag: Optional[str] = None,\n               classes_key: Optional[str] = None,\n               probabilities_key: Optional[str] = None):\n    \"\"\"Creates a metric that computes either precision or recall at `k`.\n\n    Args:\n      metric_name: Metric (PRECISION_AT_KEY or RECALL_AT_K) to compute.\n",
                      "markdown": "`               metric_tag: Optional[str] = None,\n               classes_key: Optional[str] = None,\n               probabilities_key: Optional[str] = None):\n    \"\"\"Creates a metric that computes either precision or recall at `k`.\n\n    Args:\n      metric_name: Metric (PRECISION_AT_KEY or RECALL_AT_K) to compute.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/post_export_metrics/post_export_metrics.p"
                },
                "region": {
                  "startLine": 1492,
                  "startColumn": 51,
                  "endLine": 1492,
                  "endColumn": 55,
                  "snippet": {
                    "text": "class _PrecisionRecallAtK(_PostExportMetric):\n  \"\"\"Metric that computes precision or recall at K for classification models.\n\n  Create a metric that computes precision or recall at K.\n\n  Predictions should be a dict containing the ALL_CLASSES key and PROBABILITIES\n  keys. Predictions should have the same size for all examples.  The model\n",
                    "rendered": {
                      "text": "class _PrecisionRecallAtK(_PostExportMetric):\n  \"\"\"Metric that computes precision or recall at K for classification models.\n\n  Create a metric that computes precision or recall at K.\n\n  Predictions should be a dict containing the ALL_CLASSES key and PROBABILITIES\n  keys. Predictions should have the same size for all examples.  The model\n",
                      "markdown": "`class _PrecisionRecallAtK(_PostExportMetric):\n  \"\"\"Metric that computes precision or recall at K for classification models.\n\n  Create a metric that computes precision or recall at K.\n\n  Predictions should be a dict containing the ALL_CLASSES key and PROBABILITIES\n  keys. Predictions should have the same size for all examples.  The model\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/post_export_metrics/post_export_metrics.p"
                },
                "region": {
                  "startLine": 1490,
                  "startColumn": 45,
                  "endLine": 1490,
                  "endColumn": 49,
                  "snippet": {
                    "text": "\n\nclass _PrecisionRecallAtK(_PostExportMetric):\n  \"\"\"Metric that computes precision or recall at K for classification models.\n\n  Create a metric that computes precision or recall at K.\n\n",
                    "rendered": {
                      "text": "\n\nclass _PrecisionRecallAtK(_PostExportMetric):\n  \"\"\"Metric that computes precision or recall at K for classification models.\n\n  Create a metric that computes precision or recall at K.\n\n",
                      "markdown": "`\n\nclass _PrecisionRecallAtK(_PostExportMetric):\n  \"\"\"Metric that computes precision or recall at K for classification models.\n\n  Create a metric that computes precision or recall at K.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/post_export_metrics/post_export_metrics.p"
                },
                "region": {
                  "startLine": 1222,
                  "startColumn": 21,
                  "endLine": 1222,
                  "endColumn": 25,
                  "snippet": {
                    "text": "\n@_export('confusion_matrix_at_thresholds')\nclass _ConfusionMatrixAtThresholds(_ConfusionMatrixBasedMetric):\n  \"\"\"Confusion matrix at thresholds.\"\"\"\n\n  def get_metric_ops(\n      self, features_dict: types.TensorTypeMaybeDict,\n",
                    "rendered": {
                      "text": "\n@_export('confusion_matrix_at_thresholds')\nclass _ConfusionMatrixAtThresholds(_ConfusionMatrixBasedMetric):\n  \"\"\"Confusion matrix at thresholds.\"\"\"\n\n  def get_metric_ops(\n      self, features_dict: types.TensorTypeMaybeDict,\n",
                      "markdown": "`\n@_export('confusion_matrix_at_thresholds')\nclass _ConfusionMatrixAtThresholds(_ConfusionMatrixBasedMetric):\n  \"\"\"Confusion matrix at thresholds.\"\"\"\n\n  def get_metric_ops(\n      self, features_dict: types.TensorTypeMaybeDict,\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/post_export_metrics/post_export_metrics.p"
                },
                "region": {
                  "startLine": 1127,
                  "startColumn": 48,
                  "endLine": 1127,
                  "endColumn": 52,
                  "snippet": {
                    "text": "      labels_dict: types.TensorTypeMaybeDict,\n  ) -> Tuple[Dict[str, List[types.TensorType]], Dict[str,\n                                                     List[types.TensorType]]]:\n    \"\"\"Metric ops for computing confusion matrix at the given thresholds.\n\n    This is factored out because it's common to AucPlots and\n    ConfusionMatrixAtThresholds.\n",
                    "rendered": {
                      "text": "      labels_dict: types.TensorTypeMaybeDict,\n  ) -> Tuple[Dict[str, List[types.TensorType]], Dict[str,\n                                                     List[types.TensorType]]]:\n    \"\"\"Metric ops for computing confusion matrix at the given thresholds.\n\n    This is factored out because it's common to AucPlots and\n    ConfusionMatrixAtThresholds.\n",
                      "markdown": "`      labels_dict: types.TensorTypeMaybeDict,\n  ) -> Tuple[Dict[str, List[types.TensorType]], Dict[str,\n                                                     List[types.TensorType]]]:\n    \"\"\"Metric ops for computing confusion matrix at the given thresholds.\n\n    This is factored out because it's common to AucPlots and\n    ConfusionMatrixAtThresholds.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/post_export_metrics/post_export_metrics.p"
                },
                "region": {
                  "startLine": 1046,
                  "startColumn": 57,
                  "endLine": 1046,
                  "endColumn": 61,
                  "snippet": {
                    "text": "               labels_key: Optional[str] = None,\n               metric_tag: Optional[str] = None,\n               tensor_index: Optional[int] = None) -> None:\n    \"\"\"Create a metric that computes the confusion matrix at given thresholds.\n\n    Predictions should be one of:\n      (a) a single float in [0, 1]\n",
                    "rendered": {
                      "text": "               labels_key: Optional[str] = None,\n               metric_tag: Optional[str] = None,\n               tensor_index: Optional[int] = None) -> None:\n    \"\"\"Create a metric that computes the confusion matrix at given thresholds.\n\n    Predictions should be one of:\n      (a) a single float in [0, 1]\n",
                      "markdown": "`               labels_key: Optional[str] = None,\n               metric_tag: Optional[str] = None,\n               tensor_index: Optional[int] = None) -> None:\n    \"\"\"Create a metric that computes the confusion matrix at given thresholds.\n\n    Predictions should be one of:\n      (a) a single float in [0, 1]\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/post_export_metrics/post_export_metrics.p"
                },
                "region": {
                  "startLine": 852,
                  "startColumn": 71,
                  "endLine": 852,
                  "endColumn": 75,
                  "snippet": {
                    "text": "  ALL_CLASSES tensor if present).\n\n  The plot contains uniformly-sized buckets for predictions in [0, 1],\n  and additional buckets for predictions less than 0 and greater than 1 at the\n  ends.\n  \"\"\"\n\n",
                    "rendered": {
                      "text": "  ALL_CLASSES tensor if present).\n\n  The plot contains uniformly-sized buckets for predictions in [0, 1],\n  and additional buckets for predictions less than 0 and greater than 1 at the\n  ends.\n  \"\"\"\n\n",
                      "markdown": "`  ALL_CLASSES tensor if present).\n\n  The plot contains uniformly-sized buckets for predictions in [0, 1],\n  and additional buckets for predictions less than 0 and greater than 1 at the\n  ends.\n  \"\"\"\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/post_export_metrics/post_export_metrics.p"
                },
                "region": {
                  "startLine": 559,
                  "startColumn": 37,
                  "endLine": 559,
                  "endColumn": 41,
                  "snippet": {
                    "text": "class _ExampleCount(_PostExportMetric):\n  \"\"\"Metric that counts the number of examples processed.\n\n  We get the example count by looking at the predictions dictionary and picking\n  a reference Tensor. If we can find a standard key (e.g.\n  PredictionKeys.LOGISTIC, etc), we use that as the reference Tensor. Otherwise,\n  we just use the first key in sorted order from one of the dictionaries\n",
                    "rendered": {
                      "text": "class _ExampleCount(_PostExportMetric):\n  \"\"\"Metric that counts the number of examples processed.\n\n  We get the example count by looking at the predictions dictionary and picking\n  a reference Tensor. If we can find a standard key (e.g.\n  PredictionKeys.LOGISTIC, etc), we use that as the reference Tensor. Otherwise,\n  we just use the first key in sorted order from one of the dictionaries\n",
                      "markdown": "`class _ExampleCount(_PostExportMetric):\n  \"\"\"Metric that counts the number of examples processed.\n\n  We get the example count by looking at the predictions dictionary and picking\n  a reference Tensor. If we can find a standard key (e.g.\n  PredictionKeys.LOGISTIC, etc), we use that as the reference Tensor. Otherwise,\n  we just use the first key in sorted order from one of the dictionaries\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/post_export_metrics/post_export_metrics.p"
                },
                "region": {
                  "startLine": 368,
                  "startColumn": 48,
                  "endLine": 368,
                  "endColumn": 52,
                  "snippet": {
                    "text": "                                      self._tensor_index))\n\n  def _select_class(self, predictions_tensor, labels_tensor):\n    \"\"\"Gets predictions and labels for the class at index self._tensor_index.\"\"\"\n\n    def make_multi_hot_labels():\n      \"\"\"Converts class index labels to multi-hot vector.\"\"\"\n",
                    "rendered": {
                      "text": "                                      self._tensor_index))\n\n  def _select_class(self, predictions_tensor, labels_tensor):\n    \"\"\"Gets predictions and labels for the class at index self._tensor_index.\"\"\"\n\n    def make_multi_hot_labels():\n      \"\"\"Converts class index labels to multi-hot vector.\"\"\"\n",
                      "markdown": "`                                      self._tensor_index))\n\n  def _select_class(self, predictions_tensor, labels_tensor):\n    \"\"\"Gets predictions and labels for the class at index self._tensor_index.\"\"\"\n\n    def make_multi_hot_labels():\n      \"\"\"Converts class index labels to multi-hot vector.\"\"\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/post_export_metrics/post_export_metrics.p"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/post_export_metrics/post_export_metrics.p"
                },
                "region": {
                  "startLine": 1620,
                  "startColumn": 42,
                  "endLine": 1620,
                  "endColumn": 50,
                  "snippet": {
                    "text": "\n    # To support canned Estimators which right now only expose the argmax class\n    # id, if labels are ints then then the classes are likely class_ids in\n    # string form, so we can automatically expand the classes to the full set\n    # for matching the labels (see b/113170729).\n    if labels.dtype == tf.int64:\n      classes = tf.case(\n",
                    "rendered": {
                      "text": "\n    # To support canned Estimators which right now only expose the argmax class\n    # id, if labels are ints then then the classes are likely class_ids in\n    # string form, so we can automatically expand the classes to the full set\n    # for matching the labels (see b/113170729).\n    if labels.dtype == tf.int64:\n      classes = tf.case(\n",
                      "markdown": "`\n    # To support canned Estimators which right now only expose the argmax class\n    # id, if labels are ints then then the classes are likely class_ids in\n    # string form, so we can automatically expand the classes to the full set\n    # for matching the labels (see b/113170729).\n    if labels.dtype == tf.int64:\n      classes = tf.case(\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/post_export_metrics/post_export_metrics.p"
                },
                "region": {
                  "startLine": 1604,
                  "startColumn": 5,
                  "endLine": 1604,
                  "endColumn": 13,
                  "snippet": {
                    "text": "      else:\n        labels = tf.sparse.to_dense(labels)\n\n    # Expand dims if necessary.\n    labels = tf.case(\n        [(tf.equal(tf.rank(labels), 1), lambda: tf.expand_dims(labels, -1))],\n        default=lambda: labels)\n",
                    "rendered": {
                      "text": "      else:\n        labels = tf.sparse.to_dense(labels)\n\n    # Expand dims if necessary.\n    labels = tf.case(\n        [(tf.equal(tf.rank(labels), 1), lambda: tf.expand_dims(labels, -1))],\n        default=lambda: labels)\n",
                      "markdown": "`      else:\n        labels = tf.sparse.to_dense(labels)\n\n    # Expand dims if necessary.\n    labels = tf.case(\n        [(tf.equal(tf.rank(labels), 1), lambda: tf.expand_dims(labels, -1))],\n        default=lambda: labels)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/post_export_metrics/post_export_metrics.p"
                },
                "region": {
                  "startLine": 1172,
                  "startColumn": 44,
                  "endLine": 1172,
                  "endColumn": 50,
                  "snippet": {
                    "text": "\n  This is a convenience function to handle setting both value types in the\n  confusion matrix proto. We want to migrate to using just the t-distribution\n  value in the UI and analysis, but for some time will be needing to populate\n  both. This also handles both scalar values and ValueWithTDistribution.\n\n  Args:\n",
                    "rendered": {
                      "text": "\n  This is a convenience function to handle setting both value types in the\n  confusion matrix proto. We want to migrate to using just the t-distribution\n  value in the UI and analysis, but for some time will be needing to populate\n  both. This also handles both scalar values and ValueWithTDistribution.\n\n  Args:\n",
                      "markdown": "`\n  This is a convenience function to handle setting both value types in the\n  confusion matrix proto. We want to migrate to using just the t-distribution\n  value in the UI and analysis, but for some time will be needing to populate\n  both. This also handles both scalar values and ValueWithTDistribution.\n\n  Args:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/post_export_metrics/post_export_metrics.p"
                },
                "region": {
                  "startLine": 616,
                  "startColumn": 22,
                  "endLine": 616,
                  "endColumn": 28,
                  "snippet": {
                    "text": "\n      if ref_tensor is None:\n        tf.compat.v1.logging.info(\n            'Could not find a reference Tensor for example count. '\n            'Defaulting to the empty Tensor.')\n        ref_tensor = tf.constant([])\n\n",
                    "rendered": {
                      "text": "\n      if ref_tensor is None:\n        tf.compat.v1.logging.info(\n            'Could not find a reference Tensor for example count. '\n            'Defaulting to the empty Tensor.')\n        ref_tensor = tf.constant([])\n\n",
                      "markdown": "`\n      if ref_tensor is None:\n        tf.compat.v1.logging.info(\n            'Could not find a reference Tensor for example count. '\n            'Defaulting to the empty Tensor.')\n        ref_tensor = tf.constant([])\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/post_export_metrics/post_export_metrics.p"
                },
                "region": {
                  "startLine": 596,
                  "startColumn": 53,
                  "endLine": 596,
                  "endColumn": 59,
                  "snippet": {
                    "text": "      # If the predictions dict is empty, try the labels dict.\n      # If that is empty too, default to the empty Tensor.\n      tf.compat.v1.logging.info(\n          'ExampleCount post export metric: could not find any of '\n          'the standard keys in predictions_dict (keys were: %s)',\n          predictions_dict.keys())\n      if predictions_dict is not None and predictions_dict:\n",
                    "rendered": {
                      "text": "      # If the predictions dict is empty, try the labels dict.\n      # If that is empty too, default to the empty Tensor.\n      tf.compat.v1.logging.info(\n          'ExampleCount post export metric: could not find any of '\n          'the standard keys in predictions_dict (keys were: %s)',\n          predictions_dict.keys())\n      if predictions_dict is not None and predictions_dict:\n",
                      "markdown": "`      # If the predictions dict is empty, try the labels dict.\n      # If that is empty too, default to the empty Tensor.\n      tf.compat.v1.logging.info(\n          'ExampleCount post export metric: could not find any of '\n          'the standard keys in predictions_dict (keys were: %s)',\n          predictions_dict.keys())\n      if predictions_dict is not None and predictions_dict:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/post_export_metrics/post_export_metrics.p"
                },
                "region": {
                  "startLine": 560,
                  "startColumn": 31,
                  "endLine": 560,
                  "endColumn": 37,
                  "snippet": {
                    "text": "  \"\"\"Metric that counts the number of examples processed.\n\n  We get the example count by looking at the predictions dictionary and picking\n  a reference Tensor. If we can find a standard key (e.g.\n  PredictionKeys.LOGISTIC, etc), we use that as the reference Tensor. Otherwise,\n  we just use the first key in sorted order from one of the dictionaries\n  (predictions, labels) as the reference Tensor.\n",
                    "rendered": {
                      "text": "  \"\"\"Metric that counts the number of examples processed.\n\n  We get the example count by looking at the predictions dictionary and picking\n  a reference Tensor. If we can find a standard key (e.g.\n  PredictionKeys.LOGISTIC, etc), we use that as the reference Tensor. Otherwise,\n  we just use the first key in sorted order from one of the dictionaries\n  (predictions, labels) as the reference Tensor.\n",
                      "markdown": "`  \"\"\"Metric that counts the number of examples processed.\n\n  We get the example count by looking at the predictions dictionary and picking\n  a reference Tensor. If we can find a standard key (e.g.\n  PredictionKeys.LOGISTIC, etc), we use that as the reference Tensor. Otherwise,\n  we just use the first key in sorted order from one of the dictionaries\n  (predictions, labels) as the reference Tensor.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/post_export_metrics/post_export_metrics.p"
                },
                "region": {
                  "startLine": 435,
                  "startColumn": 28,
                  "endLine": 435,
                  "endColumn": 34,
                  "snippet": {
                    "text": "                     (self._target_prediction_keys, predictions_dict))\n    labels_tensor = _get_target_tensor(labels_dict, [self._labels_key])\n    if labels_tensor is None:\n      raise KeyError('Cannot find %s in labels_dict %s.' %\n                     (self._labels_key, labels_dict))\n\n    # Convert string labels\n",
                    "rendered": {
                      "text": "                     (self._target_prediction_keys, predictions_dict))\n    labels_tensor = _get_target_tensor(labels_dict, [self._labels_key])\n    if labels_tensor is None:\n      raise KeyError('Cannot find %s in labels_dict %s.' %\n                     (self._labels_key, labels_dict))\n\n    # Convert string labels\n",
                      "markdown": "`                     (self._target_prediction_keys, predictions_dict))\n    labels_tensor = _get_target_tensor(labels_dict, [self._labels_key])\n    if labels_tensor is None:\n      raise KeyError('Cannot find %s in labels_dict %s.' %\n                     (self._labels_key, labels_dict))\n\n    # Convert string labels\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/post_export_metrics/post_export_metrics.p"
                },
                "region": {
                  "startLine": 431,
                  "startColumn": 28,
                  "endLine": 431,
                  "endColumn": 34,
                  "snippet": {
                    "text": "    predictions_tensor = _get_target_tensor(predictions_dict,\n                                            self._target_prediction_keys)\n    if predictions_tensor is None:\n      raise KeyError('Cannot find any of %s in predictions_dict %s.' %\n                     (self._target_prediction_keys, predictions_dict))\n    labels_tensor = _get_target_tensor(labels_dict, [self._labels_key])\n    if labels_tensor is None:\n",
                    "rendered": {
                      "text": "    predictions_tensor = _get_target_tensor(predictions_dict,\n                                            self._target_prediction_keys)\n    if predictions_tensor is None:\n      raise KeyError('Cannot find any of %s in predictions_dict %s.' %\n                     (self._target_prediction_keys, predictions_dict))\n    labels_tensor = _get_target_tensor(labels_dict, [self._labels_key])\n    if labels_tensor is None:\n",
                      "markdown": "`    predictions_tensor = _get_target_tensor(predictions_dict,\n                                            self._target_prediction_keys)\n    if predictions_tensor is None:\n      raise KeyError('Cannot find any of %s in predictions_dict %s.' %\n                     (self._target_prediction_keys, predictions_dict))\n    labels_tensor = _get_target_tensor(labels_dict, [self._labels_key])\n    if labels_tensor is None:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/post_export_metrics/post_export_metrics.p"
                },
                "region": {
                  "startLine": 258,
                  "startColumn": 3,
                  "endLine": 258,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\n    head1 = tf.estimator.MultiClassHead(n_classes=3, name='head1')\n    head2 = tf.estimator.BinaryClassHead(name='head2')\n    head = tf.estimator.MultiHead([head1, head2])\n    ...\n\n  The prediction keys will be under head1/logistic and head2/logistic.\n",
                    "rendered": {
                      "text": "\n    head1 = tf.estimator.MultiClassHead(n_classes=3, name='head1')\n    head2 = tf.estimator.BinaryClassHead(name='head2')\n    head = tf.estimator.MultiHead([head1, head2])\n    ...\n\n  The prediction keys will be under head1/logistic and head2/logistic.\n",
                      "markdown": "`\n    head1 = tf.estimator.MultiClassHead(n_classes=3, name='head1')\n    head2 = tf.estimator.BinaryClassHead(name='head2')\n    head = tf.estimator.MultiHead([head1, head2])\n    ...\n\n  The prediction keys will be under head1/logistic and head2/logistic.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/post_export_metrics/post_export_metrics.p"
                },
                "region": {
                  "startLine": 249,
                  "startColumn": 49,
                  "endLine": 249,
                  "endColumn": 55,
                  "snippet": {
                    "text": "  \"\"\"Returns a list of additional keys to try given a metric tag and index.\n\n  If a metric_tag was given then we also search for keys prefixed by the\n  metric_tag. In most cases the metric_tag is the head name and\n  tf.estimator.MultiHead prefixes the predictions by the head. If tensor_index\n  was also provided then we also search under the tag stripped of the index. In\n  this case the tag has the form <head_name>_<tensor_index>.\n",
                    "rendered": {
                      "text": "  \"\"\"Returns a list of additional keys to try given a metric tag and index.\n\n  If a metric_tag was given then we also search for keys prefixed by the\n  metric_tag. In most cases the metric_tag is the head name and\n  tf.estimator.MultiHead prefixes the predictions by the head. If tensor_index\n  was also provided then we also search under the tag stripped of the index. In\n  this case the tag has the form <head_name>_<tensor_index>.\n",
                      "markdown": "`  \"\"\"Returns a list of additional keys to try given a metric tag and index.\n\n  If a metric_tag was given then we also search for keys prefixed by the\n  metric_tag. In most cases the metric_tag is the head name and\n  tf.estimator.MultiHead prefixes the predictions by the head. If tensor_index\n  was also provided then we also search under the tag stripped of the index. In\n  this case the tag has the form <head_name>_<tensor_index>.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/post_export_metrics/post_export_metrics.p"
                },
                "region": {
                  "startLine": 117,
                  "startColumn": 63,
                  "endLine": 117,
                  "endColumn": 69,
                  "snippet": {
                    "text": "  \"\"\"Returns Tensor for prediction or labels dicts.\n\n  Args:\n    maybe_dict: Tensor or dictionary of tensors within which to find the target.\n    key_precedence: One or more keys to search for--we will return the first\n      tensor found.\n\n",
                    "rendered": {
                      "text": "  \"\"\"Returns Tensor for prediction or labels dicts.\n\n  Args:\n    maybe_dict: Tensor or dictionary of tensors within which to find the target.\n    key_precedence: One or more keys to search for--we will return the first\n      tensor found.\n\n",
                      "markdown": "`  \"\"\"Returns Tensor for prediction or labels dicts.\n\n  Args:\n    maybe_dict: Tensor or dictionary of tensors within which to find the target.\n    key_precedence: One or more keys to search for--we will return the first\n      tensor found.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/post_export_metrics/metrics.py"
                },
                "region": {
                  "startLine": 524,
                  "startColumn": 40,
                  "endLine": 524,
                  "endColumn": 44,
                  "snippet": {
                    "text": "  [ cutoff n, recall at cutoff n ]\n\n  Returns:\n    (value_op, update_op) for the recall at K metric.\n  \"\"\"\n  # pyformat: enable\n  return _precision_recall_at_k(classes, scores, labels, cutoffs, weights,\n",
                    "rendered": {
                      "text": "  [ cutoff n, recall at cutoff n ]\n\n  Returns:\n    (value_op, update_op) for the recall at K metric.\n  \"\"\"\n  # pyformat: enable\n  return _precision_recall_at_k(classes, scores, labels, cutoffs, weights,\n",
                      "markdown": "`  [ cutoff n, recall at cutoff n ]\n\n  Returns:\n    (value_op, update_op) for the recall at K metric.\n  \"\"\"\n  # pyformat: enable\n  return _precision_recall_at_k(classes, scores, labels, cutoffs, weights,\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/post_export_metrics/metrics.py"
                },
                "region": {
                  "startLine": 521,
                  "startColumn": 20,
                  "endLine": 521,
                  "endColumn": 24,
                  "snippet": {
                    "text": "  [ cutoff 0, recall at cutoff 0 ]\n  [ cutoff 1, recall at cutoff 1 ]\n  [     :                :       ]\n  [ cutoff n, recall at cutoff n ]\n\n  Returns:\n    (value_op, update_op) for the recall at K metric.\n",
                    "rendered": {
                      "text": "  [ cutoff 0, recall at cutoff 0 ]\n  [ cutoff 1, recall at cutoff 1 ]\n  [     :                :       ]\n  [ cutoff n, recall at cutoff n ]\n\n  Returns:\n    (value_op, update_op) for the recall at K metric.\n",
                      "markdown": "`  [ cutoff 0, recall at cutoff 0 ]\n  [ cutoff 1, recall at cutoff 1 ]\n  [     :                :       ]\n  [ cutoff n, recall at cutoff n ]\n\n  Returns:\n    (value_op, update_op) for the recall at K metric.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/post_export_metrics/metrics.py"
                },
                "region": {
                  "startLine": 519,
                  "startColumn": 20,
                  "endLine": 519,
                  "endColumn": 24,
                  "snippet": {
                    "text": "\n  The value_op will return a matrix with len(cutoffs) rows and 2 columns:\n  [ cutoff 0, recall at cutoff 0 ]\n  [ cutoff 1, recall at cutoff 1 ]\n  [     :                :       ]\n  [ cutoff n, recall at cutoff n ]\n\n",
                    "rendered": {
                      "text": "\n  The value_op will return a matrix with len(cutoffs) rows and 2 columns:\n  [ cutoff 0, recall at cutoff 0 ]\n  [ cutoff 1, recall at cutoff 1 ]\n  [     :                :       ]\n  [ cutoff n, recall at cutoff n ]\n\n",
                      "markdown": "`\n  The value_op will return a matrix with len(cutoffs) rows and 2 columns:\n  [ cutoff 0, recall at cutoff 0 ]\n  [ cutoff 1, recall at cutoff 1 ]\n  [     :                :       ]\n  [ cutoff n, recall at cutoff n ]\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/post_export_metrics/metrics.py"
                },
                "region": {
                  "startLine": 518,
                  "startColumn": 20,
                  "endLine": 518,
                  "endColumn": 24,
                  "snippet": {
                    "text": "      If present, should be a BATCH_SIZE Tensor.\n\n  The value_op will return a matrix with len(cutoffs) rows and 2 columns:\n  [ cutoff 0, recall at cutoff 0 ]\n  [ cutoff 1, recall at cutoff 1 ]\n  [     :                :       ]\n  [ cutoff n, recall at cutoff n ]\n",
                    "rendered": {
                      "text": "      If present, should be a BATCH_SIZE Tensor.\n\n  The value_op will return a matrix with len(cutoffs) rows and 2 columns:\n  [ cutoff 0, recall at cutoff 0 ]\n  [ cutoff 1, recall at cutoff 1 ]\n  [     :                :       ]\n  [ cutoff n, recall at cutoff n ]\n",
                      "markdown": "`      If present, should be a BATCH_SIZE Tensor.\n\n  The value_op will return a matrix with len(cutoffs) rows and 2 columns:\n  [ cutoff 0, recall at cutoff 0 ]\n  [ cutoff 1, recall at cutoff 1 ]\n  [     :                :       ]\n  [ cutoff n, recall at cutoff n ]\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/post_export_metrics/metrics.py"
                },
                "region": {
                  "startLine": 510,
                  "startColumn": 51,
                  "endLine": 510,
                  "endColumn": 55,
                  "snippet": {
                    "text": "      BATCH_SIZE x NUM_CLASSES Tensor.\n    labels: Tensor containing the true labels. Should be a rank-2 Tensor where\n      the first dimension is BATCH_SIZE. The second dimension can be anything.\n    cutoffs: List containing the values for the `k` at which to compute the\n      recall for. Use a value of `k` = 0 to indicate that all predictions should\n      be considered.\n    weights: Optional weights for each of the examples. If None,\n",
                    "rendered": {
                      "text": "      BATCH_SIZE x NUM_CLASSES Tensor.\n    labels: Tensor containing the true labels. Should be a rank-2 Tensor where\n      the first dimension is BATCH_SIZE. The second dimension can be anything.\n    cutoffs: List containing the values for the `k` at which to compute the\n      recall for. Use a value of `k` = 0 to indicate that all predictions should\n      be considered.\n    weights: Optional weights for each of the examples. If None,\n",
                      "markdown": "`      BATCH_SIZE x NUM_CLASSES Tensor.\n    labels: Tensor containing the true labels. Should be a rank-2 Tensor where\n      the first dimension is BATCH_SIZE. The second dimension can be anything.\n    cutoffs: List containing the values for the `k` at which to compute the\n      recall for. Use a value of `k` = 0 to indicate that all predictions should\n      be considered.\n    weights: Optional weights for each of the examples. If None,\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/post_export_metrics/metrics.py"
                },
                "region": {
                  "startLine": 501,
                  "startColumn": 11,
                  "endLine": 501,
                  "endColumn": 15,
                  "snippet": {
                    "text": "                weights: Optional[types.TensorType] = None\n               ) -> Tuple[types.TensorType, types.TensorType]:\n  # pyformat: disable\n  \"\"\"Recall at `k`.\n\n  Args:\n    classes: Tensor containing class names. Should be a BATCH_SIZE x NUM_CLASSES\n",
                    "rendered": {
                      "text": "                weights: Optional[types.TensorType] = None\n               ) -> Tuple[types.TensorType, types.TensorType]:\n  # pyformat: disable\n  \"\"\"Recall at `k`.\n\n  Args:\n    classes: Tensor containing class names. Should be a BATCH_SIZE x NUM_CLASSES\n",
                      "markdown": "`                weights: Optional[types.TensorType] = None\n               ) -> Tuple[types.TensorType, types.TensorType]:\n  # pyformat: disable\n  \"\"\"Recall at `k`.\n\n  Args:\n    classes: Tensor containing class names. Should be a BATCH_SIZE x NUM_CLASSES\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/post_export_metrics/metrics.py"
                },
                "region": {
                  "startLine": 487,
                  "startColumn": 43,
                  "endLine": 487,
                  "endColumn": 47,
                  "snippet": {
                    "text": "  [ cutoff n, precision at cutoff n ]\n\n  Returns:\n    (value_op, update_op) for the precision at K metric.\n  \"\"\"\n  # pyformat: enable\n  return _precision_recall_at_k(classes, scores, labels, cutoffs, weights, True,\n",
                    "rendered": {
                      "text": "  [ cutoff n, precision at cutoff n ]\n\n  Returns:\n    (value_op, update_op) for the precision at K metric.\n  \"\"\"\n  # pyformat: enable\n  return _precision_recall_at_k(classes, scores, labels, cutoffs, weights, True,\n",
                      "markdown": "`  [ cutoff n, precision at cutoff n ]\n\n  Returns:\n    (value_op, update_op) for the precision at K metric.\n  \"\"\"\n  # pyformat: enable\n  return _precision_recall_at_k(classes, scores, labels, cutoffs, weights, True,\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/post_export_metrics/metrics.py"
                },
                "region": {
                  "startLine": 484,
                  "startColumn": 23,
                  "endLine": 484,
                  "endColumn": 27,
                  "snippet": {
                    "text": "  [ cutoff 0, precision at cutoff 0 ]\n  [ cutoff 1, precision at cutoff 1 ]\n  [     :                :          ]\n  [ cutoff n, precision at cutoff n ]\n\n  Returns:\n    (value_op, update_op) for the precision at K metric.\n",
                    "rendered": {
                      "text": "  [ cutoff 0, precision at cutoff 0 ]\n  [ cutoff 1, precision at cutoff 1 ]\n  [     :                :          ]\n  [ cutoff n, precision at cutoff n ]\n\n  Returns:\n    (value_op, update_op) for the precision at K metric.\n",
                      "markdown": "`  [ cutoff 0, precision at cutoff 0 ]\n  [ cutoff 1, precision at cutoff 1 ]\n  [     :                :          ]\n  [ cutoff n, precision at cutoff n ]\n\n  Returns:\n    (value_op, update_op) for the precision at K metric.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/post_export_metrics/metrics.py"
                },
                "region": {
                  "startLine": 482,
                  "startColumn": 23,
                  "endLine": 482,
                  "endColumn": 27,
                  "snippet": {
                    "text": "\n  The value_op will return a matrix with len(cutoffs) rows and 2 columns:\n  [ cutoff 0, precision at cutoff 0 ]\n  [ cutoff 1, precision at cutoff 1 ]\n  [     :                :          ]\n  [ cutoff n, precision at cutoff n ]\n\n",
                    "rendered": {
                      "text": "\n  The value_op will return a matrix with len(cutoffs) rows and 2 columns:\n  [ cutoff 0, precision at cutoff 0 ]\n  [ cutoff 1, precision at cutoff 1 ]\n  [     :                :          ]\n  [ cutoff n, precision at cutoff n ]\n\n",
                      "markdown": "`\n  The value_op will return a matrix with len(cutoffs) rows and 2 columns:\n  [ cutoff 0, precision at cutoff 0 ]\n  [ cutoff 1, precision at cutoff 1 ]\n  [     :                :          ]\n  [ cutoff n, precision at cutoff n ]\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/post_export_metrics/metrics.py"
                },
                "region": {
                  "startLine": 481,
                  "startColumn": 23,
                  "endLine": 481,
                  "endColumn": 27,
                  "snippet": {
                    "text": "      If present, should be a BATCH_SIZE Tensor.\n\n  The value_op will return a matrix with len(cutoffs) rows and 2 columns:\n  [ cutoff 0, precision at cutoff 0 ]\n  [ cutoff 1, precision at cutoff 1 ]\n  [     :                :          ]\n  [ cutoff n, precision at cutoff n ]\n",
                    "rendered": {
                      "text": "      If present, should be a BATCH_SIZE Tensor.\n\n  The value_op will return a matrix with len(cutoffs) rows and 2 columns:\n  [ cutoff 0, precision at cutoff 0 ]\n  [ cutoff 1, precision at cutoff 1 ]\n  [     :                :          ]\n  [ cutoff n, precision at cutoff n ]\n",
                      "markdown": "`      If present, should be a BATCH_SIZE Tensor.\n\n  The value_op will return a matrix with len(cutoffs) rows and 2 columns:\n  [ cutoff 0, precision at cutoff 0 ]\n  [ cutoff 1, precision at cutoff 1 ]\n  [     :                :          ]\n  [ cutoff n, precision at cutoff n ]\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/post_export_metrics/metrics.py"
                },
                "region": {
                  "startLine": 473,
                  "startColumn": 51,
                  "endLine": 473,
                  "endColumn": 55,
                  "snippet": {
                    "text": "      BATCH_SIZE x NUM_CLASSES Tensor.\n    labels: Tensor containing the true labels. Should be a rank-2 Tensor where\n      the first dimension is BATCH_SIZE. The second dimension can be anything.\n    cutoffs: List containing the values for the `k` at which to compute the\n      precision for. Use a value of `k` = 0 to indicate that all predictions\n      should be considered.\n    weights: Optional weights for each of the examples. If None,\n",
                    "rendered": {
                      "text": "      BATCH_SIZE x NUM_CLASSES Tensor.\n    labels: Tensor containing the true labels. Should be a rank-2 Tensor where\n      the first dimension is BATCH_SIZE. The second dimension can be anything.\n    cutoffs: List containing the values for the `k` at which to compute the\n      precision for. Use a value of `k` = 0 to indicate that all predictions\n      should be considered.\n    weights: Optional weights for each of the examples. If None,\n",
                      "markdown": "`      BATCH_SIZE x NUM_CLASSES Tensor.\n    labels: Tensor containing the true labels. Should be a rank-2 Tensor where\n      the first dimension is BATCH_SIZE. The second dimension can be anything.\n    cutoffs: List containing the values for the `k` at which to compute the\n      precision for. Use a value of `k` = 0 to indicate that all predictions\n      should be considered.\n    weights: Optional weights for each of the examples. If None,\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/post_export_metrics/metrics.py"
                },
                "region": {
                  "startLine": 464,
                  "startColumn": 14,
                  "endLine": 464,
                  "endColumn": 18,
                  "snippet": {
                    "text": "                   weights: Optional[types.TensorType] = None\n                  ) -> Tuple[types.TensorType, types.TensorType]:\n  # pyformat: disable\n  \"\"\"Precision at `k`.\n\n  Args:\n    classes: Tensor containing class names. Should be a BATCH_SIZE x NUM_CLASSES\n",
                    "rendered": {
                      "text": "                   weights: Optional[types.TensorType] = None\n                  ) -> Tuple[types.TensorType, types.TensorType]:\n  # pyformat: disable\n  \"\"\"Precision at `k`.\n\n  Args:\n    classes: Tensor containing class names. Should be a BATCH_SIZE x NUM_CLASSES\n",
                      "markdown": "`                   weights: Optional[types.TensorType] = None\n                  ) -> Tuple[types.TensorType, types.TensorType]:\n  # pyformat: disable\n  \"\"\"Precision at `k`.\n\n  Args:\n    classes: Tensor containing class names. Should be a BATCH_SIZE x NUM_CLASSES\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/post_export_metrics/metrics.py"
                },
                "region": {
                  "startLine": 430,
                  "startColumn": 33,
                  "endLine": 430,
                  "endColumn": 37,
                  "snippet": {
                    "text": "    return true_positives, predicted_positives, actual_positives  # pytype: disable=bad-return-type\n\n  # Value op returns\n  # [ K | precision at K | recall at K ]\n  # PyType doesn't like TF operator overloads: b/92797687\n  # pytype: disable=unsupported-operands\n  precision_op = true_positives / predicted_positives\n",
                    "rendered": {
                      "text": "    return true_positives, predicted_positives, actual_positives  # pytype: disable=bad-return-type\n\n  # Value op returns\n  # [ K | precision at K | recall at K ]\n  # PyType doesn't like TF operator overloads: b/92797687\n  # pytype: disable=unsupported-operands\n  precision_op = true_positives / predicted_positives\n",
                      "markdown": "`    return true_positives, predicted_positives, actual_positives  # pytype: disable=bad-return-type\n\n  # Value op returns\n  # [ K | precision at K | recall at K ]\n  # PyType doesn't like TF operator overloads: b/92797687\n  # pytype: disable=unsupported-operands\n  precision_op = true_positives / predicted_positives\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/post_export_metrics/metrics.py"
                },
                "region": {
                  "startLine": 430,
                  "startColumn": 19,
                  "endLine": 430,
                  "endColumn": 23,
                  "snippet": {
                    "text": "    return true_positives, predicted_positives, actual_positives  # pytype: disable=bad-return-type\n\n  # Value op returns\n  # [ K | precision at K | recall at K ]\n  # PyType doesn't like TF operator overloads: b/92797687\n  # pytype: disable=unsupported-operands\n  precision_op = true_positives / predicted_positives\n",
                    "rendered": {
                      "text": "    return true_positives, predicted_positives, actual_positives  # pytype: disable=bad-return-type\n\n  # Value op returns\n  # [ K | precision at K | recall at K ]\n  # PyType doesn't like TF operator overloads: b/92797687\n  # pytype: disable=unsupported-operands\n  precision_op = true_positives / predicted_positives\n",
                      "markdown": "`    return true_positives, predicted_positives, actual_positives  # pytype: disable=bad-return-type\n\n  # Value op returns\n  # [ K | precision at K | recall at K ]\n  # PyType doesn't like TF operator overloads: b/92797687\n  # pytype: disable=unsupported-operands\n  precision_op = true_positives / predicted_positives\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/post_export_metrics/metrics.py"
                },
                "region": {
                  "startLine": 310,
                  "startColumn": 50,
                  "endLine": 310,
                  "endColumn": 54,
                  "snippet": {
                    "text": "  2 columns (cutoff and ether precision or recall depending on which is True).\n\n  Returns:\n    (value_op, update_op) for the precision/recall at K metric.\n  \"\"\"\n  # pyformat: enable\n  if not precision and not recall:\n",
                    "rendered": {
                      "text": "  2 columns (cutoff and ether precision or recall depending on which is True).\n\n  Returns:\n    (value_op, update_op) for the precision/recall at K metric.\n  \"\"\"\n  # pyformat: enable\n  if not precision and not recall:\n",
                      "markdown": "`  2 columns (cutoff and ether precision or recall depending on which is True).\n\n  Returns:\n    (value_op, update_op) for the precision/recall at K metric.\n  \"\"\"\n  # pyformat: enable\n  if not precision and not recall:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/post_export_metrics/metrics.py"
                },
                "region": {
                  "startLine": 304,
                  "startColumn": 43,
                  "endLine": 304,
                  "endColumn": 47,
                  "snippet": {
                    "text": "  [ cutoff 0, precision at cutoff 0, recall at cutoff 0 ]\n  [ cutoff 1, precision at cutoff 1, recall at cutoff 1 ]\n  [     :                :                  :           ]\n  [ cutoff n, precision at cutoff n, recall at cutoff n ]\n\n  If only one of precision or recall is True then the value_op will return only\n  2 columns (cutoff and ether precision or recall depending on which is True).\n",
                    "rendered": {
                      "text": "  [ cutoff 0, precision at cutoff 0, recall at cutoff 0 ]\n  [ cutoff 1, precision at cutoff 1, recall at cutoff 1 ]\n  [     :                :                  :           ]\n  [ cutoff n, precision at cutoff n, recall at cutoff n ]\n\n  If only one of precision or recall is True then the value_op will return only\n  2 columns (cutoff and ether precision or recall depending on which is True).\n",
                      "markdown": "`  [ cutoff 0, precision at cutoff 0, recall at cutoff 0 ]\n  [ cutoff 1, precision at cutoff 1, recall at cutoff 1 ]\n  [     :                :                  :           ]\n  [ cutoff n, precision at cutoff n, recall at cutoff n ]\n\n  If only one of precision or recall is True then the value_op will return only\n  2 columns (cutoff and ether precision or recall depending on which is True).\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/post_export_metrics/metrics.py"
                },
                "region": {
                  "startLine": 304,
                  "startColumn": 23,
                  "endLine": 304,
                  "endColumn": 27,
                  "snippet": {
                    "text": "  [ cutoff 0, precision at cutoff 0, recall at cutoff 0 ]\n  [ cutoff 1, precision at cutoff 1, recall at cutoff 1 ]\n  [     :                :                  :           ]\n  [ cutoff n, precision at cutoff n, recall at cutoff n ]\n\n  If only one of precision or recall is True then the value_op will return only\n  2 columns (cutoff and ether precision or recall depending on which is True).\n",
                    "rendered": {
                      "text": "  [ cutoff 0, precision at cutoff 0, recall at cutoff 0 ]\n  [ cutoff 1, precision at cutoff 1, recall at cutoff 1 ]\n  [     :                :                  :           ]\n  [ cutoff n, precision at cutoff n, recall at cutoff n ]\n\n  If only one of precision or recall is True then the value_op will return only\n  2 columns (cutoff and ether precision or recall depending on which is True).\n",
                      "markdown": "`  [ cutoff 0, precision at cutoff 0, recall at cutoff 0 ]\n  [ cutoff 1, precision at cutoff 1, recall at cutoff 1 ]\n  [     :                :                  :           ]\n  [ cutoff n, precision at cutoff n, recall at cutoff n ]\n\n  If only one of precision or recall is True then the value_op will return only\n  2 columns (cutoff and ether precision or recall depending on which is True).\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/post_export_metrics/metrics.py"
                },
                "region": {
                  "startLine": 302,
                  "startColumn": 43,
                  "endLine": 302,
                  "endColumn": 47,
                  "snippet": {
                    "text": "\n  The value_op will return a matrix with len(cutoffs) rows and 3 columns:\n  [ cutoff 0, precision at cutoff 0, recall at cutoff 0 ]\n  [ cutoff 1, precision at cutoff 1, recall at cutoff 1 ]\n  [     :                :                  :           ]\n  [ cutoff n, precision at cutoff n, recall at cutoff n ]\n\n",
                    "rendered": {
                      "text": "\n  The value_op will return a matrix with len(cutoffs) rows and 3 columns:\n  [ cutoff 0, precision at cutoff 0, recall at cutoff 0 ]\n  [ cutoff 1, precision at cutoff 1, recall at cutoff 1 ]\n  [     :                :                  :           ]\n  [ cutoff n, precision at cutoff n, recall at cutoff n ]\n\n",
                      "markdown": "`\n  The value_op will return a matrix with len(cutoffs) rows and 3 columns:\n  [ cutoff 0, precision at cutoff 0, recall at cutoff 0 ]\n  [ cutoff 1, precision at cutoff 1, recall at cutoff 1 ]\n  [     :                :                  :           ]\n  [ cutoff n, precision at cutoff n, recall at cutoff n ]\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/post_export_metrics/metrics.py"
                },
                "region": {
                  "startLine": 302,
                  "startColumn": 23,
                  "endLine": 302,
                  "endColumn": 27,
                  "snippet": {
                    "text": "\n  The value_op will return a matrix with len(cutoffs) rows and 3 columns:\n  [ cutoff 0, precision at cutoff 0, recall at cutoff 0 ]\n  [ cutoff 1, precision at cutoff 1, recall at cutoff 1 ]\n  [     :                :                  :           ]\n  [ cutoff n, precision at cutoff n, recall at cutoff n ]\n\n",
                    "rendered": {
                      "text": "\n  The value_op will return a matrix with len(cutoffs) rows and 3 columns:\n  [ cutoff 0, precision at cutoff 0, recall at cutoff 0 ]\n  [ cutoff 1, precision at cutoff 1, recall at cutoff 1 ]\n  [     :                :                  :           ]\n  [ cutoff n, precision at cutoff n, recall at cutoff n ]\n\n",
                      "markdown": "`\n  The value_op will return a matrix with len(cutoffs) rows and 3 columns:\n  [ cutoff 0, precision at cutoff 0, recall at cutoff 0 ]\n  [ cutoff 1, precision at cutoff 1, recall at cutoff 1 ]\n  [     :                :                  :           ]\n  [ cutoff n, precision at cutoff n, recall at cutoff n ]\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/post_export_metrics/metrics.py"
                },
                "region": {
                  "startLine": 301,
                  "startColumn": 43,
                  "endLine": 301,
                  "endColumn": 47,
                  "snippet": {
                    "text": "    recall: True to compute recall.\n\n  The value_op will return a matrix with len(cutoffs) rows and 3 columns:\n  [ cutoff 0, precision at cutoff 0, recall at cutoff 0 ]\n  [ cutoff 1, precision at cutoff 1, recall at cutoff 1 ]\n  [     :                :                  :           ]\n  [ cutoff n, precision at cutoff n, recall at cutoff n ]\n",
                    "rendered": {
                      "text": "    recall: True to compute recall.\n\n  The value_op will return a matrix with len(cutoffs) rows and 3 columns:\n  [ cutoff 0, precision at cutoff 0, recall at cutoff 0 ]\n  [ cutoff 1, precision at cutoff 1, recall at cutoff 1 ]\n  [     :                :                  :           ]\n  [ cutoff n, precision at cutoff n, recall at cutoff n ]\n",
                      "markdown": "`    recall: True to compute recall.\n\n  The value_op will return a matrix with len(cutoffs) rows and 3 columns:\n  [ cutoff 0, precision at cutoff 0, recall at cutoff 0 ]\n  [ cutoff 1, precision at cutoff 1, recall at cutoff 1 ]\n  [     :                :                  :           ]\n  [ cutoff n, precision at cutoff n, recall at cutoff n ]\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/post_export_metrics/metrics.py"
                },
                "region": {
                  "startLine": 301,
                  "startColumn": 23,
                  "endLine": 301,
                  "endColumn": 27,
                  "snippet": {
                    "text": "    recall: True to compute recall.\n\n  The value_op will return a matrix with len(cutoffs) rows and 3 columns:\n  [ cutoff 0, precision at cutoff 0, recall at cutoff 0 ]\n  [ cutoff 1, precision at cutoff 1, recall at cutoff 1 ]\n  [     :                :                  :           ]\n  [ cutoff n, precision at cutoff n, recall at cutoff n ]\n",
                    "rendered": {
                      "text": "    recall: True to compute recall.\n\n  The value_op will return a matrix with len(cutoffs) rows and 3 columns:\n  [ cutoff 0, precision at cutoff 0, recall at cutoff 0 ]\n  [ cutoff 1, precision at cutoff 1, recall at cutoff 1 ]\n  [     :                :                  :           ]\n  [ cutoff n, precision at cutoff n, recall at cutoff n ]\n",
                      "markdown": "`    recall: True to compute recall.\n\n  The value_op will return a matrix with len(cutoffs) rows and 3 columns:\n  [ cutoff 0, precision at cutoff 0, recall at cutoff 0 ]\n  [ cutoff 1, precision at cutoff 1, recall at cutoff 1 ]\n  [     :                :                  :           ]\n  [ cutoff n, precision at cutoff n, recall at cutoff n ]\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/post_export_metrics/metrics.py"
                },
                "region": {
                  "startLine": 291,
                  "startColumn": 51,
                  "endLine": 291,
                  "endColumn": 55,
                  "snippet": {
                    "text": "      BATCH_SIZE x NUM_CLASSES Tensor.\n    labels: Tensor containing the true labels. Should be a rank-2 Tensor where\n      the first dimension is BATCH_SIZE. The second dimension can be anything.\n    cutoffs: List containing the values for the `k` at which to compute the\n      precision and recall for. Use a value of `k` = 0 to indicate that all\n      predictions should be considered.\n    weights: Optional weights for each of the examples. If None,\n",
                    "rendered": {
                      "text": "      BATCH_SIZE x NUM_CLASSES Tensor.\n    labels: Tensor containing the true labels. Should be a rank-2 Tensor where\n      the first dimension is BATCH_SIZE. The second dimension can be anything.\n    cutoffs: List containing the values for the `k` at which to compute the\n      precision and recall for. Use a value of `k` = 0 to indicate that all\n      predictions should be considered.\n    weights: Optional weights for each of the examples. If None,\n",
                      "markdown": "`      BATCH_SIZE x NUM_CLASSES Tensor.\n    labels: Tensor containing the true labels. Should be a rank-2 Tensor where\n      the first dimension is BATCH_SIZE. The second dimension can be anything.\n    cutoffs: List containing the values for the `k` at which to compute the\n      precision and recall for. Use a value of `k` = 0 to indicate that all\n      predictions should be considered.\n    weights: Optional weights for each of the examples. If None,\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/post_export_metrics/metrics.py"
                },
                "region": {
                  "startLine": 282,
                  "startColumn": 25,
                  "endLine": 282,
                  "endColumn": 29,
                  "snippet": {
                    "text": "                           recall: Optional[bool] = True\n                          ) -> Tuple[types.TensorType, types.TensorType]:\n  # pyformat: disable\n  \"\"\"Precision and recall at `k`.\n\n  Args:\n    classes: Tensor containing class names. Should be a BATCH_SIZE x NUM_CLASSES\n",
                    "rendered": {
                      "text": "                           recall: Optional[bool] = True\n                          ) -> Tuple[types.TensorType, types.TensorType]:\n  # pyformat: disable\n  \"\"\"Precision and recall at `k`.\n\n  Args:\n    classes: Tensor containing class names. Should be a BATCH_SIZE x NUM_CLASSES\n",
                      "markdown": "`                           recall: Optional[bool] = True\n                          ) -> Tuple[types.TensorType, types.TensorType]:\n  # pyformat: disable\n  \"\"\"Precision and recall at `k`.\n\n  Args:\n    classes: Tensor containing class names. Should be a BATCH_SIZE x NUM_CLASSES\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/post_export_metrics/metrics.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/post_export_metrics/metrics.py"
                },
                "region": {
                  "startLine": 402,
                  "startColumn": 5,
                  "endLine": 402,
                  "endColumn": 11,
                  "snippet": {
                    "text": "      raise ValueError('labels should have the same batch size of %d, but got '\n                       '%d instead' % (batch_size, labels.shape[0]))\n\n    # Sort classes, by row, by their associated scores, in descending order of\n    # score.\n    sorted_classes = np.flip(\n        classes[np.arange(batch_size)[:, None],\n",
                    "rendered": {
                      "text": "      raise ValueError('labels should have the same batch size of %d, but got '\n                       '%d instead' % (batch_size, labels.shape[0]))\n\n    # Sort classes, by row, by their associated scores, in descending order of\n    # score.\n    sorted_classes = np.flip(\n        classes[np.arange(batch_size)[:, None],\n",
                      "markdown": "`      raise ValueError('labels should have the same batch size of %d, but got '\n                       '%d instead' % (batch_size, labels.shape[0]))\n\n    # Sort classes, by row, by their associated scores, in descending order of\n    # score.\n    sorted_classes = np.flip(\n        classes[np.arange(batch_size)[:, None],\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/post_export_metrics/metric_keys.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/calibration_histogram.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/calibration.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/bleu_test.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/bleu.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/bleu.py"
                },
                "region": {
                  "startLine": 124,
                  "startColumn": 58,
                  "endLine": 124,
                  "endColumn": 66,
                  "snippet": {
                    "text": "        is detokenized.), 'tokenize' (Tokenization method to use for BLEU.\n        Possible values are 'none' (No tokenization), 'zh' (Chinese\n        tokenization), '13a' (mimics the mteval-v13a from Moses), and 'intl'\n        (International tokenization, mimics the mteval-v14 script from Moses).),\n        'smooth_method' (The smoothing method to use. Possible values are 'none'\n        (no smoothing), 'floor' (increment zero counts), 'add-k' (increment\n        num/denom by k for n>1), and 'exp' (exponential decay).), 'smooth_value'\n",
                    "rendered": {
                      "text": "        is detokenized.), 'tokenize' (Tokenization method to use for BLEU.\n        Possible values are 'none' (No tokenization), 'zh' (Chinese\n        tokenization), '13a' (mimics the mteval-v13a from Moses), and 'intl'\n        (International tokenization, mimics the mteval-v14 script from Moses).),\n        'smooth_method' (The smoothing method to use. Possible values are 'none'\n        (no smoothing), 'floor' (increment zero counts), 'add-k' (increment\n        num/denom by k for n>1), and 'exp' (exponential decay).), 'smooth_value'\n",
                      "markdown": "`        is detokenized.), 'tokenize' (Tokenization method to use for BLEU.\n        Possible values are 'none' (No tokenization), 'zh' (Chinese\n        tokenization), '13a' (mimics the mteval-v13a from Moses), and 'intl'\n        (International tokenization, mimics the mteval-v14 script from Moses).),\n        'smooth_method' (The smoothing method to use. Possible values are 'none'\n        (no smoothing), 'floor' (increment zero counts), 'add-k' (increment\n        num/denom by k for n>1), and 'exp' (exponential decay).), 'smooth_value'\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/binary_confusion_matrices_test.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/experimental/preprocessing_functions/text"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/experimental/preprocessing_functions/text"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/experimental/preprocessing_functions/test"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/eval_saved_model/util.py"
                },
                "region": {
                  "startLine": 376,
                  "startColumn": 33,
                  "endLine": 376,
                  "endColumn": 37,
                  "snippet": {
                    "text": "  dense_shape = [1] + original_dense_shape[1:]\n\n  for row in range(0, original_dense_shape[0]):\n    # Process each output row one at a time.\n    indices = []\n    values = []\n\n",
                    "rendered": {
                      "text": "  dense_shape = [1] + original_dense_shape[1:]\n\n  for row in range(0, original_dense_shape[0]):\n    # Process each output row one at a time.\n    indices = []\n    values = []\n\n",
                      "markdown": "`  dense_shape = [1] + original_dense_shape[1:]\n\n  for row in range(0, original_dense_shape[0]):\n    # Process each output row one at a time.\n    indices = []\n    values = []\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/eval_saved_model/util.py"
                },
                "region": {
                  "startLine": 295,
                  "startColumn": 11,
                  "endLine": 295,
                  "endColumn": 19,
                  "snippet": {
                    "text": "\n  # Make a copy here, so that in the case that we don't take any amaxes\n  # in the loop below, we'll still be mutating a copy (rather than the original)\n  # when we update the row size.\n  dense_shape_max = np.array(sparse_tensor_values[0].dense_shape)\n  values = []\n  for row, sparse_tensor in enumerate(sparse_tensor_values):\n",
                    "rendered": {
                      "text": "\n  # Make a copy here, so that in the case that we don't take any amaxes\n  # in the loop below, we'll still be mutating a copy (rather than the original)\n  # when we update the row size.\n  dense_shape_max = np.array(sparse_tensor_values[0].dense_shape)\n  values = []\n  for row, sparse_tensor in enumerate(sparse_tensor_values):\n",
                      "markdown": "`\n  # Make a copy here, so that in the case that we don't take any amaxes\n  # in the loop below, we'll still be mutating a copy (rather than the original)\n  # when we update the row size.\n  dense_shape_max = np.array(sparse_tensor_values[0].dense_shape)\n  values = []\n  for row, sparse_tensor in enumerate(sparse_tensor_values):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/eval_saved_model/util.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/eval_saved_model/util.py"
                },
                "region": {
                  "startLine": 510,
                  "startColumn": 25,
                  "endLine": 510,
                  "endColumn": 31,
                  "snippet": {
                    "text": "    legacy export not required.\n\n  Raises:\n    ValueError: Could not find a checkpoint to export.\n  \"\"\"\n  del estimator\n  del export_dir_base\n",
                    "rendered": {
                      "text": "    legacy export not required.\n\n  Raises:\n    ValueError: Could not find a checkpoint to export.\n  \"\"\"\n  del estimator\n  del export_dir_base\n",
                      "markdown": "`    legacy export not required.\n\n  Raises:\n    ValueError: Could not find a checkpoint to export.\n  \"\"\"\n  del estimator\n  del export_dir_base\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/eval_saved_model/util.py"
                },
                "region": {
                  "startLine": 450,
                  "startColumn": 69,
                  "endLine": 450,
                  "endColumn": 75,
                  "snippet": {
                    "text": "  \"\"\"Merge a list of Tensor values into a single batch of Tensor values.\n\n  Args:\n    tensor_values: A list of Tensor values, all fetched from the same node in\n      the same graph. Each Tensor value should be for a single example.\n\n  Returns:\n",
                    "rendered": {
                      "text": "  \"\"\"Merge a list of Tensor values into a single batch of Tensor values.\n\n  Args:\n    tensor_values: A list of Tensor values, all fetched from the same node in\n      the same graph. Each Tensor value should be for a single example.\n\n  Returns:\n",
                      "markdown": "`  \"\"\"Merge a list of Tensor values into a single batch of Tensor values.\n\n  Args:\n    tensor_values: A list of Tensor values, all fetched from the same node in\n      the same graph. Each Tensor value should be for a single example.\n\n  Returns:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/eval_saved_model/util.py"
                },
                "region": {
                  "startLine": 359,
                  "startColumn": 5,
                  "endLine": 359,
                  "endColumn": 11,
                  "snippet": {
                    "text": "\n  if sparse_tensor_value.indices.size > 0:\n    indices = sparse_tensor_value.indices\n    # Sort indices matrix by rows, treating each row as a coordinate\n    argsort_indices = np.lexsort(np.transpose(indices)[::-1])\n    sorted_indices = indices[argsort_indices]\n    sorted_values = sparse_tensor_value.values[argsort_indices]\n",
                    "rendered": {
                      "text": "\n  if sparse_tensor_value.indices.size > 0:\n    indices = sparse_tensor_value.indices\n    # Sort indices matrix by rows, treating each row as a coordinate\n    argsort_indices = np.lexsort(np.transpose(indices)[::-1])\n    sorted_indices = indices[argsort_indices]\n    sorted_values = sparse_tensor_value.values[argsort_indices]\n",
                      "markdown": "`\n  if sparse_tensor_value.indices.size > 0:\n    indices = sparse_tensor_value.indices\n    # Sort indices matrix by rows, treating each row as a coordinate\n    argsort_indices = np.lexsort(np.transpose(indices)[::-1])\n    sorted_indices = indices[argsort_indices]\n    sorted_values = sparse_tensor_value.values[argsort_indices]\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/eval_saved_model/testutil.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/eval_saved_model/load.py"
                },
                "region": {
                  "startLine": 167,
                  "startColumn": 50,
                  "endLine": 167,
                  "endColumn": 55,
                  "snippet": {
                    "text": "        self._session, self._tags, self._path)\n\n    with self._graph.as_default():\n      signature_def = meta_graph_def.signature_def.get(\n          constants.DEFAULT_EVAL_SIGNATURE_DEF_KEY)\n      if signature_def is None:\n        raise ValueError('could not find signature with name %s. signature_def '\n",
                    "rendered": {
                      "text": "        self._session, self._tags, self._path)\n\n    with self._graph.as_default():\n      signature_def = meta_graph_def.signature_def.get(\n          constants.DEFAULT_EVAL_SIGNATURE_DEF_KEY)\n      if signature_def is None:\n        raise ValueError('could not find signature with name %s. signature_def '\n",
                      "markdown": "`        self._session, self._tags, self._path)\n\n    with self._graph.as_default():\n      signature_def = meta_graph_def.signature_def.get(\n          constants.DEFAULT_EVAL_SIGNATURE_DEF_KEY)\n      if signature_def is None:\n        raise ValueError('could not find signature with name %s. signature_def '\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/eval_saved_model/load.py"
                },
                "region": {
                  "startLine": 109,
                  "startColumn": 43,
                  "endLine": 109,
                  "endColumn": 48,
                  "snippet": {
                    "text": "\n  # TODO(b/119308261): Remove once all exported EvalSavedModels are updated.\n  def _legacy_check_version(self, meta_graph_def: meta_graph_pb2.MetaGraphDef):\n    version = meta_graph_def.collection_def.get(\n        encoding.TFMA_VERSION_COLLECTION)\n    if version is None:\n      raise ValueError('could not find TFMA version in graph (at path %s)' %\n",
                    "rendered": {
                      "text": "\n  # TODO(b/119308261): Remove once all exported EvalSavedModels are updated.\n  def _legacy_check_version(self, meta_graph_def: meta_graph_pb2.MetaGraphDef):\n    version = meta_graph_def.collection_def.get(\n        encoding.TFMA_VERSION_COLLECTION)\n    if version is None:\n      raise ValueError('could not find TFMA version in graph (at path %s)' %\n",
                      "markdown": "`\n  # TODO(b/119308261): Remove once all exported EvalSavedModels are updated.\n  def _legacy_check_version(self, meta_graph_def: meta_graph_pb2.MetaGraphDef):\n    version = meta_graph_def.collection_def.get(\n        encoding.TFMA_VERSION_COLLECTION)\n    if version is None:\n      raise ValueError('could not find TFMA version in graph (at path %s)' %\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/eval_saved_model/load.py"
                },
                "region": {
                  "startLine": 214,
                  "startColumn": 47,
                  "endLine": 214,
                  "endColumn": 55,
                  "snippet": {
                    "text": "\n      # Create feed_list for metrics_reset_update_get_fn\n      #\n      # We need to save this because we need to update the\n      # metrics_reset_update_get_fn when additional metric ops are registered\n      # (the feed_list will stay the same though).\n      self._perform_metrics_update_fn_feed_list = list(self._input_map.values())\n",
                    "rendered": {
                      "text": "\n      # Create feed_list for metrics_reset_update_get_fn\n      #\n      # We need to save this because we need to update the\n      # metrics_reset_update_get_fn when additional metric ops are registered\n      # (the feed_list will stay the same though).\n      self._perform_metrics_update_fn_feed_list = list(self._input_map.values())\n",
                      "markdown": "`\n      # Create feed_list for metrics_reset_update_get_fn\n      #\n      # We need to save this because we need to update the\n      # metrics_reset_update_get_fn when additional metric ops are registered\n      # (the feed_list will stay the same though).\n      self._perform_metrics_update_fn_feed_list = list(self._input_map.values())\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/eval_saved_model/load.py"
                },
                "region": {
                  "startLine": 72,
                  "startColumn": 51,
                  "endLine": 72,
                  "endColumn": 55,
                  "snippet": {
                    "text": "      path: Path to model.\n      include_default_metrics: True to include the in-graph metrics by default.\n      additional_fetches: Prefixes of additional tensors stored in\n        signature_def.inputs that should be fetched at prediction time. The\n        \"features\" and \"labels\" tensors are handled automatically and should not\n        be included in this list.\n      blacklist_feature_fetches: List of tensor names in the features dictionary\n",
                    "rendered": {
                      "text": "      path: Path to model.\n      include_default_metrics: True to include the in-graph metrics by default.\n      additional_fetches: Prefixes of additional tensors stored in\n        signature_def.inputs that should be fetched at prediction time. The\n        \"features\" and \"labels\" tensors are handled automatically and should not\n        be included in this list.\n      blacklist_feature_fetches: List of tensor names in the features dictionary\n",
                      "markdown": "`      path: Path to model.\n      include_default_metrics: True to include the in-graph metrics by default.\n      additional_fetches: Prefixes of additional tensors stored in\n        signature_def.inputs that should be fetched at prediction time. The\n        \"features\" and \"labels\" tensors are handled automatically and should not\n        be included in this list.\n      blacklist_feature_fetches: List of tensor names in the features dictionary\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/eval_saved_model/load.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/eval_saved_model/load.py"
                },
                "region": {
                  "startLine": 170,
                  "startColumn": 35,
                  "endLine": 170,
                  "endColumn": 41,
                  "snippet": {
                    "text": "      signature_def = meta_graph_def.signature_def.get(\n          constants.DEFAULT_EVAL_SIGNATURE_DEF_KEY)\n      if signature_def is None:\n        raise ValueError('could not find signature with name %s. signature_def '\n                         'was %s' % (constants.EVAL_TAG, signature_def))\n\n      self._additional_fetches_map = {}\n",
                    "rendered": {
                      "text": "      signature_def = meta_graph_def.signature_def.get(\n          constants.DEFAULT_EVAL_SIGNATURE_DEF_KEY)\n      if signature_def is None:\n        raise ValueError('could not find signature with name %s. signature_def '\n                         'was %s' % (constants.EVAL_TAG, signature_def))\n\n      self._additional_fetches_map = {}\n",
                      "markdown": "`      signature_def = meta_graph_def.signature_def.get(\n          constants.DEFAULT_EVAL_SIGNATURE_DEF_KEY)\n      if signature_def is None:\n        raise ValueError('could not find signature with name %s. signature_def '\n                         'was %s' % (constants.EVAL_TAG, signature_def))\n\n      self._additional_fetches_map = {}\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/eval_saved_model/load.py"
                },
                "region": {
                  "startLine": 158,
                  "startColumn": 27,
                  "endLine": 158,
                  "endColumn": 33,
                  "snippet": {
                    "text": "    in the future.\n\n    Raises:\n      ValueError: Could not find signature keyed with\n        DEFAULT_EVAL_SIGNATURE_DEF_KEY; or signature_def did not have exactly\n        one input; or there was a signature output with the metric prefix but an\n        unrecognised suffix.\n",
                    "rendered": {
                      "text": "    in the future.\n\n    Raises:\n      ValueError: Could not find signature keyed with\n        DEFAULT_EVAL_SIGNATURE_DEF_KEY; or signature_def did not have exactly\n        one input; or there was a signature output with the metric prefix but an\n        unrecognised suffix.\n",
                      "markdown": "`    in the future.\n\n    Raises:\n      ValueError: Could not find signature keyed with\n        DEFAULT_EVAL_SIGNATURE_DEF_KEY; or signature_def did not have exactly\n        one input; or there was a signature output with the metric prefix but an\n        unrecognised suffix.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/eval_saved_model/load.py"
                },
                "region": {
                  "startLine": 112,
                  "startColumn": 33,
                  "endLine": 112,
                  "endColumn": 39,
                  "snippet": {
                    "text": "    version = meta_graph_def.collection_def.get(\n        encoding.TFMA_VERSION_COLLECTION)\n    if version is None:\n      raise ValueError('could not find TFMA version in graph (at path %s)' %\n                       self._path)\n    # We don't actually do any checking for now, since we don't have any\n    # compatibility issues.\n",
                    "rendered": {
                      "text": "    version = meta_graph_def.collection_def.get(\n        encoding.TFMA_VERSION_COLLECTION)\n    if version is None:\n      raise ValueError('could not find TFMA version in graph (at path %s)' %\n                       self._path)\n    # We don't actually do any checking for now, since we don't have any\n    # compatibility issues.\n",
                      "markdown": "`    version = meta_graph_def.collection_def.get(\n        encoding.TFMA_VERSION_COLLECTION)\n    if version is None:\n      raise ValueError('could not find TFMA version in graph (at path %s)' %\n                       self._path)\n    # We don't actually do any checking for now, since we don't have any\n    # compatibility issues.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/eval_saved_model/integration_test.py"
                },
                "region": {
                  "startLine": 603,
                  "startColumn": 14,
                  "endLine": 603,
                  "endColumn": 23,
                  "snippet": {
                    "text": "    self.assertNotIn('label/mean/other_head', metric_values)\n\n    # Check the added metrics.\n    # We don't control the trained model's weights fully, but it should\n    # predict probabilities > 0.7.\n    self.assertIn('mean_absolute_error/english_head', metric_values)\n    self.assertLess(metric_values['mean_absolute_error/english_head'], 0.3)\n",
                    "rendered": {
                      "text": "    self.assertNotIn('label/mean/other_head', metric_values)\n\n    # Check the added metrics.\n    # We don't control the trained model's weights fully, but it should\n    # predict probabilities > 0.7.\n    self.assertIn('mean_absolute_error/english_head', metric_values)\n    self.assertLess(metric_values['mean_absolute_error/english_head'], 0.3)\n",
                      "markdown": "`    self.assertNotIn('label/mean/other_head', metric_values)\n\n    # Check the added metrics.\n    # We don't control the trained model's weights fully, but it should\n    # predict probabilities > 0.7.\n    self.assertIn('mean_absolute_error/english_head', metric_values)\n    self.assertLess(metric_values['mean_absolute_error/english_head'], 0.3)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/eval_saved_model/integration_test.py"
                },
                "region": {
                  "startLine": 555,
                  "startColumn": 14,
                  "endLine": 555,
                  "endColumn": 23,
                  "snippet": {
                    "text": "        })\n\n    # Check the added metrics.\n    # We don't control the trained model's weights fully, but it should\n    # predict probabilities > 0.7.\n    self.assertIn('mean_absolute_error/english_head', metric_values)\n    self.assertLess(metric_values['mean_absolute_error/english_head'], 0.3)\n",
                    "rendered": {
                      "text": "        })\n\n    # Check the added metrics.\n    # We don't control the trained model's weights fully, but it should\n    # predict probabilities > 0.7.\n    self.assertIn('mean_absolute_error/english_head', metric_values)\n    self.assertLess(metric_values['mean_absolute_error/english_head'], 0.3)\n",
                      "markdown": "`        })\n\n    # Check the added metrics.\n    # We don't control the trained model's weights fully, but it should\n    # predict probabilities > 0.7.\n    self.assertIn('mean_absolute_error/english_head', metric_values)\n    self.assertLess(metric_values['mean_absolute_error/english_head'], 0.3)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/eval_saved_model/integration_test.py"
                },
                "region": {
                  "startLine": 498,
                  "startColumn": 14,
                  "endLine": 498,
                  "endColumn": 23,
                  "snippet": {
                    "text": "\n    metric_values = eval_saved_model.get_metric_values()\n\n    # We don't control the trained model's weights fully, but it should\n    # predict close to what it aims to. The \"target\" mean prediction is 5.5.\n    self.assertIn('mean_prediction', metric_values)\n    self.assertGreater(metric_values['mean_prediction'], 5.4)\n",
                    "rendered": {
                      "text": "\n    metric_values = eval_saved_model.get_metric_values()\n\n    # We don't control the trained model's weights fully, but it should\n    # predict close to what it aims to. The \"target\" mean prediction is 5.5.\n    self.assertIn('mean_prediction', metric_values)\n    self.assertGreater(metric_values['mean_prediction'], 5.4)\n",
                      "markdown": "`\n    metric_values = eval_saved_model.get_metric_values()\n\n    # We don't control the trained model's weights fully, but it should\n    # predict close to what it aims to. The \"target\" mean prediction is 5.5.\n    self.assertIn('mean_prediction', metric_values)\n    self.assertGreater(metric_values['mean_prediction'], 5.4)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/eval_saved_model/integration_test.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/eval_saved_model/encoding_test.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/eval_saved_model/encoding.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/eval_saved_model/encoding.py"
                },
                "region": {
                  "startLine": 141,
                  "startColumn": 57,
                  "endLine": 141,
                  "endColumn": 63,
                  "snippet": {
                    "text": "                       encoded_tensor_node: any_pb2.Any) -> types.TensorType:\n  \"\"\"Decode an encoded Tensor node encoded with encode_tensor_node.\n\n  Decodes the encoded Tensor \"reference\", and returns the node in the given\n  graph corresponding to that Tensor.\n\n  Args:\n",
                    "rendered": {
                      "text": "                       encoded_tensor_node: any_pb2.Any) -> types.TensorType:\n  \"\"\"Decode an encoded Tensor node encoded with encode_tensor_node.\n\n  Decodes the encoded Tensor \"reference\", and returns the node in the given\n  graph corresponding to that Tensor.\n\n  Args:\n",
                      "markdown": "`                       encoded_tensor_node: any_pb2.Any) -> types.TensorType:\n  \"\"\"Decode an encoded Tensor node encoded with encode_tensor_node.\n\n  Decodes the encoded Tensor \"reference\", and returns the node in the given\n  graph corresponding to that Tensor.\n\n  Args:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/eval_saved_model/encoding.py"
                },
                "region": {
                  "startLine": 139,
                  "startColumn": 29,
                  "endLine": 139,
                  "endColumn": 35,
                  "snippet": {
                    "text": "\ndef decode_tensor_node(graph: tf.Graph,\n                       encoded_tensor_node: any_pb2.Any) -> types.TensorType:\n  \"\"\"Decode an encoded Tensor node encoded with encode_tensor_node.\n\n  Decodes the encoded Tensor \"reference\", and returns the node in the given\n  graph corresponding to that Tensor.\n",
                    "rendered": {
                      "text": "\ndef decode_tensor_node(graph: tf.Graph,\n                       encoded_tensor_node: any_pb2.Any) -> types.TensorType:\n  \"\"\"Decode an encoded Tensor node encoded with encode_tensor_node.\n\n  Decodes the encoded Tensor \"reference\", and returns the node in the given\n  graph corresponding to that Tensor.\n",
                      "markdown": "`\ndef decode_tensor_node(graph: tf.Graph,\n                       encoded_tensor_node: any_pb2.Any) -> types.TensorType:\n  \"\"\"Decode an encoded Tensor node encoded with encode_tensor_node.\n\n  Decodes the encoded Tensor \"reference\", and returns the node in the given\n  graph corresponding to that Tensor.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/eval_saved_model/constants.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/api/tfma_unit_test.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/api/tfma_unit.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/api/tfma_unit.py"
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 22,
                  "endLine": 54,
                  "endColumn": 28,
                  "snippet": {
                    "text": "of the latest format.\n\nNote that if you are retraining a new model for each test, your model may have\ndifferent weights each time and have different metric values. As such, we\nrecommend that you use BoundedValue with loose bounds to avoid flaky tests.\n\"\"\"\n\n",
                    "rendered": {
                      "text": "of the latest format.\n\nNote that if you are retraining a new model for each test, your model may have\ndifferent weights each time and have different metric values. As such, we\nrecommend that you use BoundedValue with loose bounds to avoid flaky tests.\n\"\"\"\n\n",
                      "markdown": "`of the latest format.\n\nNote that if you are retraining a new model for each test, your model may have\ndifferent weights each time and have different metric values. As such, we\nrecommend that you use BoundedValue with loose bounds to avoid flaky tests.\n\"\"\"\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/api/__init__.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/addons/fairness/notebook/colab/widget.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/addons/fairness/metrics/counterfactual_fa"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/__init__.py"
                },
                "region": {
                  "startLine": 91,
                  "startColumn": 30,
                  "endLine": 91,
                  "endColumn": 34,
                  "snippet": {
                    "text": "  # TODO(b/171992041): Deprecate use of EvalResult in the future.\n  from tensorflow_model_analysis.view.view_types import EvalResult\n\n  # Allow types to be imported at the top-level since they live in root dir.\n  from tensorflow_model_analysis.api.types import AddMetricsCallbackType\n  from tensorflow_model_analysis.api.types import EvalSharedModel\n  from tensorflow_model_analysis.api.types import Extracts\n",
                    "rendered": {
                      "text": "  # TODO(b/171992041): Deprecate use of EvalResult in the future.\n  from tensorflow_model_analysis.view.view_types import EvalResult\n\n  # Allow types to be imported at the top-level since they live in root dir.\n  from tensorflow_model_analysis.api.types import AddMetricsCallbackType\n  from tensorflow_model_analysis.api.types import EvalSharedModel\n  from tensorflow_model_analysis.api.types import Extracts\n",
                      "markdown": "`  # TODO(b/171992041): Deprecate use of EvalResult in the future.\n  from tensorflow_model_analysis.view.view_types import EvalResult\n\n  # Allow types to be imported at the top-level since they live in root dir.\n  from tensorflow_model_analysis.api.types import AddMetricsCallbackType\n  from tensorflow_model_analysis.api.types import EvalSharedModel\n  from tensorflow_model_analysis.api.types import Extracts\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/__init__.py"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 41,
                  "endLine": 32,
                  "endColumn": 45,
                  "snippet": {
                    "text": "try:\n  from tensorflow_model_analysis.sdk import *\n\n  # Allow api module types to be imported at the top-level since they are the\n  # main public interface to using TFMA.\n  from tensorflow_model_analysis.api import tfma_unit as test\n  from tensorflow_model_analysis.api.model_eval_lib import AttributionsForSlice\n",
                    "rendered": {
                      "text": "try:\n  from tensorflow_model_analysis.sdk import *\n\n  # Allow api module types to be imported at the top-level since they are the\n  # main public interface to using TFMA.\n  from tensorflow_model_analysis.api import tfma_unit as test\n  from tensorflow_model_analysis.api.model_eval_lib import AttributionsForSlice\n",
                      "markdown": "`try:\n  from tensorflow_model_analysis.sdk import *\n\n  # Allow api module types to be imported at the top-level since they are the\n  # main public interface to using TFMA.\n  from tensorflow_model_analysis.api import tfma_unit as test\n  from tensorflow_model_analysis.api.model_eval_lib import AttributionsForSlice\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/__init__.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/squared_pearson_correlation.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/set_match_confusion_matrix_metric"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/aggregation_test.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/metrics/aggregation.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/extractors/counterfactual_predictions_ext"
                },
                "region": {
                  "startLine": 83,
                  "startColumn": 26,
                  "endLine": 83,
                  "endColumn": 31,
                  "snippet": {
                    "text": "  cf_ptransforms = {}\n  non_cf_models = []\n  for model in eval_shared_models:\n    cf_config = cf_configs.get(model.model_name, None)\n    if cf_config:\n      # filter EvalConfig so that it matches single EvalSavedModel\n      cf_eval_config = _filter_model_specs(eval_config, [model])\n",
                    "rendered": {
                      "text": "  cf_ptransforms = {}\n  non_cf_models = []\n  for model in eval_shared_models:\n    cf_config = cf_configs.get(model.model_name, None)\n    if cf_config:\n      # filter EvalConfig so that it matches single EvalSavedModel\n      cf_eval_config = _filter_model_specs(eval_config, [model])\n",
                      "markdown": "`  cf_ptransforms = {}\n  non_cf_models = []\n  for model in eval_shared_models:\n    cf_config = cf_configs.get(model.model_name, None)\n    if cf_config:\n      # filter EvalConfig so that it matches single EvalSavedModel\n      cf_eval_config = _filter_model_specs(eval_config, [model])\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/extractors/counterfactual_predictions_ext"
                },
                "region": {
                  "startLine": 150,
                  "startColumn": 69,
                  "endLine": 150,
                  "endColumn": 73,
                  "snippet": {
                    "text": "        f'Only {_SUPPORTED_MODEL_TYPES} model types are supported, but found '\n        f'model types: {model_types}.')\n  if not cf_configs:\n    raise ValueError('The CounterfactualPredictionsExtractor requires at least '\n                     'one cf_configs, but got 0.')\n\n  if len(eval_shared_models) == 1:\n",
                    "rendered": {
                      "text": "        f'Only {_SUPPORTED_MODEL_TYPES} model types are supported, but found '\n        f'model types: {model_types}.')\n  if not cf_configs:\n    raise ValueError('The CounterfactualPredictionsExtractor requires at least '\n                     'one cf_configs, but got 0.')\n\n  if len(eval_shared_models) == 1:\n",
                      "markdown": "`        f'Only {_SUPPORTED_MODEL_TYPES} model types are supported, but found '\n        f'model types: {model_types}.')\n  if not cf_configs:\n    raise ValueError('The CounterfactualPredictionsExtractor requires at least '\n                     'one cf_configs, but got 0.')\n\n  if len(eval_shared_models) == 1:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/extractors/counterfactual_predictions_ext"
                },
                "region": {
                  "startLine": 142,
                  "startColumn": 56,
                  "endLine": 142,
                  "endColumn": 60,
                  "snippet": {
                    "text": "      eval_shared_models)\n  if not eval_shared_models:\n    raise ValueError(\n        'The CounterfactualPredictionsExtractor requires at least one '\n        f'EvalSharedModel, but got normalized models: {eval_shared_models}.')\n  model_types = {m.model_type for m in eval_shared_models}\n  if not model_types.issubset(_SUPPORTED_MODEL_TYPES):\n",
                    "rendered": {
                      "text": "      eval_shared_models)\n  if not eval_shared_models:\n    raise ValueError(\n        'The CounterfactualPredictionsExtractor requires at least one '\n        f'EvalSharedModel, but got normalized models: {eval_shared_models}.')\n  model_types = {m.model_type for m in eval_shared_models}\n  if not model_types.issubset(_SUPPORTED_MODEL_TYPES):\n",
                      "markdown": "`      eval_shared_models)\n  if not eval_shared_models:\n    raise ValueError(\n        'The CounterfactualPredictionsExtractor requires at least one '\n        f'EvalSharedModel, but got normalized models: {eval_shared_models}.')\n  model_types = {m.model_type for m in eval_shared_models}\n  if not model_types.issubset(_SUPPORTED_MODEL_TYPES):\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/extractors/counterfactual_predictions_ext"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/experimental/dataframe_test.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/experimental/dataframe.py"
                },
                "region": {
                  "startLine": 216,
                  "startColumn": 9,
                  "endLine": 216,
                  "endColumn": 13,
                  "snippet": {
                    "text": "        # Flattens the metric_values.\n        # Initializes index_end to 'index - 1' to indicate that there is no item\n        # added yet. It is set to 'index' once the loop starts, indicating that\n        # at least one item is found.\n        index_end = index - 1\n        for k, v, index_end in _flatten_proto(metric_value, metric_type, index):\n          column_data[metric_type].values[k].append((v, index_end))\n",
                    "rendered": {
                      "text": "        # Flattens the metric_values.\n        # Initializes index_end to 'index - 1' to indicate that there is no item\n        # added yet. It is set to 'index' once the loop starts, indicating that\n        # at least one item is found.\n        index_end = index - 1\n        for k, v, index_end in _flatten_proto(metric_value, metric_type, index):\n          column_data[metric_type].values[k].append((v, index_end))\n",
                      "markdown": "`        # Flattens the metric_values.\n        # Initializes index_end to 'index - 1' to indicate that there is no item\n        # added yet. It is set to 'index' once the loop starts, indicating that\n        # at least one item is found.\n        index_end = index - 1\n        for k, v, index_end in _flatten_proto(metric_value, metric_type, index):\n          column_data[metric_type].values[k].append((v, index_end))\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/experimental/dataframe.py"
                },
                "region": {
                  "startLine": 96,
                  "startColumn": 63,
                  "endLine": 96,
                  "endColumn": 67,
                  "snippet": {
                    "text": "    include_empty_columns: bool = False) -> Iterator[Tuple[str, Any, int]]:\n  \"\"\"Generates the leaf primitive fields by traversing the proto recursively.\n\n  Traverses a proto and emits a tuple of the name, value, index at which the\n  value should be inserted. If include_empty_columns is True, unset fields are\n  also emitted with value of None. The index is the order of which this\n  primitive should be inserted to the DataFrame.\n",
                    "rendered": {
                      "text": "    include_empty_columns: bool = False) -> Iterator[Tuple[str, Any, int]]:\n  \"\"\"Generates the leaf primitive fields by traversing the proto recursively.\n\n  Traverses a proto and emits a tuple of the name, value, index at which the\n  value should be inserted. If include_empty_columns is True, unset fields are\n  also emitted with value of None. The index is the order of which this\n  primitive should be inserted to the DataFrame.\n",
                      "markdown": "`    include_empty_columns: bool = False) -> Iterator[Tuple[str, Any, int]]:\n  \"\"\"Generates the leaf primitive fields by traversing the proto recursively.\n\n  Traverses a proto and emits a tuple of the name, value, index at which the\n  value should be inserted. If include_empty_columns is True, unset fields are\n  also emitted with value of None. The index is the order of which this\n  primitive should be inserted to the DataFrame.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/experimental/dataframe.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/api/model_eval_lib_test.py"
                },
                "region": {
                  "startLine": 146,
                  "startColumn": 50,
                  "endLine": 146,
                  "endColumn": 54,
                  "snippet": {
                    "text": "      (expected_key, expected_value) = expected\n      (got_key, got_value) = got\n      self.assertEqual(\n          expected_key, got_key, msg='key mismatch at index %d' % index)\n      value_assert_fn(expected_value, got_value)\n\n  def assertSlicePlotsListEqual(self, expected_list, got_list):\n",
                    "rendered": {
                      "text": "      (expected_key, expected_value) = expected\n      (got_key, got_value) = got\n      self.assertEqual(\n          expected_key, got_key, msg='key mismatch at index %d' % index)\n      value_assert_fn(expected_value, got_value)\n\n  def assertSlicePlotsListEqual(self, expected_list, got_list):\n",
                      "markdown": "`      (expected_key, expected_value) = expected\n      (got_key, got_value) = got\n      self.assertEqual(\n          expected_key, got_key, msg='key mismatch at index %d' % index)\n      value_assert_fn(expected_value, got_value)\n\n  def assertSlicePlotsListEqual(self, expected_list, got_list):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/api/model_eval_lib_test.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/api/model_eval_lib.py"
                },
                "region": {
                  "startLine": 393,
                  "startColumn": 49,
                  "endLine": 393,
                  "endColumn": 53,
                  "snippet": {
                    "text": "      eval_config.model_specs.example_weight_key or\n      eval_config.model_specs.example_weight_keys.\n    additional_fetches: Optional prefixes of additional tensors stored in\n      signature_def.inputs that should be fetched at prediction time. The\n      \"features\" and \"labels\" tensors are handled automatically and should not\n      be included. Only used if EvalSavedModel used.\n    blacklist_feature_fetches: Optional list of tensor names in the features\n",
                    "rendered": {
                      "text": "      eval_config.model_specs.example_weight_key or\n      eval_config.model_specs.example_weight_keys.\n    additional_fetches: Optional prefixes of additional tensors stored in\n      signature_def.inputs that should be fetched at prediction time. The\n      \"features\" and \"labels\" tensors are handled automatically and should not\n      be included. Only used if EvalSavedModel used.\n    blacklist_feature_fetches: Optional list of tensor names in the features\n",
                      "markdown": "`      eval_config.model_specs.example_weight_key or\n      eval_config.model_specs.example_weight_keys.\n    additional_fetches: Optional prefixes of additional tensors stored in\n      signature_def.inputs that should be fetched at prediction time. The\n      \"features\" and \"labels\" tensors are handled automatically and should not\n      be included. Only used if EvalSavedModel used.\n    blacklist_feature_fetches: Optional list of tensor names in the features\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/api/model_eval_lib.py"
                },
                "region": {
                  "startLine": 284,
                  "startColumn": 63,
                  "endLine": 284,
                  "endColumn": 67,
                  "snippet": {
                    "text": "      models are returned.\n\n  Returns:\n    An EvalResults containing the evaluation results serialized at output_paths.\n    This can be used to construct a time series view.\n  \"\"\"\n  results = []\n",
                    "rendered": {
                      "text": "      models are returned.\n\n  Returns:\n    An EvalResults containing the evaluation results serialized at output_paths.\n    This can be used to construct a time series view.\n  \"\"\"\n  results = []\n",
                      "markdown": "`      models are returned.\n\n  Returns:\n    An EvalResults containing the evaluation results serialized at output_paths.\n    This can be used to construct a time series view.\n  \"\"\"\n  results = []\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/api/model_eval_lib.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/api/model_eval_lib.py"
                },
                "region": {
                  "startLine": 1246,
                  "startColumn": 20,
                  "endLine": 1246,
                  "endColumn": 26,
                  "snippet": {
                    "text": "  Eval SavedModel and returns the results.\n\n  This is a simplified API for users who want to quickly get something running\n  locally. Users who wish to create their own Beam pipelines can use the\n  Evaluate PTransform instead.\n\n  Args:\n",
                    "rendered": {
                      "text": "  Eval SavedModel and returns the results.\n\n  This is a simplified API for users who want to quickly get something running\n  locally. Users who wish to create their own Beam pipelines can use the\n  Evaluate PTransform instead.\n\n  Args:\n",
                      "markdown": "`  Eval SavedModel and returns the results.\n\n  This is a simplified API for users who want to quickly get something running\n  locally. Users who wish to create their own Beam pipelines can use the\n  Evaluate PTransform instead.\n\n  Args:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/api/model_eval_lib.py"
                },
                "region": {
                  "startLine": 856,
                  "startColumn": 20,
                  "endLine": 856,
                  "endColumn": 26,
                  "snippet": {
                    "text": "\n\n@beam.ptransform_fn\n# TODO(b/156538355): Find out why str is also required instead of just bytes\n#   after adding types.Extracts.\n@beam.typehints.with_input_types(Union[bytes, str, types.Extracts])\n@beam.typehints.with_output_types(types.Extracts)\n",
                    "rendered": {
                      "text": "\n\n@beam.ptransform_fn\n# TODO(b/156538355): Find out why str is also required instead of just bytes\n#   after adding types.Extracts.\n@beam.typehints.with_input_types(Union[bytes, str, types.Extracts])\n@beam.typehints.with_output_types(types.Extracts)\n",
                      "markdown": "`\n\n@beam.ptransform_fn\n# TODO(b/156538355): Find out why str is also required instead of just bytes\n#   after adding types.Extracts.\n@beam.typehints.with_input_types(Union[bytes, str, types.Extracts])\n@beam.typehints.with_output_types(types.Extracts)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/api/model_eval_lib.py"
                },
                "region": {
                  "startLine": 408,
                  "startColumn": 41,
                  "endLine": 408,
                  "endColumn": 47,
                  "snippet": {
                    "text": "    eval_config: Eval config.\n    custom_model_loader: Optional custom model loader for non-TF models.\n    rubber_stamp: True when this run is a first run without a baseline model\n      while a baseline is configured, the diff thresholds will be ignored.\n    resource_hints: The beam resource hints to apply to the PTransform which\n      runs inference for this model.\n    backend_config: Optional configuration of backend running model inference\n",
                    "rendered": {
                      "text": "    eval_config: Eval config.\n    custom_model_loader: Optional custom model loader for non-TF models.\n    rubber_stamp: True when this run is a first run without a baseline model\n      while a baseline is configured, the diff thresholds will be ignored.\n    resource_hints: The beam resource hints to apply to the PTransform which\n      runs inference for this model.\n    backend_config: Optional configuration of backend running model inference\n",
                      "markdown": "`    eval_config: Eval config.\n    custom_model_loader: Optional custom model loader for non-TF models.\n    rubber_stamp: True when this run is a first run without a baseline model\n      while a baseline is configured, the diff thresholds will be ignored.\n    resource_hints: The beam resource hints to apply to the PTransform which\n      runs inference for this model.\n    backend_config: Optional configuration of backend running model inference\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/api/model_eval_lib.py"
                },
                "region": {
                  "startLine": 285,
                  "startColumn": 35,
                  "endLine": 285,
                  "endColumn": 41,
                  "snippet": {
                    "text": "\n  Returns:\n    An EvalResults containing the evaluation results serialized at output_paths.\n    This can be used to construct a time series view.\n  \"\"\"\n  results = []\n  if not isinstance(output_paths, list):\n",
                    "rendered": {
                      "text": "\n  Returns:\n    An EvalResults containing the evaluation results serialized at output_paths.\n    This can be used to construct a time series view.\n  \"\"\"\n  results = []\n  if not isinstance(output_paths, list):\n",
                      "markdown": "`\n  Returns:\n    An EvalResults containing the evaluation results serialized at output_paths.\n    This can be used to construct a time series view.\n  \"\"\"\n  results = []\n  if not isinstance(output_paths, list):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/api/model_eval_lib.py"
                },
                "region": {
                  "startLine": 263,
                  "startColumn": 30,
                  "endLine": 263,
                  "endColumn": 36,
                  "snippet": {
                    "text": "\n  Returns:\n    An `tfma.view.EvalResults` object containing all evaluation results. This\n    can be used to construct a time series view.\n  \"\"\"\n  return view_types.EvalResults(results, mode)\n\n",
                    "rendered": {
                      "text": "\n  Returns:\n    An `tfma.view.EvalResults` object containing all evaluation results. This\n    can be used to construct a time series view.\n  \"\"\"\n  return view_types.EvalResults(results, mode)\n\n",
                      "markdown": "`\n  Returns:\n    An `tfma.view.EvalResults` object containing all evaluation results. This\n    can be used to construct a time series view.\n  \"\"\"\n  return view_types.EvalResults(results, mode)\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/addons/fairness/view/__init__.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/addons/fairness/metrics/counterfactual_fa"
                },
                "region": {
                  "startLine": 113,
                  "startColumn": 34,
                  "endLine": 113,
                  "endColumn": 38,
                  "snippet": {
                    "text": "    model_name: str, output_name: str, example_weighted: bool\n) -> Tuple[List[metric_types.MetricKey], Dict[float, Dict[\n    str, metric_types.MetricKey]]]:\n  \"\"\"Creates metric keys map keyed at threshold and metric name.\"\"\"\n  keys = []\n  metric_key_by_name_by_threshold = collections.defaultdict(dict)\n  num_digits = _calculate_digits(thresholds)\n",
                    "rendered": {
                      "text": "    model_name: str, output_name: str, example_weighted: bool\n) -> Tuple[List[metric_types.MetricKey], Dict[float, Dict[\n    str, metric_types.MetricKey]]]:\n  \"\"\"Creates metric keys map keyed at threshold and metric name.\"\"\"\n  keys = []\n  metric_key_by_name_by_threshold = collections.defaultdict(dict)\n  num_digits = _calculate_digits(thresholds)\n",
                      "markdown": "`    model_name: str, output_name: str, example_weighted: bool\n) -> Tuple[List[metric_types.MetricKey], Dict[float, Dict[\n    str, metric_types.MetricKey]]]:\n  \"\"\"Creates metric keys map keyed at threshold and metric name.\"\"\"\n  keys = []\n  metric_key_by_name_by_threshold = collections.defaultdict(dict)\n  num_digits = _calculate_digits(thresholds)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/addons/fairness/metrics/counterfactual_fa"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-tensorflow-model-analysis-0.46.0-r3.apk/py3-tensorflow-model-analysis-0.46.0-r3/usr/lib/python3.12/site-packages/tensorflow_model_analysis/addons/fairness/metrics/__init__.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#     https://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        }
      ],
      "columnKind": "utf16CodeUnits"
    }
  ]
}