{
  "$schema": "https://schemastore.azurewebsites.net/schemas/json/sarif-2.1.0-rtm.6.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "oss-detect-backdoor",
          "organization": "Microsoft Corporation",
          "product": "OSSGadget (https://github.com/Microsoft/OSSGadget)",
          "version": "0.0.0+ed0e2cfe6a"
        }
      },
      "results": [
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-logstash-mixin-ecs_compatibility_support-1.3.0-r3.apk/ruby3.2-logstash-mixin-ecs_compatibility_support-1.3.0-r3/usr/lib/ruby/gems/3.2.0/gems/logstash-mixin-ecs_compatibility_support-1.3.0-x86_64-linux-gnu/lib/log"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 11,
                  "endLine": 18,
                  "snippet": {
                    "text": "      # It also memoizes an `ecs_compatibility` set to the active mode. It is up to the user\n      # to plumb this into the initialization of your plugin.\n      #\n      # ~~~ ruby\n      # require 'logstash/plugin_mixins/ecs_compatibility_support/spec_helper'\n      #\n      # describe YourClass, :ecs_compatibility_support\n      #   ecs_compatibility_matrix(:disabled, :v1) do |ecs_select|\n",
                    "rendered": {
                      "text": "      # It also memoizes an `ecs_compatibility` set to the active mode. It is up to the user\n      # to plumb this into the initialization of your plugin.\n      #\n      # ~~~ ruby\n      # require 'logstash/plugin_mixins/ecs_compatibility_support/spec_helper'\n      #\n      # describe YourClass, :ecs_compatibility_support\n      #   ecs_compatibility_matrix(:disabled, :v1) do |ecs_select|\n",
                      "markdown": "`      # It also memoizes an `ecs_compatibility` set to the active mode. It is up to the user\n      # to plumb this into the initialization of your plugin.\n      #\n      # ~~~ ruby\n      # require 'logstash/plugin_mixins/ecs_compatibility_support/spec_helper'\n      #\n      # describe YourClass, :ecs_compatibility_support\n      #   ecs_compatibility_matrix(:disabled, :v1) do |ecs_select|\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-logstash-mixin-ecs_compatibility_support-1.3.0-r3.apk/ruby3.2-logstash-mixin-ecs_compatibility_support-1.3.0-r3/usr/lib/ruby/gems/3.2.0/specifications/logstash-mixin-ecs_compatibility_support-1.3.0-x86_64-linux-g"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 351,
                  "endLine": 13,
                  "endColumn": 355,
                  "snippet": {
                    "text": "ency of any Logstash plugin that wishes to use the ECS-Compatibility mode introduced in Logstash 7.x while maintaining backward-compatibility with earlier Logstash releases. When used on older Logstash versions, this adapter provides an implementation of ECS-Compatibility mode that can be controlled at the plugin instance level.\".freeze\n  s.email = \"info@elastic.co\".freeze\n  s.homepage = \"https://github.com/logstash-plugins/logstash-mixin-ecs_compatibility_support\".freeze\n  s.licenses = [\"Apache-2.0\".freeze]\n  s.rubygems_version = \"3.4.19\".freeze\n  s.summary = \"Support for the ECS-Compatibility mo",
                    "rendered": {
                      "text": "ency of any Logstash plugin that wishes to use the ECS-Compatibility mode introduced in Logstash 7.x while maintaining backward-compatibility with earlier Logstash releases. When used on older Logstash versions, this adapter provides an implementation of ECS-Compatibility mode that can be controlled at the plugin instance level.\".freeze\n  s.email = \"info@elastic.co\".freeze\n  s.homepage = \"https://github.com/logstash-plugins/logstash-mixin-ecs_compatibility_support\".freeze\n  s.licenses = [\"Apache-2.0\".freeze]\n  s.rubygems_version = \"3.4.19\".freeze\n  s.summary = \"Support for the ECS-Compatibility mo",
                      "markdown": "`ency of any Logstash plugin that wishes to use the ECS-Compatibility mode introduced in Logstash 7.x while maintaining backward-compatibility with earlier Logstash releases. When used on older Logstash versions, this adapter provides an implementation of ECS-Compatibility mode that can be controlled at the plugin instance level.\".freeze\n  s.email = \"info@elastic.co\".freeze\n  s.homepage = \"https://github.com/logstash-plugins/logstash-mixin-ecs_compatibility_support\".freeze\n  s.licenses = [\"Apache-2.0\".freeze]\n  s.rubygems_version = \"3.4.19\".freeze\n  s.summary = \"Support for the ECS-Compatibility mo`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-logstash-mixin-ecs_compatibility_support-1.3.0-r3.apk/ruby3.2-logstash-mixin-ecs_compatibility_support-1.3.0-r3/usr/lib/ruby/gems/3.2.0/gems/logstash-mixin-ecs_compatibility_support-1.3.0-x86_64-linux-gnu/lib/log"
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 71,
                  "endLine": 56,
                  "endColumn": 75,
                  "snippet": {
                    "text": "\n        ##\n        # Designed for use by plugins in a `case` statement, this method returns a `Symbol`\n        # representing the current ECS compatibility mode as configured at plugin\n        # initialization, or raises an exception if the mode has not yet been initialized.\n        #\n        # Plugin implementations using this method MUST provide code-paths for:\n",
                    "rendered": {
                      "text": "\n        ##\n        # Designed for use by plugins in a `case` statement, this method returns a `Symbol`\n        # representing the current ECS compatibility mode as configured at plugin\n        # initialization, or raises an exception if the mode has not yet been initialized.\n        #\n        # Plugin implementations using this method MUST provide code-paths for:\n",
                      "markdown": "`\n        ##\n        # Designed for use by plugins in a `case` statement, this method returns a `Symbol`\n        # representing the current ECS compatibility mode as configured at plugin\n        # initialization, or raises an exception if the mode has not yet been initialized.\n        #\n        # Plugin implementations using this method MUST provide code-paths for:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-logstash-mixin-ecs_compatibility_support-1.3.0-r3.apk/ruby3.2-logstash-mixin-ecs_compatibility_support-1.3.0-r3/usr/lib/ruby/gems/3.2.0/gems/logstash-mixin-ecs_compatibility_support-1.3.0-x86_64-linux-gnu/spec/lo"
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 5,
                  "endLine": 62,
                  "endColumn": 13,
                  "snippet": {
                    "text": "\n      end\n      plugin = plugin_class.new('ecs_compatibility' => 'v1')\n      expect { plugin.register }.to raise_error NameError, /\\btarget\\b/\n    end\n\n  end\n",
                    "rendered": {
                      "text": "\n      end\n      plugin = plugin_class.new('ecs_compatibility' => 'v1')\n      expect { plugin.register }.to raise_error NameError, /\\btarget\\b/\n    end\n\n  end\n",
                      "markdown": "`\n      end\n      plugin = plugin_class.new('ecs_compatibility' => 'v1')\n      expect { plugin.register }.to raise_error NameError, /\\btarget\\b/\n    end\n\n  end\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-logstash-mixin-ecs_compatibility_support-1.3.0-r3.apk/ruby3.2-logstash-mixin-ecs_compatibility_support-1.3.0-r3/usr/lib/ruby/gems/3.2.0/gems/logstash-mixin-ecs_compatibility_support-1.3.0-x86_64-linux-gnu/lib/log"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 44,
                  "endLine": 25,
                  "endColumn": 48,
                  "snippet": {
                    "text": "        end\n\n        TARGET_NOT_SET_MESSAGE = (\"ECS compatibility is enabled but `target` option was not specified. \" +\n            \"This may cause fields to be set at the top-level of the event where they are likely to clash with the Elastic Common Schema. \" +\n            \"It is recommended to set the `target` option to avoid potential schema conflicts (if your data is ECS compliant \" +\n            \"or non-conflicting, feel free to ignore this message)\").freeze\n\n",
                    "rendered": {
                      "text": "        end\n\n        TARGET_NOT_SET_MESSAGE = (\"ECS compatibility is enabled but `target` option was not specified. \" +\n            \"This may cause fields to be set at the top-level of the event where they are likely to clash with the Elastic Common Schema. \" +\n            \"It is recommended to set the `target` option to avoid potential schema conflicts (if your data is ECS compliant \" +\n            \"or non-conflicting, feel free to ignore this message)\").freeze\n\n",
                      "markdown": "`        end\n\n        TARGET_NOT_SET_MESSAGE = (\"ECS compatibility is enabled but `target` option was not specified. \" +\n            \"This may cause fields to be set at the top-level of the event where they are likely to clash with the Elastic Common Schema. \" +\n            \"It is recommended to set the `target` option to avoid potential schema conflicts (if your data is ECS compliant \" +\n            \"or non-conflicting, feel free to ignore this message)\").freeze\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-logstash-mixin-ecs_compatibility_support-1.3.0-r3.apk/ruby3.2-logstash-mixin-ecs_compatibility_support-1.3.0-r3/usr/lib/ruby/gems/3.2.0/gems/logstash-mixin-ecs_compatibility_support-1.3.0-x86_64-linux-gnu/spec/lo"
                },
                "region": {
                  "startLine": 113,
                  "startColumn": 88,
                  "endLine": 113,
                  "endColumn": 92,
                  "snippet": {
                    "text": "\n                it 'fails to initialize and emits a helpful log message' do\n                  # we cannot rely on internal details of the error that is emitted such as its exact message,\n                  # but we can expect the given value to be included in a message logged at ERROR-level.\n                  expect { plugin_class.new(plugin_options) }.to raise_error(LogStash::ConfigurationError)\n                  expect(logger_stub).to have_received(:error).with(/\\b#{Regexp.escape(invalid_value.to_s)}\\b/)\n                end\n",
                    "rendered": {
                      "text": "\n                it 'fails to initialize and emits a helpful log message' do\n                  # we cannot rely on internal details of the error that is emitted such as its exact message,\n                  # but we can expect the given value to be included in a message logged at ERROR-level.\n                  expect { plugin_class.new(plugin_options) }.to raise_error(LogStash::ConfigurationError)\n                  expect(logger_stub).to have_received(:error).with(/\\b#{Regexp.escape(invalid_value.to_s)}\\b/)\n                end\n",
                      "markdown": "`\n                it 'fails to initialize and emits a helpful log message' do\n                  # we cannot rely on internal details of the error that is emitted such as its exact message,\n                  # but we can expect the given value to be included in a message logged at ERROR-level.\n                  expect { plugin_class.new(plugin_options) }.to raise_error(LogStash::ConfigurationError)\n                  expect(logger_stub).to have_received(:error).with(/\\b#{Regexp.escape(invalid_value.to_s)}\\b/)\n                end\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-logstash-mixin-ecs_compatibility_support-1.3.0-r3.apk/ruby3.2-logstash-mixin-ecs_compatibility_support-1.3.0-r3/usr/lib/ruby/gems/3.2.0/gems/logstash-mixin-ecs_compatibility_support-1.3.0-x86_64-linux-gnu/spec/lo"
                },
                "region": {
                  "startLine": 114,
                  "startColumn": 17,
                  "endLine": 114,
                  "endColumn": 25,
                  "snippet": {
                    "text": "                it 'fails to initialize and emits a helpful log message' do\n                  # we cannot rely on internal details of the error that is emitted such as its exact message,\n                  # but we can expect the given value to be included in a message logged at ERROR-level.\n                  expect { plugin_class.new(plugin_options) }.to raise_error(LogStash::ConfigurationError)\n                  expect(logger_stub).to have_received(:error).with(/\\b#{Regexp.escape(invalid_value.to_s)}\\b/)\n                end\n              end\n",
                    "rendered": {
                      "text": "                it 'fails to initialize and emits a helpful log message' do\n                  # we cannot rely on internal details of the error that is emitted such as its exact message,\n                  # but we can expect the given value to be included in a message logged at ERROR-level.\n                  expect { plugin_class.new(plugin_options) }.to raise_error(LogStash::ConfigurationError)\n                  expect(logger_stub).to have_received(:error).with(/\\b#{Regexp.escape(invalid_value.to_s)}\\b/)\n                end\n              end\n",
                      "markdown": "`                it 'fails to initialize and emits a helpful log message' do\n                  # we cannot rely on internal details of the error that is emitted such as its exact message,\n                  # but we can expect the given value to be included in a message logged at ERROR-level.\n                  expect { plugin_class.new(plugin_options) }.to raise_error(LogStash::ConfigurationError)\n                  expect(logger_stub).to have_received(:error).with(/\\b#{Regexp.escape(invalid_value.to_s)}\\b/)\n                end\n              end\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-logstash-mixin-ecs_compatibility_support-1.3.0-r3.apk/ruby3.2-logstash-mixin-ecs_compatibility_support-1.3.0-r3/usr/lib/ruby/gems/3.2.0/gems/logstash-mixin-ecs_compatibility_support-1.3.0-x86_64-linux-gnu/spec/lo"
                },
                "region": {
                  "startLine": 113,
                  "startColumn": 30,
                  "endLine": 113,
                  "endColumn": 38,
                  "snippet": {
                    "text": "\n                it 'fails to initialize and emits a helpful log message' do\n                  # we cannot rely on internal details of the error that is emitted such as its exact message,\n                  # but we can expect the given value to be included in a message logged at ERROR-level.\n                  expect { plugin_class.new(plugin_options) }.to raise_error(LogStash::ConfigurationError)\n                  expect(logger_stub).to have_received(:error).with(/\\b#{Regexp.escape(invalid_value.to_s)}\\b/)\n                end\n",
                    "rendered": {
                      "text": "\n                it 'fails to initialize and emits a helpful log message' do\n                  # we cannot rely on internal details of the error that is emitted such as its exact message,\n                  # but we can expect the given value to be included in a message logged at ERROR-level.\n                  expect { plugin_class.new(plugin_options) }.to raise_error(LogStash::ConfigurationError)\n                  expect(logger_stub).to have_received(:error).with(/\\b#{Regexp.escape(invalid_value.to_s)}\\b/)\n                end\n",
                      "markdown": "`\n                it 'fails to initialize and emits a helpful log message' do\n                  # we cannot rely on internal details of the error that is emitted such as its exact message,\n                  # but we can expect the given value to be included in a message logged at ERROR-level.\n                  expect { plugin_class.new(plugin_options) }.to raise_error(LogStash::ConfigurationError)\n                  expect(logger_stub).to have_received(:error).with(/\\b#{Regexp.escape(invalid_value.to_s)}\\b/)\n                end\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-logstash-mixin-ecs_compatibility_support-1.3.0-r3.apk/ruby3.2-logstash-mixin-ecs_compatibility_support-1.3.0-r3/usr/lib/ruby/gems/3.2.0/gems/logstash-mixin-ecs_compatibility_support-1.3.0-x86_64-linux-gnu/spec/lo"
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 72,
                  "endLine": 58,
                  "snippet": {
                    "text": "            expect(plugin_class.method_defined?(:ecs_compatibility)).to be true\n          end\n\n          # depending on which version of Logstash is running, we either expect\n          # to include or to _NOT_ include the legacy adapter.\n          if native_support_for_ecs_compatibility\n            context 'since base class provides ECS ecs_compatibility config' do\n              its(:ancestors) { is_expected.to_not include(ecs_compatibility_support::LegacyAdapter) }\n",
                    "rendered": {
                      "text": "            expect(plugin_class.method_defined?(:ecs_compatibility)).to be true\n          end\n\n          # depending on which version of Logstash is running, we either expect\n          # to include or to _NOT_ include the legacy adapter.\n          if native_support_for_ecs_compatibility\n            context 'since base class provides ECS ecs_compatibility config' do\n              its(:ancestors) { is_expected.to_not include(ecs_compatibility_support::LegacyAdapter) }\n",
                      "markdown": "`            expect(plugin_class.method_defined?(:ecs_compatibility)).to be true\n          end\n\n          # depending on which version of Logstash is running, we either expect\n          # to include or to _NOT_ include the legacy adapter.\n          if native_support_for_ecs_compatibility\n            context 'since base class provides ECS ecs_compatibility config' do\n              its(:ancestors) { is_expected.to_not include(ecs_compatibility_support::LegacyAdapter) }\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-logstash-mixin-ecs_compatibility_support-1.3.0-r3.apk/ruby3.2-logstash-mixin-ecs_compatibility_support-1.3.0-r3/usr/lib/ruby/gems/3.2.0/gems/logstash-mixin-ecs_compatibility_support-1.3.0-x86_64-linux-gnu/spec/lo"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 7,
                  "endLine": 21,
                  "endColumn": 15,
                  "snippet": {
                    "text": "    context 'that does not inherit from `LogStash::Plugin`' do\n      let(:plugin_class) { Class.new }\n      it 'fails with an ArgumentError' do\n        expect do\n          plugin_class.send(:include, ecs_compatibility_support)\n        end.to raise_error(ArgumentError, /LogStash::Plugin/)\n      end\n",
                    "rendered": {
                      "text": "    context 'that does not inherit from `LogStash::Plugin`' do\n      let(:plugin_class) { Class.new }\n      it 'fails with an ArgumentError' do\n        expect do\n          plugin_class.send(:include, ecs_compatibility_support)\n        end.to raise_error(ArgumentError, /LogStash::Plugin/)\n      end\n",
                      "markdown": "`    context 'that does not inherit from `LogStash::Plugin`' do\n      let(:plugin_class) { Class.new }\n      it 'fails with an ArgumentError' do\n        expect do\n          plugin_class.send(:include, ecs_compatibility_support)\n        end.to raise_error(ArgumentError, /LogStash::Plugin/)\n      end\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-logstash-mixin-ecs_compatibility_support-1.3.0-r3.apk/ruby3.2-logstash-mixin-ecs_compatibility_support-1.3.0-r3/usr/lib/ruby/gems/3.2.0/gems/logstash-mixin-ecs_compatibility_support-1.3.0-x86_64-linux-gnu/spec/lo"
                },
                "region": {
                  "startLine": 130,
                  "startColumn": 13,
                  "endLine": 130,
                  "endColumn": 21,
                  "snippet": {
                    "text": "              expect { ecs_select[\"bananas\"] }.to raise_error(ArgumentError, /Hash/)\n            end\n            it 'requires symbol keys' do\n              expect { ecs_select[\"bananas\"=>\"apes\"] }.to raise_error(ArgumentError, /Symbol keys/)\n            end\n            it 'selects the correct effective value' do\n              expect(ecs_select[disabled: \"nope\", v1: \"winner\"]).to eq(\"winner\")\n",
                    "rendered": {
                      "text": "              expect { ecs_select[\"bananas\"] }.to raise_error(ArgumentError, /Hash/)\n            end\n            it 'requires symbol keys' do\n              expect { ecs_select[\"bananas\"=>\"apes\"] }.to raise_error(ArgumentError, /Symbol keys/)\n            end\n            it 'selects the correct effective value' do\n              expect(ecs_select[disabled: \"nope\", v1: \"winner\"]).to eq(\"winner\")\n",
                      "markdown": "`              expect { ecs_select[\"bananas\"] }.to raise_error(ArgumentError, /Hash/)\n            end\n            it 'requires symbol keys' do\n              expect { ecs_select[\"bananas\"=>\"apes\"] }.to raise_error(ArgumentError, /Symbol keys/)\n            end\n            it 'selects the correct effective value' do\n              expect(ecs_select[disabled: \"nope\", v1: \"winner\"]).to eq(\"winner\")\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-logstash-mixin-ecs_compatibility_support-1.3.0-r3.apk/ruby3.2-logstash-mixin-ecs_compatibility_support-1.3.0-r3/usr/lib/ruby/gems/3.2.0/gems/logstash-mixin-ecs_compatibility_support-1.3.0-x86_64-linux-gnu/spec/lo"
                },
                "region": {
                  "startLine": 127,
                  "startColumn": 13,
                  "endLine": 127,
                  "endColumn": 21,
                  "snippet": {
                    "text": "              expect { ecs_select[disabled: \"nope\"] }.to raise_error(ArgumentError, /missing/)\n            end\n            it 'rejects non-hash options' do\n              expect { ecs_select[\"bananas\"] }.to raise_error(ArgumentError, /Hash/)\n            end\n            it 'requires symbol keys' do\n              expect { ecs_select[\"bananas\"=>\"apes\"] }.to raise_error(ArgumentError, /Symbol keys/)\n",
                    "rendered": {
                      "text": "              expect { ecs_select[disabled: \"nope\"] }.to raise_error(ArgumentError, /missing/)\n            end\n            it 'rejects non-hash options' do\n              expect { ecs_select[\"bananas\"] }.to raise_error(ArgumentError, /Hash/)\n            end\n            it 'requires symbol keys' do\n              expect { ecs_select[\"bananas\"=>\"apes\"] }.to raise_error(ArgumentError, /Symbol keys/)\n",
                      "markdown": "`              expect { ecs_select[disabled: \"nope\"] }.to raise_error(ArgumentError, /missing/)\n            end\n            it 'rejects non-hash options' do\n              expect { ecs_select[\"bananas\"] }.to raise_error(ArgumentError, /Hash/)\n            end\n            it 'requires symbol keys' do\n              expect { ecs_select[\"bananas\"=>\"apes\"] }.to raise_error(ArgumentError, /Symbol keys/)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-logstash-mixin-ecs_compatibility_support-1.3.0-r3.apk/ruby3.2-logstash-mixin-ecs_compatibility_support-1.3.0-r3/usr/lib/ruby/gems/3.2.0/gems/logstash-mixin-ecs_compatibility_support-1.3.0-x86_64-linux-gnu/spec/lo"
                },
                "region": {
                  "startLine": 124,
                  "startColumn": 13,
                  "endLine": 124,
                  "endColumn": 21,
                  "snippet": {
                    "text": "              expect { ecs_select[disabled: \"nope\", v1: \"no\", bananas: \"monkey\"] }.to raise_error(ArgumentError, /unknown/)\n            end\n            it 'rejects missing options' do\n              expect { ecs_select[disabled: \"nope\"] }.to raise_error(ArgumentError, /missing/)\n            end\n            it 'rejects non-hash options' do\n              expect { ecs_select[\"bananas\"] }.to raise_error(ArgumentError, /Hash/)\n",
                    "rendered": {
                      "text": "              expect { ecs_select[disabled: \"nope\", v1: \"no\", bananas: \"monkey\"] }.to raise_error(ArgumentError, /unknown/)\n            end\n            it 'rejects missing options' do\n              expect { ecs_select[disabled: \"nope\"] }.to raise_error(ArgumentError, /missing/)\n            end\n            it 'rejects non-hash options' do\n              expect { ecs_select[\"bananas\"] }.to raise_error(ArgumentError, /Hash/)\n",
                      "markdown": "`              expect { ecs_select[disabled: \"nope\", v1: \"no\", bananas: \"monkey\"] }.to raise_error(ArgumentError, /unknown/)\n            end\n            it 'rejects missing options' do\n              expect { ecs_select[disabled: \"nope\"] }.to raise_error(ArgumentError, /missing/)\n            end\n            it 'rejects non-hash options' do\n              expect { ecs_select[\"bananas\"] }.to raise_error(ArgumentError, /Hash/)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-logstash-mixin-ecs_compatibility_support-1.3.0-r3.apk/ruby3.2-logstash-mixin-ecs_compatibility_support-1.3.0-r3/usr/lib/ruby/gems/3.2.0/gems/logstash-mixin-ecs_compatibility_support-1.3.0-x86_64-linux-gnu/spec/lo"
                },
                "region": {
                  "startLine": 121,
                  "startColumn": 13,
                  "endLine": 121,
                  "endColumn": 21,
                  "snippet": {
                    "text": "              expect { ecs_select[{}] }.to raise_error(ArgumentError, /empty/)\n            end\n            it 'rejects unknown options' do\n              expect { ecs_select[disabled: \"nope\", v1: \"no\", bananas: \"monkey\"] }.to raise_error(ArgumentError, /unknown/)\n            end\n            it 'rejects missing options' do\n              expect { ecs_select[disabled: \"nope\"] }.to raise_error(ArgumentError, /missing/)\n",
                    "rendered": {
                      "text": "              expect { ecs_select[{}] }.to raise_error(ArgumentError, /empty/)\n            end\n            it 'rejects unknown options' do\n              expect { ecs_select[disabled: \"nope\", v1: \"no\", bananas: \"monkey\"] }.to raise_error(ArgumentError, /unknown/)\n            end\n            it 'rejects missing options' do\n              expect { ecs_select[disabled: \"nope\"] }.to raise_error(ArgumentError, /missing/)\n",
                      "markdown": "`              expect { ecs_select[{}] }.to raise_error(ArgumentError, /empty/)\n            end\n            it 'rejects unknown options' do\n              expect { ecs_select[disabled: \"nope\", v1: \"no\", bananas: \"monkey\"] }.to raise_error(ArgumentError, /unknown/)\n            end\n            it 'rejects missing options' do\n              expect { ecs_select[disabled: \"nope\"] }.to raise_error(ArgumentError, /missing/)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-logstash-mixin-ecs_compatibility_support-1.3.0-r3.apk/ruby3.2-logstash-mixin-ecs_compatibility_support-1.3.0-r3/usr/lib/ruby/gems/3.2.0/gems/logstash-mixin-ecs_compatibility_support-1.3.0-x86_64-linux-gnu/spec/lo"
                },
                "region": {
                  "startLine": 118,
                  "startColumn": 13,
                  "endLine": 118,
                  "endColumn": 21,
                  "snippet": {
                    "text": "\n          context '#[]' do\n            it 'rejects empty options' do\n              expect { ecs_select[{}] }.to raise_error(ArgumentError, /empty/)\n            end\n            it 'rejects unknown options' do\n              expect { ecs_select[disabled: \"nope\", v1: \"no\", bananas: \"monkey\"] }.to raise_error(ArgumentError, /unknown/)\n",
                    "rendered": {
                      "text": "\n          context '#[]' do\n            it 'rejects empty options' do\n              expect { ecs_select[{}] }.to raise_error(ArgumentError, /empty/)\n            end\n            it 'rejects unknown options' do\n              expect { ecs_select[disabled: \"nope\", v1: \"no\", bananas: \"monkey\"] }.to raise_error(ArgumentError, /unknown/)\n",
                      "markdown": "`\n          context '#[]' do\n            it 'rejects empty options' do\n              expect { ecs_select[{}] }.to raise_error(ArgumentError, /empty/)\n            end\n            it 'rejects unknown options' do\n              expect { ecs_select[disabled: \"nope\", v1: \"no\", bananas: \"monkey\"] }.to raise_error(ArgumentError, /unknown/)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-logstash-mixin-ecs_compatibility_support-1.3.0-r3.apk/ruby3.2-logstash-mixin-ecs_compatibility_support-1.3.0-r3/usr/lib/ruby/gems/3.2.0/gems/logstash-mixin-ecs_compatibility_support-1.3.0-x86_64-linux-gnu/spec/lo"
                },
                "region": {
                  "startLine": 112,
                  "startColumn": 13,
                  "endLine": 112,
                  "endColumn": 21,
                  "snippet": {
                    "text": "            let(:ecs_supported_modes) { [:disabled,:v1,:v2] }\n            let(:ecs_effective_mode) { :v3 }\n            it 'raises a configuration error' do\n              expect { plugin_instance.ecs_select }.to raise_error(LogStash::ConfigurationError)\n            end\n          end\n\n",
                    "rendered": {
                      "text": "            let(:ecs_supported_modes) { [:disabled,:v1,:v2] }\n            let(:ecs_effective_mode) { :v3 }\n            it 'raises a configuration error' do\n              expect { plugin_instance.ecs_select }.to raise_error(LogStash::ConfigurationError)\n            end\n          end\n\n",
                      "markdown": "`            let(:ecs_supported_modes) { [:disabled,:v1,:v2] }\n            let(:ecs_effective_mode) { :v3 }\n            it 'raises a configuration error' do\n              expect { plugin_instance.ecs_select }.to raise_error(LogStash::ConfigurationError)\n            end\n          end\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-logstash-mixin-ecs_compatibility_support-1.3.0-r3.apk/ruby3.2-logstash-mixin-ecs_compatibility_support-1.3.0-r3/usr/lib/ruby/gems/3.2.0/gems/logstash-mixin-ecs_compatibility_support-1.3.0-x86_64-linux-gnu/spec/lo"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 7,
                  "endLine": 65,
                  "endColumn": 15,
                  "snippet": {
                    "text": "    context 'that does not inherit from LogStash::Plugin' do\n      let(:plugin_class) { Class.new }\n      it 'fails with an ArgumentError' do\n        expect do\n          plugin_class.send(:include, selector_module)\n        end.to raise_error(ArgumentError, /LogStash::Plugin/)\n      end\n",
                    "rendered": {
                      "text": "    context 'that does not inherit from LogStash::Plugin' do\n      let(:plugin_class) { Class.new }\n      it 'fails with an ArgumentError' do\n        expect do\n          plugin_class.send(:include, selector_module)\n        end.to raise_error(ArgumentError, /LogStash::Plugin/)\n      end\n",
                      "markdown": "`    context 'that does not inherit from LogStash::Plugin' do\n      let(:plugin_class) { Class.new }\n      it 'fails with an ArgumentError' do\n        expect do\n          plugin_class.send(:include, selector_module)\n        end.to raise_error(ArgumentError, /LogStash::Plugin/)\n      end\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-logstash-mixin-ecs_compatibility_support-1.3.0-r3.apk/ruby3.2-logstash-mixin-ecs_compatibility_support-1.3.0-r3/usr/lib/ruby/gems/3.2.0/gems/logstash-mixin-ecs_compatibility_support-1.3.0-x86_64-linux-gnu/spec/lo"
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 5,
                  "endLine": 56,
                  "endColumn": 13,
                  "snippet": {
                    "text": "      expect { described_class.new(:disabled, :v1, :v8 => :v7, :v7 => :v6, :v6 => :v8) }.to raise_error(ArgumentError, /circular/)\n    end\n    it 'rejects alias that redefines concrete definition' do\n      expect { described_class.new(:disabled, :v1, :v1 => :disabled) }.to raise_error(ArgumentError, /redefine/)\n    end\n  end\n  context 'included into a class' do\n",
                    "rendered": {
                      "text": "      expect { described_class.new(:disabled, :v1, :v8 => :v7, :v7 => :v6, :v6 => :v8) }.to raise_error(ArgumentError, /circular/)\n    end\n    it 'rejects alias that redefines concrete definition' do\n      expect { described_class.new(:disabled, :v1, :v1 => :disabled) }.to raise_error(ArgumentError, /redefine/)\n    end\n  end\n  context 'included into a class' do\n",
                      "markdown": "`      expect { described_class.new(:disabled, :v1, :v8 => :v7, :v7 => :v6, :v6 => :v8) }.to raise_error(ArgumentError, /circular/)\n    end\n    it 'rejects alias that redefines concrete definition' do\n      expect { described_class.new(:disabled, :v1, :v1 => :disabled) }.to raise_error(ArgumentError, /redefine/)\n    end\n  end\n  context 'included into a class' do\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-logstash-mixin-ecs_compatibility_support-1.3.0-r3.apk/ruby3.2-logstash-mixin-ecs_compatibility_support-1.3.0-r3/usr/lib/ruby/gems/3.2.0/gems/logstash-mixin-ecs_compatibility_support-1.3.0-x86_64-linux-gnu/spec/lo"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 5,
                  "endLine": 53,
                  "endColumn": 13,
                  "snippet": {
                    "text": "      expect { described_class.new(:disabled, :v1, :v8 => :v8) }.to raise_error(ArgumentError, /circular/)\n    end\n    it 'rejects loose circular aliases' do\n      expect { described_class.new(:disabled, :v1, :v8 => :v7, :v7 => :v6, :v6 => :v8) }.to raise_error(ArgumentError, /circular/)\n    end\n    it 'rejects alias that redefines concrete definition' do\n      expect { described_class.new(:disabled, :v1, :v1 => :disabled) }.to raise_error(ArgumentError, /redefine/)\n",
                    "rendered": {
                      "text": "      expect { described_class.new(:disabled, :v1, :v8 => :v8) }.to raise_error(ArgumentError, /circular/)\n    end\n    it 'rejects loose circular aliases' do\n      expect { described_class.new(:disabled, :v1, :v8 => :v7, :v7 => :v6, :v6 => :v8) }.to raise_error(ArgumentError, /circular/)\n    end\n    it 'rejects alias that redefines concrete definition' do\n      expect { described_class.new(:disabled, :v1, :v1 => :disabled) }.to raise_error(ArgumentError, /redefine/)\n",
                      "markdown": "`      expect { described_class.new(:disabled, :v1, :v8 => :v8) }.to raise_error(ArgumentError, /circular/)\n    end\n    it 'rejects loose circular aliases' do\n      expect { described_class.new(:disabled, :v1, :v8 => :v7, :v7 => :v6, :v6 => :v8) }.to raise_error(ArgumentError, /circular/)\n    end\n    it 'rejects alias that redefines concrete definition' do\n      expect { described_class.new(:disabled, :v1, :v1 => :disabled) }.to raise_error(ArgumentError, /redefine/)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-logstash-mixin-ecs_compatibility_support-1.3.0-r3.apk/ruby3.2-logstash-mixin-ecs_compatibility_support-1.3.0-r3/usr/lib/ruby/gems/3.2.0/gems/logstash-mixin-ecs_compatibility_support-1.3.0-x86_64-linux-gnu/spec/lo"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 5,
                  "endLine": 50,
                  "endColumn": 13,
                  "snippet": {
                    "text": "      expect { described_class.new(:disabled, :v1, :v8 => :v2) }.to raise_error(ArgumentError, /alias target/)\n    end\n    it 'rejects tight circular aliases' do\n      expect { described_class.new(:disabled, :v1, :v8 => :v8) }.to raise_error(ArgumentError, /circular/)\n    end\n    it 'rejects loose circular aliases' do\n      expect { described_class.new(:disabled, :v1, :v8 => :v7, :v7 => :v6, :v6 => :v8) }.to raise_error(ArgumentError, /circular/)\n",
                    "rendered": {
                      "text": "      expect { described_class.new(:disabled, :v1, :v8 => :v2) }.to raise_error(ArgumentError, /alias target/)\n    end\n    it 'rejects tight circular aliases' do\n      expect { described_class.new(:disabled, :v1, :v8 => :v8) }.to raise_error(ArgumentError, /circular/)\n    end\n    it 'rejects loose circular aliases' do\n      expect { described_class.new(:disabled, :v1, :v8 => :v7, :v7 => :v6, :v6 => :v8) }.to raise_error(ArgumentError, /circular/)\n",
                      "markdown": "`      expect { described_class.new(:disabled, :v1, :v8 => :v2) }.to raise_error(ArgumentError, /alias target/)\n    end\n    it 'rejects tight circular aliases' do\n      expect { described_class.new(:disabled, :v1, :v8 => :v8) }.to raise_error(ArgumentError, /circular/)\n    end\n    it 'rejects loose circular aliases' do\n      expect { described_class.new(:disabled, :v1, :v8 => :v7, :v7 => :v6, :v6 => :v8) }.to raise_error(ArgumentError, /circular/)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-logstash-mixin-ecs_compatibility_support-1.3.0-r3.apk/ruby3.2-logstash-mixin-ecs_compatibility_support-1.3.0-r3/usr/lib/ruby/gems/3.2.0/gems/logstash-mixin-ecs_compatibility_support-1.3.0-x86_64-linux-gnu/spec/lo"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 5,
                  "endLine": 47,
                  "endColumn": 13,
                  "snippet": {
                    "text": "      end\n    end\n    it 'rejects alias list that doesnt resolve' do\n      expect { described_class.new(:disabled, :v1, :v8 => :v2) }.to raise_error(ArgumentError, /alias target/)\n    end\n    it 'rejects tight circular aliases' do\n      expect { described_class.new(:disabled, :v1, :v8 => :v8) }.to raise_error(ArgumentError, /circular/)\n",
                    "rendered": {
                      "text": "      end\n    end\n    it 'rejects alias list that doesnt resolve' do\n      expect { described_class.new(:disabled, :v1, :v8 => :v2) }.to raise_error(ArgumentError, /alias target/)\n    end\n    it 'rejects tight circular aliases' do\n      expect { described_class.new(:disabled, :v1, :v8 => :v8) }.to raise_error(ArgumentError, /circular/)\n",
                      "markdown": "`      end\n    end\n    it 'rejects alias list that doesnt resolve' do\n      expect { described_class.new(:disabled, :v1, :v8 => :v2) }.to raise_error(ArgumentError, /alias target/)\n    end\n    it 'rejects tight circular aliases' do\n      expect { described_class.new(:disabled, :v1, :v8 => :v8) }.to raise_error(ArgumentError, /circular/)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-logstash-mixin-ecs_compatibility_support-1.3.0-r3.apk/ruby3.2-logstash-mixin-ecs_compatibility_support-1.3.0-r3/usr/lib/ruby/gems/3.2.0/gems/logstash-mixin-ecs_compatibility_support-1.3.0-x86_64-linux-gnu/spec/lo"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 5,
                  "endLine": 20,
                  "endColumn": 13,
                  "snippet": {
                    "text": "      expect { described_class.new }.to raise_error(ArgumentError, /one or more/)\n    end\n    it 'rejects non-symbol arguments' do\n      expect { described_class.new(\"v1\") }.to raise_error(ArgumentError, /symbol/)\n    end\n    it 'accepts one symbol argument'do\n      selector_mod = described_class.new(:disabled)\n",
                    "rendered": {
                      "text": "      expect { described_class.new }.to raise_error(ArgumentError, /one or more/)\n    end\n    it 'rejects non-symbol arguments' do\n      expect { described_class.new(\"v1\") }.to raise_error(ArgumentError, /symbol/)\n    end\n    it 'accepts one symbol argument'do\n      selector_mod = described_class.new(:disabled)\n",
                      "markdown": "`      expect { described_class.new }.to raise_error(ArgumentError, /one or more/)\n    end\n    it 'rejects non-symbol arguments' do\n      expect { described_class.new(\"v1\") }.to raise_error(ArgumentError, /symbol/)\n    end\n    it 'accepts one symbol argument'do\n      selector_mod = described_class.new(:disabled)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-logstash-mixin-ecs_compatibility_support-1.3.0-r3.apk/ruby3.2-logstash-mixin-ecs_compatibility_support-1.3.0-r3/usr/lib/ruby/gems/3.2.0/gems/logstash-mixin-ecs_compatibility_support-1.3.0-x86_64-linux-gnu/spec/lo"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 5,
                  "endLine": 17,
                  "endColumn": 13,
                  "snippet": {
                    "text": "describe LogStash::PluginMixins::ECSCompatibilitySupport::Selector do\n  context 'initialize' do\n    it 'rejects zero arguments' do\n      expect { described_class.new }.to raise_error(ArgumentError, /one or more/)\n    end\n    it 'rejects non-symbol arguments' do\n      expect { described_class.new(\"v1\") }.to raise_error(ArgumentError, /symbol/)\n",
                    "rendered": {
                      "text": "describe LogStash::PluginMixins::ECSCompatibilitySupport::Selector do\n  context 'initialize' do\n    it 'rejects zero arguments' do\n      expect { described_class.new }.to raise_error(ArgumentError, /one or more/)\n    end\n    it 'rejects non-symbol arguments' do\n      expect { described_class.new(\"v1\") }.to raise_error(ArgumentError, /symbol/)\n",
                      "markdown": "`describe LogStash::PluginMixins::ECSCompatibilitySupport::Selector do\n  context 'initialize' do\n    it 'rejects zero arguments' do\n      expect { described_class.new }.to raise_error(ArgumentError, /one or more/)\n    end\n    it 'rejects non-symbol arguments' do\n      expect { described_class.new(\"v1\") }.to raise_error(ArgumentError, /symbol/)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-logstash-mixin-ecs_compatibility_support-1.3.0-r3.apk/ruby3.2-logstash-mixin-ecs_compatibility_support-1.3.0-r3/usr/lib/ruby/gems/3.2.0/gems/logstash-mixin-ecs_compatibility_support-1.3.0-x86_64-linux-gnu/README."
                },
                "region": {
                  "startLine": 120,
                  "startColumn": 48,
                  "endLine": 120,
                  "endColumn": 56,
                  "snippet": {
                    "text": "\n    ~~~ ruby\n      def register\n        @field_hostname = ecs_select[disabled: \"hostname\", v1: \"[host][name]\"]\n        @field_hostip   = ecs_select[disabled: \"ip\",       v1: \"[host][ip]\"  ]\n      end\n    ~~~\n",
                    "rendered": {
                      "text": "\n    ~~~ ruby\n      def register\n        @field_hostname = ecs_select[disabled: \"hostname\", v1: \"[host][name]\"]\n        @field_hostip   = ecs_select[disabled: \"ip\",       v1: \"[host][ip]\"  ]\n      end\n    ~~~\n",
                      "markdown": "`\n    ~~~ ruby\n      def register\n        @field_hostname = ecs_select[disabled: \"hostname\", v1: \"[host][name]\"]\n        @field_hostip   = ecs_select[disabled: \"ip\",       v1: \"[host][ip]\"  ]\n      end\n    ~~~\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-logstash-mixin-ecs_compatibility_support-1.3.0-r3.apk/ruby3.2-logstash-mixin-ecs_compatibility_support-1.3.0-r3/usr/lib/ruby/gems/3.2.0/gems/logstash-mixin-ecs_compatibility_support-1.3.0-x86_64-linux-gnu/README."
                },
                "region": {
                  "startLine": 120,
                  "startColumn": 15,
                  "endLine": 120,
                  "endColumn": 23,
                  "snippet": {
                    "text": "\n    ~~~ ruby\n      def register\n        @field_hostname = ecs_select[disabled: \"hostname\", v1: \"[host][name]\"]\n        @field_hostip   = ecs_select[disabled: \"ip\",       v1: \"[host][ip]\"  ]\n      end\n    ~~~\n",
                    "rendered": {
                      "text": "\n    ~~~ ruby\n      def register\n        @field_hostname = ecs_select[disabled: \"hostname\", v1: \"[host][name]\"]\n        @field_hostip   = ecs_select[disabled: \"ip\",       v1: \"[host][ip]\"  ]\n      end\n    ~~~\n",
                      "markdown": "`\n    ~~~ ruby\n      def register\n        @field_hostname = ecs_select[disabled: \"hostname\", v1: \"[host][name]\"]\n        @field_hostip   = ecs_select[disabled: \"ip\",       v1: \"[host][ip]\"  ]\n      end\n    ~~~\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-logstash-mixin-ecs_compatibility_support-1.3.0-r3.apk/ruby3.2-logstash-mixin-ecs_compatibility_support-1.3.0-r3/usr/lib/ruby/gems/3.2.0/gems/logstash-mixin-ecs_compatibility_support-1.3.0-x86_64-linux-gnu/README."
                },
                "region": {
                  "startLine": 134,
                  "startColumn": 27,
                  "endLine": 134,
                  "endColumn": 31,
                  "snippet": {
                    "text": "## Development\n\nThis gem:\n - *MUST* remain API-stable at 1.x\n - *MUST NOT* introduce additional runtime dependencies\n",
                    "rendered": {
                      "text": "## Development\n\nThis gem:\n - *MUST* remain API-stable at 1.x\n - *MUST NOT* introduce additional runtime dependencies\n",
                      "markdown": "`## Development\n\nThis gem:\n - *MUST* remain API-stable at 1.x\n - *MUST NOT* introduce additional runtime dependencies\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-logstash-mixin-ecs_compatibility_support-1.3.0-r3.apk/ruby3.2-logstash-mixin-ecs_compatibility_support-1.3.0-r3/usr/lib/ruby/gems/3.2.0/gems/logstash-mixin-ecs_compatibility_support-1.3.0-x86_64-linux-gnu/README."
                },
                "region": {
                  "startLine": 115,
                  "startColumn": 39,
                  "endLine": 115,
                  "endColumn": 43,
                  "snippet": {
                    "text": "3. As in the simple usage example, you can use the `ecs_compatibility` method.\n\n   But when supported versions are specified, you can also use the `ecs_select`\n   method to define alternates in-line. At runtime, the correct value will be\n   selected based on the current effective `ecs_compatibility` mode.\n\n    ~~~ ruby\n",
                    "rendered": {
                      "text": "3. As in the simple usage example, you can use the `ecs_compatibility` method.\n\n   But when supported versions are specified, you can also use the `ecs_select`\n   method to define alternates in-line. At runtime, the correct value will be\n   selected based on the current effective `ecs_compatibility` mode.\n\n    ~~~ ruby\n",
                      "markdown": "`3. As in the simple usage example, you can use the `ecs_compatibility` method.\n\n   But when supported versions are specified, you can also use the `ecs_select`\n   method to define alternates in-line. At runtime, the correct value will be\n   selected based on the current effective `ecs_compatibility` mode.\n\n    ~~~ ruby\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-logstash-mixin-ecs_compatibility_support-1.3.0-r3.apk/ruby3.2-logstash-mixin-ecs_compatibility_support-1.3.0-r3/usr/lib/ruby/gems/3.2.0/gems/logstash-mixin-ecs_compatibility_support-1.3.0-x86_64-linux-gnu/README."
                },
                "region": {
                  "startLine": 118,
                  "startColumn": 7,
                  "endLine": 119,
                  "snippet": {
                    "text": "   method to define alternates in-line. At runtime, the correct value will be\n   selected based on the current effective `ecs_compatibility` mode.\n\n    ~~~ ruby\n      def register\n        @field_hostname = ecs_select[disabled: \"hostname\", v1: \"[host][name]\"]\n        @field_hostip   = ecs_select[disabled: \"ip\",       v1: \"[host][ip]\"  ]\n      end\n",
                    "rendered": {
                      "text": "   method to define alternates in-line. At runtime, the correct value will be\n   selected based on the current effective `ecs_compatibility` mode.\n\n    ~~~ ruby\n      def register\n        @field_hostname = ecs_select[disabled: \"hostname\", v1: \"[host][name]\"]\n        @field_hostip   = ecs_select[disabled: \"ip\",       v1: \"[host][ip]\"  ]\n      end\n",
                      "markdown": "`   method to define alternates in-line. At runtime, the correct value will be\n   selected based on the current effective `ecs_compatibility` mode.\n\n    ~~~ ruby\n      def register\n        @field_hostname = ecs_select[disabled: \"hostname\", v1: \"[host][name]\"]\n        @field_hostip   = ecs_select[disabled: \"ip\",       v1: \"[host][ip]\"  ]\n      end\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-logstash-mixin-ecs_compatibility_support-1.3.0-r3.apk/ruby3.2-logstash-mixin-ecs_compatibility_support-1.3.0-r3/usr/lib/ruby/gems/3.2.0/gems/logstash-mixin-ecs_compatibility_support-1.3.0-x86_64-linux-gnu/README."
                },
                "region": {
                  "startLine": 102,
                  "startColumn": 7,
                  "endLine": 103,
                  "snippet": {
                    "text": "   multiple versions of ECS that are largely identical to each other. This can be\n   especially helpful when using `ecs_select`.\n\n    ~~~ ruby\n    require 'logstash/plugin_mixins/ecs_compatibility_support'\n\n    class LogStash::Inputs::Foo < Logstash::Inputs::Base\n      include LogStash::PluginMixins::ECSCompatibilitySupport(:disabled,:v1,:v8 => :v1)\n",
                    "rendered": {
                      "text": "   multiple versions of ECS that are largely identical to each other. This can be\n   especially helpful when using `ecs_select`.\n\n    ~~~ ruby\n    require 'logstash/plugin_mixins/ecs_compatibility_support'\n\n    class LogStash::Inputs::Foo < Logstash::Inputs::Base\n      include LogStash::PluginMixins::ECSCompatibilitySupport(:disabled,:v1,:v8 => :v1)\n",
                      "markdown": "`   multiple versions of ECS that are largely identical to each other. This can be\n   especially helpful when using `ecs_select`.\n\n    ~~~ ruby\n    require 'logstash/plugin_mixins/ecs_compatibility_support'\n\n    class LogStash::Inputs::Foo < Logstash::Inputs::Base\n      include LogStash::PluginMixins::ECSCompatibilitySupport(:disabled,:v1,:v8 => :v1)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-logstash-mixin-ecs_compatibility_support-1.3.0-r3.apk/ruby3.2-logstash-mixin-ecs_compatibility_support-1.3.0-r3/usr/lib/ruby/gems/3.2.0/gems/logstash-mixin-ecs_compatibility_support-1.3.0-x86_64-linux-gnu/README."
                },
                "region": {
                  "startLine": 84,
                  "startColumn": 7,
                  "endLine": 85,
                  "snippet": {
                    "text": "   that already inherits `LogStash::Plugin`, but this time specify which versions\n   of ECS your plugin supports:\n\n    ~~~ ruby\n    require 'logstash/plugin_mixins/ecs_compatibility_support'\n\n    class LogStash::Inputs::Foo < Logstash::Inputs::Base\n      include LogStash::PluginMixins::ECSCompatibilitySupport(:disabled,:v1)\n",
                    "rendered": {
                      "text": "   that already inherits `LogStash::Plugin`, but this time specify which versions\n   of ECS your plugin supports:\n\n    ~~~ ruby\n    require 'logstash/plugin_mixins/ecs_compatibility_support'\n\n    class LogStash::Inputs::Foo < Logstash::Inputs::Base\n      include LogStash::PluginMixins::ECSCompatibilitySupport(:disabled,:v1)\n",
                      "markdown": "`   that already inherits `LogStash::Plugin`, but this time specify which versions\n   of ECS your plugin supports:\n\n    ~~~ ruby\n    require 'logstash/plugin_mixins/ecs_compatibility_support'\n\n    class LogStash::Inputs::Foo < Logstash::Inputs::Base\n      include LogStash::PluginMixins::ECSCompatibilitySupport(:disabled,:v1)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-logstash-mixin-ecs_compatibility_support-1.3.0-r3.apk/ruby3.2-logstash-mixin-ecs_compatibility_support-1.3.0-r3/usr/lib/ruby/gems/3.2.0/gems/logstash-mixin-ecs_compatibility_support-1.3.0-x86_64-linux-gnu/README."
                },
                "region": {
                  "startLine": 81,
                  "startColumn": 53,
                  "endLine": 81,
                  "endColumn": 59,
                  "snippet": {
                    "text": "    ~~~\n\n2. In your plugin code, require this library and include it into your plugin class\n   that already inherits `LogStash::Plugin`, but this time specify which versions\n   of ECS your plugin supports:\n\n    ~~~ ruby\n",
                    "rendered": {
                      "text": "    ~~~\n\n2. In your plugin code, require this library and include it into your plugin class\n   that already inherits `LogStash::Plugin`, but this time specify which versions\n   of ECS your plugin supports:\n\n    ~~~ ruby\n",
                      "markdown": "`    ~~~\n\n2. In your plugin code, require this library and include it into your plugin class\n   that already inherits `LogStash::Plugin`, but this time specify which versions\n   of ECS your plugin supports:\n\n    ~~~ ruby\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-logstash-mixin-ecs_compatibility_support-1.3.0-r3.apk/ruby3.2-logstash-mixin-ecs_compatibility_support-1.3.0-r3/usr/lib/ruby/gems/3.2.0/gems/logstash-mixin-ecs_compatibility_support-1.3.0-x86_64-linux-gnu/README."
                },
                "region": {
                  "startLine": 72,
                  "startColumn": 7,
                  "endLine": 73,
                  "snippet": {
                    "text": "\n1. Add version `~>1.2` of this gem as a runtime dependency of your Logstash plugin's `gemspec`:\n\n    ~~~ ruby\n    Gem::Specification.new do |s|\n      # ...\n\n      s.add_runtime_dependency 'logstash-mixin-ecs_compatibility_support', '~>1.2'\n",
                    "rendered": {
                      "text": "\n1. Add version `~>1.2` of this gem as a runtime dependency of your Logstash plugin's `gemspec`:\n\n    ~~~ ruby\n    Gem::Specification.new do |s|\n      # ...\n\n      s.add_runtime_dependency 'logstash-mixin-ecs_compatibility_support', '~>1.2'\n",
                      "markdown": "`\n1. Add version `~>1.2` of this gem as a runtime dependency of your Logstash plugin's `gemspec`:\n\n    ~~~ ruby\n    Gem::Specification.new do |s|\n      # ...\n\n      s.add_runtime_dependency 'logstash-mixin-ecs_compatibility_support', '~>1.2'\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-logstash-mixin-ecs_compatibility_support-1.3.0-r3.apk/ruby3.2-logstash-mixin-ecs_compatibility_support-1.3.0-r3/usr/lib/ruby/gems/3.2.0/gems/logstash-mixin-ecs_compatibility_support-1.3.0-x86_64-linux-gnu/README."
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 7,
                  "endLine": 48,
                  "snippet": {
                    "text": "    - ECS Compatibility being disabled\n    - helpful failure when an unsupported version is requested\n\n    ~~~ ruby\n      def register\n        case ecs_compatibility\n        when :disabled\n          # ...\n",
                    "rendered": {
                      "text": "    - ECS Compatibility being disabled\n    - helpful failure when an unsupported version is requested\n\n    ~~~ ruby\n      def register\n        case ecs_compatibility\n        when :disabled\n          # ...\n",
                      "markdown": "`    - ECS Compatibility being disabled\n    - helpful failure when an unsupported version is requested\n\n    ~~~ ruby\n      def register\n        case ecs_compatibility\n        when :disabled\n          # ...\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-logstash-mixin-ecs_compatibility_support-1.3.0-r3.apk/ruby3.2-logstash-mixin-ecs_compatibility_support-1.3.0-r3/usr/lib/ruby/gems/3.2.0/gems/logstash-mixin-ecs_compatibility_support-1.3.0-x86_64-linux-gnu/README."
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 7,
                  "endLine": 27,
                  "snippet": {
                    "text": "2. In your plugin code, require this library and include it into your plugin class\n   that already inherits `LogStash::Plugin`:\n\n    ~~~ ruby\n    require 'logstash/plugin_mixins/ecs_compatibility_support'\n\n    class LogStash::Inputs::Foo < Logstash::Inputs::Base\n      include LogStash::PluginMixins::ECSCompatibilitySupport\n",
                    "rendered": {
                      "text": "2. In your plugin code, require this library and include it into your plugin class\n   that already inherits `LogStash::Plugin`:\n\n    ~~~ ruby\n    require 'logstash/plugin_mixins/ecs_compatibility_support'\n\n    class LogStash::Inputs::Foo < Logstash::Inputs::Base\n      include LogStash::PluginMixins::ECSCompatibilitySupport\n",
                      "markdown": "`2. In your plugin code, require this library and include it into your plugin class\n   that already inherits `LogStash::Plugin`:\n\n    ~~~ ruby\n    require 'logstash/plugin_mixins/ecs_compatibility_support'\n\n    class LogStash::Inputs::Foo < Logstash::Inputs::Base\n      include LogStash::PluginMixins::ECSCompatibilitySupport\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/ruby3.2-logstash-mixin-ecs_compatibility_support-1.3.0-r3.apk/ruby3.2-logstash-mixin-ecs_compatibility_support-1.3.0-r3/usr/lib/ruby/gems/3.2.0/gems/logstash-mixin-ecs_compatibility_support-1.3.0-x86_64-linux-gnu/README."
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 7,
                  "endLine": 16,
                  "snippet": {
                    "text": "\n1. Add version `~>1.0` of this gem as a runtime dependency of your Logstash plugin's `gemspec`:\n\n    ~~~ ruby\n    Gem::Specification.new do |s|\n      # ...\n\n      s.add_runtime_dependency 'logstash-mixin-ecs_compatibility_support', '~>1.0'\n",
                    "rendered": {
                      "text": "\n1. Add version `~>1.0` of this gem as a runtime dependency of your Logstash plugin's `gemspec`:\n\n    ~~~ ruby\n    Gem::Specification.new do |s|\n      # ...\n\n      s.add_runtime_dependency 'logstash-mixin-ecs_compatibility_support', '~>1.0'\n",
                      "markdown": "`\n1. Add version `~>1.0` of this gem as a runtime dependency of your Logstash plugin's `gemspec`:\n\n    ~~~ ruby\n    Gem::Specification.new do |s|\n      # ...\n\n      s.add_runtime_dependency 'logstash-mixin-ecs_compatibility_support', '~>1.0'\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        }
      ],
      "columnKind": "utf16CodeUnits"
    }
  ]
}