{
  "$schema": "https://schemastore.azurewebsites.net/schemas/json/sarif-2.1.0-rtm.6.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "oss-detect-backdoor",
          "organization": "Microsoft Corporation",
          "product": "OSSGadget (https://github.com/Microsoft/OSSGadget)",
          "version": "0.0.0+ed0e2cfe6a"
        }
      },
      "results": [
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-bcrypt-4.2.0-r0.apk/py3-bcrypt-4.2.0-r0/usr/lib/python3.12/site-packages/bcrypt/__init__.py"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 38,
                  "endLine": 4,
                  "snippet": {
                    "text": "# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n# http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n# http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n# http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-bcrypt-4.2.0-r0.apk/py3-bcrypt-4.2.0-r0/usr/lib/python3.12/site-packages/bcrypt-4.2.0.dist-info/METADATA"
                },
                "region": {
                  "startLine": 295,
                  "startColumn": 44,
                  "endLine": 295,
                  "endColumn": 52,
                  "snippet": {
                    "text": "\n    >>> password = b\"an incredibly long password\" * 10\n    >>> hashed = bcrypt.hashpw(\n    ...     base64.b64encode(hashlib.sha256(password).digest()),\n    ...     bcrypt.gensalt()\n    ... )\n\n",
                    "rendered": {
                      "text": "\n    >>> password = b\"an incredibly long password\" * 10\n    >>> hashed = bcrypt.hashpw(\n    ...     base64.b64encode(hashlib.sha256(password).digest()),\n    ...     bcrypt.gensalt()\n    ... )\n\n",
                      "markdown": "`\n    >>> password = b\"an incredibly long password\" * 10\n    >>> hashed = bcrypt.hashpw(\n    ...     base64.b64encode(hashlib.sha256(password).digest()),\n    ...     bcrypt.gensalt()\n    ... )\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-bcrypt-4.2.0-r0.apk/py3-bcrypt-4.2.0-r0/usr/lib/python3.12/site-packages/bcrypt-4.2.0.dist-info/METADATA"
                },
                "region": {
                  "startLine": 293,
                  "startColumn": 40,
                  "endLine": 293,
                  "endColumn": 48,
                  "snippet": {
                    "text": "\n.. code:: pycon\n\n    >>> password = b\"an incredibly long password\" * 10\n    >>> hashed = bcrypt.hashpw(\n    ...     base64.b64encode(hashlib.sha256(password).digest()),\n    ...     bcrypt.gensalt()\n",
                    "rendered": {
                      "text": "\n.. code:: pycon\n\n    >>> password = b\"an incredibly long password\" * 10\n    >>> hashed = bcrypt.hashpw(\n    ...     base64.b64encode(hashlib.sha256(password).digest()),\n    ...     bcrypt.gensalt()\n",
                      "markdown": "`\n.. code:: pycon\n\n    >>> password = b\"an incredibly long password\" * 10\n    >>> hashed = bcrypt.hashpw(\n    ...     base64.b64encode(hashlib.sha256(password).digest()),\n    ...     bcrypt.gensalt()\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-bcrypt-4.2.0-r0.apk/py3-bcrypt-4.2.0-r0/usr/lib/python3.12/site-packages/bcrypt-4.2.0.dist-info/METADATA"
                },
                "region": {
                  "startLine": 293,
                  "startColumn": 8,
                  "endLine": 293,
                  "endColumn": 16,
                  "snippet": {
                    "text": "\n.. code:: pycon\n\n    >>> password = b\"an incredibly long password\" * 10\n    >>> hashed = bcrypt.hashpw(\n    ...     base64.b64encode(hashlib.sha256(password).digest()),\n    ...     bcrypt.gensalt()\n",
                    "rendered": {
                      "text": "\n.. code:: pycon\n\n    >>> password = b\"an incredibly long password\" * 10\n    >>> hashed = bcrypt.hashpw(\n    ...     base64.b64encode(hashlib.sha256(password).digest()),\n    ...     bcrypt.gensalt()\n",
                      "markdown": "`\n.. code:: pycon\n\n    >>> password = b\"an incredibly long password\" * 10\n    >>> hashed = bcrypt.hashpw(\n    ...     base64.b64encode(hashlib.sha256(password).digest()),\n    ...     bcrypt.gensalt()\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-bcrypt-4.2.0-r0.apk/py3-bcrypt-4.2.0-r0/usr/lib/python3.12/site-packages/bcrypt-4.2.0.dist-info/METADATA"
                },
                "region": {
                  "startLine": 287,
                  "endLine": 287,
                  "endColumn": 8,
                  "snippet": {
                    "text": "\nThe bcrypt algorithm only handles passwords up to 72 characters, any characters\nbeyond that are ignored. To work around this, a common approach is to hash a\npassword with a cryptographic hash (such as ``sha256``) and then base64\nencode it to prevent NULL byte problems before hashing the result with\n``bcrypt``:\n\n",
                    "rendered": {
                      "text": "\nThe bcrypt algorithm only handles passwords up to 72 characters, any characters\nbeyond that are ignored. To work around this, a common approach is to hash a\npassword with a cryptographic hash (such as ``sha256``) and then base64\nencode it to prevent NULL byte problems before hashing the result with\n``bcrypt``:\n\n",
                      "markdown": "`\nThe bcrypt algorithm only handles passwords up to 72 characters, any characters\nbeyond that are ignored. To work around this, a common approach is to hash a\npassword with a cryptographic hash (such as ``sha256``) and then base64\nencode it to prevent NULL byte problems before hashing the result with\n``bcrypt``:\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-bcrypt-4.2.0-r0.apk/py3-bcrypt-4.2.0-r0/usr/lib/python3.12/site-packages/bcrypt-4.2.0.dist-info/METADATA"
                },
                "region": {
                  "startLine": 285,
                  "startColumn": 34,
                  "endLine": 285,
                  "endColumn": 42,
                  "snippet": {
                    "text": "Maximum Password Length\n~~~~~~~~~~~~~~~~~~~~~~~\n\nThe bcrypt algorithm only handles passwords up to 72 characters, any characters\nbeyond that are ignored. To work around this, a common approach is to hash a\npassword with a cryptographic hash (such as ``sha256``) and then base64\nencode it to prevent NULL byte problems before hashing the result with\n",
                    "rendered": {
                      "text": "Maximum Password Length\n~~~~~~~~~~~~~~~~~~~~~~~\n\nThe bcrypt algorithm only handles passwords up to 72 characters, any characters\nbeyond that are ignored. To work around this, a common approach is to hash a\npassword with a cryptographic hash (such as ``sha256``) and then base64\nencode it to prevent NULL byte problems before hashing the result with\n",
                      "markdown": "`Maximum Password Length\n~~~~~~~~~~~~~~~~~~~~~~~\n\nThe bcrypt algorithm only handles passwords up to 72 characters, any characters\nbeyond that are ignored. To work around this, a common approach is to hash a\npassword with a cryptographic hash (such as ``sha256``) and then base64\nencode it to prevent NULL byte problems before hashing the result with\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-bcrypt-4.2.0-r0.apk/py3-bcrypt-4.2.0-r0/usr/lib/python3.12/site-packages/bcrypt-4.2.0.dist-info/METADATA"
                },
                "region": {
                  "startLine": 282,
                  "startColumn": 8,
                  "endLine": 282,
                  "endColumn": 16,
                  "snippet": {
                    "text": "\nAs of 3.0.0 the ``$2y$`` prefix is still supported in ``hashpw`` but deprecated.\n\nMaximum Password Length\n~~~~~~~~~~~~~~~~~~~~~~~\n\nThe bcrypt algorithm only handles passwords up to 72 characters, any characters\n",
                    "rendered": {
                      "text": "\nAs of 3.0.0 the ``$2y$`` prefix is still supported in ``hashpw`` but deprecated.\n\nMaximum Password Length\n~~~~~~~~~~~~~~~~~~~~~~~\n\nThe bcrypt algorithm only handles passwords up to 72 characters, any characters\n",
                      "markdown": "`\nAs of 3.0.0 the ``$2y$`` prefix is still supported in ``hashpw`` but deprecated.\n\nMaximum Password Length\n~~~~~~~~~~~~~~~~~~~~~~~\n\nThe bcrypt algorithm only handles passwords up to 72 characters, any characters\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-bcrypt-4.2.0-r0.apk/py3-bcrypt-4.2.0-r0/usr/lib/python3.12/site-packages/bcrypt-4.2.0.dist-info/METADATA"
                },
                "region": {
                  "startLine": 267,
                  "startColumn": 26,
                  "endLine": 267,
                  "endColumn": 34,
                  "snippet": {
                    "text": "    >>> hashed = bcrypt.hashpw(password, bcrypt.gensalt(14))\n    >>> # Check that a unhashed password matches one that has previously been\n    >>> #   hashed\n    >>> if bcrypt.checkpw(password, hashed):\n    ...     print(\"It Matches!\")\n    ... else:\n    ...     print(\"It Does not Match :(\")\n",
                    "rendered": {
                      "text": "    >>> hashed = bcrypt.hashpw(password, bcrypt.gensalt(14))\n    >>> # Check that a unhashed password matches one that has previously been\n    >>> #   hashed\n    >>> if bcrypt.checkpw(password, hashed):\n    ...     print(\"It Matches!\")\n    ... else:\n    ...     print(\"It Does not Match :(\")\n",
                      "markdown": "`    >>> hashed = bcrypt.hashpw(password, bcrypt.gensalt(14))\n    >>> # Check that a unhashed password matches one that has previously been\n    >>> #   hashed\n    >>> if bcrypt.checkpw(password, hashed):\n    ...     print(\"It Matches!\")\n    ... else:\n    ...     print(\"It Does not Match :(\")\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-bcrypt-4.2.0-r0.apk/py3-bcrypt-4.2.0-r0/usr/lib/python3.12/site-packages/bcrypt-4.2.0.dist-info/METADATA"
                },
                "region": {
                  "startLine": 265,
                  "startColumn": 32,
                  "endLine": 265,
                  "endColumn": 40,
                  "snippet": {
                    "text": "    >>> password = b\"super secret password\"\n    >>> # Hash a password for the first time, with a certain number of rounds\n    >>> hashed = bcrypt.hashpw(password, bcrypt.gensalt(14))\n    >>> # Check that a unhashed password matches one that has previously been\n    >>> #   hashed\n    >>> if bcrypt.checkpw(password, hashed):\n    ...     print(\"It Matches!\")\n",
                    "rendered": {
                      "text": "    >>> password = b\"super secret password\"\n    >>> # Hash a password for the first time, with a certain number of rounds\n    >>> hashed = bcrypt.hashpw(password, bcrypt.gensalt(14))\n    >>> # Check that a unhashed password matches one that has previously been\n    >>> #   hashed\n    >>> if bcrypt.checkpw(password, hashed):\n    ...     print(\"It Matches!\")\n",
                      "markdown": "`    >>> password = b\"super secret password\"\n    >>> # Hash a password for the first time, with a certain number of rounds\n    >>> hashed = bcrypt.hashpw(password, bcrypt.gensalt(14))\n    >>> # Check that a unhashed password matches one that has previously been\n    >>> #   hashed\n    >>> if bcrypt.checkpw(password, hashed):\n    ...     print(\"It Matches!\")\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-bcrypt-4.2.0-r0.apk/py3-bcrypt-4.2.0-r0/usr/lib/python3.12/site-packages/bcrypt-4.2.0.dist-info/METADATA"
                },
                "region": {
                  "startLine": 264,
                  "startColumn": 31,
                  "endLine": 264,
                  "endColumn": 39,
                  "snippet": {
                    "text": "    >>> import bcrypt\n    >>> password = b\"super secret password\"\n    >>> # Hash a password for the first time, with a certain number of rounds\n    >>> hashed = bcrypt.hashpw(password, bcrypt.gensalt(14))\n    >>> # Check that a unhashed password matches one that has previously been\n    >>> #   hashed\n    >>> if bcrypt.checkpw(password, hashed):\n",
                    "rendered": {
                      "text": "    >>> import bcrypt\n    >>> password = b\"super secret password\"\n    >>> # Hash a password for the first time, with a certain number of rounds\n    >>> hashed = bcrypt.hashpw(password, bcrypt.gensalt(14))\n    >>> # Check that a unhashed password matches one that has previously been\n    >>> #   hashed\n    >>> if bcrypt.checkpw(password, hashed):\n",
                      "markdown": "`    >>> import bcrypt\n    >>> password = b\"super secret password\"\n    >>> # Hash a password for the first time, with a certain number of rounds\n    >>> hashed = bcrypt.hashpw(password, bcrypt.gensalt(14))\n    >>> # Check that a unhashed password matches one that has previously been\n    >>> #   hashed\n    >>> if bcrypt.checkpw(password, hashed):\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-bcrypt-4.2.0-r0.apk/py3-bcrypt-4.2.0-r0/usr/lib/python3.12/site-packages/bcrypt-4.2.0.dist-info/METADATA"
                },
                "region": {
                  "startLine": 263,
                  "startColumn": 17,
                  "endLine": 263,
                  "endColumn": 25,
                  "snippet": {
                    "text": "\n    >>> import bcrypt\n    >>> password = b\"super secret password\"\n    >>> # Hash a password for the first time, with a certain number of rounds\n    >>> hashed = bcrypt.hashpw(password, bcrypt.gensalt(14))\n    >>> # Check that a unhashed password matches one that has previously been\n    >>> #   hashed\n",
                    "rendered": {
                      "text": "\n    >>> import bcrypt\n    >>> password = b\"super secret password\"\n    >>> # Hash a password for the first time, with a certain number of rounds\n    >>> hashed = bcrypt.hashpw(password, bcrypt.gensalt(14))\n    >>> # Check that a unhashed password matches one that has previously been\n    >>> #   hashed\n",
                      "markdown": "`\n    >>> import bcrypt\n    >>> password = b\"super secret password\"\n    >>> # Hash a password for the first time, with a certain number of rounds\n    >>> hashed = bcrypt.hashpw(password, bcrypt.gensalt(14))\n    >>> # Check that a unhashed password matches one that has previously been\n    >>> #   hashed\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-bcrypt-4.2.0-r0.apk/py3-bcrypt-4.2.0-r0/usr/lib/python3.12/site-packages/bcrypt-4.2.0.dist-info/METADATA"
                },
                "region": {
                  "startLine": 262,
                  "startColumn": 34,
                  "endLine": 262,
                  "endColumn": 42,
                  "snippet": {
                    "text": ".. code:: pycon\n\n    >>> import bcrypt\n    >>> password = b\"super secret password\"\n    >>> # Hash a password for the first time, with a certain number of rounds\n    >>> hashed = bcrypt.hashpw(password, bcrypt.gensalt(14))\n    >>> # Check that a unhashed password matches one that has previously been\n",
                    "rendered": {
                      "text": ".. code:: pycon\n\n    >>> import bcrypt\n    >>> password = b\"super secret password\"\n    >>> # Hash a password for the first time, with a certain number of rounds\n    >>> hashed = bcrypt.hashpw(password, bcrypt.gensalt(14))\n    >>> # Check that a unhashed password matches one that has previously been\n",
                      "markdown": "`.. code:: pycon\n\n    >>> import bcrypt\n    >>> password = b\"super secret password\"\n    >>> # Hash a password for the first time, with a certain number of rounds\n    >>> hashed = bcrypt.hashpw(password, bcrypt.gensalt(14))\n    >>> # Check that a unhashed password matches one that has previously been\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-bcrypt-4.2.0-r0.apk/py3-bcrypt-4.2.0-r0/usr/lib/python3.12/site-packages/bcrypt-4.2.0.dist-info/METADATA"
                },
                "region": {
                  "startLine": 262,
                  "startColumn": 8,
                  "endLine": 262,
                  "endColumn": 16,
                  "snippet": {
                    "text": ".. code:: pycon\n\n    >>> import bcrypt\n    >>> password = b\"super secret password\"\n    >>> # Hash a password for the first time, with a certain number of rounds\n    >>> hashed = bcrypt.hashpw(password, bcrypt.gensalt(14))\n    >>> # Check that a unhashed password matches one that has previously been\n",
                    "rendered": {
                      "text": ".. code:: pycon\n\n    >>> import bcrypt\n    >>> password = b\"super secret password\"\n    >>> # Hash a password for the first time, with a certain number of rounds\n    >>> hashed = bcrypt.hashpw(password, bcrypt.gensalt(14))\n    >>> # Check that a unhashed password matches one that has previously been\n",
                      "markdown": "`.. code:: pycon\n\n    >>> import bcrypt\n    >>> password = b\"super secret password\"\n    >>> # Hash a password for the first time, with a certain number of rounds\n    >>> hashed = bcrypt.hashpw(password, bcrypt.gensalt(14))\n    >>> # Check that a unhashed password matches one that has previously been\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-bcrypt-4.2.0-r0.apk/py3-bcrypt-4.2.0-r0/usr/lib/python3.12/site-packages/bcrypt-4.2.0.dist-info/METADATA"
                },
                "region": {
                  "startLine": 247,
                  "startColumn": 23,
                  "endLine": 247,
                  "endColumn": 31,
                  "snippet": {
                    "text": "\n    >>> import bcrypt\n    >>> key = bcrypt.kdf(\n    ...     password=b'password',\n    ...     salt=b'salt',\n    ...     desired_key_bytes=32,\n    ...     rounds=100)\n",
                    "rendered": {
                      "text": "\n    >>> import bcrypt\n    >>> key = bcrypt.kdf(\n    ...     password=b'password',\n    ...     salt=b'salt',\n    ...     desired_key_bytes=32,\n    ...     rounds=100)\n",
                      "markdown": "`\n    >>> import bcrypt\n    >>> key = bcrypt.kdf(\n    ...     password=b'password',\n    ...     salt=b'salt',\n    ...     desired_key_bytes=32,\n    ...     rounds=100)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-bcrypt-4.2.0-r0.apk/py3-bcrypt-4.2.0-r0/usr/lib/python3.12/site-packages/bcrypt-4.2.0.dist-info/METADATA"
                },
                "region": {
                  "startLine": 247,
                  "startColumn": 12,
                  "endLine": 247,
                  "endColumn": 20,
                  "snippet": {
                    "text": "\n    >>> import bcrypt\n    >>> key = bcrypt.kdf(\n    ...     password=b'password',\n    ...     salt=b'salt',\n    ...     desired_key_bytes=32,\n    ...     rounds=100)\n",
                    "rendered": {
                      "text": "\n    >>> import bcrypt\n    >>> key = bcrypt.kdf(\n    ...     password=b'password',\n    ...     salt=b'salt',\n    ...     desired_key_bytes=32,\n    ...     rounds=100)\n",
                      "markdown": "`\n    >>> import bcrypt\n    >>> key = bcrypt.kdf(\n    ...     password=b'password',\n    ...     salt=b'salt',\n    ...     desired_key_bytes=32,\n    ...     rounds=100)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-bcrypt-4.2.0-r0.apk/py3-bcrypt-4.2.0-r0/usr/lib/python3.12/site-packages/bcrypt-4.2.0.dist-info/METADATA"
                },
                "region": {
                  "startLine": 232,
                  "startColumn": 26,
                  "endLine": 232,
                  "endColumn": 34,
                  "snippet": {
                    "text": "    >>> hashed = bcrypt.hashpw(password, bcrypt.gensalt())\n    >>> # Check that an unhashed password matches one that has previously been\n    >>> # hashed\n    >>> if bcrypt.checkpw(password, hashed):\n    ...     print(\"It Matches!\")\n    ... else:\n    ...     print(\"It Does not Match :(\")\n",
                    "rendered": {
                      "text": "    >>> hashed = bcrypt.hashpw(password, bcrypt.gensalt())\n    >>> # Check that an unhashed password matches one that has previously been\n    >>> # hashed\n    >>> if bcrypt.checkpw(password, hashed):\n    ...     print(\"It Matches!\")\n    ... else:\n    ...     print(\"It Does not Match :(\")\n",
                      "markdown": "`    >>> hashed = bcrypt.hashpw(password, bcrypt.gensalt())\n    >>> # Check that an unhashed password matches one that has previously been\n    >>> # hashed\n    >>> if bcrypt.checkpw(password, hashed):\n    ...     print(\"It Matches!\")\n    ... else:\n    ...     print(\"It Does not Match :(\")\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-bcrypt-4.2.0-r0.apk/py3-bcrypt-4.2.0-r0/usr/lib/python3.12/site-packages/bcrypt-4.2.0.dist-info/METADATA"
                },
                "region": {
                  "startLine": 230,
                  "startColumn": 33,
                  "endLine": 230,
                  "endColumn": 41,
                  "snippet": {
                    "text": "    >>> password = b\"super secret password\"\n    >>> # Hash a password for the first time, with a randomly-generated salt\n    >>> hashed = bcrypt.hashpw(password, bcrypt.gensalt())\n    >>> # Check that an unhashed password matches one that has previously been\n    >>> # hashed\n    >>> if bcrypt.checkpw(password, hashed):\n    ...     print(\"It Matches!\")\n",
                    "rendered": {
                      "text": "    >>> password = b\"super secret password\"\n    >>> # Hash a password for the first time, with a randomly-generated salt\n    >>> hashed = bcrypt.hashpw(password, bcrypt.gensalt())\n    >>> # Check that an unhashed password matches one that has previously been\n    >>> # hashed\n    >>> if bcrypt.checkpw(password, hashed):\n    ...     print(\"It Matches!\")\n",
                      "markdown": "`    >>> password = b\"super secret password\"\n    >>> # Hash a password for the first time, with a randomly-generated salt\n    >>> hashed = bcrypt.hashpw(password, bcrypt.gensalt())\n    >>> # Check that an unhashed password matches one that has previously been\n    >>> # hashed\n    >>> if bcrypt.checkpw(password, hashed):\n    ...     print(\"It Matches!\")\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-bcrypt-4.2.0-r0.apk/py3-bcrypt-4.2.0-r0/usr/lib/python3.12/site-packages/bcrypt-4.2.0.dist-info/METADATA"
                },
                "region": {
                  "startLine": 229,
                  "startColumn": 31,
                  "endLine": 229,
                  "endColumn": 39,
                  "snippet": {
                    "text": "    >>> import bcrypt\n    >>> password = b\"super secret password\"\n    >>> # Hash a password for the first time, with a randomly-generated salt\n    >>> hashed = bcrypt.hashpw(password, bcrypt.gensalt())\n    >>> # Check that an unhashed password matches one that has previously been\n    >>> # hashed\n    >>> if bcrypt.checkpw(password, hashed):\n",
                    "rendered": {
                      "text": "    >>> import bcrypt\n    >>> password = b\"super secret password\"\n    >>> # Hash a password for the first time, with a randomly-generated salt\n    >>> hashed = bcrypt.hashpw(password, bcrypt.gensalt())\n    >>> # Check that an unhashed password matches one that has previously been\n    >>> # hashed\n    >>> if bcrypt.checkpw(password, hashed):\n",
                      "markdown": "`    >>> import bcrypt\n    >>> password = b\"super secret password\"\n    >>> # Hash a password for the first time, with a randomly-generated salt\n    >>> hashed = bcrypt.hashpw(password, bcrypt.gensalt())\n    >>> # Check that an unhashed password matches one that has previously been\n    >>> # hashed\n    >>> if bcrypt.checkpw(password, hashed):\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-bcrypt-4.2.0-r0.apk/py3-bcrypt-4.2.0-r0/usr/lib/python3.12/site-packages/bcrypt-4.2.0.dist-info/METADATA"
                },
                "region": {
                  "startLine": 228,
                  "startColumn": 17,
                  "endLine": 228,
                  "endColumn": 25,
                  "snippet": {
                    "text": "\n    >>> import bcrypt\n    >>> password = b\"super secret password\"\n    >>> # Hash a password for the first time, with a randomly-generated salt\n    >>> hashed = bcrypt.hashpw(password, bcrypt.gensalt())\n    >>> # Check that an unhashed password matches one that has previously been\n    >>> # hashed\n",
                    "rendered": {
                      "text": "\n    >>> import bcrypt\n    >>> password = b\"super secret password\"\n    >>> # Hash a password for the first time, with a randomly-generated salt\n    >>> hashed = bcrypt.hashpw(password, bcrypt.gensalt())\n    >>> # Check that an unhashed password matches one that has previously been\n    >>> # hashed\n",
                      "markdown": "`\n    >>> import bcrypt\n    >>> password = b\"super secret password\"\n    >>> # Hash a password for the first time, with a randomly-generated salt\n    >>> hashed = bcrypt.hashpw(password, bcrypt.gensalt())\n    >>> # Check that an unhashed password matches one that has previously been\n    >>> # hashed\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-bcrypt-4.2.0-r0.apk/py3-bcrypt-4.2.0-r0/usr/lib/python3.12/site-packages/bcrypt-4.2.0.dist-info/METADATA"
                },
                "region": {
                  "startLine": 227,
                  "startColumn": 34,
                  "endLine": 227,
                  "endColumn": 42,
                  "snippet": {
                    "text": ".. code:: pycon\n\n    >>> import bcrypt\n    >>> password = b\"super secret password\"\n    >>> # Hash a password for the first time, with a randomly-generated salt\n    >>> hashed = bcrypt.hashpw(password, bcrypt.gensalt())\n    >>> # Check that an unhashed password matches one that has previously been\n",
                    "rendered": {
                      "text": ".. code:: pycon\n\n    >>> import bcrypt\n    >>> password = b\"super secret password\"\n    >>> # Hash a password for the first time, with a randomly-generated salt\n    >>> hashed = bcrypt.hashpw(password, bcrypt.gensalt())\n    >>> # Check that an unhashed password matches one that has previously been\n",
                      "markdown": "`.. code:: pycon\n\n    >>> import bcrypt\n    >>> password = b\"super secret password\"\n    >>> # Hash a password for the first time, with a randomly-generated salt\n    >>> hashed = bcrypt.hashpw(password, bcrypt.gensalt())\n    >>> # Check that an unhashed password matches one that has previously been\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-bcrypt-4.2.0-r0.apk/py3-bcrypt-4.2.0-r0/usr/lib/python3.12/site-packages/bcrypt-4.2.0.dist-info/METADATA"
                },
                "region": {
                  "startLine": 227,
                  "startColumn": 8,
                  "endLine": 227,
                  "endColumn": 16,
                  "snippet": {
                    "text": ".. code:: pycon\n\n    >>> import bcrypt\n    >>> password = b\"super secret password\"\n    >>> # Hash a password for the first time, with a randomly-generated salt\n    >>> hashed = bcrypt.hashpw(password, bcrypt.gensalt())\n    >>> # Check that an unhashed password matches one that has previously been\n",
                    "rendered": {
                      "text": ".. code:: pycon\n\n    >>> import bcrypt\n    >>> password = b\"super secret password\"\n    >>> # Hash a password for the first time, with a randomly-generated salt\n    >>> hashed = bcrypt.hashpw(password, bcrypt.gensalt())\n    >>> # Check that an unhashed password matches one that has previously been\n",
                      "markdown": "`.. code:: pycon\n\n    >>> import bcrypt\n    >>> password = b\"super secret password\"\n    >>> # Hash a password for the first time, with a randomly-generated salt\n    >>> hashed = bcrypt.hashpw(password, bcrypt.gensalt())\n    >>> # Check that an unhashed password matches one that has previously been\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-bcrypt-4.2.0-r0.apk/py3-bcrypt-4.2.0-r0/usr/lib/python3.12/site-packages/bcrypt-4.2.0.dist-info/METADATA"
                },
                "region": {
                  "startLine": 222,
                  "endLine": 222,
                  "endColumn": 8,
                  "snippet": {
                    "text": "~~~~~~~~~~~~~~~~\n\nHashing and then later checking that a password matches the previous hashed\npassword is very simple:\n\n.. code:: pycon\n\n",
                    "rendered": {
                      "text": "~~~~~~~~~~~~~~~~\n\nHashing and then later checking that a password matches the previous hashed\npassword is very simple:\n\n.. code:: pycon\n\n",
                      "markdown": "`~~~~~~~~~~~~~~~~\n\nHashing and then later checking that a password matches the previous hashed\npassword is very simple:\n\n.. code:: pycon\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-bcrypt-4.2.0-r0.apk/py3-bcrypt-4.2.0-r0/usr/lib/python3.12/site-packages/bcrypt-4.2.0.dist-info/METADATA"
                },
                "region": {
                  "startLine": 221,
                  "startColumn": 39,
                  "endLine": 221,
                  "endColumn": 47,
                  "snippet": {
                    "text": "Password Hashing\n~~~~~~~~~~~~~~~~\n\nHashing and then later checking that a password matches the previous hashed\npassword is very simple:\n\n.. code:: pycon\n",
                    "rendered": {
                      "text": "Password Hashing\n~~~~~~~~~~~~~~~~\n\nHashing and then later checking that a password matches the previous hashed\npassword is very simple:\n\n.. code:: pycon\n",
                      "markdown": "`Password Hashing\n~~~~~~~~~~~~~~~~\n\nHashing and then later checking that a password matches the previous hashed\npassword is very simple:\n\n.. code:: pycon\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-bcrypt-4.2.0-r0.apk/py3-bcrypt-4.2.0-r0/usr/lib/python3.12/site-packages/bcrypt-4.2.0.dist-info/METADATA"
                },
                "region": {
                  "startLine": 218,
                  "endLine": 218,
                  "endColumn": 8,
                  "snippet": {
                    "text": "Usage\n-----\n\nPassword Hashing\n~~~~~~~~~~~~~~~~\n\nHashing and then later checking that a password matches the previous hashed\n",
                    "rendered": {
                      "text": "Usage\n-----\n\nPassword Hashing\n~~~~~~~~~~~~~~~~\n\nHashing and then later checking that a password matches the previous hashed\n",
                      "markdown": "`Usage\n-----\n\nPassword Hashing\n~~~~~~~~~~~~~~~~\n\nHashing and then later checking that a password matches the previous hashed\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-bcrypt-4.2.0-r0.apk/py3-bcrypt-4.2.0-r0/usr/lib/python3.12/site-packages/bcrypt-4.2.0.dist-info/METADATA"
                },
                "region": {
                  "startLine": 199,
                  "startColumn": 70,
                  "endLine": 199,
                  "endColumn": 78,
                  "snippet": {
                    "text": "\n3.1.0\n-----\n* Added support for ``checkpw``, a convenience method for verifying a password.\n* Ensure that you get a ``$2y$`` hash when you input a ``$2y$`` salt.\n* Fixed a regression where ``$2a`` hashes were vulnerable to a wraparound bug.\n* Fixed compilation under Alpine Linux.\n",
                    "rendered": {
                      "text": "\n3.1.0\n-----\n* Added support for ``checkpw``, a convenience method for verifying a password.\n* Ensure that you get a ``$2y$`` hash when you input a ``$2y$`` salt.\n* Fixed a regression where ``$2a`` hashes were vulnerable to a wraparound bug.\n* Fixed compilation under Alpine Linux.\n",
                      "markdown": "`\n3.1.0\n-----\n* Added support for ``checkpw``, a convenience method for verifying a password.\n* Ensure that you get a ``$2y$`` hash when you input a ``$2y$`` salt.\n* Fixed a regression where ``$2a`` hashes were vulnerable to a wraparound bug.\n* Fixed compilation under Alpine Linux.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-bcrypt-4.2.0-r0.apk/py3-bcrypt-4.2.0-r0/usr/lib/python3.12/site-packages/bcrypt-4.2.0.dist-info/METADATA"
                },
                "region": {
                  "startLine": 76,
                  "startColumn": 46,
                  "endLine": 76,
                  "endColumn": 54,
                  "snippet": {
                    "text": "Alternatives\n============\n\nWhile bcrypt remains an acceptable choice for password storage, depending on your specific use case you may also want to consider using scrypt (either via `standard library`_ or `cryptography`_) or argon2id via `argon2_cffi`_.\n\nChangelog\n=========\n",
                    "rendered": {
                      "text": "Alternatives\n============\n\nWhile bcrypt remains an acceptable choice for password storage, depending on your specific use case you may also want to consider using scrypt (either via `standard library`_ or `cryptography`_) or argon2id via `argon2_cffi`_.\n\nChangelog\n=========\n",
                      "markdown": "`Alternatives\n============\n\nWhile bcrypt remains an acceptable choice for password storage, depending on your specific use case you may also want to consider using scrypt (either via `standard library`_ or `cryptography`_) or argon2id via `argon2_cffi`_.\n\nChangelog\n=========\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-bcrypt-4.2.0-r0.apk/py3-bcrypt-4.2.0-r0/usr/lib/python3.12/site-packages/bcrypt-4.2.0.dist-info/METADATA"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 11,
                  "endLine": 38,
                  "endColumn": 19,
                  "snippet": {
                    "text": ".. image:: https://github.com/pyca/bcrypt/workflows/CI/badge.svg?branch=main\n    :target: https://github.com/pyca/bcrypt/actions?query=workflow%3ACI+branch%3Amain\n\nAcceptable password hashing for your software and your servers (but you should\nreally use argon2id or scrypt)\n\n\n",
                    "rendered": {
                      "text": ".. image:: https://github.com/pyca/bcrypt/workflows/CI/badge.svg?branch=main\n    :target: https://github.com/pyca/bcrypt/actions?query=workflow%3ACI+branch%3Amain\n\nAcceptable password hashing for your software and your servers (but you should\nreally use argon2id or scrypt)\n\n\n",
                      "markdown": "`.. image:: https://github.com/pyca/bcrypt/workflows/CI/badge.svg?branch=main\n    :target: https://github.com/pyca/bcrypt/actions?query=workflow%3ACI+branch%3Amain\n\nAcceptable password hashing for your software and your servers (but you should\nreally use argon2id or scrypt)\n\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-bcrypt-4.2.0-r0.apk/py3-bcrypt-4.2.0-r0/usr/lib/python3.12/site-packages/bcrypt-4.2.0.dist-info/METADATA"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 16,
                  "endLine": 4,
                  "endColumn": 24,
                  "snippet": {
                    "text": "Metadata-Version: 2.1\nName: bcrypt\nVersion: 4.2.0\nSummary: Modern password hashing for your software and your servers\nAuthor-email: The Python Cryptographic Authority developers <cryptography-dev@python.org>\nLicense: Apache-2.0\nProject-URL: homepage, https://github.com/pyca/bcrypt/\n",
                    "rendered": {
                      "text": "Metadata-Version: 2.1\nName: bcrypt\nVersion: 4.2.0\nSummary: Modern password hashing for your software and your servers\nAuthor-email: The Python Cryptographic Authority developers <cryptography-dev@python.org>\nLicense: Apache-2.0\nProject-URL: homepage, https://github.com/pyca/bcrypt/\n",
                      "markdown": "`Metadata-Version: 2.1\nName: bcrypt\nVersion: 4.2.0\nSummary: Modern password hashing for your software and your servers\nAuthor-email: The Python Cryptographic Authority developers <cryptography-dev@python.org>\nLicense: Apache-2.0\nProject-URL: homepage, https://github.com/pyca/bcrypt/\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-bcrypt-4.2.0-r0.apk/py3-bcrypt-4.2.0-r0/usr/lib/python3.12/site-packages/bcrypt-4.2.0.dist-info/METADATA"
                },
                "region": {
                  "startLine": 295,
                  "startColumn": 12,
                  "endLine": 295,
                  "endColumn": 18,
                  "snippet": {
                    "text": "\n    >>> password = b\"an incredibly long password\" * 10\n    >>> hashed = bcrypt.hashpw(\n    ...     base64.b64encode(hashlib.sha256(password).digest()),\n    ...     bcrypt.gensalt()\n    ... )\n\n",
                    "rendered": {
                      "text": "\n    >>> password = b\"an incredibly long password\" * 10\n    >>> hashed = bcrypt.hashpw(\n    ...     base64.b64encode(hashlib.sha256(password).digest()),\n    ...     bcrypt.gensalt()\n    ... )\n\n",
                      "markdown": "`\n    >>> password = b\"an incredibly long password\" * 10\n    >>> hashed = bcrypt.hashpw(\n    ...     base64.b64encode(hashlib.sha256(password).digest()),\n    ...     bcrypt.gensalt()\n    ... )\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-bcrypt-4.2.0-r0.apk/py3-bcrypt-4.2.0-r0/usr/lib/python3.12/site-packages/bcrypt-4.2.0.dist-info/METADATA"
                },
                "region": {
                  "startLine": 287,
                  "startColumn": 65,
                  "endLine": 287,
                  "endColumn": 71,
                  "snippet": {
                    "text": "\nThe bcrypt algorithm only handles passwords up to 72 characters, any characters\nbeyond that are ignored. To work around this, a common approach is to hash a\npassword with a cryptographic hash (such as ``sha256``) and then base64\nencode it to prevent NULL byte problems before hashing the result with\n``bcrypt``:\n\n",
                    "rendered": {
                      "text": "\nThe bcrypt algorithm only handles passwords up to 72 characters, any characters\nbeyond that are ignored. To work around this, a common approach is to hash a\npassword with a cryptographic hash (such as ``sha256``) and then base64\nencode it to prevent NULL byte problems before hashing the result with\n``bcrypt``:\n\n",
                      "markdown": "`\nThe bcrypt algorithm only handles passwords up to 72 characters, any characters\nbeyond that are ignored. To work around this, a common approach is to hash a\npassword with a cryptographic hash (such as ``sha256``) and then base64\nencode it to prevent NULL byte problems before hashing the result with\n``bcrypt``:\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-bcrypt-4.2.0-r0.apk/py3-bcrypt-4.2.0-r0/usr/lib/python3.12/site-packages/bcrypt-4.2.0.dist-info/METADATA"
                },
                "region": {
                  "startLine": 139,
                  "startColumn": 69,
                  "endLine": 140,
                  "snippet": {
                    "text": "-----\n\n* Added support for compilation on z/OS\n* The next release of ``bcrypt`` with be 4.0 and it will require Rust at\n  compile time, for users building from source. There will be no additional\n  requirement for users who are installing from wheels. Users on most\n  platforms will be able to obtain a wheel by making sure they have an up to\n  date ``pip``. The minimum supported Rust version will be 1.56.0.\n",
                    "rendered": {
                      "text": "-----\n\n* Added support for compilation on z/OS\n* The next release of ``bcrypt`` with be 4.0 and it will require Rust at\n  compile time, for users building from source. There will be no additional\n  requirement for users who are installing from wheels. Users on most\n  platforms will be able to obtain a wheel by making sure they have an up to\n  date ``pip``. The minimum supported Rust version will be 1.56.0.\n",
                      "markdown": "`-----\n\n* Added support for compilation on z/OS\n* The next release of ``bcrypt`` with be 4.0 and it will require Rust at\n  compile time, for users building from source. There will be no additional\n  requirement for users who are installing from wheels. Users on most\n  platforms will be able to obtain a wheel by making sure they have an up to\n  date ``pip``. The minimum supported Rust version will be 1.56.0.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-bcrypt-4.2.0-r0.apk/py3-bcrypt-4.2.0-r0/usr/lib/python3.12/site-packages/bcrypt-4.2.0.dist-info/METADATA"
                },
                "region": {
                  "startLine": 68,
                  "startColumn": 9,
                  "endLine": 69,
                  "snippet": {
                    "text": "\nFor Alpine, the following command will ensure that the required dependencies are installed:\n\n.. code:: bash\n\n    $ apk add --update musl-dev gcc cargo\n\n\n",
                    "rendered": {
                      "text": "\nFor Alpine, the following command will ensure that the required dependencies are installed:\n\n.. code:: bash\n\n    $ apk add --update musl-dev gcc cargo\n\n\n",
                      "markdown": "`\nFor Alpine, the following command will ensure that the required dependencies are installed:\n\n.. code:: bash\n\n    $ apk add --update musl-dev gcc cargo\n\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-bcrypt-4.2.0-r0.apk/py3-bcrypt-4.2.0-r0/usr/lib/python3.12/site-packages/bcrypt-4.2.0.dist-info/METADATA"
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 9,
                  "endLine": 63,
                  "snippet": {
                    "text": "\nFor Fedora and RHEL-derivatives, the following command will ensure that the required dependencies are installed:\n\n.. code:: bash\n\n    $ sudo yum install gcc cargo\n\nFor Alpine, the following command will ensure that the required dependencies are installed:\n",
                    "rendered": {
                      "text": "\nFor Fedora and RHEL-derivatives, the following command will ensure that the required dependencies are installed:\n\n.. code:: bash\n\n    $ sudo yum install gcc cargo\n\nFor Alpine, the following command will ensure that the required dependencies are installed:\n",
                      "markdown": "`\nFor Fedora and RHEL-derivatives, the following command will ensure that the required dependencies are installed:\n\n.. code:: bash\n\n    $ sudo yum install gcc cargo\n\nFor Alpine, the following command will ensure that the required dependencies are installed:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-bcrypt-4.2.0-r0.apk/py3-bcrypt-4.2.0-r0/usr/lib/python3.12/site-packages/bcrypt-4.2.0.dist-info/METADATA"
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 9,
                  "endLine": 57,
                  "snippet": {
                    "text": "\nFor Debian and Ubuntu, the following command will ensure that the required dependencies are installed:\n\n.. code:: bash\n\n    $ sudo apt-get install build-essential cargo\n\nFor Fedora and RHEL-derivatives, the following command will ensure that the required dependencies are installed:\n",
                    "rendered": {
                      "text": "\nFor Debian and Ubuntu, the following command will ensure that the required dependencies are installed:\n\n.. code:: bash\n\n    $ sudo apt-get install build-essential cargo\n\nFor Fedora and RHEL-derivatives, the following command will ensure that the required dependencies are installed:\n",
                      "markdown": "`\nFor Debian and Ubuntu, the following command will ensure that the required dependencies are installed:\n\n.. code:: bash\n\n    $ sudo apt-get install build-essential cargo\n\nFor Fedora and RHEL-derivatives, the following command will ensure that the required dependencies are installed:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-bcrypt-4.2.0-r0.apk/py3-bcrypt-4.2.0-r0/usr/lib/python3.12/site-packages/bcrypt-4.2.0.dist-info/METADATA"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 9,
                  "endLine": 48,
                  "snippet": {
                    "text": "\nTo install bcrypt, simply:\n\n.. code:: bash\n\n    $ pip install bcrypt\n\nNote that bcrypt should build very easily on Linux provided you have a C\n",
                    "rendered": {
                      "text": "\nTo install bcrypt, simply:\n\n.. code:: bash\n\n    $ pip install bcrypt\n\nNote that bcrypt should build very easily on Linux provided you have a C\n",
                      "markdown": "`\nTo install bcrypt, simply:\n\n.. code:: bash\n\n    $ pip install bcrypt\n\nNote that bcrypt should build very easily on Linux provided you have a C\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-bcrypt-4.2.0-r0.apk/py3-bcrypt-4.2.0-r0/usr/lib/python3.12/site-packages/bcrypt-4.2.0.dist-info/METADATA"
                },
                "region": {
                  "startLine": 287,
                  "startColumn": 64,
                  "endLine": 288,
                  "snippet": {
                    "text": "\nThe bcrypt algorithm only handles passwords up to 72 characters, any characters\nbeyond that are ignored. To work around this, a common approach is to hash a\npassword with a cryptographic hash (such as ``sha256``) and then base64\nencode it to prevent NULL byte problems before hashing the result with\n``bcrypt``:\n\n.. code:: pycon\n",
                    "rendered": {
                      "text": "\nThe bcrypt algorithm only handles passwords up to 72 characters, any characters\nbeyond that are ignored. To work around this, a common approach is to hash a\npassword with a cryptographic hash (such as ``sha256``) and then base64\nencode it to prevent NULL byte problems before hashing the result with\n``bcrypt``:\n\n.. code:: pycon\n",
                      "markdown": "`\nThe bcrypt algorithm only handles passwords up to 72 characters, any characters\nbeyond that are ignored. To work around this, a common approach is to hash a\npassword with a cryptographic hash (such as ``sha256``) and then base64\nencode it to prevent NULL byte problems before hashing the result with\n``bcrypt``:\n\n.. code:: pycon\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-bcrypt-4.2.0-r0.apk/py3-bcrypt-4.2.0-r0/usr/lib/python3.12/site-packages/bcrypt-4.2.0.dist-info/METADATA"
                },
                "region": {
                  "startLine": 155,
                  "startColumn": 43,
                  "endLine": 155,
                  "endColumn": 48,
                  "snippet": {
                    "text": "\n* Added typehints for library functions.\n* Dropped support for Python versions less than 3.6 (2.7, 3.4, 3.5).\n* Shipped ``abi3`` Windows wheels (requires pip >= 20).\n\n3.1.7\n-----\n",
                    "rendered": {
                      "text": "\n* Added typehints for library functions.\n* Dropped support for Python versions less than 3.6 (2.7, 3.4, 3.5).\n* Shipped ``abi3`` Windows wheels (requires pip >= 20).\n\n3.1.7\n-----\n",
                      "markdown": "`\n* Added typehints for library functions.\n* Dropped support for Python versions less than 3.6 (2.7, 3.4, 3.5).\n* Shipped ``abi3`` Windows wheels (requires pip >= 20).\n\n3.1.7\n-----\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-bcrypt-4.2.0-r0.apk/py3-bcrypt-4.2.0-r0/usr/lib/python3.12/site-packages/bcrypt-4.2.0.dist-info/METADATA"
                },
                "region": {
                  "startLine": 68,
                  "startColumn": 9,
                  "endLine": 69,
                  "snippet": {
                    "text": "\nFor Alpine, the following command will ensure that the required dependencies are installed:\n\n.. code:: bash\n\n    $ apk add --update musl-dev gcc cargo\n\n\n",
                    "rendered": {
                      "text": "\nFor Alpine, the following command will ensure that the required dependencies are installed:\n\n.. code:: bash\n\n    $ apk add --update musl-dev gcc cargo\n\n\n",
                      "markdown": "`\nFor Alpine, the following command will ensure that the required dependencies are installed:\n\n.. code:: bash\n\n    $ apk add --update musl-dev gcc cargo\n\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-bcrypt-4.2.0-r0.apk/py3-bcrypt-4.2.0-r0/usr/lib/python3.12/site-packages/bcrypt-4.2.0.dist-info/METADATA"
                },
                "region": {
                  "startLine": 64,
                  "startColumn": 10,
                  "endLine": 64,
                  "endColumn": 15,
                  "snippet": {
                    "text": "\n.. code:: bash\n\n    $ sudo yum install gcc cargo\n\nFor Alpine, the following command will ensure that the required dependencies are installed:\n\n",
                    "rendered": {
                      "text": "\n.. code:: bash\n\n    $ sudo yum install gcc cargo\n\nFor Alpine, the following command will ensure that the required dependencies are installed:\n\n",
                      "markdown": "`\n.. code:: bash\n\n    $ sudo yum install gcc cargo\n\nFor Alpine, the following command will ensure that the required dependencies are installed:\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-bcrypt-4.2.0-r0.apk/py3-bcrypt-4.2.0-r0/usr/lib/python3.12/site-packages/bcrypt-4.2.0.dist-info/METADATA"
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 9,
                  "endLine": 63,
                  "snippet": {
                    "text": "\nFor Fedora and RHEL-derivatives, the following command will ensure that the required dependencies are installed:\n\n.. code:: bash\n\n    $ sudo yum install gcc cargo\n\nFor Alpine, the following command will ensure that the required dependencies are installed:\n",
                    "rendered": {
                      "text": "\nFor Fedora and RHEL-derivatives, the following command will ensure that the required dependencies are installed:\n\n.. code:: bash\n\n    $ sudo yum install gcc cargo\n\nFor Alpine, the following command will ensure that the required dependencies are installed:\n",
                      "markdown": "`\nFor Fedora and RHEL-derivatives, the following command will ensure that the required dependencies are installed:\n\n.. code:: bash\n\n    $ sudo yum install gcc cargo\n\nFor Alpine, the following command will ensure that the required dependencies are installed:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-bcrypt-4.2.0-r0.apk/py3-bcrypt-4.2.0-r0/usr/lib/python3.12/site-packages/bcrypt-4.2.0.dist-info/METADATA"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 10,
                  "endLine": 58,
                  "endColumn": 19,
                  "snippet": {
                    "text": "\n.. code:: bash\n\n    $ sudo apt-get install build-essential cargo\n\nFor Fedora and RHEL-derivatives, the following command will ensure that the required dependencies are installed:\n\n",
                    "rendered": {
                      "text": "\n.. code:: bash\n\n    $ sudo apt-get install build-essential cargo\n\nFor Fedora and RHEL-derivatives, the following command will ensure that the required dependencies are installed:\n\n",
                      "markdown": "`\n.. code:: bash\n\n    $ sudo apt-get install build-essential cargo\n\nFor Fedora and RHEL-derivatives, the following command will ensure that the required dependencies are installed:\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-bcrypt-4.2.0-r0.apk/py3-bcrypt-4.2.0-r0/usr/lib/python3.12/site-packages/bcrypt-4.2.0.dist-info/METADATA"
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 9,
                  "endLine": 57,
                  "snippet": {
                    "text": "\nFor Debian and Ubuntu, the following command will ensure that the required dependencies are installed:\n\n.. code:: bash\n\n    $ sudo apt-get install build-essential cargo\n\nFor Fedora and RHEL-derivatives, the following command will ensure that the required dependencies are installed:\n",
                    "rendered": {
                      "text": "\nFor Debian and Ubuntu, the following command will ensure that the required dependencies are installed:\n\n.. code:: bash\n\n    $ sudo apt-get install build-essential cargo\n\nFor Fedora and RHEL-derivatives, the following command will ensure that the required dependencies are installed:\n",
                      "markdown": "`\nFor Debian and Ubuntu, the following command will ensure that the required dependencies are installed:\n\n.. code:: bash\n\n    $ sudo apt-get install build-essential cargo\n\nFor Fedora and RHEL-derivatives, the following command will ensure that the required dependencies are installed:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-bcrypt-4.2.0-r0.apk/py3-bcrypt-4.2.0-r0/usr/lib/python3.12/site-packages/bcrypt-4.2.0.dist-info/METADATA"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 5,
                  "endLine": 49,
                  "endColumn": 10,
                  "snippet": {
                    "text": "\n.. code:: bash\n\n    $ pip install bcrypt\n\nNote that bcrypt should build very easily on Linux provided you have a C\ncompiler and a Rust compiler (the minimum supported Rust version is 1.56.0).\n",
                    "rendered": {
                      "text": "\n.. code:: bash\n\n    $ pip install bcrypt\n\nNote that bcrypt should build very easily on Linux provided you have a C\ncompiler and a Rust compiler (the minimum supported Rust version is 1.56.0).\n",
                      "markdown": "`\n.. code:: bash\n\n    $ pip install bcrypt\n\nNote that bcrypt should build very easily on Linux provided you have a C\ncompiler and a Rust compiler (the minimum supported Rust version is 1.56.0).\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-bcrypt-4.2.0-r0.apk/py3-bcrypt-4.2.0-r0/usr/lib/python3.12/site-packages/bcrypt-4.2.0.dist-info/METADATA"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 9,
                  "endLine": 48,
                  "snippet": {
                    "text": "\nTo install bcrypt, simply:\n\n.. code:: bash\n\n    $ pip install bcrypt\n\nNote that bcrypt should build very easily on Linux provided you have a C\n",
                    "rendered": {
                      "text": "\nTo install bcrypt, simply:\n\n.. code:: bash\n\n    $ pip install bcrypt\n\nNote that bcrypt should build very easily on Linux provided you have a C\n",
                      "markdown": "`\nTo install bcrypt, simply:\n\n.. code:: bash\n\n    $ pip install bcrypt\n\nNote that bcrypt should build very easily on Linux provided you have a C\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-bcrypt-4.2.0-r0.apk/py3-bcrypt-4.2.0-r0/usr/lib/python3.12/site-packages/bcrypt/__init__.pyi"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 4,
                  "endLine": 5,
                  "endColumn": 12,
                  "snippet": {
                    "text": "def hashpw(password: bytes, salt: bytes) -> bytes: ...\ndef checkpw(password: bytes, hashed_password: bytes) -> bool: ...\ndef kdf(\n    password: bytes,\n    salt: bytes,\n    desired_key_bytes: int,\n    rounds: int,\n",
                    "rendered": {
                      "text": "def hashpw(password: bytes, salt: bytes) -> bytes: ...\ndef checkpw(password: bytes, hashed_password: bytes) -> bool: ...\ndef kdf(\n    password: bytes,\n    salt: bytes,\n    desired_key_bytes: int,\n    rounds: int,\n",
                      "markdown": "`def hashpw(password: bytes, salt: bytes) -> bytes: ...\ndef checkpw(password: bytes, hashed_password: bytes) -> bool: ...\ndef kdf(\n    password: bytes,\n    salt: bytes,\n    desired_key_bytes: int,\n    rounds: int,\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-bcrypt-4.2.0-r0.apk/py3-bcrypt-4.2.0-r0/usr/lib/python3.12/site-packages/bcrypt/__init__.pyi"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 36,
                  "endLine": 3,
                  "endColumn": 44,
                  "snippet": {
                    "text": "def gensalt(rounds: int = 12, prefix: bytes = b\"2b\") -> bytes: ...\ndef hashpw(password: bytes, salt: bytes) -> bytes: ...\ndef checkpw(password: bytes, hashed_password: bytes) -> bool: ...\ndef kdf(\n    password: bytes,\n    salt: bytes,\n",
                    "rendered": {
                      "text": "def gensalt(rounds: int = 12, prefix: bytes = b\"2b\") -> bytes: ...\ndef hashpw(password: bytes, salt: bytes) -> bytes: ...\ndef checkpw(password: bytes, hashed_password: bytes) -> bool: ...\ndef kdf(\n    password: bytes,\n    salt: bytes,\n",
                      "markdown": "`def gensalt(rounds: int = 12, prefix: bytes = b\"2b\") -> bytes: ...\ndef hashpw(password: bytes, salt: bytes) -> bytes: ...\ndef checkpw(password: bytes, hashed_password: bytes) -> bool: ...\ndef kdf(\n    password: bytes,\n    salt: bytes,\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-bcrypt-4.2.0-r0.apk/py3-bcrypt-4.2.0-r0/usr/lib/python3.12/site-packages/bcrypt/__init__.pyi"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 12,
                  "endLine": 3,
                  "endColumn": 20,
                  "snippet": {
                    "text": "def gensalt(rounds: int = 12, prefix: bytes = b\"2b\") -> bytes: ...\ndef hashpw(password: bytes, salt: bytes) -> bytes: ...\ndef checkpw(password: bytes, hashed_password: bytes) -> bool: ...\ndef kdf(\n    password: bytes,\n    salt: bytes,\n",
                    "rendered": {
                      "text": "def gensalt(rounds: int = 12, prefix: bytes = b\"2b\") -> bytes: ...\ndef hashpw(password: bytes, salt: bytes) -> bytes: ...\ndef checkpw(password: bytes, hashed_password: bytes) -> bool: ...\ndef kdf(\n    password: bytes,\n    salt: bytes,\n",
                      "markdown": "`def gensalt(rounds: int = 12, prefix: bytes = b\"2b\") -> bytes: ...\ndef hashpw(password: bytes, salt: bytes) -> bytes: ...\ndef checkpw(password: bytes, hashed_password: bytes) -> bool: ...\ndef kdf(\n    password: bytes,\n    salt: bytes,\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-bcrypt-4.2.0-r0.apk/py3-bcrypt-4.2.0-r0/usr/lib/python3.12/site-packages/bcrypt/__init__.pyi"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 11,
                  "endLine": 2,
                  "endColumn": 19,
                  "snippet": {
                    "text": "def gensalt(rounds: int = 12, prefix: bytes = b\"2b\") -> bytes: ...\ndef hashpw(password: bytes, salt: bytes) -> bytes: ...\ndef checkpw(password: bytes, hashed_password: bytes) -> bool: ...\ndef kdf(\n    password: bytes,\n",
                    "rendered": {
                      "text": "def gensalt(rounds: int = 12, prefix: bytes = b\"2b\") -> bytes: ...\ndef hashpw(password: bytes, salt: bytes) -> bytes: ...\ndef checkpw(password: bytes, hashed_password: bytes) -> bool: ...\ndef kdf(\n    password: bytes,\n",
                      "markdown": "`def gensalt(rounds: int = 12, prefix: bytes = b\"2b\") -> bytes: ...\ndef hashpw(password: bytes, salt: bytes) -> bytes: ...\ndef checkpw(password: bytes, hashed_password: bytes) -> bool: ...\ndef kdf(\n    password: bytes,\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/panic-at-the-distro-malicious-apks/datasets/wolfi_apks/py3-bcrypt-4.2.0-r0.apk/py3-bcrypt-4.2.0-r0/.PKGINFO"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 17,
                  "endLine": 7,
                  "endColumn": 25,
                  "snippet": {
                    "text": "arch = x86_64\nsize = 664922\norigin = py3-bcrypt\npkgdesc = Modern password hashing for your software and your servers\nurl = \ncommit = 8c2299e564ede38531905bec949bac1223c23f9a\nbuilddate = 1721817295\n",
                    "rendered": {
                      "text": "arch = x86_64\nsize = 664922\norigin = py3-bcrypt\npkgdesc = Modern password hashing for your software and your servers\nurl = \ncommit = 8c2299e564ede38531905bec949bac1223c23f9a\nbuilddate = 1721817295\n",
                      "markdown": "`arch = x86_64\nsize = 664922\norigin = py3-bcrypt\npkgdesc = Modern password hashing for your software and your servers\nurl = \ncommit = 8c2299e564ede38531905bec949bac1223c23f9a\nbuilddate = 1721817295\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        }
      ],
      "columnKind": "utf16CodeUnits"
    }
  ]
}