{
  "$schema": "https://schemastore.azurewebsites.net/schemas/json/sarif-2.1.0-rtm.6.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "oss-detect-backdoor",
          "organization": "Microsoft Corporation",
          "product": "OSSGadget (https://github.com/Microsoft/OSSGadget)",
          "version": "0.0.0+4a24249b20"
        }
      },
      "results": [
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/doc/source/contributor/index.rst"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 1,
                  "endLine": 28,
                  "endColumn": 6,
                  "snippet": {
                    "text": "are listed in ``requirements.txt`` and the requirements for testing are in\n``test-requirements.txt``. Installing them via pip, for instance, is simply::\n\n  pip install -r requirements.txt -r test-requirements.txt\n\nIf you go this route, you can interact with the testr command directly.\nRunning ``testr run`` will run the entire test suite. ``testr run --parallel``\n",
                    "rendered": {
                      "text": "are listed in ``requirements.txt`` and the requirements for testing are in\n``test-requirements.txt``. Installing them via pip, for instance, is simply::\n\n  pip install -r requirements.txt -r test-requirements.txt\n\nIf you go this route, you can interact with the testr command directly.\nRunning ``testr run`` will run the entire test suite. ``testr run --parallel``\n",
                      "markdown": "`are listed in ``requirements.txt`` and the requirements for testing are in\n``test-requirements.txt``. Installing them via pip, for instance, is simply::\n\n  pip install -r requirements.txt -r test-requirements.txt\n\nIf you go this route, you can interact with the testr command directly.\nRunning ``testr run`` will run the entire test suite. ``testr run --parallel``\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/doc/source/contributor/index.rst"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 15,
                  "endLine": 15,
                  "endColumn": 57,
                  "snippet": {
                    "text": "\nThe testing system is based on a combination of `tox`_ and `testr`_. The canonical\napproach to running tests is to simply run the command ``tox``. This will\ncreate virtual environments, populate them with dependencies and run all of\nthe tests that OpenStack CI systems run. Behind the scenes, tox is running\n``testr run --parallel``, but is set up such that you can supply any additional\ntestr arguments that are needed to tox. For example, you can run:\n",
                    "rendered": {
                      "text": "\nThe testing system is based on a combination of `tox`_ and `testr`_. The canonical\napproach to running tests is to simply run the command ``tox``. This will\ncreate virtual environments, populate them with dependencies and run all of\nthe tests that OpenStack CI systems run. Behind the scenes, tox is running\n``testr run --parallel``, but is set up such that you can supply any additional\ntestr arguments that are needed to tox. For example, you can run:\n",
                      "markdown": "`\nThe testing system is based on a combination of `tox`_ and `testr`_. The canonical\napproach to running tests is to simply run the command ``tox``. This will\ncreate virtual environments, populate them with dependencies and run all of\nthe tests that OpenStack CI systems run. Behind the scenes, tox is running\n``testr run --parallel``, but is set up such that you can supply any additional\ntestr arguments that are needed to tox. For example, you can run:\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/tests/testpackage/doc/source/conf.py"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 38,
                  "endLine": 5,
                  "snippet": {
                    "text": "# -*- coding: utf-8 -*-\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "# -*- coding: utf-8 -*-\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`# -*- coding: utf-8 -*-\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/tests/testpackage/doc/source/index.rst"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 67,
                  "endLine": 3,
                  "endColumn": 71,
                  "snippet": {
                    "text": ".. testpackage documentation master file, created by\n   sphinx-quickstart on Tue Jul  9 22:26:36 2013.\n   You can adapt this file completely to your liking, but it should at least\n   contain the root `toctree` directive.\n\nWelcome to testpackage's documentation!\n",
                    "rendered": {
                      "text": ".. testpackage documentation master file, created by\n   sphinx-quickstart on Tue Jul  9 22:26:36 2013.\n   You can adapt this file completely to your liking, but it should at least\n   contain the root `toctree` directive.\n\nWelcome to testpackage's documentation!\n",
                      "markdown": "`.. testpackage documentation master file, created by\n   sphinx-quickstart on Tue Jul  9 22:26:36 2013.\n   You can adapt this file completely to your liking, but it should at least\n   contain the root `toctree` directive.\n\nWelcome to testpackage's documentation!\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/tests/test_setup.py"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 23,
                  "endLine": 8,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n# not use this file except in compliance with the License. You may obtain\n# a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n# not use this file except in compliance with the License. You may obtain\n# a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n# not use this file except in compliance with the License. You may obtain\n# a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/tests/test_setup.py"
                },
                "region": {
                  "startLine": 120,
                  "startColumn": 53,
                  "endLine": 120,
                  "endColumn": 58,
                  "snippet": {
                    "text": "\n\ndef _make_old_git_changelog_format(line):\n    \"\"\"Convert post-1.8.1 git log format to pre-1.8.1 git log format\"\"\"\n\n    if not line.strip():\n        return line\n",
                    "rendered": {
                      "text": "\n\ndef _make_old_git_changelog_format(line):\n    \"\"\"Convert post-1.8.1 git log format to pre-1.8.1 git log format\"\"\"\n\n    if not line.strip():\n        return line\n",
                      "markdown": "`\n\ndef _make_old_git_changelog_format(line):\n    \"\"\"Convert post-1.8.1 git log format to pre-1.8.1 git log format\"\"\"\n\n    if not line.strip():\n        return line\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/tests/test_setup.py"
                },
                "region": {
                  "startLine": 120,
                  "startColumn": 25,
                  "endLine": 120,
                  "endColumn": 30,
                  "snippet": {
                    "text": "\n\ndef _make_old_git_changelog_format(line):\n    \"\"\"Convert post-1.8.1 git log format to pre-1.8.1 git log format\"\"\"\n\n    if not line.strip():\n        return line\n",
                    "rendered": {
                      "text": "\n\ndef _make_old_git_changelog_format(line):\n    \"\"\"Convert post-1.8.1 git log format to pre-1.8.1 git log format\"\"\"\n\n    if not line.strip():\n        return line\n",
                      "markdown": "`\n\ndef _make_old_git_changelog_format(line):\n    \"\"\"Convert post-1.8.1 git log format to pre-1.8.1 git log format\"\"\"\n\n    if not line.strip():\n        return line\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/tests/test_setup.py"
                },
                "region": {
                  "startLine": 105,
                  "startColumn": 29,
                  "endLine": 105,
                  "endColumn": 43,
                  "snippet": {
                    "text": "3c373ac\\x00Merge \"Lib\\x00 (HEAD, tag: refs/tags/2013.2.rc2, tag: refs/tags/2013.2, refs/heads/mile-proposed)\n182feb3\\x00Fix pip invocation for old versions of pip.\\x00 (tag: refs/tags/0.5.17)\nfa4f46e\\x00Remove explicit depend on distribute.\\x00 (tag: refs/tags/0.5.16)\nd1c53dd\\x00Use pip instead of easy_install for installation.\\x00\na793ea1\\x00Merge \"Skip git-checkout related tests when .git is missing\"\\x00\n6c27ce7\\x00Skip git-checkout related tests when .git is missing\\x00\n451e513\\x00Bug fix: create_stack() fails when waiting\\x00\n",
                    "rendered": {
                      "text": "3c373ac\\x00Merge \"Lib\\x00 (HEAD, tag: refs/tags/2013.2.rc2, tag: refs/tags/2013.2, refs/heads/mile-proposed)\n182feb3\\x00Fix pip invocation for old versions of pip.\\x00 (tag: refs/tags/0.5.17)\nfa4f46e\\x00Remove explicit depend on distribute.\\x00 (tag: refs/tags/0.5.16)\nd1c53dd\\x00Use pip instead of easy_install for installation.\\x00\na793ea1\\x00Merge \"Skip git-checkout related tests when .git is missing\"\\x00\n6c27ce7\\x00Skip git-checkout related tests when .git is missing\\x00\n451e513\\x00Bug fix: create_stack() fails when waiting\\x00\n",
                      "markdown": "`3c373ac\\x00Merge \"Lib\\x00 (HEAD, tag: refs/tags/2013.2.rc2, tag: refs/tags/2013.2, refs/heads/mile-proposed)\n182feb3\\x00Fix pip invocation for old versions of pip.\\x00 (tag: refs/tags/0.5.17)\nfa4f46e\\x00Remove explicit depend on distribute.\\x00 (tag: refs/tags/0.5.16)\nd1c53dd\\x00Use pip instead of easy_install for installation.\\x00\na793ea1\\x00Merge \"Skip git-checkout related tests when .git is missing\"\\x00\n6c27ce7\\x00Skip git-checkout related tests when .git is missing\\x00\n451e513\\x00Bug fix: create_stack() fails when waiting\\x00\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/tests/test_setup.py"
                },
                "region": {
                  "startLine": 105,
                  "startColumn": 14,
                  "endLine": 105,
                  "endColumn": 19,
                  "snippet": {
                    "text": "3c373ac\\x00Merge \"Lib\\x00 (HEAD, tag: refs/tags/2013.2.rc2, tag: refs/tags/2013.2, refs/heads/mile-proposed)\n182feb3\\x00Fix pip invocation for old versions of pip.\\x00 (tag: refs/tags/0.5.17)\nfa4f46e\\x00Remove explicit depend on distribute.\\x00 (tag: refs/tags/0.5.16)\nd1c53dd\\x00Use pip instead of easy_install for installation.\\x00\na793ea1\\x00Merge \"Skip git-checkout related tests when .git is missing\"\\x00\n6c27ce7\\x00Skip git-checkout related tests when .git is missing\\x00\n451e513\\x00Bug fix: create_stack() fails when waiting\\x00\n",
                    "rendered": {
                      "text": "3c373ac\\x00Merge \"Lib\\x00 (HEAD, tag: refs/tags/2013.2.rc2, tag: refs/tags/2013.2, refs/heads/mile-proposed)\n182feb3\\x00Fix pip invocation for old versions of pip.\\x00 (tag: refs/tags/0.5.17)\nfa4f46e\\x00Remove explicit depend on distribute.\\x00 (tag: refs/tags/0.5.16)\nd1c53dd\\x00Use pip instead of easy_install for installation.\\x00\na793ea1\\x00Merge \"Skip git-checkout related tests when .git is missing\"\\x00\n6c27ce7\\x00Skip git-checkout related tests when .git is missing\\x00\n451e513\\x00Bug fix: create_stack() fails when waiting\\x00\n",
                      "markdown": "`3c373ac\\x00Merge \"Lib\\x00 (HEAD, tag: refs/tags/2013.2.rc2, tag: refs/tags/2013.2, refs/heads/mile-proposed)\n182feb3\\x00Fix pip invocation for old versions of pip.\\x00 (tag: refs/tags/0.5.17)\nfa4f46e\\x00Remove explicit depend on distribute.\\x00 (tag: refs/tags/0.5.16)\nd1c53dd\\x00Use pip instead of easy_install for installation.\\x00\na793ea1\\x00Merge \"Skip git-checkout related tests when .git is missing\"\\x00\n6c27ce7\\x00Skip git-checkout related tests when .git is missing\\x00\n451e513\\x00Bug fix: create_stack() fails when waiting\\x00\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/tests/test_setup.py"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 14,
                  "endLine": 103,
                  "endColumn": 19,
                  "snippet": {
                    "text": "04316fe\\x00Make python\\x00 (refs/heads/review/monty_taylor/27519)\n378261a\\x00Add an integration test script.\\x00\n3c373ac\\x00Merge \"Lib\\x00 (HEAD, tag: refs/tags/2013.2.rc2, tag: refs/tags/2013.2, refs/heads/mile-proposed)\n182feb3\\x00Fix pip invocation for old versions of pip.\\x00 (tag: refs/tags/0.5.17)\nfa4f46e\\x00Remove explicit depend on distribute.\\x00 (tag: refs/tags/0.5.16)\nd1c53dd\\x00Use pip instead of easy_install for installation.\\x00\na793ea1\\x00Merge \"Skip git-checkout related tests when .git is missing\"\\x00\n",
                    "rendered": {
                      "text": "04316fe\\x00Make python\\x00 (refs/heads/review/monty_taylor/27519)\n378261a\\x00Add an integration test script.\\x00\n3c373ac\\x00Merge \"Lib\\x00 (HEAD, tag: refs/tags/2013.2.rc2, tag: refs/tags/2013.2, refs/heads/mile-proposed)\n182feb3\\x00Fix pip invocation for old versions of pip.\\x00 (tag: refs/tags/0.5.17)\nfa4f46e\\x00Remove explicit depend on distribute.\\x00 (tag: refs/tags/0.5.16)\nd1c53dd\\x00Use pip instead of easy_install for installation.\\x00\na793ea1\\x00Merge \"Skip git-checkout related tests when .git is missing\"\\x00\n",
                      "markdown": "`04316fe\\x00Make python\\x00 (refs/heads/review/monty_taylor/27519)\n378261a\\x00Add an integration test script.\\x00\n3c373ac\\x00Merge \"Lib\\x00 (HEAD, tag: refs/tags/2013.2.rc2, tag: refs/tags/2013.2, refs/heads/mile-proposed)\n182feb3\\x00Fix pip invocation for old versions of pip.\\x00 (tag: refs/tags/0.5.17)\nfa4f46e\\x00Remove explicit depend on distribute.\\x00 (tag: refs/tags/0.5.16)\nd1c53dd\\x00Use pip instead of easy_install for installation.\\x00\na793ea1\\x00Merge \"Skip git-checkout related tests when .git is missing\"\\x00\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/tests/test_setup.py"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 15,
                  "endLine": 31,
                  "snippet": {
                    "text": "\nimport fixtures\n\nfrom pbr import git\nfrom pbr import options\nfrom pbr.tests import base\n\n\n",
                    "rendered": {
                      "text": "\nimport fixtures\n\nfrom pbr import git\nfrom pbr import options\nfrom pbr.tests import base\n\n\n",
                      "markdown": "`\nimport fixtures\n\nfrom pbr import git\nfrom pbr import options\nfrom pbr.tests import base\n\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/tests/test_integration.py"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 38,
                  "endLine": 4,
                  "snippet": {
                    "text": "# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/tests/test_integration.py"
                },
                "region": {
                  "startLine": 267,
                  "startColumn": 53,
                  "endLine": 268,
                  "snippet": {
                    "text": "            allow_fail=False)[0])\n\n\n# Handle collections.abc moves in python breaking old pip\n# These versions come from the versions installed from the 'virtualenv'\n# command from the 'python-virtualenv' package.\nif sys.version_info[0:3] < (3, 10, 0):\n    lts_scenarios = [\n",
                    "rendered": {
                      "text": "            allow_fail=False)[0])\n\n\n# Handle collections.abc moves in python breaking old pip\n# These versions come from the versions installed from the 'virtualenv'\n# command from the 'python-virtualenv' package.\nif sys.version_info[0:3] < (3, 10, 0):\n    lts_scenarios = [\n",
                      "markdown": "`            allow_fail=False)[0])\n\n\n# Handle collections.abc moves in python breaking old pip\n# These versions come from the versions installed from the 'virtualenv'\n# command from the 'python-virtualenv' package.\nif sys.version_info[0:3] < (3, 10, 0):\n    lts_scenarios = [\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/tests/test_integration.py"
                },
                "region": {
                  "startLine": 204,
                  "startColumn": 27,
                  "endLine": 205,
                  "snippet": {
                    "text": "        # A venv to test within\n        venv = self.useFixture(test_packaging.Venv('nopbr', ['pip', 'wheel']))\n        python = venv.python\n        # Run the depending script\n        self.useFixture(base.CapturedSubprocess(\n            'nopbr', [python] + ['setup.py', 'test'], cwd=test_pkg_dir))\n\n\n",
                    "rendered": {
                      "text": "        # A venv to test within\n        venv = self.useFixture(test_packaging.Venv('nopbr', ['pip', 'wheel']))\n        python = venv.python\n        # Run the depending script\n        self.useFixture(base.CapturedSubprocess(\n            'nopbr', [python] + ['setup.py', 'test'], cwd=test_pkg_dir))\n\n\n",
                      "markdown": "`        # A venv to test within\n        venv = self.useFixture(test_packaging.Venv('nopbr', ['pip', 'wheel']))\n        python = venv.python\n        # Run the depending script\n        self.useFixture(base.CapturedSubprocess(\n            'nopbr', [python] + ['setup.py', 'test'], cwd=test_pkg_dir))\n\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/tests/test_integration.py"
                },
                "region": {
                  "startLine": 81,
                  "startColumn": 11,
                  "endLine": 81,
                  "endColumn": 16,
                  "snippet": {
                    "text": "        # - run sdist from the repo in a venv\n        # - install the resulting tarball in a new venv\n        # - pip install the repo\n        # - pip install -e the repo\n        # We don't break these into separate tests because we'd need separate\n        # source dirs to isolate from side effects of running pip, and the\n        # overheads of setup would start to beat the benefits of parallelism.\n",
                    "rendered": {
                      "text": "        # - run sdist from the repo in a venv\n        # - install the resulting tarball in a new venv\n        # - pip install the repo\n        # - pip install -e the repo\n        # We don't break these into separate tests because we'd need separate\n        # source dirs to isolate from side effects of running pip, and the\n        # overheads of setup would start to beat the benefits of parallelism.\n",
                      "markdown": "`        # - run sdist from the repo in a venv\n        # - install the resulting tarball in a new venv\n        # - pip install the repo\n        # - pip install -e the repo\n        # We don't break these into separate tests because we'd need separate\n        # source dirs to isolate from side effects of running pip, and the\n        # overheads of setup would start to beat the benefits of parallelism.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/tests/test_integration.py"
                },
                "region": {
                  "startLine": 80,
                  "startColumn": 11,
                  "endLine": 80,
                  "endColumn": 16,
                  "snippet": {
                    "text": "        # Test that we can:\n        # - run sdist from the repo in a venv\n        # - install the resulting tarball in a new venv\n        # - pip install the repo\n        # - pip install -e the repo\n        # We don't break these into separate tests because we'd need separate\n        # source dirs to isolate from side effects of running pip, and the\n",
                    "rendered": {
                      "text": "        # Test that we can:\n        # - run sdist from the repo in a venv\n        # - install the resulting tarball in a new venv\n        # - pip install the repo\n        # - pip install -e the repo\n        # We don't break these into separate tests because we'd need separate\n        # source dirs to isolate from side effects of running pip, and the\n",
                      "markdown": "`        # Test that we can:\n        # - run sdist from the repo in a venv\n        # - install the resulting tarball in a new venv\n        # - pip install the repo\n        # - pip install -e the repo\n        # We don't break these into separate tests because we'd need separate\n        # source dirs to isolate from side effects of running pip, and the\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/tests/test_integration.py"
                },
                "region": {
                  "startLine": 67,
                  "startColumn": 7,
                  "endLine": 67,
                  "endColumn": 12,
                  "snippet": {
                    "text": "    def setUp(self):\n        # Integration tests need a higher default - big repos can be slow to\n        # clone, particularly under guest load.\n        env = fixtures.EnvironmentVariable(\n            'OS_TEST_TIMEOUT', os.environ.get('OS_TEST_TIMEOUT', '600'))\n        with env:\n            super(TestIntegration, self).setUp()\n",
                    "rendered": {
                      "text": "    def setUp(self):\n        # Integration tests need a higher default - big repos can be slow to\n        # clone, particularly under guest load.\n        env = fixtures.EnvironmentVariable(\n            'OS_TEST_TIMEOUT', os.environ.get('OS_TEST_TIMEOUT', '600'))\n        with env:\n            super(TestIntegration, self).setUp()\n",
                      "markdown": "`    def setUp(self):\n        # Integration tests need a higher default - big repos can be slow to\n        # clone, particularly under guest load.\n        env = fixtures.EnvironmentVariable(\n            'OS_TEST_TIMEOUT', os.environ.get('OS_TEST_TIMEOUT', '600'))\n        with env:\n            super(TestIntegration, self).setUp()\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/tests/test_integration.py"
                },
                "region": {
                  "startLine": 291,
                  "startColumn": 18,
                  "endLine": 291,
                  "endColumn": 23,
                  "snippet": {
                    "text": "    scenarios = lts_scenarios\n\n    @testtools.skipUnless(\n        os.environ.get('PBR_INTEGRATION', None) == '1',\n        'integration tests not enabled',\n    )\n    def test_lts_venv_default_versions(self):\n",
                    "rendered": {
                      "text": "    scenarios = lts_scenarios\n\n    @testtools.skipUnless(\n        os.environ.get('PBR_INTEGRATION', None) == '1',\n        'integration tests not enabled',\n    )\n    def test_lts_venv_default_versions(self):\n",
                      "markdown": "`    scenarios = lts_scenarios\n\n    @testtools.skipUnless(\n        os.environ.get('PBR_INTEGRATION', None) == '1',\n        'integration tests not enabled',\n    )\n    def test_lts_venv_default_versions(self):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/tests/test_integration.py"
                },
                "region": {
                  "startLine": 228,
                  "startColumn": 18,
                  "endLine": 228,
                  "endColumn": 23,
                  "snippet": {
                    "text": "    ]\n\n    @testtools.skipUnless(\n        os.environ.get('PBR_INTEGRATION', None) == '1',\n        'integration tests not enabled',\n    )\n    def test_pip_versions(self):\n",
                    "rendered": {
                      "text": "    ]\n\n    @testtools.skipUnless(\n        os.environ.get('PBR_INTEGRATION', None) == '1',\n        'integration tests not enabled',\n    )\n    def test_pip_versions(self):\n",
                      "markdown": "`    ]\n\n    @testtools.skipUnless(\n        os.environ.get('PBR_INTEGRATION', None) == '1',\n        'integration tests not enabled',\n    )\n    def test_pip_versions(self):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/tests/test_integration.py"
                },
                "region": {
                  "startLine": 157,
                  "startColumn": 18,
                  "endLine": 157,
                  "endColumn": 23,
                  "snippet": {
                    "text": "class TestInstallWithoutPbr(base.BaseTestCase):\n\n    @testtools.skipUnless(\n        os.environ.get('PBR_INTEGRATION', None) == '1',\n        'integration tests not enabled')\n    def test_install_without_pbr(self):\n        # Test easy-install of a thing that depends on a thing using pbr\n",
                    "rendered": {
                      "text": "class TestInstallWithoutPbr(base.BaseTestCase):\n\n    @testtools.skipUnless(\n        os.environ.get('PBR_INTEGRATION', None) == '1',\n        'integration tests not enabled')\n    def test_install_without_pbr(self):\n        # Test easy-install of a thing that depends on a thing using pbr\n",
                      "markdown": "`class TestInstallWithoutPbr(base.BaseTestCase):\n\n    @testtools.skipUnless(\n        os.environ.get('PBR_INTEGRATION', None) == '1',\n        'integration tests not enabled')\n    def test_install_without_pbr(self):\n        # Test easy-install of a thing that depends on a thing using pbr\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/tests/test_integration.py"
                },
                "region": {
                  "startLine": 93,
                  "startColumn": 33,
                  "endLine": 93,
                  "endColumn": 38,
                  "snippet": {
                    "text": "            config = configparser.ConfigParser()\n            config.read(setup_cfg)\n            if config.has_section('metadata'):\n                raw_name = config.get('metadata', 'name',\n                                      fallback='notapackagename')\n                # Technically we should really only need to use the raw\n                # name because all our projects should be good and use\n",
                    "rendered": {
                      "text": "            config = configparser.ConfigParser()\n            config.read(setup_cfg)\n            if config.has_section('metadata'):\n                raw_name = config.get('metadata', 'name',\n                                      fallback='notapackagename')\n                # Technically we should really only need to use the raw\n                # name because all our projects should be good and use\n",
                      "markdown": "`            config = configparser.ConfigParser()\n            config.read(setup_cfg)\n            if config.has_section('metadata'):\n                raw_name = config.get('metadata', 'name',\n                                      fallback='notapackagename')\n                # Technically we should really only need to use the raw\n                # name because all our projects should be good and use\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/tests/test_integration.py"
                },
                "region": {
                  "startLine": 74,
                  "startColumn": 18,
                  "endLine": 74,
                  "endColumn": 23,
                  "snippet": {
                    "text": "        base._config_git()\n\n    @testtools.skipUnless(\n        os.environ.get('PBR_INTEGRATION', None) == '1',\n        'integration tests not enabled')\n    def test_integration(self):\n        # Test that we can:\n",
                    "rendered": {
                      "text": "        base._config_git()\n\n    @testtools.skipUnless(\n        os.environ.get('PBR_INTEGRATION', None) == '1',\n        'integration tests not enabled')\n    def test_integration(self):\n        # Test that we can:\n",
                      "markdown": "`        base._config_git()\n\n    @testtools.skipUnless(\n        os.environ.get('PBR_INTEGRATION', None) == '1',\n        'integration tests not enabled')\n    def test_integration(self):\n        # Test that we can:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/tests/test_integration.py"
                },
                "region": {
                  "startLine": 68,
                  "startColumn": 41,
                  "endLine": 68,
                  "endColumn": 46,
                  "snippet": {
                    "text": "        # Integration tests need a higher default - big repos can be slow to\n        # clone, particularly under guest load.\n        env = fixtures.EnvironmentVariable(\n            'OS_TEST_TIMEOUT', os.environ.get('OS_TEST_TIMEOUT', '600'))\n        with env:\n            super(TestIntegration, self).setUp()\n        base._config_git()\n",
                    "rendered": {
                      "text": "        # Integration tests need a higher default - big repos can be slow to\n        # clone, particularly under guest load.\n        env = fixtures.EnvironmentVariable(\n            'OS_TEST_TIMEOUT', os.environ.get('OS_TEST_TIMEOUT', '600'))\n        with env:\n            super(TestIntegration, self).setUp()\n        base._config_git()\n",
                      "markdown": "`        # Integration tests need a higher default - big repos can be slow to\n        # clone, particularly under guest load.\n        env = fixtures.EnvironmentVariable(\n            'OS_TEST_TIMEOUT', os.environ.get('OS_TEST_TIMEOUT', '600'))\n        with env:\n            super(TestIntegration, self).setUp()\n        base._config_git()\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/tests/test_integration.py"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 33,
                  "endLine": 36,
                  "endColumn": 38,
                  "snippet": {
                    "text": "REPODIR = os.environ.get('REPODIR', '')\nWHEELHOUSE = os.environ.get('WHEELHOUSE', '')\nPIP_CMD = ['-m', 'pip'] + PIPFLAGS + ['install', '-f', WHEELHOUSE]\nPROJECTS = shlex.split(os.environ.get('PROJECTS', ''))\nPBR_ROOT = os.path.abspath(os.path.join(__file__, '..', '..', '..'))\n\n\n",
                    "rendered": {
                      "text": "REPODIR = os.environ.get('REPODIR', '')\nWHEELHOUSE = os.environ.get('WHEELHOUSE', '')\nPIP_CMD = ['-m', 'pip'] + PIPFLAGS + ['install', '-f', WHEELHOUSE]\nPROJECTS = shlex.split(os.environ.get('PROJECTS', ''))\nPBR_ROOT = os.path.abspath(os.path.join(__file__, '..', '..', '..'))\n\n\n",
                      "markdown": "`REPODIR = os.environ.get('REPODIR', '')\nWHEELHOUSE = os.environ.get('WHEELHOUSE', '')\nPIP_CMD = ['-m', 'pip'] + PIPFLAGS + ['install', '-f', WHEELHOUSE]\nPROJECTS = shlex.split(os.environ.get('PROJECTS', ''))\nPBR_ROOT = os.path.abspath(os.path.join(__file__, '..', '..', '..'))\n\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/tests/test_integration.py"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 23,
                  "endLine": 34,
                  "endColumn": 28,
                  "snippet": {
                    "text": "PIPVERSION = os.environ.get('PIPVERSION', 'pip')\nPBRVERSION = os.environ.get('PBRVERSION', 'pbr')\nREPODIR = os.environ.get('REPODIR', '')\nWHEELHOUSE = os.environ.get('WHEELHOUSE', '')\nPIP_CMD = ['-m', 'pip'] + PIPFLAGS + ['install', '-f', WHEELHOUSE]\nPROJECTS = shlex.split(os.environ.get('PROJECTS', ''))\nPBR_ROOT = os.path.abspath(os.path.join(__file__, '..', '..', '..'))\n",
                    "rendered": {
                      "text": "PIPVERSION = os.environ.get('PIPVERSION', 'pip')\nPBRVERSION = os.environ.get('PBRVERSION', 'pbr')\nREPODIR = os.environ.get('REPODIR', '')\nWHEELHOUSE = os.environ.get('WHEELHOUSE', '')\nPIP_CMD = ['-m', 'pip'] + PIPFLAGS + ['install', '-f', WHEELHOUSE]\nPROJECTS = shlex.split(os.environ.get('PROJECTS', ''))\nPBR_ROOT = os.path.abspath(os.path.join(__file__, '..', '..', '..'))\n",
                      "markdown": "`PIPVERSION = os.environ.get('PIPVERSION', 'pip')\nPBRVERSION = os.environ.get('PBRVERSION', 'pbr')\nREPODIR = os.environ.get('REPODIR', '')\nWHEELHOUSE = os.environ.get('WHEELHOUSE', '')\nPIP_CMD = ['-m', 'pip'] + PIPFLAGS + ['install', '-f', WHEELHOUSE]\nPROJECTS = shlex.split(os.environ.get('PROJECTS', ''))\nPBR_ROOT = os.path.abspath(os.path.join(__file__, '..', '..', '..'))\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/tests/test_integration.py"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 20,
                  "endLine": 33,
                  "endColumn": 25,
                  "snippet": {
                    "text": "PIPFLAGS = shlex.split(os.environ.get('PIPFLAGS', ''))\nPIPVERSION = os.environ.get('PIPVERSION', 'pip')\nPBRVERSION = os.environ.get('PBRVERSION', 'pbr')\nREPODIR = os.environ.get('REPODIR', '')\nWHEELHOUSE = os.environ.get('WHEELHOUSE', '')\nPIP_CMD = ['-m', 'pip'] + PIPFLAGS + ['install', '-f', WHEELHOUSE]\nPROJECTS = shlex.split(os.environ.get('PROJECTS', ''))\n",
                    "rendered": {
                      "text": "PIPFLAGS = shlex.split(os.environ.get('PIPFLAGS', ''))\nPIPVERSION = os.environ.get('PIPVERSION', 'pip')\nPBRVERSION = os.environ.get('PBRVERSION', 'pbr')\nREPODIR = os.environ.get('REPODIR', '')\nWHEELHOUSE = os.environ.get('WHEELHOUSE', '')\nPIP_CMD = ['-m', 'pip'] + PIPFLAGS + ['install', '-f', WHEELHOUSE]\nPROJECTS = shlex.split(os.environ.get('PROJECTS', ''))\n",
                      "markdown": "`PIPFLAGS = shlex.split(os.environ.get('PIPFLAGS', ''))\nPIPVERSION = os.environ.get('PIPVERSION', 'pip')\nPBRVERSION = os.environ.get('PBRVERSION', 'pbr')\nREPODIR = os.environ.get('REPODIR', '')\nWHEELHOUSE = os.environ.get('WHEELHOUSE', '')\nPIP_CMD = ['-m', 'pip'] + PIPFLAGS + ['install', '-f', WHEELHOUSE]\nPROJECTS = shlex.split(os.environ.get('PROJECTS', ''))\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/tests/test_integration.py"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 23,
                  "endLine": 32,
                  "endColumn": 28,
                  "snippet": {
                    "text": "\nPIPFLAGS = shlex.split(os.environ.get('PIPFLAGS', ''))\nPIPVERSION = os.environ.get('PIPVERSION', 'pip')\nPBRVERSION = os.environ.get('PBRVERSION', 'pbr')\nREPODIR = os.environ.get('REPODIR', '')\nWHEELHOUSE = os.environ.get('WHEELHOUSE', '')\nPIP_CMD = ['-m', 'pip'] + PIPFLAGS + ['install', '-f', WHEELHOUSE]\n",
                    "rendered": {
                      "text": "\nPIPFLAGS = shlex.split(os.environ.get('PIPFLAGS', ''))\nPIPVERSION = os.environ.get('PIPVERSION', 'pip')\nPBRVERSION = os.environ.get('PBRVERSION', 'pbr')\nREPODIR = os.environ.get('REPODIR', '')\nWHEELHOUSE = os.environ.get('WHEELHOUSE', '')\nPIP_CMD = ['-m', 'pip'] + PIPFLAGS + ['install', '-f', WHEELHOUSE]\n",
                      "markdown": "`\nPIPFLAGS = shlex.split(os.environ.get('PIPFLAGS', ''))\nPIPVERSION = os.environ.get('PIPVERSION', 'pip')\nPBRVERSION = os.environ.get('PBRVERSION', 'pbr')\nREPODIR = os.environ.get('REPODIR', '')\nWHEELHOUSE = os.environ.get('WHEELHOUSE', '')\nPIP_CMD = ['-m', 'pip'] + PIPFLAGS + ['install', '-f', WHEELHOUSE]\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/tests/test_integration.py"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 23,
                  "endLine": 31,
                  "endColumn": 28,
                  "snippet": {
                    "text": "from pbr.tests import test_packaging\n\nPIPFLAGS = shlex.split(os.environ.get('PIPFLAGS', ''))\nPIPVERSION = os.environ.get('PIPVERSION', 'pip')\nPBRVERSION = os.environ.get('PBRVERSION', 'pbr')\nREPODIR = os.environ.get('REPODIR', '')\nWHEELHOUSE = os.environ.get('WHEELHOUSE', '')\n",
                    "rendered": {
                      "text": "from pbr.tests import test_packaging\n\nPIPFLAGS = shlex.split(os.environ.get('PIPFLAGS', ''))\nPIPVERSION = os.environ.get('PIPVERSION', 'pip')\nPBRVERSION = os.environ.get('PBRVERSION', 'pbr')\nREPODIR = os.environ.get('REPODIR', '')\nWHEELHOUSE = os.environ.get('WHEELHOUSE', '')\n",
                      "markdown": "`from pbr.tests import test_packaging\n\nPIPFLAGS = shlex.split(os.environ.get('PIPFLAGS', ''))\nPIPVERSION = os.environ.get('PIPVERSION', 'pip')\nPBRVERSION = os.environ.get('PBRVERSION', 'pbr')\nREPODIR = os.environ.get('REPODIR', '')\nWHEELHOUSE = os.environ.get('WHEELHOUSE', '')\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/tests/test_integration.py"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 33,
                  "endLine": 30,
                  "endColumn": 38,
                  "snippet": {
                    "text": "from pbr.tests import base\nfrom pbr.tests import test_packaging\n\nPIPFLAGS = shlex.split(os.environ.get('PIPFLAGS', ''))\nPIPVERSION = os.environ.get('PIPVERSION', 'pip')\nPBRVERSION = os.environ.get('PBRVERSION', 'pbr')\nREPODIR = os.environ.get('REPODIR', '')\n",
                    "rendered": {
                      "text": "from pbr.tests import base\nfrom pbr.tests import test_packaging\n\nPIPFLAGS = shlex.split(os.environ.get('PIPFLAGS', ''))\nPIPVERSION = os.environ.get('PIPVERSION', 'pip')\nPBRVERSION = os.environ.get('PBRVERSION', 'pbr')\nREPODIR = os.environ.get('REPODIR', '')\n",
                      "markdown": "`from pbr.tests import base\nfrom pbr.tests import test_packaging\n\nPIPFLAGS = shlex.split(os.environ.get('PIPFLAGS', ''))\nPIPVERSION = os.environ.get('PIPVERSION', 'pip')\nPBRVERSION = os.environ.get('PBRVERSION', 'pbr')\nREPODIR = os.environ.get('REPODIR', '')\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/tests/test_integration.py"
                },
                "region": {
                  "startLine": 291,
                  "startColumn": 11,
                  "endLine": 291,
                  "endColumn": 22,
                  "snippet": {
                    "text": "    scenarios = lts_scenarios\n\n    @testtools.skipUnless(\n        os.environ.get('PBR_INTEGRATION', None) == '1',\n        'integration tests not enabled',\n    )\n    def test_lts_venv_default_versions(self):\n",
                    "rendered": {
                      "text": "    scenarios = lts_scenarios\n\n    @testtools.skipUnless(\n        os.environ.get('PBR_INTEGRATION', None) == '1',\n        'integration tests not enabled',\n    )\n    def test_lts_venv_default_versions(self):\n",
                      "markdown": "`    scenarios = lts_scenarios\n\n    @testtools.skipUnless(\n        os.environ.get('PBR_INTEGRATION', None) == '1',\n        'integration tests not enabled',\n    )\n    def test_lts_venv_default_versions(self):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/tests/test_integration.py"
                },
                "region": {
                  "startLine": 228,
                  "startColumn": 11,
                  "endLine": 228,
                  "endColumn": 22,
                  "snippet": {
                    "text": "    ]\n\n    @testtools.skipUnless(\n        os.environ.get('PBR_INTEGRATION', None) == '1',\n        'integration tests not enabled',\n    )\n    def test_pip_versions(self):\n",
                    "rendered": {
                      "text": "    ]\n\n    @testtools.skipUnless(\n        os.environ.get('PBR_INTEGRATION', None) == '1',\n        'integration tests not enabled',\n    )\n    def test_pip_versions(self):\n",
                      "markdown": "`    ]\n\n    @testtools.skipUnless(\n        os.environ.get('PBR_INTEGRATION', None) == '1',\n        'integration tests not enabled',\n    )\n    def test_pip_versions(self):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/tests/test_integration.py"
                },
                "region": {
                  "startLine": 157,
                  "startColumn": 11,
                  "endLine": 157,
                  "endColumn": 22,
                  "snippet": {
                    "text": "class TestInstallWithoutPbr(base.BaseTestCase):\n\n    @testtools.skipUnless(\n        os.environ.get('PBR_INTEGRATION', None) == '1',\n        'integration tests not enabled')\n    def test_install_without_pbr(self):\n        # Test easy-install of a thing that depends on a thing using pbr\n",
                    "rendered": {
                      "text": "class TestInstallWithoutPbr(base.BaseTestCase):\n\n    @testtools.skipUnless(\n        os.environ.get('PBR_INTEGRATION', None) == '1',\n        'integration tests not enabled')\n    def test_install_without_pbr(self):\n        # Test easy-install of a thing that depends on a thing using pbr\n",
                      "markdown": "`class TestInstallWithoutPbr(base.BaseTestCase):\n\n    @testtools.skipUnless(\n        os.environ.get('PBR_INTEGRATION', None) == '1',\n        'integration tests not enabled')\n    def test_install_without_pbr(self):\n        # Test easy-install of a thing that depends on a thing using pbr\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/tests/test_integration.py"
                },
                "region": {
                  "startLine": 74,
                  "startColumn": 11,
                  "endLine": 74,
                  "endColumn": 22,
                  "snippet": {
                    "text": "        base._config_git()\n\n    @testtools.skipUnless(\n        os.environ.get('PBR_INTEGRATION', None) == '1',\n        'integration tests not enabled')\n    def test_integration(self):\n        # Test that we can:\n",
                    "rendered": {
                      "text": "        base._config_git()\n\n    @testtools.skipUnless(\n        os.environ.get('PBR_INTEGRATION', None) == '1',\n        'integration tests not enabled')\n    def test_integration(self):\n        # Test that we can:\n",
                      "markdown": "`        base._config_git()\n\n    @testtools.skipUnless(\n        os.environ.get('PBR_INTEGRATION', None) == '1',\n        'integration tests not enabled')\n    def test_integration(self):\n        # Test that we can:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/tests/test_integration.py"
                },
                "region": {
                  "startLine": 68,
                  "startColumn": 34,
                  "endLine": 68,
                  "endColumn": 45,
                  "snippet": {
                    "text": "        # Integration tests need a higher default - big repos can be slow to\n        # clone, particularly under guest load.\n        env = fixtures.EnvironmentVariable(\n            'OS_TEST_TIMEOUT', os.environ.get('OS_TEST_TIMEOUT', '600'))\n        with env:\n            super(TestIntegration, self).setUp()\n        base._config_git()\n",
                    "rendered": {
                      "text": "        # Integration tests need a higher default - big repos can be slow to\n        # clone, particularly under guest load.\n        env = fixtures.EnvironmentVariable(\n            'OS_TEST_TIMEOUT', os.environ.get('OS_TEST_TIMEOUT', '600'))\n        with env:\n            super(TestIntegration, self).setUp()\n        base._config_git()\n",
                      "markdown": "`        # Integration tests need a higher default - big repos can be slow to\n        # clone, particularly under guest load.\n        env = fixtures.EnvironmentVariable(\n            'OS_TEST_TIMEOUT', os.environ.get('OS_TEST_TIMEOUT', '600'))\n        with env:\n            super(TestIntegration, self).setUp()\n        base._config_git()\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/tests/test_integration.py"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 26,
                  "endLine": 36,
                  "endColumn": 37,
                  "snippet": {
                    "text": "REPODIR = os.environ.get('REPODIR', '')\nWHEELHOUSE = os.environ.get('WHEELHOUSE', '')\nPIP_CMD = ['-m', 'pip'] + PIPFLAGS + ['install', '-f', WHEELHOUSE]\nPROJECTS = shlex.split(os.environ.get('PROJECTS', ''))\nPBR_ROOT = os.path.abspath(os.path.join(__file__, '..', '..', '..'))\n\n\n",
                    "rendered": {
                      "text": "REPODIR = os.environ.get('REPODIR', '')\nWHEELHOUSE = os.environ.get('WHEELHOUSE', '')\nPIP_CMD = ['-m', 'pip'] + PIPFLAGS + ['install', '-f', WHEELHOUSE]\nPROJECTS = shlex.split(os.environ.get('PROJECTS', ''))\nPBR_ROOT = os.path.abspath(os.path.join(__file__, '..', '..', '..'))\n\n\n",
                      "markdown": "`REPODIR = os.environ.get('REPODIR', '')\nWHEELHOUSE = os.environ.get('WHEELHOUSE', '')\nPIP_CMD = ['-m', 'pip'] + PIPFLAGS + ['install', '-f', WHEELHOUSE]\nPROJECTS = shlex.split(os.environ.get('PROJECTS', ''))\nPBR_ROOT = os.path.abspath(os.path.join(__file__, '..', '..', '..'))\n\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/tests/test_integration.py"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 16,
                  "endLine": 34,
                  "endColumn": 27,
                  "snippet": {
                    "text": "PIPVERSION = os.environ.get('PIPVERSION', 'pip')\nPBRVERSION = os.environ.get('PBRVERSION', 'pbr')\nREPODIR = os.environ.get('REPODIR', '')\nWHEELHOUSE = os.environ.get('WHEELHOUSE', '')\nPIP_CMD = ['-m', 'pip'] + PIPFLAGS + ['install', '-f', WHEELHOUSE]\nPROJECTS = shlex.split(os.environ.get('PROJECTS', ''))\nPBR_ROOT = os.path.abspath(os.path.join(__file__, '..', '..', '..'))\n",
                    "rendered": {
                      "text": "PIPVERSION = os.environ.get('PIPVERSION', 'pip')\nPBRVERSION = os.environ.get('PBRVERSION', 'pbr')\nREPODIR = os.environ.get('REPODIR', '')\nWHEELHOUSE = os.environ.get('WHEELHOUSE', '')\nPIP_CMD = ['-m', 'pip'] + PIPFLAGS + ['install', '-f', WHEELHOUSE]\nPROJECTS = shlex.split(os.environ.get('PROJECTS', ''))\nPBR_ROOT = os.path.abspath(os.path.join(__file__, '..', '..', '..'))\n",
                      "markdown": "`PIPVERSION = os.environ.get('PIPVERSION', 'pip')\nPBRVERSION = os.environ.get('PBRVERSION', 'pbr')\nREPODIR = os.environ.get('REPODIR', '')\nWHEELHOUSE = os.environ.get('WHEELHOUSE', '')\nPIP_CMD = ['-m', 'pip'] + PIPFLAGS + ['install', '-f', WHEELHOUSE]\nPROJECTS = shlex.split(os.environ.get('PROJECTS', ''))\nPBR_ROOT = os.path.abspath(os.path.join(__file__, '..', '..', '..'))\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/tests/test_integration.py"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 13,
                  "endLine": 33,
                  "endColumn": 24,
                  "snippet": {
                    "text": "PIPFLAGS = shlex.split(os.environ.get('PIPFLAGS', ''))\nPIPVERSION = os.environ.get('PIPVERSION', 'pip')\nPBRVERSION = os.environ.get('PBRVERSION', 'pbr')\nREPODIR = os.environ.get('REPODIR', '')\nWHEELHOUSE = os.environ.get('WHEELHOUSE', '')\nPIP_CMD = ['-m', 'pip'] + PIPFLAGS + ['install', '-f', WHEELHOUSE]\nPROJECTS = shlex.split(os.environ.get('PROJECTS', ''))\n",
                    "rendered": {
                      "text": "PIPFLAGS = shlex.split(os.environ.get('PIPFLAGS', ''))\nPIPVERSION = os.environ.get('PIPVERSION', 'pip')\nPBRVERSION = os.environ.get('PBRVERSION', 'pbr')\nREPODIR = os.environ.get('REPODIR', '')\nWHEELHOUSE = os.environ.get('WHEELHOUSE', '')\nPIP_CMD = ['-m', 'pip'] + PIPFLAGS + ['install', '-f', WHEELHOUSE]\nPROJECTS = shlex.split(os.environ.get('PROJECTS', ''))\n",
                      "markdown": "`PIPFLAGS = shlex.split(os.environ.get('PIPFLAGS', ''))\nPIPVERSION = os.environ.get('PIPVERSION', 'pip')\nPBRVERSION = os.environ.get('PBRVERSION', 'pbr')\nREPODIR = os.environ.get('REPODIR', '')\nWHEELHOUSE = os.environ.get('WHEELHOUSE', '')\nPIP_CMD = ['-m', 'pip'] + PIPFLAGS + ['install', '-f', WHEELHOUSE]\nPROJECTS = shlex.split(os.environ.get('PROJECTS', ''))\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/tests/test_integration.py"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 16,
                  "endLine": 32,
                  "endColumn": 27,
                  "snippet": {
                    "text": "\nPIPFLAGS = shlex.split(os.environ.get('PIPFLAGS', ''))\nPIPVERSION = os.environ.get('PIPVERSION', 'pip')\nPBRVERSION = os.environ.get('PBRVERSION', 'pbr')\nREPODIR = os.environ.get('REPODIR', '')\nWHEELHOUSE = os.environ.get('WHEELHOUSE', '')\nPIP_CMD = ['-m', 'pip'] + PIPFLAGS + ['install', '-f', WHEELHOUSE]\n",
                    "rendered": {
                      "text": "\nPIPFLAGS = shlex.split(os.environ.get('PIPFLAGS', ''))\nPIPVERSION = os.environ.get('PIPVERSION', 'pip')\nPBRVERSION = os.environ.get('PBRVERSION', 'pbr')\nREPODIR = os.environ.get('REPODIR', '')\nWHEELHOUSE = os.environ.get('WHEELHOUSE', '')\nPIP_CMD = ['-m', 'pip'] + PIPFLAGS + ['install', '-f', WHEELHOUSE]\n",
                      "markdown": "`\nPIPFLAGS = shlex.split(os.environ.get('PIPFLAGS', ''))\nPIPVERSION = os.environ.get('PIPVERSION', 'pip')\nPBRVERSION = os.environ.get('PBRVERSION', 'pbr')\nREPODIR = os.environ.get('REPODIR', '')\nWHEELHOUSE = os.environ.get('WHEELHOUSE', '')\nPIP_CMD = ['-m', 'pip'] + PIPFLAGS + ['install', '-f', WHEELHOUSE]\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/tests/test_integration.py"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 16,
                  "endLine": 31,
                  "endColumn": 27,
                  "snippet": {
                    "text": "from pbr.tests import test_packaging\n\nPIPFLAGS = shlex.split(os.environ.get('PIPFLAGS', ''))\nPIPVERSION = os.environ.get('PIPVERSION', 'pip')\nPBRVERSION = os.environ.get('PBRVERSION', 'pbr')\nREPODIR = os.environ.get('REPODIR', '')\nWHEELHOUSE = os.environ.get('WHEELHOUSE', '')\n",
                    "rendered": {
                      "text": "from pbr.tests import test_packaging\n\nPIPFLAGS = shlex.split(os.environ.get('PIPFLAGS', ''))\nPIPVERSION = os.environ.get('PIPVERSION', 'pip')\nPBRVERSION = os.environ.get('PBRVERSION', 'pbr')\nREPODIR = os.environ.get('REPODIR', '')\nWHEELHOUSE = os.environ.get('WHEELHOUSE', '')\n",
                      "markdown": "`from pbr.tests import test_packaging\n\nPIPFLAGS = shlex.split(os.environ.get('PIPFLAGS', ''))\nPIPVERSION = os.environ.get('PIPVERSION', 'pip')\nPBRVERSION = os.environ.get('PBRVERSION', 'pbr')\nREPODIR = os.environ.get('REPODIR', '')\nWHEELHOUSE = os.environ.get('WHEELHOUSE', '')\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/tests/test_integration.py"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 26,
                  "endLine": 30,
                  "endColumn": 37,
                  "snippet": {
                    "text": "from pbr.tests import base\nfrom pbr.tests import test_packaging\n\nPIPFLAGS = shlex.split(os.environ.get('PIPFLAGS', ''))\nPIPVERSION = os.environ.get('PIPVERSION', 'pip')\nPBRVERSION = os.environ.get('PBRVERSION', 'pbr')\nREPODIR = os.environ.get('REPODIR', '')\n",
                    "rendered": {
                      "text": "from pbr.tests import base\nfrom pbr.tests import test_packaging\n\nPIPFLAGS = shlex.split(os.environ.get('PIPFLAGS', ''))\nPIPVERSION = os.environ.get('PIPVERSION', 'pip')\nPBRVERSION = os.environ.get('PBRVERSION', 'pbr')\nREPODIR = os.environ.get('REPODIR', '')\n",
                      "markdown": "`from pbr.tests import base\nfrom pbr.tests import test_packaging\n\nPIPFLAGS = shlex.split(os.environ.get('PIPFLAGS', ''))\nPIPVERSION = os.environ.get('PIPVERSION', 'pip')\nPBRVERSION = os.environ.get('PBRVERSION', 'pbr')\nREPODIR = os.environ.get('REPODIR', '')\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/cmd/main.py"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 26,
                  "endLine": 7,
                  "snippet": {
                    "text": "#\n#    Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n#    not use this file except in compliance with the License. You may obtain\n#    a copy of the License at\n#\n#         http://www.apache.org/licenses/LICENSE-2.0\n#\n#    Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n#    Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n#    not use this file except in compliance with the License. You may obtain\n#    a copy of the License at\n#\n#         http://www.apache.org/licenses/LICENSE-2.0\n#\n#    Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n#    Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n#    not use this file except in compliance with the License. You may obtain\n#    a copy of the License at\n#\n#         http://www.apache.org/licenses/LICENSE-2.0\n#\n#    Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/cmd/main.py"
                },
                "region": {
                  "startLine": 80,
                  "startColumn": 26,
                  "endLine": 80,
                  "endColumn": 31,
                  "snippet": {
                    "text": "        info = _get_info(dist.project_name)\n        output = \"{name}=={version}\".format(**info)\n        if info['sha']:\n            output += \"  # git sha {sha}\".format(**info)\n        print(output)\n\n\n",
                    "rendered": {
                      "text": "        info = _get_info(dist.project_name)\n        output = \"{name}=={version}\".format(**info)\n        if info['sha']:\n            output += \"  # git sha {sha}\".format(**info)\n        print(output)\n\n\n",
                      "markdown": "`        info = _get_info(dist.project_name)\n        output = \"{name}=={version}\".format(**info)\n        if info['sha']:\n            output += \"  # git sha {sha}\".format(**info)\n        print(output)\n\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/hooks/__init__.py"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 23,
                  "endLine": 7,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n# not use this file except in compliance with the License. You may obtain\n# a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n# not use this file except in compliance with the License. You may obtain\n# a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n# not use this file except in compliance with the License. You may obtain\n# a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/hooks/files.py"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 73,
                  "endLine": 29,
                  "snippet": {
                    "text": "    manpath = 'share/man'\n    if os.path.exists(os.path.join(sys.prefix, 'man')):\n        # This works around a bug with install where it expects every node\n        # in the relative data directory to be an actual directory, since at\n        # least Debian derivatives (and probably other platforms as well)\n        # like to symlink Unixish /usr/local/man to /usr/local/share/man.\n        manpath = 'man'\n    return manpath\n",
                    "rendered": {
                      "text": "    manpath = 'share/man'\n    if os.path.exists(os.path.join(sys.prefix, 'man')):\n        # This works around a bug with install where it expects every node\n        # in the relative data directory to be an actual directory, since at\n        # least Debian derivatives (and probably other platforms as well)\n        # like to symlink Unixish /usr/local/man to /usr/local/share/man.\n        manpath = 'man'\n    return manpath\n",
                      "markdown": "`    manpath = 'share/man'\n    if os.path.exists(os.path.join(sys.prefix, 'man')):\n        # This works around a bug with install where it expects every node\n        # in the relative data directory to be an actual directory, since at\n        # least Debian derivatives (and probably other platforms as well)\n        # like to symlink Unixish /usr/local/man to /usr/local/share/man.\n        manpath = 'man'\n    return manpath\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/hooks/files.py"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 23,
                  "endLine": 7,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n# not use this file except in compliance with the License. You may obtain\n# a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n# not use this file except in compliance with the License. You may obtain\n# a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n# not use this file except in compliance with the License. You may obtain\n# a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/hooks/files.py"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 69,
                  "endLine": 28,
                  "snippet": {
                    "text": "def get_manpath():\n    manpath = 'share/man'\n    if os.path.exists(os.path.join(sys.prefix, 'man')):\n        # This works around a bug with install where it expects every node\n        # in the relative data directory to be an actual directory, since at\n        # least Debian derivatives (and probably other platforms as well)\n        # like to symlink Unixish /usr/local/man to /usr/local/share/man.\n        manpath = 'man'\n",
                    "rendered": {
                      "text": "def get_manpath():\n    manpath = 'share/man'\n    if os.path.exists(os.path.join(sys.prefix, 'man')):\n        # This works around a bug with install where it expects every node\n        # in the relative data directory to be an actual directory, since at\n        # least Debian derivatives (and probably other platforms as well)\n        # like to symlink Unixish /usr/local/man to /usr/local/share/man.\n        manpath = 'man'\n",
                      "markdown": "`def get_manpath():\n    manpath = 'share/man'\n    if os.path.exists(os.path.join(sys.prefix, 'man')):\n        # This works around a bug with install where it expects every node\n        # in the relative data directory to be an actual directory, since at\n        # least Debian derivatives (and probably other platforms as well)\n        # like to symlink Unixish /usr/local/man to /usr/local/share/man.\n        manpath = 'man'\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/hooks/files.py"
                },
                "region": {
                  "startLine": 110,
                  "startColumn": 30,
                  "endLine": 110,
                  "endColumn": 35,
                  "snippet": {
                    "text": "        return man_sections\n\n    def hook(self):\n        packages = self.config.get('packages', self.name).strip()\n        expanded = []\n        for pkg in packages.split(\"\\n\"):\n            if os.path.isdir(pkg.strip()):\n",
                    "rendered": {
                      "text": "        return man_sections\n\n    def hook(self):\n        packages = self.config.get('packages', self.name).strip()\n        expanded = []\n        for pkg in packages.split(\"\\n\"):\n            if os.path.isdir(pkg.strip()):\n",
                      "markdown": "`        return man_sections\n\n    def hook(self):\n        packages = self.config.get('packages', self.name).strip()\n        expanded = []\n        for pkg in packages.split(\"\\n\"):\n            if os.path.isdir(pkg.strip()):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/hooks/files.py"
                },
                "region": {
                  "startLine": 104,
                  "startColumn": 34,
                  "endLine": 104,
                  "endColumn": 39,
                  "snippet": {
                    "text": "        manpages = self.pbr_config['manpages']\n        for manpage in manpages.split():\n            section_number = manpage.strip()[-1]\n            section = man_sections.get(section_number, list())\n            section.append(manpage.strip())\n            man_sections[section_number] = section\n        return man_sections\n",
                    "rendered": {
                      "text": "        manpages = self.pbr_config['manpages']\n        for manpage in manpages.split():\n            section_number = manpage.strip()[-1]\n            section = man_sections.get(section_number, list())\n            section.append(manpage.strip())\n            man_sections[section_number] = section\n        return man_sections\n",
                      "markdown": "`        manpages = self.pbr_config['manpages']\n        for manpage in manpages.split():\n            section_number = manpage.strip()[-1]\n            section = man_sections.get(section_number, list())\n            section.append(manpage.strip())\n            man_sections[section_number] = section\n        return man_sections\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/hooks/files.py"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 37,
                  "endLine": 61,
                  "endColumn": 42,
                  "snippet": {
                    "text": "    def __init__(self, config, name):\n        super(FilesConfig, self).__init__(config)\n        self.name = name\n        self.data_files = self.config.get('data_files', '')\n\n    def save(self):\n        self.config['data_files'] = self.data_files\n",
                    "rendered": {
                      "text": "    def __init__(self, config, name):\n        super(FilesConfig, self).__init__(config)\n        self.name = name\n        self.data_files = self.config.get('data_files', '')\n\n    def save(self):\n        self.config['data_files'] = self.data_files\n",
                      "markdown": "`    def __init__(self, config, name):\n        super(FilesConfig, self).__init__(config)\n        self.name = name\n        self.data_files = self.config.get('data_files', '')\n\n    def save(self):\n        self.config['data_files'] = self.data_files\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/releasenotes/notes/v_version-457b38c8679c5868.yaml"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 30,
                  "endLine": 4,
                  "endColumn": 35,
                  "snippet": {
                    "text": "---\nfeatures:\n  - |\n    Support version parsing of git tag with the ``v<semver>`` pattern\n    (or ``V<semver>``), in addition to ``<semver>``.\n",
                    "rendered": {
                      "text": "---\nfeatures:\n  - |\n    Support version parsing of git tag with the ``v<semver>`` pattern\n    (or ``V<semver>``), in addition to ``<semver>``.\n",
                      "markdown": "`---\nfeatures:\n  - |\n    Support version parsing of git tag with the ``v<semver>`` pattern\n    (or ``V<semver>``), in addition to ``<semver>``.\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/ChangeLog"
                },
                "region": {
                  "startLine": 1046,
                  "startColumn": 1,
                  "endLine": 1046,
                  "endColumn": 9,
                  "snippet": {
                    "text": "* Add common logging and notification\n* Add support for tag based versioning\n* Skip argparse when injecting requirements\n* Update common code to support pep 1.3. bug 1014216\n* Add autodoc generation to the build\\_sphinx command\n* Use 'is not None' instead of '!= None'\n* Adds support for bol and eol spaces to ini files\n",
                    "rendered": {
                      "text": "* Add common logging and notification\n* Add support for tag based versioning\n* Skip argparse when injecting requirements\n* Update common code to support pep 1.3. bug 1014216\n* Add autodoc generation to the build\\_sphinx command\n* Use 'is not None' instead of '!= None'\n* Adds support for bol and eol spaces to ini files\n",
                      "markdown": "`* Add common logging and notification\n* Add support for tag based versioning\n* Skip argparse when injecting requirements\n* Update common code to support pep 1.3. bug 1014216\n* Add autodoc generation to the build\\_sphinx command\n* Use 'is not None' instead of '!= None'\n* Adds support for bol and eol spaces to ini files\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/ChangeLog"
                },
                "region": {
                  "startLine": 950,
                  "startColumn": 97,
                  "endLine": 950,
                  "endColumn": 101,
                  "snippet": {
                    "text": "generation\n* Adds support for the tests\\_require keyword from setuptools.  Tested by eating our own dogfood -- ./setup.py test now works for d2to1's own setup\n* support test suite and test tests-require\n* Patch manifest\\_maker to support extra\\_files--this is really the only way I can see to do this at all sensibly\n* This is a test that should really work to test this feature\n* openstack.common.setup: fails to get version from git\n* Use oslo-config-2013.1b3\n* Change the check for the existence of .git directory\n* returncode for Popen is valid only after communicate call\n* sort options to make --he",
                    "rendered": {
                      "text": "generation\n* Adds support for the tests\\_require keyword from setuptools.  Tested by eating our own dogfood -- ./setup.py test now works for d2to1's own setup\n* support test suite and test tests-require\n* Patch manifest\\_maker to support extra\\_files--this is really the only way I can see to do this at all sensibly\n* This is a test that should really work to test this feature\n* openstack.common.setup: fails to get version from git\n* Use oslo-config-2013.1b3\n* Change the check for the existence of .git directory\n* returncode for Popen is valid only after communicate call\n* sort options to make --he",
                      "markdown": "`generation\n* Adds support for the tests\\_require keyword from setuptools.  Tested by eating our own dogfood -- ./setup.py test now works for d2to1's own setup\n* support test suite and test tests-require\n* Patch manifest\\_maker to support extra\\_files--this is really the only way I can see to do this at all sensibly\n* This is a test that should really work to test this feature\n* openstack.common.setup: fails to get version from git\n* Use oslo-config-2013.1b3\n* Change the check for the existence of .git directory\n* returncode for Popen is valid only after communicate call\n* sort options to make --he`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/ChangeLog"
                },
                "region": {
                  "startLine": 929,
                  "startColumn": 1,
                  "endLine": 929,
                  "endColumn": 9,
                  "snippet": {
                    "text": "* Move sphinx to test-reuqirements\n* Deal with Sphinx import ordering\n* Add a better todo comment\n* Update docs\n* Just use d2to1 via hooks mechanism\n* Add a few more backwards compatibility options\n* Fix exception handling error\n",
                    "rendered": {
                      "text": "* Move sphinx to test-reuqirements\n* Deal with Sphinx import ordering\n* Add a better todo comment\n* Update docs\n* Just use d2to1 via hooks mechanism\n* Add a few more backwards compatibility options\n* Fix exception handling error\n",
                      "markdown": "`* Move sphinx to test-reuqirements\n* Deal with Sphinx import ordering\n* Add a better todo comment\n* Update docs\n* Just use d2to1 via hooks mechanism\n* Add a few more backwards compatibility options\n* Fix exception handling error\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/ChangeLog"
                },
                "region": {
                  "startLine": 924,
                  "startColumn": 1,
                  "endLine": 924,
                  "endColumn": 9,
                  "snippet": {
                    "text": "* Cleaned up stdout capture invocation\n* Put stdout capture in the base test class\n* Amended README testing instructions\n* Update README with test running instructions\n* Move setup\\_requires to setup\\_requires\\_dist\n* Move sphinx to test-reuqirements\n* Deal with Sphinx import ordering\n",
                    "rendered": {
                      "text": "* Cleaned up stdout capture invocation\n* Put stdout capture in the base test class\n* Amended README testing instructions\n* Update README with test running instructions\n* Move setup\\_requires to setup\\_requires\\_dist\n* Move sphinx to test-reuqirements\n* Deal with Sphinx import ordering\n",
                      "markdown": "`* Cleaned up stdout capture invocation\n* Put stdout capture in the base test class\n* Amended README testing instructions\n* Update README with test running instructions\n* Move setup\\_requires to setup\\_requires\\_dist\n* Move sphinx to test-reuqirements\n* Deal with Sphinx import ordering\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/ChangeLog"
                },
                "region": {
                  "startLine": 915,
                  "startColumn": 1,
                  "endLine": 915,
                  "endColumn": 9,
                  "snippet": {
                    "text": "0.5.0\n-----\n\n* Update documentation for release\n* Rename back to PBR\n* Remove extra complexity of six.u wrapper\n* Add contributing file\n",
                    "rendered": {
                      "text": "0.5.0\n-----\n\n* Update documentation for release\n* Rename back to PBR\n* Remove extra complexity of six.u wrapper\n* Add contributing file\n",
                      "markdown": "`0.5.0\n-----\n\n* Update documentation for release\n* Rename back to PBR\n* Remove extra complexity of six.u wrapper\n* Add contributing file\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/ChangeLog"
                },
                "region": {
                  "startLine": 907,
                  "startColumn": 1,
                  "endLine": 907,
                  "endColumn": 9,
                  "snippet": {
                    "text": "* Ported in Co-authored-by support from oslo\n* Fix up the test suite to actually all pass\n* Added version code\n* Update tox to run hacking\n* Make hacking compliant\n* Ensure that reuqirements files are shipped\n* Add MANIFEST.in\n",
                    "rendered": {
                      "text": "* Ported in Co-authored-by support from oslo\n* Fix up the test suite to actually all pass\n* Added version code\n* Update tox to run hacking\n* Make hacking compliant\n* Ensure that reuqirements files are shipped\n* Add MANIFEST.in\n",
                      "markdown": "`* Ported in Co-authored-by support from oslo\n* Fix up the test suite to actually all pass\n* Added version code\n* Update tox to run hacking\n* Make hacking compliant\n* Ensure that reuqirements files are shipped\n* Add MANIFEST.in\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/ChangeLog"
                },
                "region": {
                  "startLine": 884,
                  "startColumn": 1,
                  "endLine": 884,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\n* Default to single-version-externally-managed\n* Add config for skipping authors and changelog\n* Update to d2to1 0.2.10\n* Added some additional zest.releaser hooks to deal with some perpetual annoyances of doing releases\n* When catching exceptions from a setup-hook don't throw a traceback up for sys.exit()\n\n",
                    "rendered": {
                      "text": "\n* Default to single-version-externally-managed\n* Add config for skipping authors and changelog\n* Update to d2to1 0.2.10\n* Added some additional zest.releaser hooks to deal with some perpetual annoyances of doing releases\n* When catching exceptions from a setup-hook don't throw a traceback up for sys.exit()\n\n",
                      "markdown": "`\n* Default to single-version-externally-managed\n* Add config for skipping authors and changelog\n* Update to d2to1 0.2.10\n* Added some additional zest.releaser hooks to deal with some perpetual annoyances of doing releases\n* When catching exceptions from a setup-hook don't throw a traceback up for sys.exit()\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/ChangeLog"
                },
                "region": {
                  "startLine": 814,
                  "startColumn": 16,
                  "endLine": 814,
                  "endColumn": 20,
                  "snippet": {
                    "text": "\n* Add Python 3.3 checking\n* Fix some issues in setup.py test\n* Put AUTHORS.in at the top of AUTHORS\n* Support version override with PBR prefix\n* Don't try to install requirements repo\n* Allow pip installation to be skipped\n",
                    "rendered": {
                      "text": "\n* Add Python 3.3 checking\n* Fix some issues in setup.py test\n* Put AUTHORS.in at the top of AUTHORS\n* Support version override with PBR prefix\n* Don't try to install requirements repo\n* Allow pip installation to be skipped\n",
                      "markdown": "`\n* Add Python 3.3 checking\n* Fix some issues in setup.py test\n* Put AUTHORS.in at the top of AUTHORS\n* Support version override with PBR prefix\n* Don't try to install requirements repo\n* Allow pip installation to be skipped\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/ChangeLog"
                },
                "region": {
                  "startLine": 766,
                  "startColumn": 1,
                  "endLine": 766,
                  "endColumn": 9,
                  "snippet": {
                    "text": "* Stop checking periods in commit messages\n* Fixes issue with command escaping on Windows\n* Added documentation for packagers\n* Update requirements in integration test\n* Sync requirements with global requirements\n* Fix pep8 error\n* Add option to run testr serially\n",
                    "rendered": {
                      "text": "* Stop checking periods in commit messages\n* Fixes issue with command escaping on Windows\n* Added documentation for packagers\n* Update requirements in integration test\n* Sync requirements with global requirements\n* Fix pep8 error\n* Add option to run testr serially\n",
                      "markdown": "`* Stop checking periods in commit messages\n* Fixes issue with command escaping on Windows\n* Added documentation for packagers\n* Update requirements in integration test\n* Sync requirements with global requirements\n* Fix pep8 error\n* Add option to run testr serially\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/ChangeLog"
                },
                "region": {
                  "startLine": 759,
                  "startColumn": 1,
                  "endLine": 759,
                  "endColumn": 9,
                  "snippet": {
                    "text": "* Switch away from tearDown for BaseTests\n* Fix test\\_changelog when git isn't globally setup\n* Rework run\\_shell\\_command\n* Update tox config to use latest upgrades\n* Add a hint for users who don't have git installed\n* Add pypy to tox.ini\n* Fix python-ldap mirroring\n",
                    "rendered": {
                      "text": "* Switch away from tearDown for BaseTests\n* Fix test\\_changelog when git isn't globally setup\n* Rework run\\_shell\\_command\n* Update tox config to use latest upgrades\n* Add a hint for users who don't have git installed\n* Add pypy to tox.ini\n* Fix python-ldap mirroring\n",
                      "markdown": "`* Switch away from tearDown for BaseTests\n* Fix test\\_changelog when git isn't globally setup\n* Rework run\\_shell\\_command\n* Update tox config to use latest upgrades\n* Add a hint for users who don't have git installed\n* Add pypy to tox.ini\n* Fix python-ldap mirroring\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/ChangeLog"
                },
                "region": {
                  "startLine": 664,
                  "startColumn": 1,
                  "endLine": 664,
                  "endColumn": 9,
                  "snippet": {
                    "text": "-----\n\n* Allow examining parsing exceptions\n* Update integration script for Apache 2.4\n* Restore Monkeypatched Distribution Instance\n* Register testr as a distutil entry point\n* Check for git before querying it for a version\n",
                    "rendered": {
                      "text": "-----\n\n* Allow examining parsing exceptions\n* Update integration script for Apache 2.4\n* Restore Monkeypatched Distribution Instance\n* Register testr as a distutil entry point\n* Check for git before querying it for a version\n",
                      "markdown": "`-----\n\n* Allow examining parsing exceptions\n* Update integration script for Apache 2.4\n* Restore Monkeypatched Distribution Instance\n* Register testr as a distutil entry point\n* Check for git before querying it for a version\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/ChangeLog"
                },
                "region": {
                  "startLine": 582,
                  "startColumn": 1,
                  "endLine": 582,
                  "endColumn": 9,
                  "snippet": {
                    "text": "* \"packages\" might list multiple directories\n* Support script text override for newer develop\n* Fixes Windows generated scripts headers\n* Update README format to match release notes tool\n* Be more aggressive about building wheels\n* Use a wheelhouse in the integration test\n* Build a wheel when integration testing PBR changes\n",
                    "rendered": {
                      "text": "* \"packages\" might list multiple directories\n* Support script text override for newer develop\n* Fixes Windows generated scripts headers\n* Update README format to match release notes tool\n* Be more aggressive about building wheels\n* Use a wheelhouse in the integration test\n* Build a wheel when integration testing PBR changes\n",
                      "markdown": "`* \"packages\" might list multiple directories\n* Support script text override for newer develop\n* Fixes Windows generated scripts headers\n* Update README format to match release notes tool\n* Be more aggressive about building wheels\n* Use a wheelhouse in the integration test\n* Build a wheel when integration testing PBR changes\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/ChangeLog"
                },
                "region": {
                  "startLine": 547,
                  "startColumn": 1,
                  "endLine": 547,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\n* Remove self.pre\\_run calls in packaging.py\n* Add kerberos deps to build the kerberos wheel\n* Update hacking to 0.10.x series\n\n1.0.0\n-----\n",
                    "rendered": {
                      "text": "\n* Remove self.pre\\_run calls in packaging.py\n* Add kerberos deps to build the kerberos wheel\n* Update hacking to 0.10.x series\n\n1.0.0\n-----\n",
                      "markdown": "`\n* Remove self.pre\\_run calls in packaging.py\n* Add kerberos deps to build the kerberos wheel\n* Update hacking to 0.10.x series\n\n1.0.0\n-----\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/ChangeLog"
                },
                "region": {
                  "startLine": 416,
                  "startColumn": 1,
                  "endLine": 416,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\n* File is wrongly marked as executable\n* Fix wsgiref script use with oslo.config\n* Update Preversioning explanation to avoid double that\n\n1.9.1\n-----\n",
                    "rendered": {
                      "text": "\n* File is wrongly marked as executable\n* Fix wsgiref script use with oslo.config\n* Update Preversioning explanation to avoid double that\n\n1.9.1\n-----\n",
                      "markdown": "`\n* File is wrongly marked as executable\n* Fix wsgiref script use with oslo.config\n* Update Preversioning explanation to avoid double that\n\n1.9.1\n-----\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/ChangeLog"
                },
                "region": {
                  "startLine": 387,
                  "startColumn": 1,
                  "endLine": 387,
                  "endColumn": 9,
                  "snippet": {
                    "text": "* Updated from global requirements\n* Docstrings should not start with a space\n* Changed the home-page link\n* Update .coveragerc after the removal of openstack directory\n* coverage package name option, doc improvement\n* Updated from global requirements\n* Deprecated warning for SafeConfigParser\n",
                    "rendered": {
                      "text": "* Updated from global requirements\n* Docstrings should not start with a space\n* Changed the home-page link\n* Update .coveragerc after the removal of openstack directory\n* coverage package name option, doc improvement\n* Updated from global requirements\n* Deprecated warning for SafeConfigParser\n",
                      "markdown": "`* Updated from global requirements\n* Docstrings should not start with a space\n* Changed the home-page link\n* Update .coveragerc after the removal of openstack directory\n* coverage package name option, doc improvement\n* Updated from global requirements\n* Deprecated warning for SafeConfigParser\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/ChangeLog"
                },
                "region": {
                  "startLine": 369,
                  "startColumn": 1,
                  "endLine": 369,
                  "endColumn": 9,
                  "snippet": {
                    "text": "* Make oslosphinx optional\n* Updated from global requirements\n* Also generate XML coverage report\n* Update to a newer hacking library\n\n2.0.0\n-----\n",
                    "rendered": {
                      "text": "* Make oslosphinx optional\n* Updated from global requirements\n* Also generate XML coverage report\n* Update to a newer hacking library\n\n2.0.0\n-----\n",
                      "markdown": "`* Make oslosphinx optional\n* Updated from global requirements\n* Also generate XML coverage report\n* Update to a newer hacking library\n\n2.0.0\n-----\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/ChangeLog"
                },
                "region": {
                  "startLine": 319,
                  "startColumn": 1,
                  "endLine": 319,
                  "endColumn": 9,
                  "snippet": {
                    "text": "* Updated from global requirements\n* Updated from global requirements\n* Updated from global requirements\n* Update URLs in documents according to document migration\n* Updated from global requirements\n* gitignore: Ignore .venv\n* switch from oslosphinx to openstackdocstheme\n",
                    "rendered": {
                      "text": "* Updated from global requirements\n* Updated from global requirements\n* Updated from global requirements\n* Update URLs in documents according to document migration\n* Updated from global requirements\n* gitignore: Ignore .venv\n* switch from oslosphinx to openstackdocstheme\n",
                      "markdown": "`* Updated from global requirements\n* Updated from global requirements\n* Updated from global requirements\n* Update URLs in documents according to document migration\n* Updated from global requirements\n* gitignore: Ignore .venv\n* switch from oslosphinx to openstackdocstheme\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/ChangeLog"
                },
                "region": {
                  "startLine": 283,
                  "startColumn": 1,
                  "endLine": 283,
                  "endColumn": 9,
                  "snippet": {
                    "text": "-----\n\n* builddoc: Treat '[pbr] autodoc\\_tree\\_excludes' as a multi-line opt\n* update parse test to use reliable comparison\n* Better Sem-Ver header handling\n* Make docs on env vars a little clearer\n* Updated from global requirements\n",
                    "rendered": {
                      "text": "-----\n\n* builddoc: Treat '[pbr] autodoc\\_tree\\_excludes' as a multi-line opt\n* update parse test to use reliable comparison\n* Better Sem-Ver header handling\n* Make docs on env vars a little clearer\n* Updated from global requirements\n",
                      "markdown": "`-----\n\n* builddoc: Treat '[pbr] autodoc\\_tree\\_excludes' as a multi-line opt\n* update parse test to use reliable comparison\n* Better Sem-Ver header handling\n* Make docs on env vars a little clearer\n* Updated from global requirements\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/ChangeLog"
                },
                "region": {
                  "startLine": 253,
                  "startColumn": 1,
                  "endLine": 253,
                  "endColumn": 9,
                  "snippet": {
                    "text": "4.1.0\n-----\n\n* Update python3 versions in tox.ini envlist\n* fix tox python3 overrides\n* Support python-requires metadata\n\n",
                    "rendered": {
                      "text": "4.1.0\n-----\n\n* Update python3 versions in tox.ini envlist\n* fix tox python3 overrides\n* Support python-requires metadata\n\n",
                      "markdown": "`4.1.0\n-----\n\n* Update python3 versions in tox.ini envlist\n* fix tox python3 overrides\n* Support python-requires metadata\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/ChangeLog"
                },
                "region": {
                  "startLine": 168,
                  "startColumn": 1,
                  "endLine": 168,
                  "endColumn": 9,
                  "snippet": {
                    "text": "* Remove neutron-lbaas\n* Install more dependencies for integration testing\n* Use more verbose logging for test failure\n* Update Sphinx requirement\n* Fix white space handling in file names\n\n5.2.0\n",
                    "rendered": {
                      "text": "* Remove neutron-lbaas\n* Install more dependencies for integration testing\n* Use more verbose logging for test failure\n* Update Sphinx requirement\n* Fix white space handling in file names\n\n5.2.0\n",
                      "markdown": "`* Remove neutron-lbaas\n* Install more dependencies for integration testing\n* Use more verbose logging for test failure\n* Update Sphinx requirement\n* Fix white space handling in file names\n\n5.2.0\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/ChangeLog"
                },
                "region": {
                  "startLine": 123,
                  "startColumn": 1,
                  "endLine": 123,
                  "endColumn": 9,
                  "snippet": {
                    "text": "-----\n\n* trivial: Use 'open' context manager\n* Update to latest hacking\n* Mark strings as raw\n\n5.4.3\n",
                    "rendered": {
                      "text": "-----\n\n* trivial: Use 'open' context manager\n* Update to latest hacking\n* Mark strings as raw\n\n5.4.3\n",
                      "markdown": "`-----\n\n* trivial: Use 'open' context manager\n* Update to latest hacking\n* Mark strings as raw\n\n5.4.3\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/ChangeLog"
                },
                "region": {
                  "startLine": 111,
                  "startColumn": 1,
                  "endLine": 111,
                  "endColumn": 9,
                  "snippet": {
                    "text": "* Update python requires packaging metadata for package\n* trivial: Improve logging of run commands\n* Map requires-python to python-requires\n* Update hacking\n* Add support for virtualenv 20.x\n\n5.4.5\n",
                    "rendered": {
                      "text": "* Update python requires packaging metadata for package\n* trivial: Improve logging of run commands\n* Map requires-python to python-requires\n* Update hacking\n* Add support for virtualenv 20.x\n\n5.4.5\n",
                      "markdown": "`* Update python requires packaging metadata for package\n* trivial: Improve logging of run commands\n* Map requires-python to python-requires\n* Update hacking\n* Add support for virtualenv 20.x\n\n5.4.5\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/ChangeLog"
                },
                "region": {
                  "startLine": 108,
                  "startColumn": 1,
                  "endLine": 108,
                  "endColumn": 9,
                  "snippet": {
                    "text": "* Support newer openstackdocstheme\n* Use easy\\_install.ScriptWriter.get\\_header()\n* Remove neutron-fwaas from the jobs' required project\n* Update python requires packaging metadata for package\n* trivial: Improve logging of run commands\n* Map requires-python to python-requires\n* Update hacking\n",
                    "rendered": {
                      "text": "* Support newer openstackdocstheme\n* Use easy\\_install.ScriptWriter.get\\_header()\n* Remove neutron-fwaas from the jobs' required project\n* Update python requires packaging metadata for package\n* trivial: Improve logging of run commands\n* Map requires-python to python-requires\n* Update hacking\n",
                      "markdown": "`* Support newer openstackdocstheme\n* Use easy\\_install.ScriptWriter.get\\_header()\n* Remove neutron-fwaas from the jobs' required project\n* Update python requires packaging metadata for package\n* trivial: Improve logging of run commands\n* Map requires-python to python-requires\n* Update hacking\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/ChangeLog"
                },
                "region": {
                  "startLine": 104,
                  "startColumn": 1,
                  "endLine": 104,
                  "endColumn": 9,
                  "snippet": {
                    "text": "* Cleanup old legacy devstack-gate jobs\n* Begin work to modernize pbr's integration testing\n* Re-add ChangeLog\n* Update some url to use opendev.org\n* Support newer openstackdocstheme\n* Use easy\\_install.ScriptWriter.get\\_header()\n* Remove neutron-fwaas from the jobs' required project\n",
                    "rendered": {
                      "text": "* Cleanup old legacy devstack-gate jobs\n* Begin work to modernize pbr's integration testing\n* Re-add ChangeLog\n* Update some url to use opendev.org\n* Support newer openstackdocstheme\n* Use easy\\_install.ScriptWriter.get\\_header()\n* Remove neutron-fwaas from the jobs' required project\n",
                      "markdown": "`* Cleanup old legacy devstack-gate jobs\n* Begin work to modernize pbr's integration testing\n* Re-add ChangeLog\n* Update some url to use opendev.org\n* Support newer openstackdocstheme\n* Use easy\\_install.ScriptWriter.get\\_header()\n* Remove neutron-fwaas from the jobs' required project\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/ChangeLog"
                },
                "region": {
                  "startLine": 80,
                  "startColumn": 1,
                  "endLine": 80,
                  "endColumn": 9,
                  "snippet": {
                    "text": "* Don't pass empty 'long\\_description'\n* Move flake8 as a pre-commit local target\n* Map requires-python to python-requires (attempt 2)\n* Update dependencies to avoid failure with old pip\n* Increase OS\\_TEST\\_TIMEOUT to 1200\n* Prevent test failure due to use of setpref\n* util: Convert 'D1\\_D2\\_SETUP\\_ARGS' to a list of tuples\n",
                    "rendered": {
                      "text": "* Don't pass empty 'long\\_description'\n* Move flake8 as a pre-commit local target\n* Map requires-python to python-requires (attempt 2)\n* Update dependencies to avoid failure with old pip\n* Increase OS\\_TEST\\_TIMEOUT to 1200\n* Prevent test failure due to use of setpref\n* util: Convert 'D1\\_D2\\_SETUP\\_ARGS' to a list of tuples\n",
                      "markdown": "`* Don't pass empty 'long\\_description'\n* Move flake8 as a pre-commit local target\n* Map requires-python to python-requires (attempt 2)\n* Update dependencies to avoid failure with old pip\n* Increase OS\\_TEST\\_TIMEOUT to 1200\n* Prevent test failure due to use of setpref\n* util: Convert 'D1\\_D2\\_SETUP\\_ARGS' to a list of tuples\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/ChangeLog"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 1,
                  "endLine": 21,
                  "endColumn": 9,
                  "snippet": {
                    "text": "* Run PBR integration on Ubuntu Focal too\n* Remove numpy dependencies\n* Tie recursion calls to Dist object, not module\n* Update tox.ini to work with tox 4\n\n5.11.0\n------\n",
                    "rendered": {
                      "text": "* Run PBR integration on Ubuntu Focal too\n* Remove numpy dependencies\n* Tie recursion calls to Dist object, not module\n* Update tox.ini to work with tox 4\n\n5.11.0\n------\n",
                      "markdown": "`* Run PBR integration on Ubuntu Focal too\n* Remove numpy dependencies\n* Tie recursion calls to Dist object, not module\n* Update tox.ini to work with tox 4\n\n5.11.0\n------\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/ChangeLog"
                },
                "region": {
                  "startLine": 1092,
                  "startColumn": 5,
                  "endLine": 1092,
                  "endColumn": 10,
                  "snippet": {
                    "text": "* Backslash continuations (misc.)\n* Disable ConfigParser interpolation (lp#930270)\n* Add git changelog method\n* Add git vcsversion method\n* Updated tox config for multi-python testing\n* Split functions to avoid eventlet import\n* Implements blueprint separate-nova-volumeapi\n",
                    "rendered": {
                      "text": "* Backslash continuations (misc.)\n* Disable ConfigParser interpolation (lp#930270)\n* Add git changelog method\n* Add git vcsversion method\n* Updated tox config for multi-python testing\n* Split functions to avoid eventlet import\n* Implements blueprint separate-nova-volumeapi\n",
                      "markdown": "`* Backslash continuations (misc.)\n* Disable ConfigParser interpolation (lp#930270)\n* Add git changelog method\n* Add git vcsversion method\n* Updated tox config for multi-python testing\n* Split functions to avoid eventlet import\n* Implements blueprint separate-nova-volumeapi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/ChangeLog"
                },
                "region": {
                  "startLine": 1091,
                  "startColumn": 5,
                  "endLine": 1091,
                  "endColumn": 10,
                  "snippet": {
                    "text": "* PEP8 cleanup (openstack-common)\n* Backslash continuations (misc.)\n* Disable ConfigParser interpolation (lp#930270)\n* Add git changelog method\n* Add git vcsversion method\n* Updated tox config for multi-python testing\n* Split functions to avoid eventlet import\n",
                    "rendered": {
                      "text": "* PEP8 cleanup (openstack-common)\n* Backslash continuations (misc.)\n* Disable ConfigParser interpolation (lp#930270)\n* Add git changelog method\n* Add git vcsversion method\n* Updated tox config for multi-python testing\n* Split functions to avoid eventlet import\n",
                      "markdown": "`* PEP8 cleanup (openstack-common)\n* Backslash continuations (misc.)\n* Disable ConfigParser interpolation (lp#930270)\n* Add git changelog method\n* Add git vcsversion method\n* Updated tox config for multi-python testing\n* Split functions to avoid eventlet import\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/ChangeLog"
                },
                "region": {
                  "startLine": 1084,
                  "startColumn": 44,
                  "endLine": 1085,
                  "snippet": {
                    "text": "* fix restructuredtext formatting in docstrings\n* Add ConfigOpts.print\\_help()\n* Fixes a bug where entry\\_points in a setup.py are blanked out if there are no entry points defined in setup.cfg\n* Promote more complete support for ISO 8601 time\n* cfg: fix a small comment typo\n* Several changes that I accidentally committed to d2to1's old repository. See the changes to the changelog for more details\n* cfg: unneeded multiple inheritance\n* PEP8 cleanup (openstack-common)\n",
                    "rendered": {
                      "text": "* fix restructuredtext formatting in docstrings\n* Add ConfigOpts.print\\_help()\n* Fixes a bug where entry\\_points in a setup.py are blanked out if there are no entry points defined in setup.cfg\n* Promote more complete support for ISO 8601 time\n* cfg: fix a small comment typo\n* Several changes that I accidentally committed to d2to1's old repository. See the changes to the changelog for more details\n* cfg: unneeded multiple inheritance\n* PEP8 cleanup (openstack-common)\n",
                      "markdown": "`* fix restructuredtext formatting in docstrings\n* Add ConfigOpts.print\\_help()\n* Fixes a bug where entry\\_points in a setup.py are blanked out if there are no entry points defined in setup.cfg\n* Promote more complete support for ISO 8601 time\n* cfg: fix a small comment typo\n* Several changes that I accidentally committed to d2to1's old repository. See the changes to the changelog for more details\n* cfg: unneeded multiple inheritance\n* PEP8 cleanup (openstack-common)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/ChangeLog"
                },
                "region": {
                  "startLine": 1021,
                  "startColumn": 13,
                  "endLine": 1021,
                  "endColumn": 22,
                  "snippet": {
                    "text": "* Fix a couple of file handle leaks, using with statements\n* Ignore the stackforge jenkins email address\n* Extracted parse\\_host\\_port into network\\_utils\n* Add the rpc service and delete manager\n* Some changes I made weeks ago but forgot to commit\n* Added a method for parsing host:port pairs\n* Add basic periodic task infrastructure\n",
                    "rendered": {
                      "text": "* Fix a couple of file handle leaks, using with statements\n* Ignore the stackforge jenkins email address\n* Extracted parse\\_host\\_port into network\\_utils\n* Add the rpc service and delete manager\n* Some changes I made weeks ago but forgot to commit\n* Added a method for parsing host:port pairs\n* Add basic periodic task infrastructure\n",
                      "markdown": "`* Fix a couple of file handle leaks, using with statements\n* Ignore the stackforge jenkins email address\n* Extracted parse\\_host\\_port into network\\_utils\n* Add the rpc service and delete manager\n* Some changes I made weeks ago but forgot to commit\n* Added a method for parsing host:port pairs\n* Add basic periodic task infrastructure\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/ChangeLog"
                },
                "region": {
                  "startLine": 1017,
                  "startColumn": 35,
                  "endLine": 1018,
                  "snippet": {
                    "text": "* Add a missing comma in a docstring\n* Import order clean-up\n* Fix a logic error in stable version calculation\n* cfg: fix required if option has a dash\n* Fix a couple of file handle leaks, using with statements\n* Ignore the stackforge jenkins email address\n* Extracted parse\\_host\\_port into network\\_utils\n* Add the rpc service and delete manager\n",
                    "rendered": {
                      "text": "* Add a missing comma in a docstring\n* Import order clean-up\n* Fix a logic error in stable version calculation\n* cfg: fix required if option has a dash\n* Fix a couple of file handle leaks, using with statements\n* Ignore the stackforge jenkins email address\n* Extracted parse\\_host\\_port into network\\_utils\n* Add the rpc service and delete manager\n",
                      "markdown": "`* Add a missing comma in a docstring\n* Import order clean-up\n* Fix a logic error in stable version calculation\n* cfg: fix required if option has a dash\n* Fix a couple of file handle leaks, using with statements\n* Ignore the stackforge jenkins email address\n* Extracted parse\\_host\\_port into network\\_utils\n* Add the rpc service and delete manager\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/ChangeLog"
                },
                "region": {
                  "startLine": 972,
                  "startColumn": 42,
                  "endLine": 973,
                  "snippet": {
                    "text": "* trivial pep whitespace fix\n* Remove write\\_requirements\n* Rolling back to previous version of resolve\\_name; it's possible this can fail in the presence of a broken namespace package, but I want to make sure that's the case before trying to fix it\n* Stop using no longer valid -E option for pip\n* oops - now compatible with python 3\n* use regexp to parse the mailmap\n* Make tox run doctests\n* Verbose should not enable debug level logging\n",
                    "rendered": {
                      "text": "* trivial pep whitespace fix\n* Remove write\\_requirements\n* Rolling back to previous version of resolve\\_name; it's possible this can fail in the presence of a broken namespace package, but I want to make sure that's the case before trying to fix it\n* Stop using no longer valid -E option for pip\n* oops - now compatible with python 3\n* use regexp to parse the mailmap\n* Make tox run doctests\n* Verbose should not enable debug level logging\n",
                      "markdown": "`* trivial pep whitespace fix\n* Remove write\\_requirements\n* Rolling back to previous version of resolve\\_name; it's possible this can fail in the presence of a broken namespace package, but I want to make sure that's the case before trying to fix it\n* Stop using no longer valid -E option for pip\n* oops - now compatible with python 3\n* use regexp to parse the mailmap\n* Make tox run doctests\n* Verbose should not enable debug level logging\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/ChangeLog"
                },
                "region": {
                  "startLine": 968,
                  "startColumn": 5,
                  "endLine": 968,
                  "endColumn": 10,
                  "snippet": {
                    "text": "* Use testtools as test base class\n* Move logging config options into the log module\n* Use revno and git sha for pre-release versioning\n* Add env var version override for packagers\n* trivial pep whitespace fix\n* Remove write\\_requirements\n* Rolling back to previous version of resolve\\_name; it's possible this can fail in the presence of a broken namespace package, but I want to make sure that's the case before trying to fix it\n",
                    "rendered": {
                      "text": "* Use testtools as test base class\n* Move logging config options into the log module\n* Use revno and git sha for pre-release versioning\n* Add env var version override for packagers\n* trivial pep whitespace fix\n* Remove write\\_requirements\n* Rolling back to previous version of resolve\\_name; it's possible this can fail in the presence of a broken namespace package, but I want to make sure that's the case before trying to fix it\n",
                      "markdown": "`* Use testtools as test base class\n* Move logging config options into the log module\n* Use revno and git sha for pre-release versioning\n* Add env var version override for packagers\n* trivial pep whitespace fix\n* Remove write\\_requirements\n* Rolling back to previous version of resolve\\_name; it's possible this can fail in the presence of a broken namespace package, but I want to make sure that's the case before trying to fix it\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/ChangeLog"
                },
                "region": {
                  "startLine": 967,
                  "startColumn": 15,
                  "endLine": 967,
                  "endColumn": 20,
                  "snippet": {
                    "text": "* setup: count revs for revno if there are no tags\n* Use testtools as test base class\n* Move logging config options into the log module\n* Use revno and git sha for pre-release versioning\n* Add env var version override for packagers\n* trivial pep whitespace fix\n* Remove write\\_requirements\n",
                    "rendered": {
                      "text": "* setup: count revs for revno if there are no tags\n* Use testtools as test base class\n* Move logging config options into the log module\n* Use revno and git sha for pre-release versioning\n* Add env var version override for packagers\n* trivial pep whitespace fix\n* Remove write\\_requirements\n",
                      "markdown": "`* setup: count revs for revno if there are no tags\n* Use testtools as test base class\n* Move logging config options into the log module\n* Use revno and git sha for pre-release versioning\n* Add env var version override for packagers\n* trivial pep whitespace fix\n* Remove write\\_requirements\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/ChangeLog"
                },
                "region": {
                  "startLine": 956,
                  "startColumn": 1,
                  "endLine": 956,
                  "endColumn": 7,
                  "snippet": {
                    "text": "* Use oslo-config-2013.1b3\n* Change the check for the existence of .git directory\n* returncode for Popen is valid only after communicate call\n* sort options to make --help output prettier\n* Allow running test in uninstalled source tree\n* Remove openstack.common.db.common\n* Add missing DBDuplicateEntry\n",
                    "rendered": {
                      "text": "* Use oslo-config-2013.1b3\n* Change the check for the existence of .git directory\n* returncode for Popen is valid only after communicate call\n* sort options to make --help output prettier\n* Allow running test in uninstalled source tree\n* Remove openstack.common.db.common\n* Add missing DBDuplicateEntry\n",
                      "markdown": "`* Use oslo-config-2013.1b3\n* Change the check for the existence of .git directory\n* returncode for Popen is valid only after communicate call\n* sort options to make --help output prettier\n* Allow running test in uninstalled source tree\n* Remove openstack.common.db.common\n* Add missing DBDuplicateEntry\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/ChangeLog"
                },
                "region": {
                  "startLine": 952,
                  "startColumn": 51,
                  "endLine": 953,
                  "snippet": {
                    "text": "* support test suite and test tests-require\n* Patch manifest\\_maker to support extra\\_files--this is really the only way I can see to do this at all sensibly\n* This is a test that should really work to test this feature\n* openstack.common.setup: fails to get version from git\n* Use oslo-config-2013.1b3\n* Change the check for the existence of .git directory\n* returncode for Popen is valid only after communicate call\n* sort options to make --help output prettier\n",
                    "rendered": {
                      "text": "* support test suite and test tests-require\n* Patch manifest\\_maker to support extra\\_files--this is really the only way I can see to do this at all sensibly\n* This is a test that should really work to test this feature\n* openstack.common.setup: fails to get version from git\n* Use oslo-config-2013.1b3\n* Change the check for the existence of .git directory\n* returncode for Popen is valid only after communicate call\n* sort options to make --help output prettier\n",
                      "markdown": "`* support test suite and test tests-require\n* Patch manifest\\_maker to support extra\\_files--this is really the only way I can see to do this at all sensibly\n* This is a test that should really work to test this feature\n* openstack.common.setup: fails to get version from git\n* Use oslo-config-2013.1b3\n* Change the check for the existence of .git directory\n* returncode for Popen is valid only after communicate call\n* sort options to make --help output prettier\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/ChangeLog"
                },
                "region": {
                  "startLine": 940,
                  "startColumn": 149,
                  "endLine": 940,
                  "endColumn": 155,
                  "snippet": {
                    "text": "version that had been used for testing\n* pep8/pyflakes fixes\n* Fix things up to work with nova\n* Split out oslo.packaging\n* Fix two minor style things\n* Fixes #20. Make sure the manifest\\_maker monkeypatch only occurs once and that it gets all its required locals encapsulated. This is why I hate any sort of monkey-patching, but it appears to be the only way to get this feature working\n* Fix 'except as' statements that were breaking things in Python 2.5\n* Somehow neglected to include extra-file.txt used in the test for #15. Also moved the info log message that was causing othere tests to fail to only",
                    "rendered": {
                      "text": "version that had been used for testing\n* pep8/pyflakes fixes\n* Fix things up to work with nova\n* Split out oslo.packaging\n* Fix two minor style things\n* Fixes #20. Make sure the manifest\\_maker monkeypatch only occurs once and that it gets all its required locals encapsulated. This is why I hate any sort of monkey-patching, but it appears to be the only way to get this feature working\n* Fix 'except as' statements that were breaking things in Python 2.5\n* Somehow neglected to include extra-file.txt used in the test for #15. Also moved the info log message that was causing othere tests to fail to only",
                      "markdown": "`version that had been used for testing\n* pep8/pyflakes fixes\n* Fix things up to work with nova\n* Split out oslo.packaging\n* Fix two minor style things\n* Fixes #20. Make sure the manifest\\_maker monkeypatch only occurs once and that it gets all its required locals encapsulated. This is why I hate any sort of monkey-patching, but it appears to be the only way to get this feature working\n* Fix 'except as' statements that were breaking things in Python 2.5\n* Somehow neglected to include extra-file.txt used in the test for #15. Also moved the info log message that was causing othere tests to fail to only`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/ChangeLog"
                },
                "region": {
                  "startLine": 891,
                  "startColumn": 20,
                  "endLine": 891,
                  "endColumn": 26,
                  "snippet": {
                    "text": "0.5.8\n-----\n\n* Don't try to smart find packages that aren't there\n* Add support for manpages\n* Support forcing single-version-externally-managed\n* Add more iterations to BuildDoc coverage\n",
                    "rendered": {
                      "text": "0.5.8\n-----\n\n* Don't try to smart find packages that aren't there\n* Add support for manpages\n* Support forcing single-version-externally-managed\n* Add more iterations to BuildDoc coverage\n",
                      "markdown": "`0.5.8\n-----\n\n* Don't try to smart find packages that aren't there\n* Add support for manpages\n* Support forcing single-version-externally-managed\n* Add more iterations to BuildDoc coverage\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/ChangeLog"
                },
                "region": {
                  "startLine": 873,
                  "startColumn": 40,
                  "endLine": 873,
                  "endColumn": 45,
                  "snippet": {
                    "text": "\n* Fix author and changelog skipping\n* Fix doc autoindexing\n* Changed \\_get\\_git\\_directory() to use git itself\n* python3: Python3.x compatibility\n* Cosmetic doc fixes\n* Make parse errors meaningful\n",
                    "rendered": {
                      "text": "\n* Fix author and changelog skipping\n* Fix doc autoindexing\n* Changed \\_get\\_git\\_directory() to use git itself\n* python3: Python3.x compatibility\n* Cosmetic doc fixes\n* Make parse errors meaningful\n",
                      "markdown": "`\n* Fix author and changelog skipping\n* Fix doc autoindexing\n* Changed \\_get\\_git\\_directory() to use git itself\n* python3: Python3.x compatibility\n* Cosmetic doc fixes\n* Make parse errors meaningful\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/ChangeLog"
                },
                "region": {
                  "startLine": 863,
                  "startColumn": 13,
                  "endLine": 863,
                  "endColumn": 20,
                  "snippet": {
                    "text": "* Explicitly install install\\_requires\n* More python3 compatibility\n* python3: Use six everywhere\n* Add vim and emacs files to .gitignore\n* Fix sphinx autodoc module headers\n* Handle versioned egg fragments in dependency URLs\n* Fix tox.ini to not reference deleted testenv\n",
                    "rendered": {
                      "text": "* Explicitly install install\\_requires\n* More python3 compatibility\n* python3: Use six everywhere\n* Add vim and emacs files to .gitignore\n* Fix sphinx autodoc module headers\n* Handle versioned egg fragments in dependency URLs\n* Fix tox.ini to not reference deleted testenv\n",
                      "markdown": "`* Explicitly install install\\_requires\n* More python3 compatibility\n* python3: Use six everywhere\n* Add vim and emacs files to .gitignore\n* Fix sphinx autodoc module headers\n* Handle versioned egg fragments in dependency URLs\n* Fix tox.ini to not reference deleted testenv\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/ChangeLog"
                },
                "region": {
                  "startLine": 863,
                  "startColumn": 5,
                  "endLine": 863,
                  "endColumn": 10,
                  "snippet": {
                    "text": "* Explicitly install install\\_requires\n* More python3 compatibility\n* python3: Use six everywhere\n* Add vim and emacs files to .gitignore\n* Fix sphinx autodoc module headers\n* Handle versioned egg fragments in dependency URLs\n* Fix tox.ini to not reference deleted testenv\n",
                    "rendered": {
                      "text": "* Explicitly install install\\_requires\n* More python3 compatibility\n* python3: Use six everywhere\n* Add vim and emacs files to .gitignore\n* Fix sphinx autodoc module headers\n* Handle versioned egg fragments in dependency URLs\n* Fix tox.ini to not reference deleted testenv\n",
                      "markdown": "`* Explicitly install install\\_requires\n* More python3 compatibility\n* python3: Use six everywhere\n* Add vim and emacs files to .gitignore\n* Fix sphinx autodoc module headers\n* Handle versioned egg fragments in dependency URLs\n* Fix tox.ini to not reference deleted testenv\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/ChangeLog"
                },
                "region": {
                  "startLine": 848,
                  "startColumn": 5,
                  "endLine": 848,
                  "endColumn": 10,
                  "snippet": {
                    "text": "0.5.15\n------\n\n* Use pip instead of easy\\_install for installation\n* Skip git-checkout related tests when .git is missing\n* Refactor hooks file\n\n",
                    "rendered": {
                      "text": "0.5.15\n------\n\n* Use pip instead of easy\\_install for installation\n* Skip git-checkout related tests when .git is missing\n* Refactor hooks file\n\n",
                      "markdown": "`0.5.15\n------\n\n* Use pip instead of easy\\_install for installation\n* Skip git-checkout related tests when .git is missing\n* Refactor hooks file\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/ChangeLog"
                },
                "region": {
                  "startLine": 838,
                  "startColumn": 40,
                  "endLine": 839,
                  "snippet": {
                    "text": "0.5.17\n------\n\n* Fix pip invocation for old versions of pip\n\n0.5.16\n------\n\n",
                    "rendered": {
                      "text": "0.5.17\n------\n\n* Fix pip invocation for old versions of pip\n\n0.5.16\n------\n\n",
                      "markdown": "`0.5.17\n------\n\n* Fix pip invocation for old versions of pip\n\n0.5.16\n------\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/ChangeLog"
                },
                "region": {
                  "startLine": 838,
                  "startColumn": 5,
                  "endLine": 838,
                  "endColumn": 10,
                  "snippet": {
                    "text": "0.5.17\n------\n\n* Fix pip invocation for old versions of pip\n\n0.5.16\n------\n",
                    "rendered": {
                      "text": "0.5.17\n------\n\n* Fix pip invocation for old versions of pip\n\n0.5.16\n------\n",
                      "markdown": "`0.5.17\n------\n\n* Fix pip invocation for old versions of pip\n\n0.5.16\n------\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/ChangeLog"
                },
                "region": {
                  "startLine": 833,
                  "startColumn": 25,
                  "endLine": 834,
                  "snippet": {
                    "text": "* Fix integration script\n* Move testrepository to test-requirements.txt\n* Make python setup.py test do the right thing\n* Add an integration test script\n\n0.5.17\n------\n\n",
                    "rendered": {
                      "text": "* Fix integration script\n* Move testrepository to test-requirements.txt\n* Make python setup.py test do the right thing\n* Add an integration test script\n\n0.5.17\n------\n\n",
                      "markdown": "`* Fix integration script\n* Move testrepository to test-requirements.txt\n* Make python setup.py test do the right thing\n* Add an integration test script\n\n0.5.17\n------\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/ChangeLog"
                },
                "region": {
                  "startLine": 830,
                  "startColumn": 17,
                  "endLine": 831,
                  "snippet": {
                    "text": "* testr: fix Python 3 compatibility\n* Allow to override requirement files via environ\n* Add importlib to the filter list\n* Fix integration script\n* Move testrepository to test-requirements.txt\n* Make python setup.py test do the right thing\n* Add an integration test script\n\n",
                    "rendered": {
                      "text": "* testr: fix Python 3 compatibility\n* Allow to override requirement files via environ\n* Add importlib to the filter list\n* Fix integration script\n* Move testrepository to test-requirements.txt\n* Make python setup.py test do the right thing\n* Add an integration test script\n\n",
                      "markdown": "`* testr: fix Python 3 compatibility\n* Allow to override requirement files via environ\n* Add importlib to the filter list\n* Fix integration script\n* Move testrepository to test-requirements.txt\n* Make python setup.py test do the right thing\n* Add an integration test script\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/ChangeLog"
                },
                "region": {
                  "startLine": 818,
                  "startColumn": 11,
                  "endLine": 818,
                  "endColumn": 16,
                  "snippet": {
                    "text": "* Support version override with PBR prefix\n* Don't try to install requirements repo\n* Allow pip installation to be skipped\n* Don't run pip needlessly\n* Clean up hacking and path issues with d2to1\n* Support version override with PBR prefix\n* Fix some issues in setup.py test\n",
                    "rendered": {
                      "text": "* Support version override with PBR prefix\n* Don't try to install requirements repo\n* Allow pip installation to be skipped\n* Don't run pip needlessly\n* Clean up hacking and path issues with d2to1\n* Support version override with PBR prefix\n* Fix some issues in setup.py test\n",
                      "markdown": "`* Support version override with PBR prefix\n* Don't try to install requirements repo\n* Allow pip installation to be skipped\n* Don't run pip needlessly\n* Clean up hacking and path issues with d2to1\n* Support version override with PBR prefix\n* Fix some issues in setup.py test\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/ChangeLog"
                },
                "region": {
                  "startLine": 817,
                  "startColumn": 7,
                  "endLine": 817,
                  "endColumn": 12,
                  "snippet": {
                    "text": "* Put AUTHORS.in at the top of AUTHORS\n* Support version override with PBR prefix\n* Don't try to install requirements repo\n* Allow pip installation to be skipped\n* Don't run pip needlessly\n* Clean up hacking and path issues with d2to1\n* Support version override with PBR prefix\n",
                    "rendered": {
                      "text": "* Put AUTHORS.in at the top of AUTHORS\n* Support version override with PBR prefix\n* Don't try to install requirements repo\n* Allow pip installation to be skipped\n* Don't run pip needlessly\n* Clean up hacking and path issues with d2to1\n* Support version override with PBR prefix\n",
                      "markdown": "`* Put AUTHORS.in at the top of AUTHORS\n* Support version override with PBR prefix\n* Don't try to install requirements repo\n* Allow pip installation to be skipped\n* Don't run pip needlessly\n* Clean up hacking and path issues with d2to1\n* Support version override with PBR prefix\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/ChangeLog"
                },
                "region": {
                  "startLine": 814,
                  "startColumn": 23,
                  "endLine": 814,
                  "endColumn": 28,
                  "snippet": {
                    "text": "\n* Add Python 3.3 checking\n* Fix some issues in setup.py test\n* Put AUTHORS.in at the top of AUTHORS\n* Support version override with PBR prefix\n* Don't try to install requirements repo\n* Allow pip installation to be skipped\n",
                    "rendered": {
                      "text": "\n* Add Python 3.3 checking\n* Fix some issues in setup.py test\n* Put AUTHORS.in at the top of AUTHORS\n* Support version override with PBR prefix\n* Don't try to install requirements repo\n* Allow pip installation to be skipped\n",
                      "markdown": "`\n* Add Python 3.3 checking\n* Fix some issues in setup.py test\n* Put AUTHORS.in at the top of AUTHORS\n* Support version override with PBR prefix\n* Don't try to install requirements repo\n* Allow pip installation to be skipped\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/ChangeLog"
                },
                "region": {
                  "startLine": 795,
                  "startColumn": 26,
                  "endLine": 795,
                  "endColumn": 34,
                  "snippet": {
                    "text": "* Stop trying to install old pip and setuptools\n* Add support for globbing in data files\n* Revert include\\_package\\_data change\n* Also patch easy\\_install script creation\n* Loop over test output for better readability\n* Add more documentation\n* We force installs via pip, we should declare it\n",
                    "rendered": {
                      "text": "* Stop trying to install old pip and setuptools\n* Add support for globbing in data files\n* Revert include\\_package\\_data change\n* Also patch easy\\_install script creation\n* Loop over test output for better readability\n* Add more documentation\n* We force installs via pip, we should declare it\n",
                      "markdown": "`* Stop trying to install old pip and setuptools\n* Add support for globbing in data files\n* Revert include\\_package\\_data change\n* Also patch easy\\_install script creation\n* Loop over test output for better readability\n* Add more documentation\n* We force installs via pip, we should declare it\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/ChangeLog"
                },
                "region": {
                  "startLine": 792,
                  "startColumn": 28,
                  "endLine": 792,
                  "endColumn": 33,
                  "snippet": {
                    "text": "* Fix .mailmap file search location\n* Swap the order of configparser imports\n* Install jeepyb and requirements from REPODIR\n* Stop trying to install old pip and setuptools\n* Add support for globbing in data files\n* Revert include\\_package\\_data change\n* Also patch easy\\_install script creation\n",
                    "rendered": {
                      "text": "* Fix .mailmap file search location\n* Swap the order of configparser imports\n* Install jeepyb and requirements from REPODIR\n* Stop trying to install old pip and setuptools\n* Add support for globbing in data files\n* Revert include\\_package\\_data change\n* Also patch easy\\_install script creation\n",
                      "markdown": "`* Fix .mailmap file search location\n* Swap the order of configparser imports\n* Install jeepyb and requirements from REPODIR\n* Stop trying to install old pip and setuptools\n* Add support for globbing in data files\n* Revert include\\_package\\_data change\n* Also patch easy\\_install script creation\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/ChangeLog"
                },
                "region": {
                  "startLine": 760,
                  "startColumn": 37,
                  "endLine": 760,
                  "endColumn": 42,
                  "snippet": {
                    "text": "* Fix test\\_changelog when git isn't globally setup\n* Rework run\\_shell\\_command\n* Update tox config to use latest upgrades\n* Add a hint for users who don't have git installed\n* Add pypy to tox.ini\n* Fix python-ldap mirroring\n* Stop checking periods in commit messages\n",
                    "rendered": {
                      "text": "* Fix test\\_changelog when git isn't globally setup\n* Rework run\\_shell\\_command\n* Update tox config to use latest upgrades\n* Add a hint for users who don't have git installed\n* Add pypy to tox.ini\n* Fix python-ldap mirroring\n* Stop checking periods in commit messages\n",
                      "markdown": "`* Fix test\\_changelog when git isn't globally setup\n* Rework run\\_shell\\_command\n* Update tox config to use latest upgrades\n* Add a hint for users who don't have git installed\n* Add pypy to tox.ini\n* Fix python-ldap mirroring\n* Stop checking periods in commit messages\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/ChangeLog"
                },
                "region": {
                  "startLine": 757,
                  "startColumn": 26,
                  "endLine": 757,
                  "endColumn": 31,
                  "snippet": {
                    "text": "* Get rid of PyPI URL override in integration test\n* Add a test for command registration\n* Switch away from tearDown for BaseTests\n* Fix test\\_changelog when git isn't globally setup\n* Rework run\\_shell\\_command\n* Update tox config to use latest upgrades\n* Add a hint for users who don't have git installed\n",
                    "rendered": {
                      "text": "* Get rid of PyPI URL override in integration test\n* Add a test for command registration\n* Switch away from tearDown for BaseTests\n* Fix test\\_changelog when git isn't globally setup\n* Rework run\\_shell\\_command\n* Update tox config to use latest upgrades\n* Add a hint for users who don't have git installed\n",
                      "markdown": "`* Get rid of PyPI URL override in integration test\n* Add a test for command registration\n* Switch away from tearDown for BaseTests\n* Fix test\\_changelog when git isn't globally setup\n* Rework run\\_shell\\_command\n* Update tox config to use latest upgrades\n* Add a hint for users who don't have git installed\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/ChangeLog"
                },
                "region": {
                  "startLine": 744,
                  "startColumn": 48,
                  "endLine": 744,
                  "endColumn": 53,
                  "snippet": {
                    "text": "0.5.23\n------\n\n* Fixed pbr install to not error out and fail if git is not installed\n\n0.5.22\n------\n",
                    "rendered": {
                      "text": "0.5.23\n------\n\n* Fixed pbr install to not error out and fail if git is not installed\n\n0.5.22\n------\n",
                      "markdown": "`0.5.23\n------\n\n* Fixed pbr install to not error out and fail if git is not installed\n\n0.5.22\n------\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/ChangeLog"
                },
                "region": {
                  "startLine": 738,
                  "startColumn": 8,
                  "endLine": 738,
                  "endColumn": 13,
                  "snippet": {
                    "text": "* Link to the documentation in the readme\n* Avoid using 'which' executable for finding git\n* Add wheel mirror structure awareness\n* Remove pip as an argument from mkvenv\n* Use pypi-mirror instead of jeepyb\n\n0.5.23\n",
                    "rendered": {
                      "text": "* Link to the documentation in the readme\n* Avoid using 'which' executable for finding git\n* Add wheel mirror structure awareness\n* Remove pip as an argument from mkvenv\n* Use pypi-mirror instead of jeepyb\n\n0.5.23\n",
                      "markdown": "`* Link to the documentation in the readme\n* Avoid using 'which' executable for finding git\n* Add wheel mirror structure awareness\n* Remove pip as an argument from mkvenv\n* Use pypi-mirror instead of jeepyb\n\n0.5.23\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/ChangeLog"
                },
                "region": {
                  "startLine": 736,
                  "startColumn": 44,
                  "endLine": 737,
                  "snippet": {
                    "text": "* Communicate to user when we skip a requirement\n* Base python 2.7 skip list on parsed names\n* Link to the documentation in the readme\n* Avoid using 'which' executable for finding git\n* Add wheel mirror structure awareness\n* Remove pip as an argument from mkvenv\n* Use pypi-mirror instead of jeepyb\n\n",
                    "rendered": {
                      "text": "* Communicate to user when we skip a requirement\n* Base python 2.7 skip list on parsed names\n* Link to the documentation in the readme\n* Avoid using 'which' executable for finding git\n* Add wheel mirror structure awareness\n* Remove pip as an argument from mkvenv\n* Use pypi-mirror instead of jeepyb\n\n",
                      "markdown": "`* Communicate to user when we skip a requirement\n* Base python 2.7 skip list on parsed names\n* Link to the documentation in the readme\n* Avoid using 'which' executable for finding git\n* Add wheel mirror structure awareness\n* Remove pip as an argument from mkvenv\n* Use pypi-mirror instead of jeepyb\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/ChangeLog"
                },
                "region": {
                  "startLine": 726,
                  "startColumn": 5,
                  "endLine": 726,
                  "endColumn": 10,
                  "snippet": {
                    "text": "* show diff between pip installed packages and requirements\n* Enable wheel processing in the tests\n* Clean up integration script\n* Let git do mailmap mapping for us\n* Make ChangeLog more condensed\n* Make sphinx builders configurable in LocalBuildDoc\n* Serve local mirror using apache\n",
                    "rendered": {
                      "text": "* show diff between pip installed packages and requirements\n* Enable wheel processing in the tests\n* Clean up integration script\n* Let git do mailmap mapping for us\n* Make ChangeLog more condensed\n* Make sphinx builders configurable in LocalBuildDoc\n* Serve local mirror using apache\n",
                      "markdown": "`* show diff between pip installed packages and requirements\n* Enable wheel processing in the tests\n* Clean up integration script\n* Let git do mailmap mapping for us\n* Make ChangeLog more condensed\n* Make sphinx builders configurable in LocalBuildDoc\n* Serve local mirror using apache\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/ChangeLog"
                },
                "region": {
                  "startLine": 725,
                  "startColumn": 22,
                  "endLine": 726,
                  "snippet": {
                    "text": "* Use wheels for installation\n* show diff between pip installed packages and requirements\n* Enable wheel processing in the tests\n* Clean up integration script\n* Let git do mailmap mapping for us\n* Make ChangeLog more condensed\n* Make sphinx builders configurable in LocalBuildDoc\n* Serve local mirror using apache\n",
                    "rendered": {
                      "text": "* Use wheels for installation\n* show diff between pip installed packages and requirements\n* Enable wheel processing in the tests\n* Clean up integration script\n* Let git do mailmap mapping for us\n* Make ChangeLog more condensed\n* Make sphinx builders configurable in LocalBuildDoc\n* Serve local mirror using apache\n",
                      "markdown": "`* Use wheels for installation\n* show diff between pip installed packages and requirements\n* Enable wheel processing in the tests\n* Clean up integration script\n* Let git do mailmap mapping for us\n* Make ChangeLog more condensed\n* Make sphinx builders configurable in LocalBuildDoc\n* Serve local mirror using apache\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/ChangeLog"
                },
                "region": {
                  "startLine": 723,
                  "startColumn": 19,
                  "endLine": 723,
                  "endColumn": 24,
                  "snippet": {
                    "text": "* Pin sphinx to <1.2\n* Build mirror using proper requirements\n* Use wheels for installation\n* show diff between pip installed packages and requirements\n* Enable wheel processing in the tests\n* Clean up integration script\n* Let git do mailmap mapping for us\n",
                    "rendered": {
                      "text": "* Pin sphinx to <1.2\n* Build mirror using proper requirements\n* Use wheels for installation\n* show diff between pip installed packages and requirements\n* Enable wheel processing in the tests\n* Clean up integration script\n* Let git do mailmap mapping for us\n",
                      "markdown": "`* Pin sphinx to <1.2\n* Build mirror using proper requirements\n* Use wheels for installation\n* show diff between pip installed packages and requirements\n* Enable wheel processing in the tests\n* Clean up integration script\n* Let git do mailmap mapping for us\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/ChangeLog"
                },
                "region": {
                  "startLine": 723,
                  "startColumn": 6,
                  "endLine": 723,
                  "endColumn": 12,
                  "snippet": {
                    "text": "* Pin sphinx to <1.2\n* Build mirror using proper requirements\n* Use wheels for installation\n* show diff between pip installed packages and requirements\n* Enable wheel processing in the tests\n* Clean up integration script\n* Let git do mailmap mapping for us\n",
                    "rendered": {
                      "text": "* Pin sphinx to <1.2\n* Build mirror using proper requirements\n* Use wheels for installation\n* show diff between pip installed packages and requirements\n* Enable wheel processing in the tests\n* Clean up integration script\n* Let git do mailmap mapping for us\n",
                      "markdown": "`* Pin sphinx to <1.2\n* Build mirror using proper requirements\n* Use wheels for installation\n* show diff between pip installed packages and requirements\n* Enable wheel processing in the tests\n* Clean up integration script\n* Let git do mailmap mapping for us\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/ChangeLog"
                },
                "region": {
                  "startLine": 698,
                  "startColumn": 18,
                  "endLine": 698,
                  "endColumn": 23,
                  "snippet": {
                    "text": "* Remove pip version specifier\n* Make tools/integration.sh take a branch\n* Fixes blocking issue on Windows\n* Remove duplicate git setup in tests\n\n0.7.0\n-----\n",
                    "rendered": {
                      "text": "* Remove pip version specifier\n* Make tools/integration.sh take a branch\n* Fixes blocking issue on Windows\n* Remove duplicate git setup in tests\n\n0.7.0\n-----\n",
                      "markdown": "`* Remove pip version specifier\n* Make tools/integration.sh take a branch\n* Fixes blocking issue on Windows\n* Remove duplicate git setup in tests\n\n0.7.0\n-----\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/ChangeLog"
                },
                "region": {
                  "startLine": 695,
                  "startColumn": 8,
                  "endLine": 695,
                  "endColumn": 13,
                  "snippet": {
                    "text": "\n* Use unicode\\_literals import instead of u'unicode' notation\n* Add support for nested requirements files\n* Remove pip version specifier\n* Make tools/integration.sh take a branch\n* Fixes blocking issue on Windows\n* Remove duplicate git setup in tests\n",
                    "rendered": {
                      "text": "\n* Use unicode\\_literals import instead of u'unicode' notation\n* Add support for nested requirements files\n* Remove pip version specifier\n* Make tools/integration.sh take a branch\n* Fixes blocking issue on Windows\n* Remove duplicate git setup in tests\n",
                      "markdown": "`\n* Use unicode\\_literals import instead of u'unicode' notation\n* Add support for nested requirements files\n* Remove pip version specifier\n* Make tools/integration.sh take a branch\n* Fixes blocking issue on Windows\n* Remove duplicate git setup in tests\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/ChangeLog"
                },
                "region": {
                  "startLine": 670,
                  "startColumn": 34,
                  "endLine": 670,
                  "endColumn": 39,
                  "snippet": {
                    "text": "* Check for git before querying it for a version\n* Allow \\_run\\_cmd to run commands in any directory\n* Make setUp fail if sdist fails\n* Permit pre-release versions with git metadata\n* Un-nest some sections of code\n\n0.8.2\n",
                    "rendered": {
                      "text": "* Check for git before querying it for a version\n* Allow \\_run\\_cmd to run commands in any directory\n* Make setUp fail if sdist fails\n* Permit pre-release versions with git metadata\n* Un-nest some sections of code\n\n0.8.2\n",
                      "markdown": "`* Check for git before querying it for a version\n* Allow \\_run\\_cmd to run commands in any directory\n* Make setUp fail if sdist fails\n* Permit pre-release versions with git metadata\n* Un-nest some sections of code\n\n0.8.2\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/ChangeLog"
                },
                "region": {
                  "startLine": 667,
                  "startColumn": 11,
                  "endLine": 667,
                  "endColumn": 16,
                  "snippet": {
                    "text": "* Update integration script for Apache 2.4\n* Restore Monkeypatched Distribution Instance\n* Register testr as a distutil entry point\n* Check for git before querying it for a version\n* Allow \\_run\\_cmd to run commands in any directory\n* Make setUp fail if sdist fails\n* Permit pre-release versions with git metadata\n",
                    "rendered": {
                      "text": "* Update integration script for Apache 2.4\n* Restore Monkeypatched Distribution Instance\n* Register testr as a distutil entry point\n* Check for git before querying it for a version\n* Allow \\_run\\_cmd to run commands in any directory\n* Make setUp fail if sdist fails\n* Permit pre-release versions with git metadata\n",
                      "markdown": "`* Update integration script for Apache 2.4\n* Restore Monkeypatched Distribution Instance\n* Register testr as a distutil entry point\n* Check for git before querying it for a version\n* Allow \\_run\\_cmd to run commands in any directory\n* Make setUp fail if sdist fails\n* Permit pre-release versions with git metadata\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/ChangeLog"
                },
                "region": {
                  "startLine": 664,
                  "startColumn": 20,
                  "endLine": 664,
                  "endColumn": 28,
                  "snippet": {
                    "text": "-----\n\n* Allow examining parsing exceptions\n* Update integration script for Apache 2.4\n* Restore Monkeypatched Distribution Instance\n* Register testr as a distutil entry point\n* Check for git before querying it for a version\n",
                    "rendered": {
                      "text": "-----\n\n* Allow examining parsing exceptions\n* Update integration script for Apache 2.4\n* Restore Monkeypatched Distribution Instance\n* Register testr as a distutil entry point\n* Check for git before querying it for a version\n",
                      "markdown": "`-----\n\n* Allow examining parsing exceptions\n* Update integration script for Apache 2.4\n* Restore Monkeypatched Distribution Instance\n* Register testr as a distutil entry point\n* Check for git before querying it for a version\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/ChangeLog"
                },
                "region": {
                  "startLine": 658,
                  "startColumn": 44,
                  "endLine": 659,
                  "snippet": {
                    "text": "\n* Remove all 2.7 filtering\n* Stop filtering out argparse\n* Remove mirror testing from the integration script\n\n0.9.0\n-----\n\n",
                    "rendered": {
                      "text": "\n* Remove all 2.7 filtering\n* Stop filtering out argparse\n* Remove mirror testing from the integration script\n\n0.9.0\n-----\n\n",
                      "markdown": "`\n* Remove all 2.7 filtering\n* Stop filtering out argparse\n* Remove mirror testing from the integration script\n\n0.9.0\n-----\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/ChangeLog"
                },
                "region": {
                  "startLine": 650,
                  "startColumn": 10,
                  "endLine": 650,
                  "endColumn": 15,
                  "snippet": {
                    "text": "* Handle more local dev version cases\n* Introduce a SemanticVersion object\n* cleanup tox.ini\n* add docs env to tox\n* Bump hacking to 0.9.x series\n\n0.10.2\n",
                    "rendered": {
                      "text": "* Handle more local dev version cases\n* Introduce a SemanticVersion object\n* cleanup tox.ini\n* add docs env to tox\n* Bump hacking to 0.9.x series\n\n0.10.2\n",
                      "markdown": "`* Handle more local dev version cases\n* Introduce a SemanticVersion object\n* cleanup tox.ini\n* add docs env to tox\n* Bump hacking to 0.9.x series\n\n0.10.2\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/ChangeLog"
                },
                "region": {
                  "startLine": 644,
                  "startColumn": 48,
                  "endLine": 645,
                  "snippet": {
                    "text": "* Accept capitalized Sem-Ver headers\n* use get\\_boolean\\_option for warnerrors\n* Handle more legacy version numbers\n* Look for and process sem-ver pseudo headers in git\n* Raise an error if preversion versions are too low\n* Teach pbr about post versioned dev versions\n* Handle more local dev version cases\n* Introduce a SemanticVersion object\n",
                    "rendered": {
                      "text": "* Accept capitalized Sem-Ver headers\n* use get\\_boolean\\_option for warnerrors\n* Handle more legacy version numbers\n* Look for and process sem-ver pseudo headers in git\n* Raise an error if preversion versions are too low\n* Teach pbr about post versioned dev versions\n* Handle more local dev version cases\n* Introduce a SemanticVersion object\n",
                      "markdown": "`* Accept capitalized Sem-Ver headers\n* use get\\_boolean\\_option for warnerrors\n* Handle more legacy version numbers\n* Look for and process sem-ver pseudo headers in git\n* Raise an error if preversion versions are too low\n* Teach pbr about post versioned dev versions\n* Handle more local dev version cases\n* Introduce a SemanticVersion object\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/ChangeLog"
                },
                "region": {
                  "startLine": 628,
                  "startColumn": 18,
                  "endLine": 628,
                  "endColumn": 23,
                  "snippet": {
                    "text": "* Support platform-specific requirements files\n* Remove extraneous vim editor configuration comments\n* Clean up links and docs\n* Add user.name to git config in tests\n* Honour validly tagged versions\n* autodoc: allow to exclude modules from auto-generation\n* tests: factorize has\\_opt handling\n",
                    "rendered": {
                      "text": "* Support platform-specific requirements files\n* Remove extraneous vim editor configuration comments\n* Clean up links and docs\n* Add user.name to git config in tests\n* Honour validly tagged versions\n* autodoc: allow to exclude modules from auto-generation\n* tests: factorize has\\_opt handling\n",
                      "markdown": "`* Support platform-specific requirements files\n* Remove extraneous vim editor configuration comments\n* Clean up links and docs\n* Add user.name to git config in tests\n* Honour validly tagged versions\n* autodoc: allow to exclude modules from auto-generation\n* tests: factorize has\\_opt handling\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/ChangeLog"
                },
                "region": {
                  "startLine": 626,
                  "startColumn": 19,
                  "endLine": 626,
                  "endColumn": 24,
                  "snippet": {
                    "text": "* Workflow documentation is now in infra-manual\n* Packagers vs package maintainers\n* Support platform-specific requirements files\n* Remove extraneous vim editor configuration comments\n* Clean up links and docs\n* Add user.name to git config in tests\n* Honour validly tagged versions\n",
                    "rendered": {
                      "text": "* Workflow documentation is now in infra-manual\n* Packagers vs package maintainers\n* Support platform-specific requirements files\n* Remove extraneous vim editor configuration comments\n* Clean up links and docs\n* Add user.name to git config in tests\n* Honour validly tagged versions\n",
                      "markdown": "`* Workflow documentation is now in infra-manual\n* Packagers vs package maintainers\n* Support platform-specific requirements files\n* Remove extraneous vim editor configuration comments\n* Clean up links and docs\n* Add user.name to git config in tests\n* Honour validly tagged versions\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/ChangeLog"
                },
                "region": {
                  "startLine": 622,
                  "startColumn": 8,
                  "endLine": 622,
                  "endColumn": 13,
                  "snippet": {
                    "text": "0.10.1\n------\n\n* Prefix git suffixes with + instead of \n* Workflow documentation is now in infra-manual\n* Packagers vs package maintainers\n* Support platform-specific requirements files\n",
                    "rendered": {
                      "text": "0.10.1\n------\n\n* Prefix git suffixes with + instead of \n* Workflow documentation is now in infra-manual\n* Packagers vs package maintainers\n* Support platform-specific requirements files\n",
                      "markdown": "`0.10.1\n------\n\n* Prefix git suffixes with + instead of \n* Workflow documentation is now in infra-manual\n* Packagers vs package maintainers\n* Support platform-specific requirements files\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/ChangeLog"
                },
                "region": {
                  "startLine": 617,
                  "startColumn": 29,
                  "endLine": 617,
                  "endColumn": 34,
                  "snippet": {
                    "text": "------\n\n* Stop including git sha in version strings\n* Write and read more complex git sha info\n\n0.10.1\n------\n",
                    "rendered": {
                      "text": "------\n\n* Stop including git sha in version strings\n* Write and read more complex git sha info\n\n0.10.1\n------\n",
                      "markdown": "`------\n\n* Stop including git sha in version strings\n* Write and read more complex git sha info\n\n0.10.1\n------\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/ChangeLog"
                },
                "region": {
                  "startLine": 616,
                  "startColumn": 16,
                  "endLine": 616,
                  "endColumn": 21,
                  "snippet": {
                    "text": "0.10.3\n------\n\n* Stop including git sha in version strings\n* Write and read more complex git sha info\n\n0.10.1\n",
                    "rendered": {
                      "text": "0.10.3\n------\n\n* Stop including git sha in version strings\n* Write and read more complex git sha info\n\n0.10.1\n",
                      "markdown": "`0.10.3\n------\n\n* Stop including git sha in version strings\n* Write and read more complex git sha info\n\n0.10.1\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/ChangeLog"
                },
                "region": {
                  "startLine": 609,
                  "startColumn": 39,
                  "endLine": 609,
                  "endColumn": 44,
                  "snippet": {
                    "text": "0.10.4\n------\n\n* Properly check for git before getting git dir\n* Use post version signifiers\n* Only import sphinx during hook processing\n\n",
                    "rendered": {
                      "text": "0.10.4\n------\n\n* Properly check for git before getting git dir\n* Use post version signifiers\n* Only import sphinx during hook processing\n\n",
                      "markdown": "`0.10.4\n------\n\n* Properly check for git before getting git dir\n* Use post version signifiers\n* Only import sphinx during hook processing\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/ChangeLog"
                },
                "region": {
                  "startLine": 609,
                  "startColumn": 20,
                  "endLine": 609,
                  "endColumn": 25,
                  "snippet": {
                    "text": "0.10.4\n------\n\n* Properly check for git before getting git dir\n* Use post version signifiers\n* Only import sphinx during hook processing\n\n",
                    "rendered": {
                      "text": "0.10.4\n------\n\n* Properly check for git before getting git dir\n* Use post version signifiers\n* Only import sphinx during hook processing\n\n",
                      "markdown": "`0.10.4\n------\n\n* Properly check for git before getting git dir\n* Use post version signifiers\n* Only import sphinx during hook processing\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/ChangeLog"
                },
                "region": {
                  "startLine": 594,
                  "startColumn": 9,
                  "endLine": 594,
                  "endColumn": 14,
                  "snippet": {
                    "text": "* \\_get\\_revno only returns a commit count\n* Move write\\_pbr\\_json to avoid issues with nose\n* Properly check for git before getting git dir\n* Port in git sha changes from 0.10 line\n\n0.10.6\n------\n",
                    "rendered": {
                      "text": "* \\_get\\_revno only returns a commit count\n* Move write\\_pbr\\_json to avoid issues with nose\n* Properly check for git before getting git dir\n* Port in git sha changes from 0.10 line\n\n0.10.6\n------\n",
                      "markdown": "`* \\_get\\_revno only returns a commit count\n* Move write\\_pbr\\_json to avoid issues with nose\n* Properly check for git before getting git dir\n* Port in git sha changes from 0.10 line\n\n0.10.6\n------\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/ChangeLog"
                },
                "region": {
                  "startLine": 593,
                  "startColumn": 39,
                  "endLine": 593,
                  "endColumn": 44,
                  "snippet": {
                    "text": "\n* \\_get\\_revno only returns a commit count\n* Move write\\_pbr\\_json to avoid issues with nose\n* Properly check for git before getting git dir\n* Port in git sha changes from 0.10 line\n\n0.10.6\n",
                    "rendered": {
                      "text": "\n* \\_get\\_revno only returns a commit count\n* Move write\\_pbr\\_json to avoid issues with nose\n* Properly check for git before getting git dir\n* Port in git sha changes from 0.10 line\n\n0.10.6\n",
                      "markdown": "`\n* \\_get\\_revno only returns a commit count\n* Move write\\_pbr\\_json to avoid issues with nose\n* Properly check for git before getting git dir\n* Port in git sha changes from 0.10 line\n\n0.10.6\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/ChangeLog"
                },
                "region": {
                  "startLine": 593,
                  "startColumn": 20,
                  "endLine": 593,
                  "endColumn": 25,
                  "snippet": {
                    "text": "\n* \\_get\\_revno only returns a commit count\n* Move write\\_pbr\\_json to avoid issues with nose\n* Properly check for git before getting git dir\n* Port in git sha changes from 0.10 line\n\n0.10.6\n",
                    "rendered": {
                      "text": "\n* \\_get\\_revno only returns a commit count\n* Move write\\_pbr\\_json to avoid issues with nose\n* Properly check for git before getting git dir\n* Port in git sha changes from 0.10 line\n\n0.10.6\n",
                      "markdown": "`\n* \\_get\\_revno only returns a commit count\n* Move write\\_pbr\\_json to avoid issues with nose\n* Properly check for git before getting git dir\n* Port in git sha changes from 0.10 line\n\n0.10.6\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/ChangeLog"
                },
                "region": {
                  "startLine": 580,
                  "startColumn": 9,
                  "endLine": 580,
                  "endColumn": 17,
                  "snippet": {
                    "text": "* Add truncated lincense text\n* Allow overwriting sphinx builder from command line\n* \"packages\" might list multiple directories\n* Support script text override for newer develop\n* Fixes Windows generated scripts headers\n* Update README format to match release notes tool\n* Be more aggressive about building wheels\n",
                    "rendered": {
                      "text": "* Add truncated lincense text\n* Allow overwriting sphinx builder from command line\n* \"packages\" might list multiple directories\n* Support script text override for newer develop\n* Fixes Windows generated scripts headers\n* Update README format to match release notes tool\n* Be more aggressive about building wheels\n",
                      "markdown": "`* Add truncated lincense text\n* Allow overwriting sphinx builder from command line\n* \"packages\" might list multiple directories\n* Support script text override for newer develop\n* Fixes Windows generated scripts headers\n* Update README format to match release notes tool\n* Be more aggressive about building wheels\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/ChangeLog"
                },
                "region": {
                  "startLine": 567,
                  "startColumn": 18,
                  "endLine": 568,
                  "snippet": {
                    "text": "* Test pip install -e of projects\n* Build all the wheels in one pass rather than many\n* Improve integration.sh\n* Stop re-invoking pip\n* Honour new test variable PIPVERSION\n* Be safe, don't let friends use RawConfigParser\n* Revert \"Support platform-specific requirements files\"\n* Reinstate pure-git-hashes-are-illegal test\n",
                    "rendered": {
                      "text": "* Test pip install -e of projects\n* Build all the wheels in one pass rather than many\n* Improve integration.sh\n* Stop re-invoking pip\n* Honour new test variable PIPVERSION\n* Be safe, don't let friends use RawConfigParser\n* Revert \"Support platform-specific requirements files\"\n* Reinstate pure-git-hashes-are-illegal test\n",
                      "markdown": "`* Test pip install -e of projects\n* Build all the wheels in one pass rather than many\n* Improve integration.sh\n* Stop re-invoking pip\n* Honour new test variable PIPVERSION\n* Be safe, don't let friends use RawConfigParser\n* Revert \"Support platform-specific requirements files\"\n* Reinstate pure-git-hashes-are-illegal test\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/ChangeLog"
                },
                "region": {
                  "startLine": 564,
                  "startColumn": 6,
                  "endLine": 564,
                  "endColumn": 11,
                  "snippet": {
                    "text": "\n* Issue #1450210: Preversioning rc tag handling\n* Stop testing setup.py easy\\_install behaviour\n* Test pip install -e of projects\n* Build all the wheels in one pass rather than many\n* Improve integration.sh\n* Stop re-invoking pip\n",
                    "rendered": {
                      "text": "\n* Issue #1450210: Preversioning rc tag handling\n* Stop testing setup.py easy\\_install behaviour\n* Test pip install -e of projects\n* Build all the wheels in one pass rather than many\n* Improve integration.sh\n* Stop re-invoking pip\n",
                      "markdown": "`\n* Issue #1450210: Preversioning rc tag handling\n* Stop testing setup.py easy\\_install behaviour\n* Test pip install -e of projects\n* Build all the wheels in one pass rather than many\n* Improve integration.sh\n* Stop re-invoking pip\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/ChangeLog"
                },
                "region": {
                  "startLine": 554,
                  "startColumn": 32,
                  "endLine": 555,
                  "snippet": {
                    "text": "\n* Teach pbr to read extras and env markers\n* Bump integration test timeouts\n* Finish removing invocations of pip\n* Advertise support for Python3.4\n* Issue #1451976: handle commits with non-utf8 text\n* Parallelise integration tests\n\n",
                    "rendered": {
                      "text": "\n* Teach pbr to read extras and env markers\n* Bump integration test timeouts\n* Finish removing invocations of pip\n* Advertise support for Python3.4\n* Issue #1451976: handle commits with non-utf8 text\n* Parallelise integration tests\n\n",
                      "markdown": "`\n* Teach pbr to read extras and env markers\n* Bump integration test timeouts\n* Finish removing invocations of pip\n* Advertise support for Python3.4\n* Issue #1451976: handle commits with non-utf8 text\n* Parallelise integration tests\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/ChangeLog"
                },
                "region": {
                  "startLine": 552,
                  "startColumn": 30,
                  "endLine": 552,
                  "endColumn": 35,
                  "snippet": {
                    "text": "1.0.0\n-----\n\n* Teach pbr to read extras and env markers\n* Bump integration test timeouts\n* Finish removing invocations of pip\n* Advertise support for Python3.4\n",
                    "rendered": {
                      "text": "1.0.0\n-----\n\n* Teach pbr to read extras and env markers\n* Bump integration test timeouts\n* Finish removing invocations of pip\n* Advertise support for Python3.4\n",
                      "markdown": "`1.0.0\n-----\n\n* Teach pbr to read extras and env markers\n* Bump integration test timeouts\n* Finish removing invocations of pip\n* Advertise support for Python3.4\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/ChangeLog"
                },
                "region": {
                  "startLine": 509,
                  "startColumn": 6,
                  "endLine": 509,
                  "endColumn": 11,
                  "snippet": {
                    "text": "1.3.0\n-----\n\n* Wrap env markers in parens\n* Updated from global requirements\n* Add more documentation around building docs\n* Expose a 'rpm\\_version' extra command\n",
                    "rendered": {
                      "text": "1.3.0\n-----\n\n* Wrap env markers in parens\n* Updated from global requirements\n* Add more documentation around building docs\n* Expose a 'rpm\\_version' extra command\n",
                      "markdown": "`1.3.0\n-----\n\n* Wrap env markers in parens\n* Updated from global requirements\n* Add more documentation around building docs\n* Expose a 'rpm\\_version' extra command\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/ChangeLog"
                },
                "region": {
                  "startLine": 502,
                  "startColumn": 19,
                  "endLine": 502,
                  "endColumn": 24,
                  "snippet": {
                    "text": "* Export ChangeLog and AUTHORS in install\n* Updated from global requirements\n* Updated from global requirements\n* Show how long the git querying takes\n* Add wsgi\\_scripts support to PBR\n* Updated from global requirements\n\n",
                    "rendered": {
                      "text": "* Export ChangeLog and AUTHORS in install\n* Updated from global requirements\n* Updated from global requirements\n* Show how long the git querying takes\n* Add wsgi\\_scripts support to PBR\n* Updated from global requirements\n\n",
                      "markdown": "`* Export ChangeLog and AUTHORS in install\n* Updated from global requirements\n* Updated from global requirements\n* Show how long the git querying takes\n* Add wsgi\\_scripts support to PBR\n* Updated from global requirements\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/ChangeLog"
                },
                "region": {
                  "startLine": 491,
                  "startColumn": 8,
                  "endLine": 491,
                  "endColumn": 13,
                  "snippet": {
                    "text": "1.5.0\n-----\n\n* Handle git being entirely absent\n* We require the use of setuptools\n* Fix retrieval of commit data and most recent tag\n\n",
                    "rendered": {
                      "text": "1.5.0\n-----\n\n* Handle git being entirely absent\n* We require the use of setuptools\n* Fix retrieval of commit data and most recent tag\n\n",
                      "markdown": "`1.5.0\n-----\n\n* Handle git being entirely absent\n* We require the use of setuptools\n* Fix retrieval of commit data and most recent tag\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/ChangeLog"
                },
                "region": {
                  "startLine": 444,
                  "startColumn": 36,
                  "endLine": 444,
                  "endColumn": 41,
                  "snippet": {
                    "text": "* Updated from global requirements\n* Split changelog on nulls instead of (\n* Add libjpeg and liberasurecode for tests\n* Handle markers to support sdist on pip < 6\n* Deprecated tox -downloadcache option removed\n* passenv integration environment variables re-enabling integration tests\n* Enable pep8 H405 tests\n",
                    "rendered": {
                      "text": "* Updated from global requirements\n* Split changelog on nulls instead of (\n* Add libjpeg and liberasurecode for tests\n* Handle markers to support sdist on pip < 6\n* Deprecated tox -downloadcache option removed\n* passenv integration environment variables re-enabling integration tests\n* Enable pep8 H405 tests\n",
                      "markdown": "`* Updated from global requirements\n* Split changelog on nulls instead of (\n* Add libjpeg and liberasurecode for tests\n* Handle markers to support sdist on pip < 6\n* Deprecated tox -downloadcache option removed\n* passenv integration environment variables re-enabling integration tests\n* Enable pep8 H405 tests\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/ChangeLog"
                },
                "region": {
                  "startLine": 431,
                  "startColumn": 16,
                  "endLine": 431,
                  "endColumn": 21,
                  "snippet": {
                    "text": "* Fix soabi tests with pypy\n* package: fix wrong catch in email parsing\n* Sort 'pbr freeze' output\n* Do not convert git tags when searching history\n* Include wsgi\\_scripts in generated wheels\n* Correct the indentation in the classifiers example\n* Do not silently drop markers that fail to evaluate\n",
                    "rendered": {
                      "text": "* Fix soabi tests with pypy\n* package: fix wrong catch in email parsing\n* Sort 'pbr freeze' output\n* Do not convert git tags when searching history\n* Include wsgi\\_scripts in generated wheels\n* Correct the indentation in the classifiers example\n* Do not silently drop markers that fail to evaluate\n",
                      "markdown": "`* Fix soabi tests with pypy\n* package: fix wrong catch in email parsing\n* Sort 'pbr freeze' output\n* Do not convert git tags when searching history\n* Include wsgi\\_scripts in generated wheels\n* Correct the indentation in the classifiers example\n* Do not silently drop markers that fail to evaluate\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/ChangeLog"
                },
                "region": {
                  "startLine": 430,
                  "startColumn": 1,
                  "endLine": 430,
                  "endColumn": 7,
                  "snippet": {
                    "text": "* Updated from global requirements\n* Fix soabi tests with pypy\n* package: fix wrong catch in email parsing\n* Sort 'pbr freeze' output\n* Do not convert git tags when searching history\n* Include wsgi\\_scripts in generated wheels\n* Correct the indentation in the classifiers example\n",
                    "rendered": {
                      "text": "* Updated from global requirements\n* Fix soabi tests with pypy\n* package: fix wrong catch in email parsing\n* Sort 'pbr freeze' output\n* Do not convert git tags when searching history\n* Include wsgi\\_scripts in generated wheels\n* Correct the indentation in the classifiers example\n",
                      "markdown": "`* Updated from global requirements\n* Fix soabi tests with pypy\n* package: fix wrong catch in email parsing\n* Sort 'pbr freeze' output\n* Do not convert git tags when searching history\n* Include wsgi\\_scripts in generated wheels\n* Correct the indentation in the classifiers example\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/ChangeLog"
                },
                "region": {
                  "startLine": 415,
                  "startColumn": 13,
                  "endLine": 415,
                  "endColumn": 21,
                  "snippet": {
                    "text": "------\n\n* File is wrongly marked as executable\n* Fix wsgiref script use with oslo.config\n* Update Preversioning explanation to avoid double that\n\n1.9.1\n",
                    "rendered": {
                      "text": "------\n\n* File is wrongly marked as executable\n* Fix wsgiref script use with oslo.config\n* Update Preversioning explanation to avoid double that\n\n1.9.1\n",
                      "markdown": "`------\n\n* File is wrongly marked as executable\n* Fix wsgiref script use with oslo.config\n* Update Preversioning explanation to avoid double that\n\n1.9.1\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/ChangeLog"
                },
                "region": {
                  "startLine": 396,
                  "startColumn": 38,
                  "endLine": 396,
                  "endColumn": 43,
                  "snippet": {
                    "text": "* Change assertTrue(isinstance()) by optimal assert\n* Fix handling of old git log output\n* Fix typo in the index.rst\n* Expose deb version to match exposing rpm version\n* Replace OpenStack LLC with OpenStack Foundation\n* Updated from global requirements\n* Fix pypy soabi tests\n",
                    "rendered": {
                      "text": "* Change assertTrue(isinstance()) by optimal assert\n* Fix handling of old git log output\n* Fix typo in the index.rst\n* Expose deb version to match exposing rpm version\n* Replace OpenStack LLC with OpenStack Foundation\n* Updated from global requirements\n* Fix pypy soabi tests\n",
                      "markdown": "`* Change assertTrue(isinstance()) by optimal assert\n* Fix handling of old git log output\n* Fix typo in the index.rst\n* Expose deb version to match exposing rpm version\n* Replace OpenStack LLC with OpenStack Foundation\n* Updated from global requirements\n* Fix pypy soabi tests\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/ChangeLog"
                },
                "region": {
                  "startLine": 394,
                  "startColumn": 21,
                  "endLine": 394,
                  "endColumn": 26,
                  "snippet": {
                    "text": "* Add more words to a confusing error message\n* Don't ignore data-files\n* Change assertTrue(isinstance()) by optimal assert\n* Fix handling of old git log output\n* Fix typo in the index.rst\n* Expose deb version to match exposing rpm version\n* Replace OpenStack LLC with OpenStack Foundation\n",
                    "rendered": {
                      "text": "* Add more words to a confusing error message\n* Don't ignore data-files\n* Change assertTrue(isinstance()) by optimal assert\n* Fix handling of old git log output\n* Fix typo in the index.rst\n* Expose deb version to match exposing rpm version\n* Replace OpenStack LLC with OpenStack Foundation\n",
                      "markdown": "`* Add more words to a confusing error message\n* Don't ignore data-files\n* Change assertTrue(isinstance()) by optimal assert\n* Fix handling of old git log output\n* Fix typo in the index.rst\n* Expose deb version to match exposing rpm version\n* Replace OpenStack LLC with OpenStack Foundation\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/ChangeLog"
                },
                "region": {
                  "startLine": 330,
                  "startColumn": 18,
                  "endLine": 330,
                  "endColumn": 22,
                  "snippet": {
                    "text": "3.1.1\n-----\n\n* Restore previous IP binding\n* docs: Don't specify pbr version in 'setup.py'\n\n3.1.0\n",
                    "rendered": {
                      "text": "3.1.1\n-----\n\n* Restore previous IP binding\n* docs: Don't specify pbr version in 'setup.py'\n\n3.1.0\n",
                      "markdown": "`3.1.1\n-----\n\n* Restore previous IP binding\n* docs: Don't specify pbr version in 'setup.py'\n\n3.1.0\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/ChangeLog"
                },
                "region": {
                  "startLine": 313,
                  "startColumn": 36,
                  "endLine": 313,
                  "endColumn": 44,
                  "snippet": {
                    "text": "* Remove dead code\n* Deprecate support for Sphinx < 1.6\n* builddoc: Use '[sphinx\\_build] builders' with Sphinx < 1.6\n* Remove win32/nt checks for wrapper script gen\n* Updated from global requirements\n* Remove py26 support\n* Updated from global requirements\n",
                    "rendered": {
                      "text": "* Remove dead code\n* Deprecate support for Sphinx < 1.6\n* builddoc: Use '[sphinx\\_build] builders' with Sphinx < 1.6\n* Remove win32/nt checks for wrapper script gen\n* Updated from global requirements\n* Remove py26 support\n* Updated from global requirements\n",
                      "markdown": "`* Remove dead code\n* Deprecate support for Sphinx < 1.6\n* builddoc: Use '[sphinx\\_build] builders' with Sphinx < 1.6\n* Remove win32/nt checks for wrapper script gen\n* Updated from global requirements\n* Remove py26 support\n* Updated from global requirements\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/ChangeLog"
                },
                "region": {
                  "startLine": 285,
                  "startColumn": 14,
                  "endLine": 285,
                  "endColumn": 19,
                  "snippet": {
                    "text": "* builddoc: Treat '[pbr] autodoc\\_tree\\_excludes' as a multi-line opt\n* update parse test to use reliable comparison\n* Better Sem-Ver header handling\n* Make docs on env vars a little clearer\n* Updated from global requirements\n* Updated from global requirements\n* future-proof invocation of apidoc\n",
                    "rendered": {
                      "text": "* builddoc: Treat '[pbr] autodoc\\_tree\\_excludes' as a multi-line opt\n* update parse test to use reliable comparison\n* Better Sem-Ver header handling\n* Make docs on env vars a little clearer\n* Updated from global requirements\n* Updated from global requirements\n* future-proof invocation of apidoc\n",
                      "markdown": "`* builddoc: Treat '[pbr] autodoc\\_tree\\_excludes' as a multi-line opt\n* update parse test to use reliable comparison\n* Better Sem-Ver header handling\n* Make docs on env vars a little clearer\n* Updated from global requirements\n* Updated from global requirements\n* future-proof invocation of apidoc\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/ChangeLog"
                },
                "region": {
                  "startLine": 266,
                  "startColumn": 15,
                  "endLine": 266,
                  "endColumn": 20,
                  "snippet": {
                    "text": "4.0.3\n-----\n\n* Don't poke in pip for requests\n* Fix builddoc with sphinx <= 1.6\n\n4.0.2\n",
                    "rendered": {
                      "text": "4.0.3\n-----\n\n* Don't poke in pip for requests\n* Fix builddoc with sphinx <= 1.6\n\n4.0.2\n",
                      "markdown": "`4.0.3\n-----\n\n* Don't poke in pip for requests\n* Fix builddoc with sphinx <= 1.6\n\n4.0.2\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/ChangeLog"
                },
                "region": {
                  "startLine": 260,
                  "startColumn": 44,
                  "endLine": 260,
                  "endColumn": 52,
                  "snippet": {
                    "text": "4.0.4\n-----\n\n* Revert \"Remove win32/nt checks for wrapper script gen\"\n* Add leading 0 on alpha release in semver doc\n\n4.0.3\n",
                    "rendered": {
                      "text": "4.0.4\n-----\n\n* Revert \"Remove win32/nt checks for wrapper script gen\"\n* Add leading 0 on alpha release in semver doc\n\n4.0.3\n",
                      "markdown": "`4.0.4\n-----\n\n* Revert \"Remove win32/nt checks for wrapper script gen\"\n* Add leading 0 on alpha release in semver doc\n\n4.0.3\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/ChangeLog"
                },
                "region": {
                  "startLine": 216,
                  "startColumn": 35,
                  "endLine": 217,
                  "snippet": {
                    "text": "4.3.0\n-----\n\n* Remove my\\_ip from generated wsgi script\n* Add an option to skip generating RELEASENOTES.rst\n* docs: Add docs for reno integration\n* Skip test for testr hook being installed when testr is not available\n* Fix typo in contribution instructions\n",
                    "rendered": {
                      "text": "4.3.0\n-----\n\n* Remove my\\_ip from generated wsgi script\n* Add an option to skip generating RELEASENOTES.rst\n* docs: Add docs for reno integration\n* Skip test for testr hook being installed when testr is not available\n* Fix typo in contribution instructions\n",
                      "markdown": "`4.3.0\n-----\n\n* Remove my\\_ip from generated wsgi script\n* Add an option to skip generating RELEASENOTES.rst\n* docs: Add docs for reno integration\n* Skip test for testr hook being installed when testr is not available\n* Fix typo in contribution instructions\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/ChangeLog"
                },
                "region": {
                  "startLine": 138,
                  "startColumn": 43,
                  "endLine": 138,
                  "endColumn": 48,
                  "snippet": {
                    "text": "5.4.1\n-----\n\n* Fix parsing on egg names with dashes from git URLs\n\n5.4.0\n-----\n",
                    "rendered": {
                      "text": "5.4.1\n-----\n\n* Fix parsing on egg names with dashes from git URLs\n\n5.4.0\n-----\n",
                      "markdown": "`5.4.1\n-----\n\n* Fix parsing on egg names with dashes from git URLs\n\n5.4.0\n-----\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/ChangeLog"
                },
                "region": {
                  "startLine": 99,
                  "startColumn": 27,
                  "endLine": 100,
                  "snippet": {
                    "text": "-----\n\n* Remove bdist\\_wininst support\n* Increase integration test timeout\n* Add Release Notes to documentation\n* Cleanup old legacy devstack-gate jobs\n* Begin work to modernize pbr's integration testing\n* Re-add ChangeLog\n",
                    "rendered": {
                      "text": "-----\n\n* Remove bdist\\_wininst support\n* Increase integration test timeout\n* Add Release Notes to documentation\n* Cleanup old legacy devstack-gate jobs\n* Begin work to modernize pbr's integration testing\n* Re-add ChangeLog\n",
                      "markdown": "`-----\n\n* Remove bdist\\_wininst support\n* Increase integration test timeout\n* Add Release Notes to documentation\n* Cleanup old legacy devstack-gate jobs\n* Begin work to modernize pbr's integration testing\n* Re-add ChangeLog\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/ChangeLog"
                },
                "region": {
                  "startLine": 80,
                  "startColumn": 47,
                  "endLine": 81,
                  "snippet": {
                    "text": "* Don't pass empty 'long\\_description'\n* Move flake8 as a pre-commit local target\n* Map requires-python to python-requires (attempt 2)\n* Update dependencies to avoid failure with old pip\n* Increase OS\\_TEST\\_TIMEOUT to 1200\n* Prevent test failure due to use of setpref\n* util: Convert 'D1\\_D2\\_SETUP\\_ARGS' to a list of tuples\n* Revert \"Map requires-python to python-requires\"\n",
                    "rendered": {
                      "text": "* Don't pass empty 'long\\_description'\n* Move flake8 as a pre-commit local target\n* Map requires-python to python-requires (attempt 2)\n* Update dependencies to avoid failure with old pip\n* Increase OS\\_TEST\\_TIMEOUT to 1200\n* Prevent test failure due to use of setpref\n* util: Convert 'D1\\_D2\\_SETUP\\_ARGS' to a list of tuples\n* Revert \"Map requires-python to python-requires\"\n",
                      "markdown": "`* Don't pass empty 'long\\_description'\n* Move flake8 as a pre-commit local target\n* Map requires-python to python-requires (attempt 2)\n* Update dependencies to avoid failure with old pip\n* Increase OS\\_TEST\\_TIMEOUT to 1200\n* Prevent test failure due to use of setpref\n* util: Convert 'D1\\_D2\\_SETUP\\_ARGS' to a list of tuples\n* Revert \"Map requires-python to python-requires\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/tests/testpackage/doc/source/installation.rst"
                },
                "region": {
                  "startLine": 4,
                  "endLine": 5,
                  "endColumn": 3,
                  "snippet": {
                    "text": "============\nInstallation\n============\n\nAt the command line::\n\n    $ pip install testpackage\n\n",
                    "rendered": {
                      "text": "============\nInstallation\n============\n\nAt the command line::\n\n    $ pip install testpackage\n\n",
                      "markdown": "`============\nInstallation\n============\n\nAt the command line::\n\n    $ pip install testpackage\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/tests/testpackage/doc/source/installation.rst"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 5,
                  "endLine": 12,
                  "endColumn": 10,
                  "snippet": {
                    "text": "Or, if you have virtualenvwrapper installed::\n\n    $ mkvirtualenv testpackage\n    $ pip install testpackage\n",
                    "rendered": {
                      "text": "Or, if you have virtualenvwrapper installed::\n\n    $ mkvirtualenv testpackage\n    $ pip install testpackage\n",
                      "markdown": "`Or, if you have virtualenvwrapper installed::\n\n    $ mkvirtualenv testpackage\n    $ pip install testpackage\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/tests/testpackage/doc/source/installation.rst"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 5,
                  "endLine": 7,
                  "endColumn": 10,
                  "snippet": {
                    "text": "\nAt the command line::\n\n    $ pip install testpackage\n\nOr, if you have virtualenvwrapper installed::\n\n",
                    "rendered": {
                      "text": "\nAt the command line::\n\n    $ pip install testpackage\n\nOr, if you have virtualenvwrapper installed::\n\n",
                      "markdown": "`\nAt the command line::\n\n    $ pip install testpackage\n\nOr, if you have virtualenvwrapper installed::\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/playbooks/pbr-installation-openstack/run.yaml"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 9,
                  "endLine": 6,
                  "endColumn": 15,
                  "snippet": {
                    "text": "    - shell:\n        cmd: |\n          export PBR_PIP_VERSION=\"{{ pbr_pip_version }}\"\n          bash -xe /home/zuul/src/opendev.org/openstack/pbr/tools/integration.sh $(cat /home/zuul/src/opendev.org/openstack/requirements/projects.txt)\n",
                    "rendered": {
                      "text": "    - shell:\n        cmd: |\n          export PBR_PIP_VERSION=\"{{ pbr_pip_version }}\"\n          bash -xe /home/zuul/src/opendev.org/openstack/pbr/tools/integration.sh $(cat /home/zuul/src/opendev.org/openstack/requirements/projects.txt)\n",
                      "markdown": "`    - shell:\n        cmd: |\n          export PBR_PIP_VERSION=\"{{ pbr_pip_version }}\"\n          bash -xe /home/zuul/src/opendev.org/openstack/pbr/tools/integration.sh $(cat /home/zuul/src/opendev.org/openstack/requirements/projects.txt)\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/playbooks/pbr-installation-openstack/run.yaml"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 9,
                  "endLine": 6,
                  "endColumn": 15,
                  "snippet": {
                    "text": "    - shell:\n        cmd: |\n          export PBR_PIP_VERSION=\"{{ pbr_pip_version }}\"\n          bash -xe /home/zuul/src/opendev.org/openstack/pbr/tools/integration.sh $(cat /home/zuul/src/opendev.org/openstack/requirements/projects.txt)\n",
                    "rendered": {
                      "text": "    - shell:\n        cmd: |\n          export PBR_PIP_VERSION=\"{{ pbr_pip_version }}\"\n          bash -xe /home/zuul/src/opendev.org/openstack/pbr/tools/integration.sh $(cat /home/zuul/src/opendev.org/openstack/requirements/projects.txt)\n",
                      "markdown": "`    - shell:\n        cmd: |\n          export PBR_PIP_VERSION=\"{{ pbr_pip_version }}\"\n          bash -xe /home/zuul/src/opendev.org/openstack/pbr/tools/integration.sh $(cat /home/zuul/src/opendev.org/openstack/requirements/projects.txt)\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/tests/test_commands.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/tests/test_commands.py"
                },
                "region": {
                  "startLine": 73,
                  "startColumn": 33,
                  "endLine": 73,
                  "endColumn": 38,
                  "snippet": {
                    "text": "        stdout, stderr, return_code = self.run_setup('rpm_version')\n        self.addDetail('stdout', content.text_content(stdout))\n        self.addDetail('stderr', content.text_content(stderr))\n        self.assertIn('Extracting rpm version', stdout)\n        self.assertEqual(0, return_code)\n\n    def test_freeze_command(self):\n",
                    "rendered": {
                      "text": "        stdout, stderr, return_code = self.run_setup('rpm_version')\n        self.addDetail('stdout', content.text_content(stdout))\n        self.addDetail('stderr', content.text_content(stderr))\n        self.assertIn('Extracting rpm version', stdout)\n        self.assertEqual(0, return_code)\n\n    def test_freeze_command(self):\n",
                      "markdown": "`        stdout, stderr, return_code = self.run_setup('rpm_version')\n        self.addDetail('stdout', content.text_content(stdout))\n        self.addDetail('stderr', content.text_content(stderr))\n        self.assertIn('Extracting rpm version', stdout)\n        self.assertEqual(0, return_code)\n\n    def test_freeze_command(self):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/tests/test_hooks.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/hooks/base.py"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 23,
                  "endLine": 7,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n# not use this file except in compliance with the License. You may obtain\n# a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n# not use this file except in compliance with the License. You may obtain\n# a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n# not use this file except in compliance with the License. You may obtain\n# a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/hooks/base.py"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 32,
                  "endLine": 24,
                  "endColumn": 37,
                  "snippet": {
                    "text": "    def __init__(self, config):\n        self._global_config = config\n        self.config = self._global_config.get(self.section, dict())\n        self.pbr_config = config.get('pbr', dict())\n\n    def run(self):\n        self.hook()\n",
                    "rendered": {
                      "text": "    def __init__(self, config):\n        self._global_config = config\n        self.config = self._global_config.get(self.section, dict())\n        self.pbr_config = config.get('pbr', dict())\n\n    def run(self):\n        self.hook()\n",
                      "markdown": "`    def __init__(self, config):\n        self._global_config = config\n        self.config = self._global_config.get(self.section, dict())\n        self.pbr_config = config.get('pbr', dict())\n\n    def run(self):\n        self.hook()\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/hooks/base.py"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 41,
                  "endLine": 23,
                  "endColumn": 46,
                  "snippet": {
                    "text": "\n    def __init__(self, config):\n        self._global_config = config\n        self.config = self._global_config.get(self.section, dict())\n        self.pbr_config = config.get('pbr', dict())\n\n    def run(self):\n",
                    "rendered": {
                      "text": "\n    def __init__(self, config):\n        self._global_config = config\n        self.config = self._global_config.get(self.section, dict())\n        self.pbr_config = config.get('pbr', dict())\n\n    def run(self):\n",
                      "markdown": "`\n    def __init__(self, config):\n        self._global_config = config\n        self.config = self._global_config.get(self.section, dict())\n        self.pbr_config = config.get('pbr', dict())\n\n    def run(self):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/hooks/commands.py"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 23,
                  "endLine": 7,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n# not use this file except in compliance with the License. You may obtain\n# a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n# not use this file except in compliance with the License. You may obtain\n# a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n# not use this file except in compliance with the License. You may obtain\n# a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/hooks/commands.py"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 30,
                  "endLine": 19,
                  "snippet": {
                    "text": "\nimport os\n\nfrom setuptools.command import easy_install\n\nfrom pbr.hooks import base\nfrom pbr import options\nfrom pbr import packaging\n",
                    "rendered": {
                      "text": "\nimport os\n\nfrom setuptools.command import easy_install\n\nfrom pbr.hooks import base\nfrom pbr import options\nfrom pbr import packaging\n",
                      "markdown": "`\nimport os\n\nfrom setuptools.command import easy_install\n\nfrom pbr.hooks import base\nfrom pbr import options\nfrom pbr import packaging\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/hooks/commands.py"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 24,
                  "endLine": 53,
                  "endColumn": 29,
                  "snippet": {
                    "text": "        if os.path.exists('.testr.conf') and packaging.have_testr():\n            # There is a .testr.conf file. We want to use it.\n            self.add_command('pbr.packaging.TestrTest')\n        elif self.config.get('nosetests', False) and packaging.have_nose():\n            # We seem to still have nose configured\n            self.add_command('pbr.packaging.NoseTest')\n\n",
                    "rendered": {
                      "text": "        if os.path.exists('.testr.conf') and packaging.have_testr():\n            # There is a .testr.conf file. We want to use it.\n            self.add_command('pbr.packaging.TestrTest')\n        elif self.config.get('nosetests', False) and packaging.have_nose():\n            # We seem to still have nose configured\n            self.add_command('pbr.packaging.NoseTest')\n\n",
                      "markdown": "`        if os.path.exists('.testr.conf') and packaging.have_testr():\n            # There is a .testr.conf file. We want to use it.\n            self.add_command('pbr.packaging.TestrTest')\n        elif self.config.get('nosetests', False) and packaging.have_nose():\n            # We seem to still have nose configured\n            self.add_command('pbr.packaging.NoseTest')\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/hooks/commands.py"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 35,
                  "endLine": 31,
                  "endColumn": 40,
                  "snippet": {
                    "text": "\n    def __init__(self, config):\n        super(CommandsConfig, self).__init__(config)\n        self.commands = self.config.get('commands', \"\")\n\n    def save(self):\n        self.config['commands'] = self.commands\n",
                    "rendered": {
                      "text": "\n    def __init__(self, config):\n        super(CommandsConfig, self).__init__(config)\n        self.commands = self.config.get('commands', \"\")\n\n    def save(self):\n        self.config['commands'] = self.commands\n",
                      "markdown": "`\n    def __init__(self, config):\n        super(CommandsConfig, self).__init__(config)\n        self.commands = self.config.get('commands', \"\")\n\n    def save(self):\n        self.config['commands'] = self.commands\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/hooks/metadata.py"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 23,
                  "endLine": 7,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n# not use this file except in compliance with the License. You may obtain\n# a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n# not use this file except in compliance with the License. You may obtain\n# a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n# not use this file except in compliance with the License. You may obtain\n# a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/hooks/metadata.py"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 44,
                  "endLine": 26,
                  "endColumn": 49,
                  "snippet": {
                    "text": "\n    def hook(self):\n        self.config['version'] = packaging.get_version(\n            self.config['name'], self.config.get('version', None))\n        packaging.append_text_list(\n            self.config, 'requires_dist',\n            packaging.parse_requirements())\n",
                    "rendered": {
                      "text": "\n    def hook(self):\n        self.config['version'] = packaging.get_version(\n            self.config['name'], self.config.get('version', None))\n        packaging.append_text_list(\n            self.config, 'requires_dist',\n            packaging.parse_requirements())\n",
                      "markdown": "`\n    def hook(self):\n        self.config['version'] = packaging.get_version(\n            self.config['name'], self.config.get('version', None))\n        packaging.append_text_list(\n            self.config, 'requires_dist',\n            packaging.parse_requirements())\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/hooks/backwards.py"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 23,
                  "endLine": 7,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n# not use this file except in compliance with the License. You may obtain\n# a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n# not use this file except in compliance with the License. You may obtain\n# a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n# not use this file except in compliance with the License. You may obtain\n# a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/testr_command.py"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 21,
                  "endLine": 44,
                  "snippet": {
                    "text": "\n\"\"\"\n\nfrom distutils import cmd\nimport distutils.errors\nimport logging\nimport os\nimport sys\n",
                    "rendered": {
                      "text": "\n\"\"\"\n\nfrom distutils import cmd\nimport distutils.errors\nimport logging\nimport os\nimport sys\n",
                      "markdown": "`\n\"\"\"\n\nfrom distutils import cmd\nimport distutils.errors\nimport logging\nimport os\nimport sys\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/testr_command.py"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 9,
                  "endLine": 19,
                  "endColumn": 13,
                  "snippet": {
                    "text": "# Copyright (c) 2013 Testrepository Contributors\n#\n# Licensed under either the Apache License, Version 2.0 or the BSD 3-clause\n# license at the users choice. A copy of both licenses are available in the\n# project source as Apache-2.0 and BSD. You may not use this file except in\n# compliance with one of these two licences.\n#\n",
                    "rendered": {
                      "text": "# Copyright (c) 2013 Testrepository Contributors\n#\n# Licensed under either the Apache License, Version 2.0 or the BSD 3-clause\n# license at the users choice. A copy of both licenses are available in the\n# project source as Apache-2.0 and BSD. You may not use this file except in\n# compliance with one of these two licences.\n#\n",
                      "markdown": "`# Copyright (c) 2013 Testrepository Contributors\n#\n# Licensed under either the Apache License, Version 2.0 or the BSD 3-clause\n# license at the users choice. A copy of both licenses are available in the\n# project source as Apache-2.0 and BSD. You may not use this file except in\n# compliance with one of these two licences.\n#\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/testr_command.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/doc/source/user/features.rst"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 4,
                  "endLine": 7,
                  "endColumn": 8,
                  "snippet": {
                    "text": "\nTo understand what *pbr* can do for you, it's probably best to look at two\nprojects: one using pure *setuptools*, and another using *pbr*. First, let's\nlook at the *setuptools* project.\n\n.. code-block:: none\n\n",
                    "rendered": {
                      "text": "\nTo understand what *pbr* can do for you, it's probably best to look at two\nprojects: one using pure *setuptools*, and another using *pbr*. First, let's\nlook at the *setuptools* project.\n\n.. code-block:: none\n\n",
                      "markdown": "`\nTo understand what *pbr* can do for you, it's probably best to look at two\nprojects: one using pure *setuptools*, and another using *pbr*. First, let's\nlook at the *setuptools* project.\n\n.. code-block:: none\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/doc/source/user/features.rst"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 67,
                  "endLine": 5,
                  "endColumn": 71,
                  "snippet": {
                    "text": " Features\n==========\n\nTo understand what *pbr* can do for you, it's probably best to look at two\nprojects: one using pure *setuptools*, and another using *pbr*. First, let's\nlook at the *setuptools* project.\n\n",
                    "rendered": {
                      "text": " Features\n==========\n\nTo understand what *pbr* can do for you, it's probably best to look at two\nprojects: one using pure *setuptools*, and another using *pbr*. First, let's\nlook at the *setuptools* project.\n\n",
                      "markdown": "` Features\n==========\n\nTo understand what *pbr* can do for you, it's probably best to look at two\nprojects: one using pure *setuptools*, and another using *pbr*. First, let's\nlook at the *setuptools* project.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/doc/source/user/features.rst"
                },
                "region": {
                  "startLine": 270,
                  "startColumn": 24,
                  "endLine": 270,
                  "endColumn": 30,
                  "snippet": {
                    "text": "    *pbr* will automatically use *reno* \\'s ``build_reno`` setuptools command\n    to generate a release notes file, if reno is available and configured.\n\nIf using *reno*, you may wish to include a copy of the release notes in your\npackages. *reno* provides a ``build_reno`` `setuptools command`__ and, if reno\nis present and configured, *pbr* will automatically call this to generate a\nrelease notes file for inclusion in your package.\n",
                    "rendered": {
                      "text": "    *pbr* will automatically use *reno* \\'s ``build_reno`` setuptools command\n    to generate a release notes file, if reno is available and configured.\n\nIf using *reno*, you may wish to include a copy of the release notes in your\npackages. *reno* provides a ``build_reno`` `setuptools command`__ and, if reno\nis present and configured, *pbr* will automatically call this to generate a\nrelease notes file for inclusion in your package.\n",
                      "markdown": "`    *pbr* will automatically use *reno* \\'s ``build_reno`` setuptools command\n    to generate a release notes file, if reno is available and configured.\n\nIf using *reno*, you may wish to include a copy of the release notes in your\npackages. *reno* provides a ``build_reno`` `setuptools command`__ and, if reno\nis present and configured, *pbr* will automatically call this to generate a\nrelease notes file for inclusion in your package.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/doc/source/user/features.rst"
                },
                "region": {
                  "startLine": 252,
                  "startColumn": 11,
                  "endLine": 252,
                  "endColumn": 16,
                  "snippet": {
                    "text": "distribution. In addition, the generated ``AUTHORS`` and ``ChangeLog`` files\nare also included. In many cases, this removes the need for an explicit\n``MANIFEST.in`` file, though one can be provided to exclude files that are\ntracked via Git but which should not be included in the final release, such as\ntest files.\n\n.. note::\n",
                    "rendered": {
                      "text": "distribution. In addition, the generated ``AUTHORS`` and ``ChangeLog`` files\nare also included. In many cases, this removes the need for an explicit\n``MANIFEST.in`` file, though one can be provided to exclude files that are\ntracked via Git but which should not be included in the final release, such as\ntest files.\n\n.. note::\n",
                      "markdown": "`distribution. In addition, the generated ``AUTHORS`` and ``ChangeLog`` files\nare also included. In many cases, this removes the need for an explicit\n``MANIFEST.in`` file, though one can be provided to exclude files that are\ntracked via Git but which should not be included in the final release, such as\ntest files.\n\n.. note::\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/doc/source/user/features.rst"
                },
                "region": {
                  "startLine": 246,
                  "startColumn": 20,
                  "endLine": 246,
                  "endColumn": 26,
                  "snippet": {
                    "text": "    Git is tracking.\n\nJust like ``AUTHORS`` and ``ChangeLog``, why keep a list of files you wish to\ninclude when you can find many of these in Git. ``MANIFEST.in`` generation\nensures almost all files stored in Git, with the exception of ``.gitignore``,\n``.gitreview`` and ``.pyc`` files, are automatically included in your\ndistribution. In addition, the generated ``AUTHORS`` and ``ChangeLog`` files\n",
                    "rendered": {
                      "text": "    Git is tracking.\n\nJust like ``AUTHORS`` and ``ChangeLog``, why keep a list of files you wish to\ninclude when you can find many of these in Git. ``MANIFEST.in`` generation\nensures almost all files stored in Git, with the exception of ``.gitignore``,\n``.gitreview`` and ``.pyc`` files, are automatically included in your\ndistribution. In addition, the generated ``AUTHORS`` and ``ChangeLog`` files\n",
                      "markdown": "`    Git is tracking.\n\nJust like ``AUTHORS`` and ``ChangeLog``, why keep a list of files you wish to\ninclude when you can find many of these in Git. ``MANIFEST.in`` generation\nensures almost all files stored in Git, with the exception of ``.gitignore``,\n``.gitreview`` and ``.pyc`` files, are automatically included in your\ndistribution. In addition, the generated ``AUTHORS`` and ``ChangeLog`` files\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/doc/source/user/features.rst"
                },
                "region": {
                  "startLine": 245,
                  "startColumn": 69,
                  "endLine": 245,
                  "endColumn": 75,
                  "snippet": {
                    "text": "    *pbr* will automatically generate a ``MANIFEST.in`` file based on the files\n    Git is tracking.\n\nJust like ``AUTHORS`` and ``ChangeLog``, why keep a list of files you wish to\ninclude when you can find many of these in Git. ``MANIFEST.in`` generation\nensures almost all files stored in Git, with the exception of ``.gitignore``,\n``.gitreview`` and ``.pyc`` files, are automatically included in your\n",
                    "rendered": {
                      "text": "    *pbr* will automatically generate a ``MANIFEST.in`` file based on the files\n    Git is tracking.\n\nJust like ``AUTHORS`` and ``ChangeLog``, why keep a list of files you wish to\ninclude when you can find many of these in Git. ``MANIFEST.in`` generation\nensures almost all files stored in Git, with the exception of ``.gitignore``,\n``.gitreview`` and ``.pyc`` files, are automatically included in your\n",
                      "markdown": "`    *pbr* will automatically generate a ``MANIFEST.in`` file based on the files\n    Git is tracking.\n\nJust like ``AUTHORS`` and ``ChangeLog``, why keep a list of files you wish to\ninclude when you can find many of these in Git. ``MANIFEST.in`` generation\nensures almost all files stored in Git, with the exception of ``.gitignore``,\n``.gitreview`` and ``.pyc`` files, are automatically included in your\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/doc/source/user/features.rst"
                },
                "region": {
                  "startLine": 243,
                  "startColumn": 3,
                  "endLine": 243,
                  "endColumn": 8,
                  "snippet": {
                    "text": ".. admonition:: Summary\n\n    *pbr* will automatically generate a ``MANIFEST.in`` file based on the files\n    Git is tracking.\n\nJust like ``AUTHORS`` and ``ChangeLog``, why keep a list of files you wish to\ninclude when you can find many of these in Git. ``MANIFEST.in`` generation\n",
                    "rendered": {
                      "text": ".. admonition:: Summary\n\n    *pbr* will automatically generate a ``MANIFEST.in`` file based on the files\n    Git is tracking.\n\nJust like ``AUTHORS`` and ``ChangeLog``, why keep a list of files you wish to\ninclude when you can find many of these in Git. ``MANIFEST.in`` generation\n",
                      "markdown": "`.. admonition:: Summary\n\n    *pbr* will automatically generate a ``MANIFEST.in`` file based on the files\n    Git is tracking.\n\nJust like ``AUTHORS`` and ``ChangeLog``, why keep a list of files you wish to\ninclude when you can find many of these in Git. ``MANIFEST.in`` generation\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/doc/source/user/features.rst"
                },
                "region": {
                  "startLine": 233,
                  "startColumn": 52,
                  "endLine": 233,
                  "endColumn": 57,
                  "snippet": {
                    "text": "    *pbr* will automatically generate an ``AUTHORS`` and a ``ChangeLog`` file\n    using Git logs.\n\nWhy keep an ``AUTHORS`` or a ``ChangeLog`` file when Git already has all of the\ninformation you need? ``AUTHORS`` generation supports filtering/combining based\non a standard ``.mailmap`` file.\n\n",
                    "rendered": {
                      "text": "    *pbr* will automatically generate an ``AUTHORS`` and a ``ChangeLog`` file\n    using Git logs.\n\nWhy keep an ``AUTHORS`` or a ``ChangeLog`` file when Git already has all of the\ninformation you need? ``AUTHORS`` generation supports filtering/combining based\non a standard ``.mailmap`` file.\n\n",
                      "markdown": "`    *pbr* will automatically generate an ``AUTHORS`` and a ``ChangeLog`` file\n    using Git logs.\n\nWhy keep an ``AUTHORS`` or a ``ChangeLog`` file when Git already has all of the\ninformation you need? ``AUTHORS`` generation supports filtering/combining based\non a standard ``.mailmap`` file.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/doc/source/user/features.rst"
                },
                "region": {
                  "startLine": 231,
                  "startColumn": 9,
                  "endLine": 231,
                  "endColumn": 14,
                  "snippet": {
                    "text": ".. admonition:: Summary\n\n    *pbr* will automatically generate an ``AUTHORS`` and a ``ChangeLog`` file\n    using Git logs.\n\nWhy keep an ``AUTHORS`` or a ``ChangeLog`` file when Git already has all of the\ninformation you need? ``AUTHORS`` generation supports filtering/combining based\n",
                    "rendered": {
                      "text": ".. admonition:: Summary\n\n    *pbr* will automatically generate an ``AUTHORS`` and a ``ChangeLog`` file\n    using Git logs.\n\nWhy keep an ``AUTHORS`` or a ``ChangeLog`` file when Git already has all of the\ninformation you need? ``AUTHORS`` generation supports filtering/combining based\n",
                      "markdown": "`.. admonition:: Summary\n\n    *pbr* will automatically generate an ``AUTHORS`` and a ``ChangeLog`` file\n    using Git logs.\n\nWhy keep an ``AUTHORS`` or a ``ChangeLog`` file when Git already has all of the\ninformation you need? ``AUTHORS`` generation supports filtering/combining based\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/doc/source/user/features.rst"
                },
                "region": {
                  "startLine": 223,
                  "startColumn": 44,
                  "endLine": 223,
                  "endColumn": 49,
                  "snippet": {
                    "text": ".. admonition:: Summary\n\n    *pbr* can automatically generate a couple of files, which would normally\n    have to be maintained manually, by using Git data.\n\nAUTHORS, ChangeLog\n~~~~~~~~~~~~~~~~~~\n",
                    "rendered": {
                      "text": ".. admonition:: Summary\n\n    *pbr* can automatically generate a couple of files, which would normally\n    have to be maintained manually, by using Git data.\n\nAUTHORS, ChangeLog\n~~~~~~~~~~~~~~~~~~\n",
                      "markdown": "`.. admonition:: Summary\n\n    *pbr* can automatically generate a couple of files, which would normally\n    have to be maintained manually, by using Git data.\n\nAUTHORS, ChangeLog\n~~~~~~~~~~~~~~~~~~\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/doc/source/user/features.rst"
                },
                "region": {
                  "startLine": 197,
                  "startColumn": 58,
                  "endLine": 198,
                  "snippet": {
                    "text": "    automatically populate the ``install_requires``, ``tests_require`` and\n    ``dependency_links`` arguments to ``setup`` with them.\n\nYou may not have noticed, but there are differences in how pip\n``requirements.txt`` files work and how *setuptools* wants to be told about\nrequirements. The *pip* way is nicer because it sure does make it easier to\npopulate a *virtualenv* for testing or to just install everything you need.\nDuplicating the information, though, is super lame. To solve this issue, *pbr*\n",
                    "rendered": {
                      "text": "    automatically populate the ``install_requires``, ``tests_require`` and\n    ``dependency_links`` arguments to ``setup`` with them.\n\nYou may not have noticed, but there are differences in how pip\n``requirements.txt`` files work and how *setuptools* wants to be told about\nrequirements. The *pip* way is nicer because it sure does make it easier to\npopulate a *virtualenv* for testing or to just install everything you need.\nDuplicating the information, though, is super lame. To solve this issue, *pbr*\n",
                      "markdown": "`    automatically populate the ``install_requires``, ``tests_require`` and\n    ``dependency_links`` arguments to ``setup`` with them.\n\nYou may not have noticed, but there are differences in how pip\n``requirements.txt`` files work and how *setuptools* wants to be told about\nrequirements. The *pip* way is nicer because it sure does make it easier to\npopulate a *virtualenv* for testing or to just install everything you need.\nDuplicating the information, though, is super lame. To solve this issue, *pbr*\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/doc/source/user/features.rst"
                },
                "region": {
                  "startLine": 159,
                  "startColumn": 16,
                  "endLine": 159,
                  "endColumn": 21,
                  "snippet": {
                    "text": "\n.. note::\n\n   *pbr* expects Git tags to be signed for use in calculating versions.\n\nThe versions are expected to be compliant with :doc:`semver`.\n\n",
                    "rendered": {
                      "text": "\n.. note::\n\n   *pbr* expects Git tags to be signed for use in calculating versions.\n\nThe versions are expected to be compliant with :doc:`semver`.\n\n",
                      "markdown": "`\n.. note::\n\n   *pbr* expects Git tags to be signed for use in calculating versions.\n\nThe versions are expected to be compliant with :doc:`semver`.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/doc/source/user/features.rst"
                },
                "region": {
                  "startLine": 154,
                  "startColumn": 31,
                  "endLine": 154,
                  "endColumn": 36,
                  "snippet": {
                    "text": "raise an error, otherwise we use the version from ``setup.cfg`` as the target.\n\nWe then generate dev version strings based on the commits since the last\nrelease and include the current Git SHA to disambiguate multiple dev versions\nwith the same number of commits since the release.\n\n.. note::\n",
                    "rendered": {
                      "text": "raise an error, otherwise we use the version from ``setup.cfg`` as the target.\n\nWe then generate dev version strings based on the commits since the last\nrelease and include the current Git SHA to disambiguate multiple dev versions\nwith the same number of commits since the release.\n\n.. note::\n",
                      "markdown": "`raise an error, otherwise we use the version from ``setup.cfg`` as the target.\n\nWe then generate dev version strings based on the commits since the last\nrelease and include the current Git SHA to disambiguate multiple dev versions\nwith the same number of commits since the release.\n\n.. note::\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/doc/source/user/features.rst"
                },
                "region": {
                  "startLine": 129,
                  "startColumn": 12,
                  "endLine": 129,
                  "endColumn": 17,
                  "snippet": {
                    "text": "   *pbr* supports both bare version tag (e.g. ``0.1.0``) and version prefixed\n   with ``v`` or ``V`` (e.g. ``v0.1.0``)\n\nWe then walk Git history back to the last release. Within each commit we look\nfor a ``Sem-Ver:`` pseudo header and, if found, parse it looking for keywords.\nUnknown symbols are not an error (so that folk can't wedge *pbr* or break their\ntree), but we will emit an info-level warning message. The following symbols\n",
                    "rendered": {
                      "text": "   *pbr* supports both bare version tag (e.g. ``0.1.0``) and version prefixed\n   with ``v`` or ``V`` (e.g. ``v0.1.0``)\n\nWe then walk Git history back to the last release. Within each commit we look\nfor a ``Sem-Ver:`` pseudo header and, if found, parse it looking for keywords.\nUnknown symbols are not an error (so that folk can't wedge *pbr* or break their\ntree), but we will emit an info-level warning message. The following symbols\n",
                      "markdown": "`   *pbr* supports both bare version tag (e.g. ``0.1.0``) and version prefixed\n   with ``v`` or ``V`` (e.g. ``v0.1.0``)\n\nWe then walk Git history back to the last release. Within each commit we look\nfor a ``Sem-Ver:`` pseudo header and, if found, parse it looking for keywords.\nUnknown symbols are not an error (so that folk can't wedge *pbr* or break their\ntree), but we will emit an info-level warning message. The following symbols\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/doc/source/user/features.rst"
                },
                "region": {
                  "startLine": 110,
                  "startColumn": 26,
                  "endLine": 110,
                  "endColumn": 31,
                  "snippet": {
                    "text": ".. admonition:: Summary\n\n    *pbr* will automatically configure your version for you by parsing\n    semantically-versioned Git tags.\n\nVersions can be managed two ways - *post-versioning* and *pre-versioning*.\n*Post-versioning* is the default while *pre-versioning* is enabled by setting\n",
                    "rendered": {
                      "text": ".. admonition:: Summary\n\n    *pbr* will automatically configure your version for you by parsing\n    semantically-versioned Git tags.\n\nVersions can be managed two ways - *post-versioning* and *pre-versioning*.\n*Post-versioning* is the default while *pre-versioning* is enabled by setting\n",
                      "markdown": "`.. admonition:: Summary\n\n    *pbr* will automatically configure your version for you by parsing\n    semantically-versioned Git tags.\n\nVersions can be managed two ways - *post-versioning* and *pre-versioning*.\n*Post-versioning* is the default while *pre-versioning* is enabled by setting\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/doc/source/user/features.rst"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 4,
                  "endLine": 51,
                  "endColumn": 9,
                  "snippet": {
                    "text": "       pbr=True\n   )\n\n   $ cat setup.cfg\n   [metadata]\n   name = mypackage\n   description = A short description\n",
                    "rendered": {
                      "text": "       pbr=True\n   )\n\n   $ cat setup.cfg\n   [metadata]\n   name = mypackage\n   description = A short description\n",
                      "markdown": "`       pbr=True\n   )\n\n   $ cat setup.cfg\n   [metadata]\n   name = mypackage\n   description = A short description\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/doc/source/user/features.rst"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 4,
                  "endLine": 46,
                  "endColumn": 9,
                  "snippet": {
                    "text": "   ├── setup.py\n   └── somepackage\n\n   $ cat setup.py\n   setuptools.setup(\n       pbr=True\n   )\n",
                    "rendered": {
                      "text": "   ├── setup.py\n   └── somepackage\n\n   $ cat setup.py\n   setuptools.setup(\n       pbr=True\n   )\n",
                      "markdown": "`   ├── setup.py\n   └── somepackage\n\n   $ cat setup.py\n   setuptools.setup(\n       pbr=True\n   )\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/doc/source/user/features.rst"
                },
                "region": {
                  "startLine": 23,
                  "startColumn": 4,
                  "endLine": 23,
                  "endColumn": 9,
                  "snippet": {
                    "text": "   ├── setup.py\n   └── somepackage\n\n   $ cat setup.py\n   setuptools.setup(\n       name='mypackage',\n       version='1.0.0',\n",
                    "rendered": {
                      "text": "   ├── setup.py\n   └── somepackage\n\n   $ cat setup.py\n   setuptools.setup(\n       name='mypackage',\n       version='1.0.0',\n",
                      "markdown": "`   ├── setup.py\n   └── somepackage\n\n   $ cat setup.py\n   setuptools.setup(\n       name='mypackage',\n       version='1.0.0',\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/tests/testpackage/setup.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/tests/base.py"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 23,
                  "endLine": 7,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n# not use this file except in compliance with the License. You may obtain\n# a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n# not use this file except in compliance with the License. You may obtain\n# a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n# not use this file except in compliance with the License. You may obtain\n# a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/tests/base.py"
                },
                "region": {
                  "startLine": 88,
                  "startColumn": 21,
                  "endLine": 88,
                  "endColumn": 26,
                  "snippet": {
                    "text": "        if os.environ.get('OS_STDOUT_CAPTURE') in options.TRUE_VALUES:\n            stdout = self.useFixture(fixtures.StringStream('stdout')).stream\n            self.useFixture(fixtures.MonkeyPatch('sys.stdout', stdout))\n        if os.environ.get('OS_STDERR_CAPTURE') in options.TRUE_VALUES:\n            stderr = self.useFixture(fixtures.StringStream('stderr')).stream\n            self.useFixture(fixtures.MonkeyPatch('sys.stderr', stderr))\n        self.log_fixture = self.useFixture(\n",
                    "rendered": {
                      "text": "        if os.environ.get('OS_STDOUT_CAPTURE') in options.TRUE_VALUES:\n            stdout = self.useFixture(fixtures.StringStream('stdout')).stream\n            self.useFixture(fixtures.MonkeyPatch('sys.stdout', stdout))\n        if os.environ.get('OS_STDERR_CAPTURE') in options.TRUE_VALUES:\n            stderr = self.useFixture(fixtures.StringStream('stderr')).stream\n            self.useFixture(fixtures.MonkeyPatch('sys.stderr', stderr))\n        self.log_fixture = self.useFixture(\n",
                      "markdown": "`        if os.environ.get('OS_STDOUT_CAPTURE') in options.TRUE_VALUES:\n            stdout = self.useFixture(fixtures.StringStream('stdout')).stream\n            self.useFixture(fixtures.MonkeyPatch('sys.stdout', stdout))\n        if os.environ.get('OS_STDERR_CAPTURE') in options.TRUE_VALUES:\n            stderr = self.useFixture(fixtures.StringStream('stderr')).stream\n            self.useFixture(fixtures.MonkeyPatch('sys.stderr', stderr))\n        self.log_fixture = self.useFixture(\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/tests/base.py"
                },
                "region": {
                  "startLine": 85,
                  "startColumn": 21,
                  "endLine": 85,
                  "endColumn": 26,
                  "snippet": {
                    "text": "        if test_timeout > 0:\n            self.useFixture(fixtures.Timeout(test_timeout, gentle=True))\n\n        if os.environ.get('OS_STDOUT_CAPTURE') in options.TRUE_VALUES:\n            stdout = self.useFixture(fixtures.StringStream('stdout')).stream\n            self.useFixture(fixtures.MonkeyPatch('sys.stdout', stdout))\n        if os.environ.get('OS_STDERR_CAPTURE') in options.TRUE_VALUES:\n",
                    "rendered": {
                      "text": "        if test_timeout > 0:\n            self.useFixture(fixtures.Timeout(test_timeout, gentle=True))\n\n        if os.environ.get('OS_STDOUT_CAPTURE') in options.TRUE_VALUES:\n            stdout = self.useFixture(fixtures.StringStream('stdout')).stream\n            self.useFixture(fixtures.MonkeyPatch('sys.stdout', stdout))\n        if os.environ.get('OS_STDERR_CAPTURE') in options.TRUE_VALUES:\n",
                      "markdown": "`        if test_timeout > 0:\n            self.useFixture(fixtures.Timeout(test_timeout, gentle=True))\n\n        if os.environ.get('OS_STDOUT_CAPTURE') in options.TRUE_VALUES:\n            stdout = self.useFixture(fixtures.StringStream('stdout')).stream\n            self.useFixture(fixtures.MonkeyPatch('sys.stdout', stdout))\n        if os.environ.get('OS_STDERR_CAPTURE') in options.TRUE_VALUES:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/tests/base.py"
                },
                "region": {
                  "startLine": 74,
                  "startColumn": 33,
                  "endLine": 74,
                  "endColumn": 38,
                  "snippet": {
                    "text": "\n    def setUp(self):\n        super(BaseTestCase, self).setUp()\n        test_timeout = os.environ.get('OS_TEST_TIMEOUT', 30)\n        try:\n            test_timeout = int(test_timeout)\n        except ValueError:\n",
                    "rendered": {
                      "text": "\n    def setUp(self):\n        super(BaseTestCase, self).setUp()\n        test_timeout = os.environ.get('OS_TEST_TIMEOUT', 30)\n        try:\n            test_timeout = int(test_timeout)\n        except ValueError:\n",
                      "markdown": "`\n    def setUp(self):\n        super(BaseTestCase, self).setUp()\n        test_timeout = os.environ.get('OS_TEST_TIMEOUT', 30)\n        try:\n            test_timeout = int(test_timeout)\n        except ValueError:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/tests/base.py"
                },
                "region": {
                  "startLine": 95,
                  "startColumn": 35,
                  "endLine": 95,
                  "endColumn": 40,
                  "snippet": {
                    "text": "            fixtures.FakeLogger('pbr'))\n\n        # Older git does not have config --local, so create a temporary home\n        # directory to permit using git config --global without stepping on\n        # developer configuration.\n        self.useFixture(fixtures.TempHomeDir())\n        self.useFixture(fixtures.NestedTempfile())\n",
                    "rendered": {
                      "text": "            fixtures.FakeLogger('pbr'))\n\n        # Older git does not have config --local, so create a temporary home\n        # directory to permit using git config --global without stepping on\n        # developer configuration.\n        self.useFixture(fixtures.TempHomeDir())\n        self.useFixture(fixtures.NestedTempfile())\n",
                      "markdown": "`            fixtures.FakeLogger('pbr'))\n\n        # Older git does not have config --local, so create a temporary home\n        # directory to permit using git config --global without stepping on\n        # developer configuration.\n        self.useFixture(fixtures.TempHomeDir())\n        self.useFixture(fixtures.NestedTempfile())\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/tests/base.py"
                },
                "region": {
                  "startLine": 94,
                  "startColumn": 15,
                  "endLine": 94,
                  "endColumn": 20,
                  "snippet": {
                    "text": "        self.log_fixture = self.useFixture(\n            fixtures.FakeLogger('pbr'))\n\n        # Older git does not have config --local, so create a temporary home\n        # directory to permit using git config --global without stepping on\n        # developer configuration.\n        self.useFixture(fixtures.TempHomeDir())\n",
                    "rendered": {
                      "text": "        self.log_fixture = self.useFixture(\n            fixtures.FakeLogger('pbr'))\n\n        # Older git does not have config --local, so create a temporary home\n        # directory to permit using git config --global without stepping on\n        # developer configuration.\n        self.useFixture(fixtures.TempHomeDir())\n",
                      "markdown": "`        self.log_fixture = self.useFixture(\n            fixtures.FakeLogger('pbr'))\n\n        # Older git does not have config --local, so create a temporary home\n        # directory to permit using git config --global without stepping on\n        # developer configuration.\n        self.useFixture(fixtures.TempHomeDir())\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/tests/base.py"
                },
                "region": {
                  "startLine": 78,
                  "startColumn": 16,
                  "endLine": 78,
                  "endColumn": 25,
                  "snippet": {
                    "text": "        try:\n            test_timeout = int(test_timeout)\n        except ValueError:\n            # If timeout value is invalid, fail hard.\n            print(\"OS_TEST_TIMEOUT set to invalid value\"\n                  \" defaulting to no timeout\")\n            test_timeout = 0\n",
                    "rendered": {
                      "text": "        try:\n            test_timeout = int(test_timeout)\n        except ValueError:\n            # If timeout value is invalid, fail hard.\n            print(\"OS_TEST_TIMEOUT set to invalid value\"\n                  \" defaulting to no timeout\")\n            test_timeout = 0\n",
                      "markdown": "`        try:\n            test_timeout = int(test_timeout)\n        except ValueError:\n            # If timeout value is invalid, fail hard.\n            print(\"OS_TEST_TIMEOUT set to invalid value\"\n                  \" defaulting to no timeout\")\n            test_timeout = 0\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/tests/base.py"
                },
                "region": {
                  "startLine": 88,
                  "startColumn": 14,
                  "endLine": 88,
                  "endColumn": 25,
                  "snippet": {
                    "text": "        if os.environ.get('OS_STDOUT_CAPTURE') in options.TRUE_VALUES:\n            stdout = self.useFixture(fixtures.StringStream('stdout')).stream\n            self.useFixture(fixtures.MonkeyPatch('sys.stdout', stdout))\n        if os.environ.get('OS_STDERR_CAPTURE') in options.TRUE_VALUES:\n            stderr = self.useFixture(fixtures.StringStream('stderr')).stream\n            self.useFixture(fixtures.MonkeyPatch('sys.stderr', stderr))\n        self.log_fixture = self.useFixture(\n",
                    "rendered": {
                      "text": "        if os.environ.get('OS_STDOUT_CAPTURE') in options.TRUE_VALUES:\n            stdout = self.useFixture(fixtures.StringStream('stdout')).stream\n            self.useFixture(fixtures.MonkeyPatch('sys.stdout', stdout))\n        if os.environ.get('OS_STDERR_CAPTURE') in options.TRUE_VALUES:\n            stderr = self.useFixture(fixtures.StringStream('stderr')).stream\n            self.useFixture(fixtures.MonkeyPatch('sys.stderr', stderr))\n        self.log_fixture = self.useFixture(\n",
                      "markdown": "`        if os.environ.get('OS_STDOUT_CAPTURE') in options.TRUE_VALUES:\n            stdout = self.useFixture(fixtures.StringStream('stdout')).stream\n            self.useFixture(fixtures.MonkeyPatch('sys.stdout', stdout))\n        if os.environ.get('OS_STDERR_CAPTURE') in options.TRUE_VALUES:\n            stderr = self.useFixture(fixtures.StringStream('stderr')).stream\n            self.useFixture(fixtures.MonkeyPatch('sys.stderr', stderr))\n        self.log_fixture = self.useFixture(\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/tests/base.py"
                },
                "region": {
                  "startLine": 85,
                  "startColumn": 14,
                  "endLine": 85,
                  "endColumn": 25,
                  "snippet": {
                    "text": "        if test_timeout > 0:\n            self.useFixture(fixtures.Timeout(test_timeout, gentle=True))\n\n        if os.environ.get('OS_STDOUT_CAPTURE') in options.TRUE_VALUES:\n            stdout = self.useFixture(fixtures.StringStream('stdout')).stream\n            self.useFixture(fixtures.MonkeyPatch('sys.stdout', stdout))\n        if os.environ.get('OS_STDERR_CAPTURE') in options.TRUE_VALUES:\n",
                    "rendered": {
                      "text": "        if test_timeout > 0:\n            self.useFixture(fixtures.Timeout(test_timeout, gentle=True))\n\n        if os.environ.get('OS_STDOUT_CAPTURE') in options.TRUE_VALUES:\n            stdout = self.useFixture(fixtures.StringStream('stdout')).stream\n            self.useFixture(fixtures.MonkeyPatch('sys.stdout', stdout))\n        if os.environ.get('OS_STDERR_CAPTURE') in options.TRUE_VALUES:\n",
                      "markdown": "`        if test_timeout > 0:\n            self.useFixture(fixtures.Timeout(test_timeout, gentle=True))\n\n        if os.environ.get('OS_STDOUT_CAPTURE') in options.TRUE_VALUES:\n            stdout = self.useFixture(fixtures.StringStream('stdout')).stream\n            self.useFixture(fixtures.MonkeyPatch('sys.stdout', stdout))\n        if os.environ.get('OS_STDERR_CAPTURE') in options.TRUE_VALUES:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/tests/base.py"
                },
                "region": {
                  "startLine": 74,
                  "startColumn": 26,
                  "endLine": 74,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\n    def setUp(self):\n        super(BaseTestCase, self).setUp()\n        test_timeout = os.environ.get('OS_TEST_TIMEOUT', 30)\n        try:\n            test_timeout = int(test_timeout)\n        except ValueError:\n",
                    "rendered": {
                      "text": "\n    def setUp(self):\n        super(BaseTestCase, self).setUp()\n        test_timeout = os.environ.get('OS_TEST_TIMEOUT', 30)\n        try:\n            test_timeout = int(test_timeout)\n        except ValueError:\n",
                      "markdown": "`\n    def setUp(self):\n        super(BaseTestCase, self).setUp()\n        test_timeout = os.environ.get('OS_TEST_TIMEOUT', 30)\n        try:\n            test_timeout = int(test_timeout)\n        except ValueError:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/tests/test_packaging.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/tests/test_packaging.py"
                },
                "region": {
                  "startLine": 1042,
                  "startColumn": 17,
                  "endLine": 1042,
                  "endColumn": 22,
                  "snippet": {
                    "text": "        venv = self.useFixture(Venv('PEP517'))\n\n        # Test building sdists and wheels works. Note we do not use pip here\n        # because pip will forcefully install the latest version of PBR on\n        # pypi to satisfy the build-system requires. This means we can't self\n        # test changes using pip. Build with --no-isolation appears to avoid\n        # this problem.\n",
                    "rendered": {
                      "text": "        venv = self.useFixture(Venv('PEP517'))\n\n        # Test building sdists and wheels works. Note we do not use pip here\n        # because pip will forcefully install the latest version of PBR on\n        # pypi to satisfy the build-system requires. This means we can't self\n        # test changes using pip. Build with --no-isolation appears to avoid\n        # this problem.\n",
                      "markdown": "`        venv = self.useFixture(Venv('PEP517'))\n\n        # Test building sdists and wheels works. Note we do not use pip here\n        # because pip will forcefully install the latest version of PBR on\n        # pypi to satisfy the build-system requires. This means we can't self\n        # test changes using pip. Build with --no-isolation appears to avoid\n        # this problem.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/tests/test_packaging.py"
                },
                "region": {
                  "startLine": 1041,
                  "startColumn": 67,
                  "endLine": 1041,
                  "endColumn": 72,
                  "snippet": {
                    "text": "        pkg_dir = pkg_dirs['test_pep517']\n        venv = self.useFixture(Venv('PEP517'))\n\n        # Test building sdists and wheels works. Note we do not use pip here\n        # because pip will forcefully install the latest version of PBR on\n        # pypi to satisfy the build-system requires. This means we can't self\n        # test changes using pip. Build with --no-isolation appears to avoid\n",
                    "rendered": {
                      "text": "        pkg_dir = pkg_dirs['test_pep517']\n        venv = self.useFixture(Venv('PEP517'))\n\n        # Test building sdists and wheels works. Note we do not use pip here\n        # because pip will forcefully install the latest version of PBR on\n        # pypi to satisfy the build-system requires. This means we can't self\n        # test changes using pip. Build with --no-isolation appears to avoid\n",
                      "markdown": "`        pkg_dir = pkg_dirs['test_pep517']\n        venv = self.useFixture(Venv('PEP517'))\n\n        # Test building sdists and wheels works. Note we do not use pip here\n        # because pip will forcefully install the latest version of PBR on\n        # pypi to satisfy the build-system requires. This means we can't self\n        # test changes using pip. Build with --no-isolation appears to avoid\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/tests/test_packaging.py"
                },
                "region": {
                  "startLine": 482,
                  "startColumn": 15,
                  "endLine": 482,
                  "endColumn": 20,
                  "snippet": {
                    "text": "\n    def test_changelog(self):\n        self.run_setup('sdist', allow_fail=False)\n        # Not a git repo, no ChangeLog created\n        filename = os.path.join(self.package_dir, 'ChangeLog')\n        self.assertFalse(os.path.exists(filename))\n\n",
                    "rendered": {
                      "text": "\n    def test_changelog(self):\n        self.run_setup('sdist', allow_fail=False)\n        # Not a git repo, no ChangeLog created\n        filename = os.path.join(self.package_dir, 'ChangeLog')\n        self.assertFalse(os.path.exists(filename))\n\n",
                      "markdown": "`\n    def test_changelog(self):\n        self.run_setup('sdist', allow_fail=False)\n        # Not a git repo, no ChangeLog created\n        filename = os.path.join(self.package_dir, 'ChangeLog')\n        self.assertFalse(os.path.exists(filename))\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/tests/test_packaging.py"
                },
                "region": {
                  "startLine": 476,
                  "startColumn": 15,
                  "endLine": 476,
                  "endColumn": 20,
                  "snippet": {
                    "text": "\n    def test_authors(self):\n        self.run_setup('sdist', allow_fail=False)\n        # Not a git repo, no AUTHORS file created\n        filename = os.path.join(self.package_dir, 'AUTHORS')\n        self.assertFalse(os.path.exists(filename))\n\n",
                    "rendered": {
                      "text": "\n    def test_authors(self):\n        self.run_setup('sdist', allow_fail=False)\n        # Not a git repo, no AUTHORS file created\n        filename = os.path.join(self.package_dir, 'AUTHORS')\n        self.assertFalse(os.path.exists(filename))\n\n",
                      "markdown": "`\n    def test_authors(self):\n        self.run_setup('sdist', allow_fail=False)\n        # Not a git repo, no AUTHORS file created\n        filename = os.path.join(self.package_dir, 'AUTHORS')\n        self.assertFalse(os.path.exists(filename))\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/tests/test_packaging.py"
                },
                "region": {
                  "startLine": 83,
                  "startColumn": 8,
                  "endLine": 83,
                  "endColumn": 13,
                  "snippet": {
                    "text": "\n\nclass TestRepo(fixtures.Fixture):\n    \"\"\"A git repo for testing with.\n\n    Use of TempHomeDir with this fixture is strongly recommended as due to the\n    lack of config --local in older gits, it will write to the users global\n",
                    "rendered": {
                      "text": "\n\nclass TestRepo(fixtures.Fixture):\n    \"\"\"A git repo for testing with.\n\n    Use of TempHomeDir with this fixture is strongly recommended as due to the\n    lack of config --local in older gits, it will write to the users global\n",
                      "markdown": "`\n\nclass TestRepo(fixtures.Fixture):\n    \"\"\"A git repo for testing with.\n\n    Use of TempHomeDir with this fixture is strongly recommended as due to the\n    lack of config --local in older gits, it will write to the users global\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/tests/test_packaging.py"
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 15,
                  "endLine": 63,
                  "snippet": {
                    "text": "import virtualenv\nfrom wheel import wheelfile\n\nfrom pbr import git\nfrom pbr import packaging\nfrom pbr.tests import base\n\ntry:\n",
                    "rendered": {
                      "text": "import virtualenv\nfrom wheel import wheelfile\n\nfrom pbr import git\nfrom pbr import packaging\nfrom pbr.tests import base\n\ntry:\n",
                      "markdown": "`import virtualenv\nfrom wheel import wheelfile\n\nfrom pbr import git\nfrom pbr import packaging\nfrom pbr.tests import base\n\ntry:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/tests/test_packaging.py"
                },
                "region": {
                  "startLine": 443,
                  "startColumn": 24,
                  "endLine": 443,
                  "endColumn": 42,
                  "snippet": {
                    "text": "            group, entry_point, header, template)\n\n        expected_script = (\n            '#!/usr/bin/env fake-header\\nconsole_scripts pbr.packaging '\n            'LocalInstallScripts LocalInstallScripts'\n        )\n        self.assertEqual(expected_script, generated_script)\n",
                    "rendered": {
                      "text": "            group, entry_point, header, template)\n\n        expected_script = (\n            '#!/usr/bin/env fake-header\\nconsole_scripts pbr.packaging '\n            'LocalInstallScripts LocalInstallScripts'\n        )\n        self.assertEqual(expected_script, generated_script)\n",
                      "markdown": "`            group, entry_point, header, template)\n\n        expected_script = (\n            '#!/usr/bin/env fake-header\\nconsole_scripts pbr.packaging '\n            'LocalInstallScripts LocalInstallScripts'\n        )\n        self.assertEqual(expected_script, generated_script)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/tests/util.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/tests/test_wsgi.py"
                },
                "region": {
                  "startLine": 99,
                  "startColumn": 53,
                  "endLine": 99,
                  "endColumn": 57,
                  "snippet": {
                    "text": "            b\"STARTING test server pbr_testpackage.wsgi\",\n            stdoutdata)\n\n        stdoutdata = p.stdout.readline()  # Available at ...\n        print(stdoutdata)\n        m = re.search(br'(http://[^:]+:\\d+)/', stdoutdata)\n        self.assertIsNotNone(m, \"Regex failed to match on %s\" % stdoutdata)\n",
                    "rendered": {
                      "text": "            b\"STARTING test server pbr_testpackage.wsgi\",\n            stdoutdata)\n\n        stdoutdata = p.stdout.readline()  # Available at ...\n        print(stdoutdata)\n        m = re.search(br'(http://[^:]+:\\d+)/', stdoutdata)\n        self.assertIsNotNone(m, \"Regex failed to match on %s\" % stdoutdata)\n",
                      "markdown": "`            b\"STARTING test server pbr_testpackage.wsgi\",\n            stdoutdata)\n\n        stdoutdata = p.stdout.readline()  # Available at ...\n        print(stdoutdata)\n        m = re.search(br'(http://[^:]+:\\d+)/', stdoutdata)\n        self.assertIsNotNone(m, \"Regex failed to match on %s\" % stdoutdata)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/tests/test_wsgi.py"
                },
                "region": {
                  "startLine": 79,
                  "startColumn": 7,
                  "endLine": 79,
                  "endColumn": 12,
                  "snippet": {
                    "text": "            self._test_wsgi(cmd_name, b'Hello World')\n\n    def _test_wsgi(self, cmd_name, output, extra_args=None):\n        cmd = os.path.join(self.temp_dir, 'bin', cmd_name)\n        print(\"Running %s -p 0 -b 127.0.0.1\" % cmd)\n        popen_cmd = [cmd, '-p', '0', '-b', '127.0.0.1']\n        if extra_args:\n",
                    "rendered": {
                      "text": "            self._test_wsgi(cmd_name, b'Hello World')\n\n    def _test_wsgi(self, cmd_name, output, extra_args=None):\n        cmd = os.path.join(self.temp_dir, 'bin', cmd_name)\n        print(\"Running %s -p 0 -b 127.0.0.1\" % cmd)\n        popen_cmd = [cmd, '-p', '0', '-b', '127.0.0.1']\n        if extra_args:\n",
                      "markdown": "`            self._test_wsgi(cmd_name, b'Hello World')\n\n    def _test_wsgi(self, cmd_name, output, extra_args=None):\n        cmd = os.path.join(self.temp_dir, 'bin', cmd_name)\n        print(\"Running %s -p 0 -b 127.0.0.1\" % cmd)\n        popen_cmd = [cmd, '-p', '0', '-b', '127.0.0.1']\n        if extra_args:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/tests/test_wsgi.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 23,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n# not use this file except in compliance with the License. You may obtain\n# a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n# not use this file except in compliance with the License. You may obtain\n# a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n# not use this file except in compliance with the License. You may obtain\n# a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/tests/test_wsgi.py"
                },
                "region": {
                  "startLine": 126,
                  "startColumn": 40,
                  "endLine": 126,
                  "endColumn": 48,
                  "snippet": {
                    "text": "\n    def _check_wsgi_install_content(self, install_stdout):\n        for cmd_name in self.cmd_names:\n            install_txt = 'Installing %s script to %s' % (cmd_name,\n                                                          self.temp_dir)\n            self.assertIn(install_txt, install_stdout)\n\n",
                    "rendered": {
                      "text": "\n    def _check_wsgi_install_content(self, install_stdout):\n        for cmd_name in self.cmd_names:\n            install_txt = 'Installing %s script to %s' % (cmd_name,\n                                                          self.temp_dir)\n            self.assertIn(install_txt, install_stdout)\n\n",
                      "markdown": "`\n    def _check_wsgi_install_content(self, install_stdout):\n        for cmd_name in self.cmd_names:\n            install_txt = 'Installing %s script to %s' % (cmd_name,\n                                                          self.temp_dir)\n            self.assertIn(install_txt, install_stdout)\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/tests/test_wsgi.py"
                },
                "region": {
                  "startLine": 85,
                  "startColumn": 7,
                  "endLine": 85,
                  "endColumn": 12,
                  "snippet": {
                    "text": "        if extra_args:\n            popen_cmd.extend(extra_args)\n\n        env = {'PYTHONPATH': self._get_path()}\n\n        p = subprocess.Popen(popen_cmd, stdout=subprocess.PIPE,\n                             stderr=subprocess.PIPE, cwd=self.temp_dir,\n",
                    "rendered": {
                      "text": "        if extra_args:\n            popen_cmd.extend(extra_args)\n\n        env = {'PYTHONPATH': self._get_path()}\n\n        p = subprocess.Popen(popen_cmd, stdout=subprocess.PIPE,\n                             stderr=subprocess.PIPE, cwd=self.temp_dir,\n",
                      "markdown": "`        if extra_args:\n            popen_cmd.extend(extra_args)\n\n        env = {'PYTHONPATH': self._get_path()}\n\n        p = subprocess.Popen(popen_cmd, stdout=subprocess.PIPE,\n                             stderr=subprocess.PIPE, cwd=self.temp_dir,\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/tests/test_wsgi.py"
                },
                "region": {
                  "startLine": 62,
                  "startColumn": 12,
                  "endLine": 62,
                  "endColumn": 20,
                  "snippet": {
                    "text": "\n        This test actually attempts to start and interact with the\n        wsgi script in question to demonstrate that it's a working\n        wsgi script using simple server.\n\n        \"\"\"\n        if os.name == 'nt':\n",
                    "rendered": {
                      "text": "\n        This test actually attempts to start and interact with the\n        wsgi script in question to demonstrate that it's a working\n        wsgi script using simple server.\n\n        \"\"\"\n        if os.name == 'nt':\n",
                      "markdown": "`\n        This test actually attempts to start and interact with the\n        wsgi script in question to demonstrate that it's a working\n        wsgi script using simple server.\n\n        \"\"\"\n        if os.name == 'nt':\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/tests/test_wsgi.py"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 12,
                  "endLine": 61,
                  "endColumn": 20,
                  "snippet": {
                    "text": "        \"\"\"Test that we install a runnable wsgi script.\n\n        This test actually attempts to start and interact with the\n        wsgi script in question to demonstrate that it's a working\n        wsgi script using simple server.\n\n        \"\"\"\n",
                    "rendered": {
                      "text": "        \"\"\"Test that we install a runnable wsgi script.\n\n        This test actually attempts to start and interact with the\n        wsgi script in question to demonstrate that it's a working\n        wsgi script using simple server.\n\n        \"\"\"\n",
                      "markdown": "`        \"\"\"Test that we install a runnable wsgi script.\n\n        This test actually attempts to start and interact with the\n        wsgi script in question to demonstrate that it's a working\n        wsgi script using simple server.\n\n        \"\"\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/tests/test_wsgi.py"
                },
                "region": {
                  "startLine": 85,
                  "startColumn": 8,
                  "endLine": 85,
                  "endColumn": 38,
                  "snippet": {
                    "text": "        if extra_args:\n            popen_cmd.extend(extra_args)\n\n        env = {'PYTHONPATH': self._get_path()}\n\n        p = subprocess.Popen(popen_cmd, stdout=subprocess.PIPE,\n                             stderr=subprocess.PIPE, cwd=self.temp_dir,\n",
                    "rendered": {
                      "text": "        if extra_args:\n            popen_cmd.extend(extra_args)\n\n        env = {'PYTHONPATH': self._get_path()}\n\n        p = subprocess.Popen(popen_cmd, stdout=subprocess.PIPE,\n                             stderr=subprocess.PIPE, cwd=self.temp_dir,\n",
                      "markdown": "`        if extra_args:\n            popen_cmd.extend(extra_args)\n\n        env = {'PYTHONPATH': self._get_path()}\n\n        p = subprocess.Popen(popen_cmd, stdout=subprocess.PIPE,\n                             stderr=subprocess.PIPE, cwd=self.temp_dir,\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/tests/test_core.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/tests/test_core.py"
                },
                "region": {
                  "startLine": 148,
                  "startColumn": 41,
                  "endLine": 148,
                  "endColumn": 46,
                  "snippet": {
                    "text": "        stdout, _, return_code = self.run_setup('sdist', '--formats=gztar')\n\n    def test_sdist_git_extra_files(self):\n        \"\"\"Test that extra files found in git are correctly added.\"\"\"\n        # There can be only one\n        tf_path = glob.glob(os.path.join('dist', '*.tar.gz'))[0]\n        tf = tarfile.open(tf_path)\n",
                    "rendered": {
                      "text": "        stdout, _, return_code = self.run_setup('sdist', '--formats=gztar')\n\n    def test_sdist_git_extra_files(self):\n        \"\"\"Test that extra files found in git are correctly added.\"\"\"\n        # There can be only one\n        tf_path = glob.glob(os.path.join('dist', '*.tar.gz'))[0]\n        tf = tarfile.open(tf_path)\n",
                      "markdown": "`        stdout, _, return_code = self.run_setup('sdist', '--formats=gztar')\n\n    def test_sdist_git_extra_files(self):\n        \"\"\"Test that extra files found in git are correctly added.\"\"\"\n        # There can be only one\n        tf_path = glob.glob(os.path.join('dist', '*.tar.gz'))[0]\n        tf = tarfile.open(tf_path)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/tests/test_core.py"
                },
                "region": {
                  "startLine": 143,
                  "startColumn": 53,
                  "endLine": 143,
                  "endColumn": 58,
                  "snippet": {
                    "text": "\n        stdout, _, return_code = self._run_cmd('git', ('add', '.'))\n        stdout, _, return_code = self._run_cmd(\n            'git', ('commit', '-m', 'Turn this into a git repo'))\n\n        stdout, _, return_code = self.run_setup('sdist', '--formats=gztar')\n\n",
                    "rendered": {
                      "text": "\n        stdout, _, return_code = self._run_cmd('git', ('add', '.'))\n        stdout, _, return_code = self._run_cmd(\n            'git', ('commit', '-m', 'Turn this into a git repo'))\n\n        stdout, _, return_code = self.run_setup('sdist', '--formats=gztar')\n\n",
                      "markdown": "`\n        stdout, _, return_code = self._run_cmd('git', ('add', '.'))\n        stdout, _, return_code = self._run_cmd(\n            'git', ('commit', '-m', 'Turn this into a git repo'))\n\n        stdout, _, return_code = self.run_setup('sdist', '--formats=gztar')\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/tests/test_core.py"
                },
                "region": {
                  "startLine": 57,
                  "startColumn": 40,
                  "endLine": 57,
                  "endColumn": 48,
                  "snippet": {
                    "text": "\n    def check_script_install(self, install_stdout):\n        for cmd_name in self.cmd_names:\n            install_txt = 'Installing %s script to %s' % (cmd_name,\n                                                          self.temp_dir)\n            self.assertIn(install_txt, install_stdout)\n\n",
                    "rendered": {
                      "text": "\n    def check_script_install(self, install_stdout):\n        for cmd_name in self.cmd_names:\n            install_txt = 'Installing %s script to %s' % (cmd_name,\n                                                          self.temp_dir)\n            self.assertIn(install_txt, install_stdout)\n\n",
                      "markdown": "`\n    def check_script_install(self, install_stdout):\n        for cmd_name in self.cmd_names:\n            install_txt = 'Installing %s script to %s' % (cmd_name,\n                                                          self.temp_dir)\n            self.assertIn(install_txt, install_stdout)\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/tests/test_files.py"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 23,
                  "endLine": 7,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n# not use this file except in compliance with the License. You may obtain\n# a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n# not use this file except in compliance with the License. You may obtain\n# a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n# not use this file except in compliance with the License. You may obtain\n# a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/core.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/options.py"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 38,
                  "endLine": 4,
                  "snippet": {
                    "text": "# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/find_package.py"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 23,
                  "endLine": 7,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n# not use this file except in compliance with the License. You may obtain\n# a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n# not use this file except in compliance with the License. You may obtain\n# a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n# not use this file except in compliance with the License. You may obtain\n# a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/packaging.py"
                },
                "region": {
                  "startLine": 802,
                  "startColumn": 61,
                  "endLine": 802,
                  "endColumn": 65,
                  "snippet": {
                    "text": "                target_version = None\n        result = _get_version_from_git_target(git_dir, target_version)\n        return result.release_string()\n    # If we don't know the version, return an empty string so at least\n    # the downstream users of the value always have the same type of\n    # object to work with.\n    try:\n",
                    "rendered": {
                      "text": "                target_version = None\n        result = _get_version_from_git_target(git_dir, target_version)\n        return result.release_string()\n    # If we don't know the version, return an empty string so at least\n    # the downstream users of the value always have the same type of\n    # object to work with.\n    try:\n",
                      "markdown": "`                target_version = None\n        result = _get_version_from_git_target(git_dir, target_version)\n        return result.release_string()\n    # If we don't know the version, return an empty string so at least\n    # the downstream users of the value always have the same type of\n    # object to work with.\n    try:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/packaging.py"
                },
                "region": {
                  "startLine": 566,
                  "startColumn": 61,
                  "endLine": 567,
                  "snippet": {
                    "text": "    def find_sources(self):\n        \"\"\"Generate SOURCES.txt only if there isn't one already.\n\n        If we are in an sdist command, then we always want to update\n        SOURCES.txt. If we are not in an sdist command, then it doesn't\n        matter one flip, and is actually destructive.\n        However, if we're in a git context, it's always the right thing to do\n        to recreate SOURCES.txt\n",
                    "rendered": {
                      "text": "    def find_sources(self):\n        \"\"\"Generate SOURCES.txt only if there isn't one already.\n\n        If we are in an sdist command, then we always want to update\n        SOURCES.txt. If we are not in an sdist command, then it doesn't\n        matter one flip, and is actually destructive.\n        However, if we're in a git context, it's always the right thing to do\n        to recreate SOURCES.txt\n",
                      "markdown": "`    def find_sources(self):\n        \"\"\"Generate SOURCES.txt only if there isn't one already.\n\n        If we are in an sdist command, then we always want to update\n        SOURCES.txt. If we are not in an sdist command, then it doesn't\n        matter one flip, and is actually destructive.\n        However, if we're in a git context, it's always the right thing to do\n        to recreate SOURCES.txt\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/packaging.py"
                },
                "region": {
                  "startLine": 370,
                  "startColumn": 20,
                  "endLine": 370,
                  "endColumn": 24,
                  "snippet": {
                    "text": "    print(\"*\" * 80)\n    print(\"STARTING test server %(module_name)s.%(invoke_target)s\")\n    url = \"http://%%s:%%d/\" %% (server.server_name, server.server_port)\n    print(\"Available at %%s\" %% url)\n    print(\"DANGER! For testing only, do not use in production\")\n    print(\"*\" * 80)\n    sys.stdout.flush()\n",
                    "rendered": {
                      "text": "    print(\"*\" * 80)\n    print(\"STARTING test server %(module_name)s.%(invoke_target)s\")\n    url = \"http://%%s:%%d/\" %% (server.server_name, server.server_port)\n    print(\"Available at %%s\" %% url)\n    print(\"DANGER! For testing only, do not use in production\")\n    print(\"*\" * 80)\n    sys.stdout.flush()\n",
                      "markdown": "`    print(\"*\" * 80)\n    print(\"STARTING test server %(module_name)s.%(invoke_target)s\")\n    url = \"http://%%s:%%d/\" %% (server.server_name, server.server_port)\n    print(\"Available at %%s\" %% url)\n    print(\"DANGER! For testing only, do not use in production\")\n    print(\"*\" * 80)\n    sys.stdout.flush()\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/packaging.py"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 26,
                  "endLine": 8,
                  "snippet": {
                    "text": "#\n#    Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n#    not use this file except in compliance with the License. You may obtain\n#    a copy of the License at\n#\n#         http://www.apache.org/licenses/LICENSE-2.0\n#\n#    Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n#    Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n#    not use this file except in compliance with the License. You may obtain\n#    a copy of the License at\n#\n#         http://www.apache.org/licenses/LICENSE-2.0\n#\n#    Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n#    Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n#    not use this file except in compliance with the License. You may obtain\n#    a copy of the License at\n#\n#         http://www.apache.org/licenses/LICENSE-2.0\n#\n#    Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/packaging.py"
                },
                "region": {
                  "startLine": 867,
                  "startColumn": 55,
                  "endLine": 867,
                  "endColumn": 60,
                  "snippet": {
                    "text": "    if version:\n        return version\n    raise Exception(\"Versioning for this project requires either an sdist\"\n                    \" tarball, or access to an upstream git repository.\"\n                    \" It's also possible that there is a mismatch between\"\n                    \" the package name in setup.cfg and the argument given\"\n                    \" to pbr.version.VersionInfo. Project name {name} was\"\n",
                    "rendered": {
                      "text": "    if version:\n        return version\n    raise Exception(\"Versioning for this project requires either an sdist\"\n                    \" tarball, or access to an upstream git repository.\"\n                    \" It's also possible that there is a mismatch between\"\n                    \" the package name in setup.cfg and the argument given\"\n                    \" to pbr.version.VersionInfo. Project name {name} was\"\n",
                      "markdown": "`    if version:\n        return version\n    raise Exception(\"Versioning for this project requires either an sdist\"\n                    \" tarball, or access to an upstream git repository.\"\n                    \" It's also possible that there is a mismatch between\"\n                    \" the package name in setup.cfg and the argument given\"\n                    \" to pbr.version.VersionInfo. Project name {name} was\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/packaging.py"
                },
                "region": {
                  "startLine": 842,
                  "startColumn": 42,
                  "endLine": 842,
                  "endColumn": 47,
                  "snippet": {
                    "text": "\n    We do not support setup.py version sanity in git archive tarballs, nor do\n    we support packagers directly sucking our git repo into theirs. We expect\n    that a source tarball be made from our git repo - or that if someone wants\n    to make a source tarball from a fork of our repo with additional tags in it\n    that they understand and desire the results of doing that.\n\n",
                    "rendered": {
                      "text": "\n    We do not support setup.py version sanity in git archive tarballs, nor do\n    we support packagers directly sucking our git repo into theirs. We expect\n    that a source tarball be made from our git repo - or that if someone wants\n    to make a source tarball from a fork of our repo with additional tags in it\n    that they understand and desire the results of doing that.\n\n",
                      "markdown": "`\n    We do not support setup.py version sanity in git archive tarballs, nor do\n    we support packagers directly sucking our git repo into theirs. We expect\n    that a source tarball be made from our git repo - or that if someone wants\n    to make a source tarball from a fork of our repo with additional tags in it\n    that they understand and desire the results of doing that.\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/packaging.py"
                },
                "region": {
                  "startLine": 841,
                  "startColumn": 70,
                  "endLine": 842,
                  "snippet": {
                    "text": "    from git.\n\n    We do not support setup.py version sanity in git archive tarballs, nor do\n    we support packagers directly sucking our git repo into theirs. We expect\n    that a source tarball be made from our git repo - or that if someone wants\n    to make a source tarball from a fork of our repo with additional tags in it\n    that they understand and desire the results of doing that.\n\n",
                    "rendered": {
                      "text": "    from git.\n\n    We do not support setup.py version sanity in git archive tarballs, nor do\n    we support packagers directly sucking our git repo into theirs. We expect\n    that a source tarball be made from our git repo - or that if someone wants\n    to make a source tarball from a fork of our repo with additional tags in it\n    that they understand and desire the results of doing that.\n\n",
                      "markdown": "`    from git.\n\n    We do not support setup.py version sanity in git archive tarballs, nor do\n    we support packagers directly sucking our git repo into theirs. We expect\n    that a source tarball be made from our git repo - or that if someone wants\n    to make a source tarball from a fork of our repo with additional tags in it\n    that they understand and desire the results of doing that.\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/packaging.py"
                },
                "region": {
                  "startLine": 841,
                  "startColumn": 45,
                  "endLine": 841,
                  "endColumn": 50,
                  "snippet": {
                    "text": "    from git.\n\n    We do not support setup.py version sanity in git archive tarballs, nor do\n    we support packagers directly sucking our git repo into theirs. We expect\n    that a source tarball be made from our git repo - or that if someone wants\n    to make a source tarball from a fork of our repo with additional tags in it\n    that they understand and desire the results of doing that.\n",
                    "rendered": {
                      "text": "    from git.\n\n    We do not support setup.py version sanity in git archive tarballs, nor do\n    we support packagers directly sucking our git repo into theirs. We expect\n    that a source tarball be made from our git repo - or that if someone wants\n    to make a source tarball from a fork of our repo with additional tags in it\n    that they understand and desire the results of doing that.\n",
                      "markdown": "`    from git.\n\n    We do not support setup.py version sanity in git archive tarballs, nor do\n    we support packagers directly sucking our git repo into theirs. We expect\n    that a source tarball be made from our git repo - or that if someone wants\n    to make a source tarball from a fork of our repo with additional tags in it\n    that they understand and desire the results of doing that.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/packaging.py"
                },
                "region": {
                  "startLine": 840,
                  "startColumn": 48,
                  "endLine": 840,
                  "endColumn": 53,
                  "snippet": {
                    "text": "    Otherwise, if there is no PKG-INFO or METADATA file, pull the version\n    from git.\n\n    We do not support setup.py version sanity in git archive tarballs, nor do\n    we support packagers directly sucking our git repo into theirs. We expect\n    that a source tarball be made from our git repo - or that if someone wants\n    to make a source tarball from a fork of our repo with additional tags in it\n",
                    "rendered": {
                      "text": "    Otherwise, if there is no PKG-INFO or METADATA file, pull the version\n    from git.\n\n    We do not support setup.py version sanity in git archive tarballs, nor do\n    we support packagers directly sucking our git repo into theirs. We expect\n    that a source tarball be made from our git repo - or that if someone wants\n    to make a source tarball from a fork of our repo with additional tags in it\n",
                      "markdown": "`    Otherwise, if there is no PKG-INFO or METADATA file, pull the version\n    from git.\n\n    We do not support setup.py version sanity in git archive tarballs, nor do\n    we support packagers directly sucking our git repo into theirs. We expect\n    that a source tarball be made from our git repo - or that if someone wants\n    to make a source tarball from a fork of our repo with additional tags in it\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/packaging.py"
                },
                "region": {
                  "startLine": 798,
                  "startColumn": 56,
                  "endLine": 798,
                  "endColumn": 61,
                  "snippet": {
                    "text": "                target_version = version.SemanticVersion.from_pip_string(\n                    pre_version)\n            else:\n                # not released yet - just calculate from git history\n                target_version = None\n        result = _get_version_from_git_target(git_dir, target_version)\n        return result.release_string()\n",
                    "rendered": {
                      "text": "                target_version = version.SemanticVersion.from_pip_string(\n                    pre_version)\n            else:\n                # not released yet - just calculate from git history\n                target_version = None\n        result = _get_version_from_git_target(git_dir, target_version)\n        return result.release_string()\n",
                      "markdown": "`                target_version = version.SemanticVersion.from_pip_string(\n                    pre_version)\n            else:\n                # not released yet - just calculate from git history\n                target_version = None\n        result = _get_version_from_git_target(git_dir, target_version)\n        return result.release_string()\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/packaging.py"
                },
                "region": {
                  "startLine": 743,
                  "startColumn": 23,
                  "endLine": 743,
                  "endColumn": 28,
                  "snippet": {
                    "text": "    necessary based on git metadata - distance to tags, current hash, contents\n    of commit messages.\n\n    :param git_dir: The git directory we're working from.\n    :param target_version: If None, the last tagged version (or 0 if there are\n        no tags yet) is incremented as needed to produce an appropriate target\n        version following semver rules. Otherwise target_version is used as a\n",
                    "rendered": {
                      "text": "    necessary based on git metadata - distance to tags, current hash, contents\n    of commit messages.\n\n    :param git_dir: The git directory we're working from.\n    :param target_version: If None, the last tagged version (or 0 if there are\n        no tags yet) is incremented as needed to produce an appropriate target\n        version following semver rules. Otherwise target_version is used as a\n",
                      "markdown": "`    necessary based on git metadata - distance to tags, current hash, contents\n    of commit messages.\n\n    :param git_dir: The git directory we're working from.\n    :param target_version: If None, the last tagged version (or 0 if there are\n        no tags yet) is incremented as needed to produce an appropriate target\n        version following semver rules. Otherwise target_version is used as a\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/packaging.py"
                },
                "region": {
                  "startLine": 740,
                  "startColumn": 22,
                  "endLine": 740,
                  "endColumn": 27,
                  "snippet": {
                    "text": "    \"\"\"Calculate a version from a target version in git_dir.\n\n    This is used for untagged versions only. A new version is calculated as\n    necessary based on git metadata - distance to tags, current hash, contents\n    of commit messages.\n\n    :param git_dir: The git directory we're working from.\n",
                    "rendered": {
                      "text": "    \"\"\"Calculate a version from a target version in git_dir.\n\n    This is used for untagged versions only. A new version is calculated as\n    necessary based on git metadata - distance to tags, current hash, contents\n    of commit messages.\n\n    :param git_dir: The git directory we're working from.\n",
                      "markdown": "`    \"\"\"Calculate a version from a target version in git_dir.\n\n    This is used for untagged versions only. A new version is calculated as\n    necessary based on git metadata - distance to tags, current hash, contents\n    of commit messages.\n\n    :param git_dir: The git directory we're working from.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/packaging.py"
                },
                "region": {
                  "startLine": 715,
                  "startColumn": 26,
                  "endLine": 715,
                  "endColumn": 32,
                  "snippet": {
                    "text": "def _get_revno_and_last_tag(git_dir):\n    \"\"\"Return the commit data about the most recent tag.\n\n    We use git-describe to find this out, but if there are no\n    tags then we fall back to counting commits since the beginning\n    of time.\n    \"\"\"\n",
                    "rendered": {
                      "text": "def _get_revno_and_last_tag(git_dir):\n    \"\"\"Return the commit data about the most recent tag.\n\n    We use git-describe to find this out, but if there are no\n    tags then we fall back to counting commits since the beginning\n    of time.\n    \"\"\"\n",
                      "markdown": "`def _get_revno_and_last_tag(git_dir):\n    \"\"\"Return the commit data about the most recent tag.\n\n    We use git-describe to find this out, but if there are no\n    tags then we fall back to counting commits since the beginning\n    of time.\n    \"\"\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/packaging.py"
                },
                "region": {
                  "startLine": 684,
                  "startColumn": 5,
                  "endLine": 684,
                  "endColumn": 10,
                  "snippet": {
                    "text": "        version_spec = \"HEAD\"\n    # Get the raw body of the commit messages so that we don't have to\n    # parse out any formatting whitespace and to avoid user settings on\n    # git log output affecting out ability to have working sem ver headers.\n    changelog = git._run_git_command(['log', '--pretty=%B', version_spec],\n                                     git_dir)\n    symbols = set()\n",
                    "rendered": {
                      "text": "        version_spec = \"HEAD\"\n    # Get the raw body of the commit messages so that we don't have to\n    # parse out any formatting whitespace and to avoid user settings on\n    # git log output affecting out ability to have working sem ver headers.\n    changelog = git._run_git_command(['log', '--pretty=%B', version_spec],\n                                     git_dir)\n    symbols = set()\n",
                      "markdown": "`        version_spec = \"HEAD\"\n    # Get the raw body of the commit messages so that we don't have to\n    # parse out any formatting whitespace and to avoid user settings on\n    # git log output affecting out ability to have working sem ver headers.\n    changelog = git._run_git_command(['log', '--pretty=%B', version_spec],\n                                     git_dir)\n    symbols = set()\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/packaging.py"
                },
                "region": {
                  "startLine": 672,
                  "startColumn": 21,
                  "endLine": 672,
                  "endColumn": 27,
                  "snippet": {
                    "text": "def _get_increment_kwargs(git_dir, tag):\n    \"\"\"Calculate the sort of semver increment needed from git history.\n\n    Every commit from HEAD to tag is consider for Sem-Ver metadata lines.\n    See the pbr docs for their syntax.\n\n    :return: a dict of kwargs for passing into SemanticVersion.increment.\n",
                    "rendered": {
                      "text": "def _get_increment_kwargs(git_dir, tag):\n    \"\"\"Calculate the sort of semver increment needed from git history.\n\n    Every commit from HEAD to tag is consider for Sem-Ver metadata lines.\n    See the pbr docs for their syntax.\n\n    :return: a dict of kwargs for passing into SemanticVersion.increment.\n",
                      "markdown": "`def _get_increment_kwargs(git_dir, tag):\n    \"\"\"Calculate the sort of semver increment needed from git history.\n\n    Every commit from HEAD to tag is consider for Sem-Ver metadata lines.\n    See the pbr docs for their syntax.\n\n    :return: a dict of kwargs for passing into SemanticVersion.increment.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/packaging.py"
                },
                "region": {
                  "startLine": 670,
                  "startColumn": 57,
                  "endLine": 670,
                  "endColumn": 62,
                  "snippet": {
                    "text": "\n\ndef _get_increment_kwargs(git_dir, tag):\n    \"\"\"Calculate the sort of semver increment needed from git history.\n\n    Every commit from HEAD to tag is consider for Sem-Ver metadata lines.\n    See the pbr docs for their syntax.\n",
                    "rendered": {
                      "text": "\n\ndef _get_increment_kwargs(git_dir, tag):\n    \"\"\"Calculate the sort of semver increment needed from git history.\n\n    Every commit from HEAD to tag is consider for Sem-Ver metadata lines.\n    See the pbr docs for their syntax.\n",
                      "markdown": "`\n\ndef _get_increment_kwargs(git_dir, tag):\n    \"\"\"Calculate the sort of semver increment needed from git history.\n\n    Every commit from HEAD to tag is consider for Sem-Ver metadata lines.\n    See the pbr docs for their syntax.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/packaging.py"
                },
                "region": {
                  "startLine": 670,
                  "startColumn": 20,
                  "endLine": 670,
                  "endColumn": 26,
                  "snippet": {
                    "text": "\n\ndef _get_increment_kwargs(git_dir, tag):\n    \"\"\"Calculate the sort of semver increment needed from git history.\n\n    Every commit from HEAD to tag is consider for Sem-Ver metadata lines.\n    See the pbr docs for their syntax.\n",
                    "rendered": {
                      "text": "\n\ndef _get_increment_kwargs(git_dir, tag):\n    \"\"\"Calculate the sort of semver increment needed from git history.\n\n    Every commit from HEAD to tag is consider for Sem-Ver metadata lines.\n    See the pbr docs for their syntax.\n",
                      "markdown": "`\n\ndef _get_increment_kwargs(git_dir, tag):\n    \"\"\"Calculate the sort of semver increment needed from git history.\n\n    Every commit from HEAD to tag is consider for Sem-Ver metadata lines.\n    See the pbr docs for their syntax.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/packaging.py"
                },
                "region": {
                  "startLine": 569,
                  "startColumn": 30,
                  "endLine": 569,
                  "endColumn": 35,
                  "snippet": {
                    "text": "        If we are in an sdist command, then we always want to update\n        SOURCES.txt. If we are not in an sdist command, then it doesn't\n        matter one flip, and is actually destructive.\n        However, if we're in a git context, it's always the right thing to do\n        to recreate SOURCES.txt\n        \"\"\"\n        manifest_filename = os.path.join(self.egg_info, \"SOURCES.txt\")\n",
                    "rendered": {
                      "text": "        If we are in an sdist command, then we always want to update\n        SOURCES.txt. If we are not in an sdist command, then it doesn't\n        matter one flip, and is actually destructive.\n        However, if we're in a git context, it's always the right thing to do\n        to recreate SOURCES.txt\n        \"\"\"\n        manifest_filename = os.path.join(self.egg_info, \"SOURCES.txt\")\n",
                      "markdown": "`        If we are in an sdist command, then we always want to update\n        SOURCES.txt. If we are not in an sdist command, then it doesn't\n        matter one flip, and is actually destructive.\n        However, if we're in a git context, it's always the right thing to do\n        to recreate SOURCES.txt\n        \"\"\"\n        manifest_filename = os.path.join(self.egg_info, \"SOURCES.txt\")\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/packaging.py"
                },
                "region": {
                  "startLine": 517,
                  "startColumn": 32,
                  "endLine": 517,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\n\nclass LocalManifestMaker(egg_info.manifest_maker):\n    \"\"\"Add any files that are in git and some standard sensible files.\"\"\"\n\n    def _add_pbr_defaults(self):\n        for template_line in [\n",
                    "rendered": {
                      "text": "\n\nclass LocalManifestMaker(egg_info.manifest_maker):\n    \"\"\"Add any files that are in git and some standard sensible files.\"\"\"\n\n    def _add_pbr_defaults(self):\n        for template_line in [\n",
                      "markdown": "`\n\nclass LocalManifestMaker(egg_info.manifest_maker):\n    \"\"\"Add any files that are in git and some standard sensible files.\"\"\"\n\n    def _add_pbr_defaults(self):\n        for template_line in [\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/packaging.py"
                },
                "region": {
                  "startLine": 417,
                  "startColumn": 21,
                  "endLine": 417,
                  "endColumn": 29,
                  "snippet": {
                    "text": "    :param str template:\n        The script template.\n    :returns:\n        The templated script content\n    :rtype:\n        str\n    \"\"\"\n",
                    "rendered": {
                      "text": "    :param str template:\n        The script template.\n    :returns:\n        The templated script content\n    :rtype:\n        str\n    \"\"\"\n",
                      "markdown": "`    :param str template:\n        The script template.\n    :returns:\n        The templated script content\n    :rtype:\n        str\n    \"\"\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/packaging.py"
                },
                "region": {
                  "startLine": 415,
                  "startColumn": 11,
                  "endLine": 415,
                  "endColumn": 19,
                  "snippet": {
                    "text": "    :param str header:\n        The first line of the script, e.g., \"!#/usr/bin/env python\".\n    :param str template:\n        The script template.\n    :returns:\n        The templated script content\n    :rtype:\n",
                    "rendered": {
                      "text": "    :param str header:\n        The first line of the script, e.g., \"!#/usr/bin/env python\".\n    :param str template:\n        The script template.\n    :returns:\n        The templated script content\n    :rtype:\n",
                      "markdown": "`    :param str header:\n        The first line of the script, e.g., \"!#/usr/bin/env python\".\n    :param str template:\n        The script template.\n    :returns:\n        The templated script content\n    :rtype:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/packaging.py"
                },
                "region": {
                  "startLine": 408,
                  "startColumn": 19,
                  "endLine": 408,
                  "endColumn": 27,
                  "snippet": {
                    "text": "\n\ndef generate_script(group, entry_point, header, template):\n    \"\"\"Generate the script based on the template.\n\n    :param str group:\n        The entry-point group name, e.g., \"console_scripts\".\n",
                    "rendered": {
                      "text": "\n\ndef generate_script(group, entry_point, header, template):\n    \"\"\"Generate the script based on the template.\n\n    :param str group:\n        The entry-point group name, e.g., \"console_scripts\".\n",
                      "markdown": "`\n\ndef generate_script(group, entry_point, header, template):\n    \"\"\"Generate the script based on the template.\n\n    :param str group:\n        The entry-point group name, e.g., \"console_scripts\".\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/packaging.py"
                },
                "region": {
                  "startLine": 270,
                  "startColumn": 34,
                  "endLine": 270,
                  "endColumn": 39,
                  "snippet": {
                    "text": "    command_name = \"rpm_version\"\n\n    def run(self):\n        log.info(\"[pbr] Extracting rpm version\")\n        name = self.distribution.get_name()\n        print(version.VersionInfo(name).semantic_version().rpm_string())\n\n",
                    "rendered": {
                      "text": "    command_name = \"rpm_version\"\n\n    def run(self):\n        log.info(\"[pbr] Extracting rpm version\")\n        name = self.distribution.get_name()\n        print(version.VersionInfo(name).semantic_version().rpm_string())\n\n",
                      "markdown": "`    command_name = \"rpm_version\"\n\n    def run(self):\n        log.info(\"[pbr] Extracting rpm version\")\n        name = self.distribution.get_name()\n        print(version.VersionInfo(name).semantic_version().rpm_string())\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/packaging.py"
                },
                "region": {
                  "startLine": 263,
                  "startColumn": 27,
                  "endLine": 263,
                  "endColumn": 32,
                  "snippet": {
                    "text": "\n\nclass LocalRPMVersion(setuptools.Command):\n    __doc__ = \"\"\"Output the rpm *compatible* version string of this package\"\"\"\n    description = __doc__\n\n    user_options = []\n",
                    "rendered": {
                      "text": "\n\nclass LocalRPMVersion(setuptools.Command):\n    __doc__ = \"\"\"Output the rpm *compatible* version string of this package\"\"\"\n    description = __doc__\n\n    user_options = []\n",
                      "markdown": "`\n\nclass LocalRPMVersion(setuptools.Command):\n    __doc__ = \"\"\"Output the rpm *compatible* version string of this package\"\"\"\n    description = __doc__\n\n    user_options = []\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/packaging.py"
                },
                "region": {
                  "startLine": 218,
                  "startColumn": 42,
                  "endLine": 218,
                  "endColumn": 47,
                  "snippet": {
                    "text": "\n\nclass InstallWithGit(install.install):\n    \"\"\"Extracts ChangeLog and AUTHORS from git then installs.\n\n    This is useful for e.g. readthedocs where the package is\n    installed and then docs built.\n",
                    "rendered": {
                      "text": "\n\nclass InstallWithGit(install.install):\n    \"\"\"Extracts ChangeLog and AUTHORS from git then installs.\n\n    This is useful for e.g. readthedocs where the package is\n    installed and then docs built.\n",
                      "markdown": "`\n\nclass InstallWithGit(install.install):\n    \"\"\"Extracts ChangeLog and AUTHORS from git then installs.\n\n    This is useful for e.g. readthedocs where the package is\n    installed and then docs built.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/packaging.py"
                },
                "region": {
                  "startLine": 202,
                  "startColumn": 52,
                  "endLine": 202,
                  "endColumn": 58,
                  "snippet": {
                    "text": "    if requirements_files is None:\n        requirements_files = get_requirements_files()\n    dependency_links = []\n    # dependency_links inject alternate locations to find packages listed\n    # in requirements\n    for line in get_reqs_from_files(requirements_files):\n        # skip comments and blank lines\n",
                    "rendered": {
                      "text": "    if requirements_files is None:\n        requirements_files = get_requirements_files()\n    dependency_links = []\n    # dependency_links inject alternate locations to find packages listed\n    # in requirements\n    for line in get_reqs_from_files(requirements_files):\n        # skip comments and blank lines\n",
                      "markdown": "`    if requirements_files is None:\n        requirements_files = get_requirements_files()\n    dependency_links = []\n    # dependency_links inject alternate locations to find packages listed\n    # in requirements\n    for line in get_reqs_from_files(requirements_files):\n        # skip comments and blank lines\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/packaging.py"
                },
                "region": {
                  "startLine": 52,
                  "startColumn": 15,
                  "endLine": 53,
                  "snippet": {
                    "text": "from setuptools.command import sdist\n\nfrom pbr import extra_files\nfrom pbr import git\nfrom pbr import options\nimport pbr.pbr_json\nfrom pbr import testr_command\nfrom pbr import version\n",
                    "rendered": {
                      "text": "from setuptools.command import sdist\n\nfrom pbr import extra_files\nfrom pbr import git\nfrom pbr import options\nimport pbr.pbr_json\nfrom pbr import testr_command\nfrom pbr import version\n",
                      "markdown": "`from setuptools.command import sdist\n\nfrom pbr import extra_files\nfrom pbr import git\nfrom pbr import options\nimport pbr.pbr_json\nfrom pbr import testr_command\nfrom pbr import version\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/packaging.py"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 30,
                  "endLine": 46,
                  "snippet": {
                    "text": "import pkg_resources\nimport setuptools\nfrom setuptools.command import develop\nfrom setuptools.command import easy_install\nfrom setuptools.command import egg_info\nfrom setuptools.command import install\nfrom setuptools.command import install_scripts\nfrom setuptools.command import sdist\n",
                    "rendered": {
                      "text": "import pkg_resources\nimport setuptools\nfrom setuptools.command import develop\nfrom setuptools.command import easy_install\nfrom setuptools.command import egg_info\nfrom setuptools.command import install\nfrom setuptools.command import install_scripts\nfrom setuptools.command import sdist\n",
                      "markdown": "`import pkg_resources\nimport setuptools\nfrom setuptools.command import develop\nfrom setuptools.command import easy_install\nfrom setuptools.command import egg_info\nfrom setuptools.command import install\nfrom setuptools.command import install_scripts\nfrom setuptools.command import sdist\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/packaging.py"
                },
                "region": {
                  "startLine": 851,
                  "startColumn": 18,
                  "endLine": 851,
                  "endColumn": 23,
                  "snippet": {
                    "text": "    \"\"\"\n    version = os.environ.get(\n        \"PBR_VERSION\",\n        os.environ.get(\"OSLO_PACKAGE_VERSION\", None))\n    if version:\n        return version\n    version = _get_version_from_pkg_metadata(package_name)\n",
                    "rendered": {
                      "text": "    \"\"\"\n    version = os.environ.get(\n        \"PBR_VERSION\",\n        os.environ.get(\"OSLO_PACKAGE_VERSION\", None))\n    if version:\n        return version\n    version = _get_version_from_pkg_metadata(package_name)\n",
                      "markdown": "`    \"\"\"\n    version = os.environ.get(\n        \"PBR_VERSION\",\n        os.environ.get(\"OSLO_PACKAGE_VERSION\", None))\n    if version:\n        return version\n    version = _get_version_from_pkg_metadata(package_name)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/packaging.py"
                },
                "region": {
                  "startLine": 849,
                  "startColumn": 24,
                  "endLine": 849,
                  "endColumn": 29,
                  "snippet": {
                    "text": "    :param pre_version: The version field from setup.cfg - if set then this\n        version will be the next release.\n    \"\"\"\n    version = os.environ.get(\n        \"PBR_VERSION\",\n        os.environ.get(\"OSLO_PACKAGE_VERSION\", None))\n    if version:\n",
                    "rendered": {
                      "text": "    :param pre_version: The version field from setup.cfg - if set then this\n        version will be the next release.\n    \"\"\"\n    version = os.environ.get(\n        \"PBR_VERSION\",\n        os.environ.get(\"OSLO_PACKAGE_VERSION\", None))\n    if version:\n",
                      "markdown": "`    :param pre_version: The version field from setup.cfg - if set then this\n        version will be the next release.\n    \"\"\"\n    version = os.environ.get(\n        \"PBR_VERSION\",\n        os.environ.get(\"OSLO_PACKAGE_VERSION\", None))\n    if version:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/packaging.py"
                },
                "region": {
                  "startLine": 829,
                  "startColumn": 23,
                  "endLine": 829,
                  "endColumn": 28,
                  "snippet": {
                    "text": "    # Check to make sure we're in our own dir\n    if pkg_metadata.get('Name', None) != package_name:\n        return None\n    return pkg_metadata.get('Version', None)\n\n\ndef get_version(package_name, pre_version=None):\n",
                    "rendered": {
                      "text": "    # Check to make sure we're in our own dir\n    if pkg_metadata.get('Name', None) != package_name:\n        return None\n    return pkg_metadata.get('Version', None)\n\n\ndef get_version(package_name, pre_version=None):\n",
                      "markdown": "`    # Check to make sure we're in our own dir\n    if pkg_metadata.get('Name', None) != package_name:\n        return None\n    return pkg_metadata.get('Version', None)\n\n\ndef get_version(package_name, pre_version=None):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/packaging.py"
                },
                "region": {
                  "startLine": 827,
                  "startColumn": 19,
                  "endLine": 827,
                  "endColumn": 24,
                  "snippet": {
                    "text": "            continue\n\n    # Check to make sure we're in our own dir\n    if pkg_metadata.get('Name', None) != package_name:\n        return None\n    return pkg_metadata.get('Version', None)\n\n",
                    "rendered": {
                      "text": "            continue\n\n    # Check to make sure we're in our own dir\n    if pkg_metadata.get('Name', None) != package_name:\n        return None\n    return pkg_metadata.get('Version', None)\n\n",
                      "markdown": "`            continue\n\n    # Check to make sure we're in our own dir\n    if pkg_metadata.get('Name', None) != package_name:\n        return None\n    return pkg_metadata.get('Version', None)\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/packaging.py"
                },
                "region": {
                  "startLine": 79,
                  "startColumn": 26,
                  "endLine": 79,
                  "endColumn": 31,
                  "snippet": {
                    "text": "def append_text_list(config, key, text_list):\n    \"\"\"Append a \\n separated list to possibly existing value.\"\"\"\n    new_value = []\n    current_value = config.get(key, \"\")\n    if current_value:\n        new_value.append(current_value)\n    new_value.extend(text_list)\n",
                    "rendered": {
                      "text": "def append_text_list(config, key, text_list):\n    \"\"\"Append a \\n separated list to possibly existing value.\"\"\"\n    new_value = []\n    current_value = config.get(key, \"\")\n    if current_value:\n        new_value.append(current_value)\n    new_value.extend(text_list)\n",
                      "markdown": "`def append_text_list(config, key, text_list):\n    \"\"\"Append a \\n separated list to possibly existing value.\"\"\"\n    new_value = []\n    current_value = config.get(key, \"\")\n    if current_value:\n        new_value.append(current_value)\n    new_value.extend(text_list)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/packaging.py"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 22,
                  "endLine": 65,
                  "endColumn": 27,
                  "snippet": {
                    "text": "\n\ndef get_requirements_files():\n    files = os.environ.get(\"PBR_REQUIREMENTS_FILES\")\n    if files:\n        return tuple(f.strip() for f in files.split(','))\n    # Returns a list composed of:\n",
                    "rendered": {
                      "text": "\n\ndef get_requirements_files():\n    files = os.environ.get(\"PBR_REQUIREMENTS_FILES\")\n    if files:\n        return tuple(f.strip() for f in files.split(','))\n    # Returns a list composed of:\n",
                      "markdown": "`\n\ndef get_requirements_files():\n    files = os.environ.get(\"PBR_REQUIREMENTS_FILES\")\n    if files:\n        return tuple(f.strip() for f in files.split(','))\n    # Returns a list composed of:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/packaging.py"
                },
                "region": {
                  "startLine": 851,
                  "startColumn": 11,
                  "endLine": 851,
                  "endColumn": 22,
                  "snippet": {
                    "text": "    \"\"\"\n    version = os.environ.get(\n        \"PBR_VERSION\",\n        os.environ.get(\"OSLO_PACKAGE_VERSION\", None))\n    if version:\n        return version\n    version = _get_version_from_pkg_metadata(package_name)\n",
                    "rendered": {
                      "text": "    \"\"\"\n    version = os.environ.get(\n        \"PBR_VERSION\",\n        os.environ.get(\"OSLO_PACKAGE_VERSION\", None))\n    if version:\n        return version\n    version = _get_version_from_pkg_metadata(package_name)\n",
                      "markdown": "`    \"\"\"\n    version = os.environ.get(\n        \"PBR_VERSION\",\n        os.environ.get(\"OSLO_PACKAGE_VERSION\", None))\n    if version:\n        return version\n    version = _get_version_from_pkg_metadata(package_name)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/packaging.py"
                },
                "region": {
                  "startLine": 849,
                  "startColumn": 17,
                  "endLine": 849,
                  "endColumn": 28,
                  "snippet": {
                    "text": "    :param pre_version: The version field from setup.cfg - if set then this\n        version will be the next release.\n    \"\"\"\n    version = os.environ.get(\n        \"PBR_VERSION\",\n        os.environ.get(\"OSLO_PACKAGE_VERSION\", None))\n    if version:\n",
                    "rendered": {
                      "text": "    :param pre_version: The version field from setup.cfg - if set then this\n        version will be the next release.\n    \"\"\"\n    version = os.environ.get(\n        \"PBR_VERSION\",\n        os.environ.get(\"OSLO_PACKAGE_VERSION\", None))\n    if version:\n",
                      "markdown": "`    :param pre_version: The version field from setup.cfg - if set then this\n        version will be the next release.\n    \"\"\"\n    version = os.environ.get(\n        \"PBR_VERSION\",\n        os.environ.get(\"OSLO_PACKAGE_VERSION\", None))\n    if version:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/packaging.py"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 15,
                  "endLine": 65,
                  "endColumn": 26,
                  "snippet": {
                    "text": "\n\ndef get_requirements_files():\n    files = os.environ.get(\"PBR_REQUIREMENTS_FILES\")\n    if files:\n        return tuple(f.strip() for f in files.split(','))\n    # Returns a list composed of:\n",
                    "rendered": {
                      "text": "\n\ndef get_requirements_files():\n    files = os.environ.get(\"PBR_REQUIREMENTS_FILES\")\n    if files:\n        return tuple(f.strip() for f in files.split(','))\n    # Returns a list composed of:\n",
                      "markdown": "`\n\ndef get_requirements_files():\n    files = os.environ.get(\"PBR_REQUIREMENTS_FILES\")\n    if files:\n        return tuple(f.strip() for f in files.split(','))\n    # Returns a list composed of:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/releasenotes/source/conf.py"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 38,
                  "endLine": 5,
                  "snippet": {
                    "text": "# -*- coding: utf-8 -*-\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "# -*- coding: utf-8 -*-\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`# -*- coding: utf-8 -*-\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/doc/source/user/semver.rst"
                },
                "region": {
                  "startLine": 305,
                  "startColumn": 63,
                  "endLine": 305,
                  "endColumn": 67,
                  "snippet": {
                    "text": "deprecate part of your public API, you should do two things: (1) update\nyour documentation to let users know about the change, (2) issue a new\nminor release with the deprecation in place. Before you completely\nremove the functionality in a new major release there should be at least\none minor release that contains the deprecation so that users can\nsmoothly transition to the new API.\n\n",
                    "rendered": {
                      "text": "deprecate part of your public API, you should do two things: (1) update\nyour documentation to let users know about the change, (2) issue a new\nminor release with the deprecation in place. Before you completely\nremove the functionality in a new major release there should be at least\none minor release that contains the deprecation so that users can\nsmoothly transition to the new API.\n\n",
                      "markdown": "`deprecate part of your public API, you should do two things: (1) update\nyour documentation to let users know about the change, (2) issue a new\nminor release with the deprecation in place. Before you completely\nremove the functionality in a new major release there should be at least\none minor release that contains the deprecation so that users can\nsmoothly transition to the new API.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/doc/source/user/semver.rst"
                },
                "region": {
                  "startLine": 302,
                  "startColumn": 64,
                  "endLine": 303,
                  "snippet": {
                    "text": "\nDeprecating existing functionality is a normal part of software\ndevelopment and is often required to make forward progress. When you\ndeprecate part of your public API, you should do two things: (1) update\nyour documentation to let users know about the change, (2) issue a new\nminor release with the deprecation in place. Before you completely\nremove the functionality in a new major release there should be at least\none minor release that contains the deprecation so that users can\n",
                    "rendered": {
                      "text": "\nDeprecating existing functionality is a normal part of software\ndevelopment and is often required to make forward progress. When you\ndeprecate part of your public API, you should do two things: (1) update\nyour documentation to let users know about the change, (2) issue a new\nminor release with the deprecation in place. Before you completely\nremove the functionality in a new major release there should be at least\none minor release that contains the deprecation so that users can\n",
                      "markdown": "`\nDeprecating existing functionality is a normal part of software\ndevelopment and is often required to make forward progress. When you\ndeprecate part of your public API, you should do two things: (1) update\nyour documentation to let users know about the change, (2) issue a new\nminor release with the deprecation in place. Before you completely\nremove the functionality in a new major release there should be at least\none minor release that contains the deprecation so that users can\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/doc/source/user/semver.rst"
                },
                "region": {
                  "startLine": 274,
                  "startColumn": 21,
                  "endLine": 274,
                  "endColumn": 29,
                  "snippet": {
                    "text": "appropriate, document the offending version and inform your users of the\nproblem so that they are aware of the offending version.\n\nWhat should I do if I update my own dependencies without changing the public API?\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThat would be considered compatible since it does not affect the public\n",
                    "rendered": {
                      "text": "appropriate, document the offending version and inform your users of the\nproblem so that they are aware of the offending version.\n\nWhat should I do if I update my own dependencies without changing the public API?\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThat would be considered compatible since it does not affect the public\n",
                      "markdown": "`appropriate, document the offending version and inform your users of the\nproblem so that they are aware of the offending version.\n\nWhat should I do if I update my own dependencies without changing the public API?\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThat would be considered compatible since it does not affect the public\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/doc/source/user/semver.rst"
                },
                "region": {
                  "startLine": 243,
                  "startColumn": 113,
                  "endLine": 243,
                  "endColumn": 117,
                  "snippet": {
                    "text": "the API every day you should either still be in version 0.y.z or on a\nseparate development branch working on the next major version.\n\nIf even the tiniest backwards incompatible changes to the public API require a major version bump, won't I end up at version 42.0.0 very rapidly?\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThis is a question of responsible development and foresight.\n",
                    "rendered": {
                      "text": "the API every day you should either still be in version 0.y.z or on a\nseparate development branch working on the next major version.\n\nIf even the tiniest backwards incompatible changes to the public API require a major version bump, won't I end up at version 42.0.0 very rapidly?\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThis is a question of responsible development and foresight.\n",
                      "markdown": "`the API every day you should either still be in version 0.y.z or on a\nseparate development branch working on the next major version.\n\nIf even the tiniest backwards incompatible changes to the public API require a major version bump, won't I end up at version 42.0.0 very rapidly?\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThis is a question of responsible development and foresight.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/doc/source/user/semver.rst"
                },
                "region": {
                  "startLine": 225,
                  "startColumn": 66,
                  "endLine": 226,
                  "snippet": {
                    "text": "How should I deal with revisions in the 0.y.z initial development phase?\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe simplest thing to do is start your initial development release at\n0.1.0 and then increment the minor version for each subsequent release.\n\nHow do I know when to release 1.0.0?\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n",
                    "rendered": {
                      "text": "How should I deal with revisions in the 0.y.z initial development phase?\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe simplest thing to do is start your initial development release at\n0.1.0 and then increment the minor version for each subsequent release.\n\nHow do I know when to release 1.0.0?\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n",
                      "markdown": "`How should I deal with revisions in the 0.y.z initial development phase?\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe simplest thing to do is start your initial development release at\n0.1.0 and then increment the minor version for each subsequent release.\n\nHow do I know when to release 1.0.0?\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/doc/source/user/semver.rst"
                },
                "region": {
                  "startLine": 199,
                  "startColumn": 58,
                  "endLine": 199,
                  "endColumn": 62,
                  "snippet": {
                    "text": "A simple example will demonstrate how Semantic Versioning can make\ndependency hell a thing of the past. Consider a library called\n\"Firetruck.\" It requires a Semantically Versioned package named\n\"Ladder.\" At the time that Firetruck is created, Ladder is at version\n3.1.0. Since Firetruck uses some functionality that was first introduced\nin 3.1.0, you can safely specify the Ladder dependency as greater than\nor equal to 3.1.0 but less than 4.0.0. Now, when Ladder version 3.1.1\n",
                    "rendered": {
                      "text": "A simple example will demonstrate how Semantic Versioning can make\ndependency hell a thing of the past. Consider a library called\n\"Firetruck.\" It requires a Semantically Versioned package named\n\"Ladder.\" At the time that Firetruck is created, Ladder is at version\n3.1.0. Since Firetruck uses some functionality that was first introduced\nin 3.1.0, you can safely specify the Ladder dependency as greater than\nor equal to 3.1.0 but less than 4.0.0. Now, when Ladder version 3.1.1\n",
                      "markdown": "`A simple example will demonstrate how Semantic Versioning can make\ndependency hell a thing of the past. Consider a library called\n\"Firetruck.\" It requires a Semantically Versioned package named\n\"Ladder.\" At the time that Firetruck is created, Ladder is at version\n3.1.0. Since Firetruck uses some functionality that was first introduced\nin 3.1.0, you can safely specify the Ladder dependency as greater than\nor equal to 3.1.0 but less than 4.0.0. Now, when Ladder version 3.1.1\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/doc/source/user/semver.rst"
                },
                "region": {
                  "startLine": 199,
                  "startColumn": 9,
                  "endLine": 199,
                  "endColumn": 13,
                  "snippet": {
                    "text": "A simple example will demonstrate how Semantic Versioning can make\ndependency hell a thing of the past. Consider a library called\n\"Firetruck.\" It requires a Semantically Versioned package named\n\"Ladder.\" At the time that Firetruck is created, Ladder is at version\n3.1.0. Since Firetruck uses some functionality that was first introduced\nin 3.1.0, you can safely specify the Ladder dependency as greater than\nor equal to 3.1.0 but less than 4.0.0. Now, when Ladder version 3.1.1\n",
                    "rendered": {
                      "text": "A simple example will demonstrate how Semantic Versioning can make\ndependency hell a thing of the past. Consider a library called\n\"Firetruck.\" It requires a Semantically Versioned package named\n\"Ladder.\" At the time that Firetruck is created, Ladder is at version\n3.1.0. Since Firetruck uses some functionality that was first introduced\nin 3.1.0, you can safely specify the Ladder dependency as greater than\nor equal to 3.1.0 but less than 4.0.0. Now, when Ladder version 3.1.1\n",
                      "markdown": "`A simple example will demonstrate how Semantic Versioning can make\ndependency hell a thing of the past. Consider a library called\n\"Firetruck.\" It requires a Semantically Versioned package named\n\"Ladder.\" At the time that Firetruck is created, Ladder is at version\n3.1.0. Since Firetruck uses some functionality that was first introduced\nin 3.1.0, you can safely specify the Ladder dependency as greater than\nor equal to 3.1.0 but less than 4.0.0. Now, when Ladder version 3.1.1\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/doc/source/user/semver.rst"
                },
                "region": {
                  "startLine": 97,
                  "startColumn": 10,
                  "endLine": 97,
                  "endColumn": 14,
                  "snippet": {
                    "text": "    a new version.\n\n#.  Major version zero (0.y.z) is for initial development. Anything may\n    change at any time. The public API should not be considered stable.\n\n#.  Version 1.0.0 defines the public API. The way in which the version\n    number is incremented after this release is dependent on this public\n",
                    "rendered": {
                      "text": "    a new version.\n\n#.  Major version zero (0.y.z) is for initial development. Anything may\n    change at any time. The public API should not be considered stable.\n\n#.  Version 1.0.0 defines the public API. The way in which the version\n    number is incremented after this release is dependent on this public\n",
                      "markdown": "`    a new version.\n\n#.  Major version zero (0.y.z) is for initial development. Anything may\n    change at any time. The public API should not be considered stable.\n\n#.  Version 1.0.0 defines the public API. The way in which the version\n    number is incremented after this release is dependent on this public\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/doc/source/user/semver.rst"
                },
                "region": {
                  "startLine": 283,
                  "startColumn": 13,
                  "endLine": 283,
                  "endColumn": 21,
                  "snippet": {
                    "text": "will notice any conflicts. Determining whether the change is a patch\nlevel or minor level modification depends on whether you updated your\ndependencies in order to fix a bug or introduce new functionality. I\nwould usually expect additional code for the latter instance, in which\ncase it's obviously a minor level increment.\n\nWhat if I inadvertently alter the public API in a way that is not compliant with the version number change (i.e. the code incorrectly introduces a major breaking change in a patch release)\n",
                    "rendered": {
                      "text": "will notice any conflicts. Determining whether the change is a patch\nlevel or minor level modification depends on whether you updated your\ndependencies in order to fix a bug or introduce new functionality. I\nwould usually expect additional code for the latter instance, in which\ncase it's obviously a minor level increment.\n\nWhat if I inadvertently alter the public API in a way that is not compliant with the version number change (i.e. the code incorrectly introduces a major breaking change in a patch release)\n",
                      "markdown": "`will notice any conflicts. Determining whether the change is a patch\nlevel or minor level modification depends on whether you updated your\ndependencies in order to fix a bug or introduce new functionality. I\nwould usually expect additional code for the latter instance, in which\ncase it's obviously a minor level increment.\n\nWhat if I inadvertently alter the public API in a way that is not compliant with the version number change (i.e. the code incorrectly introduces a major breaking change in a patch release)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/doc/source/user/semver.rst"
                },
                "region": {
                  "startLine": 212,
                  "startColumn": 20,
                  "endLine": 212,
                  "endColumn": 26,
                  "snippet": {
                    "text": "place; there's nothing we can do about that but be vigilant. What you\ncan do is let Semantic Versioning provide you with a sane way to release\nand upgrade packages without having to roll new versions of dependent\npackages, saving you time and hassle.\n\nIf all of this sounds desirable, all you need to do to start using\nSemantic Versioning is to declare that you are doing so and then follow\n",
                    "rendered": {
                      "text": "place; there's nothing we can do about that but be vigilant. What you\ncan do is let Semantic Versioning provide you with a sane way to release\nand upgrade packages without having to roll new versions of dependent\npackages, saving you time and hassle.\n\nIf all of this sounds desirable, all you need to do to start using\nSemantic Versioning is to declare that you are doing so and then follow\n",
                      "markdown": "`place; there's nothing we can do about that but be vigilant. What you\ncan do is let Semantic Versioning provide you with a sane way to release\nand upgrade packages without having to roll new versions of dependent\npackages, saving you time and hassle.\n\nIf all of this sounds desirable, all you need to do to start using\nSemantic Versioning is to declare that you are doing so and then follow\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/doc/source/user/semver.rst"
                },
                "region": {
                  "startLine": 199,
                  "startColumn": 16,
                  "endLine": 199,
                  "endColumn": 22,
                  "snippet": {
                    "text": "A simple example will demonstrate how Semantic Versioning can make\ndependency hell a thing of the past. Consider a library called\n\"Firetruck.\" It requires a Semantically Versioned package named\n\"Ladder.\" At the time that Firetruck is created, Ladder is at version\n3.1.0. Since Firetruck uses some functionality that was first introduced\nin 3.1.0, you can safely specify the Ladder dependency as greater than\nor equal to 3.1.0 but less than 4.0.0. Now, when Ladder version 3.1.1\n",
                    "rendered": {
                      "text": "A simple example will demonstrate how Semantic Versioning can make\ndependency hell a thing of the past. Consider a library called\n\"Firetruck.\" It requires a Semantically Versioned package named\n\"Ladder.\" At the time that Firetruck is created, Ladder is at version\n3.1.0. Since Firetruck uses some functionality that was first introduced\nin 3.1.0, you can safely specify the Ladder dependency as greater than\nor equal to 3.1.0 but less than 4.0.0. Now, when Ladder version 3.1.1\n",
                      "markdown": "`A simple example will demonstrate how Semantic Versioning can make\ndependency hell a thing of the past. Consider a library called\n\"Firetruck.\" It requires a Semantically Versioned package named\n\"Ladder.\" At the time that Firetruck is created, Ladder is at version\n3.1.0. Since Firetruck uses some functionality that was first introduced\nin 3.1.0, you can safely specify the Ladder dependency as greater than\nor equal to 3.1.0 but less than 4.0.0. Now, when Ladder version 3.1.1\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/doc/source/user/semver.rst"
                },
                "region": {
                  "startLine": 189,
                  "startColumn": 34,
                  "endLine": 189,
                  "endColumn": 40,
                  "snippet": {
                    "text": "\nThis is not a new or revolutionary idea. In fact, you probably do\nsomething close to this already. The problem is that \"close\" isn't good\nenough. Without compliance to some sort of formal specification, version\nnumbers are essentially useless for dependency management. By giving a\nname and clear definition to the above ideas, it becomes easy to\ncommunicate your intentions to the users of your software. Once these\n",
                    "rendered": {
                      "text": "\nThis is not a new or revolutionary idea. In fact, you probably do\nsomething close to this already. The problem is that \"close\" isn't good\nenough. Without compliance to some sort of formal specification, version\nnumbers are essentially useless for dependency management. By giving a\nname and clear definition to the above ideas, it becomes easy to\ncommunicate your intentions to the users of your software. Once these\n",
                      "markdown": "`\nThis is not a new or revolutionary idea. In fact, you probably do\nsomething close to this already. The problem is that \"close\" isn't good\nenough. Without compliance to some sort of formal specification, version\nnumbers are essentially useless for dependency management. By giving a\nname and clear definition to the above ideas, it becomes easy to\ncommunicate your intentions to the users of your software. Once these\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/doc/source/user/semver.rst"
                },
                "region": {
                  "startLine": 177,
                  "startColumn": 66,
                  "endLine": 177,
                  "endColumn": 72,
                  "snippet": {
                    "text": "    versions with the same major, minor, and patch version MUST be determined\n    by comparing the identifier to the right of the patch version as follows:\n    if the alpha portion matches, the numeric portion is compared in\n    numerical sort order. If the alpha portion does not match, the sort order\n    is dev < a < b < c. Example: 1.0.0.dev8 < 1.0.0.dev9 < 1.0.0.0a1.dev3 <\n    1.0.0.0a1 < 1.0.0.0b2 < 1.0.0.0c1 < 1.0.0.  Precedence for dev versions if\n    all other components are equal is done by comparing their numeric\n",
                    "rendered": {
                      "text": "    versions with the same major, minor, and patch version MUST be determined\n    by comparing the identifier to the right of the patch version as follows:\n    if the alpha portion matches, the numeric portion is compared in\n    numerical sort order. If the alpha portion does not match, the sort order\n    is dev < a < b < c. Example: 1.0.0.dev8 < 1.0.0.dev9 < 1.0.0.0a1.dev3 <\n    1.0.0.0a1 < 1.0.0.0b2 < 1.0.0.0c1 < 1.0.0.  Precedence for dev versions if\n    all other components are equal is done by comparing their numeric\n",
                      "markdown": "`    versions with the same major, minor, and patch version MUST be determined\n    by comparing the identifier to the right of the patch version as follows:\n    if the alpha portion matches, the numeric portion is compared in\n    numerical sort order. If the alpha portion does not match, the sort order\n    is dev < a < b < c. Example: 1.0.0.dev8 < 1.0.0.dev9 < 1.0.0.0a1.dev3 <\n    1.0.0.0a1 < 1.0.0.0b2 < 1.0.0.0c1 < 1.0.0.  Precedence for dev versions if\n    all other components are equal is done by comparing their numeric\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/doc/source/user/semver.rst"
                },
                "region": {
                  "startLine": 177,
                  "startColumn": 13,
                  "endLine": 177,
                  "endColumn": 19,
                  "snippet": {
                    "text": "    versions with the same major, minor, and patch version MUST be determined\n    by comparing the identifier to the right of the patch version as follows:\n    if the alpha portion matches, the numeric portion is compared in\n    numerical sort order. If the alpha portion does not match, the sort order\n    is dev < a < b < c. Example: 1.0.0.dev8 < 1.0.0.dev9 < 1.0.0.0a1.dev3 <\n    1.0.0.0a1 < 1.0.0.0b2 < 1.0.0.0c1 < 1.0.0.  Precedence for dev versions if\n    all other components are equal is done by comparing their numeric\n",
                    "rendered": {
                      "text": "    versions with the same major, minor, and patch version MUST be determined\n    by comparing the identifier to the right of the patch version as follows:\n    if the alpha portion matches, the numeric portion is compared in\n    numerical sort order. If the alpha portion does not match, the sort order\n    is dev < a < b < c. Example: 1.0.0.dev8 < 1.0.0.dev9 < 1.0.0.0a1.dev3 <\n    1.0.0.0a1 < 1.0.0.0b2 < 1.0.0.0c1 < 1.0.0.  Precedence for dev versions if\n    all other components are equal is done by comparing their numeric\n",
                      "markdown": "`    versions with the same major, minor, and patch version MUST be determined\n    by comparing the identifier to the right of the patch version as follows:\n    if the alpha portion matches, the numeric portion is compared in\n    numerical sort order. If the alpha portion does not match, the sort order\n    is dev < a < b < c. Example: 1.0.0.dev8 < 1.0.0.dev9 < 1.0.0.0a1.dev3 <\n    1.0.0.0a1 < 1.0.0.0b2 < 1.0.0.0c1 < 1.0.0.  Precedence for dev versions if\n    all other components are equal is done by comparing their numeric\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/doc/source/user/semver.rst"
                },
                "region": {
                  "startLine": 149,
                  "startColumn": 40,
                  "endLine": 149,
                  "endColumn": 45,
                  "snippet": {
                    "text": "    The identifier MUST comprise the character g followed by a seven\n    character git short-sha. The sha MUST NOT be empty. git version\n    metadata MUST be ignored when determining version precedence. Thus\n    two versions that differ only in the git version, have the same\n    precedence. Example: 1.0.0.0a1.g95a9beb.\n\n#.  Build metadata MAY be denoted by appending a plus sign and a series\n",
                    "rendered": {
                      "text": "    The identifier MUST comprise the character g followed by a seven\n    character git short-sha. The sha MUST NOT be empty. git version\n    metadata MUST be ignored when determining version precedence. Thus\n    two versions that differ only in the git version, have the same\n    precedence. Example: 1.0.0.0a1.g95a9beb.\n\n#.  Build metadata MAY be denoted by appending a plus sign and a series\n",
                      "markdown": "`    The identifier MUST comprise the character g followed by a seven\n    character git short-sha. The sha MUST NOT be empty. git version\n    metadata MUST be ignored when determining version precedence. Thus\n    two versions that differ only in the git version, have the same\n    precedence. Example: 1.0.0.0a1.g95a9beb.\n\n#.  Build metadata MAY be denoted by appending a plus sign and a series\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/doc/source/user/semver.rst"
                },
                "region": {
                  "startLine": 147,
                  "startColumn": 55,
                  "endLine": 147,
                  "endColumn": 60,
                  "snippet": {
                    "text": "#.  git version metadata MAY be denoted by appending a dot separated\n    identifier immediately following a development or pre-release version.\n    The identifier MUST comprise the character g followed by a seven\n    character git short-sha. The sha MUST NOT be empty. git version\n    metadata MUST be ignored when determining version precedence. Thus\n    two versions that differ only in the git version, have the same\n    precedence. Example: 1.0.0.0a1.g95a9beb.\n",
                    "rendered": {
                      "text": "#.  git version metadata MAY be denoted by appending a dot separated\n    identifier immediately following a development or pre-release version.\n    The identifier MUST comprise the character g followed by a seven\n    character git short-sha. The sha MUST NOT be empty. git version\n    metadata MUST be ignored when determining version precedence. Thus\n    two versions that differ only in the git version, have the same\n    precedence. Example: 1.0.0.0a1.g95a9beb.\n",
                      "markdown": "`#.  git version metadata MAY be denoted by appending a dot separated\n    identifier immediately following a development or pre-release version.\n    The identifier MUST comprise the character g followed by a seven\n    character git short-sha. The sha MUST NOT be empty. git version\n    metadata MUST be ignored when determining version precedence. Thus\n    two versions that differ only in the git version, have the same\n    precedence. Example: 1.0.0.0a1.g95a9beb.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/doc/source/user/semver.rst"
                },
                "region": {
                  "startLine": 147,
                  "startColumn": 13,
                  "endLine": 147,
                  "endColumn": 18,
                  "snippet": {
                    "text": "#.  git version metadata MAY be denoted by appending a dot separated\n    identifier immediately following a development or pre-release version.\n    The identifier MUST comprise the character g followed by a seven\n    character git short-sha. The sha MUST NOT be empty. git version\n    metadata MUST be ignored when determining version precedence. Thus\n    two versions that differ only in the git version, have the same\n    precedence. Example: 1.0.0.0a1.g95a9beb.\n",
                    "rendered": {
                      "text": "#.  git version metadata MAY be denoted by appending a dot separated\n    identifier immediately following a development or pre-release version.\n    The identifier MUST comprise the character g followed by a seven\n    character git short-sha. The sha MUST NOT be empty. git version\n    metadata MUST be ignored when determining version precedence. Thus\n    two versions that differ only in the git version, have the same\n    precedence. Example: 1.0.0.0a1.g95a9beb.\n",
                      "markdown": "`#.  git version metadata MAY be denoted by appending a dot separated\n    identifier immediately following a development or pre-release version.\n    The identifier MUST comprise the character g followed by a seven\n    character git short-sha. The sha MUST NOT be empty. git version\n    metadata MUST be ignored when determining version precedence. Thus\n    two versions that differ only in the git version, have the same\n    precedence. Example: 1.0.0.0a1.g95a9beb.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/doc/source/user/semver.rst"
                },
                "region": {
                  "startLine": 144,
                  "startColumn": 3,
                  "endLine": 144,
                  "endColumn": 8,
                  "snippet": {
                    "text": "    repositories: they are intended as developer-local resources. Examples:\n    1.0.0.dev1, 1.0.0.0a1.dev1\n\n#.  git version metadata MAY be denoted by appending a dot separated\n    identifier immediately following a development or pre-release version.\n    The identifier MUST comprise the character g followed by a seven\n    character git short-sha. The sha MUST NOT be empty. git version\n",
                    "rendered": {
                      "text": "    repositories: they are intended as developer-local resources. Examples:\n    1.0.0.dev1, 1.0.0.0a1.dev1\n\n#.  git version metadata MAY be denoted by appending a dot separated\n    identifier immediately following a development or pre-release version.\n    The identifier MUST comprise the character g followed by a seven\n    character git short-sha. The sha MUST NOT be empty. git version\n",
                      "markdown": "`    repositories: they are intended as developer-local resources. Examples:\n    1.0.0.dev1, 1.0.0.0a1.dev1\n\n#.  git version metadata MAY be denoted by appending a dot separated\n    identifier immediately following a development or pre-release version.\n    The identifier MUST comprise the character g followed by a seven\n    character git short-sha. The sha MUST NOT be empty. git version\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/doc/source/user/semver.rst"
                },
                "region": {
                  "startLine": 42,
                  "startColumn": 60,
                  "endLine": 43,
                  "snippet": {
                    "text": "\nIn the world of software management there exists a dread place called\n\"dependency hell.\" The bigger your system grows and the more packages\nyou integrate into your software, the more likely you are to find\nyourself, one day, in this pit of despair.\n\nIn systems with many dependencies, releasing new package versions can\nquickly become a nightmare. If the dependency specifications are too\n",
                    "rendered": {
                      "text": "\nIn the world of software management there exists a dread place called\n\"dependency hell.\" The bigger your system grows and the more packages\nyou integrate into your software, the more likely you are to find\nyourself, one day, in this pit of despair.\n\nIn systems with many dependencies, releasing new package versions can\nquickly become a nightmare. If the dependency specifications are too\n",
                      "markdown": "`\nIn the world of software management there exists a dread place called\n\"dependency hell.\" The bigger your system grows and the more packages\nyou integrate into your software, the more likely you are to find\nyourself, one day, in this pit of despair.\n\nIn systems with many dependencies, releasing new package versions can\nquickly become a nightmare. If the dependency specifications are too\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/README.rst"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 38,
                  "endLine": 21,
                  "endColumn": 42,
                  "snippet": {
                    "text": "PBR is only mildly configurable. The basic idea is that there's a decent\nway to run things and if you do, you should reap the rewards, because then\nit's simple and repeatable. If you want to do things differently, cool! But\nyou've already got the power of Python at your fingertips, so you don't\nreally need PBR.\n\nPBR builds on top of the work that `d2to1`_ started to provide for declarative\n",
                    "rendered": {
                      "text": "PBR is only mildly configurable. The basic idea is that there's a decent\nway to run things and if you do, you should reap the rewards, because then\nit's simple and repeatable. If you want to do things differently, cool! But\nyou've already got the power of Python at your fingertips, so you don't\nreally need PBR.\n\nPBR builds on top of the work that `d2to1`_ started to provide for declarative\n",
                      "markdown": "`PBR is only mildly configurable. The basic idea is that there's a decent\nway to run things and if you do, you should reap the rewards, because then\nit's simple and repeatable. If you want to do things differently, cool! But\nyou've already got the power of Python at your fingertips, so you don't\nreally need PBR.\n\nPBR builds on top of the work that `d2to1`_ started to provide for declarative\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/README.rst"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 45,
                  "endLine": 15,
                  "endColumn": 49,
                  "snippet": {
                    "text": "PBR is a library that injects some useful and sensible default behaviors\ninto your setuptools run. It started off life as the chunks of code that\nwere copied between all of the `OpenStack`_ projects. Around the time that\nOpenStack hit 18 different projects each with at least 3 active branches,\nit seemed like a good time to make that code into a proper reusable library.\n\nPBR is only mildly configurable. The basic idea is that there's a decent\n",
                    "rendered": {
                      "text": "PBR is a library that injects some useful and sensible default behaviors\ninto your setuptools run. It started off life as the chunks of code that\nwere copied between all of the `OpenStack`_ projects. Around the time that\nOpenStack hit 18 different projects each with at least 3 active branches,\nit seemed like a good time to make that code into a proper reusable library.\n\nPBR is only mildly configurable. The basic idea is that there's a decent\n",
                      "markdown": "`PBR is a library that injects some useful and sensible default behaviors\ninto your setuptools run. It started off life as the chunks of code that\nwere copied between all of the `OpenStack`_ projects. Around the time that\nOpenStack hit 18 different projects each with at least 3 active branches,\nit seemed like a good time to make that code into a proper reusable library.\n\nPBR is only mildly configurable. The basic idea is that there's a decent\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/README.rst"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 13,
                  "endLine": 24,
                  "endColumn": 18,
                  "snippet": {
                    "text": "you've already got the power of Python at your fingertips, so you don't\nreally need PBR.\n\nPBR builds on top of the work that `d2to1`_ started to provide for declarative\nconfiguration. `d2to1`_ is itself an implementation of the ideas behind\n`distutils2`_. Although `distutils2`_ is now abandoned in favor of work towards\n`PEP 426`_ and Metadata 2.0, declarative config is still a great idea and\n",
                    "rendered": {
                      "text": "you've already got the power of Python at your fingertips, so you don't\nreally need PBR.\n\nPBR builds on top of the work that `d2to1`_ started to provide for declarative\nconfiguration. `d2to1`_ is itself an implementation of the ideas behind\n`distutils2`_. Although `distutils2`_ is now abandoned in favor of work towards\n`PEP 426`_ and Metadata 2.0, declarative config is still a great idea and\n",
                      "markdown": "`you've already got the power of Python at your fingertips, so you don't\nreally need PBR.\n\nPBR builds on top of the work that `d2to1`_ started to provide for declarative\nconfiguration. `d2to1`_ is itself an implementation of the ideas behind\n`distutils2`_. Although `distutils2`_ is now abandoned in favor of work towards\n`PEP 426`_ and Metadata 2.0, declarative config is still a great idea and\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/README.rst"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 21,
                  "endLine": 16,
                  "endColumn": 27,
                  "snippet": {
                    "text": "into your setuptools run. It started off life as the chunks of code that\nwere copied between all of the `OpenStack`_ projects. Around the time that\nOpenStack hit 18 different projects each with at least 3 active branches,\nit seemed like a good time to make that code into a proper reusable library.\n\nPBR is only mildly configurable. The basic idea is that there's a decent\nway to run things and if you do, you should reap the rewards, because then\n",
                    "rendered": {
                      "text": "into your setuptools run. It started off life as the chunks of code that\nwere copied between all of the `OpenStack`_ projects. Around the time that\nOpenStack hit 18 different projects each with at least 3 active branches,\nit seemed like a good time to make that code into a proper reusable library.\n\nPBR is only mildly configurable. The basic idea is that there's a decent\nway to run things and if you do, you should reap the rewards, because then\n",
                      "markdown": "`into your setuptools run. It started off life as the chunks of code that\nwere copied between all of the `OpenStack`_ projects. Around the time that\nOpenStack hit 18 different projects each with at least 3 active branches,\nit seemed like a good time to make that code into a proper reusable library.\n\nPBR is only mildly configurable. The basic idea is that there's a decent\nway to run things and if you do, you should reap the rewards, because then\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/README.rst"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 64,
                  "endLine": 14,
                  "endColumn": 70,
                  "snippet": {
                    "text": "\nPBR is a library that injects some useful and sensible default behaviors\ninto your setuptools run. It started off life as the chunks of code that\nwere copied between all of the `OpenStack`_ projects. Around the time that\nOpenStack hit 18 different projects each with at least 3 active branches,\nit seemed like a good time to make that code into a proper reusable library.\n\n",
                    "rendered": {
                      "text": "\nPBR is a library that injects some useful and sensible default behaviors\ninto your setuptools run. It started off life as the chunks of code that\nwere copied between all of the `OpenStack`_ projects. Around the time that\nOpenStack hit 18 different projects each with at least 3 active branches,\nit seemed like a good time to make that code into a proper reusable library.\n\n",
                      "markdown": "`\nPBR is a library that injects some useful and sensible default behaviors\ninto your setuptools run. It started off life as the chunks of code that\nwere copied between all of the `OpenStack`_ projects. Around the time that\nOpenStack hit 18 different projects each with at least 3 active branches,\nit seemed like a good time to make that code into a proper reusable library.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/setup.cfg"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 4,
                  "endLine": 10,
                  "endColumn": 13,
                  "snippet": {
                    "text": "long_description_content_type = text/x-rst; charset=UTF-8\nurl = https://docs.openstack.org/pbr/latest/\nproject_urls = \n\tBug Tracker = https://bugs.launchpad.net/pbr/\n\tDocumentation = https://docs.openstack.org/pbr/\n\tSource Code = https://opendev.org/openstack/pbr\nclassifiers = \n",
                    "rendered": {
                      "text": "long_description_content_type = text/x-rst; charset=UTF-8\nurl = https://docs.openstack.org/pbr/latest/\nproject_urls = \n\tBug Tracker = https://bugs.launchpad.net/pbr/\n\tDocumentation = https://docs.openstack.org/pbr/\n\tSource Code = https://opendev.org/openstack/pbr\nclassifiers = \n",
                      "markdown": "`long_description_content_type = text/x-rst; charset=UTF-8\nurl = https://docs.openstack.org/pbr/latest/\nproject_urls = \n\tBug Tracker = https://bugs.launchpad.net/pbr/\n\tDocumentation = https://docs.openstack.org/pbr/\n\tSource Code = https://opendev.org/openstack/pbr\nclassifiers = \n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/.pre-commit-config.yaml"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 48,
                  "endLine": 3,
                  "endColumn": 56,
                  "snippet": {
                    "text": "# We from the Oslo project decided to pin repos based on the\n# commit hash instead of the version tag to prevend arbitrary\n# code from running in developer's machines.  To update to a\n# newer version, run `pre-commit autoupdate` and then replace\n# the newer versions with their commit hash.\n\n",
                    "rendered": {
                      "text": "# We from the Oslo project decided to pin repos based on the\n# commit hash instead of the version tag to prevend arbitrary\n# code from running in developer's machines.  To update to a\n# newer version, run `pre-commit autoupdate` and then replace\n# the newer versions with their commit hash.\n\n",
                      "markdown": "`# We from the Oslo project decided to pin repos based on the\n# commit hash instead of the version tag to prevend arbitrary\n# code from running in developer's machines.  To update to a\n# newer version, run `pre-commit autoupdate` and then replace\n# the newer versions with their commit hash.\n\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/AUTHORS"
                },
                "region": {
                  "startLine": 108,
                  "startColumn": 43,
                  "endLine": 109,
                  "endColumn": 5,
                  "snippet": {
                    "text": "Robert Collins <rbtcollins@hp.com>\nRobert Myers <robert.myers@rackspace.com>\nRoger Luethi <rl@patchworkscience.org>\nRonald Bradford <ronald.bradford@gmail.com>\nRuby Loo <rloo@yahoo-inc.com>\nRussell Bryant <rbryant@redhat.com>\nRyan Bourgeois <bluedragonx@gmail.com>\nRyan Petrello <lists@ryanpetrello.com>\n",
                    "rendered": {
                      "text": "Robert Collins <rbtcollins@hp.com>\nRobert Myers <robert.myers@rackspace.com>\nRoger Luethi <rl@patchworkscience.org>\nRonald Bradford <ronald.bradford@gmail.com>\nRuby Loo <rloo@yahoo-inc.com>\nRussell Bryant <rbryant@redhat.com>\nRyan Bourgeois <bluedragonx@gmail.com>\nRyan Petrello <lists@ryanpetrello.com>\n",
                      "markdown": "`Robert Collins <rbtcollins@hp.com>\nRobert Myers <robert.myers@rackspace.com>\nRoger Luethi <rl@patchworkscience.org>\nRonald Bradford <ronald.bradford@gmail.com>\nRuby Loo <rloo@yahoo-inc.com>\nRussell Bryant <rbryant@redhat.com>\nRyan Bourgeois <bluedragonx@gmail.com>\nRyan Petrello <lists@ryanpetrello.com>\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/tests/testpackage/pbr_testpackage/wsgi.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/tests/testpackage/pbr_testpackage/_setup_hooks.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/tests/testpackage/pbr_testpackage/cmd.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/tests/test_pbr_json.py"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 7,
                  "endLine": 27,
                  "endColumn": 12,
                  "snippet": {
                    "text": "    @mock.patch('pbr.git.get_git_short_sha', return_value=\"123456\")\n    @mock.patch('pbr.git.get_is_release', return_value=True)\n    def test_content(self, mock_get_is, mock_get_git, mock_run):\n        cmd = mock.Mock()\n        pbr_json.write_pbr_json(cmd, \"basename\", \"pbr.json\")\n        cmd.write_file.assert_called_once_with(\n            'pbr',\n",
                    "rendered": {
                      "text": "    @mock.patch('pbr.git.get_git_short_sha', return_value=\"123456\")\n    @mock.patch('pbr.git.get_is_release', return_value=True)\n    def test_content(self, mock_get_is, mock_get_git, mock_run):\n        cmd = mock.Mock()\n        pbr_json.write_pbr_json(cmd, \"basename\", \"pbr.json\")\n        cmd.write_file.assert_called_once_with(\n            'pbr',\n",
                      "markdown": "`    @mock.patch('pbr.git.get_git_short_sha', return_value=\"123456\")\n    @mock.patch('pbr.git.get_is_release', return_value=True)\n    def test_content(self, mock_get_is, mock_get_git, mock_run):\n        cmd = mock.Mock()\n        pbr_json.write_pbr_json(cmd, \"basename\", \"pbr.json\")\n        cmd.write_file.assert_called_once_with(\n            'pbr',\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/tests/test_pbr_json.py"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 23,
                  "endLine": 4,
                  "snippet": {
                    "text": "# Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n# not use this file except in compliance with the License. You may obtain\n# a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "# Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n# not use this file except in compliance with the License. You may obtain\n# a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`# Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n# not use this file except in compliance with the License. You may obtain\n# a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/tests/__init__.py"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 38,
                  "endLine": 4,
                  "snippet": {
                    "text": "# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/tests/__init__.py"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 5,
                  "endLine": 20,
                  "endColumn": 10,
                  "snippet": {
                    "text": "\n\ndef load_tests(loader, standard_tests, pattern):\n    # top level directory cached on loader instance\n    this_dir = os.path.dirname(__file__)\n    package_tests = loader.discover(start_dir=this_dir, pattern=pattern)\n    result = loader.suiteClass()\n",
                    "rendered": {
                      "text": "\n\ndef load_tests(loader, standard_tests, pattern):\n    # top level directory cached on loader instance\n    this_dir = os.path.dirname(__file__)\n    package_tests = loader.discover(start_dir=this_dir, pattern=pattern)\n    result = loader.suiteClass()\n",
                      "markdown": "`\n\ndef load_tests(loader, standard_tests, pattern):\n    # top level directory cached on loader instance\n    this_dir = os.path.dirname(__file__)\n    package_tests = loader.discover(start_dir=this_dir, pattern=pattern)\n    result = loader.suiteClass()\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/tests/test_version.py"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 26,
                  "endLine": 7,
                  "snippet": {
                    "text": "#\n#    Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n#    not use this file except in compliance with the License. You may obtain\n#    a copy of the License at\n#\n#         http://www.apache.org/licenses/LICENSE-2.0\n#\n#    Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n#    Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n#    not use this file except in compliance with the License. You may obtain\n#    a copy of the License at\n#\n#         http://www.apache.org/licenses/LICENSE-2.0\n#\n#    Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n#    Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n#    not use this file except in compliance with the License. You may obtain\n#    a copy of the License at\n#\n#         http://www.apache.org/licenses/LICENSE-2.0\n#\n#    Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/tests/test_version.py"
                },
                "region": {
                  "startLine": 251,
                  "startColumn": 36,
                  "endLine": 251,
                  "endColumn": 41,
                  "snippet": {
                    "text": "\n    def test_decrement_nonrelease_zero(self):\n        # We set an arbitrary max version of 9999 when decrementing versions\n        # - this is part of handling rpm support.\n        semver = version.SemanticVersion(1, 0, 0)\n        self.assertEqual(\n            version.SemanticVersion(0, 9999, 9999), semver.decrement())\n",
                    "rendered": {
                      "text": "\n    def test_decrement_nonrelease_zero(self):\n        # We set an arbitrary max version of 9999 when decrementing versions\n        # - this is part of handling rpm support.\n        semver = version.SemanticVersion(1, 0, 0)\n        self.assertEqual(\n            version.SemanticVersion(0, 9999, 9999), semver.decrement())\n",
                      "markdown": "`\n    def test_decrement_nonrelease_zero(self):\n        # We set an arbitrary max version of 9999 when decrementing versions\n        # - this is part of handling rpm support.\n        semver = version.SemanticVersion(1, 0, 0)\n        self.assertEqual(\n            version.SemanticVersion(0, 9999, 9999), semver.decrement())\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/tests/test_version.py"
                },
                "region": {
                  "startLine": 74,
                  "startColumn": 12,
                  "endLine": 74,
                  "endColumn": 20,
                  "snippet": {
                    "text": "    def test_from_pip_string_legacy_postN(self):\n        # When pbr trunk was incompatible with PEP-440, a stable release was\n        # made that used postN versions to represent developer builds. As\n        # we expect only to be parsing versions of our own, we map those\n        # into dev builds of the next version.\n        expected = version.SemanticVersion(1, 2, 4, dev_count=5)\n        parsed = from_pip_string('1.2.3.post5')\n",
                    "rendered": {
                      "text": "    def test_from_pip_string_legacy_postN(self):\n        # When pbr trunk was incompatible with PEP-440, a stable release was\n        # made that used postN versions to represent developer builds. As\n        # we expect only to be parsing versions of our own, we map those\n        # into dev builds of the next version.\n        expected = version.SemanticVersion(1, 2, 4, dev_count=5)\n        parsed = from_pip_string('1.2.3.post5')\n",
                      "markdown": "`    def test_from_pip_string_legacy_postN(self):\n        # When pbr trunk was incompatible with PEP-440, a stable release was\n        # made that used postN versions to represent developer builds. As\n        # we expect only to be parsing versions of our own, we map those\n        # into dev builds of the next version.\n        expected = version.SemanticVersion(1, 2, 4, dev_count=5)\n        parsed = from_pip_string('1.2.3.post5')\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/tests/test_version.py"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 16,
                  "endLine": 1,
                  "endColumn": 21,
                  "snippet": {
                    "text": "# Copyright 2012 Red Hat, Inc.\n# Copyright 2012-2013 Hewlett-Packard Development Company, L.P.\n#\n#    Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n",
                    "rendered": {
                      "text": "# Copyright 2012 Red Hat, Inc.\n# Copyright 2012-2013 Hewlett-Packard Development Company, L.P.\n#\n#    Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n",
                      "markdown": "`# Copyright 2012 Red Hat, Inc.\n# Copyright 2012-2013 Hewlett-Packard Development Company, L.P.\n#\n#    Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/tests/test_util.py"
                },
                "region": {
                  "startLine": 221,
                  "startColumn": 23,
                  "endLine": 221,
                  "endColumn": 32,
                  "snippet": {
                    "text": "            'config_text': \"\"\"\n                [metadata]\n                project_urls =\n                    Bug Tracker = https://bugs.launchpad.net/pbr/?query=true\n                    Documentation = https://docs.openstack.org/pbr/?foo=bar\n                    Source Code = https://git.openstack.org/cgit/openstack-dev/pbr/commit/?id=hash\n                \"\"\",  # noqa: E501\n",
                    "rendered": {
                      "text": "            'config_text': \"\"\"\n                [metadata]\n                project_urls =\n                    Bug Tracker = https://bugs.launchpad.net/pbr/?query=true\n                    Documentation = https://docs.openstack.org/pbr/?foo=bar\n                    Source Code = https://git.openstack.org/cgit/openstack-dev/pbr/commit/?id=hash\n                \"\"\",  # noqa: E501\n",
                      "markdown": "`            'config_text': \"\"\"\n                [metadata]\n                project_urls =\n                    Bug Tracker = https://bugs.launchpad.net/pbr/?query=true\n                    Documentation = https://docs.openstack.org/pbr/?foo=bar\n                    Source Code = https://git.openstack.org/cgit/openstack-dev/pbr/commit/?id=hash\n                \"\"\",  # noqa: E501\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/tests/test_util.py"
                },
                "region": {
                  "startLine": 207,
                  "startColumn": 23,
                  "endLine": 207,
                  "endColumn": 32,
                  "snippet": {
                    "text": "            'config_text': \"\"\"\n                [metadata]\n                project_urls =\n                    Bug Tracker = https://bugs.launchpad.net/pbr/\n                    Documentation = https://docs.openstack.org/pbr/\n                    Source Code = https://opendev.org/openstack/pbr\n                \"\"\",  # noqa: E501\n",
                    "rendered": {
                      "text": "            'config_text': \"\"\"\n                [metadata]\n                project_urls =\n                    Bug Tracker = https://bugs.launchpad.net/pbr/\n                    Documentation = https://docs.openstack.org/pbr/\n                    Source Code = https://opendev.org/openstack/pbr\n                \"\"\",  # noqa: E501\n",
                      "markdown": "`            'config_text': \"\"\"\n                [metadata]\n                project_urls =\n                    Bug Tracker = https://bugs.launchpad.net/pbr/\n                    Documentation = https://docs.openstack.org/pbr/\n                    Source Code = https://opendev.org/openstack/pbr\n                \"\"\",  # noqa: E501\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/tests/test_util.py"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 23,
                  "endLine": 7,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n# not use this file except in compliance with the License. You may obtain\n# a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n# not use this file except in compliance with the License. You may obtain\n# a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n# not use this file except in compliance with the License. You may obtain\n# a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/sphinxext.py"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 23,
                  "endLine": 7,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n# not use this file except in compliance with the License. You may obtain\n# a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n# not use this file except in compliance with the License. You may obtain\n# a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n# not use this file except in compliance with the License. You may obtain\n# a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/sphinxext.py"
                },
                "region": {
                  "startLine": 59,
                  "startColumn": 34,
                  "endLine": 59,
                  "endColumn": 40,
                  "snippet": {
                    "text": "\n        path = _find_setup_cfg(srcdir)\n        if not path or not parser.read(path):\n            logger.info('Could not find a setup.cfg to extract project name '\n                        'from')\n            return None\n\n",
                    "rendered": {
                      "text": "\n        path = _find_setup_cfg(srcdir)\n        if not path or not parser.read(path):\n            logger.info('Could not find a setup.cfg to extract project name '\n                        'from')\n            return None\n\n",
                      "markdown": "`\n        path = _find_setup_cfg(srcdir)\n        if not path or not parser.read(path):\n            logger.info('Could not find a setup.cfg to extract project name '\n                        'from')\n            return None\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/sphinxext.py"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 16,
                  "endLine": 1,
                  "endColumn": 21,
                  "snippet": {
                    "text": "# Copyright 2018 Red Hat, Inc.\n# All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n",
                    "rendered": {
                      "text": "# Copyright 2018 Red Hat, Inc.\n# All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n",
                      "markdown": "`# Copyright 2018 Red Hat, Inc.\n# All Rights Reserved.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/sphinxext.py"
                },
                "region": {
                  "startLine": 69,
                  "startColumn": 32,
                  "endLine": 69,
                  "endColumn": 37,
                  "snippet": {
                    "text": "            # menu rendering looks brolen\n            project = parser.get('metadata', 'name')\n            if len(project.split()) == 1 and len(project) > 32:\n                project = parser.get('metadata', 'summary')\n        except configparser.Error:\n            logger.info('Could not extract project metadata from setup.cfg')\n            return None\n",
                    "rendered": {
                      "text": "            # menu rendering looks brolen\n            project = parser.get('metadata', 'name')\n            if len(project.split()) == 1 and len(project) > 32:\n                project = parser.get('metadata', 'summary')\n        except configparser.Error:\n            logger.info('Could not extract project metadata from setup.cfg')\n            return None\n",
                      "markdown": "`            # menu rendering looks brolen\n            project = parser.get('metadata', 'name')\n            if len(project.split()) == 1 and len(project) > 32:\n                project = parser.get('metadata', 'summary')\n        except configparser.Error:\n            logger.info('Could not extract project metadata from setup.cfg')\n            return None\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/sphinxext.py"
                },
                "region": {
                  "startLine": 67,
                  "startColumn": 28,
                  "endLine": 67,
                  "endColumn": 33,
                  "snippet": {
                    "text": "            # for project name we use the name in setup.cfg, but if the\n            # length is longer then 32 we use summary. Otherwise thAe\n            # menu rendering looks brolen\n            project = parser.get('metadata', 'name')\n            if len(project.split()) == 1 and len(project) > 32:\n                project = parser.get('metadata', 'summary')\n        except configparser.Error:\n",
                    "rendered": {
                      "text": "            # for project name we use the name in setup.cfg, but if the\n            # length is longer then 32 we use summary. Otherwise thAe\n            # menu rendering looks brolen\n            project = parser.get('metadata', 'name')\n            if len(project.split()) == 1 and len(project) > 32:\n                project = parser.get('metadata', 'summary')\n        except configparser.Error:\n",
                      "markdown": "`            # for project name we use the name in setup.cfg, but if the\n            # length is longer then 32 we use summary. Otherwise thAe\n            # menu rendering looks brolen\n            project = parser.get('metadata', 'name')\n            if len(project.split()) == 1 and len(project) > 32:\n                project = parser.get('metadata', 'summary')\n        except configparser.Error:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/pbr_json.py"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 26,
                  "endLine": 8,
                  "snippet": {
                    "text": "#\n#    Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n#    not use this file except in compliance with the License. You may obtain\n#    a copy of the License at\n#\n#         http://www.apache.org/licenses/LICENSE-2.0\n#\n#    Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n#    Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n#    not use this file except in compliance with the License. You may obtain\n#    a copy of the License at\n#\n#         http://www.apache.org/licenses/LICENSE-2.0\n#\n#    Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n#    Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n#    not use this file except in compliance with the License. You may obtain\n#    a copy of the License at\n#\n#         http://www.apache.org/licenses/LICENSE-2.0\n#\n#    Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/pbr_json.py"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 15,
                  "endLine": 20,
                  "snippet": {
                    "text": "\nimport json\n\nfrom pbr import git\n\n\ndef write_pbr_json(cmd, basename, filename):\n    if not hasattr(cmd.distribution, 'pbr') or not cmd.distribution.pbr:\n",
                    "rendered": {
                      "text": "\nimport json\n\nfrom pbr import git\n\n\ndef write_pbr_json(cmd, basename, filename):\n    if not hasattr(cmd.distribution, 'pbr') or not cmd.distribution.pbr:\n",
                      "markdown": "`\nimport json\n\nfrom pbr import git\n\n\ndef write_pbr_json(cmd, basename, filename):\n    if not hasattr(cmd.distribution, 'pbr') or not cmd.distribution.pbr:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/version.py"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 26,
                  "endLine": 8,
                  "snippet": {
                    "text": "#\n#    Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n#    not use this file except in compliance with the License. You may obtain\n#    a copy of the License at\n#\n#         http://www.apache.org/licenses/LICENSE-2.0\n#\n#    Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n#    Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n#    not use this file except in compliance with the License. You may obtain\n#    a copy of the License at\n#\n#         http://www.apache.org/licenses/LICENSE-2.0\n#\n#    Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n#    Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n#    not use this file except in compliance with the License. You may obtain\n#    a copy of the License at\n#\n#         http://www.apache.org/licenses/LICENSE-2.0\n#\n#    Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/version.py"
                },
                "region": {
                  "startLine": 367,
                  "startColumn": 34,
                  "endLine": 367,
                  "endColumn": 39,
                  "snippet": {
                    "text": "        \"\"\"Return the version number to use when building an RPM package.\n\n        This translates the PEP440/semver precedence rules into RPM version\n        sorting operators. Because RPM has no sort-before operator (such as the\n        ~ operator in dpkg),  we show all prerelease versions as being versions\n        of the release before.\n        \"\"\"\n",
                    "rendered": {
                      "text": "        \"\"\"Return the version number to use when building an RPM package.\n\n        This translates the PEP440/semver precedence rules into RPM version\n        sorting operators. Because RPM has no sort-before operator (such as the\n        ~ operator in dpkg),  we show all prerelease versions as being versions\n        of the release before.\n        \"\"\"\n",
                      "markdown": "`        \"\"\"Return the version number to use when building an RPM package.\n\n        This translates the PEP440/semver precedence rules into RPM version\n        sorting operators. Because RPM has no sort-before operator (such as the\n        ~ operator in dpkg),  we show all prerelease versions as being versions\n        of the release before.\n        \"\"\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/version.py"
                },
                "region": {
                  "startLine": 366,
                  "startColumn": 63,
                  "endLine": 366,
                  "endColumn": 68,
                  "snippet": {
                    "text": "    def rpm_string(self):\n        \"\"\"Return the version number to use when building an RPM package.\n\n        This translates the PEP440/semver precedence rules into RPM version\n        sorting operators. Because RPM has no sort-before operator (such as the\n        ~ operator in dpkg),  we show all prerelease versions as being versions\n        of the release before.\n",
                    "rendered": {
                      "text": "    def rpm_string(self):\n        \"\"\"Return the version number to use when building an RPM package.\n\n        This translates the PEP440/semver precedence rules into RPM version\n        sorting operators. Because RPM has no sort-before operator (such as the\n        ~ operator in dpkg),  we show all prerelease versions as being versions\n        of the release before.\n",
                      "markdown": "`    def rpm_string(self):\n        \"\"\"Return the version number to use when building an RPM package.\n\n        This translates the PEP440/semver precedence rules into RPM version\n        sorting operators. Because RPM has no sort-before operator (such as the\n        ~ operator in dpkg),  we show all prerelease versions as being versions\n        of the release before.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/version.py"
                },
                "region": {
                  "startLine": 364,
                  "startColumn": 60,
                  "endLine": 364,
                  "endColumn": 65,
                  "snippet": {
                    "text": "        return self._long_version(\".\", \"0\")\n\n    def rpm_string(self):\n        \"\"\"Return the version number to use when building an RPM package.\n\n        This translates the PEP440/semver precedence rules into RPM version\n        sorting operators. Because RPM has no sort-before operator (such as the\n",
                    "rendered": {
                      "text": "        return self._long_version(\".\", \"0\")\n\n    def rpm_string(self):\n        \"\"\"Return the version number to use when building an RPM package.\n\n        This translates the PEP440/semver precedence rules into RPM version\n        sorting operators. Because RPM has no sort-before operator (such as the\n",
                      "markdown": "`        return self._long_version(\".\", \"0\")\n\n    def rpm_string(self):\n        \"\"\"Return the version number to use when building an RPM package.\n\n        This translates the PEP440/semver precedence rules into RPM version\n        sorting operators. Because RPM has no sort-before operator (such as the\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/version.py"
                },
                "region": {
                  "startLine": 335,
                  "startColumn": 11,
                  "endLine": 335,
                  "endColumn": 16,
                  "snippet": {
                    "text": "        :param pre_separator: What separator to use between components\n            that sort before rather than after. If None, use . and lower the\n            version number of the component to preserve sorting. (Used for\n            rpm support)\n        \"\"\"\n        if ((self._prerelease_type or self._dev_count) and\n                pre_separator is None):\n",
                    "rendered": {
                      "text": "        :param pre_separator: What separator to use between components\n            that sort before rather than after. If None, use . and lower the\n            version number of the component to preserve sorting. (Used for\n            rpm support)\n        \"\"\"\n        if ((self._prerelease_type or self._dev_count) and\n                pre_separator is None):\n",
                      "markdown": "`        :param pre_separator: What separator to use between components\n            that sort before rather than after. If None, use . and lower the\n            version number of the component to preserve sorting. (Used for\n            rpm support)\n        \"\"\"\n        if ((self._prerelease_type or self._dev_count) and\n                pre_separator is None):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/version.py"
                },
                "region": {
                  "startLine": 333,
                  "startColumn": 16,
                  "endLine": 333,
                  "endColumn": 22,
                  "snippet": {
                    "text": "        \"\"\"Construct a long string version of this semver.\n\n        :param pre_separator: What separator to use between components\n            that sort before rather than after. If None, use . and lower the\n            version number of the component to preserve sorting. (Used for\n            rpm support)\n        \"\"\"\n",
                    "rendered": {
                      "text": "        \"\"\"Construct a long string version of this semver.\n\n        :param pre_separator: What separator to use between components\n            that sort before rather than after. If None, use . and lower the\n            version number of the component to preserve sorting. (Used for\n            rpm support)\n        \"\"\"\n",
                      "markdown": "`        \"\"\"Construct a long string version of this semver.\n\n        :param pre_separator: What separator to use between components\n            that sort before rather than after. If None, use . and lower the\n            version number of the component to preserve sorting. (Used for\n            rpm support)\n        \"\"\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/version.py"
                },
                "region": {
                  "startLine": 145,
                  "startColumn": 20,
                  "endLine": 145,
                  "endColumn": 25,
                  "snippet": {
                    "text": "        output as 0.10.1.dev3.g83bef74.\n\n        :raises ValueError: Never tagged versions sdisted by old pbr result in\n            just the git hash, e.g. '1234567' which poses a substantial problem\n            since they collide with the semver versions when all the digits are\n            numerals. Such versions will result in a ValueError being thrown if\n            any non-numeric digits are present. They are an exception to the\n",
                    "rendered": {
                      "text": "        output as 0.10.1.dev3.g83bef74.\n\n        :raises ValueError: Never tagged versions sdisted by old pbr result in\n            just the git hash, e.g. '1234567' which poses a substantial problem\n            since they collide with the semver versions when all the digits are\n            numerals. Such versions will result in a ValueError being thrown if\n            any non-numeric digits are present. They are an exception to the\n",
                      "markdown": "`        output as 0.10.1.dev3.g83bef74.\n\n        :raises ValueError: Never tagged versions sdisted by old pbr result in\n            just the git hash, e.g. '1234567' which poses a substantial problem\n            since they collide with the semver versions when all the digits are\n            numerals. Such versions will result in a ValueError being thrown if\n            any non-numeric digits are present. They are an exception to the\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/version.py"
                },
                "region": {
                  "startLine": 132,
                  "startColumn": 42,
                  "endLine": 132,
                  "endColumn": 47,
                  "snippet": {
                    "text": "\n    @classmethod\n    def from_pip_string(klass, version_string):\n        \"\"\"Create a SemanticVersion from a pip version string.\n\n        This method will parse a version like 1.3.0 into a SemanticVersion.\n\n",
                    "rendered": {
                      "text": "\n    @classmethod\n    def from_pip_string(klass, version_string):\n        \"\"\"Create a SemanticVersion from a pip version string.\n\n        This method will parse a version like 1.3.0 into a SemanticVersion.\n\n",
                      "markdown": "`\n    @classmethod\n    def from_pip_string(klass, version_string):\n        \"\"\"Create a SemanticVersion from a pip version string.\n\n        This method will parse a version like 1.3.0 into a SemanticVersion.\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/version.py"
                },
                "region": {
                  "startLine": 59,
                  "startColumn": 36,
                  "endLine": 59,
                  "endColumn": 42,
                  "snippet": {
                    "text": "        :param major: Major component of the version.\n        :param minor: Minor component of the version. Defaults to 0.\n        :param patch: Patch level component. Defaults to 0.\n        :param prerelease_type: What sort of prerelease version this is -\n            one of a(alpha), b(beta) or rc(release candidate).\n        :param prerelease: For prerelease versions, what number prerelease.\n            Defaults to 0.\n",
                    "rendered": {
                      "text": "        :param major: Major component of the version.\n        :param minor: Minor component of the version. Defaults to 0.\n        :param patch: Patch level component. Defaults to 0.\n        :param prerelease_type: What sort of prerelease version this is -\n            one of a(alpha), b(beta) or rc(release candidate).\n        :param prerelease: For prerelease versions, what number prerelease.\n            Defaults to 0.\n",
                      "markdown": "`        :param major: Major component of the version.\n        :param minor: Minor component of the version. Defaults to 0.\n        :param patch: Patch level component. Defaults to 0.\n        :param prerelease_type: What sort of prerelease version this is -\n            one of a(alpha), b(beta) or rc(release candidate).\n        :param prerelease: For prerelease versions, what number prerelease.\n            Defaults to 0.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/doc/source/user/compatibility.rst"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 15,
                  "endLine": 38,
                  "endColumn": 20,
                  "snippet": {
                    "text": "markers\n-------\n\nFor versions of pip < 7 with pbr < 1.9, dependencies that use markers will not\nbe installed.  Projects using pbr and markers should set a minimum version of\n1.9 for pbr.\n\n",
                    "rendered": {
                      "text": "markers\n-------\n\nFor versions of pip < 7 with pbr < 1.9, dependencies that use markers will not\nbe installed.  Projects using pbr and markers should set a minimum version of\n1.9 for pbr.\n\n",
                      "markdown": "`markers\n-------\n\nFor versions of pip < 7 with pbr < 1.9, dependencies that use markers will not\nbe installed.  Projects using pbr and markers should set a minimum version of\n1.9 for pbr.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/doc/source/user/compatibility.rst"
                },
                "region": {
                  "startLine": 31,
                  "endLine": 33,
                  "snippet": {
                    "text": "using these operators with markers should specify a minimum version of 17.1\nfor setuptools.\n\n\npip\n===\n\nmarkers\n-------\n",
                    "rendered": {
                      "text": "using these operators with markers should specify a minimum version of 17.1\nfor setuptools.\n\n\npip\n===\n\nmarkers\n-------\n",
                      "markdown": "`using these operators with markers should specify a minimum version of 17.1\nfor setuptools.\n\n\npip\n===\n\nmarkers\n-------\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/doc/source/user/compatibility.rst"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 43,
                  "endLine": 14,
                  "endColumn": 48,
                  "snippet": {
                    "text": "===================\n\nUseful notes about errors users may encounter when features cannot be\nsupported on older versions of setuptools / pip / wheel.\n\n\nsetuptools\n",
                    "rendered": {
                      "text": "===================\n\nUseful notes about errors users may encounter when features cannot be\nsupported on older versions of setuptools / pip / wheel.\n\n\nsetuptools\n",
                      "markdown": "`===================\n\nUseful notes about errors users may encounter when features cannot be\nsupported on older versions of setuptools / pip / wheel.\n\n\nsetuptools\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/doc/source/user/using.rst"
                },
                "region": {
                  "startLine": 314,
                  "startColumn": 19,
                  "endLine": 314,
                  "endColumn": 23,
                  "snippet": {
                    "text": "\n   When using ``autodoc_tree_excludes`` or ``autodoc_index_modules`` you may\n   also need to set ``exclude_patterns`` in your Sphinx configuration file\n   (generally found at ``doc/source/conf.py`` in most OpenStack projects)\n   otherwise Sphinx may complain about documents that are not in a toctree.\n   This is especially true if the ``[sphinx_build] warning-is-error`` option is\n   set. See the `Sphinx build configuration file`__ documentation for more\n",
                    "rendered": {
                      "text": "\n   When using ``autodoc_tree_excludes`` or ``autodoc_index_modules`` you may\n   also need to set ``exclude_patterns`` in your Sphinx configuration file\n   (generally found at ``doc/source/conf.py`` in most OpenStack projects)\n   otherwise Sphinx may complain about documents that are not in a toctree.\n   This is especially true if the ``[sphinx_build] warning-is-error`` option is\n   set. See the `Sphinx build configuration file`__ documentation for more\n",
                      "markdown": "`\n   When using ``autodoc_tree_excludes`` or ``autodoc_index_modules`` you may\n   also need to set ``exclude_patterns`` in your Sphinx configuration file\n   (generally found at ``doc/source/conf.py`` in most OpenStack projects)\n   otherwise Sphinx may complain about documents that are not in a toctree.\n   This is especially true if the ``[sphinx_build] warning-is-error`` option is\n   set. See the `Sphinx build configuration file`__ documentation for more\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/doc/source/user/using.rst"
                },
                "region": {
                  "startLine": 132,
                  "startColumn": 18,
                  "endLine": 132,
                  "endColumn": 22,
                  "snippet": {
                    "text": "   supported comment delimiter. For instance::\n\n       [section]\n       # A comment at the start of a dedicated line\n       key =\n           value1 # An in line comment\n           value2\n",
                    "rendered": {
                      "text": "   supported comment delimiter. For instance::\n\n       [section]\n       # A comment at the start of a dedicated line\n       key =\n           value1 # An in line comment\n           value2\n",
                      "markdown": "`   supported comment delimiter. For instance::\n\n       [section]\n       # A comment at the start of a dedicated line\n       key =\n           value1 # An in line comment\n           value2\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/doc/source/user/using.rst"
                },
                "region": {
                  "startLine": 127,
                  "startColumn": 61,
                  "endLine": 127,
                  "endColumn": 65,
                  "snippet": {
                    "text": ".. note::\n\n   Comments may be used in ``setup.cfg``, however all comments should start\n   with a ``#`` and may be on a single line, or in line, with at least one\n   white space character immediately preceding the ``#``. Semicolons are not a\n   supported comment delimiter. For instance::\n\n",
                    "rendered": {
                      "text": ".. note::\n\n   Comments may be used in ``setup.cfg``, however all comments should start\n   with a ``#`` and may be on a single line, or in line, with at least one\n   white space character immediately preceding the ``#``. Semicolons are not a\n   supported comment delimiter. For instance::\n\n",
                      "markdown": "`.. note::\n\n   Comments may be used in ``setup.cfg``, however all comments should start\n   with a ``#`` and may be on a single line, or in line, with at least one\n   white space character immediately preceding the ``#``. Semicolons are not a\n   supported comment delimiter. For instance::\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/doc/source/user/using.rst"
                },
                "region": {
                  "startLine": 76,
                  "startColumn": 11,
                  "endLine": 76,
                  "endColumn": 20,
                  "snippet": {
                    "text": "    description_content_type = text/x-rst; charset=UTF-8\n    home_page = https://launchpad.net/pbr\n    project_urls =\n        Bug Tracker = https://bugs.launchpad.net/pbr/\n        Documentation = https://docs.openstack.org/pbr/\n        Source Code = https://opendev.org/openstack/pbr\n    license = Apache-2\n",
                    "rendered": {
                      "text": "    description_content_type = text/x-rst; charset=UTF-8\n    home_page = https://launchpad.net/pbr\n    project_urls =\n        Bug Tracker = https://bugs.launchpad.net/pbr/\n        Documentation = https://docs.openstack.org/pbr/\n        Source Code = https://opendev.org/openstack/pbr\n    license = Apache-2\n",
                      "markdown": "`    description_content_type = text/x-rst; charset=UTF-8\n    home_page = https://launchpad.net/pbr\n    project_urls =\n        Bug Tracker = https://bugs.launchpad.net/pbr/\n        Documentation = https://docs.openstack.org/pbr/\n        Source Code = https://opendev.org/openstack/pbr\n    license = Apache-2\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/doc/source/user/using.rst"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 49,
                  "endLine": 43,
                  "endColumn": 58,
                  "snippet": {
                    "text": "PBR can be configured as a PEP517 build-system in ``pyproject.toml``. This\ncurrently continues to rely on setuptools which means you need the above\n``setup.py`` file to be present. The main benefits to using a\n``pyproject.toml`` file with PBR are that you can control the versions of\nPBR and setuptools that are used avoiding easy_install invocation.\nYour build-system block in ``pyproject.toml`` will need to look something\nlike this::\n",
                    "rendered": {
                      "text": "PBR can be configured as a PEP517 build-system in ``pyproject.toml``. This\ncurrently continues to rely on setuptools which means you need the above\n``setup.py`` file to be present. The main benefits to using a\n``pyproject.toml`` file with PBR are that you can control the versions of\nPBR and setuptools that are used avoiding easy_install invocation.\nYour build-system block in ``pyproject.toml`` will need to look something\nlike this::\n",
                      "markdown": "`PBR can be configured as a PEP517 build-system in ``pyproject.toml``. This\ncurrently continues to rely on setuptools which means you need the above\n``setup.py`` file to be present. The main benefits to using a\n``pyproject.toml`` file with PBR are that you can control the versions of\nPBR and setuptools that are used avoiding easy_install invocation.\nYour build-system block in ``pyproject.toml`` will need to look something\nlike this::\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/doc/source/user/using.rst"
                },
                "region": {
                  "startLine": 349,
                  "startColumn": 38,
                  "endLine": 349,
                  "endColumn": 44,
                  "snippet": {
                    "text": "\n   The ``build_sphinx`` plugin used to default to building both HTML and man\n   page output. This is no longer the case, and you should explicitly set\n   ``builders`` to ``html man`` if you wish to retain this behavior.\n\n.. deprecated:: 4.2\n\n",
                    "rendered": {
                      "text": "\n   The ``build_sphinx`` plugin used to default to building both HTML and man\n   page output. This is no longer the case, and you should explicitly set\n   ``builders`` to ``html man`` if you wish to retain this behavior.\n\n.. deprecated:: 4.2\n\n",
                      "markdown": "`\n   The ``build_sphinx`` plugin used to default to building both HTML and man\n   page output. This is no longer the case, and you should explicitly set\n   ``builders`` to ``html man`` if you wish to retain this behavior.\n\n.. deprecated:: 4.2\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/doc/source/user/using.rst"
                },
                "region": {
                  "startLine": 211,
                  "startColumn": 20,
                  "endLine": 211,
                  "endColumn": 28,
                  "snippet": {
                    "text": "        plain = pbr.cfg.driver:Plain\n        fancy = pbr.cfg.driver:Fancy\n\nWill cause a console script called *pbr* to be installed that executes the\n``main`` function found in ``pbr.cmd``. Additionally, two entry points will be\ninstalled for ``pbr.config.drivers``, one called ``plain`` which maps to the\n``Plain`` class in ``pbr.cfg.driver`` and one called ``fancy`` which maps to\n",
                    "rendered": {
                      "text": "        plain = pbr.cfg.driver:Plain\n        fancy = pbr.cfg.driver:Fancy\n\nWill cause a console script called *pbr* to be installed that executes the\n``main`` function found in ``pbr.cmd``. Additionally, two entry points will be\ninstalled for ``pbr.config.drivers``, one called ``plain`` which maps to the\n``Plain`` class in ``pbr.cfg.driver`` and one called ``fancy`` which maps to\n",
                      "markdown": "`        plain = pbr.cfg.driver:Plain\n        fancy = pbr.cfg.driver:Fancy\n\nWill cause a console script called *pbr* to be installed that executes the\n``main`` function found in ``pbr.cmd``. Additionally, two entry points will be\ninstalled for ``pbr.config.drivers``, one called ``plain`` which maps to the\n``Plain`` class in ``pbr.cfg.driver`` and one called ``fancy`` which maps to\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/doc/source/user/using.rst"
                },
                "region": {
                  "startLine": 200,
                  "startColumn": 50,
                  "endLine": 200,
                  "endColumn": 55,
                  "snippet": {
                    "text": "and Python libraries. This is actually provided by *setuptools* but is\ndocumented here owing to its importance.\n\nThe general syntax of specifying entry points is a top level name indicating\nthe entry point group name, followed by one or more key value pairs naming\nthe entry point to be installed. For instance::\n\n",
                    "rendered": {
                      "text": "and Python libraries. This is actually provided by *setuptools* but is\ndocumented here owing to its importance.\n\nThe general syntax of specifying entry points is a top level name indicating\nthe entry point group name, followed by one or more key value pairs naming\nthe entry point to be installed. For instance::\n\n",
                      "markdown": "`and Python libraries. This is actually provided by *setuptools* but is\ndocumented here owing to its importance.\n\nThe general syntax of specifying entry points is a top level name indicating\nthe entry point group name, followed by one or more key value pairs naming\nthe entry point to be installed. For instance::\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/doc/source/user/using.rst"
                },
                "region": {
                  "startLine": 182,
                  "startColumn": 56,
                  "endLine": 182,
                  "endColumn": 62,
                  "snippet": {
                    "text": "          etc/init.d = neutron.init\n\n  This will result in ``/etc/neutron`` containing ``api-paste.ini`` and\n  ``dhcp-agent.ini``, both of which *pbr* will expect to find in the ``etc``\n  directory in the root of the source tree. Additionally, ``neutron.init`` from\n  that directory will be installed in ``/etc/init.d``. All of the files and\n  directories located under ``etc/pbr`` in the source tree will be installed\n",
                    "rendered": {
                      "text": "          etc/init.d = neutron.init\n\n  This will result in ``/etc/neutron`` containing ``api-paste.ini`` and\n  ``dhcp-agent.ini``, both of which *pbr* will expect to find in the ``etc``\n  directory in the root of the source tree. Additionally, ``neutron.init`` from\n  that directory will be installed in ``/etc/init.d``. All of the files and\n  directories located under ``etc/pbr`` in the source tree will be installed\n",
                      "markdown": "`          etc/init.d = neutron.init\n\n  This will result in ``/etc/neutron`` containing ``api-paste.ini`` and\n  ``dhcp-agent.ini``, both of which *pbr* will expect to find in the ``etc``\n  directory in the root of the source tree. Additionally, ``neutron.init`` from\n  that directory will be installed in ``/etc/init.d``. All of the files and\n  directories located under ``etc/pbr`` in the source tree will be installed\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/doc/source/user/using.rst"
                },
                "region": {
                  "startLine": 182,
                  "startColumn": 46,
                  "endLine": 182,
                  "endColumn": 54,
                  "snippet": {
                    "text": "          etc/init.d = neutron.init\n\n  This will result in ``/etc/neutron`` containing ``api-paste.ini`` and\n  ``dhcp-agent.ini``, both of which *pbr* will expect to find in the ``etc``\n  directory in the root of the source tree. Additionally, ``neutron.init`` from\n  that directory will be installed in ``/etc/init.d``. All of the files and\n  directories located under ``etc/pbr`` in the source tree will be installed\n",
                    "rendered": {
                      "text": "          etc/init.d = neutron.init\n\n  This will result in ``/etc/neutron`` containing ``api-paste.ini`` and\n  ``dhcp-agent.ini``, both of which *pbr* will expect to find in the ``etc``\n  directory in the root of the source tree. Additionally, ``neutron.init`` from\n  that directory will be installed in ``/etc/init.d``. All of the files and\n  directories located under ``etc/pbr`` in the source tree will be installed\n",
                      "markdown": "`          etc/init.d = neutron.init\n\n  This will result in ``/etc/neutron`` containing ``api-paste.ini`` and\n  ``dhcp-agent.ini``, both of which *pbr* will expect to find in the ``etc``\n  directory in the root of the source tree. Additionally, ``neutron.init`` from\n  that directory will be installed in ``/etc/init.d``. All of the files and\n  directories located under ``etc/pbr`` in the source tree will be installed\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/doc/source/user/using.rst"
                },
                "region": {
                  "startLine": 157,
                  "startColumn": 42,
                  "endLine": 157,
                  "endColumn": 47,
                  "snippet": {
                    "text": "``packages``\n  A list of top-level packages that should be installed. The behavior of\n  packages is similar to ``setuptools.find_packages`` in that it recurses the\n  Python package hierarchy below the given top level and installs all of it. If\n  ``packages`` is not specified, it defaults to the value of the ``name`` field\n  given in the ``[metadata]`` section.\n\n",
                    "rendered": {
                      "text": "``packages``\n  A list of top-level packages that should be installed. The behavior of\n  packages is similar to ``setuptools.find_packages`` in that it recurses the\n  Python package hierarchy below the given top level and installs all of it. If\n  ``packages`` is not specified, it defaults to the value of the ``name`` field\n  given in the ``[metadata]`` section.\n\n",
                      "markdown": "```packages``\n  A list of top-level packages that should be installed. The behavior of\n  packages is similar to ``setuptools.find_packages`` in that it recurses the\n  Python package hierarchy below the given top level and installs all of it. If\n  ``packages`` is not specified, it defaults to the value of the ``name`` field\n  given in the ``[metadata]`` section.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/doc/source/user/using.rst"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 41,
                  "endLine": 44,
                  "endColumn": 55,
                  "snippet": {
                    "text": "currently continues to rely on setuptools which means you need the above\n``setup.py`` file to be present. The main benefits to using a\n``pyproject.toml`` file with PBR are that you can control the versions of\nPBR and setuptools that are used avoiding easy_install invocation.\nYour build-system block in ``pyproject.toml`` will need to look something\nlike this::\n\n",
                    "rendered": {
                      "text": "currently continues to rely on setuptools which means you need the above\n``setup.py`` file to be present. The main benefits to using a\n``pyproject.toml`` file with PBR are that you can control the versions of\nPBR and setuptools that are used avoiding easy_install invocation.\nYour build-system block in ``pyproject.toml`` will need to look something\nlike this::\n\n",
                      "markdown": "`currently continues to rely on setuptools which means you need the above\n``setup.py`` file to be present. The main benefits to using a\n``pyproject.toml`` file with PBR are that you can control the versions of\nPBR and setuptools that are used avoiding easy_install invocation.\nYour build-system block in ``pyproject.toml`` will need to look something\nlike this::\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/doc/source/user/using.rst"
                },
                "region": {
                  "startLine": 391,
                  "endLine": 391,
                  "endColumn": 46,
                  "snippet": {
                    "text": "Environment markers\n~~~~~~~~~~~~~~~~~~~\n\nEnvironment markers are `conditional dependencies`__ which can be added to the\nrequirements (or to a group of extra requirements) automatically, depending on\nthe environment the installer is running in. They can be added to requirements\nin the requirements file, or to extras defined in ``setup.cfg``, but the format\n",
                    "rendered": {
                      "text": "Environment markers\n~~~~~~~~~~~~~~~~~~~\n\nEnvironment markers are `conditional dependencies`__ which can be added to the\nrequirements (or to a group of extra requirements) automatically, depending on\nthe environment the installer is running in. They can be added to requirements\nin the requirements file, or to extras defined in ``setup.cfg``, but the format\n",
                      "markdown": "`Environment markers\n~~~~~~~~~~~~~~~~~~~\n\nEnvironment markers are `conditional dependencies`__ which can be added to the\nrequirements (or to a group of extra requirements) automatically, depending on\nthe environment the installer is running in. They can be added to requirements\nin the requirements file, or to extras defined in ``setup.cfg``, but the format\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/doc/source/index.rst"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 34,
                  "endLine": 27,
                  "endColumn": 40,
                  "snippet": {
                    "text": "* **Release Notes**: Generate a release notes file using reno\n* **Requirements**: Store your dependencies in a pip requirements file\n* **long_description**: Use your README file as a long_description\n* **Smart find_packages**: Smartly find packages under your root package\n* **Sphinx Autodoc**: Generate autodoc stub files for your whole module\n\nContents\n",
                    "rendered": {
                      "text": "* **Release Notes**: Generate a release notes file using reno\n* **Requirements**: Store your dependencies in a pip requirements file\n* **long_description**: Use your README file as a long_description\n* **Smart find_packages**: Smartly find packages under your root package\n* **Sphinx Autodoc**: Generate autodoc stub files for your whole module\n\nContents\n",
                      "markdown": "`* **Release Notes**: Generate a release notes file using reno\n* **Requirements**: Store your dependencies in a pip requirements file\n* **long_description**: Use your README file as a long_description\n* **Smart find_packages**: Smartly find packages under your root package\n* **Sphinx Autodoc**: Generate autodoc stub files for your whole module\n\nContents\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/doc/source/index.rst"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 48,
                  "endLine": 25,
                  "endColumn": 53,
                  "snippet": {
                    "text": "* **Manifest**: Generate a sensible manifest from git files and some standard\n  files\n* **Release Notes**: Generate a release notes file using reno\n* **Requirements**: Store your dependencies in a pip requirements file\n* **long_description**: Use your README file as a long_description\n* **Smart find_packages**: Smartly find packages under your root package\n* **Sphinx Autodoc**: Generate autodoc stub files for your whole module\n",
                    "rendered": {
                      "text": "* **Manifest**: Generate a sensible manifest from git files and some standard\n  files\n* **Release Notes**: Generate a release notes file using reno\n* **Requirements**: Store your dependencies in a pip requirements file\n* **long_description**: Use your README file as a long_description\n* **Smart find_packages**: Smartly find packages under your root package\n* **Sphinx Autodoc**: Generate autodoc stub files for your whole module\n",
                      "markdown": "`* **Manifest**: Generate a sensible manifest from git files and some standard\n  files\n* **Release Notes**: Generate a release notes file using reno\n* **Requirements**: Store your dependencies in a pip requirements file\n* **long_description**: Use your README file as a long_description\n* **Smart find_packages**: Smartly find packages under your root package\n* **Sphinx Autodoc**: Generate autodoc stub files for your whole module\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/doc/source/index.rst"
                },
                "region": {
                  "startLine": 22,
                  "startColumn": 49,
                  "endLine": 22,
                  "endColumn": 54,
                  "snippet": {
                    "text": "* **Version**: Manage version number based on git revisions and tags\n* **AUTHORS**: Generate AUTHORS file from git log\n* **ChangeLog**: Generate ChangeLog from git log\n* **Manifest**: Generate a sensible manifest from git files and some standard\n  files\n* **Release Notes**: Generate a release notes file using reno\n* **Requirements**: Store your dependencies in a pip requirements file\n",
                    "rendered": {
                      "text": "* **Version**: Manage version number based on git revisions and tags\n* **AUTHORS**: Generate AUTHORS file from git log\n* **ChangeLog**: Generate ChangeLog from git log\n* **Manifest**: Generate a sensible manifest from git files and some standard\n  files\n* **Release Notes**: Generate a release notes file using reno\n* **Requirements**: Store your dependencies in a pip requirements file\n",
                      "markdown": "`* **Version**: Manage version number based on git revisions and tags\n* **AUTHORS**: Generate AUTHORS file from git log\n* **ChangeLog**: Generate ChangeLog from git log\n* **Manifest**: Generate a sensible manifest from git files and some standard\n  files\n* **Release Notes**: Generate a release notes file using reno\n* **Requirements**: Store your dependencies in a pip requirements file\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/doc/source/index.rst"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 40,
                  "endLine": 21,
                  "endColumn": 45,
                  "snippet": {
                    "text": "\n* **Version**: Manage version number based on git revisions and tags\n* **AUTHORS**: Generate AUTHORS file from git log\n* **ChangeLog**: Generate ChangeLog from git log\n* **Manifest**: Generate a sensible manifest from git files and some standard\n  files\n* **Release Notes**: Generate a release notes file using reno\n",
                    "rendered": {
                      "text": "\n* **Version**: Manage version number based on git revisions and tags\n* **AUTHORS**: Generate AUTHORS file from git log\n* **ChangeLog**: Generate ChangeLog from git log\n* **Manifest**: Generate a sensible manifest from git files and some standard\n  files\n* **Release Notes**: Generate a release notes file using reno\n",
                      "markdown": "`\n* **Version**: Manage version number based on git revisions and tags\n* **AUTHORS**: Generate AUTHORS file from git log\n* **ChangeLog**: Generate ChangeLog from git log\n* **Manifest**: Generate a sensible manifest from git files and some standard\n  files\n* **Release Notes**: Generate a release notes file using reno\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/doc/source/index.rst"
                },
                "region": {
                  "startLine": 20,
                  "startColumn": 41,
                  "endLine": 20,
                  "endColumn": 46,
                  "snippet": {
                    "text": "*pbr* can and does do a bunch of things for you:\n\n* **Version**: Manage version number based on git revisions and tags\n* **AUTHORS**: Generate AUTHORS file from git log\n* **ChangeLog**: Generate ChangeLog from git log\n* **Manifest**: Generate a sensible manifest from git files and some standard\n  files\n",
                    "rendered": {
                      "text": "*pbr* can and does do a bunch of things for you:\n\n* **Version**: Manage version number based on git revisions and tags\n* **AUTHORS**: Generate AUTHORS file from git log\n* **ChangeLog**: Generate ChangeLog from git log\n* **Manifest**: Generate a sensible manifest from git files and some standard\n  files\n",
                      "markdown": "`*pbr* can and does do a bunch of things for you:\n\n* **Version**: Manage version number based on git revisions and tags\n* **AUTHORS**: Generate AUTHORS file from git log\n* **ChangeLog**: Generate ChangeLog from git log\n* **Manifest**: Generate a sensible manifest from git files and some standard\n  files\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/doc/source/index.rst"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 45,
                  "endLine": 19,
                  "endColumn": 50,
                  "snippet": {
                    "text": "\n*pbr* can and does do a bunch of things for you:\n\n* **Version**: Manage version number based on git revisions and tags\n* **AUTHORS**: Generate AUTHORS file from git log\n* **ChangeLog**: Generate ChangeLog from git log\n* **Manifest**: Generate a sensible manifest from git files and some standard\n",
                    "rendered": {
                      "text": "\n*pbr* can and does do a bunch of things for you:\n\n* **Version**: Manage version number based on git revisions and tags\n* **AUTHORS**: Generate AUTHORS file from git log\n* **ChangeLog**: Generate ChangeLog from git log\n* **Manifest**: Generate a sensible manifest from git files and some standard\n",
                      "markdown": "`\n*pbr* can and does do a bunch of things for you:\n\n* **Version**: Manage version number based on git revisions and tags\n* **AUTHORS**: Generate AUTHORS file from git log\n* **ChangeLog**: Generate ChangeLog from git log\n* **Manifest**: Generate a sensible manifest from git files and some standard\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/setup.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/tests/testpackage/setup.cfg"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 7,
                  "endLine": 10,
                  "endColumn": 16,
                  "snippet": {
                    "text": "author_email = openstack-discuss@lists.openstack.org\nhome_page = http://pypi.python.org/pypi/pbr\nproject_urls =\n    Bug Tracker = https://bugs.launchpad.net/pbr/\n    Documentation = https://docs.openstack.org/pbr/\n    Source Code = https://opendev.org/openstack/pbr\nsummary = Test package for testing pbr\n",
                    "rendered": {
                      "text": "author_email = openstack-discuss@lists.openstack.org\nhome_page = http://pypi.python.org/pypi/pbr\nproject_urls =\n    Bug Tracker = https://bugs.launchpad.net/pbr/\n    Documentation = https://docs.openstack.org/pbr/\n    Source Code = https://opendev.org/openstack/pbr\nsummary = Test package for testing pbr\n",
                      "markdown": "`author_email = openstack-discuss@lists.openstack.org\nhome_page = http://pypi.python.org/pypi/pbr\nproject_urls =\n    Bug Tracker = https://bugs.launchpad.net/pbr/\n    Documentation = https://docs.openstack.org/pbr/\n    Source Code = https://opendev.org/openstack/pbr\nsummary = Test package for testing pbr\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/git.py"
                },
                "region": {
                  "startLine": 102,
                  "startColumn": 3,
                  "endLine": 102,
                  "endColumn": 7,
                  "snippet": {
                    "text": "    \"\"\"Behave like a file finder entrypoint plugin.\n\n    We don't actually use the entrypoints system for this because it runs\n    at absurd times. We only want to do this when we are building an sdist.\n    \"\"\"\n    file_list = []\n    if git_dir is None:\n",
                    "rendered": {
                      "text": "    \"\"\"Behave like a file finder entrypoint plugin.\n\n    We don't actually use the entrypoints system for this because it runs\n    at absurd times. We only want to do this when we are building an sdist.\n    \"\"\"\n    file_list = []\n    if git_dir is None:\n",
                      "markdown": "`    \"\"\"Behave like a file finder entrypoint plugin.\n\n    We don't actually use the entrypoints system for this because it runs\n    at absurd times. We only want to do this when we are building an sdist.\n    \"\"\"\n    file_list = []\n    if git_dir is None:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/git.py"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 7,
                  "endLine": 63,
                  "endColumn": 12,
                  "snippet": {
                    "text": "\ndef _run_git_command(cmd, git_dir, **kwargs):\n    if not isinstance(cmd, (list, tuple)):\n        cmd = [cmd]\n    return _run_shell_command(\n        ['git', '--git-dir=%s' % git_dir] + cmd, **kwargs)\n\n",
                    "rendered": {
                      "text": "\ndef _run_git_command(cmd, git_dir, **kwargs):\n    if not isinstance(cmd, (list, tuple)):\n        cmd = [cmd]\n    return _run_shell_command(\n        ['git', '--git-dir=%s' % git_dir] + cmd, **kwargs)\n\n",
                      "markdown": "`\ndef _run_git_command(cmd, git_dir, **kwargs):\n    if not isinstance(cmd, (list, tuple)):\n        cmd = [cmd]\n    return _run_shell_command(\n        ['git', '--git-dir=%s' % git_dir] + cmd, **kwargs)\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/git.py"
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 20,
                  "endLine": 56,
                  "endColumn": 29,
                  "snippet": {
                    "text": "            \"%s returned %d\" % (cmd, output.returncode))\n    if len(out) == 0 or not out[0] or not out[0].strip():\n        return ''\n    # Since we don't control the history, and forcing users to rebase arbitrary\n    # history to fix utf8 issues is harsh, decode with replace.\n    return out[0].strip().decode('utf-8', 'replace')\n\n",
                    "rendered": {
                      "text": "            \"%s returned %d\" % (cmd, output.returncode))\n    if len(out) == 0 or not out[0] or not out[0].strip():\n        return ''\n    # Since we don't control the history, and forcing users to rebase arbitrary\n    # history to fix utf8 issues is harsh, decode with replace.\n    return out[0].strip().decode('utf-8', 'replace')\n\n",
                      "markdown": "`            \"%s returned %d\" % (cmd, output.returncode))\n    if len(out) == 0 or not out[0] or not out[0].strip():\n        return ''\n    # Since we don't control the history, and forcing users to rebase arbitrary\n    # history to fix utf8 issues is harsh, decode with replace.\n    return out[0].strip().decode('utf-8', 'replace')\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/git.py"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 26,
                  "endLine": 8,
                  "snippet": {
                    "text": "#\n#    Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n#    not use this file except in compliance with the License. You may obtain\n#    a copy of the License at\n#\n#         http://www.apache.org/licenses/LICENSE-2.0\n#\n#    Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n#    Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n#    not use this file except in compliance with the License. You may obtain\n#    a copy of the License at\n#\n#         http://www.apache.org/licenses/LICENSE-2.0\n#\n#    Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n#    Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n#    not use this file except in compliance with the License. You may obtain\n#    a copy of the License at\n#\n#         http://www.apache.org/licenses/LICENSE-2.0\n#\n#    Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/git.py"
                },
                "region": {
                  "startLine": 296,
                  "startColumn": 32,
                  "endLine": 296,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\n\ndef generate_authors(git_dir=None, dest_dir='.', option_dict=dict()):\n    \"\"\"Create AUTHORS file using git commits.\"\"\"\n    should_skip = options.get_boolean_option(option_dict, 'skip_authors',\n                                             'SKIP_GENERATE_AUTHORS')\n    if should_skip:\n",
                    "rendered": {
                      "text": "\n\ndef generate_authors(git_dir=None, dest_dir='.', option_dict=dict()):\n    \"\"\"Create AUTHORS file using git commits.\"\"\"\n    should_skip = options.get_boolean_option(option_dict, 'skip_authors',\n                                             'SKIP_GENERATE_AUTHORS')\n    if should_skip:\n",
                      "markdown": "`\n\ndef generate_authors(git_dir=None, dest_dir='.', option_dict=dict()):\n    \"\"\"Create AUTHORS file using git commits.\"\"\"\n    should_skip = options.get_boolean_option(option_dict, 'skip_authors',\n                                             'SKIP_GENERATE_AUTHORS')\n    if should_skip:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/git.py"
                },
                "region": {
                  "startLine": 265,
                  "startColumn": 37,
                  "endLine": 265,
                  "endColumn": 42,
                  "snippet": {
                    "text": "\ndef write_git_changelog(git_dir=None, dest_dir=os.path.curdir,\n                        option_dict=None, changelog=None):\n    \"\"\"Write a changelog based on the git changelog.\"\"\"\n    start = time.time()\n    if not option_dict:\n        option_dict = {}\n",
                    "rendered": {
                      "text": "\ndef write_git_changelog(git_dir=None, dest_dir=os.path.curdir,\n                        option_dict=None, changelog=None):\n    \"\"\"Write a changelog based on the git changelog.\"\"\"\n    start = time.time()\n    if not option_dict:\n        option_dict = {}\n",
                      "markdown": "`\ndef write_git_changelog(git_dir=None, dest_dir=os.path.curdir,\n                        option_dict=None, changelog=None):\n    \"\"\"Write a changelog based on the git changelog.\"\"\"\n    start = time.time()\n    if not option_dict:\n        option_dict = {}\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/git.py"
                },
                "region": {
                  "startLine": 254,
                  "startColumn": 17,
                  "endLine": 254,
                  "endColumn": 22,
                  "snippet": {
                    "text": "            # The first split gives us \"['', '1.2b1, tag:', '1.2']\"\n            # Which is why we do the second split below on the comma\n            for tag_string in refname.split(\"refs/tags/\")[1:]:\n                # git tag does not allow : or \" \" in tag names, so we split\n                # on \", \" which is the separator between elements\n                candidate = tag_string.split(\", \")[0].replace(\"-\", \".\")\n                if _is_valid_version(candidate):\n",
                    "rendered": {
                      "text": "            # The first split gives us \"['', '1.2b1, tag:', '1.2']\"\n            # Which is why we do the second split below on the comma\n            for tag_string in refname.split(\"refs/tags/\")[1:]:\n                # git tag does not allow : or \" \" in tag names, so we split\n                # on \", \" which is the separator between elements\n                candidate = tag_string.split(\", \")[0].replace(\"-\", \".\")\n                if _is_valid_version(candidate):\n",
                      "markdown": "`            # The first split gives us \"['', '1.2b1, tag:', '1.2']\"\n            # Which is why we do the second split below on the comma\n            for tag_string in refname.split(\"refs/tags/\")[1:]:\n                # git tag does not allow : or \" \" in tag names, so we split\n                # on \", \" which is the separator between elements\n                candidate = tag_string.split(\", \")[0].replace(\"-\", \".\")\n                if _is_valid_version(candidate):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/git.py"
                },
                "region": {
                  "startLine": 227,
                  "startColumn": 27,
                  "endLine": 227,
                  "endColumn": 32,
                  "snippet": {
                    "text": "    uses.\n\n    .. caution:: this function risk to return a tag that doesn't exist really\n                 inside the git objects list due to replacement made\n                 to tag name to also list pre-release suffix.\n                 Compliant with the SemVer specification (e.g 1.2.3-rc1)\n\n",
                    "rendered": {
                      "text": "    uses.\n\n    .. caution:: this function risk to return a tag that doesn't exist really\n                 inside the git objects list due to replacement made\n                 to tag name to also list pre-release suffix.\n                 Compliant with the SemVer specification (e.g 1.2.3-rc1)\n\n",
                      "markdown": "`    uses.\n\n    .. caution:: this function risk to return a tag that doesn't exist really\n                 inside the git objects list due to replacement made\n                 to tag name to also list pre-release suffix.\n                 Compliant with the SemVer specification (e.g 1.2.3-rc1)\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/git.py"
                },
                "region": {
                  "startLine": 108,
                  "startColumn": 26,
                  "endLine": 108,
                  "endColumn": 31,
                  "snippet": {
                    "text": "    if git_dir is None:\n        git_dir = _run_git_functions()\n    if git_dir:\n        log.info(\"[pbr] In git context, generating filelist from git\")\n        file_list = _run_git_command(['ls-files', '-z'], git_dir)\n        # Users can fix utf8 issues locally with a single commit, so we are\n        # strict here.\n",
                    "rendered": {
                      "text": "    if git_dir is None:\n        git_dir = _run_git_functions()\n    if git_dir:\n        log.info(\"[pbr] In git context, generating filelist from git\")\n        file_list = _run_git_command(['ls-files', '-z'], git_dir)\n        # Users can fix utf8 issues locally with a single commit, so we are\n        # strict here.\n",
                      "markdown": "`    if git_dir is None:\n        git_dir = _run_git_functions()\n    if git_dir:\n        log.info(\"[pbr] In git context, generating filelist from git\")\n        file_list = _run_git_command(['ls-files', '-z'], git_dir)\n        # Users can fix utf8 issues locally with a single commit, so we are\n        # strict here.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/git.py"
                },
                "region": {
                  "startLine": 73,
                  "startColumn": 13,
                  "endLine": 73,
                  "endColumn": 18,
                  "snippet": {
                    "text": "        return _run_shell_command(['git', 'rev-parse', '--git-dir'])\n    except OSError as e:\n        if e.errno == errno.ENOENT:\n            # git not installed.\n            return ''\n        raise\n\n",
                    "rendered": {
                      "text": "        return _run_shell_command(['git', 'rev-parse', '--git-dir'])\n    except OSError as e:\n        if e.errno == errno.ENOENT:\n            # git not installed.\n            return ''\n        raise\n\n",
                      "markdown": "`        return _run_shell_command(['git', 'rev-parse', '--git-dir'])\n    except OSError as e:\n        if e.errno == errno.ENOENT:\n            # git not installed.\n            return ''\n        raise\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/git.py"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 6,
                  "endLine": 27,
                  "snippet": {
                    "text": "import os\nimport re\nimport subprocess\nimport time\n\nimport pkg_resources\n\nfrom pbr import options\n",
                    "rendered": {
                      "text": "import os\nimport re\nimport subprocess\nimport time\n\nimport pkg_resources\n\nfrom pbr import options\n",
                      "markdown": "`import os\nimport re\nimport subprocess\nimport time\n\nimport pkg_resources\n\nfrom pbr import options\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/util.py"
                },
                "region": {
                  "startLine": 461,
                  "startColumn": 44,
                  "endLine": 461,
                  "endColumn": 48,
                  "snippet": {
                    "text": "                # We do not want to poison wheel creation with locally\n                # evaluated markers.  sdists always re-create the egg_info\n                # and as such do not need guarded, and pip will never call\n                # multiple setup.py commands at once.\n                if 'bdist_wheel' not in script_args:\n                    try:\n                        if pkg_resources.evaluate_marker('(%s)' % env_marker):\n",
                    "rendered": {
                      "text": "                # We do not want to poison wheel creation with locally\n                # evaluated markers.  sdists always re-create the egg_info\n                # and as such do not need guarded, and pip will never call\n                # multiple setup.py commands at once.\n                if 'bdist_wheel' not in script_args:\n                    try:\n                        if pkg_resources.evaluate_marker('(%s)' % env_marker):\n",
                      "markdown": "`                # We do not want to poison wheel creation with locally\n                # evaluated markers.  sdists always re-create the egg_info\n                # and as such do not need guarded, and pip will never call\n                # multiple setup.py commands at once.\n                if 'bdist_wheel' not in script_args:\n                    try:\n                        if pkg_resources.evaluate_marker('(%s)' % env_marker):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/util.py"
                },
                "region": {
                  "startLine": 407,
                  "startColumn": 19,
                  "endLine": 407,
                  "endColumn": 24,
                  "snippet": {
                    "text": "                dist = st_dist.Distribution()\n                for cls_name in in_cfg_value:\n                    cls = resolve_name(cls_name)\n                    cmd = cls(dist)\n                    cmdclass[cmd.get_command_name()] = cls\n                in_cfg_value = cmdclass\n\n",
                    "rendered": {
                      "text": "                dist = st_dist.Distribution()\n                for cls_name in in_cfg_value:\n                    cls = resolve_name(cls_name)\n                    cmd = cls(dist)\n                    cmdclass[cmd.get_command_name()] = cls\n                in_cfg_value = cmdclass\n\n",
                      "markdown": "`                dist = st_dist.Distribution()\n                for cls_name in in_cfg_value:\n                    cls = resolve_name(cls_name)\n                    cmd = cls(dist)\n                    cmdclass[cmd.get_command_name()] = cls\n                in_cfg_value = cmdclass\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/util.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/util.py"
                },
                "region": {
                  "startLine": 460,
                  "startColumn": 54,
                  "endLine": 460,
                  "endColumn": 59,
                  "snippet": {
                    "text": "                extras_key = '%s:(%s)' % (req_group, env_marker)\n                # We do not want to poison wheel creation with locally\n                # evaluated markers.  sdists always re-create the egg_info\n                # and as such do not need guarded, and pip will never call\n                # multiple setup.py commands at once.\n                if 'bdist_wheel' not in script_args:\n                    try:\n",
                    "rendered": {
                      "text": "                extras_key = '%s:(%s)' % (req_group, env_marker)\n                # We do not want to poison wheel creation with locally\n                # evaluated markers.  sdists always re-create the egg_info\n                # and as such do not need guarded, and pip will never call\n                # multiple setup.py commands at once.\n                if 'bdist_wheel' not in script_args:\n                    try:\n",
                      "markdown": "`                extras_key = '%s:(%s)' % (req_group, env_marker)\n                # We do not want to poison wheel creation with locally\n                # evaluated markers.  sdists always re-create the egg_info\n                # and as such do not need guarded, and pip will never call\n                # multiple setup.py commands at once.\n                if 'bdist_wheel' not in script_args:\n                    try:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/util.py"
                },
                "region": {
                  "startLine": 355,
                  "startColumn": 62,
                  "endLine": 355,
                  "endColumn": 68,
                  "snippet": {
                    "text": "\n        if in_cfg_value:\n            if arg in ('install_requires', 'tests_require'):\n                # Replaces PEP345-style version specs with the sort expected by\n                # setuptools\n                in_cfg_value = [_VERSION_SPEC_RE.sub(r'\\1\\2', pred)\n                                for pred in in_cfg_value]\n",
                    "rendered": {
                      "text": "\n        if in_cfg_value:\n            if arg in ('install_requires', 'tests_require'):\n                # Replaces PEP345-style version specs with the sort expected by\n                # setuptools\n                in_cfg_value = [_VERSION_SPEC_RE.sub(r'\\1\\2', pred)\n                                for pred in in_cfg_value]\n",
                      "markdown": "`\n        if in_cfg_value:\n            if arg in ('install_requires', 'tests_require'):\n                # Replaces PEP345-style version specs with the sort expected by\n                # setuptools\n                in_cfg_value = [_VERSION_SPEC_RE.sub(r'\\1\\2', pred)\n                                for pred in in_cfg_value]\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/build.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 23,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n# not use this file except in compliance with the License. You may obtain\n# a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n# not use this file except in compliance with the License. You may obtain\n# a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n# not use this file except in compliance with the License. You may obtain\n# a copy of the License at\n#\n#     http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pbr/extra_files.py"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 38,
                  "endLine": 6,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#    http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/releasenotes/notes/cmd-e6664dcbd42d3935.yaml"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 19,
                  "endLine": 9,
                  "snippet": {
                    "text": "\n    Example:\n\n    .. code-block:: bash\n\n        $ pbr info -s pkgname\n        1.2.3\n",
                    "rendered": {
                      "text": "\n    Example:\n\n    .. code-block:: bash\n\n        $ pbr info -s pkgname\n        1.2.3\n",
                      "markdown": "`\n    Example:\n\n    .. code-block:: bash\n\n        $ pbr info -s pkgname\n        1.2.3\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/releasenotes/notes/cmd-e6664dcbd42d3935.yaml"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 19,
                  "endLine": 9,
                  "snippet": {
                    "text": "\n    Example:\n\n    .. code-block:: bash\n\n        $ pbr info -s pkgname\n        1.2.3\n",
                    "rendered": {
                      "text": "\n    Example:\n\n    .. code-block:: bash\n\n        $ pbr info -s pkgname\n        1.2.3\n",
                      "markdown": "`\n    Example:\n\n    .. code-block:: bash\n\n        $ pbr info -s pkgname\n        1.2.3\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/tools/integration.sh"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 12,
                  "endLine": 33,
                  "snippet": {
                    "text": "REPODIR=${REPODIR:-$BASE/openstack}\n\n# TODO: Figure out how to get this on to the box properly\nsudo apt-get update\nsudo apt-get install -y --force-yes libvirt-dev libxml2-dev libxslt-dev libmysqlclient-dev libpq-dev libnspr4-dev pkg-config libsqlite3-dev libffi-dev libldap2-dev libsasl2-dev ccache libkrb5-dev liberasurecode-dev libjpeg-dev libsystemd-dev libnss3-dev libssl-dev\n\n# FOR pyyaml\nsudo apt-get install -y --force-yes debhelper python3-all-dev python3-all-dbg libyaml-dev cython3 cython3-dbg quilt\n",
                    "rendered": {
                      "text": "REPODIR=${REPODIR:-$BASE/openstack}\n\n# TODO: Figure out how to get this on to the box properly\nsudo apt-get update\nsudo apt-get install -y --force-yes libvirt-dev libxml2-dev libxslt-dev libmysqlclient-dev libpq-dev libnspr4-dev pkg-config libsqlite3-dev libffi-dev libldap2-dev libsasl2-dev ccache libkrb5-dev liberasurecode-dev libjpeg-dev libsystemd-dev libnss3-dev libssl-dev\n\n# FOR pyyaml\nsudo apt-get install -y --force-yes debhelper python3-all-dev python3-all-dbg libyaml-dev cython3 cython3-dbg quilt\n",
                      "markdown": "`REPODIR=${REPODIR:-$BASE/openstack}\n\n# TODO: Figure out how to get this on to the box properly\nsudo apt-get update\nsudo apt-get install -y --force-yes libvirt-dev libxml2-dev libxslt-dev libmysqlclient-dev libpq-dev libnspr4-dev pkg-config libsqlite3-dev libffi-dev libldap2-dev libsasl2-dev ccache libkrb5-dev liberasurecode-dev libjpeg-dev libsystemd-dev libnss3-dev libssl-dev\n\n# FOR pyyaml\nsudo apt-get install -y --force-yes debhelper python3-all-dev python3-all-dbg libyaml-dev cython3 cython3-dbg quilt\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/tools/integration.sh"
                },
                "region": {
                  "startLine": 160,
                  "startColumn": 36,
                  "endLine": 161,
                  "endColumn": 4,
                  "snippet": {
                    "text": "cd $REPODIR/pbr\nmkvenv .venv\nsource .venv/bin/activate\npip install -r test-requirements.txt\npip install ${REPODIR}/requirements\nstestr run --suppress-attachments test_integration\n",
                    "rendered": {
                      "text": "cd $REPODIR/pbr\nmkvenv .venv\nsource .venv/bin/activate\npip install -r test-requirements.txt\npip install ${REPODIR}/requirements\nstestr run --suppress-attachments test_integration\n",
                      "markdown": "`cd $REPODIR/pbr\nmkvenv .venv\nsource .venv/bin/activate\npip install -r test-requirements.txt\npip install ${REPODIR}/requirements\nstestr run --suppress-attachments test_integration\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/tools/integration.sh"
                },
                "region": {
                  "startLine": 159,
                  "startColumn": 25,
                  "endLine": 160,
                  "endColumn": 4,
                  "snippet": {
                    "text": "export OS_TEST_TIMEOUT=1200\ncd $REPODIR/pbr\nmkvenv .venv\nsource .venv/bin/activate\npip install -r test-requirements.txt\npip install ${REPODIR}/requirements\nstestr run --suppress-attachments test_integration\n",
                    "rendered": {
                      "text": "export OS_TEST_TIMEOUT=1200\ncd $REPODIR/pbr\nmkvenv .venv\nsource .venv/bin/activate\npip install -r test-requirements.txt\npip install ${REPODIR}/requirements\nstestr run --suppress-attachments test_integration\n",
                      "markdown": "`export OS_TEST_TIMEOUT=1200\ncd $REPODIR/pbr\nmkvenv .venv\nsource .venv/bin/activate\npip install -r test-requirements.txt\npip install ${REPODIR}/requirements\nstestr run --suppress-attachments test_integration\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/tools/integration.sh"
                },
                "region": {
                  "startLine": 143,
                  "startColumn": 4,
                  "endLine": 143,
                  "endColumn": 11,
                  "snippet": {
                    "text": "\nprojectdir=$tmpdir/projects\nmkdir -p $projectdir\nsudo chown -R $USER $REPODIR\n\nexport PBR_INTEGRATION=1\nexport PIPFLAGS\n",
                    "rendered": {
                      "text": "\nprojectdir=$tmpdir/projects\nmkdir -p $projectdir\nsudo chown -R $USER $REPODIR\n\nexport PBR_INTEGRATION=1\nexport PIPFLAGS\n",
                      "markdown": "`\nprojectdir=$tmpdir/projects\nmkdir -p $projectdir\nsudo chown -R $USER $REPODIR\n\nexport PBR_INTEGRATION=1\nexport PIPFLAGS\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/tools/integration.sh"
                },
                "region": {
                  "startLine": 139,
                  "startColumn": 22,
                  "endLine": 139,
                  "endColumn": 28,
                  "snippet": {
                    "text": "PBR_VERSION=0.0 $epvenv/bin/python setup.py install\ncat $epvenv/bin/test_cmd\ngrep 'PBR Generated' $epvenv/bin/test_cmd\n$epvenv/bin/test_cmd | grep 'Test cmd'\n\nprojectdir=$tmpdir/projects\nmkdir -p $projectdir\n",
                    "rendered": {
                      "text": "PBR_VERSION=0.0 $epvenv/bin/python setup.py install\ncat $epvenv/bin/test_cmd\ngrep 'PBR Generated' $epvenv/bin/test_cmd\n$epvenv/bin/test_cmd | grep 'Test cmd'\n\nprojectdir=$tmpdir/projects\nmkdir -p $projectdir\n",
                      "markdown": "`PBR_VERSION=0.0 $epvenv/bin/python setup.py install\ncat $epvenv/bin/test_cmd\ngrep 'PBR Generated' $epvenv/bin/test_cmd\n$epvenv/bin/test_cmd | grep 'Test cmd'\n\nprojectdir=$tmpdir/projects\nmkdir -p $projectdir\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/tools/integration.sh"
                },
                "region": {
                  "startLine": 137,
                  "startColumn": 24,
                  "endLine": 138,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\n# Now check install\nPBR_VERSION=0.0 $epvenv/bin/python setup.py install\ncat $epvenv/bin/test_cmd\ngrep 'PBR Generated' $epvenv/bin/test_cmd\n$epvenv/bin/test_cmd | grep 'Test cmd'\n\nprojectdir=$tmpdir/projects\n",
                    "rendered": {
                      "text": "\n# Now check install\nPBR_VERSION=0.0 $epvenv/bin/python setup.py install\ncat $epvenv/bin/test_cmd\ngrep 'PBR Generated' $epvenv/bin/test_cmd\n$epvenv/bin/test_cmd | grep 'Test cmd'\n\nprojectdir=$tmpdir/projects\n",
                      "markdown": "`\n# Now check install\nPBR_VERSION=0.0 $epvenv/bin/python setup.py install\ncat $epvenv/bin/test_cmd\ngrep 'PBR Generated' $epvenv/bin/test_cmd\n$epvenv/bin/test_cmd | grep 'Test cmd'\n\nprojectdir=$tmpdir/projects\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/tools/integration.sh"
                },
                "region": {
                  "startLine": 136,
                  "startColumn": 51,
                  "endLine": 137,
                  "endColumn": 4,
                  "snippet": {
                    "text": "PBR_VERSION=0.0 $epvenv/bin/python setup.py develop --uninstall\n\n# Now check install\nPBR_VERSION=0.0 $epvenv/bin/python setup.py install\ncat $epvenv/bin/test_cmd\ngrep 'PBR Generated' $epvenv/bin/test_cmd\n$epvenv/bin/test_cmd | grep 'Test cmd'\n\n",
                    "rendered": {
                      "text": "PBR_VERSION=0.0 $epvenv/bin/python setup.py develop --uninstall\n\n# Now check install\nPBR_VERSION=0.0 $epvenv/bin/python setup.py install\ncat $epvenv/bin/test_cmd\ngrep 'PBR Generated' $epvenv/bin/test_cmd\n$epvenv/bin/test_cmd | grep 'Test cmd'\n\n",
                      "markdown": "`PBR_VERSION=0.0 $epvenv/bin/python setup.py develop --uninstall\n\n# Now check install\nPBR_VERSION=0.0 $epvenv/bin/python setup.py install\ncat $epvenv/bin/test_cmd\ngrep 'PBR Generated' $epvenv/bin/test_cmd\n$epvenv/bin/test_cmd | grep 'Test cmd'\n\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/tools/integration.sh"
                },
                "region": {
                  "startLine": 131,
                  "startColumn": 24,
                  "endLine": 132,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\n# First check develop\nPBR_VERSION=0.0 $epvenv/bin/python setup.py develop\ncat $epvenv/bin/test_cmd\ngrep 'PBR Generated' $epvenv/bin/test_cmd\nPBR_VERSION=0.0 $epvenv/bin/python setup.py develop --uninstall\n\n# Now check install\n",
                    "rendered": {
                      "text": "\n# First check develop\nPBR_VERSION=0.0 $epvenv/bin/python setup.py develop\ncat $epvenv/bin/test_cmd\ngrep 'PBR Generated' $epvenv/bin/test_cmd\nPBR_VERSION=0.0 $epvenv/bin/python setup.py develop --uninstall\n\n# Now check install\n",
                      "markdown": "`\n# First check develop\nPBR_VERSION=0.0 $epvenv/bin/python setup.py develop\ncat $epvenv/bin/test_cmd\ngrep 'PBR Generated' $epvenv/bin/test_cmd\nPBR_VERSION=0.0 $epvenv/bin/python setup.py develop --uninstall\n\n# Now check install\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/tools/integration.sh"
                },
                "region": {
                  "startLine": 130,
                  "startColumn": 51,
                  "endLine": 131,
                  "endColumn": 4,
                  "snippet": {
                    "text": "$epvenv/bin/pip $PIPFLAGS install -f $WHEELHOUSE -e $eppbrdir\n\n# First check develop\nPBR_VERSION=0.0 $epvenv/bin/python setup.py develop\ncat $epvenv/bin/test_cmd\ngrep 'PBR Generated' $epvenv/bin/test_cmd\nPBR_VERSION=0.0 $epvenv/bin/python setup.py develop --uninstall\n\n",
                    "rendered": {
                      "text": "$epvenv/bin/pip $PIPFLAGS install -f $WHEELHOUSE -e $eppbrdir\n\n# First check develop\nPBR_VERSION=0.0 $epvenv/bin/python setup.py develop\ncat $epvenv/bin/test_cmd\ngrep 'PBR Generated' $epvenv/bin/test_cmd\nPBR_VERSION=0.0 $epvenv/bin/python setup.py develop --uninstall\n\n",
                      "markdown": "`$epvenv/bin/pip $PIPFLAGS install -f $WHEELHOUSE -e $eppbrdir\n\n# First check develop\nPBR_VERSION=0.0 $epvenv/bin/python setup.py develop\ncat $epvenv/bin/test_cmd\ngrep 'PBR Generated' $epvenv/bin/test_cmd\nPBR_VERSION=0.0 $epvenv/bin/python setup.py develop --uninstall\n\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/tools/integration.sh"
                },
                "region": {
                  "startLine": 125,
                  "startColumn": 25,
                  "endLine": 126,
                  "endColumn": 4,
                  "snippet": {
                    "text": "epvenv=$eptest/venv\nmkvenv $epvenv\n\neppbrdir=$tmpdir/eppbrdir\ngit clone $REPODIR/pbr $eppbrdir\n$epvenv/bin/pip $PIPFLAGS install -f $WHEELHOUSE -e $eppbrdir\n\n# First check develop\n",
                    "rendered": {
                      "text": "epvenv=$eptest/venv\nmkvenv $epvenv\n\neppbrdir=$tmpdir/eppbrdir\ngit clone $REPODIR/pbr $eppbrdir\n$epvenv/bin/pip $PIPFLAGS install -f $WHEELHOUSE -e $eppbrdir\n\n# First check develop\n",
                      "markdown": "`epvenv=$eptest/venv\nmkvenv $epvenv\n\neppbrdir=$tmpdir/eppbrdir\ngit clone $REPODIR/pbr $eppbrdir\n$epvenv/bin/pip $PIPFLAGS install -f $WHEELHOUSE -e $eppbrdir\n\n# First check develop\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/tools/integration.sh"
                },
                "region": {
                  "startLine": 116,
                  "startColumn": 18,
                  "endLine": 117,
                  "endColumn": 4,
                  "snippet": {
                    "text": "    )\nEOF\n\nmkdir test_project\ncat <<EOF > test_project/__init__.py\ndef main():\n    print(\"Test cmd\")\nEOF\n",
                    "rendered": {
                      "text": "    )\nEOF\n\nmkdir test_project\ncat <<EOF > test_project/__init__.py\ndef main():\n    print(\"Test cmd\")\nEOF\n",
                      "markdown": "`    )\nEOF\n\nmkdir test_project\ncat <<EOF > test_project/__init__.py\ndef main():\n    print(\"Test cmd\")\nEOF\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/tools/integration.sh"
                },
                "region": {
                  "startLine": 98,
                  "startColumn": 20,
                  "endLine": 99,
                  "snippet": {
                    "text": "cat <<EOF > setup.py\nimport setuptools\n\nfrom requests import Timeout\nfrom socket import error as SocketError\n\n# Some environments have network issues that drop connections to pypi\n# when running integration tests, so we retry here so that hour-long\n",
                    "rendered": {
                      "text": "cat <<EOF > setup.py\nimport setuptools\n\nfrom requests import Timeout\nfrom socket import error as SocketError\n\n# Some environments have network issues that drop connections to pypi\n# when running integration tests, so we retry here so that hour-long\n",
                      "markdown": "`cat <<EOF > setup.py\nimport setuptools\n\nfrom requests import Timeout\nfrom socket import error as SocketError\n\n# Some environments have network issues that drop connections to pypi\n# when running integration tests, so we retry here so that hour-long\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/tools/integration.sh"
                },
                "region": {
                  "startLine": 94,
                  "endLine": 95,
                  "endColumn": 4,
                  "snippet": {
                    "text": "console_scripts =\n    test_cmd = test_project:main\nEOF\n\ncat <<EOF > setup.py\nimport setuptools\n\nfrom requests import Timeout\n",
                    "rendered": {
                      "text": "console_scripts =\n    test_cmd = test_project:main\nEOF\n\ncat <<EOF > setup.py\nimport setuptools\n\nfrom requests import Timeout\n",
                      "markdown": "`console_scripts =\n    test_cmd = test_project:main\nEOF\n\ncat <<EOF > setup.py\nimport setuptools\n\nfrom requests import Timeout\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/tools/integration.sh"
                },
                "region": {
                  "startLine": 85,
                  "endLine": 86,
                  "endColumn": 4,
                  "snippet": {
                    "text": "eptest=$tmpdir/eptest\nmkdir $eptest\ncd $eptest\n\ncat <<EOF > setup.cfg\n[metadata]\nname = test_project\n\n",
                    "rendered": {
                      "text": "eptest=$tmpdir/eptest\nmkdir $eptest\ncd $eptest\n\ncat <<EOF > setup.cfg\n[metadata]\nname = test_project\n\n",
                      "markdown": "`eptest=$tmpdir/eptest\nmkdir $eptest\ncd $eptest\n\ncat <<EOF > setup.cfg\n[metadata]\nname = test_project\n\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/tools/integration.sh"
                },
                "region": {
                  "startLine": 76,
                  "startColumn": 2,
                  "endLine": 76,
                  "endColumn": 7,
                  "snippet": {
                    "text": "cd $pbrsdistdir\n\n# Prepare a wheel and flag whether a change to PBR is being tested\nif git fetch $ZUUL_URL/$ZUUL_PROJECT $ZUUL_REF ; then\n    mkvenv wheel\n    wheel/bin/python setup.py bdist_wheel\n    PBR_CHANGE=1\n",
                    "rendered": {
                      "text": "cd $pbrsdistdir\n\n# Prepare a wheel and flag whether a change to PBR is being tested\nif git fetch $ZUUL_URL/$ZUUL_PROJECT $ZUUL_REF ; then\n    mkvenv wheel\n    wheel/bin/python setup.py bdist_wheel\n    PBR_CHANGE=1\n",
                      "markdown": "`cd $pbrsdistdir\n\n# Prepare a wheel and flag whether a change to PBR is being tested\nif git fetch $ZUUL_URL/$ZUUL_PROJECT $ZUUL_REF ; then\n    mkvenv wheel\n    wheel/bin/python setup.py bdist_wheel\n    PBR_CHANGE=1\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/tools/integration.sh"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 28,
                  "endLine": 72,
                  "endColumn": 4,
                  "snippet": {
                    "text": "# PROJECTS is a list of projects that we're testing\nPROJECTS=$*\n\npbrsdistdir=$tmpdir/pbrsdist\ngit clone $REPODIR/pbr $pbrsdistdir\ncd $pbrsdistdir\n\n# Prepare a wheel and flag whether a change to PBR is being tested\n",
                    "rendered": {
                      "text": "# PROJECTS is a list of projects that we're testing\nPROJECTS=$*\n\npbrsdistdir=$tmpdir/pbrsdist\ngit clone $REPODIR/pbr $pbrsdistdir\ncd $pbrsdistdir\n\n# Prepare a wheel and flag whether a change to PBR is being tested\n",
                      "markdown": "`# PROJECTS is a list of projects that we're testing\nPROJECTS=$*\n\npbrsdistdir=$tmpdir/pbrsdist\ngit clone $REPODIR/pbr $pbrsdistdir\ncd $pbrsdistdir\n\n# Prepare a wheel and flag whether a change to PBR is being tested\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/tools/integration.sh"
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 8,
                  "endLine": 56,
                  "endColumn": 13,
                  "snippet": {
                    "text": "    $tmpdir/wheelhouse/bin/pip install -U $PIPVERSION\n    # We have pip in global-requirements as open-ended requirements,\n    # but since we don't use -U in any other invocations, our version\n    # of pip should be sticky.\nfi\n# Build wheels for everything so we don't hit the network on each venv.\n# Not all packages properly build wheels (httpretty for example).\n",
                    "rendered": {
                      "text": "    $tmpdir/wheelhouse/bin/pip install -U $PIPVERSION\n    # We have pip in global-requirements as open-ended requirements,\n    # but since we don't use -U in any other invocations, our version\n    # of pip should be sticky.\nfi\n# Build wheels for everything so we don't hit the network on each venv.\n# Not all packages properly build wheels (httpretty for example).\n",
                      "markdown": "`    $tmpdir/wheelhouse/bin/pip install -U $PIPVERSION\n    # We have pip in global-requirements as open-ended requirements,\n    # but since we don't use -U in any other invocations, our version\n    # of pip should be sticky.\nfi\n# Build wheels for everything so we don't hit the network on each venv.\n# Not all packages properly build wheels (httpretty for example).\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/tools/integration.sh"
                },
                "region": {
                  "startLine": 54,
                  "startColumn": 13,
                  "endLine": 54,
                  "endColumn": 18,
                  "snippet": {
                    "text": "    # This version will now be installed in every new venv.\n    export PIPVERSION=\"$td/$(ls $td)\"\n    $tmpdir/wheelhouse/bin/pip install -U $PIPVERSION\n    # We have pip in global-requirements as open-ended requirements,\n    # but since we don't use -U in any other invocations, our version\n    # of pip should be sticky.\nfi\n",
                    "rendered": {
                      "text": "    # This version will now be installed in every new venv.\n    export PIPVERSION=\"$td/$(ls $td)\"\n    $tmpdir/wheelhouse/bin/pip install -U $PIPVERSION\n    # We have pip in global-requirements as open-ended requirements,\n    # but since we don't use -U in any other invocations, our version\n    # of pip should be sticky.\nfi\n",
                      "markdown": "`    # This version will now be installed in every new venv.\n    export PIPVERSION=\"$td/$(ls $td)\"\n    $tmpdir/wheelhouse/bin/pip install -U $PIPVERSION\n    # We have pip in global-requirements as open-ended requirements,\n    # but since we don't use -U in any other invocations, our version\n    # of pip should be sticky.\nfi\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/tools/integration.sh"
                },
                "region": {
                  "startLine": 46,
                  "startColumn": 10,
                  "endLine": 46,
                  "endColumn": 15,
                  "snippet": {
                    "text": "# Set up a wheelhouse\nexport WHEELHOUSE=${WHEELHOUSE:-$tmpdir/.wheelhouse}\nmkvenv $tmpdir/wheelhouse\n# Specific PIP version - must succeed to be useful.\n# - build/download a local wheel so we don't hit the network on each venv.\nif [ -n \"${PBR_PIP_VERSION:-}\" ]; then\n    td=$(mktemp -d)\n",
                    "rendered": {
                      "text": "# Set up a wheelhouse\nexport WHEELHOUSE=${WHEELHOUSE:-$tmpdir/.wheelhouse}\nmkvenv $tmpdir/wheelhouse\n# Specific PIP version - must succeed to be useful.\n# - build/download a local wheel so we don't hit the network on each venv.\nif [ -n \"${PBR_PIP_VERSION:-}\" ]; then\n    td=$(mktemp -d)\n",
                      "markdown": "`# Set up a wheelhouse\nexport WHEELHOUSE=${WHEELHOUSE:-$tmpdir/.wheelhouse}\nmkvenv $tmpdir/wheelhouse\n# Specific PIP version - must succeed to be useful.\n# - build/download a local wheel so we don't hit the network on each venv.\nif [ -n \"${PBR_PIP_VERSION:-}\" ]; then\n    td=$(mktemp -d)\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/tools/integration.sh"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 4,
                  "endLine": 36,
                  "endColumn": 13,
                  "snippet": {
                    "text": "sudo apt-get install -y --force-yes libvirt-dev libxml2-dev libxslt-dev libmysqlclient-dev libpq-dev libnspr4-dev pkg-config libsqlite3-dev libffi-dev libldap2-dev libsasl2-dev ccache libkrb5-dev liberasurecode-dev libjpeg-dev libsystemd-dev libnss3-dev libssl-dev\n\n# FOR pyyaml\nsudo apt-get install -y --force-yes debhelper python3-all-dev python3-all-dbg libyaml-dev cython3 cython3-dbg quilt\n\n# And use ccache explitly\nexport PATH=/usr/lib/ccache:$PATH\n",
                    "rendered": {
                      "text": "sudo apt-get install -y --force-yes libvirt-dev libxml2-dev libxslt-dev libmysqlclient-dev libpq-dev libnspr4-dev pkg-config libsqlite3-dev libffi-dev libldap2-dev libsasl2-dev ccache libkrb5-dev liberasurecode-dev libjpeg-dev libsystemd-dev libnss3-dev libssl-dev\n\n# FOR pyyaml\nsudo apt-get install -y --force-yes debhelper python3-all-dev python3-all-dbg libyaml-dev cython3 cython3-dbg quilt\n\n# And use ccache explitly\nexport PATH=/usr/lib/ccache:$PATH\n",
                      "markdown": "`sudo apt-get install -y --force-yes libvirt-dev libxml2-dev libxslt-dev libmysqlclient-dev libpq-dev libnspr4-dev pkg-config libsqlite3-dev libffi-dev libldap2-dev libsasl2-dev ccache libkrb5-dev liberasurecode-dev libjpeg-dev libsystemd-dev libnss3-dev libssl-dev\n\n# FOR pyyaml\nsudo apt-get install -y --force-yes debhelper python3-all-dev python3-all-dbg libyaml-dev cython3 cython3-dbg quilt\n\n# And use ccache explitly\nexport PATH=/usr/lib/ccache:$PATH\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/tools/integration.sh"
                },
                "region": {
                  "startLine": 33,
                  "startColumn": 4,
                  "endLine": 33,
                  "endColumn": 13,
                  "snippet": {
                    "text": "\n# TODO: Figure out how to get this on to the box properly\nsudo apt-get update\nsudo apt-get install -y --force-yes libvirt-dev libxml2-dev libxslt-dev libmysqlclient-dev libpq-dev libnspr4-dev pkg-config libsqlite3-dev libffi-dev libldap2-dev libsasl2-dev ccache libkrb5-dev liberasurecode-dev libjpeg-dev libsystemd-dev libnss3-dev libssl-dev\n\n# FOR pyyaml\nsudo apt-get install -y --force-yes debhelper python3-all-dev python3-all-dbg libyaml-dev cython3 cython3-dbg quilt\n",
                    "rendered": {
                      "text": "\n# TODO: Figure out how to get this on to the box properly\nsudo apt-get update\nsudo apt-get install -y --force-yes libvirt-dev libxml2-dev libxslt-dev libmysqlclient-dev libpq-dev libnspr4-dev pkg-config libsqlite3-dev libffi-dev libldap2-dev libsasl2-dev ccache libkrb5-dev liberasurecode-dev libjpeg-dev libsystemd-dev libnss3-dev libssl-dev\n\n# FOR pyyaml\nsudo apt-get install -y --force-yes debhelper python3-all-dev python3-all-dbg libyaml-dev cython3 cython3-dbg quilt\n",
                      "markdown": "`\n# TODO: Figure out how to get this on to the box properly\nsudo apt-get update\nsudo apt-get install -y --force-yes libvirt-dev libxml2-dev libxslt-dev libmysqlclient-dev libpq-dev libnspr4-dev pkg-config libsqlite3-dev libffi-dev libldap2-dev libsasl2-dev ccache libkrb5-dev liberasurecode-dev libjpeg-dev libsystemd-dev libnss3-dev libssl-dev\n\n# FOR pyyaml\nsudo apt-get install -y --force-yes debhelper python3-all-dev python3-all-dbg libyaml-dev cython3 cython3-dbg quilt\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/tools/integration.sh"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 4,
                  "endLine": 32,
                  "endColumn": 13,
                  "snippet": {
                    "text": "REPODIR=${REPODIR:-$BASE/openstack}\n\n# TODO: Figure out how to get this on to the box properly\nsudo apt-get update\nsudo apt-get install -y --force-yes libvirt-dev libxml2-dev libxslt-dev libmysqlclient-dev libpq-dev libnspr4-dev pkg-config libsqlite3-dev libffi-dev libldap2-dev libsasl2-dev ccache libkrb5-dev liberasurecode-dev libjpeg-dev libsystemd-dev libnss3-dev libssl-dev\n\n# FOR pyyaml\n",
                    "rendered": {
                      "text": "REPODIR=${REPODIR:-$BASE/openstack}\n\n# TODO: Figure out how to get this on to the box properly\nsudo apt-get update\nsudo apt-get install -y --force-yes libvirt-dev libxml2-dev libxslt-dev libmysqlclient-dev libpq-dev libnspr4-dev pkg-config libsqlite3-dev libffi-dev libldap2-dev libsasl2-dev ccache libkrb5-dev liberasurecode-dev libjpeg-dev libsystemd-dev libnss3-dev libssl-dev\n\n# FOR pyyaml\n",
                      "markdown": "`REPODIR=${REPODIR:-$BASE/openstack}\n\n# TODO: Figure out how to get this on to the box properly\nsudo apt-get update\nsudo apt-get install -y --force-yes libvirt-dev libxml2-dev libxslt-dev libmysqlclient-dev libpq-dev libnspr4-dev pkg-config libsqlite3-dev libffi-dev libldap2-dev libsasl2-dev ccache libkrb5-dev liberasurecode-dev libjpeg-dev libsystemd-dev libnss3-dev libssl-dev\n\n# FOR pyyaml\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/tools/integration.sh"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 29,
                  "endLine": 26,
                  "endColumn": 34,
                  "snippet": {
                    "text": "}\n\n# BASE should be a directory with a subdir called \"openstack\" and in that\n#      dir, there should be a git repository for every entry in PROJECTS\nBASE=${BASE:-/home/zuul/src/opendev.org/}\n\nREPODIR=${REPODIR:-$BASE/openstack}\n",
                    "rendered": {
                      "text": "}\n\n# BASE should be a directory with a subdir called \"openstack\" and in that\n#      dir, there should be a git repository for every entry in PROJECTS\nBASE=${BASE:-/home/zuul/src/opendev.org/}\n\nREPODIR=${REPODIR:-$BASE/openstack}\n",
                      "markdown": "`}\n\n# BASE should be a directory with a subdir called \"openstack\" and in that\n#      dir, there should be a git repository for every entry in PROJECTS\nBASE=${BASE:-/home/zuul/src/opendev.org/}\n\nREPODIR=${REPODIR:-$BASE/openstack}\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/tools/integration.sh"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 47,
                  "endLine": 9,
                  "snippet": {
                    "text": "# WHEELHOUSE :- if not set, use a temporary wheelhouse, set to a specific path\n#    to use an existing one.\n# PIPFLAGS :- may be set to any pip global option for e.g. debugging.\n# Bootstrappping the mkenv needs to install *a* pip\nexport PIPVERSION=pip\nPIPFLAGS=${PIPFLAGS:-}\n\nfunction mkvenv {\n",
                    "rendered": {
                      "text": "# WHEELHOUSE :- if not set, use a temporary wheelhouse, set to a specific path\n#    to use an existing one.\n# PIPFLAGS :- may be set to any pip global option for e.g. debugging.\n# Bootstrappping the mkenv needs to install *a* pip\nexport PIPVERSION=pip\nPIPFLAGS=${PIPFLAGS:-}\n\nfunction mkvenv {\n",
                      "markdown": "`# WHEELHOUSE :- if not set, use a temporary wheelhouse, set to a specific path\n#    to use an existing one.\n# PIPFLAGS :- may be set to any pip global option for e.g. debugging.\n# Bootstrappping the mkenv needs to install *a* pip\nexport PIPVERSION=pip\nPIPFLAGS=${PIPFLAGS:-}\n\nfunction mkvenv {\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/tools/integration.sh"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 31,
                  "endLine": 7,
                  "endColumn": 36,
                  "snippet": {
                    "text": "#    valid reference file entry describing what pip to use.\n# WHEELHOUSE :- if not set, use a temporary wheelhouse, set to a specific path\n#    to use an existing one.\n# PIPFLAGS :- may be set to any pip global option for e.g. debugging.\n# Bootstrappping the mkenv needs to install *a* pip\nexport PIPVERSION=pip\nPIPFLAGS=${PIPFLAGS:-}\n",
                    "rendered": {
                      "text": "#    valid reference file entry describing what pip to use.\n# WHEELHOUSE :- if not set, use a temporary wheelhouse, set to a specific path\n#    to use an existing one.\n# PIPFLAGS :- may be set to any pip global option for e.g. debugging.\n# Bootstrappping the mkenv needs to install *a* pip\nexport PIPVERSION=pip\nPIPFLAGS=${PIPFLAGS:-}\n",
                      "markdown": "`#    valid reference file entry describing what pip to use.\n# WHEELHOUSE :- if not set, use a temporary wheelhouse, set to a specific path\n#    to use an existing one.\n# PIPFLAGS :- may be set to any pip global option for e.g. debugging.\n# Bootstrappping the mkenv needs to install *a* pip\nexport PIPVERSION=pip\nPIPFLAGS=${PIPFLAGS:-}\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/tools/integration.sh"
                },
                "region": {
                  "startLine": 4,
                  "startColumn": 47,
                  "endLine": 4,
                  "endColumn": 52,
                  "snippet": {
                    "text": "#!/bin/bash -xe\n# Parameters:\n# PBR_PIP_VERSION :- if not set, run pip's latest release, if set must be a\n#    valid reference file entry describing what pip to use.\n# WHEELHOUSE :- if not set, use a temporary wheelhouse, set to a specific path\n#    to use an existing one.\n# PIPFLAGS :- may be set to any pip global option for e.g. debugging.\n",
                    "rendered": {
                      "text": "#!/bin/bash -xe\n# Parameters:\n# PBR_PIP_VERSION :- if not set, run pip's latest release, if set must be a\n#    valid reference file entry describing what pip to use.\n# WHEELHOUSE :- if not set, use a temporary wheelhouse, set to a specific path\n#    to use an existing one.\n# PIPFLAGS :- may be set to any pip global option for e.g. debugging.\n",
                      "markdown": "`#!/bin/bash -xe\n# Parameters:\n# PBR_PIP_VERSION :- if not set, run pip's latest release, if set must be a\n#    valid reference file entry describing what pip to use.\n# WHEELHOUSE :- if not set, use a temporary wheelhouse, set to a specific path\n#    to use an existing one.\n# PIPFLAGS :- may be set to any pip global option for e.g. debugging.\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/doc/source/user/packagers.rst"
                },
                "region": {
                  "startLine": 113,
                  "startColumn": 45,
                  "endLine": 113,
                  "endColumn": 51,
                  "snippet": {
                    "text": "-------------\n\n*pbr* generates a release notes file, typically called ``RELEASENOTES.rst``,\nif `reno`_ is present and configured. You may wish to disable this\nfunctionality. If that is the case setting ``SKIP_GENERATE_RENO``\n\n::\n",
                    "rendered": {
                      "text": "-------------\n\n*pbr* generates a release notes file, typically called ``RELEASENOTES.rst``,\nif `reno`_ is present and configured. You may wish to disable this\nfunctionality. If that is the case setting ``SKIP_GENERATE_RENO``\n\n::\n",
                      "markdown": "`-------------\n\n*pbr* generates a release notes file, typically called ``RELEASENOTES.rst``,\nif `reno`_ is present and configured. You may wish to disable this\nfunctionality. If that is the case setting ``SKIP_GENERATE_RENO``\n\n::\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/doc/source/user/packagers.rst"
                },
                "region": {
                  "startLine": 79,
                  "startColumn": 13,
                  "endLine": 79,
                  "endColumn": 19,
                  "snippet": {
                    "text": "\nwill cause all logic around using git to find the files that should be in the\nsource tarball to be skipped. Beware though, that because *pbr* packages\nautomatically find all of the files, most of them do not have a complete\n``MANIFEST.in`` file, so its possible that a tarball produced in that way will\nbe missing files.\n\n",
                    "rendered": {
                      "text": "\nwill cause all logic around using git to find the files that should be in the\nsource tarball to be skipped. Beware though, that because *pbr* packages\nautomatically find all of the files, most of them do not have a complete\n``MANIFEST.in`` file, so its possible that a tarball produced in that way will\nbe missing files.\n\n",
                      "markdown": "`\nwill cause all logic around using git to find the files that should be in the\nsource tarball to be skipped. Beware though, that because *pbr* packages\nautomatically find all of the files, most of them do not have a complete\n``MANIFEST.in`` file, so its possible that a tarball produced in that way will\nbe missing files.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/doc/source/user/packagers.rst"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 40,
                  "endLine": 77,
                  "endColumn": 46,
                  "snippet": {
                    "text": "\n  export SKIP_GIT_SDIST=1\n\nwill cause all logic around using git to find the files that should be in the\nsource tarball to be skipped. Beware though, that because *pbr* packages\nautomatically find all of the files, most of them do not have a complete\n``MANIFEST.in`` file, so its possible that a tarball produced in that way will\n",
                    "rendered": {
                      "text": "\n  export SKIP_GIT_SDIST=1\n\nwill cause all logic around using git to find the files that should be in the\nsource tarball to be skipped. Beware though, that because *pbr* packages\nautomatically find all of the files, most of them do not have a complete\n``MANIFEST.in`` file, so its possible that a tarball produced in that way will\n",
                      "markdown": "`\n  export SKIP_GIT_SDIST=1\n\nwill cause all logic around using git to find the files that should be in the\nsource tarball to be skipped. Beware though, that because *pbr* packages\nautomatically find all of the files, most of them do not have a complete\n``MANIFEST.in`` file, so its possible that a tarball produced in that way will\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/doc/source/user/packagers.rst"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 33,
                  "endLine": 77,
                  "endColumn": 38,
                  "snippet": {
                    "text": "\n  export SKIP_GIT_SDIST=1\n\nwill cause all logic around using git to find the files that should be in the\nsource tarball to be skipped. Beware though, that because *pbr* packages\nautomatically find all of the files, most of them do not have a complete\n``MANIFEST.in`` file, so its possible that a tarball produced in that way will\n",
                    "rendered": {
                      "text": "\n  export SKIP_GIT_SDIST=1\n\nwill cause all logic around using git to find the files that should be in the\nsource tarball to be skipped. Beware though, that because *pbr* packages\nautomatically find all of the files, most of them do not have a complete\n``MANIFEST.in`` file, so its possible that a tarball produced in that way will\n",
                      "markdown": "`\n  export SKIP_GIT_SDIST=1\n\nwill cause all logic around using git to find the files that should be in the\nsource tarball to be skipped. Beware though, that because *pbr* packages\nautomatically find all of the files, most of them do not have a complete\n``MANIFEST.in`` file, so its possible that a tarball produced in that way will\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/doc/source/user/packagers.rst"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 57,
                  "endLine": 39,
                  "endColumn": 62,
                  "snippet": {
                    "text": "recommend with either packaging pre-release releases (alpha/beta/rc's) or dev\nsnapshots but not both.  Secondly, as pre-releases and snapshots have the same\nmajor/minor/patch version as the version they lead up to, but have to sort\nbefore it, we cannot map their version naturally into the rpm version\nnamespace: instead we represent their versions as versions of the release\nbefore.\n\n",
                    "rendered": {
                      "text": "recommend with either packaging pre-release releases (alpha/beta/rc's) or dev\nsnapshots but not both.  Secondly, as pre-releases and snapshots have the same\nmajor/minor/patch version as the version they lead up to, but have to sort\nbefore it, we cannot map their version naturally into the rpm version\nnamespace: instead we represent their versions as versions of the release\nbefore.\n\n",
                      "markdown": "`recommend with either packaging pre-release releases (alpha/beta/rc's) or dev\nsnapshots but not both.  Secondly, as pre-releases and snapshots have the same\nmajor/minor/patch version as the version they lead up to, but have to sort\nbefore it, we cannot map their version naturally into the rpm version\nnamespace: instead we represent their versions as versions of the release\nbefore.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/doc/source/user/packagers.rst"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 69,
                  "endLine": 39,
                  "snippet": {
                    "text": "complex (perhaps intractable) to package both into one repository - we\nrecommend with either packaging pre-release releases (alpha/beta/rc's) or dev\nsnapshots but not both.  Secondly, as pre-releases and snapshots have the same\nmajor/minor/patch version as the version they lead up to, but have to sort\nbefore it, we cannot map their version naturally into the rpm version\nnamespace: instead we represent their versions as versions of the release\nbefore.\n\n",
                    "rendered": {
                      "text": "complex (perhaps intractable) to package both into one repository - we\nrecommend with either packaging pre-release releases (alpha/beta/rc's) or dev\nsnapshots but not both.  Secondly, as pre-releases and snapshots have the same\nmajor/minor/patch version as the version they lead up to, but have to sort\nbefore it, we cannot map their version naturally into the rpm version\nnamespace: instead we represent their versions as versions of the release\nbefore.\n\n",
                      "markdown": "`complex (perhaps intractable) to package both into one repository - we\nrecommend with either packaging pre-release releases (alpha/beta/rc's) or dev\nsnapshots but not both.  Secondly, as pre-releases and snapshots have the same\nmajor/minor/patch version as the version they lead up to, but have to sort\nbefore it, we cannot map their version naturally into the rpm version\nnamespace: instead we represent their versions as versions of the release\nbefore.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/doc/source/user/packagers.rst"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 7,
                  "endLine": 34,
                  "endColumn": 13,
                  "snippet": {
                    "text": "*pbr* will automatically calculate upstream version numbers for *dpkg* and\n*rpm* using systems. Releases are easy (and obvious). When packaging\npre-releases though things get more complex. Firstly, semver does not provide\nfor any sort order between pre-releases and development snapshots, so it can be\ncomplex (perhaps intractable) to package both into one repository - we\nrecommend with either packaging pre-release releases (alpha/beta/rc's) or dev\nsnapshots but not both.  Secondly, as pre-releases and snapshots have the same\n",
                    "rendered": {
                      "text": "*pbr* will automatically calculate upstream version numbers for *dpkg* and\n*rpm* using systems. Releases are easy (and obvious). When packaging\npre-releases though things get more complex. Firstly, semver does not provide\nfor any sort order between pre-releases and development snapshots, so it can be\ncomplex (perhaps intractable) to package both into one repository - we\nrecommend with either packaging pre-release releases (alpha/beta/rc's) or dev\nsnapshots but not both.  Secondly, as pre-releases and snapshots have the same\n",
                      "markdown": "`*pbr* will automatically calculate upstream version numbers for *dpkg* and\n*rpm* using systems. Releases are easy (and obvious). When packaging\npre-releases though things get more complex. Firstly, semver does not provide\nfor any sort order between pre-releases and development snapshots, so it can be\ncomplex (perhaps intractable) to package both into one repository - we\nrecommend with either packaging pre-release releases (alpha/beta/rc's) or dev\nsnapshots but not both.  Secondly, as pre-releases and snapshots have the same\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/doc/source/user/packagers.rst"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 44,
                  "endLine": 18,
                  "endColumn": 49,
                  "snippet": {
                    "text": "pull the version from that. So for the most part, the package maintainers\nshouldn't need to care. However, if you are doing something like keeping a\ngit repo with the sources and the packaging intermixed and it's causing pbr\nto get confused about whether its in its own git repo or not, you can set\n``PBR_VERSION``:\n\n::\n",
                    "rendered": {
                      "text": "pull the version from that. So for the most part, the package maintainers\nshouldn't need to care. However, if you are doing something like keeping a\ngit repo with the sources and the packaging intermixed and it's causing pbr\nto get confused about whether its in its own git repo or not, you can set\n``PBR_VERSION``:\n\n::\n",
                      "markdown": "`pull the version from that. So for the most part, the package maintainers\nshouldn't need to care. However, if you are doing something like keeping a\ngit repo with the sources and the packaging intermixed and it's causing pbr\nto get confused about whether its in its own git repo or not, you can set\n``PBR_VERSION``:\n\n::\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/doc/source/user/packagers.rst"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 74,
                  "endLine": 17,
                  "endColumn": 4,
                  "snippet": {
                    "text": "*pbr*, when run in a git repo, derives the version of a package from the\ngit tags. When run in a tarball with a proper egg-info dir, it will happily\npull the version from that. So for the most part, the package maintainers\nshouldn't need to care. However, if you are doing something like keeping a\ngit repo with the sources and the packaging intermixed and it's causing pbr\nto get confused about whether its in its own git repo or not, you can set\n``PBR_VERSION``:\n\n",
                    "rendered": {
                      "text": "*pbr*, when run in a git repo, derives the version of a package from the\ngit tags. When run in a tarball with a proper egg-info dir, it will happily\npull the version from that. So for the most part, the package maintainers\nshouldn't need to care. However, if you are doing something like keeping a\ngit repo with the sources and the packaging intermixed and it's causing pbr\nto get confused about whether its in its own git repo or not, you can set\n``PBR_VERSION``:\n\n",
                      "markdown": "`*pbr*, when run in a git repo, derives the version of a package from the\ngit tags. When run in a tarball with a proper egg-info dir, it will happily\npull the version from that. So for the most part, the package maintainers\nshouldn't need to care. However, if you are doing something like keeping a\ngit repo with the sources and the packaging intermixed and it's causing pbr\nto get confused about whether its in its own git repo or not, you can set\n``PBR_VERSION``:\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/doc/source/user/packagers.rst"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 72,
                  "endLine": 14,
                  "endColumn": 4,
                  "snippet": {
                    "text": "Versioning\n----------\n\n*pbr*, when run in a git repo, derives the version of a package from the\ngit tags. When run in a tarball with a proper egg-info dir, it will happily\npull the version from that. So for the most part, the package maintainers\nshouldn't need to care. However, if you are doing something like keeping a\ngit repo with the sources and the packaging intermixed and it's causing pbr\n",
                    "rendered": {
                      "text": "Versioning\n----------\n\n*pbr*, when run in a git repo, derives the version of a package from the\ngit tags. When run in a tarball with a proper egg-info dir, it will happily\npull the version from that. So for the most part, the package maintainers\nshouldn't need to care. However, if you are doing something like keeping a\ngit repo with the sources and the packaging intermixed and it's causing pbr\n",
                      "markdown": "`Versioning\n----------\n\n*pbr*, when run in a git repo, derives the version of a package from the\ngit tags. When run in a tarball with a proper egg-info dir, it will happily\npull the version from that. So for the most part, the package maintainers\nshouldn't need to care. However, if you are doing something like keeping a\ngit repo with the sources and the packaging intermixed and it's causing pbr\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/doc/source/user/packagers.rst"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 20,
                  "endLine": 13,
                  "endColumn": 25,
                  "snippet": {
                    "text": "Versioning\n----------\n\n*pbr*, when run in a git repo, derives the version of a package from the\ngit tags. When run in a tarball with a proper egg-info dir, it will happily\npull the version from that. So for the most part, the package maintainers\nshouldn't need to care. However, if you are doing something like keeping a\n",
                    "rendered": {
                      "text": "Versioning\n----------\n\n*pbr*, when run in a git repo, derives the version of a package from the\ngit tags. When run in a tarball with a proper egg-info dir, it will happily\npull the version from that. So for the most part, the package maintainers\nshouldn't need to care. However, if you are doing something like keeping a\n",
                      "markdown": "`Versioning\n----------\n\n*pbr*, when run in a git repo, derives the version of a package from the\ngit tags. When run in a tarball with a proper egg-info dir, it will happily\npull the version from that. So for the most part, the package maintainers\nshouldn't need to care. However, if you are doing something like keeping a\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/doc/source/conf.py"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 23,
                  "endLine": 7,
                  "snippet": {
                    "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n# not use this file except in compliance with the License. You may obtain\n# a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "#\n# Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n# not use this file except in compliance with the License. You may obtain\n# a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`#\n# Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n# not use this file except in compliance with the License. You may obtain\n# a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/doc/source/conf.py"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 20,
                  "endLine": 2,
                  "endColumn": 25,
                  "snippet": {
                    "text": "# -*- coding: utf-8 -*-\n# Copyright (C) 2020 Red Hat, Inc.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n# not use this file except in compliance with the License. You may obtain\n",
                    "rendered": {
                      "text": "# -*- coding: utf-8 -*-\n# Copyright (C) 2020 Red Hat, Inc.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n# not use this file except in compliance with the License. You may obtain\n",
                      "markdown": "`# -*- coding: utf-8 -*-\n# Copyright (C) 2020 Red Hat, Inc.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\"); you may\n# not use this file except in compliance with the License. You may obtain\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/pyproject.toml.future"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 49,
                  "endLine": 3,
                  "endColumn": 53,
                  "snippet": {
                    "text": "# PBR doesn't use the pyproject.toml interface internally yet as\n# fixing issues in the system will be difficult if PBR itself\n# depends on it. We will put this file into place at pyproject.toml\n# once we are more confident it works generally.\n\n[build-system]\n",
                    "rendered": {
                      "text": "# PBR doesn't use the pyproject.toml interface internally yet as\n# fixing issues in the system will be difficult if PBR itself\n# depends on it. We will put this file into place at pyproject.toml\n# once we are more confident it works generally.\n\n[build-system]\n",
                      "markdown": "`# PBR doesn't use the pyproject.toml interface internally yet as\n# fixing issues in the system will be difficult if PBR itself\n# depends on it. We will put this file into place at pyproject.toml\n# once we are more confident it works generally.\n\n[build-system]\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/.zuul.yaml"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 12,
                  "endLine": 8,
                  "endColumn": 20,
                  "snippet": {
                    "text": "      Base job for pbr jobs that install openstack packages with current\n      pbr. This ensures we don't break our ability to install openstack.\n    required-projects:\n      # TODO update this list with current active python projects\n      - openstack/pbr\n      - openstack/tripleo-ci\n      - openstack/aodh\n",
                    "rendered": {
                      "text": "      Base job for pbr jobs that install openstack packages with current\n      pbr. This ensures we don't break our ability to install openstack.\n    required-projects:\n      # TODO update this list with current active python projects\n      - openstack/pbr\n      - openstack/tripleo-ci\n      - openstack/aodh\n",
                      "markdown": "`      Base job for pbr jobs that install openstack packages with current\n      pbr. This ensures we don't break our ability to install openstack.\n    required-projects:\n      # TODO update this list with current active python projects\n      - openstack/pbr\n      - openstack/tripleo-ci\n      - openstack/aodh\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/.zuul.yaml"
                },
                "region": {
                  "startLine": 113,
                  "startColumn": 50,
                  "endLine": 113,
                  "endColumn": 55,
                  "snippet": {
                    "text": "    nodeset: ubuntu-focal\n    description: |\n      Run pbr integration testing on older Ubuntu which allows us\n      to test compatibility with older versions of pip and setuptools.\n\n- project:\n    templates:\n",
                    "rendered": {
                      "text": "    nodeset: ubuntu-focal\n    description: |\n      Run pbr integration testing on older Ubuntu which allows us\n      to test compatibility with older versions of pip and setuptools.\n\n- project:\n    templates:\n",
                      "markdown": "`    nodeset: ubuntu-focal\n    description: |\n      Run pbr integration testing on older Ubuntu which allows us\n      to test compatibility with older versions of pip and setuptools.\n\n- project:\n    templates:\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/pbr-6.0.0.zip/.zuul.yaml"
                },
                "region": {
                  "startLine": 102,
                  "startColumn": 46,
                  "endLine": 102,
                  "endColumn": 51,
                  "snippet": {
                    "text": "- job:\n    name: pbr-installation-openstack-pip-dev\n    description: |\n      This job runs the pbr installations with pip trunk.\n    parent: pbr-installation-openstack\n    vars:\n      pbr_pip_version: 'git+https://github.com/pypa/pip.git#egg=pip'\n",
                    "rendered": {
                      "text": "- job:\n    name: pbr-installation-openstack-pip-dev\n    description: |\n      This job runs the pbr installations with pip trunk.\n    parent: pbr-installation-openstack\n    vars:\n      pbr_pip_version: 'git+https://github.com/pypa/pip.git#egg=pip'\n",
                      "markdown": "`- job:\n    name: pbr-installation-openstack-pip-dev\n    description: |\n      This job runs the pbr installations with pip trunk.\n    parent: pbr-installation-openstack\n    vars:\n      pbr_pip_version: 'git+https://github.com/pypa/pip.git#egg=pip'\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        }
      ],
      "columnKind": "utf16CodeUnits"
    }
  ]
}